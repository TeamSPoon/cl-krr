
/*
(subclass OrganismRemains OrganicObject)
*/
fof(a1,axiom,s_subclass(s_OrganismRemains, s_OrganicObject)).

/*
(forall (?X)
 (=> (instance ?X OrganismRemains)
  (holdsDuring (WhenFn ?X) (attribute ?X Dead))))
*/
%% no translation to TPTP available.

/*
(forall (?T2 ?REM ?OBJ)
 (exists (?ORG ?T1)
  (and (and (instance ?T1 TimeInterval) (instance ?ORG Object))
       (=> (and (instance ?T2 TimePosition) (instance ?OBJ Object))
        (=>
         (and (instance ?REM OrganismRemains)
              (holdsDuring ?T2 (part ?OBJ ?REM)))
         (and (instance ?ORG Organism)
              (and (earlier (WhenFn ?ORG) (WhenFn ?REM))
                   (and (instance ?T1 TimeInterval)
                        (and (finishes ?T1 (WhenFn ?ORG))
                             (holdsDuring ?T1 (part ?OBJ ?ORG)))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?REM ?ORG ?DEATH)
 (=>
  (and (instance ?REM OrganicObject)
       (and (instance ?DEATH Death)
            (and (instance ?ORG Organism)
                 (and (experiencer ?DEATH ?ORG)
                      (result ?DEATH ?REM)))))
  (instance ?REM OrganismRemains)))
*/
fof(a2,axiom,! [REM,ORG,DEATH] : (((s_instance(REM, s_OrganicObject) & (s_instance(DEATH, s_Death) & (s_instance(ORG, s_Organism) & (s_experiencer(DEATH, ORG) & s_result(DEATH, REM))))) => s_instance(REM, s_OrganismRemains)))).

/*
(forall (?REM)
 (exists (?DEATH)
  (and (instance ?DEATH Process)
       (=> (instance ?REM OrganismRemains)
        (and (instance ?DEATH Death) (result ?DEATH ?REM))))))
*/
fof(a3,axiom,! [REM] : (? [DEATH] : ((s_instance(DEATH, s_Process) & (s_instance(REM, s_OrganismRemains) => (s_instance(DEATH, s_Death) & s_result(DEATH, REM))))))).

/*
(forall (?OBJ ?ORG ?DEATH ?REM ?T2 ?T1)
 (=>
  (and (instance ?OBJ Object) (instance ?T2 TimeInterval)
       (instance ?T1 TimeInterval))
  (=>
   (and (instance ?DEATH Death)
        (and (instance ?REM OrganismRemains)
             (and (instance ?ORG Organism)
                  (and (holdsDuring ?T2 (part ?OBJ ?REM))
                       (and (holdsDuring ?T1 (part ?OBJ ?ORG))
                            (and (earlier ?T1 ?T2)
                                 (result ?DEATH ?REM)))))))
   (experiencer ?DEATH ?ORG))))
*/
%% no translation to TPTP available.

/*
(forall (?REM ?OBJ ?DEATH ?ORG ?T2 ?T1)
 (=>
  (and (instance ?OBJ Object) (instance ?T2 TimeInterval)
       (instance ?T1 TimeInterval))
  (=>
   (and (instance ?DEATH Death)
        (and (instance ?REM OrganismRemains)
             (and (instance ?ORG Organism)
                  (and (holdsDuring ?T2 (part ?OBJ ?REM))
                       (and (holdsDuring ?T1 (part ?OBJ ?ORG))
                            (and (earlier ?T1 ?T2)
                                 (experiencer ?DEATH ?ORG)))))))
   (result ?DEATH ?REM))))
*/
%% no translation to TPTP available.

/*
(forall (?ORG)
 (=> (instance ?ORG Organism)
  (holdsDuring (WhenFn ?ORG) (attribute ?ORG Living))))
*/
%% no translation to TPTP available.

/*
(instance HumanCorpse SetOrClass)
*/
fof(a4,axiom,s_instance(s_HumanCorpse, s_SetOrClass)).

/*
(instance OrganismRemains SetOrClass)
*/
fof(a5,axiom,s_instance(s_OrganismRemains, s_SetOrClass)).

/*
(subclass HumanCorpse OrganismRemains)
*/
fof(a6,axiom,s_subclass(s_HumanCorpse, s_OrganismRemains)).

/*
(forall (?X)
 (=> (instance ?X HumanCorpse) (instance ?X (DeadFn Human))))
*/
fof(a7,axiom,! [X] : ((s_instance(X, s_HumanCorpse) => s_instance(X, s_DeadFn(s_Human))))).

/*
(instance DeadFn UnaryFunction)
*/
fof(a8,axiom,s_instance(s_DeadFn_m, s_UnaryFunction)).

/*
(domainSubclass DeadFn 1 Organism)
*/
fof(a9,axiom,s_domainSubclass(s_DeadFn_m, 1, s_Organism)).

/*
(rangeSubclass DeadFn OrganismRemains)
*/
fof(a10,axiom,s_rangeSubclass(s_DeadFn_m, s_OrganismRemains)).

/*
(forall (?ORGTYPE ?ORG ?REM ?DEATH)
 (=>
  (and (instance ?ORGTYPE SetOrClass) (subclass ?ORGTYPE Organism)
       (instance ?ORG Agent) (instance ?REM Entity))
  (=>
   (and (instance ?REM (DeadFn ?ORGTYPE))
        (and (instance ?DEATH Death)
             (and (result ?DEATH ?REM) (experiencer ?DEATH ?ORG))))
   (instance ?ORG ?ORGTYPE))))
*/
fof(a11,axiom,! [ORGTYPE,ORG,REM,DEATH] : (((s_instance(ORGTYPE, s_SetOrClass) & s_subclass(ORGTYPE, s_Organism) & s_instance(ORG, s_Agent) & s_instance(REM, s_Entity)) => ((s_instance(REM, s_DeadFn(ORGTYPE)) & (s_instance(DEATH, s_Death) & (s_result(DEATH, REM) & s_experiencer(DEATH, ORG)))) => s_instance(ORG, ORGTYPE))))).

/*
(forall (?ORGTYPE ?ORG ?REM ?DEATH)
 (=> (and (instance ?ORGTYPE SetOrClass) (subclass ?ORGTYPE Organism))
  (=>
   (and (instance ?REM OrganicObject)
        (and (instance ?DEATH Death)
             (and (experiencer ?DEATH ?ORG)
                  (and (instance ?ORG ?ORGTYPE)
                       (and (subclass ?ORG Organism)
                            (result ?DEATH ?REM))))))
   (instance ?REM (DeadFn ?ORGTYPE)))))
*/
fof(a12,axiom,! [ORGTYPE,ORG,REM,DEATH] : (((s_instance(ORGTYPE, s_SetOrClass) & s_subclass(ORGTYPE, s_Organism)) => ((s_instance(REM, s_OrganicObject) & (s_instance(DEATH, s_Death) & (s_experiencer(DEATH, ORG) & (s_instance(ORG, ORGTYPE) & (s_subclass(ORG, s_Organism) & s_result(DEATH, REM)))))) => s_instance(REM, s_DeadFn(ORGTYPE)))))).

/*
(instance HumanSlave SocialRole)
*/
fof(a13,axiom,s_instance(s_HumanSlave, s_SocialRole)).

/*
(forall (?SLAVE ?TIME)
 (exists (?PERSON)
  (and (instance ?PERSON Agent)
       (=> (and (instance ?TIME TimePosition) (instance ?SLAVE Object))
        (=> (holdsDuring ?TIME (attribute ?SLAVE HumanSlave))
         (and (instance ?PERSON Human)
              (and (not (equal ?PERSON ?SLAVE))
                   (holdsDuring ?TIME (possesses ?PERSON ?SLAVE)))))))))
*/
%% no translation to TPTP available.

/*
(subclass HumanAdult Human)
*/
fof(a14,axiom,s_subclass(s_HumanAdult, s_Human)).

/*
(subclass HumanAdult LegalAgent)
*/
fof(a15,axiom,s_subclass(s_HumanAdult, s_LegalAgent)).

/*
(forall (?TIME ?NUMBER ?ADULT)
 (=>
  (and (instance ?ADULT Object) (instance ?NUMBER RealNumber)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (instance ?ADULT HumanAdult)
         (age ?ADULT (MeasureFn ?NUMBER YearDuration))))
   (greaterThanOrEqualTo ?NUMBER 18))))
*/
%% no translation to TPTP available.

/*
(forall (?H ?TIME)
 (exists (?AGE)
  (and (instance ?AGE TimeDuration)
       (=> (and (instance ?TIME TimePosition) (instance ?H Object))
        (=> (holdsDuring ?TIME (instance ?H HumanAdult))
         (and (holdsDuring ?TIME (age ?H ?AGE))
              (instance ?AGE
               (IntervalFn (MeasureFn 18 YearDuration)
                (MeasureFn 120 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?N ?H)
 (=> (and (instance ?T1 TimePosition) (instance ?N RealNumber))
  (=>
   (and (instance ?H Human)
        (and (holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
             (greaterThanOrEqualTo ?N 18)))
   (holdsDuring ?T1 (instance ?H HumanAdult)))))
*/
%% no translation to TPTP available.

/*
(forall (?ADULT ?TIME)
 (=>
  (and (instance ?TIME TimePosition) (instance ?ADULT OrganicObject))
  (=> (holdsDuring ?TIME (instance ?ADULT HumanAdult))
   (holdsDuring ?TIME (developmentalForm ?ADULT FullyFormed)))))
*/
%% no translation to TPTP available.

/*
(forall (?ORG ?TIME)
 (=> (instance ?TIME TimePosition)
  (=>
   (and (instance ?ORG Human)
        (holdsDuring ?TIME (attribute ?ORG FullyFormed)))
   (holdsDuring ?TIME (instance ?ORG HumanAdult)))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?ATTR ?ORG)
 (=> (instance ?TIME TimePosition)
  (=>
   (and (instance ?ORG OrganicObject)
        (and (instance ?ATTR DevelopmentalAttribute)
             (holdsDuring ?TIME (property ?ORG ?ATTR))))
   (holdsDuring ?TIME (developmentalForm ?ORG ?ATTR)))))
*/
%% no translation to TPTP available.

/*
(subclass HumanYouth Human)
*/
fof(a16,axiom,s_subclass(s_HumanYouth, s_Human)).

/*
(forall (?TIME ?NUMBER ?YOUTH)
 (=>
  (and (instance ?YOUTH Object) (instance ?NUMBER RealNumber)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (instance ?YOUTH HumanYouth)
         (age ?YOUTH (MeasureFn ?NUMBER YearDuration))))
   (lessThan ?NUMBER 18))))
*/
%% no translation to TPTP available.

/*
(forall (?H ?TIME)
 (exists (?AGE)
  (and (instance ?AGE TimeDuration)
       (=> (and (instance ?TIME TimePosition) (instance ?H Object))
        (=> (holdsDuring ?TIME (instance ?H HumanYouth))
         (and (holdsDuring ?TIME (age ?H ?AGE))
              (instance ?AGE
               (IntervalFn (MeasureFn 0 YearDuration)
                (MeasureFn 17 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?N ?H)
 (=> (and (instance ?T1 TimePosition) (instance ?N RealNumber))
  (=>
   (and (instance ?H Human)
        (and (holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
             (lessThan ?N 18)))
   (holdsDuring ?T1 (instance ?H HumanYouth)))))
*/
%% no translation to TPTP available.

/*
(instance HumanYouth SetOrClass)
*/
fof(a17,axiom,s_instance(s_HumanYouth, s_SetOrClass)).

/*
(subclass HumanChild HumanYouth)
*/
fof(a18,axiom,s_subclass(s_HumanChild, s_HumanYouth)).

/*
(forall (?CHILD ?TIME)
 (=>
  (and (instance ?TIME TimePosition) (instance ?CHILD OrganicObject))
  (=> (holdsDuring ?TIME (instance ?CHILD HumanChild))
   (holdsDuring ?TIME (developmentalForm ?CHILD NonFullyFormed)))))
*/
%% no translation to TPTP available.

/*
(forall (?CHILD ?TIME)
 (=> (instance ?TIME TimePosition)
  (=>
   (and (instance ?CHILD Human)
        (holdsDuring ?TIME (attribute ?CHILD NonFullyFormed)))
   (holdsDuring ?TIME (instance ?CHILD HumanYouth)))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?NUMBER ?CHILD)
 (=>
  (and (instance ?CHILD Object) (instance ?NUMBER RealNumber)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (instance ?CHILD HumanChild)
         (age ?CHILD (MeasureFn ?NUMBER YearDuration))))
   (lessThanOrEqualTo ?NUMBER 14))))
*/
%% no translation to TPTP available.

/*
(forall (?H ?TIME)
 (exists (?AGE)
  (and (instance ?AGE TimeDuration)
       (=> (and (instance ?TIME TimePosition) (instance ?H Object))
        (=> (holdsDuring ?TIME (instance ?H HumanChild))
         (and (holdsDuring ?TIME (age ?H ?AGE))
              (instance ?AGE
               (IntervalFn (MeasureFn 0 YearDuration)
                (MeasureFn 14 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?N ?H)
 (=> (and (instance ?T1 TimePosition) (instance ?N RealNumber))
  (=>
   (and (instance ?H Human)
        (and (holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
             (lessThanOrEqualTo ?N 14)))
   (holdsDuring ?T1 (instance ?H HumanChild)))))
*/
%% no translation to TPTP available.

/*
(instance Teenager SetOrClass)
*/
fof(a19,axiom,s_instance(s_Teenager, s_SetOrClass)).

/*
(subclass Teenager Human)
*/
fof(a20,axiom,s_subclass(s_Teenager, s_Human)).

/*
(forall (?TIME ?NUMBER ?TEEN)
 (=>
  (and (instance ?TEEN Object) (instance ?NUMBER RealNumber)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (instance ?TEEN Teenager)
         (age ?TEEN (MeasureFn ?NUMBER YearDuration))))
   (and (greaterThan ?NUMBER 12) (lessThan ?NUMBER 20)))))
*/
%% no translation to TPTP available.

/*
(forall (?H ?TIME)
 (exists (?AGE)
  (and (instance ?AGE TimeDuration)
       (=> (and (instance ?TIME TimePosition) (instance ?H Object))
        (=> (holdsDuring ?TIME (instance ?H Teenager))
         (and (holdsDuring ?TIME (age ?H ?AGE))
              (instance ?AGE
               (IntervalFn (MeasureFn 13 YearDuration)
                (MeasureFn 19 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?N ?H)
 (=> (and (instance ?T1 TimePosition) (instance ?N RealNumber))
  (=>
   (and (instance ?H Human)
        (and (holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
             (and (greaterThan ?N 12) (lessThan ?N 20))))
   (holdsDuring ?T1 (instance ?H Teenager)))))
*/
%% no translation to TPTP available.

/*
(subclass Boy HumanChild)
*/
fof(a21,axiom,s_subclass(s_Boy, s_HumanChild)).

/*
(instance Boy SetOrClass)
*/
fof(a22,axiom,s_instance(s_Boy, s_SetOrClass)).

/*
(subclass Boy Man)
*/
fof(a23,axiom,s_subclass(s_Boy, s_Man)).

/*
(forall (?H ?T1)
 (=> (and (instance ?T1 TimePosition) (instance ?H Object))
  (=>
   (holdsDuring ?T1 (and (instance ?H HumanChild) (attribute ?H Male)))
   (holdsDuring ?T1 (instance ?H Boy)))))
*/
%% no translation to TPTP available.

/*
(subclass Girl HumanChild)
*/
fof(a24,axiom,s_subclass(s_Girl, s_HumanChild)).

/*
(instance Girl SetOrClass)
*/
fof(a25,axiom,s_instance(s_Girl, s_SetOrClass)).

/*
(subclass Girl Woman)
*/
fof(a26,axiom,s_subclass(s_Girl, s_Woman)).

/*
(forall (?H ?T1)
 (=> (and (instance ?T1 TimePosition) (instance ?H Object))
  (=>
   (holdsDuring ?T1
    (and (instance ?H HumanChild) (attribute ?H Female)))
   (holdsDuring ?T1 (instance ?H Girl)))))
*/
%% no translation to TPTP available.

/*
(instance HumanBaby SetOrClass)
*/
fof(a27,axiom,s_instance(s_HumanBaby, s_SetOrClass)).

/*
(instance HumanChild SetOrClass)
*/
fof(a28,axiom,s_instance(s_HumanChild, s_SetOrClass)).

/*
(subclass HumanBaby HumanChild)
*/
fof(a29,axiom,s_subclass(s_HumanBaby, s_HumanChild)).

/*
(forall (?TIME ?NUMBER ?BABY)
 (=>
  (and (instance ?BABY Object) (instance ?NUMBER RealNumber)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (instance ?BABY HumanBaby)
         (age ?BABY (MeasureFn ?NUMBER YearDuration))))
   (lessThanOrEqualTo ?NUMBER 1))))
*/
%% no translation to TPTP available.

/*
(forall (?BABY ?TIME)
 (exists (?AGE)
  (and (instance ?AGE TimeDuration)
       (=> (and (instance ?TIME TimePosition) (instance ?BABY Object))
        (=> (holdsDuring ?TIME (instance ?BABY HumanBaby))
         (and (holdsDuring ?TIME (age ?BABY ?AGE))
              (instance ?AGE
               (IntervalFn (MeasureFn 0 YearDuration)
                (MeasureFn 1 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?N ?H)
 (=> (and (instance ?T1 TimePosition) (instance ?N RealNumber))
  (=>
   (and (instance ?H Human)
        (and (holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
             (lessThanOrEqualTo ?N 1)))
   (holdsDuring ?T1 (instance ?H HumanBaby)))))
*/
%% no translation to TPTP available.

/*
(instance older BinaryPredicate)
*/
fof(a30,axiom,s_instance(s_older_m, s_BinaryPredicate)).

/*
(forall (?O2 ?O1)
 (exists (?N1 ?N2 ?U)
  (and (and (instance ?U UnitOfMeasure) (instance ?N2 RealNumber)
            (instance ?N1 RealNumber))
       (=> (and (instance ?O1 Object) (instance ?O2 Object))
        (=> (older ?O1 ?O2)
         (and (age ?O1 (MeasureFn ?N1 ?U))
              (and (age ?O2 (MeasureFn ?N2 ?U))
                   (greaterThan ?N1 ?N2))))))))
*/
fof(a31,axiom,! [O2,O1] : (? [N1,N2,U] : (((s_instance(U, s_UnitOfMeasure) & s_instance(N2, s_RealNumber) & s_instance(N1, s_RealNumber)) & ((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => (s_older(O1, O2) => (s_age(O1, s_MeasureFn(N1, U)) & (s_age(O2, s_MeasureFn(N2, U)) & greater(N1, N2))))))))).

/*
(instance StartFn UnaryFunction)
*/
fof(a32,axiom,s_instance(s_StartFn_m, s_UnaryFunction)).

/*
(rangeSubclass StartFn IntentionalProcess)
*/
fof(a33,axiom,s_rangeSubclass(s_StartFn_m, s_IntentionalProcess)).

/*
(forall (?P ?S)
 (exists (?I)
  (and (instance ?I Physical)
       (=>
        (and (instance ?S Physical) (instance ?P Process)
             (instance ?P SetOrClass))
        (=> (instance ?S (StartFn ?P))
         (and (instance ?I ?P) (starts (WhenFn ?S) (WhenFn ?I))))))))
*/
fof(a34,axiom,! [P,S] : (? [I] : ((s_instance(I, s_Physical) & ((s_instance(S, s_Physical) & s_instance(P, s_Process) & s_instance(P, s_SetOrClass)) => (s_instance(S, s_StartFn(P)) => (s_instance(I, P) & s_starts(s_WhenFn(S), s_WhenFn(I))))))))).

/*
(instance StopFn UnaryFunction)
*/
fof(a35,axiom,s_instance(s_StopFn_m, s_UnaryFunction)).

/*
(rangeSubclass StopFn IntentionalProcess)
*/
fof(a36,axiom,s_rangeSubclass(s_StopFn_m, s_IntentionalProcess)).

/*
(forall (?P ?S)
 (exists (?I)
  (and (instance ?I Physical)
       (=>
        (and (instance ?S Physical) (instance ?P Process)
             (instance ?P SetOrClass))
        (=> (instance ?S (StopFn ?P))
         (and (instance ?I ?P) (finishes (WhenFn ?S) (WhenFn ?I))))))))
*/
fof(a37,axiom,! [P,S] : (? [I] : ((s_instance(I, s_Physical) & ((s_instance(S, s_Physical) & s_instance(P, s_Process) & s_instance(P, s_SetOrClass)) => (s_instance(S, s_StopFn(P)) => (s_instance(I, P) & s_finishes(s_WhenFn(S), s_WhenFn(I))))))))).

/*
(subclass Dodging BodyMotion)
*/
fof(a38,axiom,s_subclass(s_Dodging, s_BodyMotion)).

/*
(instance Dodging SetOrClass)
*/
fof(a39,axiom,s_instance(s_Dodging, s_SetOrClass)).

/*
(subclass Dodging IntentionalProcess)
*/
fof(a40,axiom,s_subclass(s_Dodging, s_IntentionalProcess)).

/*
(forall (?DT ?A ?D)
 (=> (and (instance ?DT TimeInterval) (instance ?A Agent))
  (=>
   (and (instance ?D Dodging)
        (and (agent ?D ?A) (equal ?DT (WhenFn ?D))))
   (hasPurpose ?D
    (not (exists (?I)
          (and (or (meetsTemporally ?DT (WhenFn ?I))
                   (overlapsTemporally ?DT (WhenFn ?I)))
               (and (instance ?I Impacting) (patient ?I ?A)))))))))
*/
%% no translation to TPTP available.

/*
(instance Mounting SetOrClass)
*/
fof(a41,axiom,s_instance(s_Mounting, s_SetOrClass)).

/*
(subclass Mounting BodyMotion)
*/
fof(a42,axiom,s_subclass(s_Mounting, s_BodyMotion)).

/*
(forall (?O ?A ?M)
 (=> (and (instance ?O Object) (instance ?A Agent))
  (=> (and (instance ?M Mounting) (and (agent ?M ?A) (patient ?M ?O)))
   (and (holdsDuring (BeginFn (WhenFn ?M))
         (not (orientation ?A ?O On)))
        (holdsDuring (EndFn (WhenFn ?M)) (orientation ?A ?O On))))))
*/
%% no translation to TPTP available.

/*
(instance Stepping SetOrClass)
*/
fof(a43,axiom,s_instance(s_Stepping, s_SetOrClass)).

/*
(subclass Stepping BodyMotion)
*/
fof(a44,axiom,s_subclass(s_Stepping, s_BodyMotion)).

/*
(forall (?AMBULATE ?DURATION)
 (exists (?STEP1 ?STEPN)
  (and (and (instance ?STEPN Process) (instance ?STEP1 Process))
       (=> (instance ?DURATION TimeInterval)
        (=>
         (and (instance ?AMBULATE Ambulating)
              (equal ?DURATION (WhenFn ?AMBULATE)))
         (and (instance ?STEP1 Stepping)
              (and (instance ?STEPN Stepping)
                   (and (subProcess ?STEP1 ?AMBULATE)
                        (and (subProcess ?STEPN ?AMBULATE)
                             (and (starts (WhenFn ?STEP1) ?DURATION)
                                  (and
                                   (finishes (WhenFn ?STEPN) ?DURATION)
                                   (not
                                    (equal ?STEP1 ?STEPN)))))))))))))
*/
fof(a45,axiom,! [AMBULATE,DURATION] : (? [STEP1,STEPN] : (((s_instance(STEPN, s_Process) & s_instance(STEP1, s_Process)) & (s_instance(DURATION, s_TimeInterval) => ((s_instance(AMBULATE, s_Ambulating) & (DURATION = s_WhenFn(AMBULATE))) => (s_instance(STEP1, s_Stepping) & (s_instance(STEPN, s_Stepping) & (s_subProcess(STEP1, AMBULATE) & (s_subProcess(STEPN, AMBULATE) & (s_starts(s_WhenFn(STEP1), DURATION) & (s_finishes(s_WhenFn(STEPN), DURATION) & (~ (STEP1 = STEPN)))))))))))))).

/*
(forall (?A ?S1 ?S1-START ?S2 ?S2-START)
 (=>
  (and (instance ?S1-START TimePoint) (instance ?S2-START TimePoint))
  (=>
   (and (instance ?A Ambulating)
        (and (subProcess ?S1 ?A)
             (and (instance ?S1 Stepping)
                  (and (subProcess ?S2 ?A)
                       (and (instance ?S2 Stepping)
                            (and (equal
                                  ?S1-START
                                  (BeginFn (WhenFn ?S1)))
                                 (and
                                  (equal
                                   ?S2-START
                                   (BeginFn (WhenFn ?S2)))
                                  (not
                                   (or
                                    (before ?S1-START ?S2-START)
                                    (before
                                     ?S2-START
                                     ?S1-START))))))))))
   (equal ?S1 ?S2))))
*/
fof(a46,axiom,! [A,S1,S1_START,S2,S2_START] : (((s_instance(S1_START, s_TimePoint) & s_instance(S2_START, s_TimePoint)) => ((s_instance(A, s_Ambulating) & (s_subProcess(S1, A) & (s_instance(S1, s_Stepping) & (s_subProcess(S2, A) & (s_instance(S2, s_Stepping) & ((S1_START = s_BeginFn(s_WhenFn(S1))) & ((S2_START = s_BeginFn(s_WhenFn(S2))) & (~ (s_before(S1_START, S2_START) | s_before(S2_START, S1_START)))))))))) => (S1 = S2))))).

/*
(forall (?AGENT ?AMBULATE ?STEP)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?AMBULATE Ambulating)
        (and (instance ?STEP Stepping)
             (and (subProcess ?STEP ?AMBULATE)
                  (agent ?AMBULATE ?AGENT))))
   (agent ?STEP ?AGENT))))
*/
fof(a47,axiom,! [AGENT,AMBULATE,STEP] : ((s_instance(AGENT, s_Agent) => ((s_instance(AMBULATE, s_Ambulating) & (s_instance(STEP, s_Stepping) & (s_subProcess(STEP, AMBULATE) & s_agent(AMBULATE, AGENT)))) => s_agent(STEP, AGENT))))).

/*
(forall (?AGENT ?AMBULATE ?STEP)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?AMBULATE Ambulating)
        (and (instance ?STEP Stepping)
             (and (subProcess ?STEP ?AMBULATE) (agent ?STEP ?AGENT))))
   (agent ?AMBULATE ?AGENT))))
*/
fof(a48,axiom,! [AGENT,AMBULATE,STEP] : ((s_instance(AGENT, s_Agent) => ((s_instance(AMBULATE, s_Ambulating) & (s_instance(STEP, s_Stepping) & (s_subProcess(STEP, AMBULATE) & s_agent(STEP, AGENT)))) => s_agent(AMBULATE, AGENT))))).

/*
(instance Wading SetOrClass)
*/
fof(a49,axiom,s_instance(s_Wading, s_SetOrClass)).

/*
(subclass Wading Walking)
*/
fof(a50,axiom,s_subclass(s_Wading, s_Walking)).

/*
(forall (?P)
 (exists (?W)
  (and (instance ?W Object)
       (=> (instance ?P Wading)
        (and (instance ?W WaterArea) (eventLocated ?P ?W))))))
*/
fof(a51,axiom,! [P] : (? [W] : ((s_instance(W, s_Object) & (s_instance(P, s_Wading) => (s_instance(W, s_WaterArea) & s_eventLocated(P, W))))))).

/*
(subclass Jumping BodyMotion)
*/
fof(a52,axiom,s_subclass(s_Jumping, s_BodyMotion)).

/*
(instance Jumping SetOrClass)
*/
fof(a53,axiom,s_instance(s_Jumping, s_SetOrClass)).

/*
(subclass Jumping MotionUpward)
*/
fof(a54,axiom,s_subclass(s_Jumping, s_MotionUpward)).

/*
(forall (?A ?J)
 (=> (instance ?A Agent)
  (=> (and (instance ?J Jumping) (agent ?J ?A))
   (holdsDuring (EndFn (WhenFn ?J)) (not (attribute ?A Standing))))))
*/
%% no translation to TPTP available.

/*
(instance Somersaulting SetOrClass)
*/
fof(a55,axiom,s_instance(s_Somersaulting, s_SetOrClass)).

/*
(subclass Somersaulting BodyMotion)
*/
fof(a56,axiom,s_subclass(s_Somersaulting, s_BodyMotion)).

/*
(forall (?A ?S)
 (=> (instance ?A Agent)
  (=> (and (instance ?S Somersaulting) (agent ?S ?A))
   (and (holdsDuring (BeginFn (WhenFn ?S)) (attribute ?A Sitting))
        (holdsDuring (EndFn (WhenFn ?S)) (attribute ?A Sitting))))))
*/
%% no translation to TPTP available.

/*
(subclass Reflecting Radiating)
*/
fof(a57,axiom,s_subclass(s_Reflecting, s_Radiating)).

/*
(instance Reflecting SetOrClass)
*/
fof(a58,axiom,s_instance(s_Reflecting, s_SetOrClass)).

/*
(subclass ReflectingLight Reflecting)
*/
fof(a59,axiom,s_subclass(s_ReflectingLight, s_Reflecting)).

/*
(instance ReflectingLight SetOrClass)
*/
fof(a60,axiom,s_instance(s_ReflectingLight, s_SetOrClass)).

/*
(subclass ReflectingLight RadiatingLight)
*/
fof(a61,axiom,s_subclass(s_ReflectingLight, s_RadiatingLight)).

/*
(instance wavelength SingleValuedRelation)
*/
fof(a62,axiom,s_instance(s_wavelength_m, s_SingleValuedRelation)).

/*
(instance wavelength AsymmetricRelation)
*/
fof(a63,axiom,s_instance(s_wavelength_m, s_AsymmetricRelation)).

/*
(instance wavelength BinaryPredicate)
*/
fof(a64,axiom,s_instance(s_wavelength_m, s_BinaryPredicate)).

/*
(subclass RadiatingInfrared Radiating)
*/
fof(a65,axiom,s_subclass(s_RadiatingInfrared, s_Radiating)).

/*
(disjoint RadiatingInfrared RadiatingLight)
*/
fof(a66,axiom,s_disjoint(s_RadiatingInfrared, s_RadiatingLight)).

/*
(disjoint RadiatingInfrared RadioEmission)
*/
fof(a67,axiom,s_disjoint(s_RadiatingInfrared, s_RadioEmission)).

/*
(instance RadiatingUltraviolet SetOrClass)
*/
fof(a68,axiom,s_instance(s_RadiatingUltraviolet, s_SetOrClass)).

/*
(subclass RadiatingUltraviolet RadiatingElectromagnetic)
*/
fof(a69,axiom,s_subclass(s_RadiatingUltraviolet, s_RadiatingElectromagnetic)).

/*
(disjoint RadiatingUltraviolet RadiatingLight)
*/
fof(a70,axiom,s_disjoint(s_RadiatingUltraviolet, s_RadiatingLight)).

/*
(disjoint RadiatingUltraviolet RadiatingXRay)
*/
fof(a71,axiom,s_disjoint(s_RadiatingUltraviolet, s_RadiatingXRay)).

/*
(forall (?X)
 (exists (?M)
  (and (instance ?M LengthMeasure)
       (=> (instance ?X RadiatingXRay)
        (and (instance ?M LengthMeasure)
             (and (wavelength ?X ?M)
                  (and (greaterThanOrEqualTo ?X
                        (MeasureFn 0.01 Nanometer))
                       (greaterThan (MeasureFn 10 Nanometer) ?X))))))))
*/
fof(a72,axiom,! [X] : (? [M] : ((s_instance(M, s_LengthMeasure) & (s_instance(X, s_RadiatingXRay) => (s_instance(M, s_LengthMeasure) & (s_wavelength(X, M) & (s_greaterThanOrEqualTo(X, s_MeasureFn(0.01, s_Nanometer)) & greater(s_MeasureFn(10, s_Nanometer), X))))))))).

/*
(instance RadiatingVisibleLight SetOrClass)
*/
fof(a73,axiom,s_instance(s_RadiatingVisibleLight, s_SetOrClass)).

/*
(subclass RadiatingVisibleLight RadiatingLight)
*/
fof(a74,axiom,s_subclass(s_RadiatingVisibleLight, s_RadiatingLight)).

/*
(disjoint RadiatingVisibleLight RadiatingUltraviolet)
*/
fof(a75,axiom,s_disjoint(s_RadiatingVisibleLight, s_RadiatingUltraviolet)).

/*
(forall (?R ?H ?S)
 (=>
  (and (instance ?R RadiatingLight)
       (and (instance ?H Human)
            (and (instance ?S Seeing)
                 (and (agent ?S ?H) (patient ?S ?R)))))
  (instance ?R RadiatingVisibleLight)))
*/
fof(a76,axiom,! [R,H,S] : (((s_instance(R, s_RadiatingLight) & (s_instance(H, s_Human) & (s_instance(S, s_Seeing) & (s_agent(S, H) & s_patient(S, R))))) => s_instance(R, s_RadiatingVisibleLight)))).

/*
(instance Sunlight SetOrClass)
*/
fof(a77,axiom,s_instance(s_Sunlight, s_SetOrClass)).

/*
(subclass Sunlight RadiatingLight)
*/
fof(a78,axiom,s_subclass(s_Sunlight, s_RadiatingLight)).

/*
(subclass RadioReceiver ReceiverDevice)
*/
fof(a79,axiom,s_subclass(s_RadioReceiver, s_ReceiverDevice)).

/*
(instance Script SetOrClass)
*/
fof(a80,axiom,s_instance(s_Script, s_SetOrClass)).

/*
(subclass Script Collection)
*/
fof(a81,axiom,s_subclass(s_Script, s_Collection)).

/*
(forall (?W)
 (exists (?T ?C ?S)
  (and (and (instance ?S Collection) (instance ?C Object)
            (instance ?T Object))
       (=> (instance ?W WrittenCommunication)
        (and (result ?W ?T)
             (and (instance ?T Text)
                  (and (part ?C ?T)
                       (and (instance ?C Character)
                            (and (instance ?S Script)
                                 (member ?C ?S))))))))))
*/
fof(a82,axiom,! [W] : (? [T,C,S] : (((s_instance(S, s_Collection) & s_instance(C, s_Object) & s_instance(T, s_Object)) & (s_instance(W, s_WrittenCommunication) => (s_result(W, T) & (s_instance(T, s_Text) & (s_part(C, T) & (s_instance(C, s_Character) & (s_instance(S, s_Script) & s_member(C, S))))))))))).

/*
(instance Orthography SetOrClass)
*/
fof(a83,axiom,s_instance(s_Orthography, s_SetOrClass)).

/*
(subclass Orthography Procedure)
*/
fof(a84,axiom,s_subclass(s_Orthography, s_Procedure)).

/*
(instance Lyrics SetOrClass)
*/
fof(a85,axiom,s_instance(s_Lyrics, s_SetOrClass)).

/*
(subclass Lyrics Text)
*/
fof(a86,axiom,s_subclass(s_Lyrics, s_Text)).

/*
(forall (?LYRIC)
 (=> (instance ?LYRIC Lyrics)
  (hasPurpose ?LYRIC
   (exists (?SING)
    (and (instance ?SING Singing) (patient ?SING ?LYRIC))))))
*/
%% no translation to TPTP available.

/*
(instance Paragraph SetOrClass)
*/
fof(a87,axiom,s_instance(s_Paragraph, s_SetOrClass)).

/*
(subclass Paragraph Text)
*/
fof(a88,axiom,s_subclass(s_Paragraph, s_Text)).

/*
(forall (?T)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?T Paragraph)
        (and (instance ?S Sentence) (part ?S ?T))))))
*/
fof(a89,axiom,! [T] : (? [S] : ((s_instance(S, s_Object) & (s_instance(T, s_Paragraph) => (s_instance(S, s_Sentence) & s_part(S, T))))))).

/*
(subrelation sententialObject grammaticalRelation)
*/
fof(a90,axiom,s_subrelation(s_sententialObject_m, s_grammaticalRelation_m)).

/*
(subrelation sententialSubject grammaticalRelation)
*/
fof(a91,axiom,s_subrelation(s_sententialSubject_m, s_grammaticalRelation_m)).

/*
(instance speaksLanguage BinaryPredicate)
*/
fof(a92,axiom,s_instance(s_speaksLanguage_m, s_BinaryPredicate)).

/*
(instance MonophonicMusic RelationalAttribute)
*/
fof(a93,axiom,s_instance(s_MonophonicMusic, s_RelationalAttribute)).

/*
(instance PolyphonicMusic RelationalAttribute)
*/
fof(a94,axiom,s_instance(s_PolyphonicMusic, s_RelationalAttribute)).

/*
(forall (?MUSIC)
 (forall (?PART1 ?PART2)
  (exists (?g1040 ?g1041)
   (and (=> (attribute ?MUSIC PolyphonicMusic)
         (and (instance ?MUSIC MakingMusic)
              (and (instance ?g1040 MakingMusic)
                   (and (instance ?g1041 MakingMusic)
                        (and (subProcess ?g1040 ?MUSIC)
                             (and (subProcess ?g1041 ?MUSIC)
                                  (and
                                   (not (equal ?g1040 ?g1041))
                                   (and
                                    (cooccur ?g1040 ?MUSIC)
                                    (cooccur ?g1041 ?MUSIC)))))))))
        (=>
         (and (instance ?MUSIC MakingMusic)
              (and (instance ?PART1 MakingMusic)
                   (and (instance ?PART2 MakingMusic)
                        (and (subProcess ?PART1 ?MUSIC)
                             (and (subProcess ?PART2 ?MUSIC)
                                  (and
                                   (not (equal ?PART1 ?PART2))
                                   (and
                                    (cooccur ?PART1 ?MUSIC)
                                    (cooccur ?PART2 ?MUSIC))))))))
         (attribute ?MUSIC PolyphonicMusic))))))
*/
fof(a95,axiom,! [MUSIC] : (! [PART1,PART2] : (? [G1040,G1041] : (((s_attribute(MUSIC, s_PolyphonicMusic) => (s_instance(MUSIC, s_MakingMusic) & (s_instance(G1040, s_MakingMusic) & (s_instance(G1041, s_MakingMusic) & (s_subProcess(G1040, MUSIC) & (s_subProcess(G1041, MUSIC) & ((~ (G1040 = G1041)) & (s_cooccur(G1040, MUSIC) & s_cooccur(G1041, MUSIC))))))))) & ((s_instance(MUSIC, s_MakingMusic) & (s_instance(PART1, s_MakingMusic) & (s_instance(PART2, s_MakingMusic) & (s_subProcess(PART1, MUSIC) & (s_subProcess(PART2, MUSIC) & ((~ (PART1 = PART2)) & (s_cooccur(PART1, MUSIC) & s_cooccur(PART2, MUSIC)))))))) => s_attribute(MUSIC, s_PolyphonicMusic))))))).

/*
(instance MusicalTone SetOrClass)
*/
fof(a96,axiom,s_instance(s_MusicalTone, s_SetOrClass)).

/*
(subclass MusicalTone RadiatingSound)
*/
fof(a97,axiom,s_subclass(s_MusicalTone, s_RadiatingSound)).

/*
(instance RadiatingSoundUltrasonic SetOrClass)
*/
fof(a98,axiom,s_instance(s_RadiatingSoundUltrasonic, s_SetOrClass)).

/*
(subclass RadiatingSoundUltrasonic RadiatingSound)
*/
fof(a99,axiom,s_subclass(s_RadiatingSoundUltrasonic, s_RadiatingSound)).

/*
(instance soundFrequency BinaryPredicate)
*/
fof(a100,axiom,s_instance(s_soundFrequency_m, s_BinaryPredicate)).

/*
(instance WrittenCommunication SetOrClass)
*/
fof(a101,axiom,s_instance(s_WrittenCommunication, s_SetOrClass)).

/*
(subclass WrittenCommunication LinguisticCommunication)
*/
fof(a102,axiom,s_subclass(s_WrittenCommunication, s_LinguisticCommunication)).

/*
(instance VocalCords SetOrClass)
*/
fof(a103,axiom,s_instance(s_VocalCords, s_SetOrClass)).

/*
(subclass VocalCords Organ)
*/
fof(a104,axiom,s_subclass(s_VocalCords, s_Organ)).

/*
(typicalPart VocalCords Human)
*/
fof(a105,axiom,s_typicalPart(s_VocalCords, s_Human)).

/*
(typicallyContainsPart VocalCords Human)
*/
fof(a106,axiom,s_typicallyContainsPart(s_VocalCords, s_Human)).

/*
(initialPart VocalCords Human)
*/
fof(a107,axiom,s_initialPart(s_VocalCords, s_Human)).

/*
(subclass Vocalizing RadiatingSound)
*/
fof(a108,axiom,s_subclass(s_Vocalizing, s_RadiatingSound)).

/*
(forall (?VOCAL)
 (exists (?CORD ?ORGANISM)
  (and (and (instance ?ORGANISM Object) (instance ?CORD Object))
       (=> (instance ?VOCAL Vocalizing)
        (and (instance ?CORD VocalCords)
             (and (instrument ?VOCAL ?CORD)
                  (and (part ?VOCAL ?ORGANISM)
                       (instance ?ORGANISM Organism))))))))
*/
fof(a109,axiom,! [VOCAL] : (? [CORD,ORGANISM] : (((s_instance(ORGANISM, s_Object) & s_instance(CORD, s_Object)) & (s_instance(VOCAL, s_Vocalizing) => (s_instance(CORD, s_VocalCords) & (s_instrument(VOCAL, CORD) & (s_part(VOCAL, ORGANISM) & s_instance(ORGANISM, s_Organism))))))))).

/*
(subclass Speaking LinguisticCommunication)
*/
fof(a110,axiom,s_subclass(s_Speaking, s_LinguisticCommunication)).

/*
(subclass Speaking Vocalizing)
*/
fof(a111,axiom,s_subclass(s_Speaking, s_Vocalizing)).

/*
(instance Corresponding SetOrClass)
*/
fof(a112,axiom,s_instance(s_Corresponding, s_SetOrClass)).

/*
(subclass Corresponding LinguisticCommunication)
*/
fof(a113,axiom,s_subclass(s_Corresponding, s_LinguisticCommunication)).

/*
(forall (?C)
 (exists (?M ?T)
  (and (and (instance ?T Entity) (instance ?M Process))
       (=> (instance ?C Corresponding)
        (and (instance ?M Mailing)
             (and (subProcess ?M ?C)
                  (and (instance ?T Text)
                       (and (patient ?M ?T) (patient ?C ?T)))))))))
*/
fof(a114,axiom,! [C] : (? [M,T] : (((s_instance(T, s_Entity) & s_instance(M, s_Process)) & (s_instance(C, s_Corresponding) => (s_instance(M, s_Mailing) & (s_subProcess(M, C) & (s_instance(T, s_Text) & (s_patient(M, T) & s_patient(C, T)))))))))).

/*
(instance Reminding SetOrClass)
*/
fof(a115,axiom,s_instance(s_Reminding, s_SetOrClass)).

/*
(subclass Reminding Requesting)
*/
fof(a116,axiom,s_subclass(s_Reminding, s_Requesting)).

/*
(forall (?REMIND)
 (exists (?REMEMBER)
  (and (instance ?REMEMBER Process)
       (=> (instance ?REMIND Reminding)
        (and (instance ?REMEMBER Remembering)
             (causes ?REMIND ?REMEMBER))))))
*/
fof(a117,axiom,! [REMIND] : (? [REMEMBER] : ((s_instance(REMEMBER, s_Process) & (s_instance(REMIND, s_Reminding) => (s_instance(REMEMBER, s_Remembering) & s_causes(REMIND, REMEMBER))))))).

/*
(instance Threatening SetOrClass)
*/
fof(a118,axiom,s_instance(s_Threatening, s_SetOrClass)).

/*
(subclass Threatening Committing)
*/
fof(a119,axiom,s_subclass(s_Threatening, s_Committing)).

/*
(forall (?AGENT ?DEST ?PROP ?THREATEN)
 (=>
  (and (instance ?AGENT Agent) (instance ?DEST CognitiveAgent)
       (instance ?PROP Formula))
  (=>
   (and (instance ?THREATEN Threatening)
        (and (agent ?THREATEN ?AGENT)
             (and (patient ?THREATEN ?PROP)
                  (destination ?THREATEN ?DEST))))
   (not (desires ?DEST ?PROP)))))
*/
fof(a120,axiom,! [AGENT,DEST,PROP,THREATEN] : (((s_instance(AGENT, s_Agent) & s_instance(DEST, s_CognitiveAgent) & s_instance(PROP, s_Formula)) => ((s_instance(THREATEN, s_Threatening) & (s_agent(THREATEN, AGENT) & (s_patient(THREATEN, PROP) & s_destination(THREATEN, DEST)))) => (~ s_desires(DEST, PROP)))))).

/*
(instance Punishing SetOrClass)
*/
fof(a121,axiom,s_instance(s_Punishing, s_SetOrClass)).

/*
(subclass Punishing RegulatoryProcess)
*/
fof(a122,axiom,s_subclass(s_Punishing, s_RegulatoryProcess)).

/*
(forall (?A ?D ?F ?P)
 (=>
  (and (instance ?A CognitiveAgent) (instance ?D CognitiveAgent)
       (instance ?F Formula))
  (=>
   (and (instance ?P Punishing)
        (and (agent ?P ?A) (and (patient ?P ?F) (destination ?P ?D))))
   (knows ?A (not (desires ?D ?F))))))
*/
%% no translation to TPTP available.

/*
(subclass Registering Stating)
*/
fof(a123,axiom,s_subclass(s_Registering, s_Stating)).

/*
(instance Registering SetOrClass)
*/
fof(a124,axiom,s_instance(s_Registering, s_SetOrClass)).

/*
(subclass Registering PoliticalProcess)
*/
fof(a125,axiom,s_subclass(s_Registering, s_PoliticalProcess)).

/*
(forall (?ACTION)
 (exists (?REGISTER)
  (and (instance ?REGISTER Process)
       (=> (instance ?ACTION LegalAction)
        (and (instance ?REGISTER Registering)
             (subProcess ?REGISTER ?ACTION))))))
*/
fof(a126,axiom,! [ACTION] : (? [REGISTER] : ((s_instance(REGISTER, s_Process) & (s_instance(ACTION, s_LegalAction) => (s_instance(REGISTER, s_Registering) & s_subProcess(REGISTER, ACTION))))))).

/*
(instance Answering SetOrClass)
*/
fof(a127,axiom,s_instance(s_Answering, s_SetOrClass)).

/*
(subclass Answering Stating)
*/
fof(a128,axiom,s_subclass(s_Answering, s_Stating)).

/*
(forall (?ANSWER)
 (exists (?QUESTION)
  (and (instance ?QUESTION Physical)
       (=> (instance ?ANSWER Answering)
        (and (instance ?QUESTION Questioning)
             (and (refers ?ANSWER ?QUESTION)
                  (earlier (WhenFn ?QUESTION) (WhenFn ?ANSWER))))))))
*/
fof(a129,axiom,! [ANSWER] : (? [QUESTION] : ((s_instance(QUESTION, s_Physical) & (s_instance(ANSWER, s_Answering) => (s_instance(QUESTION, s_Questioning) & (s_refers(ANSWER, QUESTION) & s_earlier(s_WhenFn(QUESTION), s_WhenFn(ANSWER))))))))).

/*
(instance Arguing SetOrClass)
*/
fof(a130,axiom,s_instance(s_Arguing, s_SetOrClass)).

/*
(subclass Arguing Stating)
*/
fof(a131,axiom,s_subclass(s_Arguing, s_Stating)).

/*
(forall (?ARGUE)
 (exists (?STATEMENT ?ARGUMENT)
  (and (and (instance ?ARGUMENT Proposition)
            (instance ?STATEMENT ContentBearingPhysical))
       (=> (instance ?ARGUE Arguing)
        (and (patient ?ARGUE ?STATEMENT)
             (and (instance ?STATEMENT Statement)
                  (and (containsInformation ?STATEMENT ?ARGUMENT)
                       (instance ?ARGUMENT Argument))))))))
*/
fof(a132,axiom,! [ARGUE] : (? [STATEMENT,ARGUMENT] : (((s_instance(ARGUMENT, s_Proposition) & s_instance(STATEMENT, s_ContentBearingPhysical)) & (s_instance(ARGUE, s_Arguing) => (s_patient(ARGUE, STATEMENT) & (s_instance(STATEMENT, s_Statement) & (s_containsInformation(STATEMENT, ARGUMENT) & s_instance(ARGUMENT, s_Argument))))))))).

/*
(instance TellingALie SetOrClass)
*/
fof(a133,axiom,s_instance(s_TellingALie, s_SetOrClass)).

/*
(subclass TellingALie LinguisticCommunication)
*/
fof(a134,axiom,s_subclass(s_TellingALie, s_LinguisticCommunication)).

/*
(forall (?STATEMENT ?AGENT ?STATE)
 (=>
  (and (instance ?STATEMENT Sentence) (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance ?STATE TellingALie)
        (and (agent ?STATE ?AGENT) (patient ?STATE ?STATEMENT)))
   (holdsDuring (WhenFn ?STATE)
    (believes ?AGENT (truth ?STATEMENT False))))))
*/
%% no translation to TPTP available.

/*
(subclass Founding Declaring)
*/
fof(a135,axiom,s_subclass(s_Founding, s_Declaring)).

/*
(instance Founding SetOrClass)
*/
fof(a136,axiom,s_instance(s_Founding, s_SetOrClass)).

/*
(subclass Founding OrganizationalProcess)
*/
fof(a137,axiom,s_subclass(s_Founding, s_OrganizationalProcess)).

/*
(forall (?FOUND)
 (exists (?ORG)
  (and (instance ?ORG Entity)
       (=> (instance ?FOUND Founding)
        (and (instance ?ORG Organization) (result ?FOUND ?ORG))))))
*/
fof(a138,axiom,! [FOUND] : (? [ORG] : ((s_instance(ORG, s_Entity) & (s_instance(FOUND, s_Founding) => (s_instance(ORG, s_Organization) & s_result(FOUND, ORG))))))).

/*
(instance Club SetOrClass)
*/
fof(a139,axiom,s_instance(s_Club, s_SetOrClass)).

/*
(subclass Club Organization)
*/
fof(a140,axiom,s_subclass(s_Club, s_Organization)).

/*
(forall (?MEM2 ?CLUB ?MEM1)
 (exists (?DESIRE)
  (and (instance ?DESIRE Formula)
       (=>
        (and (instance ?MEM2 CognitiveAgent)
             (instance ?MEM1 CognitiveAgent))
        (=>
         (and (instance ?CLUB Club)
              (and (member ?MEM1 ?CLUB) (member ?MEM2 ?CLUB)))
         (and (desires ?MEM1 ?DESIRE) (desires ?MEM2 ?DESIRE)))))))
*/
fof(a141,axiom,! [MEM2,CLUB,MEM1] : (? [DESIRE] : ((s_instance(DESIRE, s_Formula) & ((s_instance(MEM2, s_CognitiveAgent) & s_instance(MEM1, s_CognitiveAgent)) => ((s_instance(CLUB, s_Club) & (s_member(MEM1, CLUB) & s_member(MEM2, CLUB))) => (s_desires(MEM1, DESIRE) & s_desires(MEM2, DESIRE)))))))).

/*
(instance yearOfFounding BinaryPredicate)
*/
fof(a142,axiom,s_instance(s_yearOfFounding_m, s_BinaryPredicate)).

/*
(instance yearOfFounding AsymmetricRelation)
*/
fof(a143,axiom,s_instance(s_yearOfFounding_m, s_AsymmetricRelation)).

/*
(forall (?Y ?O)
 (=> (and (instance ?O Organization) (instance ?Y Integer))
  (=> (yearOfFounding ?O ?Y) (dateEstablished ?O (YearFn ?Y)))))
*/
fof(a144,axiom,! [Y,O] : (((s_instance(O, s_Organization) & s_instance(Y, s_Integer)) => (s_yearOfFounding(O, Y) => s_dateEstablished(O, s_YearFn(Y)))))).

/*
(forall (?Y ?O)
 (forall (?F)
  (exists (?g1057)
   (=> (and (instance ?O Organization) (instance ?Y Integer))
    (and (=> (yearOfFounding ?O ?Y)
          (and (overlapsTemporally ?g1057 (YearFn ?Y))
               (and (instance ?g1057 Founding) (result ?g1057 ?O))))
         (=>
          (and (overlapsTemporally ?F (YearFn ?Y))
               (and (instance ?F Founding) (result ?F ?O)))
          (yearOfFounding ?O ?Y)))))))
*/
fof(a145,axiom,! [Y,O] : (! [F] : (? [G1057] : (((s_instance(O, s_Organization) & s_instance(Y, s_Integer)) => ((s_yearOfFounding(O, Y) => (s_overlapsTemporally(G1057, s_YearFn(Y)) & (s_instance(G1057, s_Founding) & s_result(G1057, O)))) & ((s_overlapsTemporally(F, s_YearFn(Y)) & (s_instance(F, s_Founding) & s_result(F, O))) => s_yearOfFounding(O, Y)))))))).

/*
(instance dateEstablished BinaryPredicate)
*/
fof(a146,axiom,s_instance(s_dateEstablished_m, s_BinaryPredicate)).

/*
(domainSubclass dateEstablished 2 TimePosition)
*/
fof(a147,axiom,s_domainSubclass(s_dateEstablished_m, 2, s_TimePosition)).

/*
(forall (?DATE ?THING)
 (exists (?DAY)
  (and (instance ?DAY TimeInterval)
       (=>
        (and (instance ?THING Physical) (subclass ?DATE TimePosition)
             (instance ?DATE SetOrClass))
        (=> (dateEstablished ?THING ?DATE)
         (and (instance ?DAY ?DATE)
              (overlapsTemporally ?DAY (BeginFn (WhenFn ?THING)))))))))
*/
fof(a148,axiom,! [DATE,THING] : (? [DAY] : ((s_instance(DAY, s_TimeInterval) & ((s_instance(THING, s_Physical) & s_subclass(DATE, s_TimePosition) & s_instance(DATE, s_SetOrClass)) => (s_dateEstablished(THING, DATE) => (s_instance(DAY, DATE) & s_overlapsTemporally(DAY, s_BeginFn(s_WhenFn(THING)))))))))).

/*
(instance dateUsed TernaryPredicate)
*/
fof(a149,axiom,s_instance(s_dateUsed_m, s_TernaryPredicate)).

/*
(forall (?OBJECT ?AGENT ?DATE)
 (exists (?PROCESS)
  (and (instance ?PROCESS Process)
       (=>
        (and (instance ?DATE TimeInterval) (instance ?DATE TimePoint)
             (instance ?AGENT Agent) (instance ?OBJECT Object))
        (=> (dateUsed ?OBJECT ?DATE ?AGENT)
         (and (instance ?PROCESS Process)
              (and (patient ?PROCESS ?OBJECT)
                   (and (agent ?PROCESS ?AGENT)
                        (and (uses ?OBJECT ?AGENT)
                             (overlapsTemporally ?DATE
                              (WhenFn ?PROCESS)))))))))))
*/
fof(a150,axiom,! [OBJECT,AGENT,DATE] : (? [PROCESS] : ((s_instance(PROCESS, s_Process) & ((s_instance(DATE, s_TimeInterval) & s_instance(DATE, s_TimePoint) & s_instance(AGENT, s_Agent) & s_instance(OBJECT, s_Object)) => (s_dateUsed(OBJECT, DATE, AGENT) => (s_instance(PROCESS, s_Process) & (s_patient(PROCESS, OBJECT) & (s_agent(PROCESS, AGENT) & (s_uses(OBJECT, AGENT) & s_overlapsTemporally(DATE, s_WhenFn(PROCESS)))))))))))).

/*
(instance Accrediting SetOrClass)
*/
fof(a151,axiom,s_instance(s_Accrediting, s_SetOrClass)).

/*
(subclass Accrediting Declaring)
*/
fof(a152,axiom,s_subclass(s_Accrediting, s_Declaring)).

/*
(forall (?EO ?A)
 (=> (instance ?EO Entity)
  (=> (and (instance ?A Accrediting) (patient ?A ?EO))
   (instance ?EO EducationalOrganization))))
*/
fof(a153,axiom,! [EO,A] : ((s_instance(EO, s_Entity) => ((s_instance(A, s_Accrediting) & s_patient(A, EO)) => s_instance(EO, s_EducationalOrganization))))).

/*
(subclass Indicating Communication)
*/
fof(a154,axiom,s_subclass(s_Indicating, s_Communication)).

/*
(instance Indicating SetOrClass)
*/
fof(a155,axiom,s_instance(s_Indicating, s_SetOrClass)).

/*
(subclass Indicating BodyMotion)
*/
fof(a156,axiom,s_subclass(s_Indicating, s_BodyMotion)).

/*
(instance Divorcing SetOrClass)
*/
fof(a157,axiom,s_instance(s_Divorcing, s_SetOrClass)).

/*
(subclass Divorcing Declaring)
*/
fof(a158,axiom,s_subclass(s_Divorcing, s_Declaring)).

/*
(forall (?D)
 (exists (?P1 ?P2 ?T1 ?T2)
  (and (and (instance ?T2 TimeInterval) (instance ?T1 TimeInterval)
            (instance ?P2 Human) (instance ?P1 Human))
       (=> (instance ?D Divorcing)
        (and (holdsDuring ?T1 (spouse ?P1 ?P2))
             (and (holdsDuring ?T2 (not (spouse ?P1 ?P2)))
                  (and (finishes ?T1 ?D) (starts ?T2 ?D))))))))
*/
%% no translation to TPTP available.

/*
(instance Appointing SetOrClass)
*/
fof(a159,axiom,s_instance(s_Appointing, s_SetOrClass)).

/*
(subclass Appointing Declaring)
*/
fof(a160,axiom,s_subclass(s_Appointing, s_Declaring)).

/*
(forall (?H ?A)
 (exists (?P ?ORG)
  (and (and (instance ?ORG Organization) (instance ?P Position))
       (=> (instance ?H Human)
        (=> (and (instance ?A Appointing) (patient ?A ?H))
         (and (holdsDuring (BeginFn (WhenFn ?A))
               (not (occupiesPosition ?H ?P ?ORG)))
              (holdsDuring (ImmediateFutureFn (WhenFn ?A))
               (occupiesPosition ?H ?P ?ORG))))))))
*/
%% no translation to TPTP available.

/*
(forall (?A)
 (forall (?H)
  (=> (instance ?H Agent)
   (=> (instance ?A Appointing)
    (not (and (agent ?A ?H) (instance ?H Public)))))))
*/
fof(a161,axiom,! [A] : (! [H] : ((s_instance(H, s_Agent) => (s_instance(A, s_Appointing) => (~ (s_agent(A, H) & s_instance(H, s_Public)))))))).

/*
(instance TurningOffDevice SetOrClass)
*/
fof(a162,axiom,s_instance(s_TurningOffDevice, s_SetOrClass)).

/*
(subclass TurningOffDevice InternalChange)
*/
fof(a163,axiom,s_subclass(s_TurningOffDevice, s_InternalChange)).

/*
(forall (?D ?P)
 (=> (instance ?D Object)
  (=> (and (instance ?P TurningOffDevice) (patient ?P ?D))
   (and (holdsDuring (BeginFn (WhenFn ?P)) (attribute ?D DeviceOn))
        (holdsDuring (EndFn (WhenFn ?P)) (attribute ?D DeviceOff))))))
*/
%% no translation to TPTP available.

/*
(forall (?D ?P)
 (=> (instance ?D Entity)
  (=> (and (instance ?P TurningOffDevice) (patient ?P ?D))
   (instance ?D Device))))
*/
fof(a164,axiom,! [D,P] : ((s_instance(D, s_Entity) => ((s_instance(P, s_TurningOffDevice) & s_patient(P, D)) => s_instance(D, s_Device))))).

/*
(instance TurningOnDevice SetOrClass)
*/
fof(a165,axiom,s_instance(s_TurningOnDevice, s_SetOrClass)).

/*
(subclass TurningOnDevice InternalChange)
*/
fof(a166,axiom,s_subclass(s_TurningOnDevice, s_InternalChange)).

/*
(forall (?D ?P)
 (=> (instance ?D Object)
  (=> (and (instance ?P TurningOnDevice) (patient ?P ?D))
   (and (holdsDuring (BeginFn (WhenFn ?P)) (attribute ?D DeviceOff))
        (holdsDuring (EndFn (WhenFn ?P)) (attribute ?D DeviceOn))))))
*/
%% no translation to TPTP available.

/*
(forall (?D ?P)
 (=> (instance ?D Entity)
  (=> (and (instance ?P TurningOnDevice) (patient ?P ?D))
   (instance ?D Device))))
*/
fof(a167,axiom,! [D,P] : ((s_instance(D, s_Entity) => ((s_instance(P, s_TurningOnDevice) & s_patient(P, D)) => s_instance(D, s_Device))))).

/*
(subclass Projectile Weapon)
*/
fof(a168,axiom,s_subclass(s_Projectile, s_Weapon)).

/*
(forall (?PROJECTILE)
 (=> (instance ?PROJECTILE Projectile)
  (capability Shooting patient ?PROJECTILE)))
*/
fof(a169,axiom,! [PROJECTILE] : ((s_instance(PROJECTILE, s_Projectile) => s_capability(s_Shooting, s_patient_m, PROJECTILE)))).

/*
(instance ProjectileShell SetOrClass)
*/
fof(a170,axiom,s_instance(s_ProjectileShell, s_SetOrClass)).

/*
(subclass ProjectileShell Container)
*/
fof(a171,axiom,s_subclass(s_ProjectileShell, s_Container)).

/*
(forall (?PROJECTILE)
 (exists (?SHELL)
  (and (instance ?SHELL Object)
       (=> (instance ?PROJECTILE Projectile)
        (and (instance ?SHELL ProjectileShell)
             (part ?SHELL ?PROJECTILE))))))
*/
fof(a172,axiom,! [PROJECTILE] : (? [SHELL] : ((s_instance(SHELL, s_Object) & (s_instance(PROJECTILE, s_Projectile) => (s_instance(SHELL, s_ProjectileShell) & s_part(SHELL, PROJECTILE))))))).

/*
(subclass ProjectileLauncher Weapon)
*/
fof(a173,axiom,s_subclass(s_ProjectileLauncher, s_Weapon)).

/*
(forall (?L)
 (=> (instance ?L ProjectileLauncher)
  (capability Shooting instrument ?L)))
*/
fof(a174,axiom,! [L] : ((s_instance(L, s_ProjectileLauncher) => s_capability(s_Shooting, s_instrument_m, L)))).

/*
(forall (?S)
 (exists (?P ?L)
  (and (and (instance ?L Object) (instance ?P Entity))
       (=> (instance ?S Shooting)
        (and (instance ?P Projectile)
             (and (patient ?S ?P)
                  (and (instance ?L ProjectileLauncher)
                       (instrument ?S ?L))))))))
*/
fof(a175,axiom,! [S] : (? [P,L] : (((s_instance(L, s_Object) & s_instance(P, s_Entity)) & (s_instance(S, s_Shooting) => (s_instance(P, s_Projectile) & (s_patient(S, P) & (s_instance(L, s_ProjectileLauncher) & s_instrument(S, L))))))))).

/*
(instance Spear SetOrClass)
*/
fof(a176,axiom,s_instance(s_Spear, s_SetOrClass)).

/*
(subclass Spear Weapon)
*/
fof(a177,axiom,s_subclass(s_Spear, s_Weapon)).

/*
(instance Sword SetOrClass)
*/
fof(a178,axiom,s_instance(s_Sword, s_SetOrClass)).

/*
(subclass Sword Weapon)
*/
fof(a179,axiom,s_subclass(s_Sword, s_Weapon)).

/*
(instance Whip SetOrClass)
*/
fof(a180,axiom,s_instance(s_Whip, s_SetOrClass)).

/*
(subclass Whip Weapon)
*/
fof(a181,axiom,s_subclass(s_Whip, s_Weapon)).

/*
(subclass Gun Weapon)
*/
fof(a182,axiom,s_subclass(s_Gun, s_Weapon)).

/*
(instance ProjectileLauncher SetOrClass)
*/
fof(a183,axiom,s_instance(s_ProjectileLauncher, s_SetOrClass)).

/*
(subclass Gun ProjectileLauncher)
*/
fof(a184,axiom,s_subclass(s_Gun, s_ProjectileLauncher)).

/*
(partition3 Gun ArtilleryGun Firearm)
*/
fof(a185,axiom,s_partition3(s_Gun, s_ArtilleryGun, s_Firearm)).

/*
(forall (?GUN)
 (=> (instance ?GUN Gun) (capability Shooting instrument ?GUN)))
*/
fof(a186,axiom,! [GUN] : ((s_instance(GUN, s_Gun) => s_capability(s_Shooting, s_instrument_m, GUN)))).

/*
(forall (?SHOOT)
 (exists (?PROJECTILE ?GUN)
  (and (and (instance ?GUN Object) (instance ?PROJECTILE Entity))
       (=> (instance ?SHOOT Shooting)
        (and (instance ?PROJECTILE Projectile)
             (and (patient ?SHOOT ?PROJECTILE)
                  (and (instance ?GUN Gun)
                       (instrument ?SHOOT ?GUN))))))))
*/
fof(a187,axiom,! [SHOOT] : (? [PROJECTILE,GUN] : (((s_instance(GUN, s_Object) & s_instance(PROJECTILE, s_Entity)) & (s_instance(SHOOT, s_Shooting) => (s_instance(PROJECTILE, s_Projectile) & (s_patient(SHOOT, PROJECTILE) & (s_instance(GUN, s_Gun) & s_instrument(SHOOT, GUN))))))))).

/*
(instance MortarGun SetOrClass)
*/
fof(a188,axiom,s_instance(s_MortarGun, s_SetOrClass)).

/*
(subclass MortarGun ArtilleryGun)
*/
fof(a189,axiom,s_subclass(s_MortarGun, s_ArtilleryGun)).

/*
(instance Bullet SetOrClass)
*/
fof(a190,axiom,s_instance(s_Bullet, s_SetOrClass)).

/*
(subclass Bullet Projectile)
*/
fof(a191,axiom,s_subclass(s_Bullet, s_Projectile)).

/*
(forall (?B)
 (=> (instance ?B Bullet)
  (hasPurpose ?B
   (exists (?S ?GUN)
    (and (instance ?S Shooting)
         (and (instrument ?S ?GUN)
              (and (instance ?GUN Gun) (patient ?S ?B))))))))
*/
%% no translation to TPTP available.

/*
(instance BulletCartridge SetOrClass)
*/
fof(a192,axiom,s_instance(s_BulletCartridge, s_SetOrClass)).

/*
(subclass BulletCartridge Projectile)
*/
fof(a193,axiom,s_subclass(s_BulletCartridge, s_Projectile)).

/*
(forall (?CARTRIDGE)
 (=> (instance ?CARTRIDGE BulletCartridge)
  (hasPurpose ?CARTRIDGE
   (exists (?BULLET ?CASE)
    (and (instance ?BULLET Bullet)
         (and (instance ?CASE CartridgeCase)
              (and (properPart ?BULLET ?CARTRIDGE)
                   (properPart ?CASE ?CARTRIDGE))))))))
*/
%% no translation to TPTP available.

/*
(instance CartridgeCase SetOrClass)
*/
fof(a194,axiom,s_instance(s_CartridgeCase, s_SetOrClass)).

/*
(subclass CartridgeCase EngineeringComponent)
*/
fof(a195,axiom,s_subclass(s_CartridgeCase, s_EngineeringComponent)).

/*
(forall (?CASE)
 (exists (?CARTRIDGE ?BULLET ?K)
  (and (and (instance ?K Process) (instance ?BULLET Object)
            (instance ?CARTRIDGE Object))
       (=> (instance ?CASE CartridgeCase)
        (and (instance ?CARTRIDGE BulletCartridge)
             (and (instance ?BULLET Bullet)
                  (and (instance ?K Keeping)
                       (and (properPart ?CASE ?CARTRIDGE)
                            (and (properPart ?BULLET ?CARTRIDGE)
                                 (and
                                  (agent ?K ?CASE)
                                  (patient ?K ?BULLET)))))))))))
*/
fof(a196,axiom,! [CASE] : (? [CARTRIDGE,BULLET,K] : (((s_instance(K, s_Process) & s_instance(BULLET, s_Object) & s_instance(CARTRIDGE, s_Object)) & (s_instance(CASE, s_CartridgeCase) => (s_instance(CARTRIDGE, s_BulletCartridge) & (s_instance(BULLET, s_Bullet) & (s_instance(K, s_Keeping) & (s_properPart(CASE, CARTRIDGE) & (s_properPart(BULLET, CARTRIDGE) & (s_agent(K, CASE) & s_patient(K, BULLET)))))))))))).

/*
(instance GunBarrel SetOrClass)
*/
fof(a197,axiom,s_instance(s_GunBarrel, s_SetOrClass)).

/*
(subclass GunBarrel EngineeringComponent)
*/
fof(a198,axiom,s_subclass(s_GunBarrel, s_EngineeringComponent)).

/*
(forall (?B)
 (exists (?G)
  (and (instance ?G Object)
       (=> (instance ?B GunBarrel)
        (and (instance ?G Gun) (part ?B ?G))))))
*/
fof(a199,axiom,! [B] : (? [G] : ((s_instance(G, s_Object) & (s_instance(B, s_GunBarrel) => (s_instance(G, s_Gun) & s_part(B, G))))))).

/*
(forall (?B ?G ?P ?GUN ?S)
 (exists (?SUB)
  (and (instance ?SUB Motion)
       (=> (instance ?GUN Object)
        (=>
         (and (instance ?G Gun)
              (and (instance ?B GunBarrel)
                   (and (part ?B ?G)
                        (and (instance ?S Shooting)
                             (and (instrument ?S ?GUN)
                                  (and
                                   (patient ?S ?P)
                                   (instance ?P Projectile)))))))
         (and (subProcess ?SUB ?S) (path ?SUB ?B)))))))
*/
fof(a200,axiom,! [B,G,P,GUN,S] : (? [SUB] : ((s_instance(SUB, s_Motion) & (s_instance(GUN, s_Object) => ((s_instance(G, s_Gun) & (s_instance(B, s_GunBarrel) & (s_part(B, G) & (s_instance(S, s_Shooting) & (s_instrument(S, GUN) & (s_patient(S, P) & s_instance(P, s_Projectile))))))) => (s_subProcess(SUB, S) & s_path(SUB, B)))))))).

/*
(instance GunPowder SetOrClass)
*/
fof(a201,axiom,s_instance(s_GunPowder, s_SetOrClass)).

/*
(subclass GunPowder Mixture)
*/
fof(a202,axiom,s_subclass(s_GunPowder, s_Mixture)).

/*
(subclass Lever Device)
*/
fof(a203,axiom,s_subclass(s_Lever, s_Device)).

/*
(forall (?L)
 (exists (?A)
  (and (instance ?A Object) (=> (instance ?L Lever) (axis ?A ?L)))))
*/
fof(a204,axiom,! [L] : (? [A] : ((s_instance(A, s_Object) & (s_instance(L, s_Lever) => s_axis(A, L)))))).

/*
(forall (?P ?L ?E1 ?E2 ?M1 ?P4 ?D2 ?P3 ?P1 ?D1 ?P2)
 (=>
  (and (instance ?E1 Physical) (instance ?E2 Physical)
       (instance ?P4 Object) (instance ?D2 LengthMeasure)
       (instance ?P3 Object) (instance ?P1 Object)
       (instance ?D1 LengthMeasure) (instance ?P2 Object))
  (=>
   (and (instance ?L Lever)
        (and (instance ?P Pushing)
             (and (instance ?M1 Motion)
                  (and (destination ?P ?E1)
                       (and (physicalEnd ?E1 ?L)
                            (and (physicalEnd ?E2 ?L)
                                 (and
                                  (not (equal ?E1 ?E2))
                                  (and
                                   (holdsDuring
                                    (ImmediatePastFn (WhenFn ?M1))
                                    (located ?E1 ?P1))
                                   (and
                                    (holdsDuring
                                     (ImmediateFutureFn (WhenFn ?M1))
                                     (located ?E1 ?P2))
                                    (and
                                     (holdsDuring
                                      (ImmediatePastFn (WhenFn ?M1))
                                      (located ?E2 ?P3))
                                     (and
                                      (holdsDuring
                                       (ImmediateFutureFn (WhenFn ?M1))
                                       (located ?E2 ?P4))
                                      (and
                                       (distance ?P1 ?P2 ?D1)
                                       (distance
                                        ?P3
                                        ?P4
                                        ?D2)))))))))))))
   (greaterThan ?D2 ?D1))))
*/
%% no translation to TPTP available.

/*
(forall (?P)
 (=> (instance ?P GunPowder) (capability Explosion instrument ?P)))
*/
fof(a205,axiom,! [P] : ((s_instance(P, s_GunPowder) => s_capability(s_Explosion, s_instrument_m, P)))).

/*
(subclass GunTrigger EngineeringComponent)
*/
fof(a206,axiom,s_subclass(s_GunTrigger, s_EngineeringComponent)).

/*
(instance GunTrigger SetOrClass)
*/
fof(a207,axiom,s_instance(s_GunTrigger, s_SetOrClass)).

/*
(instance Lever SetOrClass)
*/
fof(a208,axiom,s_instance(s_Lever, s_SetOrClass)).

/*
(subclass GunTrigger Lever)
*/
fof(a209,axiom,s_subclass(s_GunTrigger, s_Lever)).

/*
(typicalPart GunTrigger Gun)
*/
fof(a210,axiom,s_typicalPart(s_GunTrigger, s_Gun)).

/*
(typicallyContainsPart GunTrigger Gun)
*/
fof(a211,axiom,s_typicallyContainsPart(s_GunTrigger, s_Gun)).

/*
(instance LoadingWeapon SetOrClass)
*/
fof(a212,axiom,s_instance(s_LoadingWeapon, s_SetOrClass)).

/*
(subclass LoadingWeapon Inserting)
*/
fof(a213,axiom,s_subclass(s_LoadingWeapon, s_Inserting)).

/*
(forall (?P ?L)
 (=> (instance ?P Entity)
  (=> (and (instance ?L LoadingWeapon) (patient ?L ?P))
   (instance ?P Projectile))))
*/
fof(a214,axiom,! [P,L] : ((s_instance(P, s_Entity) => ((s_instance(L, s_LoadingWeapon) & s_patient(L, P)) => s_instance(P, s_Projectile))))).

/*
(forall (?W ?L)
 (=> (instance ?W Entity)
  (=> (and (instance ?L LoadingWeapon) (destination ?L ?W))
   (instance ?W ProjectileLauncher))))
*/
fof(a215,axiom,! [W,L] : ((s_instance(W, s_Entity) => ((s_instance(L, s_LoadingWeapon) & s_destination(L, W)) => s_instance(W, s_ProjectileLauncher))))).

/*
(instance effectiveRange BinaryPredicate)
*/
fof(a216,axiom,s_instance(s_effectiveRange_m, s_BinaryPredicate)).

/*
(instance effectiveRange SingleValuedRelation)
*/
fof(a217,axiom,s_instance(s_effectiveRange_m, s_SingleValuedRelation)).

/*
(subrelation effectiveRange measure)
*/
fof(a218,axiom,s_subrelation(s_effectiveRange_m, s_measure_m)).

/*
(forall (?DAMAGING ?LM1 ?LM ?GUN ?O)
 (exists (?O2)
  (and (instance ?O2 Object)
       (=>
        (and (instance ?DAMAGING SymbolicString)
             (instance ?LM1 LengthMeasure) (instance ?LM LengthMeasure)
             (instance ?O Object))
        (=>
         (and (instance ?GUN Gun)
              (and (effectiveRange ?GUN ?LM)
                   (and (distance ?GUN ?O ?LM1)
                        (and (not (between ?O ?O2 ?GUN))
                             (lessThanOrEqualTo ?LM1 ?LM)))))
         (capability
          (KappaFn ?DAMAGING
           (and (instance ?DAMAGING Damaging) (patient ?DAMAGING ?O)))
          instrument ?GUN))))))
*/
%% no translation to TPTP available.

/*
(forall (?KILLING ?LM1 ?LM ?GUN ?O)
 (exists (?O2)
  (and (instance ?O2 Object)
       (=>
        (and (instance ?KILLING SymbolicString)
             (instance ?LM1 LengthMeasure)
             (instance ?LM LengthMeasure))
        (=>
         (and (instance ?GUN Gun)
              (and (effectiveRange ?GUN ?LM)
                   (and (distance ?GUN ?O ?LM1)
                        (and (instance ?O Organism)
                             (and (not (between ?O ?O2 ?GUN))
                                  (lessThanOrEqualTo ?LM1 ?LM))))))
         (capability
          (KappaFn ?KILLING
           (and (instance ?KILLING Killing) (patient ?KILLING ?O)))
          instrument ?GUN))))))
*/
%% no translation to TPTP available.

/*
(instance GunStock SetOrClass)
*/
fof(a219,axiom,s_instance(s_GunStock, s_SetOrClass)).

/*
(subclass GunStock EngineeringComponent)
*/
fof(a220,axiom,s_subclass(s_GunStock, s_EngineeringComponent)).

/*
(forall (?STOCK)
 (exists (?GUN)
  (and (instance ?GUN Object)
       (=> (instance ?STOCK GunStock)
        (and (instance ?GUN Gun) (part ?STOCK ?GUN))))))
*/
fof(a221,axiom,! [STOCK] : (? [GUN] : ((s_instance(GUN, s_Object) & (s_instance(STOCK, s_GunStock) => (s_instance(GUN, s_Gun) & s_part(STOCK, GUN))))))).

/*
(instance WeaponOfMassDestruction SetOrClass)
*/
fof(a222,axiom,s_instance(s_WeaponOfMassDestruction, s_SetOrClass)).

/*
(subclass WeaponOfMassDestruction Weapon)
*/
fof(a223,axiom,s_subclass(s_WeaponOfMassDestruction, s_Weapon)).

/*
(instance Handle SetOrClass)
*/
fof(a224,axiom,s_instance(s_Handle, s_SetOrClass)).

/*
(subclass Handle EngineeringComponent)
*/
fof(a225,axiom,s_subclass(s_Handle, s_EngineeringComponent)).

/*
(forall (?H)
 (=> (instance ?H Handle)
  (hasPurpose ?H
   (exists (?G ?D)
    (and (instance ?G Grabbing)
         (and (patient ?G ?H)
              (and (instrument ?G ?D) (instance ?D Hand))))))))
*/
%% no translation to TPTP available.

/*
(instance Shield SetOrClass)
*/
fof(a226,axiom,s_instance(s_Shield, s_SetOrClass)).

/*
(subclass Shield Artifact)
*/
fof(a227,axiom,s_subclass(s_Shield, s_Artifact)).

/*
(forall (?I ?S)
 (=> (instance ?I SymbolicString)
  (=> (instance ?S Shield)
   (hasPurpose ?S
    (exists (?P ?H)
     (and (instance ?P Protecting)
          (and (instrument ?P ?S)
               (and (instance ?H Human)
                    (and (patient ?P ?H)
                         (prevents ?P
                          (KappaFn ?I
                           (and (instance ?I Injuring)
                                (and
                                 (exists
                                  (?W)
                                  (and
                                   (instance ?W Weapon)
                                   (instrument ?I ?W)))
                                 (=>
                                  (patient ?I ?H)
                                  (not (patient ?P ?H))))))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?S)
 (exists (?H)
  (and (instance ?H Object)
       (=> (instance ?S Shield)
        (and (instance ?H Handle) (part ?H ?S))))))
*/
fof(a228,axiom,! [S] : (? [H] : ((s_instance(H, s_Object) & (s_instance(S, s_Shield) => (s_instance(H, s_Handle) & s_part(H, S))))))).

/*
(instance Mast SetOrClass)
*/
fof(a229,axiom,s_instance(s_Mast, s_SetOrClass)).

/*
(subclass Mast Artifact)
*/
fof(a230,axiom,s_subclass(s_Mast, s_Artifact)).

/*
(forall (?M)
 (exists (?W)
  (and (instance ?W Object)
       (=> (instance ?M Mast)
        (and (instance ?W WaterVehicle) (part ?M ?W))))))
*/
fof(a231,axiom,! [M] : (? [W] : ((s_instance(W, s_Object) & (s_instance(M, s_Mast) => (s_instance(W, s_WaterVehicle) & s_part(M, W))))))).

/*
(instance WingDevice SetOrClass)
*/
fof(a232,axiom,s_instance(s_WingDevice, s_SetOrClass)).

/*
(subclass WingDevice EngineeringComponent)
*/
fof(a233,axiom,s_subclass(s_WingDevice, s_EngineeringComponent)).

/*
(forall (?W)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?W WingDevice)
        (and (instance ?A Aircraft) (part ?W ?A))))))
*/
fof(a234,axiom,! [W] : (? [A] : ((s_instance(A, s_Object) & (s_instance(W, s_WingDevice) => (s_instance(A, s_Aircraft) & s_part(W, A))))))).

/*
(instance Tube SetOrClass)
*/
fof(a235,axiom,s_instance(s_Tube, s_SetOrClass)).

/*
(subclass Tube Artifact)
*/
fof(a236,axiom,s_subclass(s_Tube, s_Artifact)).

/*
(forall (?T)
 (=> (instance ?T Tube)
  (hasPurpose ?T
   (exists (?P ?OBJ)
    (and (instance ?P Transfer)
         (and (path ?P ?T)
              (and (patient ?P ?OBJ) (attribute ?OBJ Fluid))))))))
*/
%% no translation to TPTP available.

/*
(instance PhotographicFilm SetOrClass)
*/
fof(a237,axiom,s_instance(s_PhotographicFilm, s_SetOrClass)).

/*
(subclass PhotographicFilm Artifact)
*/
fof(a238,axiom,s_subclass(s_PhotographicFilm, s_Artifact)).

/*
(instance PictureFrame SetOrClass)
*/
fof(a239,axiom,s_instance(s_PictureFrame, s_SetOrClass)).

/*
(subclass PictureFrame Artifact)
*/
fof(a240,axiom,s_subclass(s_PictureFrame, s_Artifact)).

/*
(forall (?F)
 (=> (instance ?F PictureFrame)
  (hasPurpose ?F
   (exists (?P)
    (and (meetsSpatially ?F ?P)
         (or (instance ?P PaintedPicture) (instance ?P Photograph)))))))
*/
%% no translation to TPTP available.

/*
(instance Shelf SetOrClass)
*/
fof(a241,axiom,s_instance(s_Shelf, s_SetOrClass)).

/*
(subclass Shelf Artifact)
*/
fof(a242,axiom,s_subclass(s_Shelf, s_Artifact)).

/*
(forall (?S)
 (exists (?F)
  (and (instance ?F Object)
       (=> (instance ?S Shelf)
        (and (instance ?F Furniture) (part ?S ?F))))))
*/
fof(a243,axiom,! [S] : (? [F] : ((s_instance(F, s_Object) & (s_instance(S, s_Shelf) => (s_instance(F, s_Furniture) & s_part(S, F))))))).

/*
(instance AutomaticGun SetOrClass)
*/
fof(a244,axiom,s_instance(s_AutomaticGun, s_SetOrClass)).

/*
(subclass AutomaticGun Gun)
*/
fof(a245,axiom,s_subclass(s_AutomaticGun, s_Gun)).

/*
(forall (?G)
 (=> (instance ?G AutomaticGun)
  (hasPurpose ?G
   (exists (?S1 ?S2 ?P ?T)
    (and (instance ?P Pulling)
         (and (instance ?T GunTrigger)
              (and (patient ?P ?T)
                   (and (part ?T ?G)
                        (and (instance ?S1 Shooting)
                             (and (instance ?S2 Shooting)
                                  (and
                                   (instrument ?S1 ?G)
                                   (and
                                    (instrument ?S2 ?G)
                                    (and
                                     (not (equal ?S1 ?S2))
                                     (and
                                      (causes ?P ?S1)
                                      (causes ?P ?S2)))))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T)
 (=> (instance ?T GunTrigger)
  (hasPurpose ?T
   (exists (?S ?G ?P)
    (and (instance ?G AutomaticGun)
         (and (part ?T ?G)
              (and (patient ?P ?T)
                   (and (instance ?P Pulling)
                        (and (instance ?S Shooting)
                             (and (instrument ?S ?G)
                                  (causes ?P ?S)))))))))))
*/
%% no translation to TPTP available.

/*
(instance ArtilleryGun SetOrClass)
*/
fof(a246,axiom,s_instance(s_ArtilleryGun, s_SetOrClass)).

/*
(subclass ArtilleryGun Gun)
*/
fof(a247,axiom,s_subclass(s_ArtilleryGun, s_Gun)).

/*
(instance Gun SetOrClass)
*/
fof(a248,axiom,s_instance(s_Gun, s_SetOrClass)).

/*
(subclass Firearm Gun)
*/
fof(a249,axiom,s_subclass(s_Firearm, s_Gun)).

/*
(partition3 Firearm Rifle Pistol)
*/
fof(a250,axiom,s_partition3(s_Firearm, s_Rifle, s_Pistol)).

/*
(instance Rifle SetOrClass)
*/
fof(a251,axiom,s_instance(s_Rifle, s_SetOrClass)).

/*
(subclass Rifle Firearm)
*/
fof(a252,axiom,s_subclass(s_Rifle, s_Firearm)).

/*
(instance Firearm SetOrClass)
*/
fof(a253,axiom,s_instance(s_Firearm, s_SetOrClass)).

/*
(subclass Pistol Firearm)
*/
fof(a254,axiom,s_subclass(s_Pistol, s_Firearm)).

/*
(instance RevolverGun SetOrClass)
*/
fof(a255,axiom,s_instance(s_RevolverGun, s_SetOrClass)).

/*
(instance Pistol SetOrClass)
*/
fof(a256,axiom,s_instance(s_Pistol, s_SetOrClass)).

/*
(subclass RevolverGun Pistol)
*/
fof(a257,axiom,s_subclass(s_RevolverGun, s_Pistol)).

/*
(instance ContainerEmpty RelationalAttribute)
*/
fof(a258,axiom,s_instance(s_ContainerEmpty, s_RelationalAttribute)).

/*
(forall (?C)
 (=> (instance ?C Object)
  (=> (attribute ?C ContainerEmpty) (instance ?C Container))))
*/
fof(a259,axiom,! [C] : ((s_instance(C, s_Object) => (s_attribute(C, s_ContainerEmpty) => s_instance(C, s_Container))))).

/*
(forall (?C)
 (forall (?H ?S)
  (=> (and (instance ?S Object) (instance ?H Hole))
   (=> (and (instance ?C SelfConnectedObject) (instance ?C Hole))
    (=> (attribute ?C ContainerEmpty)
     (not (and (instance ?H Hole)
               (and (hole ?H ?C) (partiallyFills ?S ?C)))))))))
*/
fof(a260,axiom,! [C] : (! [H,S] : (((s_instance(S, s_Object) & s_instance(H, s_Hole)) => ((s_instance(C, s_SelfConnectedObject) & s_instance(C, s_Hole)) => (s_attribute(C, s_ContainerEmpty) => (~ (s_instance(H, s_Hole) & (s_hole(H, C) & s_partiallyFills(S, C)))))))))).

/*
(instance ContainerFull RelationalAttribute)
*/
fof(a261,axiom,s_instance(s_ContainerFull, s_RelationalAttribute)).

/*
(contraryAttribute2 ContainerFull ContainerEmpty)
*/
fof(a262,axiom,s_contraryAttribute2(s_ContainerFull, s_ContainerEmpty)).

/*
(forall (?C)
 (=> (instance ?C Object)
  (=> (attribute ?C ContainerFull) (instance ?C Container))))
*/
fof(a263,axiom,! [C] : ((s_instance(C, s_Object) => (s_attribute(C, s_ContainerFull) => s_instance(C, s_Container))))).

/*
(forall (?C)
 (exists (?H ?S)
  (and (and (instance ?S Object) (instance ?H Hole))
       (=> (and (instance ?C SelfConnectedObject) (instance ?C Hole))
        (=> (attribute ?C ContainerFull)
         (and (instance ?H Hole) (and (hole ?H ?C) (fills ?S ?C))))))))
*/
fof(a264,axiom,! [C] : (? [H,S] : (((s_instance(S, s_Object) & s_instance(H, s_Hole)) & ((s_instance(C, s_SelfConnectedObject) & s_instance(C, s_Hole)) => (s_attribute(C, s_ContainerFull) => (s_instance(H, s_Hole) & (s_hole(H, C) & s_fills(S, C))))))))).

/*
(instance Holster SetOrClass)
*/
fof(a265,axiom,s_instance(s_Holster, s_SetOrClass)).

/*
(subclass Holster Container)
*/
fof(a266,axiom,s_subclass(s_Holster, s_Container)).

/*
(forall (?H)
 (=> (instance ?H Holster)
  (hasPurpose ?H
   (exists (?P) (and (instance ?P Pistol) (contains ?H ?P))))))
*/
%% no translation to TPTP available.

/*
(instance Wastebasket SetOrClass)
*/
fof(a267,axiom,s_instance(s_Wastebasket, s_SetOrClass)).

/*
(subclass Wastebasket Container)
*/
fof(a268,axiom,s_subclass(s_Wastebasket, s_Container)).

/*
(instance ArrowProjectile SetOrClass)
*/
fof(a269,axiom,s_instance(s_ArrowProjectile, s_SetOrClass)).

/*
(subclass ArrowProjectile Projectile)
*/
fof(a270,axiom,s_subclass(s_ArrowProjectile, s_Projectile)).

/*
(instance DriveComponent SetOrClass)
*/
fof(a271,axiom,s_instance(s_DriveComponent, s_SetOrClass)).

/*
(subclass DriveComponent EngineeringComponent)
*/
fof(a272,axiom,s_subclass(s_DriveComponent, s_EngineeringComponent)).

/*
(subclass PetroleumProduct Oil)
*/
fof(a273,axiom,s_subclass(s_PetroleumProduct, s_Oil)).

/*
(forall (?PP)
 (exists (?O)
  (and (instance ?O Object)
       (=> (instance ?PP PetroleumProduct)
        (and (instance ?O OrganicCompound) (part ?O ?PP))))))
*/
fof(a274,axiom,! [PP] : (? [O] : ((s_instance(O, s_Object) & (s_instance(PP, s_PetroleumProduct) => (s_instance(O, s_OrganicCompound) & s_part(O, PP))))))).

/*
(subclass FossilFuel Fuel)
*/
fof(a275,axiom,s_subclass(s_FossilFuel, s_Fuel)).

/*
(instance PetroleumProduct SetOrClass)
*/
fof(a276,axiom,s_instance(s_PetroleumProduct, s_SetOrClass)).

/*
(subclass FossilFuel PetroleumProduct)
*/
fof(a277,axiom,s_subclass(s_FossilFuel, s_PetroleumProduct)).

/*
(instance Fuel SetOrClass)
*/
fof(a278,axiom,s_instance(s_Fuel, s_SetOrClass)).

/*
(subclass Fuel Substance)
*/
fof(a279,axiom,s_subclass(s_Fuel, s_Substance)).

/*
(forall (?X) (=> (instance ?X FossilFuel) (attribute ?X Flammable)))
*/
fof(a280,axiom,! [X] : ((s_instance(X, s_FossilFuel) => s_attribute(X, s_Flammable)))).

/*
(instance Wax SetOrClass)
*/
fof(a281,axiom,s_instance(s_Wax, s_SetOrClass)).

/*
(subclass Wax Substance)
*/
fof(a282,axiom,s_subclass(s_Wax, s_Substance)).

/*
(instance LiquefiedPetroleumGas SetOrClass)
*/
fof(a283,axiom,s_instance(s_LiquefiedPetroleumGas, s_SetOrClass)).

/*
(subclass LiquefiedPetroleumGas FossilFuel)
*/
fof(a284,axiom,s_subclass(s_LiquefiedPetroleumGas, s_FossilFuel)).

/*
(instance Gasoline SetOrClass)
*/
fof(a285,axiom,s_instance(s_Gasoline, s_SetOrClass)).

/*
(subclass Gasoline FossilFuel)
*/
fof(a286,axiom,s_subclass(s_Gasoline, s_FossilFuel)).

/*
(instance DieselFuel SetOrClass)
*/
fof(a287,axiom,s_instance(s_DieselFuel, s_SetOrClass)).

/*
(instance FossilFuel SetOrClass)
*/
fof(a288,axiom,s_instance(s_FossilFuel, s_SetOrClass)).

/*
(subclass DieselFuel FossilFuel)
*/
fof(a289,axiom,s_subclass(s_DieselFuel, s_FossilFuel)).

/*
(subclass Transducer Device)
*/
fof(a290,axiom,s_subclass(s_Transducer, s_Device)).

/*
(instance Transducer SetOrClass)
*/
fof(a291,axiom,s_instance(s_Transducer, s_SetOrClass)).

/*
(subclass Engine Transducer)
*/
fof(a292,axiom,s_subclass(s_Engine, s_Transducer)).

/*
(instance powerComponent BinaryPredicate)
*/
fof(a293,axiom,s_instance(s_powerComponent_m, s_BinaryPredicate)).

/*
(instance powerComponent AsymmetricRelation)
*/
fof(a294,axiom,s_instance(s_powerComponent_m, s_AsymmetricRelation)).

/*
(instance powerComponent IrreflexiveRelation)
*/
fof(a295,axiom,s_instance(s_powerComponent_m, s_IrreflexiveRelation)).

/*
(subrelation powerComponent component)
*/
fof(a296,axiom,s_subrelation(s_powerComponent_m, s_component_m)).

/*
(forall (?O ?G)
 (=>
  (and (instance ?G CorpuscularObject) (instance ?O CorpuscularObject))
  (=> (powerComponent ?G ?O)
   (and (instance ?G Device) (instance ?O Artifact)))))
*/
fof(a297,axiom,! [O,G] : (((s_instance(G, s_CorpuscularObject) & s_instance(O, s_CorpuscularObject)) => (s_powerComponent(G, O) => (s_instance(G, s_Device) & s_instance(O, s_Artifact)))))).

/*
(forall (?O ?G)
 (=> (instance ?G CorpuscularObject)
  (=> (and (powerComponent ?G ?O) (instance ?O Device))
   (instance ?O SelfPoweredDevice))))
*/
fof(a298,axiom,! [O,G] : ((s_instance(G, s_CorpuscularObject) => ((s_powerComponent(G, O) & s_instance(O, s_Device)) => s_instance(O, s_SelfPoweredDevice))))).

/*
(instance SteamEngine SetOrClass)
*/
fof(a299,axiom,s_instance(s_SteamEngine, s_SetOrClass)).

/*
(subclass SteamEngine Engine)
*/
fof(a300,axiom,s_subclass(s_SteamEngine, s_Engine)).

/*
(instance Turbine SetOrClass)
*/
fof(a301,axiom,s_instance(s_Turbine, s_SetOrClass)).

/*
(subclass Turbine Engine)
*/
fof(a302,axiom,s_subclass(s_Turbine, s_Engine)).

/*
(instance Windmill SetOrClass)
*/
fof(a303,axiom,s_instance(s_Windmill, s_SetOrClass)).

/*
(subclass Windmill Engine)
*/
fof(a304,axiom,s_subclass(s_Windmill, s_Engine)).

/*
(subclass InternalCombustionEngine Engine)
*/
fof(a305,axiom,s_subclass(s_InternalCombustionEngine, s_Engine)).

/*
(forall (?R)
 (exists (?E ?C ?F)
  (and (and (instance ?F Object) (instance ?C Hole)
            (instance ?E SelfConnectedObject))
       (=> (instance ?R Process)
        (=> (instance ?R (OperatingFn InternalCombustionEngine))
         (and (instance ?E InternalCombustionEngine)
              (and (instrument ?R ?E)
                   (and (hole ?C ?E)
                        (and (instance ?F Combustion)
                             (completelyFills ?F ?C))))))))))
*/
fof(a306,axiom,! [R] : (? [E,C,F] : (((s_instance(F, s_Object) & s_instance(C, s_Hole) & s_instance(E, s_SelfConnectedObject)) & (s_instance(R, s_Process) => (s_instance(R, s_OperatingFn(s_InternalCombustionEngine)) => (s_instance(E, s_InternalCombustionEngine) & (s_instrument(R, E) & (s_hole(C, E) & (s_instance(F, s_Combustion) & s_completelyFills(F, C))))))))))).

/*
(instance Manifold SetOrClass)
*/
fof(a307,axiom,s_instance(s_Manifold, s_SetOrClass)).

/*
(subclass Manifold EngineeringComponent)
*/
fof(a308,axiom,s_subclass(s_Manifold, s_EngineeringComponent)).

/*
(instance Engine SetOrClass)
*/
fof(a309,axiom,s_instance(s_Engine, s_SetOrClass)).

/*
(subclass ElectricMotor Engine)
*/
fof(a310,axiom,s_subclass(s_ElectricMotor, s_Engine)).

/*
(instance ElectricMotor SetOrClass)
*/
fof(a311,axiom,s_instance(s_ElectricMotor, s_SetOrClass)).

/*
(subclass ElectricMotor ElectricDevice)
*/
fof(a312,axiom,s_subclass(s_ElectricMotor, s_ElectricDevice)).

/*
(instance SwitchDevice SetOrClass)
*/
fof(a313,axiom,s_instance(s_SwitchDevice, s_SetOrClass)).

/*
(subclass SwitchDevice EngineeringComponent)
*/
fof(a314,axiom,s_subclass(s_SwitchDevice, s_EngineeringComponent)).

/*
(forall (?DEVICE)
 (exists (?PROC1 ?PROC2 ?ELECTRIC)
  (and (and (instance ?ELECTRIC Object) (instance ?PROC2 Process)
            (instance ?PROC1 Process))
       (=> (instance ?DEVICE SwitchDevice)
        (and (instrument ?PROC1 ?DEVICE)
             (and (causes ?PROC1 ?PROC2)
                  (and (instrument ?PROC2 ?ELECTRIC)
                       (instance ?ELECTRIC ElectricDevice))))))))
*/
fof(a315,axiom,! [DEVICE] : (? [PROC1,PROC2,ELECTRIC] : (((s_instance(ELECTRIC, s_Object) & s_instance(PROC2, s_Process) & s_instance(PROC1, s_Process)) & (s_instance(DEVICE, s_SwitchDevice) => (s_instrument(PROC1, DEVICE) & (s_causes(PROC1, PROC2) & (s_instrument(PROC2, ELECTRIC) & s_instance(ELECTRIC, s_ElectricDevice))))))))).

/*
(subclass Microphone ElectricDevice)
*/
fof(a316,axiom,s_subclass(s_Microphone, s_ElectricDevice)).

/*
(instance Microphone SetOrClass)
*/
fof(a317,axiom,s_instance(s_Microphone, s_SetOrClass)).

/*
(subclass Microphone CommunicationDevice)
*/
fof(a318,axiom,s_subclass(s_Microphone, s_CommunicationDevice)).

/*
(subclass ReceiverDevice CommunicationDevice)
*/
fof(a319,axiom,s_subclass(s_ReceiverDevice, s_CommunicationDevice)).

/*
(subclass ReceiverDevice ElectricDevice)
*/
fof(a320,axiom,s_subclass(s_ReceiverDevice, s_ElectricDevice)).

/*
(forall (?D ?E)
 (=> (instance ?D Entity)
  (=> (and (instance ?E RadioEmission) (destination ?E ?D))
   (instance ?D ReceiverDevice))))
*/
fof(a321,axiom,! [D,E] : ((s_instance(D, s_Entity) => ((s_instance(E, s_RadioEmission) & s_destination(E, D)) => s_instance(D, s_ReceiverDevice))))).

/*
(subclass Telegraph ElectricDevice)
*/
fof(a322,axiom,s_subclass(s_Telegraph, s_ElectricDevice)).

/*
(instance Telegraph SetOrClass)
*/
fof(a323,axiom,s_instance(s_Telegraph, s_SetOrClass)).

/*
(subclass Telegraph CommunicationDevice)
*/
fof(a324,axiom,s_subclass(s_Telegraph, s_CommunicationDevice)).

/*
(instance ProjectionScreen SetOrClass)
*/
fof(a325,axiom,s_instance(s_ProjectionScreen, s_SetOrClass)).

/*
(subclass ProjectionScreen CommunicationDevice)
*/
fof(a326,axiom,s_subclass(s_ProjectionScreen, s_CommunicationDevice)).

/*
(instance Pencil SetOrClass)
*/
fof(a327,axiom,s_instance(s_Pencil, s_SetOrClass)).

/*
(subclass Pencil WritingDevice)
*/
fof(a328,axiom,s_subclass(s_Pencil, s_WritingDevice)).

/*
(subclass DeviceAttribute ObjectiveNorm)
*/
fof(a329,axiom,s_subclass(s_DeviceAttribute, s_ObjectiveNorm)).

/*
(forall (?ATTRIBUTE ?DEVICE)
 (=> (instance ?DEVICE Object)
  (=>
   (and (attribute ?DEVICE ?ATTRIBUTE)
        (instance ?ATTRIBUTE DeviceAttribute))
   (instance ?DEVICE Device))))
*/
fof(a330,axiom,! [ATTRIBUTE,DEVICE] : ((s_instance(DEVICE, s_Object) => ((s_attribute(DEVICE, ATTRIBUTE) & s_instance(ATTRIBUTE, s_DeviceAttribute)) => s_instance(DEVICE, s_Device))))).

/*
(instance Functioning DeviceAttribute)
*/
fof(a331,axiom,s_instance(s_Functioning, s_DeviceAttribute)).

/*
(contraryAttribute2 Functioning Malfunctioning)
*/
fof(a332,axiom,s_contraryAttribute2(s_Functioning, s_Malfunctioning)).

/*
(forall (?PROP ?DEVICE)
 (=> (and (instance ?DEVICE Object) (instance ?PROP Formula))
  (=> (and (attribute ?DEVICE Functioning) (hasPurpose ?DEVICE ?PROP))
   (truth ?PROP True))))
*/
%% no translation to TPTP available.

/*
(instance DeviceAttribute SetOrClass)
*/
fof(a333,axiom,s_instance(s_DeviceAttribute, s_SetOrClass)).

/*
(instance Malfunctioning DeviceAttribute)
*/
fof(a334,axiom,s_instance(s_Malfunctioning, s_DeviceAttribute)).

/*
(forall (?PROP ?DEVICE)
 (=> (and (instance ?DEVICE Object) (instance ?PROP Formula))
  (=>
   (and (attribute ?DEVICE Malfunctioning) (hasPurpose ?DEVICE ?PROP))
   (truth ?PROP False))))
*/
%% no translation to TPTP available.

/*
(subclass DeviceStateAttribute InternalAttribute)
*/
fof(a335,axiom,s_subclass(s_DeviceStateAttribute, s_InternalAttribute)).

/*
(instance DeviceClosed DeviceStateAttribute)
*/
fof(a336,axiom,s_instance(s_DeviceClosed, s_DeviceStateAttribute)).

/*
(instance DeviceOff DeviceStateAttribute)
*/
fof(a337,axiom,s_instance(s_DeviceOff, s_DeviceStateAttribute)).

/*
(instance DeviceOn DeviceStateAttribute)
*/
fof(a338,axiom,s_instance(s_DeviceOn, s_DeviceStateAttribute)).

/*
(instance DeviceStateAttribute SetOrClass)
*/
fof(a339,axiom,s_instance(s_DeviceStateAttribute, s_SetOrClass)).

/*
(instance DeviceOpen DeviceStateAttribute)
*/
fof(a340,axiom,s_instance(s_DeviceOpen, s_DeviceStateAttribute)).

/*
(instance deviceState BinaryPredicate)
*/
fof(a341,axiom,s_instance(s_deviceState_m, s_BinaryPredicate)).

/*
(subrelation deviceState attribute)
*/
fof(a342,axiom,s_subrelation(s_deviceState_m, s_attribute_m)).

/*
(instance Aerator SetOrClass)
*/
fof(a343,axiom,s_instance(s_Aerator, s_SetOrClass)).

/*
(subclass Aerator Device)
*/
fof(a344,axiom,s_subclass(s_Aerator, s_Device)).

/*
(forall (?AERATOR)
 (=> (instance ?AERATOR Aerator)
  (hasPurpose ?AERATOR
   (exists (?COMBINE ?AIR)
    (and (instance ?COMBINE Combining)
         (and (resource ?COMBINE ?AIR)
              (and (instance ?AIR Air)
                   (instrument ?COMBINE ?AERATOR))))))))
*/
%% no translation to TPTP available.

/*
(instance Aerating SetOrClass)
*/
fof(a345,axiom,s_instance(s_Aerating, s_SetOrClass)).

/*
(subclass Aerating Combining)
*/
fof(a346,axiom,s_subclass(s_Aerating, s_Combining)).

/*
(forall (?AERATE)
 (exists (?AIR ?S)
  (and (and (instance ?S Object) (instance ?AIR Entity))
       (=> (instance ?AERATE Aerating)
        (and (patient ?AERATE ?AIR)
             (and (instance ?AIR Air)
                  (and (patient ?AERATE ?S) (attribute ?S Liquid))))))))
*/
fof(a347,axiom,! [AERATE] : (? [AIR,S] : (((s_instance(S, s_Object) & s_instance(AIR, s_Entity)) & (s_instance(AERATE, s_Aerating) => (s_patient(AERATE, AIR) & (s_instance(AIR, s_Air) & (s_patient(AERATE, S) & s_attribute(S, s_Liquid))))))))).

/*
(instance Broom SetOrClass)
*/
fof(a348,axiom,s_instance(s_Broom, s_SetOrClass)).

/*
(subclass Broom BrushOrComb)
*/
fof(a349,axiom,s_subclass(s_Broom, s_BrushOrComb)).

/*
(forall (?B)
 (=> (instance ?B Broom)
  (hasPurpose ?B
   (exists (?S) (and (instance ?S Sweeping) (instrument ?S ?B))))))
*/
%% no translation to TPTP available.

/*
(subclass BrushOrComb Device)
*/
fof(a350,axiom,s_subclass(s_BrushOrComb, s_Device)).

/*
(forall (?B)
 (=> (instance ?B BrushOrComb)
  (hasPurpose ?B
   (exists (?S)
    (and (or (instance ?S Removing) (instance ?S SurfaceChange))
         (instrument ?S ?B))))))
*/
%% no translation to TPTP available.

/*
(instance MatchDevice SetOrClass)
*/
fof(a351,axiom,s_instance(s_MatchDevice, s_SetOrClass)).

/*
(subclass MatchDevice Device)
*/
fof(a352,axiom,s_subclass(s_MatchDevice, s_Device)).

/*
(forall (?M)
 (=> (instance ?M MatchDevice)
  (capability (StartFn Combustion) instrument ?M)))
*/
fof(a353,axiom,! [M] : ((s_instance(M, s_MatchDevice) => s_capability(s_StartFn(s_Combustion), s_instrument_m, M)))).

/*
(instance VendingDevice SetOrClass)
*/
fof(a354,axiom,s_instance(s_VendingDevice, s_SetOrClass)).

/*
(subclass VendingDevice Device)
*/
fof(a355,axiom,s_subclass(s_VendingDevice, s_Device)).

/*
(forall (?VD)
 (=> (instance ?VD VendingDevice)
  (hasPurpose ?VD
   (exists (?T ?C ?P)
    (and (instance ?T FinancialTransaction)
         (and (instrument ?T ?VD)
              (and (patient ?T ?C)
                   (and (instance ?C Currency)
                        (and (patient ?T ?P)
                             (instance ?P Product))))))))))
*/
%% no translation to TPTP available.

/*
(instance WritingDevice SetOrClass)
*/
fof(a356,axiom,s_instance(s_WritingDevice, s_SetOrClass)).

/*
(subclass WritingDevice Device)
*/
fof(a357,axiom,s_subclass(s_WritingDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D WritingDevice)
  (hasPurpose ?D
   (exists (?W) (and (instance ?W Writing) (instrument ?W ?D))))))
*/
%% no translation to TPTP available.

/*
(subclass SmokingDevice Device)
*/
fof(a358,axiom,s_subclass(s_SmokingDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D SmokingDevice)
  (hasPurpose ?D
   (exists (?S) (and (instance ?S Smoking) (instrument ?S ?D))))))
*/
%% no translation to TPTP available.

/*
(instance SmokingPipe SetOrClass)
*/
fof(a359,axiom,s_instance(s_SmokingPipe, s_SetOrClass)).

/*
(subclass SmokingPipe SmokingDevice)
*/
fof(a360,axiom,s_subclass(s_SmokingPipe, s_SmokingDevice)).

/*
(instance Shower SetOrClass)
*/
fof(a361,axiom,s_instance(s_Shower, s_SetOrClass)).

/*
(subclass Shower BathingDevice)
*/
fof(a362,axiom,s_subclass(s_Shower, s_BathingDevice)).

/*
(forall (?SHOWER)
 (=> (instance ?SHOWER Shower)
  (hasPurpose ?SHOWER
   (exists (?SPRAY)
    (and (instance ?SPRAY WaterMotion) (origin ?SPRAY ?SHOWER))))))
*/
%% no translation to TPTP available.

/*
(forall (?SHOWER)
 (exists (?X ?FLOOR)
  (and (and (instance ?FLOOR Object) (instance ?X Object))
       (=> (instance ?SHOWER Shower)
        (and (or (instance ?X Wall) (instance ?X Ceiling))
             (and (connected ?SHOWER ?X)
                  (and (instance ?FLOOR Floor)
                       (orientation ?SHOWER ?FLOOR Above))))))))
*/
fof(a363,axiom,! [SHOWER] : (? [X,FLOOR] : (((s_instance(FLOOR, s_Object) & s_instance(X, s_Object)) & (s_instance(SHOWER, s_Shower) => ((s_instance(X, s_Wall) | s_instance(X, s_Ceiling)) & (s_connected(SHOWER, X) & (s_instance(FLOOR, s_Floor) & s_orientation(SHOWER, FLOOR, s_Above))))))))).

/*
(subclass BathTub BathingDevice)
*/
fof(a364,axiom,s_subclass(s_BathTub, s_BathingDevice)).

/*
(subclass BathTub FluidContainer)
*/
fof(a365,axiom,s_subclass(s_BathTub, s_FluidContainer)).

/*
(forall (?TUB)
 (=> (instance ?TUB BathTub)
  (hasPurpose ?TUB
   (exists (?WATER)
    (and (instance ?WATER Water) (contains ?TUB ?WATER))))))
*/
%% no translation to TPTP available.

/*
(subclass Excrement BodySubstance)
*/
fof(a366,axiom,s_subclass(s_Excrement, s_BodySubstance)).

/*
(forall (?X)
 (exists (?PROC ?ORG)
  (and (and (instance ?ORG Agent) (instance ?PROC Process))
       (=> (instance ?X Excrement)
        (and (instance ?ORG Organism)
             (and (instance ?PROC PhysiologicProcess)
                  (and (result ?PROC ?X) (agent ?PROC ?ORG))))))))
*/
fof(a367,axiom,! [X] : (? [PROC,ORG] : (((s_instance(ORG, s_Agent) & s_instance(PROC, s_Process)) & (s_instance(X, s_Excrement) => (s_instance(ORG, s_Organism) & (s_instance(PROC, s_PhysiologicProcess) & (s_result(PROC, X) & s_agent(PROC, ORG))))))))).

/*
(instance Feces SetOrClass)
*/
fof(a368,axiom,s_instance(s_Feces, s_SetOrClass)).

/*
(subclass Feces Excrement)
*/
fof(a369,axiom,s_subclass(s_Feces, s_Excrement)).

/*
(forall (?X) (=> (instance ?X Feces) (attribute ?X Solid)))
*/
fof(a370,axiom,! [X] : ((s_instance(X, s_Feces) => s_attribute(X, s_Solid)))).

/*
(forall (?X)
 (exists (?PROC ?INT)
  (and (and (instance ?INT Object) (instance ?PROC Process))
       (=> (instance ?X Feces)
        (and (instance ?PROC PhysiologicProcess)
             (and (instrument ?PROC ?INT)
                  (and (instance ?INT Intestine)
                       (result ?PROC ?X))))))))
*/
fof(a371,axiom,! [X] : (? [PROC,INT] : (((s_instance(INT, s_Object) & s_instance(PROC, s_Process)) & (s_instance(X, s_Feces) => (s_instance(PROC, s_PhysiologicProcess) & (s_instrument(PROC, INT) & (s_instance(INT, s_Intestine) & s_result(PROC, X))))))))).

/*
(instance Urine SetOrClass)
*/
fof(a372,axiom,s_instance(s_Urine, s_SetOrClass)).

/*
(instance Excrement SetOrClass)
*/
fof(a373,axiom,s_instance(s_Excrement, s_SetOrClass)).

/*
(subclass Urine Excrement)
*/
fof(a374,axiom,s_subclass(s_Urine, s_Excrement)).

/*
(forall (?X) (=> (instance ?X Urine) (attribute ?X Solid)))
*/
fof(a375,axiom,! [X] : ((s_instance(X, s_Urine) => s_attribute(X, s_Solid)))).

/*
(forall (?X ?PROX)
 (exists (?PROC ?KIDNEY)
  (and (and (instance ?KIDNEY Object) (instance ?PROC Process))
       (=> (instance ?PROX Process)
        (=> (instance ?X Urine)
         (and (instance ?PROC PhysiologicProcess)
              (and (instrument ?PROC ?KIDNEY)
                   (and (instance ?KIDNEY Kidney)
                        (result ?PROX ?X)))))))))
*/
fof(a376,axiom,! [X,PROX] : (? [PROC,KIDNEY] : (((s_instance(KIDNEY, s_Object) & s_instance(PROC, s_Process)) & (s_instance(PROX, s_Process) => (s_instance(X, s_Urine) => (s_instance(PROC, s_PhysiologicProcess) & (s_instrument(PROC, KIDNEY) & (s_instance(KIDNEY, s_Kidney) & s_result(PROX, X)))))))))).

/*
(subclass Excretion OrganismProcess)
*/
fof(a377,axiom,s_subclass(s_Excretion, s_OrganismProcess)).

/*
(forall (?PROC)
 (exists (?ORG ?WASTE ?PART)
  (and (and (instance ?PART Object) (instance ?WASTE Entity)
            (instance ?ORG Agent))
       (=> (instance ?PROC Excretion)
        (and (instance ?ORG Organism)
             (and (agent ?PROC ?ORG)
                  (and (patient ?PROC ?WASTE)
                       (and (instance ?WASTE Excrement)
                            (and (instance ?PART BodyPart)
                                 (instrument ?PROC ?PART))))))))))
*/
fof(a378,axiom,! [PROC] : (? [ORG,WASTE,PART] : (((s_instance(PART, s_Object) & s_instance(WASTE, s_Entity) & s_instance(ORG, s_Agent)) & (s_instance(PROC, s_Excretion) => (s_instance(ORG, s_Organism) & (s_agent(PROC, ORG) & (s_patient(PROC, WASTE) & (s_instance(WASTE, s_Excrement) & (s_instance(PART, s_BodyPart) & s_instrument(PROC, PART))))))))))).

/*
(instance Urination SetOrClass)
*/
fof(a379,axiom,s_instance(s_Urination, s_SetOrClass)).

/*
(subclass Urination Excretion)
*/
fof(a380,axiom,s_subclass(s_Urination, s_Excretion)).

/*
(forall (?PROC)
 (exists (?URINE)
  (and (instance ?URINE Entity)
       (=> (instance ?PROC Urination)
        (and (instance ?URINE Urine) (patient ?PROC ?URINE))))))
*/
fof(a381,axiom,! [PROC] : (? [URINE] : ((s_instance(URINE, s_Entity) & (s_instance(PROC, s_Urination) => (s_instance(URINE, s_Urine) & s_patient(PROC, URINE))))))).

/*
(instance Defecation SetOrClass)
*/
fof(a382,axiom,s_instance(s_Defecation, s_SetOrClass)).

/*
(instance Excretion SetOrClass)
*/
fof(a383,axiom,s_instance(s_Excretion, s_SetOrClass)).

/*
(subclass Defecation Excretion)
*/
fof(a384,axiom,s_subclass(s_Defecation, s_Excretion)).

/*
(forall (?PROC)
 (exists (?FECES)
  (and (instance ?FECES Entity)
       (=> (instance ?PROC Defecation)
        (and (instance ?FECES Feces) (patient ?PROC ?FECES))))))
*/
fof(a385,axiom,! [PROC] : (? [FECES] : ((s_instance(FECES, s_Entity) & (s_instance(PROC, s_Defecation) => (s_instance(FECES, s_Feces) & s_patient(PROC, FECES))))))).

/*
(instance Sewage SetOrClass)
*/
fof(a386,axiom,s_instance(s_Sewage, s_SetOrClass)).

/*
(subclass Sewage Mixture)
*/
fof(a387,axiom,s_subclass(s_Sewage, s_Mixture)).

/*
(forall (?D ?ANI)
 (exists (?P ?W)
  (and (and (instance ?W Entity) (instance ?P Process))
       (=>
        (and (instance ?ANI Animal)
             (and (instance ?D DiseaseOrSyndrome)
                  (not (attribute ?ANI ?D))))
        (and (instance ?P BiologicalProcess)
             (and (instance ?P Removing)
                  (and (origin ?P ?ANI)
                       (and (instance ?W Sewage)
                            (and (agent ?P ?ANI)
                                 (patient ?P ?W))))))))))
*/
fof(a388,axiom,! [D,ANI] : (? [P,W] : (((s_instance(W, s_Entity) & s_instance(P, s_Process)) & ((s_instance(ANI, s_Animal) & (s_instance(D, s_DiseaseOrSyndrome) & (~ s_attribute(ANI, D)))) => (s_instance(P, s_BiologicalProcess) & (s_instance(P, s_Removing) & (s_origin(P, ANI) & (s_instance(W, s_Sewage) & (s_agent(P, ANI) & s_patient(P, W))))))))))).

/*
(instance Bidet SetOrClass)
*/
fof(a389,axiom,s_instance(s_Bidet, s_SetOrClass)).

/*
(subclass Bidet WashingDevice)
*/
fof(a390,axiom,s_subclass(s_Bidet, s_WashingDevice)).

/*
(forall (?X)
 (=> (instance ?X Bidet)
  (hasPurpose ?X
   (exists (?PROC ?WASH ?PART)
    (and (or (instance ?PROC Defecation) (instance ?PROC Urination))
         (and (instrument ?PROC ?PART)
              (and (instance ?WASH Washing)
                   (and (patient ?WASH ?PART)
                        (and (instrument ?WASH ?X)
                             (before (BeginFn (WhenFn ?PROC))
                              (BeginFn (WhenFn ?WASH))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Toilet SetOrClass)
*/
fof(a391,axiom,s_instance(s_Toilet, s_SetOrClass)).

/*
(subclass Toilet Device)
*/
fof(a392,axiom,s_subclass(s_Toilet, s_Device)).

/*
(forall (?R ?T)
 (=>
  (and (located ?T ?R) (and (instance ?T Toilet) (instance ?R Room)))
  (instance ?R Bathroom)))
*/
fof(a393,axiom,! [R,T] : (((s_located(T, R) & (s_instance(T, s_Toilet) & s_instance(R, s_Room))) => s_instance(R, s_Bathroom)))).

/*
(forall (?X)
 (=> (instance ?X Toilet)
  (hasPurpose ?X
   (exists (?PROC)
    (and (or (instance ?PROC Defecation) (instance ?PROC Urination))
         (destination ?PROC ?X))))))
*/
%% no translation to TPTP available.

/*
(instance Toothbrush SetOrClass)
*/
fof(a394,axiom,s_instance(s_Toothbrush, s_SetOrClass)).

/*
(instance BrushOrComb SetOrClass)
*/
fof(a395,axiom,s_instance(s_BrushOrComb, s_SetOrClass)).

/*
(subclass Toothbrush BrushOrComb)
*/
fof(a396,axiom,s_subclass(s_Toothbrush, s_BrushOrComb)).

/*
(forall (?T ?TOOTH ?B)
 (=> (and (instance ?TOOTH Entity) (instance ?B Entity))
  (=> (instance ?T Toothbrush)
   (hasPurpose ?T
    (exists (?K)
     (and (instance ?TOOTH Tooth)
          (and (instrument ?K ?T)
               (and (instance ?K Killing)
                    (and (instance ?B Bacterium)
                         (and (patient ?K ?B)
                              (patient ?K ?TOOTH)))))))))))
*/
%% no translation to TPTP available.

/*
(instance CigarOrCigarette SetOrClass)
*/
fof(a397,axiom,s_instance(s_CigarOrCigarette, s_SetOrClass)).

/*
(instance SmokingDevice SetOrClass)
*/
fof(a398,axiom,s_instance(s_SmokingDevice, s_SetOrClass)).

/*
(subclass CigarOrCigarette SmokingDevice)
*/
fof(a399,axiom,s_subclass(s_CigarOrCigarette, s_SmokingDevice)).

/*
(forall (?C)
 (exists (?T)
  (and (instance ?T Object)
       (=> (instance ?C CigarOrCigarette)
        (and (instance ?T Tobacco) (part ?T ?C))))))
*/
fof(a400,axiom,! [C] : (? [T] : ((s_instance(T, s_Object) & (s_instance(C, s_CigarOrCigarette) => (s_instance(T, s_Tobacco) & s_part(T, C))))))).

/*
(instance Tableware SetOrClass)
*/
fof(a401,axiom,s_instance(s_Tableware, s_SetOrClass)).

/*
(subclass Tableware Device)
*/
fof(a402,axiom,s_subclass(s_Tableware, s_Device)).

/*
(forall (?T)
 (=> (instance ?T Tableware)
  (hasPurpose ?T
   (exists (?I) (and (instance ?I Ingesting) (instrument ?I ?T))))))
*/
%% no translation to TPTP available.

/*
(subclass Compass Device)
*/
fof(a403,axiom,s_subclass(s_Compass, s_Device)).

/*
(instance Compass SetOrClass)
*/
fof(a404,axiom,s_instance(s_Compass, s_SetOrClass)).

/*
(subclass Compass ContentBearingObject)
*/
fof(a405,axiom,s_subclass(s_Compass, s_ContentBearingObject)).

/*
(forall (?C)
 (exists (?D)
  (and (instance ?D Entity)
       (=> (instance ?C Compass)
        (and (instance ?D DirectionalAttribute) (represents ?C ?D))))))
*/
fof(a406,axiom,! [C] : (? [D] : ((s_instance(D, s_Entity) & (s_instance(C, s_Compass) => (s_instance(D, s_DirectionalAttribute) & s_represents(C, D))))))).

/*
(subclass MajorAppliance Device)
*/
fof(a407,axiom,s_subclass(s_MajorAppliance, s_Device)).

/*
(subclass Refrigerator MajorAppliance)
*/
fof(a408,axiom,s_subclass(s_Refrigerator, s_MajorAppliance)).

/*
(instance Freezer SetOrClass)
*/
fof(a409,axiom,s_instance(s_Freezer, s_SetOrClass)).

/*
(subclass Freezer MajorAppliance)
*/
fof(a410,axiom,s_subclass(s_Freezer, s_MajorAppliance)).

/*
(instance CookingRange SetOrClass)
*/
fof(a411,axiom,s_instance(s_CookingRange, s_SetOrClass)).

/*
(subclass CookingRange MajorAppliance)
*/
fof(a412,axiom,s_subclass(s_CookingRange, s_MajorAppliance)).

/*
(instance CookingOven SetOrClass)
*/
fof(a413,axiom,s_instance(s_CookingOven, s_SetOrClass)).

/*
(subclass CookingOven MajorAppliance)
*/
fof(a414,axiom,s_subclass(s_CookingOven, s_MajorAppliance)).

/*
(instance HotWaterHeater SetOrClass)
*/
fof(a415,axiom,s_instance(s_HotWaterHeater, s_SetOrClass)).

/*
(subclass HotWaterHeater MajorAppliance)
*/
fof(a416,axiom,s_subclass(s_HotWaterHeater, s_MajorAppliance)).

/*
(subclass ClothesWashingMachine MajorAppliance)
*/
fof(a417,axiom,s_subclass(s_ClothesWashingMachine, s_MajorAppliance)).

/*
(subclass ClothesDryer MajorAppliance)
*/
fof(a418,axiom,s_subclass(s_ClothesDryer, s_MajorAppliance)).

/*
(instance Dishwasher SetOrClass)
*/
fof(a419,axiom,s_instance(s_Dishwasher, s_SetOrClass)).

/*
(instance MajorAppliance SetOrClass)
*/
fof(a420,axiom,s_instance(s_MajorAppliance, s_SetOrClass)).

/*
(subclass Dishwasher MajorAppliance)
*/
fof(a421,axiom,s_subclass(s_Dishwasher, s_MajorAppliance)).

/*
(subclass CoolingDevice Device)
*/
fof(a422,axiom,s_subclass(s_CoolingDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D CoolingDevice)
  (hasPurpose ?D
   (exists (?C) (and (instance ?C Cooling) (instrument ?C ?D))))))
*/
%% no translation to TPTP available.

/*
(instance FanDevice SetOrClass)
*/
fof(a423,axiom,s_instance(s_FanDevice, s_SetOrClass)).

/*
(subclass FanDevice CoolingDevice)
*/
fof(a424,axiom,s_subclass(s_FanDevice, s_CoolingDevice)).

/*
(forall (?F)
 (=> (instance ?F FanDevice)
  (hasPurpose ?F
   (exists (?W) (and (instance ?W Wind) (instrument ?W ?F))))))
*/
%% no translation to TPTP available.

/*
(subclass HeatingDevice Device)
*/
fof(a425,axiom,s_subclass(s_HeatingDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D HeatingDevice)
  (hasPurpose ?D
   (exists (?H) (and (instance ?H Heating) (instrument ?H ?D))))))
*/
%% no translation to TPTP available.

/*
(subclass Oven HeatingDevice)
*/
fof(a426,axiom,s_subclass(s_Oven, s_HeatingDevice)).

/*
(instance Oven SetOrClass)
*/
fof(a427,axiom,s_instance(s_Oven, s_SetOrClass)).

/*
(subclass Oven Container)
*/
fof(a428,axiom,s_subclass(s_Oven, s_Container)).

/*
(forall (?O)
 (=> (instance ?O Oven)
  (hasPurpose ?O
   (exists (?C) (and (instance ?C Cooking) (instrument ?C ?O))))))
*/
%% no translation to TPTP available.

/*
(instance Stove SetOrClass)
*/
fof(a429,axiom,s_instance(s_Stove, s_SetOrClass)).

/*
(subclass Stove HeatingDevice)
*/
fof(a430,axiom,s_subclass(s_Stove, s_HeatingDevice)).

/*
(forall (?S)
 (=> (instance ?S Stove)
  (hasPurpose ?S
   (exists (?C) (and (instance ?C Cooking) (instrument ?C ?S))))))
*/
%% no translation to TPTP available.

/*
(instance CoolingDevice SetOrClass)
*/
fof(a431,axiom,s_instance(s_CoolingDevice, s_SetOrClass)).

/*
(subclass Refrigerator CoolingDevice)
*/
fof(a432,axiom,s_subclass(s_Refrigerator, s_CoolingDevice)).

/*
(subclass Refrigerator ElectricDevice)
*/
fof(a433,axiom,s_subclass(s_Refrigerator, s_ElectricDevice)).

/*
(instance Refrigerator SetOrClass)
*/
fof(a434,axiom,s_instance(s_Refrigerator, s_SetOrClass)).

/*
(subclass Refrigerator Container)
*/
fof(a435,axiom,s_subclass(s_Refrigerator, s_Container)).

/*
(instance PotOrPan SetOrClass)
*/
fof(a436,axiom,s_instance(s_PotOrPan, s_SetOrClass)).

/*
(subclass PotOrPan Container)
*/
fof(a437,axiom,s_subclass(s_PotOrPan, s_Container)).

/*
(forall (?P)
 (=> (instance ?P PotOrPan)
  (hasPurpose ?P
   (exists (?C) (and (instance ?C Cooking) (instrument ?C ?P))))))
*/
%% no translation to TPTP available.

/*
(instance Ramp SetOrClass)
*/
fof(a438,axiom,s_instance(s_Ramp, s_SetOrClass)).

/*
(subclass Ramp SelfConnectedObject)
*/
fof(a439,axiom,s_subclass(s_Ramp, s_SelfConnectedObject)).

/*
(forall (?R) (=> (instance ?R Ramp) (capability MotionUpward path ?R)))
*/
fof(a440,axiom,! [R] : ((s_instance(R, s_Ramp) => s_capability(s_MotionUpward, s_path_m, R)))).

/*
(forall (?R)
 (=> (instance ?R Ramp) (capability MotionDownward path ?R)))
*/
fof(a441,axiom,! [R] : ((s_instance(R, s_Ramp) => s_capability(s_MotionDownward, s_path_m, R)))).

/*
(subclass RecreationOrExerciseDevice Device)
*/
fof(a442,axiom,s_subclass(s_RecreationOrExerciseDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D RecreationOrExerciseDevice)
  (hasPurpose ?D
   (exists (?E)
    (and (instance ?E RecreationOrExercise) (instrument ?E ?D))))))
*/
%% no translation to TPTP available.

/*
(instance WalkingCane SetOrClass)
*/
fof(a443,axiom,s_instance(s_WalkingCane, s_SetOrClass)).

/*
(subclass WalkingCane Device)
*/
fof(a444,axiom,s_subclass(s_WalkingCane, s_Device)).

/*
(forall (?C)
 (=> (instance ?C WalkingCane)
  (hasPurpose ?C
   (exists (?W) (and (instance ?W Walking) (instrument ?W ?C))))))
*/
%% no translation to TPTP available.

/*
(subclass WashingDevice Device)
*/
fof(a445,axiom,s_subclass(s_WashingDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D WashingDevice)
  (hasPurpose ?D
   (exists (?W) (and (instance ?W Washing) (instrument ?W ?D))))))
*/
%% no translation to TPTP available.

/*
(subclass MaterialHandlingEquipment Device)
*/
fof(a446,axiom,s_subclass(s_MaterialHandlingEquipment, s_Device)).

/*
(instance Crane SetOrClass)
*/
fof(a447,axiom,s_instance(s_Crane, s_SetOrClass)).

/*
(subclass Crane MaterialHandlingEquipment)
*/
fof(a448,axiom,s_subclass(s_Crane, s_MaterialHandlingEquipment)).

/*
(forall (?C)
 (exists (?H)
  (and (instance ?H CorpuscularObject)
       (=> (instance ?C Crane)
        (and (instance ?H HoistingDevice) (component ?H ?C))))))
*/
fof(a449,axiom,! [C] : (? [H] : ((s_instance(H, s_CorpuscularObject) & (s_instance(C, s_Crane) => (s_instance(H, s_HoistingDevice) & s_component(H, C))))))).

/*
(instance HoistingDevice SetOrClass)
*/
fof(a450,axiom,s_instance(s_HoistingDevice, s_SetOrClass)).

/*
(instance MaterialHandlingEquipment SetOrClass)
*/
fof(a451,axiom,s_instance(s_MaterialHandlingEquipment, s_SetOrClass)).

/*
(subclass HoistingDevice MaterialHandlingEquipment)
*/
fof(a452,axiom,s_subclass(s_HoistingDevice, s_MaterialHandlingEquipment)).

/*
(forall (?H)
 (=> (instance ?H HoistingDevice)
  (capability MotionUpward instrument ?H)))
*/
fof(a453,axiom,! [H] : ((s_instance(H, s_HoistingDevice) => s_capability(s_MotionUpward, s_instrument_m, H)))).

/*
(forall (?H)
 (=> (instance ?H HoistingDevice)
  (capability MotionDownward instrument ?H)))
*/
fof(a454,axiom,! [H] : ((s_instance(H, s_HoistingDevice) => s_capability(s_MotionDownward, s_instrument_m, H)))).

/*
(subclass OpticalDevice Device)
*/
fof(a455,axiom,s_subclass(s_OpticalDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D OpticalDevice)
  (hasPurpose ?D
   (exists (?S) (and (instance ?S Seeing) (instrument ?S ?D))))))
*/
%% no translation to TPTP available.

/*
(instance EyeGlass SetOrClass)
*/
fof(a456,axiom,s_instance(s_EyeGlass, s_SetOrClass)).

/*
(subclass EyeGlass OpticalDevice)
*/
fof(a457,axiom,s_subclass(s_EyeGlass, s_OpticalDevice)).

/*
(instance Lens SetOrClass)
*/
fof(a458,axiom,s_instance(s_Lens, s_SetOrClass)).

/*
(subclass Lens OpticalDevice)
*/
fof(a459,axiom,s_subclass(s_Lens, s_OpticalDevice)).

/*
(instance Microscope SetOrClass)
*/
fof(a460,axiom,s_instance(s_Microscope, s_SetOrClass)).

/*
(instance OpticalDevice SetOrClass)
*/
fof(a461,axiom,s_instance(s_OpticalDevice, s_SetOrClass)).

/*
(subclass Microscope OpticalDevice)
*/
fof(a462,axiom,s_subclass(s_Microscope, s_OpticalDevice)).

/*
(instance Filter SetOrClass)
*/
fof(a463,axiom,s_instance(s_Filter, s_SetOrClass)).

/*
(subclass Filter Device)
*/
fof(a464,axiom,s_subclass(s_Filter, s_Device)).

/*
(forall (?FILTER)
 (=> (instance ?FILTER Filter)
  (hasPurpose ?FILTER
   (exists (?REMOVE ?M)
    (and (instance ?REMOVE Removing)
         (and (origin ?REMOVE ?M)
              (and (instance ?M Mixture)
                   (instrument ?REMOVE ?FILTER))))))))
*/
%% no translation to TPTP available.

/*
(instance FileDevice SetOrClass)
*/
fof(a465,axiom,s_instance(s_FileDevice, s_SetOrClass)).

/*
(subclass FileDevice Device)
*/
fof(a466,axiom,s_subclass(s_FileDevice, s_Device)).

/*
(forall (?DEVICE)
 (=> (instance ?DEVICE FileDevice)
  (capability SurfaceChange instrument ?DEVICE)))
*/
fof(a467,axiom,! [DEVICE] : ((s_instance(DEVICE, s_FileDevice) => s_capability(s_SurfaceChange, s_instrument_m, DEVICE)))).

/*
(subclass ElectricDevice Device)
*/
fof(a468,axiom,s_subclass(s_ElectricDevice, s_Device)).

/*
(forall (?DEV ?EV)
 (exists (?R)
  (and (instance ?R Object)
       (=>
        (and (instance ?DEV ElectricDevice)
             (and (instance ?EV Process) (instrument ?EV ?DEV)))
        (and (instance ?R Electricity) (resource ?EV ?R))))))
*/
fof(a469,axiom,! [DEV,EV] : (? [R] : ((s_instance(R, s_Object) & ((s_instance(DEV, s_ElectricDevice) & (s_instance(EV, s_Process) & s_instrument(EV, DEV))) => (s_instance(R, s_Electricity) & s_resource(EV, R))))))).

/*
(instance Electricity SetOrClass)
*/
fof(a470,axiom,s_instance(s_Electricity, s_SetOrClass)).

/*
(subclass Electricity Substance)
*/
fof(a471,axiom,s_subclass(s_Electricity, s_Substance)).

/*
(subclass PowerSource Device)
*/
fof(a472,axiom,s_subclass(s_PowerSource, s_Device)).

/*
(forall (?PS)
 (exists (?RE)
  (and (instance ?RE Process)
       (=> (instance ?PS PowerSource)
        (and (instance ?RE RadiatingElectromagnetic)
             (origin ?RE ?PS))))))
*/
fof(a473,axiom,! [PS] : (? [RE] : ((s_instance(RE, s_Process) & (s_instance(PS, s_PowerSource) => (s_instance(RE, s_RadiatingElectromagnetic) & s_origin(RE, PS))))))).

/*
(subclass DCPowerSource PowerSource)
*/
fof(a474,axiom,s_subclass(s_DCPowerSource, s_PowerSource)).

/*
(instance DCPowerSource SetOrClass)
*/
fof(a475,axiom,s_instance(s_DCPowerSource, s_SetOrClass)).

/*
(subclass Battery DCPowerSource)
*/
fof(a476,axiom,s_subclass(s_Battery, s_DCPowerSource)).

/*
(instance Battery SetOrClass)
*/
fof(a477,axiom,s_instance(s_Battery, s_SetOrClass)).

/*
(subclass Battery ElectricDevice)
*/
fof(a478,axiom,s_subclass(s_Battery, s_ElectricDevice)).

/*
(instance Radar SetOrClass)
*/
fof(a479,axiom,s_instance(s_Radar, s_SetOrClass)).

/*
(subclass Radar ElectricDevice)
*/
fof(a480,axiom,s_subclass(s_Radar, s_ElectricDevice)).

/*
(forall (?RADAR)
 (=> (instance ?RADAR Radar)
  (hasPurpose ?RADAR
   (exists (?DISCOVER)
    (and (instance ?DISCOVER Discovering)
         (instrument ?DISCOVER ?RADAR))))))
*/
%% no translation to TPTP available.

/*
(forall (?RADAR)
 (=> (instance ?RADAR Radar)
  (capability RadiatingElectromagnetic agent ?RADAR)))
*/
fof(a481,axiom,! [RADAR] : ((s_instance(RADAR, s_Radar) => s_capability(s_RadiatingElectromagnetic, s_agent_m, RADAR)))).

/*
(instance discovers BinaryPredicate)
*/
fof(a482,axiom,s_instance(s_discovers_m, s_BinaryPredicate)).

/*
(forall (?OBJECT ?AGENT)
 (exists (?DISCOVERING)
  (and (instance ?DISCOVERING Process)
       (=> (and (instance ?AGENT Agent) (instance ?OBJECT Object))
        (=> (discovers ?AGENT ?OBJECT)
         (and (instance ?DISCOVERING Discovering)
              (and (agent ?DISCOVERING ?AGENT)
                   (patient ?DISCOVERING ?OBJECT))))))))
*/
fof(a483,axiom,! [OBJECT,AGENT] : (? [DISCOVERING] : ((s_instance(DISCOVERING, s_Process) & ((s_instance(AGENT, s_Agent) & s_instance(OBJECT, s_Object)) => (s_discovers(AGENT, OBJECT) => (s_instance(DISCOVERING, s_Discovering) & (s_agent(DISCOVERING, AGENT) & s_patient(DISCOVERING, OBJECT))))))))).

/*
(instance Sonar SetOrClass)
*/
fof(a484,axiom,s_instance(s_Sonar, s_SetOrClass)).

/*
(subclass Sonar CorpuscularObject)
*/
fof(a485,axiom,s_subclass(s_Sonar, s_CorpuscularObject)).

/*
(forall (?SONAR)
 (=> (instance ?SONAR Sonar)
  (hasPurpose ?SONAR
   (exists (?DISCOVER)
    (and (instance ?DISCOVER Discovering)
         (instrument ?DISCOVER ?SONAR))))))
*/
%% no translation to TPTP available.

/*
(forall (?SONAR)
 (=> (instance ?SONAR Sonar) (capability RadiatingSound agent ?SONAR)))
*/
fof(a486,axiom,! [SONAR] : ((s_instance(SONAR, s_Sonar) => s_capability(s_RadiatingSound, s_agent_m, SONAR)))).

/*
(instance Echoing SetOrClass)
*/
fof(a487,axiom,s_instance(s_Echoing, s_SetOrClass)).

/*
(subclass Echoing RadiatingSound)
*/
fof(a488,axiom,s_subclass(s_Echoing, s_RadiatingSound)).

/*
(subclass ElectricalSignalling Signalling)
*/
fof(a489,axiom,s_subclass(s_ElectricalSignalling, s_Signalling)).

/*
(forall (?S)
 (exists (?D)
  (and (instance ?D Object)
       (=> (instance ?S ElectricalSignalling)
        (and (instance ?D ElectricDevice) (instrument ?S ?D))))))
*/
fof(a490,axiom,! [S] : (? [D] : ((s_instance(D, s_Object) & (s_instance(S, s_ElectricalSignalling) => (s_instance(D, s_ElectricDevice) & s_instrument(S, D))))))).

/*
(instance ElectronicSignalling SetOrClass)
*/
fof(a491,axiom,s_instance(s_ElectronicSignalling, s_SetOrClass)).

/*
(instance ElectricalSignalling SetOrClass)
*/
fof(a492,axiom,s_instance(s_ElectricalSignalling, s_SetOrClass)).

/*
(subclass ElectronicSignalling ElectricalSignalling)
*/
fof(a493,axiom,s_subclass(s_ElectronicSignalling, s_ElectricalSignalling)).

/*
(subclass SecurityDevice Device)
*/
fof(a494,axiom,s_subclass(s_SecurityDevice, s_Device)).

/*
(subclass Lock SecurityDevice)
*/
fof(a495,axiom,s_subclass(s_Lock, s_SecurityDevice)).

/*
(instance Key SetOrClass)
*/
fof(a496,axiom,s_instance(s_Key, s_SetOrClass)).

/*
(subclass Key SecurityDevice)
*/
fof(a497,axiom,s_subclass(s_Key, s_SecurityDevice)).

/*
(forall (?OPEN ?X ?CLOSE)
 (=>
  (and (instance ?OPEN SymbolicString)
       (instance ?CLOSE SymbolicString))
  (=> (instance ?X Key)
   (hasPurpose ?X
    (exists (?LOCK)
     (and (instance ?LOCK Lock)
          (and (capability
                (KappaFn ?CLOSE
                 (and (instance ?CLOSE Closing)
                      (and (patient ?CLOSE ?LOCK)
                           (holdsDuring (ImmediateFutureFn ?CLOSE)
                            (attribute ?LOCK Locked)))))
                instrument ?X)
               (capability
                (KappaFn ?OPEN
                 (and (instance ?OPEN Closing)
                      (and (patient ?OPEN ?LOCK)
                           (holdsDuring (ImmediateFutureFn ?OPEN)
                            (not (attribute ?LOCK Locked))))))
                instrument ?X))))))))
*/
%% no translation to TPTP available.

/*
(instance Locked RelationalAttribute)
*/
fof(a498,axiom,s_instance(s_Locked, s_RelationalAttribute)).

/*
(forall (?X)
 (exists (?LOCK ?CLOSE ?MOVE)
  (and (and (instance ?MOVE Process) (instance ?CLOSE Process)
            (instance ?LOCK Object))
       (=> (instance ?X Object)
        (=> (attribute ?X Locked)
         (and (instance ?LOCK Lock)
              (and (connected ?LOCK ?X)
                   (and (instance ?CLOSE Closing)
                        (and (patient ?CLOSE ?LOCK)
                             (and (instance ?MOVE Motion)
                                  (and
                                   (earlier
                                    (WhenFn ?CLOSE)
                                    (WhenFn (attribute ?X Locked)))
                                   (holdsDuring
                                    (WhenFn (attribute ?X Locked))
                                    (not
                                     (modalAttribute
                                      (patient ?MOVE ?X)
                                      Possibility))))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Locked) (instance ?X Object))))
*/
fof(a499,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Locked) => s_instance(X, s_Object))))).

/*
(subclass SafeContainer Container)
*/
fof(a500,axiom,s_subclass(s_SafeContainer, s_Container)).

/*
(instance SafeContainer SetOrClass)
*/
fof(a501,axiom,s_instance(s_SafeContainer, s_SetOrClass)).

/*
(subclass SafeContainer SecurityDevice)
*/
fof(a502,axiom,s_subclass(s_SafeContainer, s_SecurityDevice)).

/*
(forall (?S)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?S SafeContainer)
        (and (instance ?L Lock) (part ?L ?S))))))
*/
fof(a503,axiom,! [S] : (? [L] : ((s_instance(L, s_Object) & (s_instance(S, s_SafeContainer) => (s_instance(L, s_Lock) & s_part(L, S))))))).

/*
(instance AnimalController SetOrClass)
*/
fof(a504,axiom,s_instance(s_AnimalController, s_SetOrClass)).

/*
(subclass AnimalController Device)
*/
fof(a505,axiom,s_subclass(s_AnimalController, s_Device)).

/*
(forall (?AC)
 (=> (instance ?AC AnimalController)
  (hasPurpose ?AC
   (exists (?G ?A)
    (and (instance ?G Guiding)
         (and (instrument ?G ?AC)
              (and (instance ?A Animal) (patient ?G ?A))))))))
*/
%% no translation to TPTP available.

/*
(subclass SelfPoweredDevice Device)
*/
fof(a506,axiom,s_subclass(s_SelfPoweredDevice, s_Device)).

/*
(forall (?DEVICE)
 (exists (?SOURCE)
  (and (instance ?SOURCE CorpuscularObject)
       (=> (instance ?DEVICE SelfPoweredDevice)
        (and (instance ?SOURCE Device)
             (powerComponent ?SOURCE ?DEVICE))))))
*/
fof(a507,axiom,! [DEVICE] : (? [SOURCE] : ((s_instance(SOURCE, s_CorpuscularObject) & (s_instance(DEVICE, s_SelfPoweredDevice) => (s_instance(SOURCE, s_Device) & s_powerComponent(SOURCE, DEVICE))))))).

/*
(instance AnimalPoweredDevice SetOrClass)
*/
fof(a508,axiom,s_instance(s_AnimalPoweredDevice, s_SetOrClass)).

/*
(subclass AnimalPoweredDevice Device)
*/
fof(a509,axiom,s_subclass(s_AnimalPoweredDevice, s_Device)).

/*
(forall (?D ?P)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?P Process)
        (=> (and (instance ?D AnimalPoweredDevice) (instrument ?P ?D))
         (and (instance ?A Animal) (instrument ?P ?A)))))))
*/
fof(a510,axiom,! [D,P] : (? [A] : ((s_instance(A, s_Object) & (s_instance(P, s_Process) => ((s_instance(D, s_AnimalPoweredDevice) & s_instrument(P, D)) => (s_instance(A, s_Animal) & s_instrument(P, A)))))))).

/*
(instance Flat ShapeAttribute)
*/
fof(a511,axiom,s_instance(s_Flat, s_ShapeAttribute)).

/*
(forall (?F ?S2 ?H ?S1)
 (=>
  (and (instance ?S1 Quantity) (instance ?S1 SelfConnectedObject)
       (instance ?H LengthMeasure) (instance ?F SelfConnectedObject)
       (instance ?S2 SelfConnectedObject) (instance ?S2 Quantity))
  (=> (attribute ?F Flat)
   (and (side ?S1 ?F)
        (and (side ?S2 ?F)
             (and (meetsSpatially ?S1 ?S2)
                  (and (not (equal ?S1 ?S2))
                       (and (height ?F ?H)
                            (and (greaterThan
                                  ?S1
                                  (MultiplicationFn 2 ?H))
                                 (greaterThan
                                  ?S2
                                  (MultiplicationFn 2 ?H)))))))))))
*/
fof(a512,axiom,! [F,S2,H,S1] : (((s_instance(S1, s_Quantity) & s_instance(S1, s_SelfConnectedObject) & s_instance(H, s_LengthMeasure) & s_instance(F, s_SelfConnectedObject) & s_instance(S2, s_SelfConnectedObject) & s_instance(S2, s_Quantity)) => (s_attribute(F, s_Flat) => (s_side(S1, F) & (s_side(S2, F) & (s_meetsSpatially(S1, S2) & ((~ (S1 = S2)) & (s_height(F, H) & (greater(S1, times(2, H)) & greater(S2, times(2, H)))))))))))).

/*
(instance LongAndThin ShapeAttribute)
*/
fof(a513,axiom,s_instance(s_LongAndThin, s_ShapeAttribute)).

/*
(forall (?F ?S2 ?H ?S1)
 (=>
  (and (instance ?S1 Quantity) (instance ?S1 SelfConnectedObject)
       (instance ?H LengthMeasure) (instance ?F SelfConnectedObject)
       (instance ?S2 SelfConnectedObject) (instance ?S2 Quantity))
  (=> (attribute ?F LongAndThin)
   (and (side ?S1 ?F)
        (and (side ?S2 ?F)
             (and (meetsSpatially ?S1 ?S2)
                  (and (not (equal ?S1 ?S2))
                       (and (length ?F ?H)
                            (and (lessThan ?S1 (MultiplicationFn 3 ?H))
                                 (lessThan
                                  ?S2
                                  (MultiplicationFn 3 ?H)))))))))))
*/
fof(a514,axiom,! [F,S2,H,S1] : (((s_instance(S1, s_Quantity) & s_instance(S1, s_SelfConnectedObject) & s_instance(H, s_LengthMeasure) & s_instance(F, s_SelfConnectedObject) & s_instance(S2, s_SelfConnectedObject) & s_instance(S2, s_Quantity)) => (s_attribute(F, s_LongAndThin) => (s_side(S1, F) & (s_side(S2, F) & (s_meetsSpatially(S1, S2) & ((~ (S1 = S2)) & (s_length(F, H) & (less(S1, times(3, H)) & less(S2, times(3, H)))))))))))).

/*
(instance LevelShape ShapeAttribute)
*/
fof(a515,axiom,s_instance(s_LevelShape, s_ShapeAttribute)).

/*
(forall (?O)
 (forall (?P1 ?P2 ?T ?H1 ?H2)
  (=>
   (and (instance ?H2 LengthMeasure) (instance ?H1 LengthMeasure)
        (instance ?T SelfConnectedObject)
        (instance ?P2 SelfConnectedObject)
        (instance ?P1 SelfConnectedObject))
   (=> (instance ?O SelfConnectedObject)
    (=> (attribute ?O LevelShape)
     (not (and (top ?T ?O)
               (and (part ?P1 ?T)
                    (and (part ?P2 ?T)
                         (and (height ?P1 ?H1)
                              (and (height ?P2 ?H2)
                                   (greaterThan ?H1 ?H2))))))))))))
*/
fof(a516,axiom,! [O] : (! [P1,P2,T,H1,H2] : (((s_instance(H2, s_LengthMeasure) & s_instance(H1, s_LengthMeasure) & s_instance(T, s_SelfConnectedObject) & s_instance(P2, s_SelfConnectedObject) & s_instance(P1, s_SelfConnectedObject)) => (s_instance(O, s_SelfConnectedObject) => (s_attribute(O, s_LevelShape) => (~ (s_top(T, O) & (s_part(P1, T) & (s_part(P2, T) & (s_height(P1, H1) & (s_height(P2, H2) & greater(H1, H2))))))))))))).

/*
(instance SymmetricShape ShapeAttribute)
*/
fof(a517,axiom,s_instance(s_SymmetricShape, s_ShapeAttribute)).

/*
(forall (?T)
 (exists (?C1 ?C2)
  (and (and (instance ?C2 Object) (instance ?C1 Object))
       (=> (instance ?T Object)
        (=> (attribute ?T SymmetricShape)
         (and (copy ?C1 ?C2)
              (equal ?T (MereologicalSumFn ?C1 ?C2))))))))
*/
fof(a518,axiom,! [T] : (? [C1,C2] : (((s_instance(C2, s_Object) & s_instance(C1, s_Object)) & (s_instance(T, s_Object) => (s_attribute(T, s_SymmetricShape) => (s_copy(C1, C2) & (T = s_MereologicalSumFn(C1, C2))))))))).

/*
(instance Baton SetOrClass)
*/
fof(a519,axiom,s_instance(s_Baton, s_SetOrClass)).

/*
(subclass Baton Device)
*/
fof(a520,axiom,s_subclass(s_Baton, s_Device)).

/*
(forall (?B)
 (=> (instance ?B Baton)
  (hasPurpose ?B
   (exists (?M ?G)
    (and (instance ?M MusicalPerformance)
         (and (instance ?G Guiding)
              (and (subProcess ?G ?M) (instrument ?G ?B))))))))
*/
%% no translation to TPTP available.

/*
(forall (?B) (=> (instance ?B Baton) (attribute ?B LongAndThin)))
*/
fof(a521,axiom,! [B] : ((s_instance(B, s_Baton) => s_attribute(B, s_LongAndThin)))).

/*
(instance SecurityDevice SetOrClass)
*/
fof(a522,axiom,s_instance(s_SecurityDevice, s_SetOrClass)).

/*
(subclass SecurityAlarm SecurityDevice)
*/
fof(a523,axiom,s_subclass(s_SecurityAlarm, s_SecurityDevice)).

/*
(instance SecurityAlarm SetOrClass)
*/
fof(a524,axiom,s_instance(s_SecurityAlarm, s_SetOrClass)).

/*
(subclass SecurityAlarm ElectricDevice)
*/
fof(a525,axiom,s_subclass(s_SecurityAlarm, s_ElectricDevice)).

/*
(partition3 Quantity FiniteQuantity InfiniteQuantity)
*/
fof(a526,axiom,s_partition3(s_Quantity, s_FiniteQuantity, s_InfiniteQuantity)).

/*
(instance FiniteQuantity SetOrClass)
*/
fof(a527,axiom,s_instance(s_FiniteQuantity, s_SetOrClass)).

/*
(subclass FiniteQuantity Quantity)
*/
fof(a528,axiom,s_subclass(s_FiniteQuantity, s_Quantity)).

/*
(instance InfiniteQuantity SetOrClass)
*/
fof(a529,axiom,s_instance(s_InfiniteQuantity, s_SetOrClass)).

/*
(subclass InfiniteQuantity Quantity)
*/
fof(a530,axiom,s_subclass(s_InfiniteQuantity, s_Quantity)).

/*
(subclass Clock MeasuringDevice)
*/
fof(a531,axiom,s_subclass(s_Clock, s_MeasuringDevice)).

/*
(forall (?C ?Q ?M)
 (=> (instance ?Q Entity)
  (=>
   (and (instance ?M Measuring)
        (and (result ?M ?Q)
             (and (instrument ?M ?C) (instance ?C Clock))))
   (instance ?Q TimeMeasure))))
*/
fof(a532,axiom,! [C,Q,M] : ((s_instance(Q, s_Entity) => ((s_instance(M, s_Measuring) & (s_result(M, Q) & (s_instrument(M, C) & s_instance(C, s_Clock)))) => s_instance(Q, s_TimeMeasure))))).

/*
(instance WatchClock SetOrClass)
*/
fof(a533,axiom,s_instance(s_WatchClock, s_SetOrClass)).

/*
(subclass WatchClock Clock)
*/
fof(a534,axiom,s_subclass(s_WatchClock, s_Clock)).

/*
(forall (?W ?C ?P)
 (=> (instance ?P Animal)
  (=>
   (and (wears ?P ?C)
        (and (located ?C ?W)
             (and (instance ?C Clock) (instance ?W Wrist))))
   (instance ?C WatchClock))))
*/
fof(a535,axiom,! [W,C,P] : ((s_instance(P, s_Animal) => ((s_wears(P, C) & (s_located(C, W) & (s_instance(C, s_Clock) & s_instance(W, s_Wrist)))) => s_instance(C, s_WatchClock))))).

/*
(instance Thermometer SetOrClass)
*/
fof(a536,axiom,s_instance(s_Thermometer, s_SetOrClass)).

/*
(subclass Thermometer MeasuringDevice)
*/
fof(a537,axiom,s_subclass(s_Thermometer, s_MeasuringDevice)).

/*
(forall (?THERMOMETER ?QUANTITY ?MEASURE)
 (=> (instance ?QUANTITY Entity)
  (=>
   (and (instance ?MEASURE Measuring)
        (and (result ?MEASURE ?QUANTITY)
             (and (instrument ?MEASURE ?THERMOMETER)
                  (instance ?THERMOMETER Thermometer))))
   (instance ?QUANTITY TemperatureMeasure))))
*/
fof(a538,axiom,! [THERMOMETER,QUANTITY,MEASURE] : ((s_instance(QUANTITY, s_Entity) => ((s_instance(MEASURE, s_Measuring) & (s_result(MEASURE, QUANTITY) & (s_instrument(MEASURE, THERMOMETER) & s_instance(THERMOMETER, s_Thermometer)))) => s_instance(QUANTITY, s_TemperatureMeasure))))).

/*
(instance PressureMeasuringDevice SetOrClass)
*/
fof(a539,axiom,s_instance(s_PressureMeasuringDevice, s_SetOrClass)).

/*
(subclass PressureMeasuringDevice MeasuringDevice)
*/
fof(a540,axiom,s_subclass(s_PressureMeasuringDevice, s_MeasuringDevice)).

/*
(forall (?T ?Q ?M)
 (=> (instance ?Q Entity)
  (=>
   (and (instance ?M Measuring)
        (and (result ?M ?Q)
             (and (instrument ?M ?T) (instance ?T Thermometer))))
   (instance ?Q TemperatureMeasure))))
*/
fof(a541,axiom,! [T,Q,M] : ((s_instance(Q, s_Entity) => ((s_instance(M, s_Measuring) & (s_result(M, Q) & (s_instrument(M, T) & s_instance(T, s_Thermometer)))) => s_instance(Q, s_TemperatureMeasure))))).

/*
(instance measurementReading BinaryPredicate)
*/
fof(a542,axiom,s_instance(s_measurementReading_m, s_BinaryPredicate)).

/*
(subclass CommunicationDevice EngineeringComponent)
*/
fof(a543,axiom,s_subclass(s_CommunicationDevice, s_EngineeringComponent)).

/*
(forall (?DEVICE)
 (=> (instance ?DEVICE CommunicationDevice)
  (capability Communication instrument ?DEVICE)))
*/
fof(a544,axiom,! [DEVICE] : ((s_instance(DEVICE, s_CommunicationDevice) => s_capability(s_Communication, s_instrument_m, DEVICE)))).

/*
(subclass Telephone ElectricDevice)
*/
fof(a545,axiom,s_subclass(s_Telephone, s_ElectricDevice)).

/*
(subclass Telephone CommunicationDevice)
*/
fof(a546,axiom,s_subclass(s_Telephone, s_CommunicationDevice)).

/*
(instance Telephoning SetOrClass)
*/
fof(a547,axiom,s_instance(s_Telephoning, s_SetOrClass)).

/*
(subclass Telephoning Communication)
*/
fof(a548,axiom,s_subclass(s_Telephoning, s_Communication)).

/*
(forall (?TEL)
 (exists (?DEVICE)
  (and (instance ?DEVICE Object)
       (=> (instance ?TEL Telephoning)
        (and (instance ?DEVICE Telephone) (instrument ?TEL ?DEVICE))))))
*/
fof(a549,axiom,! [TEL] : (? [DEVICE] : ((s_instance(DEVICE, s_Object) & (s_instance(TEL, s_Telephoning) => (s_instance(DEVICE, s_Telephone) & s_instrument(TEL, DEVICE))))))).

/*
(forall (?AGENT ?TEL)
 (exists (?SPEAK)
  (and (instance ?SPEAK Process)
       (=> (instance ?AGENT Agent)
        (=> (instance ?TEL Telephoning)
         (and (instance ?SPEAK Speaking)
              (and (subProcess ?SPEAK ?TEL)
                   (=> (agent ?TEL ?AGENT) (agent ?SPEAK ?AGENT)))))))))
*/
fof(a550,axiom,! [AGENT,TEL] : (? [SPEAK] : ((s_instance(SPEAK, s_Process) & (s_instance(AGENT, s_Agent) => (s_instance(TEL, s_Telephoning) => (s_instance(SPEAK, s_Speaking) & (s_subProcess(SPEAK, TEL) & (s_agent(TEL, AGENT) => s_agent(SPEAK, AGENT)))))))))).

/*
(instance Fax SetOrClass)
*/
fof(a551,axiom,s_instance(s_Fax, s_SetOrClass)).

/*
(subclass Fax ArtifactMediatedCommunication)
*/
fof(a552,axiom,s_subclass(s_Fax, s_ArtifactMediatedCommunication)).

/*
(forall (?Fax)
 (exists (?FaxMachine)
  (and (instance ?FaxMachine Object)
       (=> (instance ?Fax Fax)
        (and (instance ?FaxMachine FaxMachine)
             (instrument ?Fax ?FaxMachine))))))
*/
fof(a553,axiom,! [FAX] : (? [FAXMACHINE] : ((s_instance(FAXMACHINE, s_Object) & (s_instance(FAX, s_Fax) => (s_instance(FAXMACHINE, s_FaxMachine) & s_instrument(FAX, FAXMACHINE))))))).

/*
(subclass FaxMachine TelephonyDevice)
*/
fof(a554,axiom,s_subclass(s_FaxMachine, s_TelephonyDevice)).

/*
(subclass FaxMachine ElectricDevice)
*/
fof(a555,axiom,s_subclass(s_FaxMachine, s_ElectricDevice)).

/*
(instance FaxMachine SetOrClass)
*/
fof(a556,axiom,s_instance(s_FaxMachine, s_SetOrClass)).

/*
(subclass FaxMachine CommunicationDevice)
*/
fof(a557,axiom,s_subclass(s_FaxMachine, s_CommunicationDevice)).

/*
(instance emailAddress BinaryPredicate)
*/
fof(a558,axiom,s_instance(s_emailAddress_m, s_BinaryPredicate)).

/*
(subrelation emailAddress refers)
*/
fof(a559,axiom,s_subrelation(s_emailAddress_m, s_refers_m)).

/*
(subclass LightFixture Device)
*/
fof(a560,axiom,s_subclass(s_LightFixture, s_Device)).

/*
(forall (?F)
 (=> (instance ?F LightFixture)
  (capability RadiatingLight instrument ?F)))
*/
fof(a561,axiom,! [F] : ((s_instance(F, s_LightFixture) => s_capability(s_RadiatingLight, s_instrument_m, F)))).

/*
(instance Candle SetOrClass)
*/
fof(a562,axiom,s_instance(s_Candle, s_SetOrClass)).

/*
(subclass Candle LightFixture)
*/
fof(a563,axiom,s_subclass(s_Candle, s_LightFixture)).

/*
(forall (?CANDLE) (=> (instance ?CANDLE Candle) (material Wax ?CANDLE)))
*/
fof(a564,axiom,! [CANDLE] : ((s_instance(CANDLE, s_Candle) => s_material(s_Wax, CANDLE)))).

/*
(forall (?C)
 (=> (instance ?C Candle)
  (hasPurpose ?C
   (exists (?F) (and (instance ?F Fire) (resource ?F ?C))))))
*/
%% no translation to TPTP available.

/*
(subclass Lightning WeatherProcess)
*/
fof(a565,axiom,s_subclass(s_Lightning, s_WeatherProcess)).

/*
(instance Lightning SetOrClass)
*/
fof(a566,axiom,s_instance(s_Lightning, s_SetOrClass)).

/*
(subclass Lightning Radiating)
*/
fof(a567,axiom,s_subclass(s_Lightning, s_Radiating)).

/*
(forall (?L)
 (exists (?C)
  (and (instance ?C Object)
       (=> (instance ?L Lightning)
        (and (instance ?C Cloud) (eventLocated ?L ?C))))))
*/
fof(a568,axiom,! [L] : (? [C] : ((s_instance(C, s_Object) & (s_instance(L, s_Lightning) => (s_instance(C, s_Cloud) & s_eventLocated(L, C))))))).

/*
(subclass Thunder WeatherProcess)
*/
fof(a569,axiom,s_subclass(s_Thunder, s_WeatherProcess)).

/*
(instance Thunder SetOrClass)
*/
fof(a570,axiom,s_instance(s_Thunder, s_SetOrClass)).

/*
(subclass Thunder RadiatingSound)
*/
fof(a571,axiom,s_subclass(s_Thunder, s_RadiatingSound)).

/*
(forall (?T)
 (exists (?L)
  (and (instance ?L Process)
       (=> (instance ?T Thunder)
        (and (instance ?L Lightning) (causes ?L ?T))))))
*/
fof(a572,axiom,! [T] : (? [L] : ((s_instance(L, s_Process) & (s_instance(T, s_Thunder) => (s_instance(L, s_Lightning) & s_causes(L, T))))))).

/*
(instance LightFixture SetOrClass)
*/
fof(a573,axiom,s_instance(s_LightFixture, s_SetOrClass)).

/*
(subclass VehicleLight LightFixture)
*/
fof(a574,axiom,s_subclass(s_VehicleLight, s_LightFixture)).

/*
(forall (?L)
 (exists (?V)
  (and (instance ?V Object)
       (=> (instance ?L VehicleLight)
        (and (instance ?V Vehicle) (part ?L ?V))))))
*/
fof(a575,axiom,! [L] : (? [V] : ((s_instance(V, s_Object) & (s_instance(L, s_VehicleLight) => (s_instance(V, s_Vehicle) & s_part(L, V))))))).

/*
(instance Headlight SetOrClass)
*/
fof(a576,axiom,s_instance(s_Headlight, s_SetOrClass)).

/*
(subclass Headlight VehicleLight)
*/
fof(a577,axiom,s_subclass(s_Headlight, s_VehicleLight)).

/*
(forall (?L)
 (exists (?V)
  (and (instance ?V SelfConnectedObject)
       (=> (instance ?L Headlight)
        (and (instance ?V Vehicle) (part ?L (FrontFn ?V)))))))
*/
fof(a578,axiom,! [L] : (? [V] : ((s_instance(V, s_SelfConnectedObject) & (s_instance(L, s_Headlight) => (s_instance(V, s_Vehicle) & s_part(L, s_FrontFn(V)))))))).

/*
(instance Taillight SetOrClass)
*/
fof(a579,axiom,s_instance(s_Taillight, s_SetOrClass)).

/*
(instance VehicleLight SetOrClass)
*/
fof(a580,axiom,s_instance(s_VehicleLight, s_SetOrClass)).

/*
(subclass Taillight VehicleLight)
*/
fof(a581,axiom,s_subclass(s_Taillight, s_VehicleLight)).

/*
(forall (?L)
 (exists (?V)
  (and (instance ?V SelfConnectedObject)
       (=> (instance ?L Taillight)
        (and (instance ?V Vehicle) (part ?L (BackFn ?V)))))))
*/
fof(a582,axiom,! [L] : (? [V] : ((s_instance(V, s_SelfConnectedObject) & (s_instance(L, s_Taillight) => (s_instance(V, s_Vehicle) & s_part(L, s_BackFn(V)))))))).

/*
(subclass PaintedPicture ArtWork)
*/
fof(a583,axiom,s_subclass(s_PaintedPicture, s_ArtWork)).

/*
(forall (?PP)
 (exists (?PAINT ?PAINTING)
  (and (and (instance ?PAINTING Process) (instance ?PAINT Object))
       (=> (instance ?PP PaintedPicture)
        (and (instance ?PAINT Paint)
             (and (instance ?PAINTING Painting)
                  (and (resource ?PAINTING ?PAINT)
                       (result ?PAINTING ?PP))))))))
*/
fof(a584,axiom,! [PP] : (? [PAINT,PAINTING] : (((s_instance(PAINTING, s_Process) & s_instance(PAINT, s_Object)) & (s_instance(PP, s_PaintedPicture) => (s_instance(PAINT, s_Paint) & (s_instance(PAINTING, s_Painting) & (s_resource(PAINTING, PAINT) & s_result(PAINTING, PP))))))))).

/*
(instance WatercolorPicture SetOrClass)
*/
fof(a585,axiom,s_instance(s_WatercolorPicture, s_SetOrClass)).

/*
(subclass WatercolorPicture PaintedPicture)
*/
fof(a586,axiom,s_subclass(s_WatercolorPicture, s_PaintedPicture)).

/*
(forall (?W)
 (exists (?WP ?P)
  (and (and (instance ?P Process) (instance ?WP Object))
       (=> (instance ?W WatercolorPicture)
        (and (instance ?WP WatercolorPaint)
             (and (instance ?P Painting)
                  (and (resource ?P ?WP) (result ?P ?W))))))))
*/
fof(a587,axiom,! [W] : (? [WP,P] : (((s_instance(P, s_Process) & s_instance(WP, s_Object)) & (s_instance(W, s_WatercolorPicture) => (s_instance(WP, s_WatercolorPaint) & (s_instance(P, s_Painting) & (s_resource(P, WP) & s_result(P, W))))))))).

/*
(instance Wallpaper SetOrClass)
*/
fof(a588,axiom,s_instance(s_Wallpaper, s_SetOrClass)).

/*
(subclass Wallpaper ArtWork)
*/
fof(a589,axiom,s_subclass(s_Wallpaper, s_ArtWork)).

/*
(forall (?W ?P)
 (=> (instance ?P Object)
  (=> (and (instance ?W Wallpaper) (part ?P ?W)) (instance ?P Paper))))
*/
fof(a590,axiom,! [W,P] : ((s_instance(P, s_Object) => ((s_instance(W, s_Wallpaper) & s_part(P, W)) => s_instance(P, s_Paper))))).

/*
(forall (?P)
 (=> (instance ?P Wallpaper)
  (hasPurpose ?P
   (exists (?W ?R ?C)
    (and (instance ?W Wall)
         (and (part ?W ?R)
              (and (instance ?R Room)
                   (and (instance ?C Covering)
                        (and (patient ?C ?W) (instrument ?C ?P))))))))))
*/
%% no translation to TPTP available.

/*
(instance Sculpture SetOrClass)
*/
fof(a591,axiom,s_instance(s_Sculpture, s_SetOrClass)).

/*
(subclass Sculpture ArtWork)
*/
fof(a592,axiom,s_subclass(s_Sculpture, s_ArtWork)).

/*
(instance Portrait SetOrClass)
*/
fof(a593,axiom,s_instance(s_Portrait, s_SetOrClass)).

/*
(subclass Portrait PaintedPicture)
*/
fof(a594,axiom,s_subclass(s_Portrait, s_PaintedPicture)).

/*
(forall (?P)
 (exists (?F)
  (and (instance ?F Entity)
       (=> (instance ?P Portrait)
        (and (instance ?F Face) (represents ?P ?F))))))
*/
fof(a595,axiom,! [P] : (? [F] : ((s_instance(F, s_Entity) & (s_instance(P, s_Portrait) => (s_instance(F, s_Face) & s_represents(P, F))))))).

/*
(instance Sketch SetOrClass)
*/
fof(a596,axiom,s_instance(s_Sketch, s_SetOrClass)).

/*
(subclass Sketch ArtWork)
*/
fof(a597,axiom,s_subclass(s_Sketch, s_ArtWork)).

/*
(instance Collage SetOrClass)
*/
fof(a598,axiom,s_instance(s_Collage, s_SetOrClass)).

/*
(subclass Collage ArtWork)
*/
fof(a599,axiom,s_subclass(s_Collage, s_ArtWork)).

/*
(instance Folding SetOrClass)
*/
fof(a600,axiom,s_instance(s_Folding, s_SetOrClass)).

/*
(subclass Folding ShapeChange)
*/
fof(a601,axiom,s_subclass(s_Folding, s_ShapeChange)).

/*
(forall (?O ?F)
 (exists (?C ?P1 ?P2)
  (and (and (instance ?P2 Object) (instance ?P1 Object)
            (instance ?C Process))
       (=> (instance ?O Object)
        (=> (and (instance ?F Folding) (patient ?F ?O))
         (and (instance ?C Covering)
              (and (subProcess ?C ?F)
                   (and (part ?P1 ?O)
                        (and (part ?P2 ?O)
                             (and (instrument ?C ?P1)
                                  (patient ?C ?P2)))))))))))
*/
fof(a602,axiom,! [O,F] : (? [C,P1,P2] : (((s_instance(P2, s_Object) & s_instance(P1, s_Object) & s_instance(C, s_Process)) & (s_instance(O, s_Object) => ((s_instance(F, s_Folding) & s_patient(F, O)) => (s_instance(C, s_Covering) & (s_subProcess(C, F) & (s_part(P1, O) & (s_part(P2, O) & (s_instrument(C, P1) & s_patient(C, P2)))))))))))).

/*
(subclass Painting Covering)
*/
fof(a603,axiom,s_subclass(s_Painting, s_Covering)).

/*
(subclass Painting Coloring)
*/
fof(a604,axiom,s_subclass(s_Painting, s_Coloring)).

/*
(forall (?STUFF ?SURFACE ?PAINT)
 (exists (?OBJ)
  (and (instance ?OBJ SelfConnectedObject)
       (=>
        (and (instance ?STUFF Object)
             (instance ?SURFACE SelfConnectedObject))
        (=>
         (and (instance ?PAINT Painting)
              (and (patient ?PAINT ?SURFACE) (resource ?PAINT ?STUFF)))
         (and (surface ?SURFACE ?OBJ) (instance ?STUFF Paint)))))))
*/
fof(a605,axiom,! [STUFF,SURFACE,PAINT] : (? [OBJ] : ((s_instance(OBJ, s_SelfConnectedObject) & ((s_instance(STUFF, s_Object) & s_instance(SURFACE, s_SelfConnectedObject)) => ((s_instance(PAINT, s_Painting) & (s_patient(PAINT, SURFACE) & s_resource(PAINT, STUFF))) => (s_surface(SURFACE, OBJ) & s_instance(STUFF, s_Paint)))))))).

/*
(subclass Paint Solution)
*/
fof(a606,axiom,s_subclass(s_Paint, s_Solution)).

/*
(forall (?PAINT)
 (=> (instance ?PAINT Paint) (capability Coloring instrument ?PAINT)))
*/
fof(a607,axiom,! [PAINT] : ((s_instance(PAINT, s_Paint) => s_capability(s_Coloring, s_instrument_m, PAINT)))).

/*
(instance WatercolorPaint SetOrClass)
*/
fof(a608,axiom,s_instance(s_WatercolorPaint, s_SetOrClass)).

/*
(subclass WatercolorPaint Paint)
*/
fof(a609,axiom,s_subclass(s_WatercolorPaint, s_Paint)).

/*
(forall (?P)
 (exists (?W)
  (and (instance ?W Object)
       (=> (instance ?P WatercolorPaint)
        (and (instance ?W Water) (part ?W ?P))))))
*/
fof(a610,axiom,! [P] : (? [W] : ((s_instance(W, s_Object) & (s_instance(P, s_WatercolorPaint) => (s_instance(W, s_Water) & s_part(W, P))))))).

/*
(instance OilPaint SetOrClass)
*/
fof(a611,axiom,s_instance(s_OilPaint, s_SetOrClass)).

/*
(instance Paint SetOrClass)
*/
fof(a612,axiom,s_instance(s_Paint, s_SetOrClass)).

/*
(subclass OilPaint Paint)
*/
fof(a613,axiom,s_subclass(s_OilPaint, s_Paint)).

/*
(disjoint OilPaint WatercolorPaint)
*/
fof(a614,axiom,s_disjoint(s_OilPaint, s_WatercolorPaint)).

/*
(forall (?P)
 (exists (?O)
  (and (instance ?O Object)
       (=> (instance ?P OilPaint)
        (and (instance ?O Oil) (part ?O ?P))))))
*/
fof(a615,axiom,! [P] : (? [O] : ((s_instance(O, s_Object) & (s_instance(P, s_OilPaint) => (s_instance(O, s_Oil) & s_part(O, P))))))).

/*
(instance OilPicture SetOrClass)
*/
fof(a616,axiom,s_instance(s_OilPicture, s_SetOrClass)).

/*
(instance PaintedPicture SetOrClass)
*/
fof(a617,axiom,s_instance(s_PaintedPicture, s_SetOrClass)).

/*
(subclass OilPicture PaintedPicture)
*/
fof(a618,axiom,s_subclass(s_OilPicture, s_PaintedPicture)).

/*
(disjoint OilPicture WatercolorPicture)
*/
fof(a619,axiom,s_disjoint(s_OilPicture, s_WatercolorPicture)).

/*
(forall (?P)
 (exists (?O ?PAINTING)
  (and (and (instance ?PAINTING Process) (instance ?O Object))
       (=> (instance ?P OilPicture)
        (and (instance ?O OilPaint)
             (and (instance ?PAINTING Painting)
                  (and (resource ?PAINTING ?O)
                       (result ?PAINTING ?P))))))))
*/
fof(a620,axiom,! [P] : (? [O,PAINTING] : (((s_instance(PAINTING, s_Process) & s_instance(O, s_Object)) & (s_instance(P, s_OilPicture) => (s_instance(O, s_OilPaint) & (s_instance(PAINTING, s_Painting) & (s_resource(PAINTING, O) & s_result(PAINTING, P))))))))).

/*
(subclass ArtPainting ContentDevelopment)
*/
fof(a621,axiom,s_subclass(s_ArtPainting, s_ContentDevelopment)).

/*
(instance ArtPainting SetOrClass)
*/
fof(a622,axiom,s_instance(s_ArtPainting, s_SetOrClass)).

/*
(instance Painting SetOrClass)
*/
fof(a623,axiom,s_instance(s_Painting, s_SetOrClass)).

/*
(subclass ArtPainting Painting)
*/
fof(a624,axiom,s_subclass(s_ArtPainting, s_Painting)).

/*
(forall (?PAINT)
 (exists (?PICTURE)
  (and (instance ?PICTURE Entity)
       (=> (instance ?PAINT ArtPainting)
        (and (instance ?PICTURE PaintedPicture)
             (result ?PAINT ?PICTURE))))))
*/
fof(a625,axiom,! [PAINT] : (? [PICTURE] : ((s_instance(PICTURE, s_Entity) & (s_instance(PAINT, s_ArtPainting) => (s_instance(PICTURE, s_PaintedPicture) & s_result(PAINT, PICTURE))))))).

/*
(instance PaintingDevice SetOrClass)
*/
fof(a626,axiom,s_instance(s_PaintingDevice, s_SetOrClass)).

/*
(subclass PaintingDevice Device)
*/
fof(a627,axiom,s_subclass(s_PaintingDevice, s_Device)).

/*
(forall (?PD)
 (exists (?PAINT)
  (and (and (instance ?PAINT Entity) (subclass ?PAINT Process))
       (=> (instance ?PD PaintingDevice)
        (and (instance ?PAINT Painting)
             (capability ?PAINT instrument ?PD))))))
*/
fof(a628,axiom,! [PD] : (? [PAINT] : (((s_instance(PAINT, s_Entity) & s_subclass(PAINT, s_Process)) & (s_instance(PD, s_PaintingDevice) => (s_instance(PAINT, s_Painting) & s_capability(PAINT, s_instrument_m, PD))))))).

/*
(forall (?PD)
 (=> (instance ?PD PaintingDevice)
  (hasPurpose ?PD
   (exists (?STUFF ?COVER ?SURF ?OBJ)
    (and (instance ?STUFF Substance)
         (and (instance ?COVER Covering)
              (and (instance ?OBJ Object)
                   (and (surface ?SURF ?OBJ)
                        (and (agent ?COVER ?PD)
                             (and (instrument ?COVER ?STUFF)
                                  (patient ?COVER ?SURF)))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Sculpting ContentDevelopment)
*/
fof(a629,axiom,s_subclass(s_Sculpting, s_ContentDevelopment)).

/*
(instance Sculpting SetOrClass)
*/
fof(a630,axiom,s_instance(s_Sculpting, s_SetOrClass)).

/*
(subclass Sculpting Transfer)
*/
fof(a631,axiom,s_subclass(s_Sculpting, s_Transfer)).

/*
(instance GraphicDesigning SetOrClass)
*/
fof(a632,axiom,s_instance(s_GraphicDesigning, s_SetOrClass)).

/*
(subclass GraphicDesigning Designing)
*/
fof(a633,axiom,s_subclass(s_GraphicDesigning, s_Designing)).

/*
(instance potentialOfHydrogen BinaryPredicate)
*/
fof(a634,axiom,s_instance(s_potentialOfHydrogen_m, s_BinaryPredicate)).

/*
(forall (?N ?S)
 (=> (and (instance ?S Solution) (instance ?N RealNumber))
  (=> (potentialOfHydrogen ?S ?N)
   (and (greaterThanOrEqualTo ?N 0) (lessThanOrEqualTo ?N 14)))))
*/
fof(a635,axiom,! [N,S] : (((s_instance(S, s_Solution) & s_instance(N, s_RealNumber)) => (s_potentialOfHydrogen(S, N) => (s_greaterThanOrEqualTo(N, 0) & lesseq(N, 14)))))).

/*
(subclass Tracing ContentDevelopment)
*/
fof(a636,axiom,s_subclass(s_Tracing, s_ContentDevelopment)).

/*
(instance Tracing SetOrClass)
*/
fof(a637,axiom,s_instance(s_Tracing, s_SetOrClass)).

/*
(subclass Tracing SurfaceChange)
*/
fof(a638,axiom,s_subclass(s_Tracing, s_SurfaceChange)).

/*
(forall (?T)
 (exists (?P)
  (and (instance ?P Entity)
       (=> (instance ?T Tracing)
        (and (instance ?P Blueprint) (result ?T ?P))))))
*/
fof(a639,axiom,! [T] : (? [P] : ((s_instance(P, s_Entity) & (s_instance(T, s_Tracing) => (s_instance(P, s_Blueprint) & s_result(T, P))))))).

/*
(instance ComposingMusic SetOrClass)
*/
fof(a640,axiom,s_instance(s_ComposingMusic, s_SetOrClass)).

/*
(subclass ComposingMusic ContentDevelopment)
*/
fof(a641,axiom,s_subclass(s_ComposingMusic, s_ContentDevelopment)).

/*
(forall (?C)
 (exists (?M)
  (and (instance ?M Entity)
       (=> (instance ?C ComposingMusic)
        (and (instance ?M MusicalComposition) (result ?C ?M))))))
*/
fof(a642,axiom,! [C] : (? [M] : ((s_instance(M, s_Entity) & (s_instance(C, s_ComposingMusic) => (s_instance(M, s_MusicalComposition) & s_result(C, M))))))).

/*
(subclass Drawing ContentDevelopment)
*/
fof(a643,axiom,s_subclass(s_Drawing, s_ContentDevelopment)).

/*
(instance Drawing SetOrClass)
*/
fof(a644,axiom,s_instance(s_Drawing, s_SetOrClass)).

/*
(subclass Drawing SurfaceChange)
*/
fof(a645,axiom,s_subclass(s_Drawing, s_SurfaceChange)).

/*
(forall (?DRAW)
 (exists (?SKETCH)
  (and (instance ?SKETCH Entity)
       (=> (instance ?DRAW Drawing)
        (and (instance ?SKETCH Sketch) (result ?DRAW ?SKETCH))))))
*/
fof(a646,axiom,! [DRAW] : (? [SKETCH] : ((s_instance(SKETCH, s_Entity) & (s_instance(DRAW, s_Drawing) => (s_instance(SKETCH, s_Sketch) & s_result(DRAW, SKETCH))))))).

/*
(instance Focusing SetOrClass)
*/
fof(a647,axiom,s_instance(s_Focusing, s_SetOrClass)).

/*
(subclass Focusing QuantityChange)
*/
fof(a648,axiom,s_subclass(s_Focusing, s_QuantityChange)).

/*
(forall (?F)
 (exists (?L)
  (and (instance ?L Entity)
       (=> (instance ?F Focusing)
        (and (instance ?L Lens) (patient ?F ?L))))))
*/
fof(a649,axiom,! [F] : (? [L] : ((s_instance(L, s_Entity) & (s_instance(F, s_Focusing) => (s_instance(L, s_Lens) & s_patient(F, L))))))).

/*
(subclass DisplayArtifact Artifact)
*/
fof(a650,axiom,s_subclass(s_DisplayArtifact, s_Artifact)).

/*
(forall (?DA)
 (=> (instance ?DA DisplayArtifact)
  (hasPurpose ?DA
   (exists (?P ?D ?I)
    (and (instance ?P Putting)
         (and (instance ?D Disseminating)
              (and (instance ?I ContentBearingObject)
                   (and (patient ?P ?I)
                        (and (patient ?D ?I)
                             (destination ?P ?DA))))))))))
*/
%% no translation to TPTP available.

/*
(instance VehicleWheel SetOrClass)
*/
fof(a651,axiom,s_instance(s_VehicleWheel, s_SetOrClass)).

/*
(subclass VehicleWheel Wheel)
*/
fof(a652,axiom,s_subclass(s_VehicleWheel, s_Wheel)).

/*
(instance Wheel SetOrClass)
*/
fof(a653,axiom,s_instance(s_Wheel, s_SetOrClass)).

/*
(subclass Wheel Artifact)
*/
fof(a654,axiom,s_subclass(s_Wheel, s_Artifact)).

/*
(forall (?VEHICLE)
 (exists (?WHEEL)
  (and (instance ?WHEEL Object)
       (=> (instance ?VEHICLE LandVehicle)
        (and (instance ?WHEEL Wheel) (part ?WHEEL ?VEHICLE))))))
*/
fof(a655,axiom,! [VEHICLE] : (? [WHEEL] : ((s_instance(WHEEL, s_Object) & (s_instance(VEHICLE, s_LandVehicle) => (s_instance(WHEEL, s_Wheel) & s_part(WHEEL, VEHICLE))))))).

/*
(subclass VehicleController Device)
*/
fof(a656,axiom,s_subclass(s_VehicleController, s_Device)).

/*
(forall (?C)
 (exists (?V)
  (and (instance ?V Object)
       (=> (instance ?C VehicleController)
        (and (instance ?V Vehicle) (part ?C ?V))))))
*/
fof(a657,axiom,! [C] : (? [V] : ((s_instance(V, s_Object) & (s_instance(C, s_VehicleController) => (s_instance(V, s_Vehicle) & s_part(C, V))))))).

/*
(forall (?C)
 (=> (instance ?C VehicleController)
  (hasPurpose ?C
   (exists (?D) (and (instance ?D Driving) (instrument ?D ?C))))))
*/
%% no translation to TPTP available.

/*
(instance SteeringWheel SetOrClass)
*/
fof(a658,axiom,s_instance(s_SteeringWheel, s_SetOrClass)).

/*
(subclass SteeringWheel VehicleController)
*/
fof(a659,axiom,s_subclass(s_SteeringWheel, s_VehicleController)).

/*
(forall (?W)
 (=> (instance ?W SteeringWheel)
  (capability DirectionChange instrument ?W)))
*/
fof(a660,axiom,! [W] : ((s_instance(W, s_SteeringWheel) => s_capability(s_DirectionChange, s_instrument_m, W)))).

/*
(instance VehicleBrake SetOrClass)
*/
fof(a661,axiom,s_instance(s_VehicleBrake, s_SetOrClass)).

/*
(subclass VehicleBrake VehicleController)
*/
fof(a662,axiom,s_subclass(s_VehicleBrake, s_VehicleController)).

/*
(forall (?V ?B)
 (=>
  (and (instance ?B VehicleBrake)
       (and (instance ?V Vehicle) (part ?B ?V)))
  (hasPurpose ?B
   (exists (?S)
    (and (instance ?S (StopFn Motion))
         (and (patient ?S ?V) (instrument ?S ?B)))))))
*/
%% no translation to TPTP available.

/*
(instance VehicleThrottle SetOrClass)
*/
fof(a663,axiom,s_instance(s_VehicleThrottle, s_SetOrClass)).

/*
(instance VehicleController SetOrClass)
*/
fof(a664,axiom,s_instance(s_VehicleController, s_SetOrClass)).

/*
(subclass VehicleThrottle VehicleController)
*/
fof(a665,axiom,s_subclass(s_VehicleThrottle, s_VehicleController)).

/*
(instance VehicleTire SetOrClass)
*/
fof(a666,axiom,s_instance(s_VehicleTire, s_SetOrClass)).

/*
(subclass VehicleTire Artifact)
*/
fof(a667,axiom,s_subclass(s_VehicleTire, s_Artifact)).

/*
(forall (?T)
 (exists (?W)
  (and (instance ?W Object)
       (=> (instance ?T VehicleTire)
        (and (instance ?W VehicleWheel) (part ?T ?W))))))
*/
fof(a668,axiom,! [T] : (? [W] : ((s_instance(W, s_Object) & (s_instance(T, s_VehicleTire) => (s_instance(W, s_VehicleWheel) & s_part(T, W))))))).

/*
(subclass VehicleWindow Window)
*/
fof(a669,axiom,s_subclass(s_VehicleWindow, s_Window)).

/*
(forall (?W)
 (exists (?V)
  (and (instance ?V Object)
       (=> (instance ?W VehicleWindow)
        (and (instance ?V Vehicle) (part ?W ?V))))))
*/
fof(a670,axiom,! [W] : (? [V] : ((s_instance(V, s_Object) & (s_instance(W, s_VehicleWindow) => (s_instance(V, s_Vehicle) & s_part(W, V))))))).

/*
(instance Windshield SetOrClass)
*/
fof(a671,axiom,s_instance(s_Windshield, s_SetOrClass)).

/*
(subclass Windshield VehicleWindow)
*/
fof(a672,axiom,s_subclass(s_Windshield, s_VehicleWindow)).

/*
(disjoint Windshield RearWindow)
*/
fof(a673,axiom,s_disjoint(s_Windshield, s_RearWindow)).

/*
(forall (?W)
 (exists (?A)
  (and (instance ?A SelfConnectedObject)
       (=> (instance ?W Windshield)
        (and (instance ?A RoadVehicle) (part ?W (FrontFn ?A)))))))
*/
fof(a674,axiom,! [W] : (? [A] : ((s_instance(A, s_SelfConnectedObject) & (s_instance(W, s_Windshield) => (s_instance(A, s_RoadVehicle) & s_part(W, s_FrontFn(A)))))))).

/*
(subclass LandVehicle Vehicle)
*/
fof(a675,axiom,s_subclass(s_LandVehicle, s_Vehicle)).

/*
(forall (?X)
 (=> (instance ?X LandVehicle)
  (hasPurpose ?X
   (exists (?EV ?SURF)
    (and (surface ?SURF GeographicArea)
         (and (instance ?EV Transportation)
              (holdsDuring (WhenFn ?EV) (meetsSpatially ?X ?SURF))))))))
*/
%% no translation to TPTP available.

/*
(subclass WaterVehicle Vehicle)
*/
fof(a676,axiom,s_subclass(s_WaterVehicle, s_Vehicle)).

/*
(forall (?X)
 (=> (instance ?X WaterVehicle)
  (hasPurpose ?X
   (exists (?EV ?SURF)
    (and (instance ?SURF Water)
         (and (instance ?EV Transportation)
              (holdsDuring (WhenFn ?EV) (meetsSpatially ?X ?SURF))))))))
*/
%% no translation to TPTP available.

/*
(forall (?CRAFT ?EVENT)
 (exists (?WATER)
  (and (instance ?WATER Object)
       (=>
        (and (instance ?CRAFT WaterVehicle)
             (and (instance ?EVENT Transportation)
                  (instrument ?EVENT ?CRAFT)))
        (and (instance ?WATER WaterArea)
             (eventLocated ?EVENT ?WATER))))))
*/
fof(a677,axiom,! [CRAFT,EVENT] : (? [WATER] : ((s_instance(WATER, s_Object) & ((s_instance(CRAFT, s_WaterVehicle) & (s_instance(EVENT, s_Transportation) & s_instrument(EVENT, CRAFT))) => (s_instance(WATER, s_WaterArea) & s_eventLocated(EVENT, WATER))))))).

/*
(instance RoadVehicle SetOrClass)
*/
fof(a678,axiom,s_instance(s_RoadVehicle, s_SetOrClass)).

/*
(instance LandVehicle SetOrClass)
*/
fof(a679,axiom,s_instance(s_LandVehicle, s_SetOrClass)).

/*
(subclass RoadVehicle LandVehicle)
*/
fof(a680,axiom,s_subclass(s_RoadVehicle, s_LandVehicle)).

/*
(instance Fleet SetOrClass)
*/
fof(a681,axiom,s_instance(s_Fleet, s_SetOrClass)).

/*
(subclass Fleet Collection)
*/
fof(a682,axiom,s_subclass(s_Fleet, s_Collection)).

/*
(forall (?FLEET)
 (=> (instance ?FLEET Fleet) (memberType ?FLEET Vehicle)))
*/
fof(a683,axiom,! [FLEET] : ((s_instance(FLEET, s_Fleet) => s_memberType(FLEET, s_Vehicle)))).

/*
(instance fleetSize BinaryPredicate)
*/
fof(a684,axiom,s_instance(s_fleetSize_m, s_BinaryPredicate)).

/*
(forall (?FLEET ?NUM ?AGENT)
 (=> (and (instance ?NUM Integer) (instance ?AGENT Agent))
  (=>
   (and (instance ?FLEET Fleet)
        (and (fleetSize ?AGENT ?NUM) (possesses ?AGENT ?FLEET)))
   (memberCount ?FLEET ?NUM))))
*/
fof(a685,axiom,! [FLEET,NUM,AGENT] : (((s_instance(NUM, s_Integer) & s_instance(AGENT, s_Agent)) => ((s_instance(FLEET, s_Fleet) & (s_fleetSize(AGENT, NUM) & s_possesses(AGENT, FLEET))) => s_memberCount(FLEET, NUM))))).

/*
(instance Axle SetOrClass)
*/
fof(a686,axiom,s_instance(s_Axle, s_SetOrClass)).

/*
(subclass Axle Device)
*/
fof(a687,axiom,s_subclass(s_Axle, s_Device)).

/*
(forall (?V ?W)
 (exists (?A)
  (and (instance ?A CorpuscularObject)
       (=>
        (and (instance ?W VehicleWheel)
             (and (instance ?V RoadVehicle) (part ?W ?V)))
        (and (instance ?A Axle)
             (and (component ?A ?V) (connected ?W ?A)))))))
*/
fof(a688,axiom,! [V,W] : (? [A] : ((s_instance(A, s_CorpuscularObject) & ((s_instance(W, s_VehicleWheel) & (s_instance(V, s_RoadVehicle) & s_part(W, V))) => (s_instance(A, s_Axle) & (s_component(A, V) & s_connected(W, A)))))))).

/*
(instance Paper SetOrClass)
*/
fof(a689,axiom,s_instance(s_Paper, s_SetOrClass)).

/*
(subclass Paper Artifact)
*/
fof(a690,axiom,s_subclass(s_Paper, s_Artifact)).

/*
(forall (?X)
 (exists (?MAKE ?CELL ?PRESS)
  (and (and (instance ?PRESS Process) (instance ?CELL Object)
            (instance ?MAKE Process))
       (=> (instance ?X Paper)
        (and (instance ?MAKE Making)
             (and (instance ?CELL Cellulose)
                  (and (instance ?PRESS Compressing)
                       (and (resource ?MAKE ?CELL)
                            (and (result ?MAKE ?X)
                                 (and
                                  (subProcess ?MAKE ?PRESS)
                                  (patient ?PRESS ?CELL)))))))))))
*/
fof(a691,axiom,! [X] : (? [MAKE,CELL,PRESS] : (((s_instance(PRESS, s_Process) & s_instance(CELL, s_Object) & s_instance(MAKE, s_Process)) & (s_instance(X, s_Paper) => (s_instance(MAKE, s_Making) & (s_instance(CELL, s_Cellulose) & (s_instance(PRESS, s_Compressing) & (s_resource(MAKE, CELL) & (s_result(MAKE, X) & (s_subProcess(MAKE, PRESS) & s_patient(PRESS, CELL)))))))))))).

/*
(instance CurrencyBill SetOrClass)
*/
fof(a692,axiom,s_instance(s_CurrencyBill, s_SetOrClass)).

/*
(subclass CurrencyBill Currency)
*/
fof(a693,axiom,s_subclass(s_CurrencyBill, s_Currency)).

/*
(partition3 Currency CurrencyBill CurrencyCoin)
*/
fof(a694,axiom,s_partition3(s_Currency, s_CurrencyBill, s_CurrencyCoin)).

/*
(forall (?BILL)
 (exists (?PAPER)
  (and (instance ?PAPER Object)
       (=> (instance ?BILL CurrencyBill)
        (and (instance ?PAPER Paper) (part ?PAPER ?BILL))))))
*/
fof(a695,axiom,! [BILL] : (? [PAPER] : ((s_instance(PAPER, s_Object) & (s_instance(BILL, s_CurrencyBill) => (s_instance(PAPER, s_Paper) & s_part(PAPER, BILL))))))).

/*
(instance CurrencyCoin SetOrClass)
*/
fof(a696,axiom,s_instance(s_CurrencyCoin, s_SetOrClass)).

/*
(subclass CurrencyCoin Currency)
*/
fof(a697,axiom,s_subclass(s_CurrencyCoin, s_Currency)).

/*
(forall (?COIN)
 (exists (?METAL)
  (and (and (instance ?METAL SetOrClass) (subclass ?METAL Substance))
       (=> (instance ?COIN CurrencyCoin)
        (and (subclass ?METAL Metal) (material ?METAL ?COIN))))))
*/
fof(a698,axiom,! [COIN] : (? [METAL] : (((s_instance(METAL, s_SetOrClass) & s_subclass(METAL, s_Substance)) & (s_instance(COIN, s_CurrencyCoin) => (s_subclass(METAL, s_Metal) & s_material(METAL, COIN))))))).

/*
(subclass Wire Artifact)
*/
fof(a699,axiom,s_subclass(s_Wire, s_Artifact)).

/*
(forall (?WIRE) (=> (instance ?WIRE Wire) (material Metal ?WIRE)))
*/
fof(a700,axiom,! [WIRE] : ((s_instance(WIRE, s_Wire) => s_material(s_Metal, WIRE)))).

/*
(subclass WireSpring Wire)
*/
fof(a701,axiom,s_subclass(s_WireSpring, s_Wire)).

/*
(instance WireSpring SetOrClass)
*/
fof(a702,axiom,s_instance(s_WireSpring, s_SetOrClass)).

/*
(subclass WireSpring EngineeringComponent)
*/
fof(a703,axiom,s_subclass(s_WireSpring, s_EngineeringComponent)).

/*
(instance Wire SetOrClass)
*/
fof(a704,axiom,s_instance(s_Wire, s_SetOrClass)).

/*
(subclass WireLine Wire)
*/
fof(a705,axiom,s_subclass(s_WireLine, s_Wire)).

/*
(subclass WireLine EngineeringComponent)
*/
fof(a706,axiom,s_subclass(s_WireLine, s_EngineeringComponent)).

/*
(forall (?WL)
 (=> (instance ?WL WireLine)
  (hasPurpose ?WL
   (exists (?R) (and (instance ?R Radiating) (path ?R ?WL))))))
*/
%% no translation to TPTP available.

/*
(instance TelephoneLine SetOrClass)
*/
fof(a707,axiom,s_instance(s_TelephoneLine, s_SetOrClass)).

/*
(instance WireLine SetOrClass)
*/
fof(a708,axiom,s_instance(s_WireLine, s_SetOrClass)).

/*
(subclass TelephoneLine WireLine)
*/
fof(a709,axiom,s_subclass(s_TelephoneLine, s_WireLine)).

/*
(forall (?TL)
 (exists (?T1 ?T2)
  (and (and (instance ?T2 Object) (instance ?T1 Object))
       (=> (instance ?TL TelephoneLine)
        (and (or (instance ?T1 Telephone) (instance ?T1 Telegraph))
             (and (or (instance ?T2 Telephone)
                      (instance ?T2 Telegraph))
                  (and (not (equal ?T1 ?T2))
                       (connects ?TL ?T1 ?T2))))))))
*/
fof(a710,axiom,! [TL] : (? [T1,T2] : (((s_instance(T2, s_Object) & s_instance(T1, s_Object)) & (s_instance(TL, s_TelephoneLine) => ((s_instance(T1, s_Telephone) | s_instance(T1, s_Telegraph)) & ((s_instance(T2, s_Telephone) | s_instance(T2, s_Telegraph)) & ((~ (T1 = T2)) & s_connects(TL, T1, T2))))))))).

/*
(instance String SetOrClass)
*/
fof(a711,axiom,s_instance(s_String, s_SetOrClass)).

/*
(subclass String Artifact)
*/
fof(a712,axiom,s_subclass(s_String, s_Artifact)).

/*
(forall (?S) (=> (instance ?S String) (material Fabric ?S)))
*/
fof(a713,axiom,! [S] : ((s_instance(S, s_String) => s_material(s_Fabric, S)))).

/*
(subclass Plug Artifact)
*/
fof(a714,axiom,s_subclass(s_Plug, s_Artifact)).

/*
(forall (?PLUG)
 (exists (?HOLE)
  (and (instance ?HOLE Hole)
       (=> (instance ?PLUG Plug) (completelyFills ?PLUG ?HOLE)))))
*/
fof(a715,axiom,! [PLUG] : (? [HOLE] : ((s_instance(HOLE, s_Hole) & (s_instance(PLUG, s_Plug) => s_completelyFills(PLUG, HOLE)))))).

/*
(instance Pottery SetOrClass)
*/
fof(a716,axiom,s_instance(s_Pottery, s_SetOrClass)).

/*
(subclass Pottery Artifact)
*/
fof(a717,axiom,s_subclass(s_Pottery, s_Artifact)).

/*
(forall (?POTTERY)
 (exists (?CLAY)
  (and (instance ?CLAY Object)
       (=> (instance ?POTTERY Pottery)
        (and (instance ?CLAY Clay) (part ?CLAY ?POTTERY))))))
*/
fof(a718,axiom,! [POTTERY] : (? [CLAY] : ((s_instance(CLAY, s_Object) & (s_instance(POTTERY, s_Pottery) => (s_instance(CLAY, s_Clay) & s_part(CLAY, POTTERY))))))).

/*
(instance Pillow SetOrClass)
*/
fof(a719,axiom,s_instance(s_Pillow, s_SetOrClass)).

/*
(subclass Pillow Artifact)
*/
fof(a720,axiom,s_subclass(s_Pillow, s_Artifact)).

/*
(instance Mirror SetOrClass)
*/
fof(a721,axiom,s_instance(s_Mirror, s_SetOrClass)).

/*
(subclass Mirror Artifact)
*/
fof(a722,axiom,s_subclass(s_Mirror, s_Artifact)).

/*
(forall (?M)
 (=> (instance ?M Mirror) (capability ReflectingLight instrument ?M)))
*/
fof(a723,axiom,! [M] : ((s_instance(M, s_Mirror) => s_capability(s_ReflectingLight, s_instrument_m, M)))).

/*
(subclass Furniture Artifact)
*/
fof(a724,axiom,s_subclass(s_Furniture, s_Artifact)).

/*
(forall (?F)
 (=> (instance ?F Furniture)
  (hasPurpose ?F
   (exists (?FL) (and (instance ?FL Floor) (meetsSpatially ?F ?FL))))))
*/
%% no translation to TPTP available.

/*
(forall (?F)
 (=> (instance ?F Furniture) (capability Translocation moves ?F)))
*/
fof(a725,axiom,! [F] : ((s_instance(F, s_Furniture) => s_capability(s_Translocation, s_moves_m, F)))).

/*
(disjoint Furniture EngineeringComponent)
*/
fof(a726,axiom,s_disjoint(s_Furniture, s_EngineeringComponent)).

/*
(disjoint Furniture Machine)
*/
fof(a727,axiom,s_disjoint(s_Furniture, s_Machine)).

/*
(disjoint Furniture TransportationDevice)
*/
fof(a728,axiom,s_disjoint(s_Furniture, s_TransportationDevice)).

/*
(disjoint Furniture Weapon)
*/
fof(a729,axiom,s_disjoint(s_Furniture, s_Weapon)).

/*
(subclass Seat Furniture)
*/
fof(a730,axiom,s_subclass(s_Seat, s_Furniture)).

/*
(forall (?SEAT)
 (=> (instance ?SEAT Seat)
  (hasPurpose ?SEAT
   (exists (?PERSON)
    (and (instance ?PERSON Human)
         (and (located ?PERSON ?SEAT) (attribute ?PERSON Sitting)))))))
*/
%% no translation to TPTP available.

/*
(instance Chair SetOrClass)
*/
fof(a731,axiom,s_instance(s_Chair, s_SetOrClass)).

/*
(subclass Chair Seat)
*/
fof(a732,axiom,s_subclass(s_Chair, s_Seat)).

/*
(forall (?CHAIR)
 (forall (?PERSON1 ?PERSON2)
  (=> (and (instance ?PERSON2 Object) (instance ?PERSON1 Object))
   (=> (instance ?CHAIR Chair)
    (not (and (instance ?PERSON1 Human)
              (and (instance ?PERSON2 Human)
                   (and (attribute ?PERSON1 Sitting)
                        (and (attribute ?PERSON2 Sitting)
                             (and (located ?PERSON1 ?CHAIR)
                                  (and
                                   (located ?PERSON2 ?CHAIR)
                                   (not
                                    (equal
                                     ?PERSON1
                                     ?PERSON2)))))))))))))
*/
fof(a733,axiom,! [CHAIR] : (! [PERSON1,PERSON2] : (((s_instance(PERSON2, s_Object) & s_instance(PERSON1, s_Object)) => (s_instance(CHAIR, s_Chair) => (~ (s_instance(PERSON1, s_Human) & (s_instance(PERSON2, s_Human) & (s_attribute(PERSON1, s_Sitting) & (s_attribute(PERSON2, s_Sitting) & (s_located(PERSON1, CHAIR) & (s_located(PERSON2, CHAIR) & (~ (PERSON1 = PERSON2)))))))))))))).

/*
(instance Sofa SetOrClass)
*/
fof(a734,axiom,s_instance(s_Sofa, s_SetOrClass)).

/*
(subclass Sofa Seat)
*/
fof(a735,axiom,s_subclass(s_Sofa, s_Seat)).

/*
(forall (?S)
 (=> (instance ?S Sofa)
  (hasPurpose ?S
   (exists (?P1 ?P2 ?T)
    (and (not (equal ?P1 ?P2))
         (and (instance ?P1 Human)
              (and (instance ?P2 Human)
                   (holdsDuring ?T
                    (and (attribute ?P1 Sitting)
                         (and (attribute ?P2 Sitting)
                              (and (eventLocated ?P1 ?S)
                                   (eventLocated ?P2 ?S))))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Bed Furniture)
*/
fof(a736,axiom,s_subclass(s_Bed, s_Furniture)).

/*
(forall (?BED)
 (=> (instance ?BED Bed)
  (hasPurpose ?BED
   (exists (?PERSON)
    (and (attribute ?PERSON Asleep) (located ?PERSON ?BED))))))
*/
%% no translation to TPTP available.

/*
(instance KingBed SetOrClass)
*/
fof(a737,axiom,s_instance(s_KingBed, s_SetOrClass)).

/*
(subclass KingBed Bed)
*/
fof(a738,axiom,s_subclass(s_KingBed, s_Bed)).

/*
(forall (?X)
 (=> (instance ?X KingBed)
  (and (width ?X (MeasureFn 1.9 Meter))
       (length ?X (MeasureFn 2.0 Meter)))))
*/
fof(a739,axiom,! [X] : ((s_instance(X, s_KingBed) => (s_width(X, s_MeasureFn(1.9, s_Meter)) & s_length(X, s_MeasureFn(2.0, s_Meter)))))).

/*
(forall (?X)
 (=> (instance ?X KingBed)
  (modalAttribute
   (exists (?P1 ?P2 ?P3 ?TIME)
    (and (not (equal ?P1 ?P2))
         (and (not (equal ?P2 ?P3))
              (and (not (equal ?P1 ?P3))
                   (and (attribute ?P1 Asleep)
                        (and (attribute ?P2 Asleep)
                             (and (attribute ?P3 Asleep)
                                  (and
                                   (instance ?P1 Human)
                                   (and
                                    (instance ?P2 Human)
                                    (and
                                     (instance ?P3 Human)
                                     (holdsDuring
                                      ?TIME
                                      (and
                                       (located ?P1 ?X)
                                       (and
                                        (located ?P2 ?X)
                                        (located ?P3 ?X))))))))))))))
   Possibility)))
*/
%% no translation to TPTP available.

/*
(instance QueenBed SetOrClass)
*/
fof(a740,axiom,s_instance(s_QueenBed, s_SetOrClass)).

/*
(subclass QueenBed Bed)
*/
fof(a741,axiom,s_subclass(s_QueenBed, s_Bed)).

/*
(forall (?X)
 (=> (instance ?X QueenBed)
  (and (width ?X (MeasureFn 1.5 Meter))
       (length ?X (MeasureFn 2.0 Meter)))))
*/
fof(a742,axiom,! [X] : ((s_instance(X, s_QueenBed) => (s_width(X, s_MeasureFn(1.5, s_Meter)) & s_length(X, s_MeasureFn(2.0, s_Meter)))))).

/*
(forall (?P3 ?X ?TIME)
 (=> (and (instance ?P3 Entity) (instance ?TIME TimePosition))
  (=> (instance ?X QueenBed)
   (modalAttribute
    (exists (?P1 ?P2)
     (and (not (equal ?P1 ?P2))
          (and (not (equal ?P2 ?P3))
               (and (attribute ?P1 Asleep)
                    (and (attribute ?P2 Asleep)
                         (and (instance ?P1 Human)
                              (and (instance ?P2 Human)
                                   (holdsDuring
                                    ?TIME
                                    (and
                                     (located ?P1 ?X)
                                     (located ?P2 ?X))))))))))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(instance DoubleBed SetOrClass)
*/
fof(a743,axiom,s_instance(s_DoubleBed, s_SetOrClass)).

/*
(subclass DoubleBed Bed)
*/
fof(a744,axiom,s_subclass(s_DoubleBed, s_Bed)).

/*
(forall (?X)
 (=> (instance ?X DoubleBed)
  (and (width ?X (MeasureFn 1.35 Meter))
       (length ?X (MeasureFn 2.0 Meter)))))
*/
fof(a745,axiom,! [X] : ((s_instance(X, s_DoubleBed) => (s_width(X, s_MeasureFn(1.35, s_Meter)) & s_length(X, s_MeasureFn(2.0, s_Meter)))))).

/*
(forall (?P3 ?X ?TIME)
 (=> (and (instance ?P3 Entity) (instance ?TIME TimePosition))
  (=> (instance ?X DoubleBed)
   (modalAttribute
    (exists (?P1 ?P2)
     (and (not (equal ?P1 ?P2))
          (and (not (equal ?P2 ?P3))
               (and (attribute ?P1 Asleep)
                    (and (attribute ?P2 Asleep)
                         (and (instance ?P1 Human)
                              (and (instance ?P2 Human)
                                   (holdsDuring
                                    ?TIME
                                    (and
                                     (located ?P1 ?X)
                                     (located ?P2 ?X))))))))))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(instance SingleBed SetOrClass)
*/
fof(a746,axiom,s_instance(s_SingleBed, s_SetOrClass)).

/*
(subclass SingleBed Bed)
*/
fof(a747,axiom,s_subclass(s_SingleBed, s_Bed)).

/*
(forall (?X)
 (=> (instance ?X SingleBed)
  (and (width ?X (MeasureFn 1.0 Meter))
       (length ?X (MeasureFn 2.0 Meter)))))
*/
fof(a748,axiom,! [X] : ((s_instance(X, s_SingleBed) => (s_width(X, s_MeasureFn(1.0, s_Meter)) & s_length(X, s_MeasureFn(2.0, s_Meter)))))).

/*
(instance BunkBed SetOrClass)
*/
fof(a749,axiom,s_instance(s_BunkBed, s_SetOrClass)).

/*
(subclass BunkBed Bed)
*/
fof(a750,axiom,s_subclass(s_BunkBed, s_Bed)).

/*
(forall (?X)
 (exists (?BED1 ?BED2)
  (and (and (instance ?BED2 Object) (instance ?BED1 Object))
       (=> (instance ?X BunkBed)
        (and (instance ?BED1 SingleBed)
             (and (instance ?BED2 SingleBed)
                  (and (part ?BED1 ?X)
                       (and (part ?BED2 ?X)
                            (orientation ?BED1 ?BED2 Above)))))))))
*/
fof(a751,axiom,! [X] : (? [BED1,BED2] : (((s_instance(BED2, s_Object) & s_instance(BED1, s_Object)) & (s_instance(X, s_BunkBed) => (s_instance(BED1, s_SingleBed) & (s_instance(BED2, s_SingleBed) & (s_part(BED1, X) & (s_part(BED2, X) & s_orientation(BED1, BED2, s_Above)))))))))).

/*
(instance MurphyBed SetOrClass)
*/
fof(a752,axiom,s_instance(s_MurphyBed, s_SetOrClass)).

/*
(subclass MurphyBed Bed)
*/
fof(a753,axiom,s_subclass(s_MurphyBed, s_Bed)).

/*
(forall (?X)
 (exists (?STORAGE)
  (and (instance ?STORAGE Physical)
       (=> (instance ?X MurphyBed)
        (and (instance ?STORAGE Compartment)
             (and (meetsSpatially ?STORAGE ?X)
                  (hasPurpose ?STORAGE
                   (exists (?K)
                    (and (instance ?K Keeping)
                         (and (patient ?K ?X)
                              (and (destination ?K ?STORAGE)
                                   (holdsDuring
                                    (WhenFn ?K)
                                    (attribute ?X Vertical)))))))))))))
*/
%% no translation to TPTP available.

/*
(instance RollawayBed SetOrClass)
*/
fof(a754,axiom,s_instance(s_RollawayBed, s_SetOrClass)).

/*
(subclass RollawayBed Bed)
*/
fof(a755,axiom,s_subclass(s_RollawayBed, s_Bed)).

/*
(forall (?X)
 (exists (?WHEEL)
  (and (instance ?WHEEL Object)
       (=> (instance ?X RollawayBed)
        (and (instance ?WHEEL Wheel) (part ?WHEEL ?X))))))
*/
fof(a756,axiom,! [X] : (? [WHEEL] : ((s_instance(WHEEL, s_Object) & (s_instance(X, s_RollawayBed) => (s_instance(WHEEL, s_Wheel) & s_part(WHEEL, X))))))).

/*
(instance SofaBed SetOrClass)
*/
fof(a757,axiom,s_instance(s_SofaBed, s_SetOrClass)).

/*
(subclass SofaBed Bed)
*/
fof(a758,axiom,s_subclass(s_SofaBed, s_Bed)).

/*
(forall (?X)
 (exists (?SOFA ?STORAGE)
  (and (and (instance ?STORAGE Object) (instance ?SOFA Object))
       (=> (instance ?X SofaBed)
        (and (instance ?STORAGE Compartment)
             (and (part ?STORAGE ?SOFA)
                  (and (instance ?SOFA Sofa)
                       (hasPurpose ?STORAGE
                        (exists (?K)
                         (and (instance ?K Keeping)
                              (and (patient ?K ?X)
                                   (destination ?K ?STORAGE))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Crib SetOrClass)
*/
fof(a759,axiom,s_instance(s_Crib, s_SetOrClass)).

/*
(subclass Crib Bed)
*/
fof(a760,axiom,s_subclass(s_Crib, s_Bed)).

/*
(forall (?X)
 (=> (instance ?X Crib)
  (hasPurpose ?X
   (exists (?BABY)
    (and (instance ?BABY HumanBaby)
         (and (attribute ?BABY Asleep) (located ?BABY ?X)))))))
*/
%% no translation to TPTP available.

/*
(instance Hammock SetOrClass)
*/
fof(a761,axiom,s_instance(s_Hammock, s_SetOrClass)).

/*
(instance Bed SetOrClass)
*/
fof(a762,axiom,s_instance(s_Bed, s_SetOrClass)).

/*
(subclass Hammock Bed)
*/
fof(a763,axiom,s_subclass(s_Hammock, s_Bed)).

/*
(forall (?X)
 (exists (?POLE1 ?POLE2 ?GROUND)
  (and (and (instance ?GROUND Object) (instance ?POLE2 Object)
            (instance ?POLE1 Object))
       (=> (instance ?X Hammock)
        (and (material Fabric ?X)
             (and (orientation ?POLE1 ?POLE2 Near)
                  (and (connected ?POLE1 ?X)
                       (and (connected ?POLE2 ?X)
                            (and (instance ?GROUND LandArea)
                                 (and
                                  (located ?X ?GROUND)
                                  (orientation
                                   ?X
                                   ?GROUND
                                   Above)))))))))))
*/
fof(a764,axiom,! [X] : (? [POLE1,POLE2,GROUND] : (((s_instance(GROUND, s_Object) & s_instance(POLE2, s_Object) & s_instance(POLE1, s_Object)) & (s_instance(X, s_Hammock) => (s_material(s_Fabric, X) & (s_orientation(POLE1, POLE2, s_Near) & (s_connected(POLE1, X) & (s_connected(POLE2, X) & (s_instance(GROUND, s_LandArea) & (s_located(X, GROUND) & s_orientation(X, GROUND, s_Above)))))))))))).

/*
(forall (?X)
 (=> (instance ?X Hammock)
  (hasPurpose ?X
   (exists (?PROC)
    (and (instance ?PROC LyingDown) (eventLocated ?PROC ?X))))))
*/
%% no translation to TPTP available.

/*
(instance Mattress SetOrClass)
*/
fof(a765,axiom,s_instance(s_Mattress, s_SetOrClass)).

/*
(subclass Mattress Artifact)
*/
fof(a766,axiom,s_subclass(s_Mattress, s_Artifact)).

/*
(forall (?X)
 (exists (?BED)
  (and (instance ?BED CorpuscularObject)
       (=> (instance ?X Mattress)
        (and (instance ?BED Bed) (component ?X ?BED))))))
*/
fof(a767,axiom,! [X] : (? [BED] : ((s_instance(BED, s_CorpuscularObject) & (s_instance(X, s_Mattress) => (s_instance(BED, s_Bed) & s_component(X, BED))))))).

/*
(forall (?X)
 (=> (instance ?X Mattress)
  (hasPurpose ?X
   (exists (?PERSON)
    (and (attribute ?PERSON Asleep) (orientation ?PERSON ?X On))))))
*/
%% no translation to TPTP available.

/*
(subclass BedFrame Artifact)
*/
fof(a768,axiom,s_subclass(s_BedFrame, s_Artifact)).

/*
(forall (?BEDFRAME ?X ?MATTRESS)
 (=>
  (and (instance ?X Bed)
       (and (component ?BEDFRAME ?X)
            (and (instance ?BEDFRAME BedFrame)
                 (and (component ?MATTRESS ?X)
                      (instance ?MATTRESS Mattress)))))
  (orientation ?MATTRESS ?BEDFRAME On)))
*/
fof(a769,axiom,! [BEDFRAME,X,MATTRESS] : (((s_instance(X, s_Bed) & (s_component(BEDFRAME, X) & (s_instance(BEDFRAME, s_BedFrame) & (s_component(MATTRESS, X) & s_instance(MATTRESS, s_Mattress))))) => s_orientation(MATTRESS, BEDFRAME, s_On)))).

/*
(instance FourPosterBed SetOrClass)
*/
fof(a770,axiom,s_instance(s_FourPosterBed, s_SetOrClass)).

/*
(instance BedFrame SetOrClass)
*/
fof(a771,axiom,s_instance(s_BedFrame, s_SetOrClass)).

/*
(subclass FourPosterBed BedFrame)
*/
fof(a772,axiom,s_subclass(s_FourPosterBed, s_BedFrame)).

/*
(forall (?X ?BED ?SIDE2 ?SIDE1)
 (exists (?SHAPE)
  (forall (?CORNER)
   (exists (?POST ?FLOOR)
    (and (and (instance ?FLOOR Object) (instance ?POST Object))
         (=> (instance ?CORNER GeometricPoint)
          (and (instance ?SHAPE GeometricFigure)
               (=>
                (and (instance ?BED Object)
                     (instance ?SIDE2 OneDimensionalFigure)
                     (instance ?SIDE1 OneDimensionalFigure))
                (=> (instance ?X FourPosterBed)
                 (and (attribute ?X ?SHAPE)
                      (and (instance ?SHAPE Quadrilateral)
                           (=>
                            (and (pointOfIntersection
                                  ?SIDE1
                                  ?SIDE2
                                  ?CORNER)
                                 (and
                                  (sideOfFigure ?SIDE1 ?SHAPE)
                                  (and
                                   (sideOfFigure ?SIDE2 ?SHAPE)
                                   (not (equal ?SIDE1 ?SIDE2)))))
                            (and (meetsSpatially ?CORNER ?POST)
                                 (and
                                  (instance ?POST Artifact)
                                  (and
                                   (instance ?FLOOR Floor)
                                   (and
                                    (orientation ?BED ?FLOOR On)
                                    (orientation
                                     ?POST
                                     ?FLOOR
                                     Vertical)))))))))))))))))
*/
fof(a773,axiom,! [X,BED,SIDE2,SIDE1] : (? [SHAPE] : (! [CORNER] : (? [POST,FLOOR] : (((s_instance(FLOOR, s_Object) & s_instance(POST, s_Object)) & (s_instance(CORNER, s_GeometricPoint) => (s_instance(SHAPE, s_GeometricFigure) & ((s_instance(BED, s_Object) & s_instance(SIDE2, s_OneDimensionalFigure) & s_instance(SIDE1, s_OneDimensionalFigure)) => (s_instance(X, s_FourPosterBed) => (s_attribute(X, SHAPE) & (s_instance(SHAPE, s_Quadrilateral) & ((s_pointOfIntersection(SIDE1, SIDE2, CORNER) & (s_sideOfFigure(SIDE1, SHAPE) & (s_sideOfFigure(SIDE2, SHAPE) & (~ (SIDE1 = SIDE2))))) => (s_meetsSpatially(CORNER, POST) & (s_instance(POST, s_Artifact) & (s_instance(FLOOR, s_Floor) & (s_orientation(BED, FLOOR, s_On) & s_orientation(POST, FLOOR, s_Vertical)))))))))))))))))).

/*
(subclass BedAttribute RelationalAttribute)
*/
fof(a774,axiom,s_subclass(s_BedAttribute, s_RelationalAttribute)).

/*
(forall (?ATTR ?X)
 (=> (instance ?X Object)
  (=> (and (attribute ?X ?ATTR) (instance ?ATTR BedAttribute))
   (instance ?X Bed))))
*/
fof(a775,axiom,! [ATTR,X] : ((s_instance(X, s_Object) => ((s_attribute(X, ATTR) & s_instance(ATTR, s_BedAttribute)) => s_instance(X, s_Bed))))).

/*
(instance BedAttribute SetOrClass)
*/
fof(a776,axiom,s_instance(s_BedAttribute, s_SetOrClass)).

/*
(instance WaterBed BedAttribute)
*/
fof(a777,axiom,s_instance(s_WaterBed, s_BedAttribute)).

/*
(forall (?X)
 (exists (?MATTRESS ?WATER)
  (and (and (instance ?WATER Object)
            (instance ?MATTRESS CorpuscularObject))
       (=> (instance ?X CorpuscularObject)
        (=> (attribute ?X WaterBed)
         (and (component ?MATTRESS ?X)
              (and (contains ?MATTRESS ?WATER)
                   (instance ?WATER Water))))))))
*/
fof(a778,axiom,! [X] : (? [MATTRESS,WATER] : (((s_instance(WATER, s_Object) & s_instance(MATTRESS, s_CorpuscularObject)) & (s_instance(X, s_CorpuscularObject) => (s_attribute(X, s_WaterBed) => (s_component(MATTRESS, X) & (s_contains(MATTRESS, WATER) & s_instance(WATER, s_Water))))))))).

/*
(instance BedLinen SetOrClass)
*/
fof(a779,axiom,s_instance(s_BedLinen, s_SetOrClass)).

/*
(subclass BedLinen Artifact)
*/
fof(a780,axiom,s_subclass(s_BedLinen, s_Artifact)).

/*
(forall (?X) (=> (instance ?X BedLinen) (material Fabric ?X)))
*/
fof(a781,axiom,! [X] : ((s_instance(X, s_BedLinen) => s_material(s_Fabric, X)))).

/*
(forall (?X)
 (=> (instance ?X BedLinen)
  (hasPurpose ?X
   (exists (?COVER ?BED)
    (and (instance ?COVER Covering)
         (and (patient ?COVER ?BED)
              (and (instance ?BED Bed) (instrument ?COVER ?X))))))))
*/
%% no translation to TPTP available.

/*
(subclass Table Furniture)
*/
fof(a782,axiom,s_subclass(s_Table, s_Furniture)).

/*
(instance Desk SetOrClass)
*/
fof(a783,axiom,s_instance(s_Desk, s_SetOrClass)).

/*
(instance Table SetOrClass)
*/
fof(a784,axiom,s_instance(s_Table, s_SetOrClass)).

/*
(subclass Desk Table)
*/
fof(a785,axiom,s_subclass(s_Desk, s_Table)).

/*
(instance Furniture SetOrClass)
*/
fof(a786,axiom,s_instance(s_Furniture, s_SetOrClass)).

/*
(subclass ChestOrCabinet Furniture)
*/
fof(a787,axiom,s_subclass(s_ChestOrCabinet, s_Furniture)).

/*
(instance ChestOrCabinet SetOrClass)
*/
fof(a788,axiom,s_instance(s_ChestOrCabinet, s_SetOrClass)).

/*
(subclass ChestOrCabinet Container)
*/
fof(a789,axiom,s_subclass(s_ChestOrCabinet, s_Container)).

/*
(instance Coffin SetOrClass)
*/
fof(a790,axiom,s_instance(s_Coffin, s_SetOrClass)).

/*
(subclass Coffin Container)
*/
fof(a791,axiom,s_subclass(s_Coffin, s_Container)).

/*
(forall (?C)
 (=> (instance ?C Coffin)
  (hasPurpose ?C
   (exists (?HC) (and (instance ?HC HumanCorpse) (located ?HC ?C))))))
*/
%% no translation to TPTP available.

/*
(instance Compartment SetOrClass)
*/
fof(a792,axiom,s_instance(s_Compartment, s_SetOrClass)).

/*
(subclass Compartment Container)
*/
fof(a793,axiom,s_subclass(s_Compartment, s_Container)).

/*
(forall (?C)
 (exists (?O)
  (and (instance ?O Object)
       (=> (instance ?C Compartment)
        (and (instance ?O Container)
             (and (not (equal ?C ?O)) (part ?C ?O)))))))
*/
fof(a794,axiom,! [C] : (? [O] : ((s_instance(O, s_Object) & (s_instance(C, s_Compartment) => (s_instance(O, s_Container) & ((~ (C = O)) & s_part(C, O)))))))).

/*
(instance Mailbox SetOrClass)
*/
fof(a795,axiom,s_instance(s_Mailbox, s_SetOrClass)).

/*
(subclass Mailbox Container)
*/
fof(a796,axiom,s_subclass(s_Mailbox, s_Container)).

/*
(forall (?B)
 (=> (instance ?B Mailbox)
  (hasPurpose ?B
   (exists (?M ?I)
    (and (instance ?M Mailing)
         (and (patient ?M ?I) (destination ?M ?B)))))))
*/
%% no translation to TPTP available.

/*
(instance Screw SetOrClass)
*/
fof(a797,axiom,s_instance(s_Screw, s_SetOrClass)).

/*
(subclass Screw AttachingDevice)
*/
fof(a798,axiom,s_subclass(s_Screw, s_AttachingDevice)).

/*
(instance Screwdriver SetOrClass)
*/
fof(a799,axiom,s_instance(s_Screwdriver, s_SetOrClass)).

/*
(subclass Screwdriver Device)
*/
fof(a800,axiom,s_subclass(s_Screwdriver, s_Device)).

/*
(forall (?D)
 (=> (instance ?D Screwdriver)
  (hasPurpose ?D
   (exists (?R ?S)
    (and (instance ?R Rotating)
         (and (instrument ?R ?D)
              (and (patient ?R ?S) (instance ?S Screw))))))))
*/
%% no translation to TPTP available.

/*
(instance Hammer SetOrClass)
*/
fof(a801,axiom,s_instance(s_Hammer, s_SetOrClass)).

/*
(subclass Hammer Device)
*/
fof(a802,axiom,s_subclass(s_Hammer, s_Device)).

/*
(forall (?H)
 (=> (instance ?H Hammer)
  (hasPurpose ?H
   (exists (?I ?N)
    (and (instance ?I Impelling)
         (and (instrument ?I ?H)
              (and (patient ?I ?N) (instance ?N Nail))))))))
*/
%% no translation to TPTP available.

/*
(instance Nail SetOrClass)
*/
fof(a803,axiom,s_instance(s_Nail, s_SetOrClass)).

/*
(subclass Nail AttachingDevice)
*/
fof(a804,axiom,s_subclass(s_Nail, s_AttachingDevice)).

/*
(instance Tape SetOrClass)
*/
fof(a805,axiom,s_instance(s_Tape, s_SetOrClass)).

/*
(subclass Tape AttachingDevice)
*/
fof(a806,axiom,s_subclass(s_Tape, s_AttachingDevice)).

/*
(forall (?TAPE)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?TAPE Tape)
        (and (part ?PART ?TAPE)
             (or (instance ?PART Paper) (instance ?PART Fabric)))))))
*/
fof(a807,axiom,! [TAPE] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(TAPE, s_Tape) => (s_part(PART, TAPE) & (s_instance(PART, s_Paper) | s_instance(PART, s_Fabric)))))))).

/*
(instance Anchor SetOrClass)
*/
fof(a808,axiom,s_instance(s_Anchor, s_SetOrClass)).

/*
(subclass Anchor AttachingDevice)
*/
fof(a809,axiom,s_subclass(s_Anchor, s_AttachingDevice)).

/*
(forall (?S ?A ?ATTACH)
 (=> (instance ?S Entity)
  (=>
   (and (instance ?A Anchor)
        (and (instance ?ATTACH Attaching)
             (and (instrument ?ATTACH ?A) (patient ?ATTACH ?S))))
   (instance ?S WaterVehicle))))
*/
fof(a810,axiom,! [S,A,ATTACH] : ((s_instance(S, s_Entity) => ((s_instance(A, s_Anchor) & (s_instance(ATTACH, s_Attaching) & (s_instrument(ATTACH, A) & s_patient(ATTACH, S)))) => s_instance(S, s_WaterVehicle))))).

/*
(instance BoatDeck SetOrClass)
*/
fof(a811,axiom,s_instance(s_BoatDeck, s_SetOrClass)).

/*
(subclass BoatDeck Artifact)
*/
fof(a812,axiom,s_subclass(s_BoatDeck, s_Artifact)).

/*
(forall (?D)
 (exists (?B)
  (and (instance ?B Object)
       (=> (instance ?D BoatDeck)
        (and (instance ?B WaterVehicle) (part ?D ?B))))))
*/
fof(a813,axiom,! [D] : (? [B] : ((s_instance(B, s_Object) & (s_instance(D, s_BoatDeck) => (s_instance(B, s_WaterVehicle) & s_part(D, B))))))).

/*
(instance Button SetOrClass)
*/
fof(a814,axiom,s_instance(s_Button, s_SetOrClass)).

/*
(subclass Button AttachingDevice)
*/
fof(a815,axiom,s_subclass(s_Button, s_AttachingDevice)).

/*
(forall (?B)
 (=> (instance ?B Button)
  (hasPurpose ?B
   (exists (?C) (and (instance ?C Clothing) (part ?B ?C))))))
*/
%% no translation to TPTP available.

/*
(instance Clamp SetOrClass)
*/
fof(a816,axiom,s_instance(s_Clamp, s_SetOrClass)).

/*
(subclass Clamp AttachingDevice)
*/
fof(a817,axiom,s_subclass(s_Clamp, s_AttachingDevice)).

/*
(instance Washer SetOrClass)
*/
fof(a818,axiom,s_instance(s_Washer, s_SetOrClass)).

/*
(subclass Washer Device)
*/
fof(a819,axiom,s_subclass(s_Washer, s_Device)).

/*
(forall (?W)
 (=> (instance ?W Washer)
  (hasPurpose ?W
   (exists (?O1 ?O2)
    (and (instance ?O1 CorpuscularObject)
         (and (instance ?O2 AttachingDevice)
              (and (meetsSpatially ?O1 ?W) (contains ?W ?O2))))))))
*/
%% no translation to TPTP available.

/*
(forall (?O2 ?W ?O1)
 (exists (?PURPOSE)
  (and (instance ?PURPOSE Formula)
       (=>
        (and (instance ?W Washer)
             (and (instance ?O1 CorpuscularObject)
                  (and (instance ?O2 AttachingDevice)
                       (and (meetsSpatially ?O1 ?W)
                            (contains ?W ?O2)))))
        (hasPurpose ?W ?PURPOSE)))))
*/
fof(a820,axiom,! [O2,W,O1] : (? [PURPOSE] : ((s_instance(PURPOSE, s_Formula) & ((s_instance(W, s_Washer) & (s_instance(O1, s_CorpuscularObject) & (s_instance(O2, s_AttachingDevice) & (s_meetsSpatially(O1, W) & s_contains(W, O2))))) => s_hasPurpose(W, PURPOSE)))))).

/*
(forall (?W) (=> (instance ?W Washer) (attribute ?W RingTorus)))
*/
fof(a821,axiom,! [W] : ((s_instance(W, s_Washer) => s_attribute(W, s_RingTorus)))).

/*
(subclass Holder Device)
*/
fof(a822,axiom,s_subclass(s_Holder, s_Device)).

/*
(forall (?DEVICE)
 (=> (instance ?DEVICE Holder) (capability Keeping instrument ?DEVICE)))
*/
fof(a823,axiom,! [DEVICE] : ((s_instance(DEVICE, s_Holder) => s_capability(s_Keeping, s_instrument_m, DEVICE)))).

/*
(instance Saddle SetOrClass)
*/
fof(a824,axiom,s_instance(s_Saddle, s_SetOrClass)).

/*
(subclass Saddle Holder)
*/
fof(a825,axiom,s_subclass(s_Saddle, s_Holder)).

/*
(forall (?SADDLE ?RIDE)
 (=> (instance ?RIDE SymbolicString)
  (=> (instance ?SADDLE Saddle)
   (capability
    (KappaFn ?RIDE
     (exists (?HUMAN ?HORSE)
      (and (instance ?RIDE Carrying)
           (and (patient ?RIDE ?HUMAN)
                (and (instance ?HUMAN Human)
                     (and (agent ?RIDE ?HORSE)
                          (instance ?HORSE Horse)))))))
    instrument ?SADDLE))))
*/
%% no translation to TPTP available.

/*
(instance HorseRiding SetOrClass)
*/
fof(a826,axiom,s_instance(s_HorseRiding, s_SetOrClass)).

/*
(subclass HorseRiding Carrying)
*/
fof(a827,axiom,s_subclass(s_HorseRiding, s_Carrying)).

/*
(forall (?R)
 (exists (?H)
  (and (instance ?H Object)
       (=> (instance ?R HorseRiding)
        (and (instance ?H Horse) (instrument ?R ?H))))))
*/
fof(a828,axiom,! [R] : (? [H] : ((s_instance(H, s_Object) & (s_instance(R, s_HorseRiding) => (s_instance(H, s_Horse) & s_instrument(R, H))))))).

/*
(instance carries BinaryPredicate)
*/
fof(a829,axiom,s_instance(s_carries_m, s_BinaryPredicate)).

/*
(forall (?OBJECT ?AGENT)
 (exists (?CARRYING)
  (and (instance ?CARRYING Process)
       (=> (and (instance ?AGENT Agent) (instance ?OBJECT Object))
        (=> (carries ?AGENT ?OBJECT)
         (and (instrument ?CARRYING ?AGENT)
              (patient ?CARRYING ?OBJECT)))))))
*/
fof(a830,axiom,! [OBJECT,AGENT] : (? [CARRYING] : ((s_instance(CARRYING, s_Process) & ((s_instance(AGENT, s_Agent) & s_instance(OBJECT, s_Object)) => (s_carries(AGENT, OBJECT) => (s_instrument(CARRYING, AGENT) & s_patient(CARRYING, OBJECT)))))))).

/*
(instance Tray SetOrClass)
*/
fof(a831,axiom,s_instance(s_Tray, s_SetOrClass)).

/*
(subclass Tray Holder)
*/
fof(a832,axiom,s_subclass(s_Tray, s_Holder)).

/*
(instance Dish SetOrClass)
*/
fof(a833,axiom,s_instance(s_Dish, s_SetOrClass)).

/*
(subclass Dish Holder)
*/
fof(a834,axiom,s_subclass(s_Dish, s_Holder)).

/*
(forall (?D)
 (=> (instance ?D Dish)
  (hasPurpose ?D
   (exists (?F ?E)
    (and (instance ?E Eating)
         (and (patient ?E ?F)
              (and (patient ?E ?D)
                   (and (instance ?F (FoodForFn Animal))
                        (located ?F ?D)))))))))
*/
%% no translation to TPTP available.

/*
(subclass Container Holder)
*/
fof(a835,axiom,s_subclass(s_Container, s_Holder)).

/*
(forall (?CONTAINER)
 (=> (instance ?CONTAINER Container)
  (hasPurpose ?CONTAINER (exists (?OBJ) (contains ?CONTAINER ?OBJ)))))
*/
%% no translation to TPTP available.

/*
(instance Bag SetOrClass)
*/
fof(a836,axiom,s_instance(s_Bag, s_SetOrClass)).

/*
(subclass Bag Container)
*/
fof(a837,axiom,s_subclass(s_Bag, s_Container)).

/*
(forall (?BAG) (=> (instance ?BAG Bag) (attribute ?BAG Pliable)))
*/
fof(a838,axiom,! [BAG] : ((s_instance(BAG, s_Bag) => s_attribute(BAG, s_Pliable)))).

/*
(forall (?BAG)
 (=> (instance ?BAG Bag)
  (hasPurpose ?BAG
   (exists (?T ?OBJ)
    (and (instance ?T Transfer)
         (and (instance ?OBJ Object)
              (and (contains ?BAG ?OBJ)
                   (and (instrument ?T ?BAG) (patient ?T ?OBJ)))))))))
*/
%% no translation to TPTP available.

/*
(instance Box SetOrClass)
*/
fof(a839,axiom,s_instance(s_Box, s_SetOrClass)).

/*
(subclass Box Container)
*/
fof(a840,axiom,s_subclass(s_Box, s_Container)).

/*
(forall (?BOX ?SIDE)
 (=> (instance ?SIDE SymbolicString)
  (=> (instance ?BOX Box)
   (equal (CardinalityFn
           (KappaFn ?SIDE
            (or (top ?SIDE ?BOX)
                (or (bottom ?SIDE ?BOX) (side ?SIDE ?BOX)))))
          6))))
*/
%% no translation to TPTP available.

/*
(instance Holder SetOrClass)
*/
fof(a841,axiom,s_instance(s_Holder, s_SetOrClass)).

/*
(subclass TrapOrCage Holder)
*/
fof(a842,axiom,s_subclass(s_TrapOrCage, s_Holder)).

/*
(forall (?T)
 (=> (instance ?T TrapOrCage)
  (hasPurpose ?T
   (exists (?C) (and (instance ?C Confining) (instrument ?C ?T))))))
*/
%% no translation to TPTP available.

/*
(instance Envelope SetOrClass)
*/
fof(a843,axiom,s_instance(s_Envelope, s_SetOrClass)).

/*
(subclass Envelope Container)
*/
fof(a844,axiom,s_subclass(s_Envelope, s_Container)).

/*
(instance TravelContainer SetOrClass)
*/
fof(a845,axiom,s_instance(s_TravelContainer, s_SetOrClass)).

/*
(subclass TravelContainer Container)
*/
fof(a846,axiom,s_subclass(s_TravelContainer, s_Container)).

/*
(instance Container SetOrClass)
*/
fof(a847,axiom,s_instance(s_Container, s_SetOrClass)).

/*
(subclass FluidContainer Container)
*/
fof(a848,axiom,s_subclass(s_FluidContainer, s_Container)).

/*
(forall (?STUFF ?TANK)
 (=> (instance ?STUFF Object)
  (=> (and (instance ?TANK FluidContainer) (contains ?TANK ?STUFF))
   (attribute ?STUFF Fluid))))
*/
fof(a849,axiom,! [STUFF,TANK] : ((s_instance(STUFF, s_Object) => ((s_instance(TANK, s_FluidContainer) & s_contains(TANK, STUFF)) => s_attribute(STUFF, s_Fluid))))).

/*
(instance Bottle SetOrClass)
*/
fof(a850,axiom,s_instance(s_Bottle, s_SetOrClass)).

/*
(subclass Bottle FluidContainer)
*/
fof(a851,axiom,s_subclass(s_Bottle, s_FluidContainer)).

/*
(forall (?STUFF ?BOTTLE)
 (=> (instance ?STUFF Object)
  (=> (and (instance ?BOTTLE Bottle) (contains ?BOTTLE ?STUFF))
   (attribute ?STUFF Liquid))))
*/
fof(a852,axiom,! [STUFF,BOTTLE] : ((s_instance(STUFF, s_Object) => ((s_instance(BOTTLE, s_Bottle) & s_contains(BOTTLE, STUFF)) => s_attribute(STUFF, s_Liquid))))).

/*
(forall (?BOTTLE ?TOP ?WIDTH2 ?WIDTH1 ?BOTTOM)
 (=>
  (and (instance ?TOP SelfConnectedObject)
       (instance ?WIDTH2 LengthMeasure)
       (instance ?WIDTH1 LengthMeasure)
       (instance ?BOTTOM SelfConnectedObject))
  (=>
   (and (instance ?BOTTLE Bottle)
        (and (bottom ?BOTTOM ?BOTTLE)
             (and (top ?TOP ?BOTTLE)
                  (and (width ?BOTTOM ?WIDTH1) (width ?TOP ?WIDTH2)))))
   (lessThan ?WIDTH2 ?WIDTH1))))
*/
fof(a853,axiom,! [BOTTLE,TOP,WIDTH2,WIDTH1,BOTTOM] : (((s_instance(TOP, s_SelfConnectedObject) & s_instance(WIDTH2, s_LengthMeasure) & s_instance(WIDTH1, s_LengthMeasure) & s_instance(BOTTOM, s_SelfConnectedObject)) => ((s_instance(BOTTLE, s_Bottle) & (s_bottom(BOTTOM, BOTTLE) & (s_top(TOP, BOTTLE) & (s_width(BOTTOM, WIDTH1) & s_width(TOP, WIDTH2))))) => less(WIDTH2, WIDTH1))))).

/*
(instance DrinkingCup SetOrClass)
*/
fof(a854,axiom,s_instance(s_DrinkingCup, s_SetOrClass)).

/*
(subclass DrinkingCup FluidContainer)
*/
fof(a855,axiom,s_subclass(s_DrinkingCup, s_FluidContainer)).

/*
(forall (?STUFF ?CUP)
 (=> (instance ?STUFF Object)
  (=> (and (instance ?CUP DrinkingCup) (contains ?CUP ?STUFF))
   (instance ?STUFF Beverage))))
*/
fof(a856,axiom,! [STUFF,CUP] : ((s_instance(STUFF, s_Object) => ((s_instance(CUP, s_DrinkingCup) & s_contains(CUP, STUFF)) => s_instance(STUFF, s_Beverage))))).

/*
(subclass SwimmingPool FluidContainer)
*/
fof(a857,axiom,s_subclass(s_SwimmingPool, s_FluidContainer)).

/*
(subclass SwimmingPool StationaryArtifact)
*/
fof(a858,axiom,s_subclass(s_SwimmingPool, s_StationaryArtifact)).

/*
(forall (?P)
 (=> (instance ?P SwimmingPool)
  (hasPurpose ?P
   (exists (?S) (and (instance ?S Swimming) (eventLocated ?S ?P))))))
*/
%% no translation to TPTP available.

/*
(forall (?F ?P)
 (=>
  (and (instance ?P SwimmingPool)
       (and (contains ?P ?F) (instance ?F Fluid)))
  (instance ?F Water)))
*/
fof(a859,axiom,! [F,P] : (((s_instance(P, s_SwimmingPool) & (s_contains(P, F) & s_instance(F, s_Fluid))) => s_instance(F, s_Water)))).

/*
(subclass BoardOrBlock Artifact)
*/
fof(a860,axiom,s_subclass(s_BoardOrBlock, s_Artifact)).

/*
(forall (?BOARD)
 (=> (instance ?BOARD BoardOrBlock)
  (capability Constructing resource ?BOARD)))
*/
fof(a861,axiom,! [BOARD] : ((s_instance(BOARD, s_BoardOrBlock) => s_capability(s_Constructing, s_resource_m, BOARD)))).

/*
(instance Brick SetOrClass)
*/
fof(a862,axiom,s_instance(s_Brick, s_SetOrClass)).

/*
(instance BoardOrBlock SetOrClass)
*/
fof(a863,axiom,s_instance(s_BoardOrBlock, s_SetOrClass)).

/*
(subclass Brick BoardOrBlock)
*/
fof(a864,axiom,s_subclass(s_Brick, s_BoardOrBlock)).

/*
(forall (?B) (=> (instance ?B Brick) (material Clay ?B)))
*/
fof(a865,axiom,! [B] : ((s_instance(B, s_Brick) => s_material(s_Clay, B)))).

/*
(forall (?B)
 (=> (instance ?B Brick)
  (hasPurpose ?B
   (exists (?C) (and (instance ?C Constructing) (resource ?C ?B))))))
*/
%% no translation to TPTP available.

/*
(instance Veneer SetOrClass)
*/
fof(a866,axiom,s_instance(s_Veneer, s_SetOrClass)).

/*
(subclass Veneer Artifact)
*/
fof(a867,axiom,s_subclass(s_Veneer, s_Artifact)).

/*
(forall (?V) (=> (instance ?V Veneer) (attribute ?V Flat)))
*/
fof(a868,axiom,! [V] : ((s_instance(V, s_Veneer) => s_attribute(V, s_Flat)))).

/*
(forall (?V)
 (=> (instance ?V Veneer)
  (hasPurpose ?V (exists (?OBJ) (covers ?V ?OBJ)))))
*/
%% no translation to TPTP available.

/*
(instance tangent BinaryPredicate)
*/
fof(a869,axiom,s_instance(s_tangent_m, s_BinaryPredicate)).

/*
(forall (?CIRCLE ?LINE)
 (exists (?POINT1)
  (forall (?POINT2)
   (=> (instance ?POINT2 GeometricPoint)
    (and (instance ?POINT1 GeometricPoint)
         (=>
          (and (instance ?LINE OneDimensionalFigure)
               (instance ?CIRCLE TwoDimensionalObject)
               (instance ?CIRCLE GeometricFigure))
          (=> (tangent ?LINE ?CIRCLE)
           (and (pointOfFigure ?POINT1 ?LINE)
                (and (pointOfFigure ?POINT1 ?CIRCLE)
                     (=>
                      (and (pointOfFigure ?POINT2 ?LINE)
                           (pointOfFigure ?POINT2 ?CIRCLE))
                      (equal ?POINT1 ?POINT2)))))))))))
*/
fof(a870,axiom,! [CIRCLE,LINE] : (? [POINT1] : (! [POINT2] : ((s_instance(POINT2, s_GeometricPoint) => (s_instance(POINT1, s_GeometricPoint) & ((s_instance(LINE, s_OneDimensionalFigure) & s_instance(CIRCLE, s_TwoDimensionalObject) & s_instance(CIRCLE, s_GeometricFigure)) => (s_tangent(LINE, CIRCLE) => (s_pointOfFigure(POINT1, LINE) & (s_pointOfFigure(POINT1, CIRCLE) & ((s_pointOfFigure(POINT2, LINE) & s_pointOfFigure(POINT2, CIRCLE)) => (POINT1 = POINT2)))))))))))).

/*
(instance TwoDimensionalObject SetOrClass)
*/
fof(a871,axiom,s_instance(s_TwoDimensionalObject, s_SetOrClass)).

/*
(subclass TwoDimensionalObject Object)
*/
fof(a872,axiom,s_subclass(s_TwoDimensionalObject, s_Object)).

/*
(instance sliceOfFigure BinaryPredicate)
*/
fof(a873,axiom,s_instance(s_sliceOfFigure_m, s_BinaryPredicate)).

/*
(instance RoundShape ThreeDimensionalFigure)
*/
fof(a874,axiom,s_instance(s_RoundShape, s_ThreeDimensionalFigure)).

/*
(forall (?TO ?O)
 (forall (?P)
  (exists (?T)
   (and (instance ?T OneDimensionalFigure)
        (=> (instance ?P GeometricPoint)
         (=>
          (and (instance ?TO TwoDimensionalObject) (instance ?O Object)
               (instance ?O GeometricFigure))
          (=> (attribute ?O RoundShape)
           (and (pointOfFigure ?P ?O)
                (and (instance ?TO TwoDimensionalObject)
                     (and (meetsSpatially ?P ?O)
                          (and (meetsSpatially ?P ?TO)
                               (tangent ?T ?TO))))))))))))
*/
fof(a875,axiom,! [TO,O] : (! [P] : (? [T] : ((s_instance(T, s_OneDimensionalFigure) & (s_instance(P, s_GeometricPoint) => ((s_instance(TO, s_TwoDimensionalObject) & s_instance(O, s_Object) & s_instance(O, s_GeometricFigure)) => (s_attribute(O, s_RoundShape) => (s_pointOfFigure(P, O) & (s_instance(TO, s_TwoDimensionalObject) & (s_meetsSpatially(P, O) & (s_meetsSpatially(P, TO) & s_tangent(T, TO))))))))))))).

/*
(instance Cone SetOrClass)
*/
fof(a876,axiom,s_instance(s_Cone, s_SetOrClass)).

/*
(subclass Cone ThreeDimensionalFigure)
*/
fof(a877,axiom,s_subclass(s_Cone, s_ThreeDimensionalFigure)).

/*
(instance Cylinder SetOrClass)
*/
fof(a878,axiom,s_instance(s_Cylinder, s_SetOrClass)).

/*
(subclass Cylinder ThreeDimensionalFigure)
*/
fof(a879,axiom,s_subclass(s_Cylinder, s_ThreeDimensionalFigure)).

/*
(instance ObliqueAngle SetOrClass)
*/
fof(a880,axiom,s_instance(s_ObliqueAngle, s_SetOrClass)).

/*
(subclass ObliqueAngle TwoDimensionalAngle)
*/
fof(a881,axiom,s_subclass(s_ObliqueAngle, s_TwoDimensionalAngle)).

/*
(forall (?N ?A)
 (=> (instance ?N RealNumber)
  (=>
   (and (instance ?A ObliqueAngle)
        (angularMeasure ?A (MeasureFn ?N AngularDegree)))
   (greaterThan ?N 90))))
*/
fof(a882,axiom,! [N,A] : ((s_instance(N, s_RealNumber) => ((s_instance(A, s_ObliqueAngle) & s_angularMeasure(A, s_MeasureFn(N, s_AngularDegree))) => greater(N, 90))))).

/*
(instance RightAngle SetOrClass)
*/
fof(a883,axiom,s_instance(s_RightAngle, s_SetOrClass)).

/*
(subclass RightAngle TwoDimensionalAngle)
*/
fof(a884,axiom,s_subclass(s_RightAngle, s_TwoDimensionalAngle)).

/*
(forall (?A)
 (=> (instance ?A RightAngle)
  (angularMeasure ?A (MeasureFn 90 AngularDegree))))
*/
fof(a885,axiom,! [A] : ((s_instance(A, s_RightAngle) => s_angularMeasure(A, s_MeasureFn(90, s_AngularDegree))))).

/*
(instance AcuteAngle SetOrClass)
*/
fof(a886,axiom,s_instance(s_AcuteAngle, s_SetOrClass)).

/*
(subclass AcuteAngle TwoDimensionalAngle)
*/
fof(a887,axiom,s_subclass(s_AcuteAngle, s_TwoDimensionalAngle)).

/*
(partition4 TwoDimensionalAngle RightAngle ObliqueAngle AcuteAngle)
*/
fof(a888,axiom,s_partition4(s_TwoDimensionalAngle, s_RightAngle, s_ObliqueAngle, s_AcuteAngle)).

/*
(forall (?N ?A)
 (=> (instance ?N RealNumber)
  (=>
   (and (instance ?A AcuteAngle)
        (angularMeasure ?A (MeasureFn ?N AngularDegree)))
   (lessThan ?N 90))))
*/
fof(a889,axiom,! [N,A] : ((s_instance(N, s_RealNumber) => ((s_instance(A, s_AcuteAngle) & s_angularMeasure(A, s_MeasureFn(N, s_AngularDegree))) => less(N, 90))))).

/*
(subclass Polygon ClosedTwoDimensionalFigure)
*/
fof(a890,axiom,s_subclass(s_Polygon, s_ClosedTwoDimensionalFigure)).

/*
(forall (?POLYGON ?PART)
 (exists (?SIDE)
  (and (instance ?SIDE OneDimensionalFigure)
       (=> (instance ?PART OneDimensionalFigure)
        (=> (instance ?POLYGON Polygon)
         (=> (geometricPart ?PART ?POLYGON)
          (or (sideOfFigure ?PART ?POLYGON)
              (and (sideOfFigure ?SIDE ?POLYGON)
                   (geometricPart ?PART ?SIDE)))))))))
*/
fof(a891,axiom,! [POLYGON,PART] : (? [SIDE] : ((s_instance(SIDE, s_OneDimensionalFigure) & (s_instance(PART, s_OneDimensionalFigure) => (s_instance(POLYGON, s_Polygon) => (s_geometricPart(PART, POLYGON) => (s_sideOfFigure(PART, POLYGON) | (s_sideOfFigure(SIDE, POLYGON) & s_geometricPart(PART, SIDE)))))))))).

/*
(subclass Triangle Polygon)
*/
fof(a892,axiom,s_subclass(s_Triangle, s_Polygon)).

/*
(forall (?TRIANGLE ?SIDE)
 (=> (instance ?SIDE SymbolicString)
  (=> (instance ?TRIANGLE Triangle)
   (equal (CardinalityFn
           (KappaFn ?SIDE (sideOfFigure ?SIDE ?TRIANGLE)))
          3))))
*/
%% no translation to TPTP available.

/*
(instance RightTriangle SetOrClass)
*/
fof(a893,axiom,s_instance(s_RightTriangle, s_SetOrClass)).

/*
(instance Triangle SetOrClass)
*/
fof(a894,axiom,s_instance(s_Triangle, s_SetOrClass)).

/*
(subclass RightTriangle Triangle)
*/
fof(a895,axiom,s_subclass(s_RightTriangle, s_Triangle)).

/*
(forall (?T)
 (exists (?A)
  (and (instance ?A TwoDimensionalAngle)
       (=> (instance ?T RightTriangle)
        (and (instance ?A RightAngle) (angleOfFigure ?A ?T))))))
*/
fof(a896,axiom,! [T] : (? [A] : ((s_instance(A, s_TwoDimensionalAngle) & (s_instance(T, s_RightTriangle) => (s_instance(A, s_RightAngle) & s_angleOfFigure(A, T))))))).

/*
(instance Polygon SetOrClass)
*/
fof(a897,axiom,s_instance(s_Polygon, s_SetOrClass)).

/*
(subclass Quadrilateral Polygon)
*/
fof(a898,axiom,s_subclass(s_Quadrilateral, s_Polygon)).

/*
(forall (?QUAD ?SIDE)
 (=> (instance ?SIDE SymbolicString)
  (=> (instance ?QUAD Quadrilateral)
   (equal (CardinalityFn (KappaFn ?SIDE (sideOfFigure ?SIDE ?QUAD)))
          4))))
*/
%% no translation to TPTP available.

/*
(instance Quadrilateral SetOrClass)
*/
fof(a899,axiom,s_instance(s_Quadrilateral, s_SetOrClass)).

/*
(subclass Rectangle Quadrilateral)
*/
fof(a900,axiom,s_subclass(s_Rectangle, s_Quadrilateral)).

/*
(forall (?RECTANGLE ?ANGLE)
 (=> (instance ?ANGLE TwoDimensionalAngle)
  (=> (instance ?RECTANGLE Rectangle)
   (=> (angleOfFigure ?ANGLE ?RECTANGLE)
    (instance ?ANGLE RightAngle)))))
*/
fof(a901,axiom,! [RECTANGLE,ANGLE] : ((s_instance(ANGLE, s_TwoDimensionalAngle) => (s_instance(RECTANGLE, s_Rectangle) => (s_angleOfFigure(ANGLE, RECTANGLE) => s_instance(ANGLE, s_RightAngle)))))).

/*
(instance Square SetOrClass)
*/
fof(a902,axiom,s_instance(s_Square, s_SetOrClass)).

/*
(instance Rectangle SetOrClass)
*/
fof(a903,axiom,s_instance(s_Rectangle, s_SetOrClass)).

/*
(subclass Square Rectangle)
*/
fof(a904,axiom,s_subclass(s_Square, s_Rectangle)).

/*
(forall (?SQUARE)
 (exists (?LENGTH)
  (forall (?SIDE)
   (=> (instance ?SIDE OneDimensionalFigure)
    (and (instance ?LENGTH LengthMeasure)
         (=> (instance ?SQUARE Square)
          (=> (sideOfFigure ?SIDE ?SQUARE)
           (lineMeasure ?SIDE ?LENGTH))))))))
*/
fof(a905,axiom,! [SQUARE] : (? [LENGTH] : (! [SIDE] : ((s_instance(SIDE, s_OneDimensionalFigure) => (s_instance(LENGTH, s_LengthMeasure) & (s_instance(SQUARE, s_Square) => (s_sideOfFigure(SIDE, SQUARE) => s_lineMeasure(SIDE, LENGTH))))))))).

/*
(instance DiameterFn UnaryFunction)
*/
fof(a906,axiom,s_instance(s_DiameterFn_m, s_UnaryFunction)).

/*
(instance DiameterFn TotalValuedRelation)
*/
fof(a907,axiom,s_instance(s_DiameterFn_m, s_TotalValuedRelation)).

/*
(range DiameterFn LengthMeasure)
*/
fof(a908,axiom,s_range(s_DiameterFn_m, s_LengthMeasure)).

/*
(forall (?L ?C)
 (exists (?R)
  (and (instance ?R Quantity)
       (=> (and (instance ?C Circle) (instance ?L Entity))
        (=> (equal (DiameterFn ?C) ?L)
         (and (equal (RadiusFn ?C) ?R)
              (equal (MultiplicationFn ?R 2) ?L)))))))
*/
fof(a909,axiom,! [L,C] : (? [R] : ((s_instance(R, s_Quantity) & ((s_instance(C, s_Circle) & s_instance(L, s_Entity)) => ((s_DiameterFn(C) = L) => ((s_RadiusFn(C) = R) & (times(R, 2) = L)))))))).

/*
(instance RadiusFn UnaryFunction)
*/
fof(a910,axiom,s_instance(s_RadiusFn_m, s_UnaryFunction)).

/*
(instance RadiusFn TotalValuedRelation)
*/
fof(a911,axiom,s_instance(s_RadiusFn_m, s_TotalValuedRelation)).

/*
(range RadiusFn LengthMeasure)
*/
fof(a912,axiom,s_range(s_RadiusFn_m, s_LengthMeasure)).

/*
(forall (?C ?P2 ?R ?P)
 (=>
  (and (instance ?P GeometricPoint) (instance ?R LengthMeasure)
       (instance ?P2 GeometricPoint) (instance ?C Circle))
  (=>
   (and (equal (CenterOfCircleFn ?C) ?P)
        (and (pointOfFigure ?P2 ?C) (geometricDistance ?P2 ?P ?R)))
   (equal (RadiusFn ?C) ?R))))
*/
fof(a913,axiom,! [C,P2,R,P] : (((s_instance(P, s_GeometricPoint) & s_instance(R, s_LengthMeasure) & s_instance(P2, s_GeometricPoint) & s_instance(C, s_Circle)) => (((s_CenterOfCircleFn(C) = P) & (s_pointOfFigure(P2, C) & s_geometricDistance(P2, P, R))) => (s_RadiusFn(C) = R))))).

/*
(instance CircleSector SetOrClass)
*/
fof(a914,axiom,s_instance(s_CircleSector, s_SetOrClass)).

/*
(subclass CircleSector ClosedTwoDimensionalFigure)
*/
fof(a915,axiom,s_subclass(s_CircleSector, s_ClosedTwoDimensionalFigure)).

/*
(subrelation sideOfFigure geometricPart)
*/
fof(a916,axiom,s_subrelation(s_sideOfFigure_m, s_geometricPart_m)).

/*
(instance Sphere SetOrClass)
*/
fof(a917,axiom,s_instance(s_Sphere, s_SetOrClass)).

/*
(subclass Sphere ThreeDimensionalFigure)
*/
fof(a918,axiom,s_subclass(s_Sphere, s_ThreeDimensionalFigure)).

/*
(forall (?SPHERE ?OBJ)
 (exists (?CENTER ?DIST)
  (forall (?PT)
   (=> (instance ?PT GeometricPoint)
    (and (and (instance ?DIST LengthMeasure)
              (instance ?CENTER GeometricPoint))
         (=>
          (and (instance ?OBJ Object) (instance ?OBJ GeometricFigure))
          (=> (and (attribute ?OBJ ?SPHERE) (instance ?SPHERE Sphere))
           (=> (pointOfFigure ?PT ?OBJ)
            (geometricDistance ?PT ?CENTER ?DIST)))))))))
*/
fof(a919,axiom,! [SPHERE,OBJ] : (? [CENTER,DIST] : (! [PT] : ((s_instance(PT, s_GeometricPoint) => ((s_instance(DIST, s_LengthMeasure) & s_instance(CENTER, s_GeometricPoint)) & ((s_instance(OBJ, s_Object) & s_instance(OBJ, s_GeometricFigure)) => ((s_attribute(OBJ, SPHERE) & s_instance(SPHERE, s_Sphere)) => (s_pointOfFigure(PT, OBJ) => s_geometricDistance(PT, CENTER, DIST)))))))))).

/*
(instance Bubble SetOrClass)
*/
fof(a920,axiom,s_instance(s_Bubble, s_SetOrClass)).

/*
(subclass Bubble CorpuscularObject)
*/
fof(a921,axiom,s_subclass(s_Bubble, s_CorpuscularObject)).

/*
(forall (?B)
 (exists (?S)
  (and (instance ?S SelfConnectedObject)
       (=> (instance ?B Bubble)
        (and (surface ?S ?B) (attribute ?S Liquid))))))
*/
fof(a922,axiom,! [B] : (? [S] : ((s_instance(S, s_SelfConnectedObject) & (s_instance(B, s_Bubble) => (s_surface(S, B) & s_attribute(S, s_Liquid))))))).

/*
(forall (?B ?P)
 (=> (instance ?P Object)
  (=> (and (instance ?B Bubble) (interiorPart ?P ?B))
   (attribute ?P Gas))))
*/
fof(a923,axiom,! [B,P] : ((s_instance(P, s_Object) => ((s_instance(B, s_Bubble) & s_interiorPart(P, B)) => s_attribute(P, s_Gas))))).

/*
(forall (?B)
 (exists (?X ?S)
  (and (and (instance ?S Attribute) (instance ?X Object))
       (=>
        (and (instance ?B Bubble)
             (not (and (attribute ?X ?S)
                       (and (not (equal ?X Gas))
                            (meetsSpatially ?X ?B)))))
        (attribute ?B RoundShape)))))
*/
fof(a924,axiom,! [B] : (? [X,S] : (((s_instance(S, s_Attribute) & s_instance(X, s_Object)) & ((s_instance(B, s_Bubble) & (~ (s_attribute(X, S) & ((~ (X = s_Gas)) & s_meetsSpatially(X, B))))) => s_attribute(B, s_RoundShape)))))).

/*
(instance Nest SetOrClass)
*/
fof(a925,axiom,s_instance(s_Nest, s_SetOrClass)).

/*
(subclass Nest CorpuscularObject)
*/
fof(a926,axiom,s_subclass(s_Nest, s_CorpuscularObject)).

/*
(forall (?NEST)
 (=> (instance ?NEST Nest)
  (hasPurpose ?NEST
   (exists (?BIRTH)
    (and (instance ?BIRTH Birth) (eventLocated ?BIRTH ?NEST))))))
*/
%% no translation to TPTP available.

/*
(subclass OutdoorClothing Clothing)
*/
fof(a927,axiom,s_subclass(s_OutdoorClothing, s_Clothing)).

/*
(forall (?TIME ?CLOTHING ?PERSON)
 (forall (?BUILDING)
  (=> (instance ?BUILDING Object)
   (=> (and (instance ?TIME TimePosition) (instance ?PERSON Animal))
    (=>
     (and (instance ?CLOTHING OutdoorClothing)
          (holdsDuring ?TIME (wears ?PERSON ?CLOTHING)))
     (not (and (instance ?BUILDING Building)
               (holdsDuring ?TIME (located ?PERSON ?BUILDING)))))))))
*/
%% no translation to TPTP available.

/*
(instance Apron SetOrClass)
*/
fof(a928,axiom,s_instance(s_Apron, s_SetOrClass)).

/*
(subclass Apron Clothing)
*/
fof(a929,axiom,s_subclass(s_Apron, s_Clothing)).

/*
(forall (?A)
 (=> (instance ?A Apron)
  (hasPurpose ?A
   (exists (?P ?C)
    (and (instance ?C Cooking)
         (and (agent ?C ?P)
              (holdsDuring (WhenFn ?C) (wears ?P ?A))))))))
*/
%% no translation to TPTP available.

/*
(instance Belt SetOrClass)
*/
fof(a930,axiom,s_instance(s_Belt, s_SetOrClass)).

/*
(subclass Belt Clothing)
*/
fof(a931,axiom,s_subclass(s_Belt, s_Clothing)).

/*
(forall (?B ?P)
 (exists (?C)
  (and (instance ?C WearableItem)
       (=> (instance ?P Animal)
        (=> (and (wears ?P ?B) (instance ?B Belt))
         (and (instance ?C Clothing)
              (and (wears ?P ?C) (meetsSpatially ?B ?C))))))))
*/
fof(a932,axiom,! [B,P] : (? [C] : ((s_instance(C, s_WearableItem) & (s_instance(P, s_Animal) => ((s_wears(P, B) & s_instance(B, s_Belt)) => (s_instance(C, s_Clothing) & (s_wears(P, C) & s_meetsSpatially(B, C))))))))).

/*
(instance TieClothing SetOrClass)
*/
fof(a933,axiom,s_instance(s_TieClothing, s_SetOrClass)).

/*
(subclass TieClothing Clothing)
*/
fof(a934,axiom,s_subclass(s_TieClothing, s_Clothing)).

/*
(forall (?T ?P)
 (exists (?N)
  (and (instance ?N Object)
       (=> (instance ?P Animal)
        (=> (and (wears ?P ?T) (instance ?T TieClothing))
         (and (instance ?N Neck)
              (and (part ?N ?P) (contains ?T ?N))))))))
*/
fof(a935,axiom,! [T,P] : (? [N] : ((s_instance(N, s_Object) & (s_instance(P, s_Animal) => ((s_wears(P, T) & s_instance(T, s_TieClothing)) => (s_instance(N, s_Neck) & (s_part(N, P) & s_contains(T, N))))))))).

/*
(instance Cloak SetOrClass)
*/
fof(a936,axiom,s_instance(s_Cloak, s_SetOrClass)).

/*
(subclass Cloak Clothing)
*/
fof(a937,axiom,s_subclass(s_Cloak, s_Clothing)).

/*
(instance Collar SetOrClass)
*/
fof(a938,axiom,s_instance(s_Collar, s_SetOrClass)).

/*
(subclass Collar Clothing)
*/
fof(a939,axiom,s_subclass(s_Collar, s_Clothing)).

/*
(forall (?C)
 (exists (?OC)
  (and (instance ?OC Object)
       (=> (instance ?C Collar)
        (and (part ?C ?OC)
             (or (instance ?OC Coat) (instance ?OC Shirt)))))))
*/
fof(a940,axiom,! [C] : (? [OC] : ((s_instance(OC, s_Object) & (s_instance(C, s_Collar) => (s_part(C, OC) & (s_instance(OC, s_Coat) | s_instance(OC, s_Shirt)))))))).

/*
(forall (?C ?P)
 (exists (?N)
  (and (instance ?N Object)
       (=> (instance ?P Animal)
        (=> (and (wears ?P ?C) (instance ?C Collar))
         (and (instance ?N Neck)
              (and (part ?N ?P) (meetsSpatially ?C ?N))))))))
*/
fof(a941,axiom,! [C,P] : (? [N] : ((s_instance(N, s_Object) & (s_instance(P, s_Animal) => ((s_wears(P, C) & s_instance(C, s_Collar)) => (s_instance(N, s_Neck) & (s_part(N, P) & s_meetsSpatially(C, N))))))))).

/*
(instance Glove SetOrClass)
*/
fof(a942,axiom,s_instance(s_Glove, s_SetOrClass)).

/*
(subclass Glove Clothing)
*/
fof(a943,axiom,s_subclass(s_Glove, s_Clothing)).

/*
(forall (?G ?P)
 (exists (?H)
  (and (instance ?H Object)
       (=> (instance ?P Animal)
        (=> (and (wears ?P ?G) (instance ?G Glove))
         (and (instance ?H Hand)
              (and (part ?H ?P) (meetsSpatially ?G ?H))))))))
*/
fof(a944,axiom,! [G,P] : (? [H] : ((s_instance(H, s_Object) & (s_instance(P, s_Animal) => ((s_wears(P, G) & s_instance(G, s_Glove)) => (s_instance(H, s_Hand) & (s_part(H, P) & s_meetsSpatially(G, H))))))))).

/*
(instance Hat SetOrClass)
*/
fof(a945,axiom,s_instance(s_Hat, s_SetOrClass)).

/*
(subclass Hat Clothing)
*/
fof(a946,axiom,s_subclass(s_Hat, s_Clothing)).

/*
(forall (?HAT ?PERSON)
 (exists (?HEAD)
  (and (instance ?HEAD Object)
       (=> (instance ?PERSON Animal)
        (=> (and (wears ?PERSON ?HAT) (instance ?HAT Hat))
         (and (instance ?HEAD Head)
              (and (part ?HEAD ?PERSON)
                   (meetsSpatially ?HAT ?HEAD))))))))
*/
fof(a947,axiom,! [HAT,PERSON] : (? [HEAD] : ((s_instance(HEAD, s_Object) & (s_instance(PERSON, s_Animal) => ((s_wears(PERSON, HAT) & s_instance(HAT, s_Hat)) => (s_instance(HEAD, s_Head) & (s_part(HEAD, PERSON) & s_meetsSpatially(HAT, HEAD))))))))).

/*
(instance Coat SetOrClass)
*/
fof(a948,axiom,s_instance(s_Coat, s_SetOrClass)).

/*
(instance OutdoorClothing SetOrClass)
*/
fof(a949,axiom,s_instance(s_OutdoorClothing, s_SetOrClass)).

/*
(subclass Coat OutdoorClothing)
*/
fof(a950,axiom,s_subclass(s_Coat, s_OutdoorClothing)).

/*
(instance Trousers SetOrClass)
*/
fof(a951,axiom,s_instance(s_Trousers, s_SetOrClass)).

/*
(subclass Trousers Clothing)
*/
fof(a952,axiom,s_subclass(s_Trousers, s_Clothing)).

/*
(forall (?T ?H)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?H Animal)
        (=> (and (wears ?H ?T) (instance ?T Trousers))
         (and (instance ?L Leg)
              (and (part ?L ?H) (contains ?T ?L))))))))
*/
fof(a953,axiom,! [T,H] : (? [L] : ((s_instance(L, s_Object) & (s_instance(H, s_Animal) => ((s_wears(H, T) & s_instance(T, s_Trousers)) => (s_instance(L, s_Leg) & (s_part(L, H) & s_contains(T, L))))))))).

/*
(subclass Shoe Clothing)
*/
fof(a954,axiom,s_subclass(s_Shoe, s_Clothing)).

/*
(forall (?SHOE ?PERSON)
 (exists (?FOOT)
  (and (instance ?FOOT Object)
       (=> (instance ?PERSON Animal)
        (=> (and (wears ?PERSON ?SHOE) (instance ?SHOE Shoe))
         (and (instance ?FOOT Foot)
              (and (part ?FOOT ?PERSON)
                   (meetsSpatially ?SHOE ?FOOT))))))))
*/
fof(a955,axiom,! [SHOE,PERSON] : (? [FOOT] : ((s_instance(FOOT, s_Object) & (s_instance(PERSON, s_Animal) => ((s_wears(PERSON, SHOE) & s_instance(SHOE, s_Shoe)) => (s_instance(FOOT, s_Foot) & (s_part(FOOT, PERSON) & s_meetsSpatially(SHOE, FOOT))))))))).

/*
(instance ShoeSole SetOrClass)
*/
fof(a956,axiom,s_instance(s_ShoeSole, s_SetOrClass)).

/*
(subclass ShoeSole Artifact)
*/
fof(a957,axiom,s_subclass(s_ShoeSole, s_Artifact)).

/*
(forall (?SS)
 (exists (?S)
  (and (instance ?S SelfConnectedObject)
       (=> (instance ?SS ShoeSole)
        (and (instance ?S Shoe) (bottom ?SS ?S))))))
*/
fof(a958,axiom,! [SS] : (? [S] : ((s_instance(S, s_SelfConnectedObject) & (s_instance(SS, s_ShoeSole) => (s_instance(S, s_Shoe) & s_bottom(SS, S))))))).

/*
(instance Sandal SetOrClass)
*/
fof(a959,axiom,s_instance(s_Sandal, s_SetOrClass)).

/*
(instance Shoe SetOrClass)
*/
fof(a960,axiom,s_instance(s_Shoe, s_SetOrClass)).

/*
(subclass Sandal Shoe)
*/
fof(a961,axiom,s_subclass(s_Sandal, s_Shoe)).

/*
(forall (?S)
 (exists (?H1 ?H2)
  (and (and (instance ?H2 Entity) (instance ?H1 Physical))
       (=> (instance ?S Sandal)
        (and (instance ?H1 Hole)
             (and (instance ?H2 Hole)
                  (and (not (equal ?H1 ?H2))
                       (hasPurpose ?H1
                        (exists (?D ?F ?A ?I)
                         (and (instance ?D Dressing)
                              (and (instance ?F Foot)
                                   (and
                                    (agent ?D ?A)
                                    (and
                                     (part ?F ?A)
                                     (and
                                      (subProcess ?I ?D)
                                      (and
                                       (instance ?I Inserting)
                                       (and
                                        (patient ?I ?F)
                                        (destination
                                         ?I
                                         ?H1)))))))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?S)
 (exists (?SOLE)
  (and (instance ?SOLE Object)
       (=> (instance ?S Sandal)
        (and (instance ?SOLE ShoeSole)
             (and (part ?SOLE ?S) (attribute ?SOLE Flat)))))))
*/
fof(a962,axiom,! [S] : (? [SOLE] : ((s_instance(SOLE, s_Object) & (s_instance(S, s_Sandal) => (s_instance(SOLE, s_ShoeSole) & (s_part(SOLE, S) & s_attribute(SOLE, s_Flat)))))))).

/*
(instance Sock SetOrClass)
*/
fof(a963,axiom,s_instance(s_Sock, s_SetOrClass)).

/*
(subclass Sock Clothing)
*/
fof(a964,axiom,s_subclass(s_Sock, s_Clothing)).

/*
(forall (?S ?P)
 (exists (?F)
  (and (instance ?F Object)
       (=> (instance ?P Animal)
        (=> (and (wears ?P ?S) (instance ?S Sock))
         (and (instance ?F Foot)
              (and (part ?F ?P) (contains ?S ?F))))))))
*/
fof(a965,axiom,! [S,P] : (? [F] : ((s_instance(F, s_Object) & (s_instance(P, s_Animal) => ((s_wears(P, S) & s_instance(S, s_Sock)) => (s_instance(F, s_Foot) & (s_part(F, P) & s_contains(S, F))))))))).

/*
(instance Shirt SetOrClass)
*/
fof(a966,axiom,s_instance(s_Shirt, s_SetOrClass)).

/*
(subclass Shirt Clothing)
*/
fof(a967,axiom,s_subclass(s_Shirt, s_Clothing)).

/*
(forall (?SHIRT ?PERSON)
 (=> (instance ?PERSON Animal)
  (=> (and (instance ?SHIRT Shirt) (wears ?PERSON ?SHIRT))
   (instance ?PERSON Human))))
*/
fof(a968,axiom,! [SHIRT,PERSON] : ((s_instance(PERSON, s_Animal) => ((s_instance(SHIRT, s_Shirt) & s_wears(PERSON, SHIRT)) => s_instance(PERSON, s_Human))))).

/*
(instance Sleeve SetOrClass)
*/
fof(a969,axiom,s_instance(s_Sleeve, s_SetOrClass)).

/*
(subclass Sleeve Clothing)
*/
fof(a970,axiom,s_subclass(s_Sleeve, s_Clothing)).

/*
(forall (?S ?P)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?P Animal)
        (=> (and (wears ?P ?S) (instance ?S Sleeve))
         (and (instance ?A Arm)
              (and (part ?A ?P) (contains ?S ?A))))))))
*/
fof(a971,axiom,! [S,P] : (? [A] : ((s_instance(A, s_Object) & (s_instance(P, s_Animal) => ((s_wears(P, S) & s_instance(S, s_Sleeve)) => (s_instance(A, s_Arm) & (s_part(A, P) & s_contains(S, A))))))))).

/*
(forall (?S)
 (exists (?C)
  (and (instance ?C Object)
       (=> (instance ?S Sleeve)
        (and (part ?S ?C)
             (or (instance ?C Shirt) (instance ?C Coat)))))))
*/
fof(a972,axiom,! [S] : (? [C] : ((s_instance(C, s_Object) & (s_instance(S, s_Sleeve) => (s_part(S, C) & (s_instance(C, s_Shirt) | s_instance(C, s_Coat)))))))).

/*
(instance Dress SetOrClass)
*/
fof(a973,axiom,s_instance(s_Dress, s_SetOrClass)).

/*
(subclass Dress Clothing)
*/
fof(a974,axiom,s_subclass(s_Dress, s_Clothing)).

/*
(forall (?DRESS ?PERSON)
 (=> (instance ?PERSON Animal)
  (=> (and (instance ?DRESS Dress) (wears ?PERSON ?DRESS))
   (instance ?PERSON Woman))))
*/
fof(a975,axiom,! [DRESS,PERSON] : ((s_instance(PERSON, s_Animal) => ((s_instance(DRESS, s_Dress) & s_wears(PERSON, DRESS)) => s_instance(PERSON, s_Woman))))).

/*
(instance ClothingSuit SetOrClass)
*/
fof(a976,axiom,s_instance(s_ClothingSuit, s_SetOrClass)).

/*
(subclass ClothingSuit Collection)
*/
fof(a977,axiom,s_subclass(s_ClothingSuit, s_Collection)).

/*
(forall (?SUIT ?TIME ?ITEM1 ?PERSON)
 (forall (?ITEM2)
  (=> (instance ?ITEM2 WearableItem)
   (=>
    (and (instance ?TIME TimePosition) (instance ?ITEM1 WearableItem)
         (instance ?PERSON Animal))
    (=>
     (and (instance ?SUIT ClothingSuit)
          (and (member ?ITEM1 ?SUIT)
               (holdsDuring ?TIME (wears ?PERSON ?ITEM1))))
     (=> (member ?ITEM2 ?SUIT)
      (holdsDuring ?TIME (wears ?PERSON ?ITEM2))))))))
*/
%% no translation to TPTP available.

/*
(subclass Rug Fabric)
*/
fof(a978,axiom,s_subclass(s_Rug, s_Fabric)).

/*
(forall (?F ?R)
 (=> (instance ?F Entity)
  (=> (instance ?R Rug)
   (hasPurpose ?R
    (exists (?C)
     (and (instance ?C Covering)
          (and (instrument ?C ?R)
               (and (patient ?C ?F) (instance ?F Floor)))))))))
*/
%% no translation to TPTP available.

/*
(instance Towel SetOrClass)
*/
fof(a979,axiom,s_instance(s_Towel, s_SetOrClass)).

/*
(subclass Towel Fabric)
*/
fof(a980,axiom,s_subclass(s_Towel, s_Fabric)).

/*
(forall (?X) (=> (instance ?X Towel) (capability Drying instrument ?X)))
*/
fof(a981,axiom,! [X] : ((s_instance(X, s_Towel) => s_capability(s_Drying, s_instrument_m, X)))).

/*
(forall (?T)
 (=> (instance ?T Towel)
  (hasPurpose ?T
   (exists (?D) (and (instance ?D Drying) (instrument ?D ?T))))))
*/
%% no translation to TPTP available.

/*
(instance Leather SetOrClass)
*/
fof(a982,axiom,s_instance(s_Leather, s_SetOrClass)).

/*
(subclass Leather Fabric)
*/
fof(a983,axiom,s_subclass(s_Leather, s_Fabric)).

/*
(forall (?LEATHER)
 (exists (?MAKE ?SKIN)
  (and (and (instance ?SKIN Object) (instance ?MAKE Process))
       (=> (instance ?LEATHER Leather)
        (and (instance ?MAKE Making)
             (and (resource ?MAKE ?SKIN)
                  (and (instance ?SKIN Skin)
                       (result ?MAKE ?LEATHER))))))))
*/
fof(a984,axiom,! [LEATHER] : (? [MAKE,SKIN] : (((s_instance(SKIN, s_Object) & s_instance(MAKE, s_Process)) & (s_instance(LEATHER, s_Leather) => (s_instance(MAKE, s_Making) & (s_resource(MAKE, SKIN) & (s_instance(SKIN, s_Skin) & s_result(MAKE, LEATHER))))))))).

/*
(instance Silk SetOrClass)
*/
fof(a985,axiom,s_instance(s_Silk, s_SetOrClass)).

/*
(subclass Silk Fabric)
*/
fof(a986,axiom,s_subclass(s_Silk, s_Fabric)).

/*
(forall (?S)
 (exists (?M ?T ?I)
  (and (and (instance ?I Object) (instance ?T Object)
            (instance ?M Process))
       (=> (instance ?S Silk)
        (and (instance ?M Making)
             (and (result ?M ?S)
                  (and (resource ?M ?T)
                       (and (part ?T ?I)
                            (and (instance ?I Insect)
                                 (attribute ?I Larval))))))))))
*/
fof(a987,axiom,! [S] : (? [M,T,I] : (((s_instance(I, s_Object) & s_instance(T, s_Object) & s_instance(M, s_Process)) & (s_instance(S, s_Silk) => (s_instance(M, s_Making) & (s_result(M, S) & (s_resource(M, T) & (s_part(T, I) & (s_instance(I, s_Insect) & s_attribute(I, s_Larval))))))))))).

/*
(instance Wool SetOrClass)
*/
fof(a988,axiom,s_instance(s_Wool, s_SetOrClass)).

/*
(subclass Wool Fabric)
*/
fof(a989,axiom,s_subclass(s_Wool, s_Fabric)).

/*
(forall (?W)
 (exists (?M ?H ?S)
  (and (and (instance ?S Object) (instance ?H Object)
            (instance ?M Process))
       (=> (instance ?W Wool)
        (and (instance ?M Making)
             (and (result ?M ?W)
                  (and (resource ?M ?H)
                       (and (part ?H ?S)
                            (and (instance ?H Hair)
                                 (instance ?S Sheep))))))))))
*/
fof(a990,axiom,! [W] : (? [M,H,S] : (((s_instance(S, s_Object) & s_instance(H, s_Object) & s_instance(M, s_Process)) & (s_instance(W, s_Wool) => (s_instance(M, s_Making) & (s_result(M, W) & (s_resource(M, H) & (s_part(H, S) & (s_instance(H, s_Hair) & s_instance(S, s_Sheep))))))))))).

/*
(instance Pocket SetOrClass)
*/
fof(a991,axiom,s_instance(s_Pocket, s_SetOrClass)).

/*
(subclass Pocket Fabric)
*/
fof(a992,axiom,s_subclass(s_Pocket, s_Fabric)).

/*
(forall (?POCKET)
 (exists (?CLOTHING)
  (and (instance ?CLOTHING Object)
       (=> (instance ?POCKET Pocket)
        (and (instance ?CLOTHING Clothing) (part ?POCKET ?CLOTHING))))))
*/
fof(a993,axiom,! [POCKET] : (? [CLOTHING] : ((s_instance(CLOTHING, s_Object) & (s_instance(POCKET, s_Pocket) => (s_instance(CLOTHING, s_Clothing) & s_part(POCKET, CLOTHING))))))).

/*
(forall (?POCKET)
 (=> (instance ?POCKET Pocket) (capability Keeping instrument ?POCKET)))
*/
fof(a994,axiom,! [POCKET] : ((s_instance(POCKET, s_Pocket) => s_capability(s_Keeping, s_instrument_m, POCKET)))).

/*
(instance Blanket SetOrClass)
*/
fof(a995,axiom,s_instance(s_Blanket, s_SetOrClass)).

/*
(subclass Blanket Fabric)
*/
fof(a996,axiom,s_subclass(s_Blanket, s_Fabric)).

/*
(forall (?BLANKET)
 (=> (instance ?BLANKET Blanket)
  (hasPurpose ?BLANKET
   (exists (?HEAT ?PERSON ?BED)
    (and (instance ?HEAT Heating)
         (and (patient ?HEAT ?PERSON)
              (and (instance ?PERSON Human)
                   (and (located ?PERSON ?BED)
                        (instance ?BED Bed)))))))))
*/
%% no translation to TPTP available.

/*
(instance Cotton SetOrClass)
*/
fof(a997,axiom,s_instance(s_Cotton, s_SetOrClass)).

/*
(subclass Cotton PlantAnatomicalStructure)
*/
fof(a998,axiom,s_subclass(s_Cotton, s_PlantAnatomicalStructure)).

/*
(instance CottonFabric SetOrClass)
*/
fof(a999,axiom,s_instance(s_CottonFabric, s_SetOrClass)).

/*
(subclass CottonFabric Fabric)
*/
fof(a1000,axiom,s_subclass(s_CottonFabric, s_Fabric)).

/*
(forall (?F)
 (exists (?M ?C)
  (and (and (instance ?C Object) (instance ?M Process))
       (=> (instance ?F CottonFabric)
        (and (instance ?M Making)
             (and (resource ?M ?C)
                  (and (instance ?C Cotton) (result ?M ?F))))))))
*/
fof(a1001,axiom,! [F] : (? [M,C] : (((s_instance(C, s_Object) & s_instance(M, s_Process)) & (s_instance(F, s_CottonFabric) => (s_instance(M, s_Making) & (s_resource(M, C) & (s_instance(C, s_Cotton) & s_result(M, F))))))))).

/*
(forall (?F) (=> (instance ?F CottonFabric) (material Cotton ?F)))
*/
fof(a1002,axiom,! [F] : ((s_instance(F, s_CottonFabric) => s_material(s_Cotton, F)))).

/*
(instance Veil SetOrClass)
*/
fof(a1003,axiom,s_instance(s_Veil, s_SetOrClass)).

/*
(subclass Veil Clothing)
*/
fof(a1004,axiom,s_subclass(s_Veil, s_Clothing)).

/*
(forall (?V)
 (=> (instance ?V Veil)
  (hasPurpose ?V
   (exists (?F ?H)
    (or (and (instance ?F Face) (meetsSpatially ?V ?F))
        (and (instance ?H Hair) (meetsSpatially ?V ?H)))))))
*/
%% no translation to TPTP available.

/*
(instance Concealing SetOrClass)
*/
fof(a1005,axiom,s_instance(s_Concealing, s_SetOrClass)).

/*
(subclass Concealing Putting)
*/
fof(a1006,axiom,s_subclass(s_Concealing, s_Putting)).

/*
(forall (?OBJ ?C)
 (=> (instance ?OBJ Entity)
  (=> (and (instance ?C Concealing) (patient ?C ?OBJ))
   (hasPurpose ?C
    (not (exists (?S) (and (instance ?S Seeing) (patient ?S ?OBJ))))))))
*/
%% no translation to TPTP available.

/*
(instance Dressing SetOrClass)
*/
fof(a1007,axiom,s_instance(s_Dressing, s_SetOrClass)).

/*
(subclass Dressing Putting)
*/
fof(a1008,axiom,s_subclass(s_Dressing, s_Putting)).

/*
(forall (?CLOTHING ?AGENT ?DRESS)
 (=> (and (instance ?CLOTHING WearableItem) (instance ?AGENT Animal))
  (=>
   (and (instance ?DRESS Dressing)
        (and (agent ?DRESS ?AGENT) (patient ?DRESS ?CLOTHING)))
   (and (instance ?CLOTHING Clothing)
        (and (holdsDuring (BeginFn (WhenFn ?DRESS))
              (not (wears ?AGENT ?CLOTHING)))
             (holdsDuring (EndFn (WhenFn ?DRESS))
              (wears ?AGENT ?CLOTHING)))))))
*/
%% no translation to TPTP available.

/*
(instance ChangingClothing SetOrClass)
*/
fof(a1009,axiom,s_instance(s_ChangingClothing, s_SetOrClass)).

/*
(subclass ChangingClothing Transfer)
*/
fof(a1010,axiom,s_subclass(s_ChangingClothing, s_Transfer)).

/*
(forall (?CC)
 (exists (?R ?D)
  (and (and (instance ?D Process) (instance ?R Process))
       (=> (instance ?CC ChangingClothing)
        (and (instance ?R RemovingClothing)
             (and (instance ?D Dressing)
                  (and (subProcess ?R ?CC) (subProcess ?D ?CC))))))))
*/
fof(a1011,axiom,! [CC] : (? [R,D] : (((s_instance(D, s_Process) & s_instance(R, s_Process)) & (s_instance(CC, s_ChangingClothing) => (s_instance(R, s_RemovingClothing) & (s_instance(D, s_Dressing) & (s_subProcess(R, CC) & s_subProcess(D, CC))))))))).

/*
(instance RemovingClothing SetOrClass)
*/
fof(a1012,axiom,s_instance(s_RemovingClothing, s_SetOrClass)).

/*
(subclass RemovingClothing Uncovering)
*/
fof(a1013,axiom,s_subclass(s_RemovingClothing, s_Uncovering)).

/*
(forall (?CLOTHING ?AGENT ?REMOVE)
 (=> (and (instance ?CLOTHING WearableItem) (instance ?AGENT Animal))
  (=>
   (and (instance ?REMOVE RemovingClothing)
        (and (agent ?REMOVE ?AGENT) (patient ?REMOVE ?CLOTHING)))
   (and (holdsDuring (BeginFn (WhenFn ?REMOVE))
         (wears ?AGENT ?CLOTHING))
        (holdsDuring (EndFn (WhenFn ?REMOVE))
         (not (wears ?AGENT ?CLOTHING)))))))
*/
%% no translation to TPTP available.

/*
(subclass Cleaning Maintaining)
*/
fof(a1014,axiom,s_subclass(s_Cleaning, s_Maintaining)).

/*
(forall (?X)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?X Cleaning)
        (and (patient ?X ?OBJ)
             (holdsDuring (EndFn (WhenFn ?X))
              (attribute ?OBJ Clean)))))))
*/
%% no translation to TPTP available.

/*
(instance Sweeping SetOrClass)
*/
fof(a1015,axiom,s_instance(s_Sweeping, s_SetOrClass)).

/*
(subclass Sweeping Removing)
*/
fof(a1016,axiom,s_subclass(s_Sweeping, s_Removing)).

/*
(forall (?B ?S)
 (=> (instance ?B Object)
  (=> (and (instance ?S Sweeping) (instrument ?S ?B))
   (instance ?B Broom))))
*/
fof(a1017,axiom,! [B,S] : ((s_instance(B, s_Object) => ((s_instance(S, s_Sweeping) & s_instrument(S, B)) => s_instance(B, s_Broom))))).

/*
(subclass Washing Removing)
*/
fof(a1018,axiom,s_subclass(s_Washing, s_Removing)).

/*
(instance Cleaning SetOrClass)
*/
fof(a1019,axiom,s_instance(s_Cleaning, s_SetOrClass)).

/*
(subclass Washing Cleaning)
*/
fof(a1020,axiom,s_subclass(s_Washing, s_Cleaning)).

/*
(forall (?P)
 (exists (?D ?W)
  (and (and (instance ?W Object) (instance ?D Object))
       (=> (instance ?P Washing)
        (and (instance ?D Detergent)
             (and (instrument ?P ?D)
                  (and (instance ?W Water) (instrument ?P ?W))))))))
*/
fof(a1021,axiom,! [P] : (? [D,W] : (((s_instance(W, s_Object) & s_instance(D, s_Object)) & (s_instance(P, s_Washing) => (s_instance(D, s_Detergent) & (s_instrument(P, D) & (s_instance(W, s_Water) & s_instrument(P, W))))))))).

/*
(instance CleaningDevice SetOrClass)
*/
fof(a1022,axiom,s_instance(s_CleaningDevice, s_SetOrClass)).

/*
(subclass CleaningDevice Device)
*/
fof(a1023,axiom,s_subclass(s_CleaningDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D CleaningDevice)
  (hasPurpose ?D
   (exists (?C) (and (instance ?C Cleaning) (instrument ?C ?D))))))
*/
%% no translation to TPTP available.

/*
(instance Tying SetOrClass)
*/
fof(a1024,axiom,s_instance(s_Tying, s_SetOrClass)).

/*
(subclass Tying Attaching)
*/
fof(a1025,axiom,s_subclass(s_Tying, s_Attaching)).

/*
(instance Untying SetOrClass)
*/
fof(a1026,axiom,s_instance(s_Untying, s_SetOrClass)).

/*
(subclass Untying Detaching)
*/
fof(a1027,axiom,s_subclass(s_Untying, s_Detaching)).

/*
(disjoint Untying Tying)
*/
fof(a1028,axiom,s_disjoint(s_Untying, s_Tying)).

/*
(instance Sewing SetOrClass)
*/
fof(a1029,axiom,s_instance(s_Sewing, s_SetOrClass)).

/*
(subclass Sewing Attaching)
*/
fof(a1030,axiom,s_subclass(s_Sewing, s_Attaching)).

/*
(forall (?S)
 (exists (?F)
  (and (instance ?F Entity)
       (=> (instance ?S Sewing)
        (and (instance ?F Fabric) (patient ?S ?F))))))
*/
fof(a1031,axiom,! [S] : (? [F] : ((s_instance(F, s_Entity) & (s_instance(S, s_Sewing) => (s_instance(F, s_Fabric) & s_patient(S, F))))))).

/*
(instance Soldering SetOrClass)
*/
fof(a1032,axiom,s_instance(s_Soldering, s_SetOrClass)).

/*
(subclass Soldering Attaching)
*/
fof(a1033,axiom,s_subclass(s_Soldering, s_Attaching)).

/*
(forall (?OBJ1 ?OBJ2 ?S)
 (exists (?A)
  (and (instance ?A Object)
       (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
        (=>
         (and (instance ?S Soldering)
              (and (patient ?S ?OBJ1)
                   (and (patient ?S ?OBJ2) (not (equal ?OBJ1 ?OBJ2)))))
         (and (instance ?A MetallicAlloy)
              (connects ?A ?OBJ1 ?OBJ2)))))))
*/
fof(a1034,axiom,! [OBJ1,OBJ2,S] : (? [A] : ((s_instance(A, s_Object) & ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(S, s_Soldering) & (s_patient(S, OBJ1) & (s_patient(S, OBJ2) & (~ (OBJ1 = OBJ2))))) => (s_instance(A, s_MetallicAlloy) & s_connects(A, OBJ1, OBJ2)))))))).

/*
(instance SolderingIron SetOrClass)
*/
fof(a1035,axiom,s_instance(s_SolderingIron, s_SetOrClass)).

/*
(subclass SolderingIron ElectricDevice)
*/
fof(a1036,axiom,s_subclass(s_SolderingIron, s_ElectricDevice)).

/*
(forall (?S)
 (exists (?SI)
  (and (instance ?SI Object)
       (=> (instance ?S Soldering)
        (and (instance ?SI SolderingIron) (instrument ?S ?SI))))))
*/
fof(a1037,axiom,! [S] : (? [SI] : ((s_instance(SI, s_Object) & (s_instance(S, s_Soldering) => (s_instance(SI, s_SolderingIron) & s_instrument(S, SI))))))).

/*
(forall (?SI)
 (exists (?X)
  (and (instance ?X CorpuscularObject)
       (=> (instance ?SI SolderingIron)
        (and (part ?X ?SI) (material Metal ?X))))))
*/
fof(a1038,axiom,! [SI] : (? [X] : ((s_instance(X, s_CorpuscularObject) & (s_instance(SI, s_SolderingIron) => (s_part(X, SI) & s_material(s_Metal, X))))))).

/*
(forall (?S)
 (exists (?M)
  (and (instance ?M Process)
       (=> (instance ?S Soldering)
        (and (instance ?M Melting) (subProcess ?M ?S))))))
*/
fof(a1039,axiom,! [S] : (? [M] : ((s_instance(M, s_Process) & (s_instance(S, s_Soldering) => (s_instance(M, s_Melting) & s_subProcess(M, S))))))).

/*
(instance patientMedical BinaryPredicate)
*/
fof(a1040,axiom,s_instance(s_patientMedical_m, s_BinaryPredicate)).

/*
(forall (?DOCTOR ?PATIENT)
 (exists (?PROCESS)
  (and (instance ?PROCESS Process)
       (=>
        (and (instance ?PATIENT Human)
             (instance ?DOCTOR CognitiveAgent))
        (=> (patientMedical ?PATIENT ?DOCTOR)
         (and (patient ?PROCESS ?PATIENT)
              (and (agent ?PROCESS ?DOCTOR)
                   (or (instance ?PROCESS DiagnosticProcess)
                       (instance ?PROCESS TherapeuticProcess)))))))))
*/
fof(a1041,axiom,! [DOCTOR,PATIENT] : (? [PROCESS] : ((s_instance(PROCESS, s_Process) & ((s_instance(PATIENT, s_Human) & s_instance(DOCTOR, s_CognitiveAgent)) => (s_patientMedical(PATIENT, DOCTOR) => (s_patient(PROCESS, PATIENT) & (s_agent(PROCESS, DOCTOR) & (s_instance(PROCESS, s_DiagnosticProcess) | s_instance(PROCESS, s_TherapeuticProcess)))))))))).

/*
(instance Bandage SetOrClass)
*/
fof(a1042,axiom,s_instance(s_Bandage, s_SetOrClass)).

/*
(subclass Bandage Fabric)
*/
fof(a1043,axiom,s_subclass(s_Bandage, s_Fabric)).

/*
(forall (?B)
 (=> (instance ?B Bandage)
  (hasPurpose ?B
   (exists (?TP ?C)
    (and (instance ?TP TherapeuticProcess)
         (and (instance ?C Covering)
              (and (subProcess ?C ?TP) (instrument ?C ?B))))))))
*/
%% no translation to TPTP available.

/*
(subclass Massaging TherapeuticProcess)
*/
fof(a1044,axiom,s_subclass(s_Massaging, s_TherapeuticProcess)).

/*
(instance Massaging SetOrClass)
*/
fof(a1045,axiom,s_instance(s_Massaging, s_SetOrClass)).

/*
(subclass Massaging Touching)
*/
fof(a1046,axiom,s_subclass(s_Massaging, s_Touching)).

/*
(instance RelievingPain SetOrClass)
*/
fof(a1047,axiom,s_instance(s_RelievingPain, s_SetOrClass)).

/*
(subclass RelievingPain TherapeuticProcess)
*/
fof(a1048,axiom,s_subclass(s_RelievingPain, s_TherapeuticProcess)).

/*
(forall (?P ?R)
 (=> (instance ?P Object)
  (=> (and (instance ?R RelievingPain) (patient ?R ?P))
   (and (holdsDuring (BeginFn (WhenFn ?R)) (attribute ?P Pain))
        (holdsDuring (EndFn (WhenFn ?R)) (not (attribute ?P Pain)))))))
*/
%% no translation to TPTP available.

/*
(instance NonspecificDisease SetOrClass)
*/
fof(a1049,axiom,s_instance(s_NonspecificDisease, s_SetOrClass)).

/*
(subclass NonspecificDisease DiseaseOrSyndrome)
*/
fof(a1050,axiom,s_subclass(s_NonspecificDisease, s_DiseaseOrSyndrome)).

/*
(forall (?DISEASE)
 (forall (?AGENT)
  (=> (instance ?AGENT Physical)
   (=> (instance ?DISEASE NonspecificDisease)
    (not (and (instance ?AGENT Microorganism)
              (forall (?VICTIM)
               (=> (attribute ?VICTIM ?DISEASE)
                (located ?AGENT ?VICTIM)))))))))
*/
fof(a1051,axiom,! [DISEASE] : (! [AGENT] : ((s_instance(AGENT, s_Physical) => (s_instance(DISEASE, s_NonspecificDisease) => (~ (s_instance(AGENT, s_Microorganism) & ! [VICTIM] : ((s_attribute(VICTIM, DISEASE) => s_located(AGENT, VICTIM)))))))))).

/*
(subclass BacterialDisease InfectiousDisease)
*/
fof(a1052,axiom,s_subclass(s_BacterialDisease, s_InfectiousDisease)).

/*
(subclass InfectiousDisease DiseaseOrSyndrome)
*/
fof(a1053,axiom,s_subclass(s_InfectiousDisease, s_DiseaseOrSyndrome)).

/*
(forall (?O ?I ?A)
 (exists (?P)
  (and (instance ?P Process)
       (=> (and (instance ?O Agent) (instance ?A Agent))
        (=> (and (instance ?I InfectiousDisease) (attribute ?A ?I))
         (and (instance ?P PathologicProcess)
              (and (agent ?P ?O)
                   (and (instance ?O Microorganism)
                        (experiencer ?P ?A)))))))))
*/
fof(a1054,axiom,! [O,I,A] : (? [P] : ((s_instance(P, s_Process) & ((s_instance(O, s_Agent) & s_instance(A, s_Agent)) => ((s_instance(I, s_InfectiousDisease) & s_attribute(A, I)) => (s_instance(P, s_PathologicProcess) & (s_agent(P, O) & (s_instance(O, s_Microorganism) & s_experiencer(P, A)))))))))).

/*
(instance TakingIll SetOrClass)
*/
fof(a1055,axiom,s_instance(s_TakingIll, s_SetOrClass)).

/*
(subclass TakingIll PathologicProcess)
*/
fof(a1056,axiom,s_subclass(s_TakingIll, s_PathologicProcess)).

/*
(forall (?A ?T)
 (exists (?D)
  (and (instance ?D Attribute)
       (=> (instance ?A Agent)
        (=> (and (instance ?T TakingIll) (experiencer ?T ?A))
         (and (instance ?D DiseaseOrSyndrome)
              (and (holdsDuring (BeginFn (WhenFn ?T))
                    (not (attribute ?A ?D)))
                   (holdsDuring (EndFn (WhenFn ?T))
                    (attribute ?A ?D)))))))))
*/
%% no translation to TPTP available.

/*
(instance ViralDisease SetOrClass)
*/
fof(a1057,axiom,s_instance(s_ViralDisease, s_SetOrClass)).

/*
(instance InfectiousDisease SetOrClass)
*/
fof(a1058,axiom,s_instance(s_InfectiousDisease, s_SetOrClass)).

/*
(subclass ViralDisease InfectiousDisease)
*/
fof(a1059,axiom,s_subclass(s_ViralDisease, s_InfectiousDisease)).

/*
(instance Diarrhea DiseaseOrSyndrome)
*/
fof(a1060,axiom,s_instance(s_Diarrhea, s_DiseaseOrSyndrome)).

/*
(instance Emphysema DiseaseOrSyndrome)
*/
fof(a1061,axiom,s_instance(s_Emphysema, s_DiseaseOrSyndrome)).

/*
(forall (?H)
 (exists (?L ?P)
  (and (and (instance ?P Process) (instance ?L Object))
       (=> (instance ?H Object)
        (=> (attribute ?H Emphysema)
         (and (instance ?L Lung)
              (and (part ?L ?H)
                   (and (instance ?P PathologicProcess)
                        (eventLocated ?P ?L)))))))))
*/
fof(a1062,axiom,! [H] : (? [L,P] : (((s_instance(P, s_Process) & s_instance(L, s_Object)) & (s_instance(H, s_Object) => (s_attribute(H, s_Emphysema) => (s_instance(L, s_Lung) & (s_part(L, H) & (s_instance(P, s_PathologicProcess) & s_eventLocated(P, L)))))))))).

/*
(instance Fever DiseaseOrSyndrome)
*/
fof(a1063,axiom,s_instance(s_Fever, s_DiseaseOrSyndrome)).

/*
(forall (?H)
 (exists (?N)
  (and (instance ?N RealNumber)
       (=> (and (instance ?H Human) (attribute ?H Fever))
        (and (measure ?H (MeasureFn ?N FahrenheitDegree))
             (greaterThan ?N 98.6))))))
*/
fof(a1064,axiom,! [H] : (? [N] : ((s_instance(N, s_RealNumber) & ((s_instance(H, s_Human) & s_attribute(H, s_Fever)) => (s_measure(H, s_MeasureFn(N, s_FahrenheitDegree)) & greater(N, 98.6))))))).

/*
(instance Goiter DiseaseOrSyndrome)
*/
fof(a1065,axiom,s_instance(s_Goiter, s_DiseaseOrSyndrome)).

/*
(forall (?H)
 (exists (?G ?P)
  (and (and (instance ?P Process) (instance ?G Object))
       (=> (instance ?H Object)
        (=> (attribute ?H Goiter)
         (and (instance ?G ThyroidGland)
              (and (part ?G ?H)
                   (and (instance ?P PathologicProcess)
                        (eventLocated ?P ?G)))))))))
*/
fof(a1066,axiom,! [H] : (? [G,P] : (((s_instance(P, s_Process) & s_instance(G, s_Object)) & (s_instance(H, s_Object) => (s_attribute(H, s_Goiter) => (s_instance(G, s_ThyroidGland) & (s_part(G, H) & (s_instance(P, s_PathologicProcess) & s_eventLocated(P, G)))))))))).

/*
(instance BacterialDisease SetOrClass)
*/
fof(a1067,axiom,s_instance(s_BacterialDisease, s_SetOrClass)).

/*
(instance Tuberculosis BacterialDisease)
*/
fof(a1068,axiom,s_instance(s_Tuberculosis, s_BacterialDisease)).

/*
(instance RecoveringFromIllness SetOrClass)
*/
fof(a1069,axiom,s_instance(s_RecoveringFromIllness, s_SetOrClass)).

/*
(subclass RecoveringFromIllness OrganismProcess)
*/
fof(a1070,axiom,s_subclass(s_RecoveringFromIllness, s_OrganismProcess)).

/*
(forall (?T ?A ?R)
 (exists (?D)
  (and (instance ?D Attribute)
       (=> (and (instance ?T Physical) (instance ?A Agent))
        (=>
         (and (instance ?R RecoveringFromIllness) (experiencer ?R ?A))
         (and (instance ?D DiseaseOrSyndrome)
              (and (holdsDuring (BeginFn (WhenFn ?T))
                    (attribute ?A ?D))
                   (holdsDuring (EndFn (WhenFn ?T))
                    (not (attribute ?A ?D))))))))))
*/
%% no translation to TPTP available.

/*
(instance Protozoa SetOrClass)
*/
fof(a1071,axiom,s_instance(s_Protozoa, s_SetOrClass)).

/*
(subclass Protozoa Microorganism)
*/
fof(a1072,axiom,s_subclass(s_Protozoa, s_Microorganism)).

/*
(instance parasite BinaryPredicate)
*/
fof(a1073,axiom,s_instance(s_parasite_m, s_BinaryPredicate)).

/*
(forall (?O2 ?O1)
 (=> (and (instance ?O1 Organism) (instance ?O2 Organism))
  (=> (parasite ?O1 ?O2) (inhabits ?O1 ?O2))))
*/
fof(a1074,axiom,! [O2,O1] : (((s_instance(O1, s_Organism) & s_instance(O2, s_Organism)) => (s_parasite(O1, O2) => s_inhabits(O1, O2))))).

/*
(forall (?O2 ?O1)
 (exists (?I)
  (and (instance ?I Process)
       (=> (and (instance ?O1 Organism) (instance ?O2 Organism))
        (=> (parasite ?O1 ?O2)
         (and (instance ?I Injuring)
              (and (agent ?I ?O1) (patient ?I ?O2))))))))
*/
fof(a1075,axiom,! [O2,O1] : (? [I] : ((s_instance(I, s_Process) & ((s_instance(O1, s_Organism) & s_instance(O2, s_Organism)) => (s_parasite(O1, O2) => (s_instance(I, s_Injuring) & (s_agent(I, O1) & s_patient(I, O2))))))))).

/*
(instance Cancer DiseaseOrSyndrome)
*/
fof(a1076,axiom,s_instance(s_Cancer, s_DiseaseOrSyndrome)).

/*
(forall (?PERSON)
 (exists (?TUMOR)
  (and (instance ?TUMOR Object)
       (=> (instance ?PERSON Object)
        (=> (attribute ?PERSON Cancer)
         (and (instance ?TUMOR Tumor) (part ?TUMOR ?PERSON)))))))
*/
fof(a1077,axiom,! [PERSON] : (? [TUMOR] : ((s_instance(TUMOR, s_Object) & (s_instance(PERSON, s_Object) => (s_attribute(PERSON, s_Cancer) => (s_instance(TUMOR, s_Tumor) & s_part(TUMOR, PERSON)))))))).

/*
(instance Neurosis SetOrClass)
*/
fof(a1078,axiom,s_instance(s_Neurosis, s_SetOrClass)).

/*
(subclass Neurosis PsychologicalDysfunction)
*/
fof(a1079,axiom,s_subclass(s_Neurosis, s_PsychologicalDysfunction)).

/*
(instance Psychosis SetOrClass)
*/
fof(a1080,axiom,s_instance(s_Psychosis, s_SetOrClass)).

/*
(subclass Psychosis PsychologicalDysfunction)
*/
fof(a1081,axiom,s_subclass(s_Psychosis, s_PsychologicalDysfunction)).

/*
(subclass Atrophy PathologicProcess)
*/
fof(a1082,axiom,s_subclass(s_Atrophy, s_PathologicProcess)).

/*
(instance Atrophy SetOrClass)
*/
fof(a1083,axiom,s_instance(s_Atrophy, s_SetOrClass)).

/*
(subclass Atrophy Decreasing)
*/
fof(a1084,axiom,s_subclass(s_Atrophy, s_Decreasing)).

/*
(forall (?A)
 (exists (?B)
  (and (instance ?B Agent)
       (=> (instance ?A Atrophy)
        (and (experiencer ?A ?B) (instance ?B BodyPart))))))
*/
fof(a1085,axiom,! [A] : (? [B] : ((s_instance(B, s_Agent) & (s_instance(A, s_Atrophy) => (s_experiencer(A, B) & s_instance(B, s_BodyPart))))))).

/*
(subclass Bloating Increasing)
*/
fof(a1086,axiom,s_subclass(s_Bloating, s_Increasing)).

/*
(instance Bloating SetOrClass)
*/
fof(a1087,axiom,s_instance(s_Bloating, s_SetOrClass)).

/*
(subclass Bloating PathologicProcess)
*/
fof(a1088,axiom,s_subclass(s_Bloating, s_PathologicProcess)).

/*
(forall (?B)
 (exists (?P ?S ?I ?G)
  (and (and (instance ?G Object) (instance ?I SelfConnectedObject)
            (instance ?S SelfConnectedObject) (instance ?P Agent))
       (=> (instance ?B Bloating)
        (and (experiencer ?B ?P)
             (and (instance ?G Gas)
                  (or (and (part ?I ?P)
                           (and (instance ?I Intestine)
                                (contains ?I ?G)))
                      (and (part ?S ?P)
                           (and (instance ?S Stomach)
                                (contains ?S ?G))))))))))
*/
fof(a1089,axiom,! [B] : (? [P,S,I,G] : (((s_instance(G, s_Object) & s_instance(I, s_SelfConnectedObject) & s_instance(S, s_SelfConnectedObject) & s_instance(P, s_Agent)) & (s_instance(B, s_Bloating) => (s_experiencer(B, P) & (s_instance(G, s_Gas) & ((s_part(I, P) & (s_instance(I, s_Intestine) & s_contains(I, G))) | (s_part(S, P) & (s_instance(S, s_Stomach) & s_contains(S, G))))))))))).

/*
(instance ConjugatedSubstance SetOrClass)
*/
fof(a1090,axiom,s_instance(s_ConjugatedSubstance, s_SetOrClass)).

/*
(subclass ConjugatedSubstance CompoundSubstance)
*/
fof(a1091,axiom,s_subclass(s_ConjugatedSubstance, s_CompoundSubstance)).

/*
(forall (?CS)
 (forall (?C1 ?C2 ?P)
  (exists (?g1307 ?g1308 ?g1309)
   (and (=> (instance ?CS ConjugatedSubstance)
         (and (instance ?g1307 CompoundSubstance)
              (and (instance ?g1308 CompoundSubstance)
                   (and (not (equal ?g1307 ?g1308))
                        (and (instance ?g1309 ChemicalSynthesis)
                             (and (resource ?g1309 ?g1307)
                                  (and
                                   (resource ?g1309 ?g1308)
                                   (result ?g1309 ?CS))))))))
        (=>
         (and (instance ?C1 CompoundSubstance)
              (and (instance ?C2 CompoundSubstance)
                   (and (not (equal ?C1 ?C2))
                        (and (instance ?P ChemicalSynthesis)
                             (and (resource ?P ?C1)
                                  (and
                                   (resource ?P ?C2)
                                   (result ?P ?CS)))))))
         (instance ?CS ConjugatedSubstance))))))
*/
fof(a1092,axiom,! [CS] : (! [C1,C2,P] : (? [G1307,G1308,G1309] : (((s_instance(CS, s_ConjugatedSubstance) => (s_instance(G1307, s_CompoundSubstance) & (s_instance(G1308, s_CompoundSubstance) & ((~ (G1307 = G1308)) & (s_instance(G1309, s_ChemicalSynthesis) & (s_resource(G1309, G1307) & (s_resource(G1309, G1308) & s_result(G1309, CS)))))))) & ((s_instance(C1, s_CompoundSubstance) & (s_instance(C2, s_CompoundSubstance) & ((~ (C1 = C2)) & (s_instance(P, s_ChemicalSynthesis) & (s_resource(P, C1) & (s_resource(P, C2) & s_result(P, CS))))))) => s_instance(CS, s_ConjugatedSubstance))))))).

/*
(instance conjugate BinaryPredicate)
*/
fof(a1093,axiom,s_instance(s_conjugate_m, s_BinaryPredicate)).

/*
(instance conjugate IrreflexiveRelation)
*/
fof(a1094,axiom,s_instance(s_conjugate_m, s_IrreflexiveRelation)).

/*
(instance conjugate SymmetricRelation)
*/
fof(a1095,axiom,s_instance(s_conjugate_m, s_SymmetricRelation)).

/*
(instance conjugate TransitiveRelation)
*/
fof(a1096,axiom,s_instance(s_conjugate_m, s_TransitiveRelation)).

/*
(instance conjugate PartialValuedRelation)
*/
fof(a1097,axiom,s_instance(s_conjugate_m, s_PartialValuedRelation)).

/*
(forall (?COMPOUND2 ?COMPOUND1)
 (exists (?NUMBER1 ?NUMBER2)
  (and (and (instance ?NUMBER2 PositiveInteger)
            (instance ?NUMBER1 PositiveInteger))
       (=>
        (and (instance ?COMPOUND1 CompoundSubstance)
             (instance ?COMPOUND2 CompoundSubstance))
        (=> (conjugate ?COMPOUND1 ?COMPOUND2)
         (and (protonNumber ?COMPOUND1 ?NUMBER1)
              (and (protonNumber ?COMPOUND2 ?NUMBER2)
                   (or (equal ?NUMBER1 (AdditionFn ?NUMBER2 1))
                       (equal ?NUMBER2 (AdditionFn ?NUMBER1 1))))))))))
*/
fof(a1098,axiom,! [COMPOUND2,COMPOUND1] : (? [NUMBER1,NUMBER2] : (((s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger)) & ((s_instance(COMPOUND1, s_CompoundSubstance) & s_instance(COMPOUND2, s_CompoundSubstance)) => (s_conjugate(COMPOUND1, COMPOUND2) => (s_protonNumber(COMPOUND1, NUMBER1) & (s_protonNumber(COMPOUND2, NUMBER2) & ((NUMBER1 = plus(NUMBER2, 1)) | (NUMBER2 = plus(NUMBER1, 1))))))))))).

/*
(instance Biting SetOrClass)
*/
fof(a1099,axiom,s_instance(s_Biting, s_SetOrClass)).

/*
(subclass Biting Grabbing)
*/
fof(a1100,axiom,s_subclass(s_Biting, s_Grabbing)).

/*
(forall (?ANIMAL ?BITE)
 (exists (?MOUTH)
  (and (instance ?MOUTH Object)
       (=> (instance ?ANIMAL Agent)
        (=> (and (instance ?BITE Biting) (agent ?BITE ?ANIMAL))
         (and (instance ?MOUTH Mouth)
              (and (part ?MOUTH ?ANIMAL)
                   (instrument ?BITE ?MOUTH))))))))
*/
fof(a1101,axiom,! [ANIMAL,BITE] : (? [MOUTH] : ((s_instance(MOUTH, s_Object) & (s_instance(ANIMAL, s_Agent) => ((s_instance(BITE, s_Biting) & s_agent(BITE, ANIMAL)) => (s_instance(MOUTH, s_Mouth) & (s_part(MOUTH, ANIMAL) & s_instrument(BITE, MOUTH))))))))).

/*
(instance Strangling SetOrClass)
*/
fof(a1102,axiom,s_instance(s_Strangling, s_SetOrClass)).

/*
(subclass Strangling Grabbing)
*/
fof(a1103,axiom,s_subclass(s_Strangling, s_Grabbing)).

/*
(forall (?S)
 (exists (?T)
  (and (instance ?T Entity)
       (=> (instance ?S Strangling)
        (and (patient ?S ?T) (instance ?T Throat))))))
*/
fof(a1104,axiom,! [S] : (? [T] : ((s_instance(T, s_Entity) & (s_instance(S, s_Strangling) => (s_patient(S, T) & s_instance(T, s_Throat))))))).

/*
(forall (?V ?A ?S)
 (=> (instance ?A Agent)
  (=>
   (and (instance ?S Strangling)
        (and (agent ?S ?A) (and (patient ?S ?V) (instance ?V Human))))
   (hasPurpose ?S
    (not (exists (?B) (and (instance ?B Breathing) (agent ?B ?V))))))))
*/
%% no translation to TPTP available.

/*
(instance Spitting SetOrClass)
*/
fof(a1105,axiom,s_instance(s_Spitting, s_SetOrClass)).

/*
(subclass Spitting Impelling)
*/
fof(a1106,axiom,s_subclass(s_Spitting, s_Impelling)).

/*
(forall (?ANIMAL ?SPIT)
 (exists (?MOUTH)
  (and (instance ?MOUTH Object)
       (=> (instance ?ANIMAL Agent)
        (=> (and (instance ?SPIT Spitting) (agent ?SPIT ?ANIMAL))
         (and (instance ?MOUTH Mouth)
              (and (part ?MOUTH ?ANIMAL) (origin ?SPIT ?MOUTH))))))))
*/
fof(a1107,axiom,! [ANIMAL,SPIT] : (? [MOUTH] : ((s_instance(MOUTH, s_Object) & (s_instance(ANIMAL, s_Agent) => ((s_instance(SPIT, s_Spitting) & s_agent(SPIT, ANIMAL)) => (s_instance(MOUTH, s_Mouth) & (s_part(MOUTH, ANIMAL) & s_origin(SPIT, MOUTH))))))))).

/*
(instance Punching SetOrClass)
*/
fof(a1108,axiom,s_instance(s_Punching, s_SetOrClass)).

/*
(subclass Punching Impelling)
*/
fof(a1109,axiom,s_subclass(s_Punching, s_Impelling)).

/*
(forall (?A ?P)
 (exists (?H)
  (and (instance ?H Object)
       (=> (instance ?A Agent)
        (=> (and (instance ?P Punching) (agent ?P ?A))
         (and (instance ?H Hand)
              (and (attribute ?H Fist)
                   (and (part ?H ?A) (instrument ?P ?H)))))))))
*/
fof(a1110,axiom,! [A,P] : (? [H] : ((s_instance(H, s_Object) & (s_instance(A, s_Agent) => ((s_instance(P, s_Punching) & s_agent(P, A)) => (s_instance(H, s_Hand) & (s_attribute(H, s_Fist) & (s_part(H, A) & s_instrument(P, H)))))))))).

/*
(instance Kicking SetOrClass)
*/
fof(a1111,axiom,s_instance(s_Kicking, s_SetOrClass)).

/*
(subclass Kicking Impelling)
*/
fof(a1112,axiom,s_subclass(s_Kicking, s_Impelling)).

/*
(forall (?ANIMAL ?KICK)
 (exists (?FOOT)
  (and (instance ?FOOT Object)
       (=> (instance ?ANIMAL Agent)
        (=> (and (instance ?KICK Kicking) (agent ?KICK ?ANIMAL))
         (and (instance ?FOOT Foot)
              (and (part ?FOOT ?ANIMAL) (instrument ?KICK ?FOOT))))))))
*/
fof(a1113,axiom,! [ANIMAL,KICK] : (? [FOOT] : ((s_instance(FOOT, s_Object) & (s_instance(ANIMAL, s_Agent) => ((s_instance(KICK, s_Kicking) & s_agent(KICK, ANIMAL)) => (s_instance(FOOT, s_Foot) & (s_part(FOOT, ANIMAL) & s_instrument(KICK, FOOT))))))))).

/*
(instance Mailing SetOrClass)
*/
fof(a1114,axiom,s_instance(s_Mailing, s_SetOrClass)).

/*
(subclass Mailing Transfer)
*/
fof(a1115,axiom,s_subclass(s_Mailing, s_Transfer)).

/*
(instance Messaging SetOrClass)
*/
fof(a1116,axiom,s_instance(s_Messaging, s_SetOrClass)).

/*
(subclass Messaging Transfer)
*/
fof(a1117,axiom,s_subclass(s_Messaging, s_Transfer)).

/*
(forall (?MESSAGING)
 (exists (?M)
  (and (instance ?M Entity)
       (=> (instance ?MESSAGING Messaging)
        (and (instance ?M Message) (patient ?MESSAGING ?M))))))
*/
fof(a1118,axiom,! [MESSAGING] : (? [M] : ((s_instance(M, s_Entity) & (s_instance(MESSAGING, s_Messaging) => (s_instance(M, s_Message) & s_patient(MESSAGING, M))))))).

/*
(instance neighbor BinaryPredicate)
*/
fof(a1119,axiom,s_instance(s_neighbor_m, s_BinaryPredicate)).

/*
(instance neighbor SymmetricRelation)
*/
fof(a1120,axiom,s_instance(s_neighbor_m, s_SymmetricRelation)).

/*
(instance neighbor IrreflexiveRelation)
*/
fof(a1121,axiom,s_instance(s_neighbor_m, s_IrreflexiveRelation)).

/*
(forall (?PERSON2 ?PERSON1)
 (exists (?HOME1 ?HOME2)
  (and (and (instance ?HOME2 PermanentResidence)
            (instance ?HOME1 PermanentResidence))
       (=> (and (instance ?PERSON1 Human) (instance ?PERSON2 Human))
        (=> (neighbor ?PERSON1 ?PERSON2)
         (and (home ?PERSON1 ?HOME1)
              (and (home ?PERSON2 ?HOME2)
                   (and (not (equal ?HOME1 ?HOME2))
                        (orientation ?HOME1 ?HOME2 Near)))))))))
*/
fof(a1122,axiom,! [PERSON2,PERSON1] : (? [HOME1,HOME2] : (((s_instance(HOME2, s_PermanentResidence) & s_instance(HOME1, s_PermanentResidence)) & ((s_instance(PERSON1, s_Human) & s_instance(PERSON2, s_Human)) => (s_neighbor(PERSON1, PERSON2) => (s_home(PERSON1, HOME1) & (s_home(PERSON2, HOME2) & ((~ (HOME1 = HOME2)) & s_orientation(HOME1, HOME2, s_Near)))))))))).

/*
(instance capacity BinaryPredicate)
*/
fof(a1123,axiom,s_instance(s_capacity_m, s_BinaryPredicate)).

/*
(forall (?OBJ2 ?MEAS ?OBJ1)
 (=>
  (and (instance ?OBJ1 Object) (instance ?MEAS ConstantQuantity)
       (instance ?OBJ2 SelfConnectedObject))
  (=> (and (measure ?OBJ1 ?MEAS) (contains ?OBJ2 ?OBJ1))
   (capacity ?OBJ2 ?MEAS))))
*/
fof(a1124,axiom,! [OBJ2,MEAS,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(MEAS, s_ConstantQuantity) & s_instance(OBJ2, s_SelfConnectedObject)) => ((s_measure(OBJ1, MEAS) & s_contains(OBJ2, OBJ1)) => s_capacity(OBJ2, MEAS))))).

/*
(instance humanCapacity BinaryPredicate)
*/
fof(a1125,axiom,s_instance(s_humanCapacity_m, s_BinaryPredicate)).

/*
(instance humanCapacity SingleValuedRelation)
*/
fof(a1126,axiom,s_instance(s_humanCapacity_m, s_SingleValuedRelation)).

/*
(instance LastFn UnaryFunction)
*/
fof(a1127,axiom,s_instance(s_LastFn_m, s_UnaryFunction)).

/*
(range LastFn Entity)
*/
fof(a1128,axiom,s_range(s_LastFn_m, s_Entity)).

/*
(forall (?ITEM ?LIST)
 (forall (?NUMBER)
  (exists (?g1325)
   (and (instance ?g1325 PositiveInteger)
        (=> (instance ?NUMBER PositiveInteger)
         (=> (and (instance ?LIST List) (instance ?ITEM Entity))
          (and (=> (equal (LastFn ?LIST) ?ITEM)
                (and (equal (ListLengthFn ?LIST) ?g1325)
                     (equal (ListOrderFn ?LIST ?g1325) ?ITEM)))
               (=>
                (and (equal (ListLengthFn ?LIST) ?NUMBER)
                     (equal (ListOrderFn ?LIST ?NUMBER) ?ITEM))
                (equal (LastFn ?LIST) ?ITEM)))))))))
*/
fof(a1129,axiom,! [ITEM,LIST] : (! [NUMBER] : (? [G1325] : ((s_instance(G1325, s_PositiveInteger) & (s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST, s_List) & s_instance(ITEM, s_Entity)) => (((s_LastFn(LIST) = ITEM) => ((s_ListLengthFn(LIST) = G1325) & (s_ListOrderFn(LIST, G1325) = ITEM))) & (((s_ListLengthFn(LIST) = NUMBER) & (s_ListOrderFn(LIST, NUMBER) = ITEM)) => (s_LastFn(LIST) = ITEM)))))))))).

/*
(instance FirstFn UnaryFunction)
*/
fof(a1130,axiom,s_instance(s_FirstFn_m, s_UnaryFunction)).

/*
(range FirstFn Entity)
*/
fof(a1131,axiom,s_range(s_FirstFn_m, s_Entity)).

/*
(forall (?LIST)
 (=> (and (instance ?LIST List) (not (equal ?LIST NullList)))
  (equal (FirstFn ?LIST) (ListOrderFn ?LIST 1))))
*/
fof(a1132,axiom,! [LIST] : (((s_instance(LIST, s_List) & (~ (LIST = s_NullList_m))) => (s_FirstFn(LIST) = s_ListOrderFn(LIST, 1))))).

/*
(instance StreetAddressFn QuaternaryFunction)
*/
fof(a1133,axiom,s_instance(s_StreetAddressFn_m, s_QuaternaryFunction)).

/*
(range StreetAddressFn Agent)
*/
fof(a1134,axiom,s_range(s_StreetAddressFn_m, s_Agent)).

/*
(forall (?AGENT ?PLACE ?ROAD ?COUNTRY ?CITY)
 (=>
  (and (instance ?CITY City) (instance ?COUNTRY Nation)
       (instance ?ROAD Roadway) (instance ?PLACE PostalPlace)
       (instance ?AGENT Agent))
  (=> (equal (StreetAddressFn ?PLACE ?ROAD ?CITY ?COUNTRY) ?AGENT)
   (postContactSite ?PLACE ?AGENT))))
*/
fof(a1135,axiom,! [AGENT,PLACE,ROAD,COUNTRY,CITY] : (((s_instance(CITY, s_City) & s_instance(COUNTRY, s_Nation) & s_instance(ROAD, s_Roadway) & s_instance(PLACE, s_PostalPlace) & s_instance(AGENT, s_Agent)) => ((s_StreetAddressFn(PLACE, ROAD, CITY, COUNTRY) = AGENT) => s_postContactSite(PLACE, AGENT))))).

/*
(forall (?AGENT ?PLACE ?ROAD ?COUNTRY ?CITY)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=>
        (and (instance ?CITY City) (instance ?COUNTRY Nation)
             (instance ?ROAD Roadway)
             (instance ?PLACE StationaryArtifact)
             (instance ?AGENT Entity))
        (=>
         (equal (StreetAddressFn ?PLACE ?ROAD ?CITY ?COUNTRY) ?AGENT)
         (and (instance ?BUILDING Building)
              (part ?PLACE ?BUILDING)))))))
*/
fof(a1136,axiom,! [AGENT,PLACE,ROAD,COUNTRY,CITY] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & ((s_instance(CITY, s_City) & s_instance(COUNTRY, s_Nation) & s_instance(ROAD, s_Roadway) & s_instance(PLACE, s_StationaryArtifact) & s_instance(AGENT, s_Entity)) => ((s_StreetAddressFn(PLACE, ROAD, CITY, COUNTRY) = AGENT) => (s_instance(BUILDING, s_Building) & s_part(PLACE, BUILDING)))))))).

/*
(instance ArtStudio SetOrClass)
*/
fof(a1137,axiom,s_instance(s_ArtStudio, s_SetOrClass)).

/*
(subclass ArtStudio Workshop)
*/
fof(a1138,axiom,s_subclass(s_ArtStudio, s_Workshop)).

/*
(forall (?STUDIO)
 (=> (instance ?STUDIO ArtStudio)
  (hasPurpose ?STUDIO
   (exists (?MAKE ?WORK)
    (and (instance ?MAKE Making)
         (and (result ?MAKE ?WORK) (instance ?WORK ArtWork)))))))
*/
%% no translation to TPTP available.

/*
(instance Mine SetOrClass)
*/
fof(a1139,axiom,s_instance(s_Mine, s_SetOrClass)).

/*
(subclass Mine StationaryArtifact)
*/
fof(a1140,axiom,s_subclass(s_Mine, s_StationaryArtifact)).

/*
(forall (?MINE)
 (=> (instance ?MINE Mine)
  (hasPurpose ?MINE
   (exists (?REMOVE ?MINERAL)
    (and (instance ?REMOVE Removing)
         (and (patient ?REMOVE ?MINERAL)
              (and (instance ?MINERAL Mineral)
                   (origin ?REMOVE ?MINE))))))))
*/
%% no translation to TPTP available.

/*
(subclass MobileResidence Artifact)
*/
fof(a1141,axiom,s_subclass(s_MobileResidence, s_Artifact)).

/*
(disjoint MobileResidence Residence)
*/
fof(a1142,axiom,s_disjoint(s_MobileResidence, s_Residence)).

/*
(instance Prison SetOrClass)
*/
fof(a1143,axiom,s_instance(s_Prison, s_SetOrClass)).

/*
(subclass Prison StationaryArtifact)
*/
fof(a1144,axiom,s_subclass(s_Prison, s_StationaryArtifact)).

/*
(forall (?P)
 (=> (instance ?P Prison)
  (hasPurpose ?P
   (exists (?C ?H ?G)
    (and (instance ?C Confining)
         (and (eventLocated ?C ?P)
              (and (patient ?C ?H)
                   (and (instance ?H Human)
                        (and (agent ?C ?G)
                             (instance ?G Government))))))))))
*/
%% no translation to TPTP available.

/*
(instance detainee CaseRole)
*/
fof(a1145,axiom,s_instance(s_detainee_m, s_CaseRole)).

/*
(subrelation detainee patient)
*/
fof(a1146,axiom,s_subrelation(s_detainee_m, s_patient_m)).

/*
(instance targetInAttack BinaryPredicate)
*/
fof(a1147,axiom,s_instance(s_targetInAttack_m, s_BinaryPredicate)).

/*
(instance targetInAttack CaseRole)
*/
fof(a1148,axiom,s_instance(s_targetInAttack_m, s_CaseRole)).

/*
(subrelation targetInAttack patient)
*/
fof(a1149,axiom,s_subrelation(s_targetInAttack_m, s_patient_m)).

/*
(instance VotingPoll SetOrClass)
*/
fof(a1150,axiom,s_instance(s_VotingPoll, s_SetOrClass)).

/*
(subclass VotingPoll StationaryArtifact)
*/
fof(a1151,axiom,s_subclass(s_VotingPoll, s_StationaryArtifact)).

/*
(forall (?P)
 (exists (?V)
  (and (instance ?V Process)
       (=> (instance ?P VotingPoll)
        (and (instance ?V Voting) (eventLocated ?V ?P))))))
*/
fof(a1152,axiom,! [P] : (? [V] : ((s_instance(V, s_Process) & (s_instance(P, s_VotingPoll) => (s_instance(V, s_Voting) & s_eventLocated(V, P))))))).

/*
(instance Camp SetOrClass)
*/
fof(a1153,axiom,s_instance(s_Camp, s_SetOrClass)).

/*
(subclass Camp MobileResidence)
*/
fof(a1154,axiom,s_subclass(s_Camp, s_MobileResidence)).

/*
(forall (?CAMP)
 (exists (?TENT)
  (and (instance ?TENT Object)
       (=> (instance ?CAMP Camp)
        (and (instance ?TENT Tent) (part ?TENT ?CAMP))))))
*/
fof(a1155,axiom,! [CAMP] : (? [TENT] : ((s_instance(TENT, s_Object) & (s_instance(CAMP, s_Camp) => (s_instance(TENT, s_Tent) & s_part(TENT, CAMP))))))).

/*
(instance Tent SetOrClass)
*/
fof(a1156,axiom,s_instance(s_Tent, s_SetOrClass)).

/*
(subclass Tent MobileResidence)
*/
fof(a1157,axiom,s_subclass(s_Tent, s_MobileResidence)).

/*
(forall (?TENT)
 (exists (?FABRIC)
  (and (instance ?FABRIC Object)
       (=> (instance ?TENT Tent)
        (and (instance ?FABRIC Fabric) (part ?FABRIC ?TENT))))))
*/
fof(a1158,axiom,! [TENT] : (? [FABRIC] : ((s_instance(FABRIC, s_Object) & (s_instance(TENT, s_Tent) => (s_instance(FABRIC, s_Fabric) & s_part(FABRIC, TENT))))))).

/*
(instance Monument SetOrClass)
*/
fof(a1159,axiom,s_instance(s_Monument, s_SetOrClass)).

/*
(subclass Monument StationaryArtifact)
*/
fof(a1160,axiom,s_subclass(s_Monument, s_StationaryArtifact)).

/*
(forall (?M)
 (=> (instance ?M Monument)
  (hasPurpose ?M
   (exists (?R) (and (instance ?R Remembering) (instrument ?R ?M))))))
*/
%% no translation to TPTP available.

/*
(instance Tomb SetOrClass)
*/
fof(a1161,axiom,s_instance(s_Tomb, s_SetOrClass)).

/*
(subclass Tomb StationaryArtifact)
*/
fof(a1162,axiom,s_subclass(s_Tomb, s_StationaryArtifact)).

/*
(forall (?T)
 (=> (instance ?T Tomb)
  (hasPurpose ?T
   (exists (?P) (and (attribute ?P Dead) (contains ?T ?P))))))
*/
%% no translation to TPTP available.

/*
(instance Workshop SetOrClass)
*/
fof(a1163,axiom,s_instance(s_Workshop, s_SetOrClass)).

/*
(subclass Workshop StationaryArtifact)
*/
fof(a1164,axiom,s_subclass(s_Workshop, s_StationaryArtifact)).

/*
(forall (?W ?S)
 (=> (instance ?W Entity)
  (=> (instance ?S Workshop)
   (hasPurpose ?S
    (exists (?M)
     (and (instance ?M Making)
          (and (result ?M ?W) (instance ?W Artifact))))))))
*/
%% no translation to TPTP available.

/*
(instance ApartmentUnit SetOrClass)
*/
fof(a1165,axiom,s_instance(s_ApartmentUnit, s_SetOrClass)).

/*
(subclass ApartmentUnit SingleFamilyResidence)
*/
fof(a1166,axiom,s_subclass(s_ApartmentUnit, s_SingleFamilyResidence)).

/*
(forall (?UNIT ?PERSON)
 (=> (instance ?PERSON Human)
  (=> (and (instance ?UNIT ApartmentUnit) (home ?PERSON ?UNIT))
   (not (possesses ?PERSON ?UNIT)))))
*/
fof(a1167,axiom,! [UNIT,PERSON] : ((s_instance(PERSON, s_Human) => ((s_instance(UNIT, s_ApartmentUnit) & s_home(PERSON, UNIT)) => (~ s_possesses(PERSON, UNIT)))))).

/*
(forall (?UNIT)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?UNIT ApartmentUnit)
        (and (instance ?BUILDING ApartmentBuilding)
             (part ?UNIT ?BUILDING))))))
*/
fof(a1168,axiom,! [UNIT] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(UNIT, s_ApartmentUnit) => (s_instance(BUILDING, s_ApartmentBuilding) & s_part(UNIT, BUILDING))))))).

/*
(instance landlord BinaryPredicate)
*/
fof(a1169,axiom,s_instance(s_landlord_m, s_BinaryPredicate)).

/*
(forall (?U ?L)
 (exists (?R ?P)
  (and (and (instance ?P Agent) (instance ?R Process))
       (=> (and (instance ?L Agent) (instance ?U PermanentResidence))
        (=> (landlord ?L ?U)
         (and (possesses ?L ?U)
              (and (tenant ?P ?U)
                   (and (agent ?R ?P)
                        (and (instance ?R Renting)
                             (patient ?R ?U))))))))))
*/
fof(a1170,axiom,! [U,L] : (? [R,P] : (((s_instance(P, s_Agent) & s_instance(R, s_Process)) & ((s_instance(L, s_Agent) & s_instance(U, s_PermanentResidence)) => (s_landlord(L, U) => (s_possesses(L, U) & (s_tenant(P, U) & (s_agent(R, P) & (s_instance(R, s_Renting) & s_patient(R, U))))))))))).

/*
(instance tenant BinaryPredicate)
*/
fof(a1171,axiom,s_instance(s_tenant_m, s_BinaryPredicate)).

/*
(forall (?U ?P)
 (exists (?L ?R)
  (and (and (instance ?R Process) (instance ?L Agent))
       (=> (and (instance ?P Agent) (instance ?U PermanentResidence))
        (=> (tenant ?P ?U)
         (and (instance ?R Renting)
              (and (landlord ?L ?U)
                   (and (agent ?R ?P)
                        (and (possesses ?L ?U) (patient ?R ?U))))))))))
*/
fof(a1172,axiom,! [U,P] : (? [L,R] : (((s_instance(R, s_Process) & s_instance(L, s_Agent)) & ((s_instance(P, s_Agent) & s_instance(U, s_PermanentResidence)) => (s_tenant(P, U) => (s_instance(R, s_Renting) & (s_landlord(L, U) & (s_agent(R, P) & (s_possesses(L, U) & s_patient(R, U))))))))))).

/*
(instance CondominiumUnit SetOrClass)
*/
fof(a1173,axiom,s_instance(s_CondominiumUnit, s_SetOrClass)).

/*
(subclass CondominiumUnit SingleFamilyResidence)
*/
fof(a1174,axiom,s_subclass(s_CondominiumUnit, s_SingleFamilyResidence)).

/*
(forall (?UNIT ?PERSON)
 (=> (instance ?PERSON Human)
  (=>
   (and (instance ?UNIT SingleFamilyResidence)
        (and (home ?PERSON ?UNIT)
             (and (possesses ?PERSON ?UNIT)
                  (not (instance ?UNIT Building)))))
   (instance ?UNIT CondominiumUnit))))
*/
fof(a1175,axiom,! [UNIT,PERSON] : ((s_instance(PERSON, s_Human) => ((s_instance(UNIT, s_SingleFamilyResidence) & (s_home(PERSON, UNIT) & (s_possesses(PERSON, UNIT) & (~ s_instance(UNIT, s_Building))))) => s_instance(UNIT, s_CondominiumUnit))))).

/*
(forall (?UNIT)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?UNIT CondominiumUnit)
        (and (instance ?BUILDING CondominiumBuilding)
             (part ?UNIT ?BUILDING))))))
*/
fof(a1176,axiom,! [UNIT] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(UNIT, s_CondominiumUnit) => (s_instance(BUILDING, s_CondominiumBuilding) & s_part(UNIT, BUILDING))))))).

/*
(instance ApartmentBuilding SetOrClass)
*/
fof(a1177,axiom,s_instance(s_ApartmentBuilding, s_SetOrClass)).

/*
(subclass ApartmentBuilding ResidentialBuilding)
*/
fof(a1178,axiom,s_subclass(s_ApartmentBuilding, s_ResidentialBuilding)).

/*
(disjoint ApartmentBuilding SingleFamilyResidence)
*/
fof(a1179,axiom,s_disjoint(s_ApartmentBuilding, s_SingleFamilyResidence)).

/*
(forall (?BUILDING)
 (exists (?UNIT1 ?UNIT2)
  (and (and (instance ?UNIT2 Object) (instance ?UNIT1 Object))
       (=> (instance ?BUILDING ApartmentBuilding)
        (and (instance ?UNIT1 ApartmentUnit)
             (and (instance ?UNIT2 ApartmentUnit)
                  (and (part ?UNIT1 ?BUILDING)
                       (and (part ?UNIT2 ?BUILDING)
                            (not (equal ?UNIT1 ?UNIT2))))))))))
*/
fof(a1180,axiom,! [BUILDING] : (? [UNIT1,UNIT2] : (((s_instance(UNIT2, s_Object) & s_instance(UNIT1, s_Object)) & (s_instance(BUILDING, s_ApartmentBuilding) => (s_instance(UNIT1, s_ApartmentUnit) & (s_instance(UNIT2, s_ApartmentUnit) & (s_part(UNIT1, BUILDING) & (s_part(UNIT2, BUILDING) & (~ (UNIT1 = UNIT2))))))))))).

/*
(instance CondominiumBuilding SetOrClass)
*/
fof(a1181,axiom,s_instance(s_CondominiumBuilding, s_SetOrClass)).

/*
(subclass CondominiumBuilding ResidentialBuilding)
*/
fof(a1182,axiom,s_subclass(s_CondominiumBuilding, s_ResidentialBuilding)).

/*
(disjoint CondominiumBuilding SingleFamilyResidence)
*/
fof(a1183,axiom,s_disjoint(s_CondominiumBuilding, s_SingleFamilyResidence)).

/*
(forall (?BUILDING)
 (exists (?UNIT1 ?UNIT2)
  (and (and (instance ?UNIT2 Object) (instance ?UNIT1 Object))
       (=> (instance ?BUILDING CondominiumBuilding)
        (and (instance ?UNIT1 CondominiumUnit)
             (and (instance ?UNIT2 CondominiumUnit)
                  (and (part ?UNIT1 ?BUILDING)
                       (and (part ?UNIT2 ?BUILDING)
                            (not (equal ?UNIT1 ?UNIT2))))))))))
*/
fof(a1184,axiom,! [BUILDING] : (? [UNIT1,UNIT2] : (((s_instance(UNIT2, s_Object) & s_instance(UNIT1, s_Object)) & (s_instance(BUILDING, s_CondominiumBuilding) => (s_instance(UNIT1, s_CondominiumUnit) & (s_instance(UNIT2, s_CondominiumUnit) & (s_part(UNIT1, BUILDING) & (s_part(UNIT2, BUILDING) & (~ (UNIT1 = UNIT2))))))))))).

/*
(subclass Dormitory ResidentialBuilding)
*/
fof(a1185,axiom,s_subclass(s_Dormitory, s_ResidentialBuilding)).

/*
(instance Dormitory SetOrClass)
*/
fof(a1186,axiom,s_instance(s_Dormitory, s_SetOrClass)).

/*
(subclass Dormitory TemporaryResidence)
*/
fof(a1187,axiom,s_subclass(s_Dormitory, s_TemporaryResidence)).

/*
(disjoint Dormitory SingleFamilyResidence)
*/
fof(a1188,axiom,s_disjoint(s_Dormitory, s_SingleFamilyResidence)).

/*
(forall (?D)
 (exists (?S)
  (and (instance ?S Agent)
       (=> (instance ?D Dormitory)
        (and (instance ?S School) (possesses ?S ?D))))))
*/
fof(a1189,axiom,! [D] : (? [S] : ((s_instance(S, s_Agent) & (s_instance(D, s_Dormitory) => (s_instance(S, s_School) & s_possesses(S, D))))))).

/*
(instance AnimalResidence SetOrClass)
*/
fof(a1190,axiom,s_instance(s_AnimalResidence, s_SetOrClass)).

/*
(subclass AnimalResidence Artifact)
*/
fof(a1191,axiom,s_subclass(s_AnimalResidence, s_Artifact)).

/*
(forall (?RESIDENCE)
 (=> (instance ?RESIDENCE AnimalResidence)
  (hasPurpose ?RESIDENCE
   (exists (?ANIMAL)
    (and (instance ?ANIMAL Animal)
         (and (not (instance ?ANIMAL Human))
              (inhabits ?ANIMAL ?RESIDENCE)))))))
*/
%% no translation to TPTP available.

/*
(subclass SportsFacility StationaryArtifact)
*/
fof(a1192,axiom,s_subclass(s_SportsFacility, s_StationaryArtifact)).

/*
(forall (?G)
 (=> (instance ?G SportsFacility)
  (hasPurpose ?G
   (exists (?S) (and (instance ?S Sport) (eventLocated ?S ?G))))))
*/
%% no translation to TPTP available.

/*
(instance SportsLeague SetOrClass)
*/
fof(a1193,axiom,s_instance(s_SportsLeague, s_SetOrClass)).

/*
(subclass SportsLeague Organization)
*/
fof(a1194,axiom,s_subclass(s_SportsLeague, s_Organization)).

/*
(forall (?L ?M)
 (=> (instance ?M Object)
  (=> (and (instance ?L SportsLeague) (member ?M ?L))
   (instance ?M SportsTeam))))
*/
fof(a1195,axiom,! [L,M] : ((s_instance(M, s_Object) => ((s_instance(L, s_SportsLeague) & s_member(M, L)) => s_instance(M, s_SportsTeam))))).

/*
(subclass PlaceOfCommerce StationaryArtifact)
*/
fof(a1196,axiom,s_subclass(s_PlaceOfCommerce, s_StationaryArtifact)).

/*
(partition3 PlaceOfCommerce CommercialBuilding CommercialUnit)
*/
fof(a1197,axiom,s_partition3(s_PlaceOfCommerce, s_CommercialBuilding, s_CommercialUnit)).

/*
(forall (?OFFICE)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?OFFICE PlaceOfCommerce)
        (or (instance ?OFFICE CommercialBuilding)
            (and (instance ?BUILDING CommercialBuilding)
                 (part ?OFFICE ?BUILDING)))))))
*/
fof(a1198,axiom,! [OFFICE] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(OFFICE, s_PlaceOfCommerce) => (s_instance(OFFICE, s_CommercialBuilding) | (s_instance(BUILDING, s_CommercialBuilding) & s_part(OFFICE, BUILDING)))))))).

/*
(subclass CommercialBuilding Building)
*/
fof(a1199,axiom,s_subclass(s_CommercialBuilding, s_Building)).

/*
(subclass CommercialBuilding PlaceOfCommerce)
*/
fof(a1200,axiom,s_subclass(s_CommercialBuilding, s_PlaceOfCommerce)).

/*
(instance Warehouse SetOrClass)
*/
fof(a1201,axiom,s_instance(s_Warehouse, s_SetOrClass)).

/*
(instance CommercialBuilding SetOrClass)
*/
fof(a1202,axiom,s_instance(s_CommercialBuilding, s_SetOrClass)).

/*
(subclass Warehouse CommercialBuilding)
*/
fof(a1203,axiom,s_subclass(s_Warehouse, s_CommercialBuilding)).

/*
(forall (?B)
 (=> (instance ?B Warehouse)
  (hasPurpose ?B
   (exists (?K ?P)
    (and (instance ?K Keeping)
         (and (patient ?K ?P)
              (and (instance ?P Product) (eventLocated ?K ?B))))))))
*/
%% no translation to TPTP available.

/*
(instance CommercialUnit SetOrClass)
*/
fof(a1204,axiom,s_instance(s_CommercialUnit, s_SetOrClass)).

/*
(subclass CommercialUnit PlaceOfCommerce)
*/
fof(a1205,axiom,s_subclass(s_CommercialUnit, s_PlaceOfCommerce)).

/*
(forall (?UNIT ?ORG)
 (forall (?OTHER)
  (=> (instance ?OTHER Physical)
   (=>
    (and (instance ?UNIT CommercialUnit)
         (and (instance ?ORG Organization) (located ?ORG ?UNIT)))
    (not (and (instance ?OTHER Organization)
              (and (located ?OTHER ?UNIT)
                   (not (equal ?OTHER ?ORG)))))))))
*/
fof(a1206,axiom,! [UNIT,ORG] : (! [OTHER] : ((s_instance(OTHER, s_Physical) => ((s_instance(UNIT, s_CommercialUnit) & (s_instance(ORG, s_Organization) & s_located(ORG, UNIT))) => (~ (s_instance(OTHER, s_Organization) & (s_located(OTHER, UNIT) & (~ (OTHER = ORG)))))))))).

/*
(instance Store SetOrClass)
*/
fof(a1207,axiom,s_instance(s_Store, s_SetOrClass)).

/*
(subclass Store Building)
*/
fof(a1208,axiom,s_subclass(s_Store, s_Building)).

/*
(forall (?X)
 (=> (instance ?X Store)
  (hasPurpose ?X
   (exists (?EV)
    (and (instance ?EV FinancialTransaction) (eventLocated ?EV ?X))))))
*/
%% no translation to TPTP available.

/*
(instance FarmBuilding SetOrClass)
*/
fof(a1209,axiom,s_instance(s_FarmBuilding, s_SetOrClass)).

/*
(subclass FarmBuilding Building)
*/
fof(a1210,axiom,s_subclass(s_FarmBuilding, s_Building)).

/*
(disjoint FarmBuilding ResidentialBuilding)
*/
fof(a1211,axiom,s_disjoint(s_FarmBuilding, s_ResidentialBuilding)).

/*
(forall (?B)
 (exists (?F)
  (and (instance ?F Object)
       (=> (instance ?B FarmBuilding)
        (and (instance ?F Farm) (located ?B ?F))))))
*/
fof(a1212,axiom,! [B] : (? [F] : ((s_instance(F, s_Object) & (s_instance(B, s_FarmBuilding) => (s_instance(F, s_Farm) & s_located(B, F))))))).

/*
(instance Agency SetOrClass)
*/
fof(a1213,axiom,s_instance(s_Agency, s_SetOrClass)).

/*
(subclass Agency Business)
*/
fof(a1214,axiom,s_subclass(s_Agency, s_Business)).

/*
(forall (?A ?C)
 (=> (instance ?C CognitiveAgent)
  (=> (and (instance ?A Agency) (customer ?C ?A))
   (instance ?C CommercialAgent))))
*/
fof(a1215,axiom,! [A,C] : ((s_instance(C, s_CognitiveAgent) => ((s_instance(A, s_Agency) & s_customer(C, A)) => s_instance(C, s_CommercialAgent))))).

/*
(instance EntertainmentCompany SetOrClass)
*/
fof(a1216,axiom,s_instance(s_EntertainmentCompany, s_SetOrClass)).

/*
(subclass EntertainmentCompany Business)
*/
fof(a1217,axiom,s_subclass(s_EntertainmentCompany, s_Business)).

/*
(forall (?C)
 (exists (?P)
  (and (instance ?P Process)
       (=> (instance ?C EntertainmentCompany)
        (and (instance ?P CommercialService)
             (and (agent ?P ?C) (instance ?P Performance)))))))
*/
fof(a1218,axiom,! [C] : (? [P] : ((s_instance(P, s_Process) & (s_instance(C, s_EntertainmentCompany) => (s_instance(P, s_CommercialService) & (s_agent(P, C) & s_instance(P, s_Performance)))))))).

/*
(subclass FinancialCompany Business)
*/
fof(a1219,axiom,s_subclass(s_FinancialCompany, s_Business)).

/*
(instance SavingsAndLoan SetOrClass)
*/
fof(a1220,axiom,s_instance(s_SavingsAndLoan, s_SetOrClass)).

/*
(instance FinancialCompany SetOrClass)
*/
fof(a1221,axiom,s_instance(s_FinancialCompany, s_SetOrClass)).

/*
(subclass SavingsAndLoan FinancialCompany)
*/
fof(a1222,axiom,s_subclass(s_SavingsAndLoan, s_FinancialCompany)).

/*
(instance insured BinaryPredicate)
*/
fof(a1223,axiom,s_instance(s_insured_m, s_BinaryPredicate)).

/*
(instance insured AsymmetricRelation)
*/
fof(a1224,axiom,s_instance(s_insured_m, s_AsymmetricRelation)).

/*
(forall (?ORG ?PROP)
 (=> (and (instance ?PROP Proposition) (instance ?ORG Organization))
  (=> (insured ?PROP ?ORG) (property ?PROP Contract))))
*/
fof(a1225,axiom,! [ORG,PROP] : (((s_instance(PROP, s_Proposition) & s_instance(ORG, s_Organization)) => (s_insured(PROP, ORG) => s_property(PROP, s_Contract))))).

/*
(instance InsuranceCompany SetOrClass)
*/
fof(a1226,axiom,s_instance(s_InsuranceCompany, s_SetOrClass)).

/*
(subclass InsuranceCompany Business)
*/
fof(a1227,axiom,s_subclass(s_InsuranceCompany, s_Business)).

/*
(forall (?I)
 (exists (?C)
  (and (instance ?C Proposition)
       (=> (instance ?I InsuranceCompany) (insured ?C ?I)))))
*/
fof(a1228,axiom,! [I] : (? [C] : ((s_instance(C, s_Proposition) & (s_instance(I, s_InsuranceCompany) => s_insured(C, I)))))).

/*
(instance TransportationCompany SetOrClass)
*/
fof(a1229,axiom,s_instance(s_TransportationCompany, s_SetOrClass)).

/*
(subclass TransportationCompany Business)
*/
fof(a1230,axiom,s_subclass(s_TransportationCompany, s_Business)).

/*
(forall (?C)
 (exists (?S)
  (and (instance ?S Process)
       (=> (instance ?C TransportationCompany)
        (and (instance ?S CommercialService)
             (and (agent ?S ?C) (instance ?S Transportation)))))))
*/
fof(a1231,axiom,! [C] : (? [S] : ((s_instance(S, s_Process) & (s_instance(C, s_TransportationCompany) => (s_instance(S, s_CommercialService) & (s_agent(S, C) & s_instance(S, s_Transportation)))))))).

/*
(subclass FinancialService CommercialService)
*/
fof(a1232,axiom,s_subclass(s_FinancialService, s_CommercialService)).

/*
(forall (?S)
 (exists (?O)
  (and (instance ?O Agent)
       (=> (instance ?S FinancialService)
        (and (instance ?O FinancialCompany) (agent ?S ?O))))))
*/
fof(a1233,axiom,! [S] : (? [O] : ((s_instance(O, s_Agent) & (s_instance(S, s_FinancialService) => (s_instance(O, s_FinancialCompany) & s_agent(S, O))))))).

/*
(instance loss AsymmetricRelation)
*/
fof(a1234,axiom,s_instance(s_loss_m, s_AsymmetricRelation)).

/*
(subclass Financing Funding)
*/
fof(a1235,axiom,s_subclass(s_Financing, s_Funding)).

/*
(instance Financing SetOrClass)
*/
fof(a1236,axiom,s_instance(s_Financing, s_SetOrClass)).

/*
(instance FinancialService SetOrClass)
*/
fof(a1237,axiom,s_instance(s_FinancialService, s_SetOrClass)).

/*
(subclass Financing FinancialService)
*/
fof(a1238,axiom,s_subclass(s_Financing, s_FinancialService)).

/*
(subclass Partnership Business)
*/
fof(a1239,axiom,s_subclass(s_Partnership, s_Business)).

/*
(forall (?C)
 (exists (?H1 ?H2)
  (and (and (instance ?H2 Agent) (instance ?H1 Agent))
       (=> (instance ?C Partnership)
        (and (instance ?H1 Human)
             (and (instance ?H2 Human)
                  (and (not (equal ?H1 ?H2))
                       (and (possesses ?H1 ?C)
                            (possesses ?H2 ?C)))))))))
*/
fof(a1240,axiom,! [C] : (? [H1,H2] : (((s_instance(H2, s_Agent) & s_instance(H1, s_Agent)) & (s_instance(C, s_Partnership) => (s_instance(H1, s_Human) & (s_instance(H2, s_Human) & ((~ (H1 = H2)) & (s_possesses(H1, C) & s_possesses(H2, C)))))))))).

/*
(instance Scholarship SetOrClass)
*/
fof(a1241,axiom,s_instance(s_Scholarship, s_SetOrClass)).

/*
(subclass Scholarship Funding)
*/
fof(a1242,axiom,s_subclass(s_Scholarship, s_Funding)).

/*
(forall (?H ?F)
 (=> (instance ?H Agent)
  (=> (and (instance ?F Scholarship) (destination ?F ?H))
   (hasPurpose ?F
    (exists (?EP ?P)
     (and (instance ?EP EducationalProgram)
          (and (realization ?P ?EP) (experiencer ?P ?H))))))))
*/
%% no translation to TPTP available.

/*
(instance Welfare SetOrClass)
*/
fof(a1243,axiom,s_instance(s_Welfare, s_SetOrClass)).

/*
(subclass Welfare Funding)
*/
fof(a1244,axiom,s_subclass(s_Welfare, s_Funding)).

/*
(forall (?W)
 (exists (?O)
  (and (instance ?O Agent)
       (=> (instance ?W Welfare)
        (and (instance ?O ServiceOrganization) (agent ?W ?O))))))
*/
fof(a1245,axiom,! [W] : (? [O] : ((s_instance(O, s_Agent) & (s_instance(W, s_Welfare) => (s_instance(O, s_ServiceOrganization) & s_agent(W, O))))))).

/*
(subclass Publisher Manufacturer)
*/
fof(a1246,axiom,s_subclass(s_Publisher, s_Manufacturer)).

/*
(forall (?C)
 (exists (?S)
  (and (instance ?S Process)
       (=> (instance ?C Publisher)
        (and (instance ?S CommercialService)
             (and (agent ?S ?C) (instance ?S Publication)))))))
*/
fof(a1247,axiom,! [C] : (? [S] : ((s_instance(S, s_Process) & (s_instance(C, s_Publisher) => (s_instance(S, s_CommercialService) & (s_agent(S, C) & s_instance(S, s_Publication)))))))).

/*
(instance FamilyBusiness SetOrClass)
*/
fof(a1248,axiom,s_instance(s_FamilyBusiness, s_SetOrClass)).

/*
(instance Partnership SetOrClass)
*/
fof(a1249,axiom,s_instance(s_Partnership, s_SetOrClass)).

/*
(subclass FamilyBusiness Partnership)
*/
fof(a1250,axiom,s_subclass(s_FamilyBusiness, s_Partnership)).

/*
(forall (?P2 ?C ?P1)
 (=> (and (instance ?P2 Organism) (instance ?P1 Organism))
  (=>
   (and (instance ?C FamilyBusiness)
        (and (possesses ?P1 ?C) (possesses ?P2 ?C)))
   (familyRelation ?P1 ?P2))))
*/
fof(a1251,axiom,! [P2,C,P1] : (((s_instance(P2, s_Organism) & s_instance(P1, s_Organism)) => ((s_instance(C, s_FamilyBusiness) & (s_possesses(P1, C) & s_possesses(P2, C))) => s_familyRelation(P1, P2))))).

/*
(subclass Restaurant Business)
*/
fof(a1252,axiom,s_subclass(s_Restaurant, s_Business)).

/*
(forall (?C)
 (exists (?S ?F ?B)
  (and (and (instance ?B Object) (instance ?F Entity)
            (instance ?S Process))
       (=> (instance ?C Restaurant)
        (and (instance ?S CommercialService)
             (and (agent ?S ?C)
                  (and (instance ?S Selling)
                       (and (instance ?B RestaurantBuilding)
                            (and (eventLocated ?S ?B)
                                 (and
                                  (patient ?S ?F)
                                  (instance
                                   ?F
                                   (FoodForFn Human))))))))))))
*/
fof(a1253,axiom,! [C] : (? [S,F,B] : (((s_instance(B, s_Object) & s_instance(F, s_Entity) & s_instance(S, s_Process)) & (s_instance(C, s_Restaurant) => (s_instance(S, s_CommercialService) & (s_agent(S, C) & (s_instance(S, s_Selling) & (s_instance(B, s_RestaurantBuilding) & (s_eventLocated(S, B) & (s_patient(S, F) & s_instance(F, s_FoodForFn(s_Human))))))))))))).

/*
(forall (?PLACE)
 (=> (instance ?PLACE RestaurantBuilding)
  (capability Cooking eventLocated ?PLACE)))
*/
fof(a1254,axiom,! [PLACE] : ((s_instance(PLACE, s_RestaurantBuilding) => s_capability(s_Cooking, s_eventLocated_m, PLACE)))).

/*
(forall (?R)
 (exists (?D)
  (and (instance ?D Object)
       (=> (instance ?R Restaurant)
        (and (possesses ?R ?D) (instance ?D DiningArea))))))
*/
fof(a1255,axiom,! [R] : (? [D] : ((s_instance(D, s_Object) & (s_instance(R, s_Restaurant) => (s_possesses(R, D) & s_instance(D, s_DiningArea))))))).

/*
(instance Proprietorship SetOrClass)
*/
fof(a1256,axiom,s_instance(s_Proprietorship, s_SetOrClass)).

/*
(subclass Proprietorship Business)
*/
fof(a1257,axiom,s_subclass(s_Proprietorship, s_Business)).

/*
(forall (?C)
 (exists (?H)
  (forall (?H2)
   (=> (instance ?H2 Agent)
    (and (instance ?H Agent)
         (=> (instance ?C Proprietorship)
          (and (instance ?H Human)
               (and (possesses ?H ?C)
                    (not (and (not (equal ?H ?H2))
                              (possesses ?H2 ?C)))))))))))
*/
fof(a1258,axiom,! [C] : (? [H] : (! [H2] : ((s_instance(H2, s_Agent) => (s_instance(H, s_Agent) & (s_instance(C, s_Proprietorship) => (s_instance(H, s_Human) & (s_possesses(H, C) & (~ ((~ (H = H2)) & s_possesses(H2, C)))))))))))).

/*
(instance Auditorium SetOrClass)
*/
fof(a1259,axiom,s_instance(s_Auditorium, s_SetOrClass)).

/*
(subclass Auditorium Building)
*/
fof(a1260,axiom,s_subclass(s_Auditorium, s_Building)).

/*
(forall (?AUDITORIUM)
 (=> (instance ?AUDITORIUM Auditorium)
  (hasPurpose ?AUDITORIUM
   (exists (?DEMO)
    (and (instance ?DEMO Demonstrating)
         (eventLocated ?DEMO ?AUDITORIUM))))))
*/
%% no translation to TPTP available.

/*
(forall (?AUDITORIUM)
 (exists (?STAGE)
  (and (instance ?STAGE Object)
       (=> (instance ?AUDITORIUM Auditorium)
        (and (instance ?STAGE PerformanceStage)
             (part ?STAGE ?AUDITORIUM))))))
*/
fof(a1261,axiom,! [AUDITORIUM] : (? [STAGE] : ((s_instance(STAGE, s_Object) & (s_instance(AUDITORIUM, s_Auditorium) => (s_instance(STAGE, s_PerformanceStage) & s_part(STAGE, AUDITORIUM))))))).

/*
(instance AuditoriumSeat SetOrClass)
*/
fof(a1262,axiom,s_instance(s_AuditoriumSeat, s_SetOrClass)).

/*
(subclass AuditoriumSeat Seat)
*/
fof(a1263,axiom,s_subclass(s_AuditoriumSeat, s_Seat)).

/*
(forall (?SEAT)
 (exists (?AUDITORIUM)
  (and (instance ?AUDITORIUM Object)
       (=> (instance ?SEAT AuditoriumSeat)
        (and (instance ?AUDITORIUM Auditorium)
             (part ?SEAT ?AUDITORIUM))))))
*/
fof(a1264,axiom,! [SEAT] : (? [AUDITORIUM] : ((s_instance(AUDITORIUM, s_Object) & (s_instance(SEAT, s_AuditoriumSeat) => (s_instance(AUDITORIUM, s_Auditorium) & s_part(SEAT, AUDITORIUM))))))).

/*
(forall (?AUDITORIUM ?SEAT ?PERSON ?STAGE ?SEE)
 (exists (?INST)
  (=> (and (instance ?SEE SetOrClass) (subclass ?SEE Process))
   (=>
    (and (instance ?SEAT AuditoriumSeat)
         (and (part ?SEAT ?AUDITORIUM)
              (and (part ?STAGE ?AUDITORIUM)
                   (and (instance ?AUDITORIUM Auditorium)
                        (and (instance ?STAGE PerformanceStage)
                             (and (located ?PERSON ?SEAT)
                                  (and
                                   (instance ?PERSON Human)
                                   (and
                                    (subclass ?SEE Seeing)
                                    (=>
                                     (instance ?INST ?SEE)
                                     (patient ?INST ?STAGE))))))))))
    (capability ?SEE agent ?PERSON)))))
*/
fof(a1265,axiom,! [AUDITORIUM,SEAT,PERSON,STAGE,SEE] : (? [INST] : (((s_instance(SEE, s_SetOrClass) & s_subclass(SEE, s_Process)) => ((s_instance(SEAT, s_AuditoriumSeat) & (s_part(SEAT, AUDITORIUM) & (s_part(STAGE, AUDITORIUM) & (s_instance(AUDITORIUM, s_Auditorium) & (s_instance(STAGE, s_PerformanceStage) & (s_located(PERSON, SEAT) & (s_instance(PERSON, s_Human) & (s_subclass(SEE, s_Seeing) & (s_instance(INST, SEE) => s_patient(INST, STAGE)))))))))) => s_capability(SEE, s_agent_m, PERSON)))))).

/*
(subrelation enjoys inScopeOfInterest)
*/
fof(a1266,axiom,s_subrelation(s_enjoys_m, s_inScopeOfInterest_m)).

/*
(domainSubclass enjoys 2 IntentionalProcess)
*/
fof(a1267,axiom,s_domainSubclass(s_enjoys_m, 2, s_IntentionalProcess)).

/*
(forall (?PROCESS ?AGENT)
 (=>
  (and (instance ?AGENT CognitiveAgent)
       (subclass ?PROCESS IntentionalProcess)
       (instance ?PROCESS SetOrClass))
  (=> (enjoys ?AGENT ?PROCESS)
   (desires ?AGENT
    (exists (?INSTANCE)
     (and (instance ?INSTANCE ?PROCESS)
          (or (agent ?INSTANCE ?AGENT)
              (experiencer ?INSTANCE ?AGENT))))))))
*/
%% no translation to TPTP available.

/*
(instance expects BinaryPredicate)
*/
fof(a1268,axiom,s_instance(s_expects_m, s_BinaryPredicate)).

/*
(forall (?T1 ?AGENT ?FORMULA ?T2)
 (=>
  (and (instance ?T2 TimeInterval) (instance ?FORMULA Formula)
       (instance ?AGENT CognitiveAgent) (instance ?T1 TimeInterval))
  (=> (holdsDuring ?T1 (expects ?AGENT ?FORMULA))
   (and (holdsDuring ?T1 (believes ?AGENT (holdsDuring ?T2 ?FORMULA)))
        (earlier ?T1 ?T2)))))
*/
%% no translation to TPTP available.

/*
(subrelation fears expects)
*/
fof(a1269,axiom,s_subrelation(s_fears_m, s_expects_m)).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=> (fears ?AGENT ?FORMULA) (not (desires ?AGENT ?FORMULA)))))
*/
fof(a1270,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => (s_fears(AGENT, FORMULA) => (~ s_desires(AGENT, FORMULA)))))).

/*
(subrelation hopes expects)
*/
fof(a1271,axiom,s_subrelation(s_hopes_m, s_expects_m)).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=> (hopes ?AGENT ?FORMULA) (desires ?AGENT ?FORMULA))))
*/
fof(a1272,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => (s_hopes(AGENT, FORMULA) => s_desires(AGENT, FORMULA))))).

/*
(instance doubts PropositionalAttitude)
*/
fof(a1273,axiom,s_instance(s_doubts_m, s_PropositionalAttitude)).

/*
(instance doubts BinaryPredicate)
*/
fof(a1274,axiom,s_instance(s_doubts_m, s_BinaryPredicate)).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=> (doubts ?AGENT ?FORMULA) (not (believes ?AGENT ?FORMULA)))))
*/
fof(a1275,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => (s_doubts(AGENT, FORMULA) => (~ s_believes(AGENT, FORMULA)))))).

/*
(instance dislikes ObjectAttitude)
*/
fof(a1276,axiom,s_instance(s_dislikes_m, s_ObjectAttitude)).

/*
(subrelation dislikes inScopeOfInterest)
*/
fof(a1277,axiom,s_subrelation(s_dislikes_m, s_inScopeOfInterest_m)).

/*
(disjointRelation dislikes wants)
*/
fof(a1278,axiom,s_disjointRelation(s_dislikes_m, s_wants_m)).

/*
(forall (?OBJECT ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?OBJECT Object))
  (=> (dislikes ?AGENT ?OBJECT)
   (desires ?AGENT (not (possesses ?AGENT ?OBJECT))))))
*/
%% no translation to TPTP available.

/*
(instance disapproves PropositionalAttitude)
*/
fof(a1279,axiom,s_instance(s_disapproves_m, s_PropositionalAttitude)).

/*
(instance disapproves BinaryPredicate)
*/
fof(a1280,axiom,s_instance(s_disapproves_m, s_BinaryPredicate)).

/*
(subrelation disapproves inScopeOfInterest)
*/
fof(a1281,axiom,s_subrelation(s_disapproves_m, s_inScopeOfInterest_m)).

/*
(disjointRelation disapproves desires)
*/
fof(a1282,axiom,s_disjointRelation(s_disapproves_m, s_desires_m)).

/*
(subrelation lacks needs)
*/
fof(a1283,axiom,s_subrelation(s_lacks_m, s_needs_m)).

/*
(forall (?TIME ?OBJECT ?AGENT)
 (=>
  (and (instance ?AGENT CognitiveAgent) (instance ?OBJECT Object)
       (instance ?TIME TimePosition))
  (=> (holdsDuring ?TIME (lacks ?AGENT ?OBJECT))
   (holdsDuring ?TIME (not (possesses ?AGENT ?OBJECT))))))
*/
%% no translation to TPTP available.

/*
(instance DescendantsFn UnaryFunction)
*/
fof(a1284,axiom,s_instance(s_DescendantsFn_m, s_UnaryFunction)).

/*
(range DescendantsFn FamilyGroup)
*/
fof(a1285,axiom,s_range(s_DescendantsFn_m, s_FamilyGroup)).

/*
(forall (?DESCENDANTS ?PERSON)
 (forall (?MEMBER)
  (=> (instance ?MEMBER Organism)
   (=> (instance ?DESCENDANTS Collection)
    (=>
     (and (instance ?PERSON Human)
          (equal (DescendantsFn ?PERSON) ?DESCENDANTS))
     (<=> (member ?MEMBER ?DESCENDANTS) (ancestor ?MEMBER ?PERSON)))))))
*/
fof(a1286,axiom,! [DESCENDANTS,PERSON] : (! [MEMBER] : ((s_instance(MEMBER, s_Organism) => (s_instance(DESCENDANTS, s_Collection) => ((s_instance(PERSON, s_Human) & (s_DescendantsFn(PERSON) = DESCENDANTS)) => (s_member(MEMBER, DESCENDANTS) <=> s_ancestor(MEMBER, PERSON)))))))).

/*
(subclass GroupOfAnimals Group)
*/
fof(a1287,axiom,s_subclass(s_GroupOfAnimals, s_Group)).

/*
(forall (?GROUP)
 (forall (?MEMBER)
  (=> (instance ?MEMBER Object)
   (=> (instance ?GROUP GroupOfAnimals)
    (=> (member ?MEMBER ?GROUP)
     (and (instance ?MEMBER Animal) (not (instance ?MEMBER Human))))))))
*/
fof(a1288,axiom,! [GROUP] : (! [MEMBER] : ((s_instance(MEMBER, s_Object) => (s_instance(GROUP, s_GroupOfAnimals) => (s_member(MEMBER, GROUP) => (s_instance(MEMBER, s_Animal) & (~ s_instance(MEMBER, s_Human))))))))).

/*
(instance Brood SetOrClass)
*/
fof(a1289,axiom,s_instance(s_Brood, s_SetOrClass)).

/*
(subclass Brood GroupOfAnimals)
*/
fof(a1290,axiom,s_subclass(s_Brood, s_GroupOfAnimals)).

/*
(forall (?BROOD)
 (forall (?MEMBER1 ?MEMBER2)
  (=> (and (instance ?MEMBER2 Organism) (instance ?MEMBER1 Organism))
   (=> (instance ?BROOD Brood)
    (=> (and (member ?MEMBER1 ?BROOD) (member ?MEMBER2 ?BROOD))
     (sibling ?MEMBER1 ?MEMBER2))))))
*/
fof(a1291,axiom,! [BROOD] : (! [MEMBER1,MEMBER2] : (((s_instance(MEMBER2, s_Organism) & s_instance(MEMBER1, s_Organism)) => (s_instance(BROOD, s_Brood) => ((s_member(MEMBER1, BROOD) & s_member(MEMBER2, BROOD)) => s_sibling(MEMBER1, MEMBER2))))))).

/*
(forall (?BROOD)
 (exists (?TIME)
  (forall (?MEMBER)
   (exists (?BIRTH)
    (and (instance ?BIRTH Process)
         (=> (instance ?MEMBER Agent)
          (and (instance ?TIME Entity)
               (=> (instance ?BROOD Brood)
                (=> (member ?MEMBER ?BROOD)
                 (and (instance ?BIRTH Birth)
                      (and (experiencer ?BIRTH ?MEMBER)
                           (equal ?TIME (WhenFn ?BIRTH)))))))))))))
*/
fof(a1292,axiom,! [BROOD] : (? [TIME] : (! [MEMBER] : (? [BIRTH] : ((s_instance(BIRTH, s_Process) & (s_instance(MEMBER, s_Agent) => (s_instance(TIME, s_Entity) & (s_instance(BROOD, s_Brood) => (s_member(MEMBER, BROOD) => (s_instance(BIRTH, s_Birth) & (s_experiencer(BIRTH, MEMBER) & (TIME = s_WhenFn(BIRTH)))))))))))))).

/*
(instance AnimalTeam SetOrClass)
*/
fof(a1293,axiom,s_instance(s_AnimalTeam, s_SetOrClass)).

/*
(instance GroupOfAnimals SetOrClass)
*/
fof(a1294,axiom,s_instance(s_GroupOfAnimals, s_SetOrClass)).

/*
(subclass AnimalTeam GroupOfAnimals)
*/
fof(a1295,axiom,s_subclass(s_AnimalTeam, s_GroupOfAnimals)).

/*
(forall (?AT)
 (exists (?P)
  (and (instance ?P Process)
       (=> (instance ?AT AnimalTeam)
        (and (instance ?P Pulling) (agent ?P ?AT))))))
*/
fof(a1296,axiom,! [AT] : (? [P] : ((s_instance(P, s_Process) & (s_instance(AT, s_AnimalTeam) => (s_instance(P, s_Pulling) & s_agent(P, AT))))))).

/*
(instance SportsTeam SetOrClass)
*/
fof(a1297,axiom,s_instance(s_SportsTeam, s_SetOrClass)).

/*
(subclass SportsTeam GroupOfPeople)
*/
fof(a1298,axiom,s_subclass(s_SportsTeam, s_GroupOfPeople)).

/*
(forall (?TEAM)
 (exists (?SPORT)
  (and (and (instance ?SPORT SetOrClass) (subclass ?SPORT Process))
       (=> (instance ?TEAM SportsTeam)
        (and (subclass ?SPORT Sport)
             (capability ?SPORT agent ?TEAM))))))
*/
fof(a1299,axiom,! [TEAM] : (? [SPORT] : (((s_instance(SPORT, s_SetOrClass) & s_subclass(SPORT, s_Process)) & (s_instance(TEAM, s_SportsTeam) => (s_subclass(SPORT, s_Sport) & s_capability(SPORT, s_agent_m, TEAM))))))).

/*
(instance TeamSport SetOrClass)
*/
fof(a1300,axiom,s_instance(s_TeamSport, s_SetOrClass)).

/*
(subclass TeamSport Sport)
*/
fof(a1301,axiom,s_subclass(s_TeamSport, s_Sport)).

/*
(forall (?S)
 (exists (?T1 ?T2)
  (and (and (instance ?T2 Agent) (instance ?T1 Agent))
       (=> (instance ?S TeamSport)
        (and (contestParticipant ?S ?T1)
             (and (contestParticipant ?S ?T2)
                  (and (instance ?T1 SportsTeam)
                       (and (instance ?T2 SportsTeam)
                            (not (equal ?T1 ?T2))))))))))
*/
fof(a1302,axiom,! [S] : (? [T1,T2] : (((s_instance(T2, s_Agent) & s_instance(T1, s_Agent)) & (s_instance(S, s_TeamSport) => (s_contestParticipant(S, T1) & (s_contestParticipant(S, T2) & (s_instance(T1, s_SportsTeam) & (s_instance(T2, s_SportsTeam) & (~ (T1 = T2))))))))))).

/*
(instance Racing SetOrClass)
*/
fof(a1303,axiom,s_instance(s_Racing, s_SetOrClass)).

/*
(subclass Racing Sport)
*/
fof(a1304,axiom,s_subclass(s_Racing, s_Sport)).

/*
(subrelation groupMember member)
*/
fof(a1305,axiom,s_subrelation(s_groupMember_m, s_member_m)).

/*
(forall (?T1 ?GROUP ?OBJ)
 (=> (instance ?T1 TimePosition)
  (=>
   (and (holdsDuring ?T1 (member ?OBJ ?GROUP))
        (and (instance ?OBJ Human) (instance ?GROUP GroupOfPeople)))
   (holdsDuring ?T1 (groupMember ?OBJ ?GROUP)))))
*/
%% no translation to TPTP available.

/*
(subrelation headquartersOfOrganization located)
*/
fof(a1306,axiom,s_subrelation(s_headquartersOfOrganization_m, s_located_m)).

/*
(instance CommunicationOrganization SetOrClass)
*/
fof(a1307,axiom,s_instance(s_CommunicationOrganization, s_SetOrClass)).

/*
(subclass CommunicationOrganization Organization)
*/
fof(a1308,axiom,s_subclass(s_CommunicationOrganization, s_Organization)).

/*
(forall (?CO)
 (exists (?CS ?C)
  (and (and (instance ?C Process) (instance ?CS Object))
       (=> (instance ?CO CommunicationOrganization)
        (and (instance ?C Communication)
             (and (instance ?CS CommunicationSystem)
                  (and (instrument ?C ?CS) (agent ?C ?CO))))))))
*/
fof(a1309,axiom,! [CO] : (? [CS,C] : (((s_instance(C, s_Process) & s_instance(CS, s_Object)) & (s_instance(CO, s_CommunicationOrganization) => (s_instance(C, s_Communication) & (s_instance(CS, s_CommunicationSystem) & (s_instrument(C, CS) & s_agent(C, CO))))))))).

/*
(instance MediaOrganization SetOrClass)
*/
fof(a1310,axiom,s_instance(s_MediaOrganization, s_SetOrClass)).

/*
(subclass MediaOrganization Organization)
*/
fof(a1311,axiom,s_subclass(s_MediaOrganization, s_Organization)).

/*
(instance profit AsymmetricRelation)
*/
fof(a1312,axiom,s_instance(s_profit_m, s_AsymmetricRelation)).

/*
(instance NonprofitOrganization SetOrClass)
*/
fof(a1313,axiom,s_instance(s_NonprofitOrganization, s_SetOrClass)).

/*
(subclass NonprofitOrganization Organization)
*/
fof(a1314,axiom,s_subclass(s_NonprofitOrganization, s_Organization)).

/*
(disjoint NonprofitOrganization CommercialAgent)
*/
fof(a1315,axiom,s_disjoint(s_NonprofitOrganization, s_CommercialAgent)).

/*
(forall (?N)
 (=> (instance ?N NonprofitOrganization)
  (not (hasPurpose ?N (exists (?P) (profit ?N ?P))))))
*/
%% no translation to TPTP available.

/*
(subclass CommunicationSystem Collection)
*/
fof(a1316,axiom,s_subclass(s_CommunicationSystem, s_Collection)).

/*
(subclass CareOrganization Organization)
*/
fof(a1317,axiom,s_subclass(s_CareOrganization, s_Organization)).

/*
(partition3 CareOrganization HospitalOrganization MedicalClinic)
*/
fof(a1318,axiom,s_partition3(s_CareOrganization, s_HospitalOrganization, s_MedicalClinic)).

/*
(instance medicalPatient BinaryPredicate)
*/
fof(a1319,axiom,s_instance(s_medicalPatient_m, s_BinaryPredicate)).

/*
(forall (?ORG)
 (=> (instance ?ORG CareOrganization)
  (hasPurpose ?ORG (exists (?PATIENT) (medicalPatient ?PATIENT ?ORG)))))
*/
%% no translation to TPTP available.

/*
(instance HospitalOrganization SetOrClass)
*/
fof(a1320,axiom,s_instance(s_HospitalOrganization, s_SetOrClass)).

/*
(subclass HospitalOrganization CareOrganization)
*/
fof(a1321,axiom,s_subclass(s_HospitalOrganization, s_CareOrganization)).

/*
(instance HospitalBuilding SetOrClass)
*/
fof(a1322,axiom,s_instance(s_HospitalBuilding, s_SetOrClass)).

/*
(subclass HospitalBuilding TemporaryResidence)
*/
fof(a1323,axiom,s_subclass(s_HospitalBuilding, s_TemporaryResidence)).

/*
(instance MedicalClinic SetOrClass)
*/
fof(a1324,axiom,s_instance(s_MedicalClinic, s_SetOrClass)).

/*
(instance CareOrganization SetOrClass)
*/
fof(a1325,axiom,s_instance(s_CareOrganization, s_SetOrClass)).

/*
(subclass MedicalClinic CareOrganization)
*/
fof(a1326,axiom,s_subclass(s_MedicalClinic, s_CareOrganization)).

/*
(instance (ComplementFn Residence) SetOrClass)
*/
fof(a1327,axiom,s_instance(s_ComplementFn(s_Residence), s_SetOrClass)).

/*
(subclass MedicalClinicBuilding (ComplementFn Residence))
*/
fof(a1328,axiom,s_subclass(s_MedicalClinicBuilding, s_ComplementFn(s_Residence))).

/*
(instance MedicalClinicBuilding SetOrClass)
*/
fof(a1329,axiom,s_instance(s_MedicalClinicBuilding, s_SetOrClass)).

/*
(subclass MedicalClinicBuilding Building)
*/
fof(a1330,axiom,s_subclass(s_MedicalClinicBuilding, s_Building)).

/*
(instance Cafeteria SetOrClass)
*/
fof(a1331,axiom,s_instance(s_Cafeteria, s_SetOrClass)).

/*
(subclass Cafeteria Restaurant)
*/
fof(a1332,axiom,s_subclass(s_Cafeteria, s_Restaurant)).

/*
(forall (?COMPANY)
 (forall (?PERSON)
  (=> (instance ?PERSON Human)
   (=> (instance ?COMPANY Cafeteria)
    (not (occupiesPosition ?PERSON ServicePosition ?COMPANY))))))
*/
fof(a1333,axiom,! [COMPANY] : (! [PERSON] : ((s_instance(PERSON, s_Human) => (s_instance(COMPANY, s_Cafeteria) => (~ s_occupiesPosition(PERSON, s_ServicePosition, COMPANY))))))).

/*
(instance Tavern SetOrClass)
*/
fof(a1334,axiom,s_instance(s_Tavern, s_SetOrClass)).

/*
(instance Restaurant SetOrClass)
*/
fof(a1335,axiom,s_instance(s_Restaurant, s_SetOrClass)).

/*
(subclass Tavern Restaurant)
*/
fof(a1336,axiom,s_subclass(s_Tavern, s_Restaurant)).

/*
(forall (?COMPANY)
 (exists (?SERVICE ?BEVERAGE)
  (and (and (instance ?BEVERAGE Entity) (instance ?SERVICE Process))
       (=> (instance ?COMPANY Tavern)
        (and (instance ?SERVICE CommercialService)
             (and (agent ?SERVICE ?COMPANY)
                  (and (instance ?SERVICE Selling)
                       (and (patient ?SERVICE ?BEVERAGE)
                            (instance ?BEVERAGE
                             AlcoholicBeverage)))))))))
*/
fof(a1337,axiom,! [COMPANY] : (? [SERVICE,BEVERAGE] : (((s_instance(BEVERAGE, s_Entity) & s_instance(SERVICE, s_Process)) & (s_instance(COMPANY, s_Tavern) => (s_instance(SERVICE, s_CommercialService) & (s_agent(SERVICE, COMPANY) & (s_instance(SERVICE, s_Selling) & (s_patient(SERVICE, BEVERAGE) & s_instance(BEVERAGE, s_AlcoholicBeverage)))))))))).

/*
(subclass Shipping Transportation)
*/
fof(a1338,axiom,s_subclass(s_Shipping, s_Transportation)).

/*
(instance Shipping SetOrClass)
*/
fof(a1339,axiom,s_instance(s_Shipping, s_SetOrClass)).

/*
(subclass CommercialShipping Shipping)
*/
fof(a1340,axiom,s_subclass(s_CommercialShipping, s_Shipping)).

/*
(instance CommercialShipping SetOrClass)
*/
fof(a1341,axiom,s_instance(s_CommercialShipping, s_SetOrClass)).

/*
(subclass CommercialShipping CommercialService)
*/
fof(a1342,axiom,s_subclass(s_CommercialShipping, s_CommercialService)).

/*
(subclass Smuggling Transportation)
*/
fof(a1343,axiom,s_subclass(s_Smuggling, s_Transportation)).

/*
(instance Smuggling SetOrClass)
*/
fof(a1344,axiom,s_instance(s_Smuggling, s_SetOrClass)).

/*
(subclass Smuggling CriminalAction)
*/
fof(a1345,axiom,s_subclass(s_Smuggling, s_CriminalAction)).

/*
(instance customer IrreflexiveRelation)
*/
fof(a1346,axiom,s_instance(s_customer_m, s_IrreflexiveRelation)).

/*
(instance customer BinaryPredicate)
*/
fof(a1347,axiom,s_instance(s_customer_m, s_BinaryPredicate)).

/*
(instance customer AsymmetricRelation)
*/
fof(a1348,axiom,s_instance(s_customer_m, s_AsymmetricRelation)).

/*
(instance customer PartialValuedRelation)
*/
fof(a1349,axiom,s_instance(s_customer_m, s_PartialValuedRelation)).

/*
(forall (?AGENT2 ?AGENT1)
 (forall (?SERVICE)
  (exists (?g1392)
   (=>
    (and (instance ?AGENT1 CognitiveAgent)
         (instance ?AGENT2 CognitiveAgent))
    (and (=> (customer ?AGENT1 ?AGENT2)
          (and (instance ?g1392 FinancialTransaction)
               (and (agent ?g1392 ?AGENT2)
                    (destination ?g1392 ?AGENT1))))
         (=>
          (and (instance ?SERVICE FinancialTransaction)
               (and (agent ?SERVICE ?AGENT2)
                    (destination ?SERVICE ?AGENT1)))
          (customer ?AGENT1 ?AGENT2)))))))
*/
fof(a1350,axiom,! [AGENT2,AGENT1] : (! [SERVICE] : (? [G1392] : (((s_instance(AGENT1, s_CognitiveAgent) & s_instance(AGENT2, s_CognitiveAgent)) => ((s_customer(AGENT1, AGENT2) => (s_instance(G1392, s_FinancialTransaction) & (s_agent(G1392, AGENT2) & s_destination(G1392, AGENT1)))) & ((s_instance(SERVICE, s_FinancialTransaction) & (s_agent(SERVICE, AGENT2) & s_destination(SERVICE, AGENT1))) => s_customer(AGENT1, AGENT2)))))))).

/*
(instance price TernaryPredicate)
*/
fof(a1351,axiom,s_instance(s_price_m, s_TernaryPredicate)).

/*
(forall (?Obj ?Agent ?Money)
 (exists (?Buying)
  (and (instance ?Buying FinancialTransaction)
       (=>
        (and (instance ?Money CurrencyMeasure) (instance ?Agent Agent)
             (instance ?Obj Physical))
        (=> (price ?Obj ?Money ?Agent)
         (and (instance ?Buying Buying)
              (and (agent ?Buying ?Agent)
                   (and (patient ?Buying ?Obj)
                        (transactionAmount ?Buying ?Money)))))))))
*/
fof(a1352,axiom,! [OBJ,AGENT,MONEY] : (? [BUYING] : ((s_instance(BUYING, s_FinancialTransaction) & ((s_instance(MONEY, s_CurrencyMeasure) & s_instance(AGENT, s_Agent) & s_instance(OBJ, s_Physical)) => (s_price(OBJ, MONEY, AGENT) => (s_instance(BUYING, s_Buying) & (s_agent(BUYING, AGENT) & (s_patient(BUYING, OBJ) & s_transactionAmount(BUYING, MONEY)))))))))).

/*
(instance WholesaleStore SetOrClass)
*/
fof(a1353,axiom,s_instance(s_WholesaleStore, s_SetOrClass)).

/*
(subclass WholesaleStore MercantileOrganization)
*/
fof(a1354,axiom,s_subclass(s_WholesaleStore, s_MercantileOrganization)).

/*
(forall (?STORE ?CUSTOMER)
 (=> (instance ?CUSTOMER CognitiveAgent)
  (=>
   (and (instance ?STORE WholesaleStore) (customer ?CUSTOMER ?STORE))
   (instance ?CUSTOMER CommercialAgent))))
*/
fof(a1355,axiom,! [STORE,CUSTOMER] : ((s_instance(CUSTOMER, s_CognitiveAgent) => ((s_instance(STORE, s_WholesaleStore) & s_customer(CUSTOMER, STORE)) => s_instance(CUSTOMER, s_CommercialAgent))))).

/*
(subclass RetailStore MercantileOrganization)
*/
fof(a1356,axiom,s_subclass(s_RetailStore, s_MercantileOrganization)).

/*
(disjoint RetailStore WholesaleStore)
*/
fof(a1357,axiom,s_disjoint(s_RetailStore, s_WholesaleStore)).

/*
(forall (?X)
 (exists (?P ?EV)
  (and (and (instance ?EV Process) (instance ?P Entity))
       (=> (instance ?X RetailStore)
        (and (capability Selling agent ?X)
             (and (instance ?EV Selling)
                  (and (destination ?EV ?P) (instance ?P Human))))))))
*/
fof(a1358,axiom,! [X] : (? [P,EV] : (((s_instance(EV, s_Process) & s_instance(P, s_Entity)) & (s_instance(X, s_RetailStore) => (s_capability(s_Selling, s_agent_m, X) & (s_instance(EV, s_Selling) & (s_destination(EV, P) & s_instance(P, s_Human))))))))).

/*
(instance ShoppingMall SetOrClass)
*/
fof(a1359,axiom,s_instance(s_ShoppingMall, s_SetOrClass)).

/*
(subclass ShoppingMall MercantileOrganization)
*/
fof(a1360,axiom,s_subclass(s_ShoppingMall, s_MercantileOrganization)).

/*
(forall (?M ?S)
 (=> (instance ?S Object)
  (=> (and (instance ?M ShoppingMall) (member ?S ?M))
   (instance ?S RetailStore))))
*/
fof(a1361,axiom,! [M,S] : ((s_instance(S, s_Object) => ((s_instance(M, s_ShoppingMall) & s_member(S, M)) => s_instance(S, s_RetailStore))))).

/*
(instance DrugStore SetOrClass)
*/
fof(a1362,axiom,s_instance(s_DrugStore, s_SetOrClass)).

/*
(subclass DrugStore RetailStore)
*/
fof(a1363,axiom,s_subclass(s_DrugStore, s_RetailStore)).

/*
(forall (?M ?D)
 (exists (?S)
  (and (instance ?S Process)
       (=> (instance ?M Entity)
        (=> (instance ?D DrugStore)
         (and (instance ?S Selling)
              (and (agent ?S ?D)
                   (and (patient ?S ?M) (instance ?M Medicine)))))))))
*/
fof(a1364,axiom,! [M,D] : (? [S] : ((s_instance(S, s_Process) & (s_instance(M, s_Entity) => (s_instance(D, s_DrugStore) => (s_instance(S, s_Selling) & (s_agent(S, D) & (s_patient(S, M) & s_instance(M, s_Medicine)))))))))).

/*
(instance GroceryStore SetOrClass)
*/
fof(a1365,axiom,s_instance(s_GroceryStore, s_SetOrClass)).

/*
(instance RetailStore SetOrClass)
*/
fof(a1366,axiom,s_instance(s_RetailStore, s_SetOrClass)).

/*
(subclass GroceryStore RetailStore)
*/
fof(a1367,axiom,s_subclass(s_GroceryStore, s_RetailStore)).

/*
(forall (?STORE)
 (exists (?SELL ?FOOD)
  (and (and (instance ?FOOD Entity) (instance ?SELL Process))
       (=> (instance ?STORE GroceryStore)
        (and (instance ?SELL Selling)
             (and (agent ?SELL ?STORE)
                  (and (patient ?SELL ?FOOD)
                       (instance ?FOOD (FoodForFn Animal)))))))))
*/
fof(a1368,axiom,! [STORE] : (? [SELL,FOOD] : (((s_instance(FOOD, s_Entity) & s_instance(SELL, s_Process)) & (s_instance(STORE, s_GroceryStore) => (s_instance(SELL, s_Selling) & (s_agent(SELL, STORE) & (s_patient(SELL, FOOD) & s_instance(FOOD, s_FoodForFn(s_Animal)))))))))).

/*
(instance OfferingForSale SetOrClass)
*/
fof(a1369,axiom,s_instance(s_OfferingForSale, s_SetOrClass)).

/*
(subclass OfferingForSale Offering)
*/
fof(a1370,axiom,s_subclass(s_OfferingForSale, s_Offering)).

/*
(forall (?AGENT ?SALE)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?SALE OfferingForSale) (agent ?SALE ?AGENT))
   (patient ?SALE
    (exists (?SELL ?OBJ)
     (and (instance ?SELL Selling)
          (and (patient ?SELL ?OBJ) (agent ?SELL ?AGENT))))))))
*/
%% no translation to TPTP available.

/*
(instance OfferingToPurchase SetOrClass)
*/
fof(a1371,axiom,s_instance(s_OfferingToPurchase, s_SetOrClass)).

/*
(subclass OfferingToPurchase Offering)
*/
fof(a1372,axiom,s_subclass(s_OfferingToPurchase, s_Offering)).

/*
(instance BargainSale SetOrClass)
*/
fof(a1373,axiom,s_instance(s_BargainSale, s_SetOrClass)).

/*
(subclass BargainSale Offering)
*/
fof(a1374,axiom,s_subclass(s_BargainSale, s_Offering)).

/*
(forall (?OBJ ?SALE)
 (exists (?PRICE1 ?PRICE2 ?AGENT1 ?AGENT2)
  (and (and (instance ?AGENT2 Agent) (instance ?AGENT1 Agent)
            (instance ?PRICE2 CurrencyMeasure)
            (instance ?PRICE1 CurrencyMeasure))
       (=>
        (and (instance ?SALE BargainSale)
             (and (patient ?SALE ?OBJ) (instance ?OBJ Object)))
        (and (holdsDuring (ImmediatePastFn (WhenFn ?SALE))
              (price ?OBJ ?PRICE1 ?AGENT1))
             (and (holdsDuring (WhenFn ?SALE)
                   (price ?OBJ ?PRICE2 ?AGENT2))
                  (lessThan ?PRICE2 ?PRICE1)))))))
*/
%% no translation to TPTP available.

/*
(instance ChristianBible SetOrClass)
*/
fof(a1375,axiom,s_instance(s_ChristianBible, s_SetOrClass)).

/*
(subclass ChristianBible Book)
*/
fof(a1376,axiom,s_subclass(s_ChristianBible, s_Book)).

/*
(subsumesContentClass ChristianBible NewTestament)
*/
fof(a1377,axiom,s_subsumesContentClass(s_ChristianBible, s_NewTestament)).

/*
(subsumesContentClass ChristianBible OldTestament)
*/
fof(a1378,axiom,s_subsumesContentClass(s_ChristianBible, s_OldTestament)).

/*
(instance ChristianGospel SetOrClass)
*/
fof(a1379,axiom,s_instance(s_ChristianGospel, s_SetOrClass)).

/*
(subclass ChristianGospel Text)
*/
fof(a1380,axiom,s_subclass(s_ChristianGospel, s_Text)).

/*
(instance OldTestament SetOrClass)
*/
fof(a1381,axiom,s_instance(s_OldTestament, s_SetOrClass)).

/*
(subclass OldTestament Book)
*/
fof(a1382,axiom,s_subclass(s_OldTestament, s_Book)).

/*
(instance NewTestament SetOrClass)
*/
fof(a1383,axiom,s_instance(s_NewTestament, s_SetOrClass)).

/*
(subclass NewTestament Book)
*/
fof(a1384,axiom,s_subclass(s_NewTestament, s_Book)).

/*
(subsumesContentClass NewTestament ChristianGospel)
*/
fof(a1385,axiom,s_subsumesContentClass(s_NewTestament, s_ChristianGospel)).

/*
(instance BeforeCommonEra TimeInterval)
*/
fof(a1386,axiom,s_instance(s_BeforeCommonEra, s_TimeInterval)).

/*
(equal (BeginFn BeforeCommonEra) NegativeInfinity)
*/
fof(a1387,axiom,(s_BeginFn(s_BeforeCommonEra) = s_NegativeInfinity)).

/*
(not (overlapsTemporally CommonEra BeforeCommonEra))
*/
fof(a1388,axiom,(~ s_overlapsTemporally(s_CommonEra, s_BeforeCommonEra))).

/*
(instance CommonEra TimeInterval)
*/
fof(a1389,axiom,s_instance(s_CommonEra, s_TimeInterval)).

/*
(equal (EndFn CommonEra) PositiveInfinity)
*/
fof(a1390,axiom,(s_EndFn(s_CommonEra) = s_PositiveInfinity)).

/*
(instance MissionOrganization SetOrClass)
*/
fof(a1391,axiom,s_instance(s_MissionOrganization, s_SetOrClass)).

/*
(subclass MissionOrganization ReligiousOrganization)
*/
fof(a1392,axiom,s_subclass(s_MissionOrganization, s_ReligiousOrganization)).

/*
(subclass ReligiousBuilding Building)
*/
fof(a1393,axiom,s_subclass(s_ReligiousBuilding, s_Building)).

/*
(instance ReligiousBuilding SetOrClass)
*/
fof(a1394,axiom,s_instance(s_ReligiousBuilding, s_SetOrClass)).

/*
(subclass ReligiousBuilding PlaceOfWorship)
*/
fof(a1395,axiom,s_subclass(s_ReligiousBuilding, s_PlaceOfWorship)).

/*
(instance Steeple SetOrClass)
*/
fof(a1396,axiom,s_instance(s_Steeple, s_SetOrClass)).

/*
(subclass Steeple StationaryArtifact)
*/
fof(a1397,axiom,s_subclass(s_Steeple, s_StationaryArtifact)).

/*
(forall (?STEEPLE)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?STEEPLE Steeple)
        (and (instance ?BUILDING Building)
             (part ?STEEPLE ?BUILDING))))))
*/
fof(a1398,axiom,! [STEEPLE] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(STEEPLE, s_Steeple) => (s_instance(BUILDING, s_Building) & s_part(STEEPLE, BUILDING))))))).

/*
(subclass Ceremony IntentionalProcess)
*/
fof(a1399,axiom,s_subclass(s_Ceremony, s_IntentionalProcess)).

/*
(subclass Ceremony SocialInteraction)
*/
fof(a1400,axiom,s_subclass(s_Ceremony, s_SocialInteraction)).

/*
(subclass Wedding Ceremony)
*/
fof(a1401,axiom,s_subclass(s_Wedding, s_Ceremony)).

/*
(instance Wedding SetOrClass)
*/
fof(a1402,axiom,s_instance(s_Wedding, s_SetOrClass)).

/*
(subclass Wedding Declaring)
*/
fof(a1403,axiom,s_subclass(s_Wedding, s_Declaring)).

/*
(forall (?WED)
 (exists (?PERSON1 ?PERSON2)
  (and (and (instance ?PERSON2 Human) (instance ?PERSON1 Human))
       (=> (instance ?WED Wedding)
        (holdsDuring (ImmediateFutureFn (WhenFn ?WED))
         (spouse ?PERSON1 ?PERSON2))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?P2 ?P1)
 (exists (?WED)
  (and (instance ?WED Process)
       (=> (and (instance ?P2 Human) (instance ?P1 Human))
        (=>
         (and (holdsDuring ?T1 (spouse ?P1 ?P2))
              (instance ?T1 TimeInterval))
         (and (instance ?WED Wedding)
              (and (patient ?WED ?P1)
                   (and (patient ?WED ?P2)
                        (earlier (WhenFn ?WED) ?T1)))))))))
*/
%% no translation to TPTP available.

/*
(subclass ReligiousService ReligiousProcess)
*/
fof(a1404,axiom,s_subclass(s_ReligiousService, s_ReligiousProcess)).

/*
(instance ReligiousService SetOrClass)
*/
fof(a1405,axiom,s_instance(s_ReligiousService, s_SetOrClass)).

/*
(subclass ReligiousService Demonstrating)
*/
fof(a1406,axiom,s_subclass(s_ReligiousService, s_Demonstrating)).

/*
(subclass Baptizing Ceremony)
*/
fof(a1407,axiom,s_subclass(s_Baptizing, s_Ceremony)).

/*
(subclass Baptizing ReligiousProcess)
*/
fof(a1408,axiom,s_subclass(s_Baptizing, s_ReligiousProcess)).

/*
(instance Baptizing SetOrClass)
*/
fof(a1409,axiom,s_instance(s_Baptizing, s_SetOrClass)).

/*
(subclass Baptizing JoiningAnOrganization)
*/
fof(a1410,axiom,s_subclass(s_Baptizing, s_JoiningAnOrganization)).

/*
(forall (?H ?B)
 (=> (instance ?H Entity)
  (=> (and (instance ?B Baptizing) (patient ?B ?H))
   (instance ?H Human))))
*/
fof(a1411,axiom,! [H,B] : ((s_instance(H, s_Entity) => ((s_instance(B, s_Baptizing) & s_patient(B, H)) => s_instance(H, s_Human))))).

/*
(subclass Praying ReligiousProcess)
*/
fof(a1412,axiom,s_subclass(s_Praying, s_ReligiousProcess)).

/*
(instance Praying SetOrClass)
*/
fof(a1413,axiom,s_instance(s_Praying, s_SetOrClass)).

/*
(subclass Praying Requesting)
*/
fof(a1414,axiom,s_subclass(s_Praying, s_Requesting)).

/*
(instance ReferenceText SetOrClass)
*/
fof(a1415,axiom,s_instance(s_ReferenceText, s_SetOrClass)).

/*
(subclass ReferenceText FactualText)
*/
fof(a1416,axiom,s_subclass(s_ReferenceText, s_FactualText)).

/*
(subclass IndependentState GeopoliticalArea)
*/
fof(a1417,axiom,s_subclass(s_IndependentState, s_GeopoliticalArea)).

/*
(instance IndependentState SetOrClass)
*/
fof(a1418,axiom,s_instance(s_IndependentState, s_SetOrClass)).

/*
(subclass IndependentState Nation)
*/
fof(a1419,axiom,s_subclass(s_IndependentState, s_Nation)).

/*
(subclass DependencyOrSpecialSovereigntyArea GeopoliticalArea)
*/
fof(a1420,axiom,s_subclass(s_DependencyOrSpecialSovereigntyArea, s_GeopoliticalArea)).

/*
(disjoint IndependentState DependencyOrSpecialSovereigntyArea)
*/
fof(a1421,axiom,s_disjoint(s_IndependentState, s_DependencyOrSpecialSovereigntyArea)).

/*
(instance OverseasArea SetOrClass)
*/
fof(a1422,axiom,s_instance(s_OverseasArea, s_SetOrClass)).

/*
(instance DependencyOrSpecialSovereigntyArea SetOrClass)
*/
fof(a1423,axiom,s_instance(s_DependencyOrSpecialSovereigntyArea, s_SetOrClass)).

/*
(subclass OverseasArea DependencyOrSpecialSovereigntyArea)
*/
fof(a1424,axiom,s_subclass(s_OverseasArea, s_DependencyOrSpecialSovereigntyArea)).

/*
(instance ResidentFn UnaryFunction)
*/
fof(a1425,axiom,s_instance(s_ResidentFn_m, s_UnaryFunction)).

/*
(range ResidentFn GroupOfPeople)
*/
fof(a1426,axiom,s_range(s_ResidentFn_m, s_GroupOfPeople)).

/*
(forall (?AREA ?PERSON)
 (=>
  (and (instance ?PERSON Human) (instance ?AREA GeopoliticalArea)
       (instance ?AREA PermanentResidence))
  (=> (member ?PERSON (ResidentFn ?AREA)) (home ?PERSON ?AREA))))
*/
fof(a1427,axiom,! [AREA,PERSON] : (((s_instance(PERSON, s_Human) & s_instance(AREA, s_GeopoliticalArea) & s_instance(AREA, s_PermanentResidence)) => (s_member(PERSON, s_ResidentFn(AREA)) => s_home(PERSON, AREA))))).

/*
(subrelation CitizenryFn ResidentFn)
*/
fof(a1428,axiom,s_subrelation(s_CitizenryFn_m, s_ResidentFn_m)).

/*
(instance CitizenryFn UnaryFunction)
*/
fof(a1429,axiom,s_instance(s_CitizenryFn_m, s_UnaryFunction)).

/*
(range CitizenryFn GroupOfPeople)
*/
fof(a1430,axiom,s_range(s_CitizenryFn_m, s_GroupOfPeople)).

/*
(forall (?POPULATION ?AREA ?CITIZENRY)
 (=>
  (and (instance ?POPULATION Quantity) (instance ?CITIZENRY Quantity))
  (=>
   (and (instance ?AREA GeopoliticalArea)
        (and (equal ?CITIZENRY (CitizenryFn ?AREA))
             (equal ?POPULATION (ResidentFn ?AREA))))
   (greaterThanOrEqualTo ?POPULATION ?CITIZENRY))))
*/
fof(a1431,axiom,! [POPULATION,AREA,CITIZENRY] : (((s_instance(POPULATION, s_Quantity) & s_instance(CITIZENRY, s_Quantity)) => ((s_instance(AREA, s_GeopoliticalArea) & ((CITIZENRY = s_CitizenryFn(AREA)) & (POPULATION = s_ResidentFn(AREA)))) => s_greaterThanOrEqualTo(POPULATION, CITIZENRY))))).

/*
(instance PerCapitaFn BinaryFunction)
*/
fof(a1432,axiom,s_instance(s_PerCapitaFn_m, s_BinaryFunction)).

/*
(range PerCapitaFn Quantity)
*/
fof(a1433,axiom,s_range(s_PerCapitaFn_m, s_Quantity)).

/*
(forall (?QUANTITY2 ?AREA ?QUANTITY1)
 (exists (?POPULATION)
  (and (instance ?POPULATION Quantity)
       (=>
        (and (instance ?QUANTITY1 Quantity)
             (instance ?AREA GeopoliticalArea)
             (instance ?QUANTITY2 Entity))
        (=> (equal (PerCapitaFn ?QUANTITY1 ?AREA) ?QUANTITY2)
         (and (equal ?POPULATION (CardinalityFn (ResidentFn ?AREA)))
              (equal ?QUANTITY2
                     (DivisionFn ?QUANTITY1 ?POPULATION))))))))
*/
fof(a1434,axiom,! [QUANTITY2,AREA,QUANTITY1] : (? [POPULATION] : ((s_instance(POPULATION, s_Quantity) & ((s_instance(QUANTITY1, s_Quantity) & s_instance(AREA, s_GeopoliticalArea) & s_instance(QUANTITY2, s_Entity)) => ((s_PerCapitaFn(QUANTITY1, AREA) = QUANTITY2) => ((POPULATION = s_CardinalityFn(s_ResidentFn(AREA))) & (QUANTITY2 = divide(QUANTITY1, POPULATION))))))))).

/*
(subclass CityDistrict GeopoliticalArea)
*/
fof(a1435,axiom,s_subclass(s_CityDistrict, s_GeopoliticalArea)).

/*
(forall (?DISTRICT)
 (forall (?CITY)
  (exists (?g1413)
   (and (=> (instance ?DISTRICT CityDistrict)
         (and (instance ?g1413 City)
              (geopoliticalSubdivision ?DISTRICT ?g1413)))
        (=>
         (and (instance ?CITY City)
              (geopoliticalSubdivision ?DISTRICT ?CITY))
         (instance ?DISTRICT CityDistrict))))))
*/
fof(a1436,axiom,! [DISTRICT] : (! [CITY] : (? [G1413] : (((s_instance(DISTRICT, s_CityDistrict) => (s_instance(G1413, s_City) & s_geopoliticalSubdivision(DISTRICT, G1413))) & ((s_instance(CITY, s_City) & s_geopoliticalSubdivision(DISTRICT, CITY)) => s_instance(DISTRICT, s_CityDistrict))))))).

/*
(instance Downtown SetOrClass)
*/
fof(a1437,axiom,s_instance(s_Downtown, s_SetOrClass)).

/*
(instance CityDistrict SetOrClass)
*/
fof(a1438,axiom,s_instance(s_CityDistrict, s_SetOrClass)).

/*
(subclass Downtown CityDistrict)
*/
fof(a1439,axiom,s_subclass(s_Downtown, s_CityDistrict)).

/*
(instance Cemetery SetOrClass)
*/
fof(a1440,axiom,s_instance(s_Cemetery, s_SetOrClass)).

/*
(subclass Cemetery LandArea)
*/
fof(a1441,axiom,s_subclass(s_Cemetery, s_LandArea)).

/*
(forall (?C)
 (exists (?T)
  (and (instance ?T Physical)
       (=> (instance ?C Cemetery)
        (and (instance ?T Tomb) (located ?T ?C))))))
*/
fof(a1442,axiom,! [C] : (? [T] : ((s_instance(T, s_Physical) & (s_instance(C, s_Cemetery) => (s_instance(T, s_Tomb) & s_located(T, C))))))).

/*
(subclass Park LandArea)
*/
fof(a1443,axiom,s_subclass(s_Park, s_LandArea)).

/*
(forall (?PARK)
 (exists (?GOV)
  (and (instance ?GOV Agent)
       (=> (instance ?PARK Park)
        (and (instance ?GOV Government) (possesses ?GOV ?PARK))))))
*/
fof(a1444,axiom,! [PARK] : (? [GOV] : ((s_instance(GOV, s_Agent) & (s_instance(PARK, s_Park) => (s_instance(GOV, s_Government) & s_possesses(GOV, PARK))))))).

/*
(forall (?PARK)
 (=> (instance ?PARK Park)
  (hasPurpose ?PARK
   (exists (?REC)
    (and (instance ?REC RecreationOrExercise)
         (eventLocated ?REC ?PARK))))))
*/
%% no translation to TPTP available.

/*
(instance PublicPark SetOrClass)
*/
fof(a1445,axiom,s_instance(s_PublicPark, s_SetOrClass)).

/*
(instance Park SetOrClass)
*/
fof(a1446,axiom,s_instance(s_Park, s_SetOrClass)).

/*
(subclass PublicPark Park)
*/
fof(a1447,axiom,s_subclass(s_PublicPark, s_Park)).

/*
(forall (?P)
 (exists (?G)
  (and (instance ?G Agent)
       (=> (instance ?P PublicPark)
        (and (instance ?G Government) (possesses ?G ?P))))))
*/
fof(a1448,axiom,! [P] : (? [G] : ((s_instance(G, s_Agent) & (s_instance(P, s_PublicPark) => (s_instance(G, s_Government) & s_possesses(G, P))))))).

/*
(instance CultivatedLandArea SetOrClass)
*/
fof(a1449,axiom,s_instance(s_CultivatedLandArea, s_SetOrClass)).

/*
(subclass CultivatedLandArea LandArea)
*/
fof(a1450,axiom,s_subclass(s_CultivatedLandArea, s_LandArea)).

/*
(forall (?A)
 (exists (?C)
  (and (instance ?C Process)
       (=> (instance ?A CultivatedLandArea)
        (and (instance ?C Agriculture) (eventLocated ?C ?A))))))
*/
fof(a1451,axiom,! [A] : (? [C] : ((s_instance(C, s_Process) & (s_instance(A, s_CultivatedLandArea) => (s_instance(C, s_Agriculture) & s_eventLocated(C, A))))))).

/*
(instance Campground SetOrClass)
*/
fof(a1452,axiom,s_instance(s_Campground, s_SetOrClass)).

/*
(subclass Campground LandArea)
*/
fof(a1453,axiom,s_subclass(s_Campground, s_LandArea)).

/*
(forall (?C)
 (=> (instance ?C Campground)
  (hasPurpose ?C
   (exists (?R) (and (instance ?R MobileResidence) (located ?R ?C))))))
*/
%% no translation to TPTP available.

/*
(instance CityBlock SetOrClass)
*/
fof(a1454,axiom,s_instance(s_CityBlock, s_SetOrClass)).

/*
(subclass CityBlock LandArea)
*/
fof(a1455,axiom,s_subclass(s_CityBlock, s_LandArea)).

/*
(forall (?B)
 (exists (?C)
  (and (instance ?C Object)
       (=> (instance ?B CityBlock)
        (and (instance ?C City) (part ?B ?C))))))
*/
fof(a1456,axiom,! [B] : (? [C] : ((s_instance(C, s_Object) & (s_instance(B, s_CityBlock) => (s_instance(C, s_City) & s_part(B, C))))))).

/*
(instance AerobicExerciseDevice SetOrClass)
*/
fof(a1457,axiom,s_instance(s_AerobicExerciseDevice, s_SetOrClass)).

/*
(subclass AerobicExerciseDevice RecreationOrExerciseDevice)
*/
fof(a1458,axiom,s_subclass(s_AerobicExerciseDevice, s_RecreationOrExerciseDevice)).

/*
(instance AnaerobicExerciseDevice SetOrClass)
*/
fof(a1459,axiom,s_instance(s_AnaerobicExerciseDevice, s_SetOrClass)).

/*
(instance RecreationOrExerciseDevice SetOrClass)
*/
fof(a1460,axiom,s_instance(s_RecreationOrExerciseDevice, s_SetOrClass)).

/*
(subclass AnaerobicExerciseDevice RecreationOrExerciseDevice)
*/
fof(a1461,axiom,s_subclass(s_AnaerobicExerciseDevice, s_RecreationOrExerciseDevice)).

/*
(disjoint AnaerobicExerciseDevice AerobicExerciseDevice)
*/
fof(a1462,axiom,s_disjoint(s_AnaerobicExerciseDevice, s_AerobicExerciseDevice)).

/*
(subclass SkilledOccupation OccupationalRole)
*/
fof(a1463,axiom,s_subclass(s_SkilledOccupation, s_OccupationalRole)).

/*
(forall (?OCCUPATION ?PERSON)
 (exists (?TRAINING)
  (and (instance ?TRAINING Process)
       (=> (instance ?PERSON Object)
        (=>
         (and (instance ?OCCUPATION SkilledOccupation)
              (attribute ?PERSON ?OCCUPATION))
         (and (instance ?TRAINING EducationalProcess)
              (destination ?TRAINING ?PERSON)))))))
*/
fof(a1464,axiom,! [OCCUPATION,PERSON] : (? [TRAINING] : ((s_instance(TRAINING, s_Process) & (s_instance(PERSON, s_Object) => ((s_instance(OCCUPATION, s_SkilledOccupation) & s_attribute(PERSON, OCCUPATION)) => (s_instance(TRAINING, s_EducationalProcess) & s_destination(TRAINING, PERSON)))))))).

/*
(subclass ManualLabor Position)
*/
fof(a1465,axiom,s_subclass(s_ManualLabor, s_Position)).

/*
(subclass ManualLabor OccupationalRole)
*/
fof(a1466,axiom,s_subclass(s_ManualLabor, s_OccupationalRole)).

/*
(subclass UnskilledOccupation ManualLabor)
*/
fof(a1467,axiom,s_subclass(s_UnskilledOccupation, s_ManualLabor)).

/*
(disjoint UnskilledOccupation SkilledOccupation)
*/
fof(a1468,axiom,s_disjoint(s_UnskilledOccupation, s_SkilledOccupation)).

/*
(subclass OccupationalTrade SkilledOccupation)
*/
fof(a1469,axiom,s_subclass(s_OccupationalTrade, s_SkilledOccupation)).

/*
(instance ManualLabor SetOrClass)
*/
fof(a1470,axiom,s_instance(s_ManualLabor, s_SetOrClass)).

/*
(subclass OccupationalTrade ManualLabor)
*/
fof(a1471,axiom,s_subclass(s_OccupationalTrade, s_ManualLabor)).

/*
(subclass Profession SkilledOccupation)
*/
fof(a1472,axiom,s_subclass(s_Profession, s_SkilledOccupation)).

/*
(disjoint Profession OccupationalTrade)
*/
fof(a1473,axiom,s_disjoint(s_Profession, s_OccupationalTrade)).

/*
(forall (?T1 ?ROLE ?HUMAN)
 (exists (?FIELD)
  (and (instance ?FIELD Formula)
       (=>
        (and (instance ?T1 TimePosition)
             (instance ?HUMAN CognitiveAgent))
        (=>
         (and (or (instance ?ROLE OccupationalTrade)
                  (instance ?ROLE Profession))
              (holdsDuring ?T1 (attribute ?HUMAN ?ROLE)))
         (and (instance ?FIELD FieldOfStudy)
              (holdsDuring ?T1 (knows ?HUMAN ?FIELD))))))))
*/
%% no translation to TPTP available.

/*
(instance GovernmentSecretary GovernmentPosition)
*/
fof(a1474,axiom,s_instance(s_GovernmentSecretary, s_GovernmentPosition)).

/*
(instance SecretaryOfTheInterior GovernmentPosition)
*/
fof(a1475,axiom,s_instance(s_SecretaryOfTheInterior, s_GovernmentPosition)).

/*
(subAttribute SecretaryOfTheInterior GovernmentSecretary)
*/
fof(a1476,axiom,s_subAttribute(s_SecretaryOfTheInterior, s_GovernmentSecretary)).

/*
(instance SecretaryOfTheTreasury GovernmentPosition)
*/
fof(a1477,axiom,s_instance(s_SecretaryOfTheTreasury, s_GovernmentPosition)).

/*
(subAttribute SecretaryOfTheTreasury GovernmentSecretary)
*/
fof(a1478,axiom,s_subAttribute(s_SecretaryOfTheTreasury, s_GovernmentSecretary)).

/*
(instance StateGovernment SetOrClass)
*/
fof(a1479,axiom,s_instance(s_StateGovernment, s_SetOrClass)).

/*
(subclass StateGovernment Government)
*/
fof(a1480,axiom,s_subclass(s_StateGovernment, s_Government)).

/*
(forall (?STATE)
 (<=> (instance ?STATE StateOrProvince)
  (instance (GovernmentFn ?STATE) StateGovernment)))
*/
fof(a1481,axiom,! [STATE] : ((s_instance(STATE, s_StateOrProvince) <=> s_instance(s_GovernmentFn(STATE), s_StateGovernment)))).

/*
(instance CityGovernment SetOrClass)
*/
fof(a1482,axiom,s_instance(s_CityGovernment, s_SetOrClass)).

/*
(subclass CityGovernment Government)
*/
fof(a1483,axiom,s_subclass(s_CityGovernment, s_Government)).

/*
(forall (?C)
 (<=> (instance ?C City) (instance (GovernmentFn ?C) CityGovernment)))
*/
fof(a1484,axiom,! [C] : ((s_instance(C, s_City) <=> s_instance(s_GovernmentFn(C), s_CityGovernment)))).

/*
(subclass MilitaryService MilitaryOrganization)
*/
fof(a1485,axiom,s_subclass(s_MilitaryService, s_MilitaryOrganization)).

/*
(instance CoastGuard SetOrClass)
*/
fof(a1486,axiom,s_instance(s_CoastGuard, s_SetOrClass)).

/*
(subclass CoastGuard GovernmentOrganization)
*/
fof(a1487,axiom,s_subclass(s_CoastGuard, s_GovernmentOrganization)).

/*
(instance Army SetOrClass)
*/
fof(a1488,axiom,s_instance(s_Army, s_SetOrClass)).

/*
(subclass Army MilitaryService)
*/
fof(a1489,axiom,s_subclass(s_Army, s_MilitaryService)).

/*
(instance AirForce SetOrClass)
*/
fof(a1490,axiom,s_instance(s_AirForce, s_SetOrClass)).

/*
(instance MilitaryService SetOrClass)
*/
fof(a1491,axiom,s_instance(s_MilitaryService, s_SetOrClass)).

/*
(subclass AirForce MilitaryService)
*/
fof(a1492,axiom,s_subclass(s_AirForce, s_MilitaryService)).

/*
(subclass MilitaryUnit MilitaryOrganization)
*/
fof(a1493,axiom,s_subclass(s_MilitaryUnit, s_MilitaryOrganization)).

/*
(forall (?B)
 (exists (?U1 ?U2)
  (and (and (instance ?U2 Agent) (instance ?U1 Agent))
       (=> (instance ?B Battle)
        (and (instance ?U1 MilitaryUnit)
             (and (instance ?U2 MilitaryUnit)
                  (and (not (equal ?U1 ?U2))
                       (and (agent ?B ?U1) (agent ?B ?U2)))))))))
*/
fof(a1494,axiom,! [B] : (? [U1,U2] : (((s_instance(U2, s_Agent) & s_instance(U1, s_Agent)) & (s_instance(B, s_Battle) => (s_instance(U1, s_MilitaryUnit) & (s_instance(U2, s_MilitaryUnit) & ((~ (U1 = U2)) & (s_agent(B, U1) & s_agent(B, U2)))))))))).

/*
(instance MilitaryReserveForce SetOrClass)
*/
fof(a1495,axiom,s_instance(s_MilitaryReserveForce, s_SetOrClass)).

/*
(subclass MilitaryReserveForce MilitaryOrganization)
*/
fof(a1496,axiom,s_subclass(s_MilitaryReserveForce, s_MilitaryOrganization)).

/*
(instance MilitarySquad SetOrClass)
*/
fof(a1497,axiom,s_instance(s_MilitarySquad, s_SetOrClass)).

/*
(subclass MilitarySquad MilitaryUnit)
*/
fof(a1498,axiom,s_subclass(s_MilitarySquad, s_MilitaryUnit)).

/*
(instance MilitaryCorps SetOrClass)
*/
fof(a1499,axiom,s_instance(s_MilitaryCorps, s_SetOrClass)).

/*
(subclass MilitaryCorps MilitaryUnit)
*/
fof(a1500,axiom,s_subclass(s_MilitaryCorps, s_MilitaryUnit)).

/*
(instance CavalryUnit SetOrClass)
*/
fof(a1501,axiom,s_instance(s_CavalryUnit, s_SetOrClass)).

/*
(instance MilitaryUnit SetOrClass)
*/
fof(a1502,axiom,s_instance(s_MilitaryUnit, s_SetOrClass)).

/*
(subclass CavalryUnit MilitaryUnit)
*/
fof(a1503,axiom,s_subclass(s_CavalryUnit, s_MilitaryUnit)).

/*
(forall (?C ?B)
 (exists (?P ?V ?T)
  (and (and (instance ?T TimeInterval) (instance ?T Process)
            (instance ?V Entity) (instance ?P Agent))
       (=>
        (and (instance ?C CavalryUnit)
             (and (instance ?B Battle) (agent ?B ?C)))
        (and (attribute ?P Soldier)
             (and (member ?P ?C)
                  (and (instance ?T Transportation)
                       (and (agent ?T ?P)
                            (and (instance ?V Vehicle)
                                 (and
                                  (patient ?T ?V)
                                  (during ?T ?B)))))))))))
*/
fof(a1504,axiom,! [C,B] : (? [P,V,T] : (((s_instance(T, s_TimeInterval) & s_instance(T, s_Process) & s_instance(V, s_Entity) & s_instance(P, s_Agent)) & ((s_instance(C, s_CavalryUnit) & (s_instance(B, s_Battle) & s_agent(B, C))) => (s_attribute(P, s_Soldier) & (s_member(P, C) & (s_instance(T, s_Transportation) & (s_agent(T, P) & (s_instance(V, s_Vehicle) & (s_patient(T, V) & s_during(T, B)))))))))))).

/*
(instance MilitarySurplus SetOrClass)
*/
fof(a1505,axiom,s_instance(s_MilitarySurplus, s_SetOrClass)).

/*
(subclass MilitarySurplus MilitaryArtifact)
*/
fof(a1506,axiom,s_subclass(s_MilitarySurplus, s_MilitaryArtifact)).

/*
(forall (?S)
 (exists (?A ?B)
  (and (and (instance ?B Process) (instance ?A Object))
       (=> (instance ?S MilitarySurplus)
        (and (instance ?B Buying)
             (and (patient ?B ?A)
                  (and (not (instance ?A MilitaryOrganization))
                       (not (member ?A MilitaryOrganization)))))))))
*/
fof(a1507,axiom,! [S] : (? [A,B] : (((s_instance(B, s_Process) & s_instance(A, s_Object)) & (s_instance(S, s_MilitarySurplus) => (s_instance(B, s_Buying) & (s_patient(B, A) & ((~ s_instance(A, s_MilitaryOrganization)) & (~ s_member(A, s_MilitaryOrganization)))))))))).

/*
(instance hostileForces BinaryPredicate)
*/
fof(a1508,axiom,s_instance(s_hostileForces_m, s_BinaryPredicate)).

/*
(instance hostileForces IrreflexiveRelation)
*/
fof(a1509,axiom,s_instance(s_hostileForces_m, s_IrreflexiveRelation)).

/*
(instance hostileForces PartialValuedRelation)
*/
fof(a1510,axiom,s_instance(s_hostileForces_m, s_PartialValuedRelation)).

/*
(forall (?WAR ?U2 ?U1)
 (exists (?W ?A1 ?A2)
  (and (and (instance ?A2 GeopoliticalArea)
            (instance ?A1 GeopoliticalArea) (instance ?W Contest))
       (=>
        (and (instance ?U1 MilitaryUnit) (instance ?U2 MilitaryUnit)
             (instance ?WAR Entity))
        (=> (hostileForces ?U1 ?U2)
         (and (instance ?WAR War)
              (and (contestParticipant ?W ?A1)
                   (and (contestParticipant ?W ?A2)
                        (and (subOrganization ?U1 (GovernmentFn ?A1))
                             (subOrganization ?U2
                              (GovernmentFn ?A2)))))))))))
*/
fof(a1511,axiom,! [WAR,U2,U1] : (? [W,A1,A2] : (((s_instance(A2, s_GeopoliticalArea) & s_instance(A1, s_GeopoliticalArea) & s_instance(W, s_Contest)) & ((s_instance(U1, s_MilitaryUnit) & s_instance(U2, s_MilitaryUnit) & s_instance(WAR, s_Entity)) => (s_hostileForces(U1, U2) => (s_instance(WAR, s_War) & (s_contestParticipant(W, A1) & (s_contestParticipant(W, A2) & (s_subOrganization(U1, s_GovernmentFn(A1)) & s_subOrganization(U2, s_GovernmentFn(A2)))))))))))).

/*
(instance Commission SetOrClass)
*/
fof(a1512,axiom,s_instance(s_Commission, s_SetOrClass)).

/*
(subclass Commission Organization)
*/
fof(a1513,axiom,s_subclass(s_Commission, s_Organization)).

/*
(forall (?COMMISSION)
 (=> (instance ?COMMISSION Commission)
  (hasPurpose ?COMMISSION
   (exists (?INVESTIGATE ?ISSUE)
    (and (instance ?INVESTIGATE Investigating)
         (and (patient ?INVESTIGATE ?ISSUE)
              (agent ?INVESTIGATE ?COMMISSION)))))))
*/
%% no translation to TPTP available.

/*
(instance ServiceOrganization SetOrClass)
*/
fof(a1514,axiom,s_instance(s_ServiceOrganization, s_SetOrClass)).

/*
(subclass ServiceOrganization Organization)
*/
fof(a1515,axiom,s_subclass(s_ServiceOrganization, s_Organization)).

/*
(forall (?ORG)
 (exists (?PROC ?GOV)
  (and (and (instance ?GOV Agent) (instance ?PROC Process))
       (=> (instance ?ORG ServiceOrganization)
        (and (instance ?PROC RegulatoryProcess)
             (and (patient ?PROC ?ORG)
                  (and (agent ?PROC ?GOV)
                       (instance ?GOV Government))))))))
*/
fof(a1516,axiom,! [ORG] : (? [PROC,GOV] : (((s_instance(GOV, s_Agent) & s_instance(PROC, s_Process)) & (s_instance(ORG, s_ServiceOrganization) => (s_instance(PROC, s_RegulatoryProcess) & (s_patient(PROC, ORG) & (s_agent(PROC, GOV) & s_instance(GOV, s_Government))))))))).

/*
(subclass Library EducationalOrganization)
*/
fof(a1517,axiom,s_subclass(s_Library, s_EducationalOrganization)).

/*
(forall (?L)
 (exists (?B ?T)
  (and (and (instance ?T Physical) (instance ?B Object))
       (=> (instance ?L Library)
        (and (possesses ?L ?B)
             (and (instance ?B Building)
                  (and (instance ?T Text) (located ?T ?B))))))))
*/
fof(a1518,axiom,! [L] : (? [B,T] : (((s_instance(T, s_Physical) & s_instance(B, s_Object)) & (s_instance(L, s_Library) => (s_possesses(L, B) & (s_instance(B, s_Building) & (s_instance(T, s_Text) & s_located(T, B))))))))).

/*
(instance Library SetOrClass)
*/
fof(a1519,axiom,s_instance(s_Library, s_SetOrClass)).

/*
(subclass PublicLibrary Library)
*/
fof(a1520,axiom,s_subclass(s_PublicLibrary, s_Library)).

/*
(instance PublicLibrary SetOrClass)
*/
fof(a1521,axiom,s_instance(s_PublicLibrary, s_SetOrClass)).

/*
(subclass PublicLibrary GovernmentOrganization)
*/
fof(a1522,axiom,s_subclass(s_PublicLibrary, s_GovernmentOrganization)).

/*
(subclass Museum EducationalOrganization)
*/
fof(a1523,axiom,s_subclass(s_Museum, s_EducationalOrganization)).

/*
(instance ArtMuseum SetOrClass)
*/
fof(a1524,axiom,s_instance(s_ArtMuseum, s_SetOrClass)).

/*
(instance Museum SetOrClass)
*/
fof(a1525,axiom,s_instance(s_Museum, s_SetOrClass)).

/*
(subclass ArtMuseum Museum)
*/
fof(a1526,axiom,s_subclass(s_ArtMuseum, s_Museum)).

/*
(forall (?M)
 (exists (?B ?A)
  (and (and (instance ?A Physical) (instance ?B Object))
       (=> (instance ?M ArtMuseum)
        (and (possesses ?M ?B)
             (and (instance ?B Building)
                  (and (instance ?A ArtWork) (located ?A ?B))))))))
*/
fof(a1527,axiom,! [M] : (? [B,A] : (((s_instance(A, s_Physical) & s_instance(B, s_Object)) & (s_instance(M, s_ArtMuseum) => (s_possesses(M, B) & (s_instance(B, s_Building) & (s_instance(A, s_ArtWork) & s_located(A, B))))))))).

/*
(instance OrganizationalBoard SetOrClass)
*/
fof(a1528,axiom,s_instance(s_OrganizationalBoard, s_SetOrClass)).

/*
(subclass OrganizationalBoard Organization)
*/
fof(a1529,axiom,s_subclass(s_OrganizationalBoard, s_Organization)).

/*
(forall (?BOARD)
 (exists (?ORG ?MANAGE)
  (and (and (instance ?MANAGE Process) (instance ?ORG Organization))
       (=> (instance ?BOARD OrganizationalBoard)
        (and (subOrganization ?BOARD ?ORG)
             (and (instance ?MANAGE Managing)
                  (and (agent ?MANAGE ?BOARD)
                       (patient ?MANAGE ?ORG))))))))
*/
fof(a1530,axiom,! [BOARD] : (? [ORG,MANAGE] : (((s_instance(MANAGE, s_Process) & s_instance(ORG, s_Organization)) & (s_instance(BOARD, s_OrganizationalBoard) => (s_subOrganization(BOARD, ORG) & (s_instance(MANAGE, s_Managing) & (s_agent(MANAGE, BOARD) & s_patient(MANAGE, ORG))))))))).

/*
(instance SecurityUnit SetOrClass)
*/
fof(a1531,axiom,s_instance(s_SecurityUnit, s_SetOrClass)).

/*
(subclass SecurityUnit Organization)
*/
fof(a1532,axiom,s_subclass(s_SecurityUnit, s_Organization)).

/*
(forall (?ORG ?UNIT)
 (=> (instance ?ORG Organization)
  (=> (and (instance ?UNIT SecurityUnit) (subOrganization ?UNIT ?ORG))
   (holdsObligation
    (exists (?MAINTAIN)
     (and (instance ?MAINTAIN Maintaining)
          (and (agent ?MAINTAIN ?UNIT) (patient ?MAINTAIN ?ORG))))
    ?UNIT))))
*/
%% no translation to TPTP available.

/*
(instance UnionOrganization SetOrClass)
*/
fof(a1533,axiom,s_instance(s_UnionOrganization, s_SetOrClass)).

/*
(subclass UnionOrganization Organization)
*/
fof(a1534,axiom,s_subclass(s_UnionOrganization, s_Organization)).

/*
(forall (?ORG ?MEMBER)
 (exists (?COLL)
  (exists (?CORP)
   (and (instance ?CORP Organization)
        (and (instance ?COLL Organization)
             (=> (instance ?MEMBER CognitiveAgent)
              (=> (instance ?ORG UnionOrganization)
               (=> (member ?MEMBER ?ORG)
                (or (and (instance ?COLL Corporation)
                         (employs ?COLL ?MEMBER))
                    (and (instance ?COLL Industry)
                         (and (member ?CORP ?COLL)
                              (employs ?CORP ?MEMBER))))))))))))
*/
fof(a1535,axiom,! [ORG,MEMBER] : (? [COLL] : (? [CORP] : ((s_instance(CORP, s_Organization) & (s_instance(COLL, s_Organization) & (s_instance(MEMBER, s_CognitiveAgent) => (s_instance(ORG, s_UnionOrganization) => (s_member(MEMBER, ORG) => ((s_instance(COLL, s_Corporation) & s_employs(COLL, MEMBER)) | (s_instance(COLL, s_Industry) & (s_member(CORP, COLL) & s_employs(CORP, MEMBER))))))))))))).

/*
(subclass OrganicCompound CompoundSubstance)
*/
fof(a1536,axiom,s_subclass(s_OrganicCompound, s_CompoundSubstance)).

/*
(forall (?COMPOUND)
 (exists (?CARBON)
  (and (instance ?CARBON Object)
       (=>
        (and (instance ?COMPOUND OrganicCompound)
             (instance ?COMPOUND Molecule))
        (and (instance ?CARBON Carbon) (part ?CARBON ?COMPOUND))))))
*/
fof(a1537,axiom,! [COMPOUND] : (? [CARBON] : ((s_instance(CARBON, s_Object) & ((s_instance(COMPOUND, s_OrganicCompound) & s_instance(COMPOUND, s_Molecule)) => (s_instance(CARBON, s_Carbon) & s_part(CARBON, COMPOUND))))))).

/*
(instance Urea SetOrClass)
*/
fof(a1538,axiom,s_instance(s_Urea, s_SetOrClass)).

/*
(subclass Urea OrganicCompound)
*/
fof(a1539,axiom,s_subclass(s_Urea, s_OrganicCompound)).

/*
(subclass Steroid OrganicCompound)
*/
fof(a1540,axiom,s_subclass(s_Steroid, s_OrganicCompound)).

/*
(subclass Steroid BiologicallyActiveSubstance)
*/
fof(a1541,axiom,s_subclass(s_Steroid, s_BiologicallyActiveSubstance)).

/*
(subclass Hydrocarbon OrganicCompound)
*/
fof(a1542,axiom,s_subclass(s_Hydrocarbon, s_OrganicCompound)).

/*
(forall (?S)
 (exists (?P1 ?P2)
  (and (and (instance ?P2 Object) (instance ?P1 Object))
       (=> (instance ?S Hydrocarbon)
        (and (equal ?S (MereologicalSumFn ?P1 ?P2))
             (and (instance ?P1 Carbon) (instance ?P2 Hydrogen)))))))
*/
fof(a1543,axiom,! [S] : (? [P1,P2] : (((s_instance(P2, s_Object) & s_instance(P1, s_Object)) & (s_instance(S, s_Hydrocarbon) => ((S = s_MereologicalSumFn(P1, P2)) & (s_instance(P1, s_Carbon) & s_instance(P2, s_Hydrogen)))))))).

/*
(instance Alcohol SetOrClass)
*/
fof(a1544,axiom,s_instance(s_Alcohol, s_SetOrClass)).

/*
(subclass Alcohol OrganicCompound)
*/
fof(a1545,axiom,s_subclass(s_Alcohol, s_OrganicCompound)).

/*
(subclass Alkaloid ChemicalBase)
*/
fof(a1546,axiom,s_subclass(s_Alkaloid, s_ChemicalBase)).

/*
(subclass Alkaloid PlantSubstance)
*/
fof(a1547,axiom,s_subclass(s_Alkaloid, s_PlantSubstance)).

/*
(instance Alkaloid SetOrClass)
*/
fof(a1548,axiom,s_instance(s_Alkaloid, s_SetOrClass)).

/*
(subclass Alkaloid BiologicallyActiveSubstance)
*/
fof(a1549,axiom,s_subclass(s_Alkaloid, s_BiologicallyActiveSubstance)).

/*
(forall (?A)
 (exists (?N)
  (and (instance ?N Object)
       (=> (instance ?A Alkaloid)
        (and (instance ?N Nitrogen) (part ?N ?A))))))
*/
fof(a1550,axiom,! [A] : (? [N] : ((s_instance(N, s_Object) & (s_instance(A, s_Alkaloid) => (s_instance(N, s_Nitrogen) & s_part(N, A))))))).

/*
(instance Drugged ConsciousnessAttribute)
*/
fof(a1551,axiom,s_instance(s_Drugged, s_ConsciousnessAttribute)).

/*
(contraryAttribute2 Drugged Sober)
*/
fof(a1552,axiom,s_contraryAttribute2(s_Drugged, s_Sober)).

/*
(forall (?P ?T)
 (=> (and (instance ?T TimePosition) (instance ?P Object))
  (=> (holdsDuring ?T (attribute ?P Drugged))
   (holdsDuring ?T
    (exists (?B)
     (and (instance ?B BiologicallyActiveSubstance) (part ?B ?P)))))))
*/
%% no translation to TPTP available.

/*
(subAttribute Drunk Drugged)
*/
fof(a1553,axiom,s_subAttribute(s_Drunk, s_Drugged)).

/*
(forall (?PERSON ?TIME)
 (exists (?PAST)
  (and (instance ?PAST TimePosition)
       (=> (and (instance ?TIME TimePosition) (instance ?PERSON Agent))
        (=> (holdsDuring ?TIME (attribute ?PERSON Drunk))
         (and (temporalPart ?PAST (PastFn ?TIME))
              (holdsDuring ?PAST
               (exists (?DRINK ?ALCOHOL)
                (and (instance ?DRINK Drinking)
                     (and (patient ?DRINK ?ALCOHOL)
                          (and (instance ?ALCOHOL AlcoholicBeverage)
                               (agent ?DRINK ?PERSON))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?P ?T)
 (=> (and (instance ?T TimePosition) (instance ?P Object))
  (=> (holdsDuring ?T (attribute ?P Drunk))
   (holdsDuring ?T
    (exists (?B) (and (instance ?B Alcohol) (part ?B ?P)))))))
*/
%% no translation to TPTP available.

/*
(subclass AminoAcid ChemicalAcid)
*/
fof(a1554,axiom,s_subclass(s_AminoAcid, s_ChemicalAcid)).

/*
(instance AminoAcid SetOrClass)
*/
fof(a1555,axiom,s_instance(s_AminoAcid, s_SetOrClass)).

/*
(instance OrganicCompound SetOrClass)
*/
fof(a1556,axiom,s_instance(s_OrganicCompound, s_SetOrClass)).

/*
(subclass AminoAcid OrganicCompound)
*/
fof(a1557,axiom,s_subclass(s_AminoAcid, s_OrganicCompound)).

/*
(forall (?P)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?P Protein)
        (and (instance ?A AminoAcid) (part ?A ?P))))))
*/
fof(a1558,axiom,! [P] : (? [A] : ((s_instance(A, s_Object) & (s_instance(P, s_Protein) => (s_instance(A, s_AminoAcid) & s_part(A, P))))))).

/*
(instance Steroid SetOrClass)
*/
fof(a1559,axiom,s_instance(s_Steroid, s_SetOrClass)).

/*
(subclass Cholesterol Steroid)
*/
fof(a1560,axiom,s_subclass(s_Cholesterol, s_Steroid)).

/*
(instance Cholesterol SetOrClass)
*/
fof(a1561,axiom,s_instance(s_Cholesterol, s_SetOrClass)).

/*
(subclass Cholesterol AnimalSubstance)
*/
fof(a1562,axiom,s_subclass(s_Cholesterol, s_AnimalSubstance)).

/*
(forall (?S)
 (exists (?P ?L)
  (and (and (instance ?L Object) (instance ?P Process))
       (=> (instance ?S Cholesterol)
        (and (instance ?P BiologicalProcess)
             (and (eventLocated ?P ?L)
                  (and (instance ?L Liver) (result ?P ?S))))))))
*/
fof(a1563,axiom,! [S] : (? [P,L] : (((s_instance(L, s_Object) & s_instance(P, s_Process)) & (s_instance(S, s_Cholesterol) => (s_instance(P, s_BiologicalProcess) & (s_eventLocated(P, L) & (s_instance(L, s_Liver) & s_result(P, S))))))))).

/*
(instance ChemicalAcid SetOrClass)
*/
fof(a1564,axiom,s_instance(s_ChemicalAcid, s_SetOrClass)).

/*
(subclass ChemicalAcid CompoundSubstance)
*/
fof(a1565,axiom,s_subclass(s_ChemicalAcid, s_CompoundSubstance)).

/*
(disjoint ChemicalAcid ChemicalBase)
*/
fof(a1566,axiom,s_disjoint(s_ChemicalAcid, s_ChemicalBase)).

/*
(forall (?CB ?CA ?C)
 (exists (?CS)
  (and (instance ?CS Entity)
       (=>
        (and (instance ?CA ChemicalAcid)
             (and (instance ?CB ChemicalBase)
                  (and (instance ?C ChemicalProcess)
                       (and (patient ?C ?CA) (patient ?C ?CB)))))
        (and (instance ?CS ChemicalSalt) (result ?C ?CS))))))
*/
fof(a1567,axiom,! [CB,CA,C] : (? [CS] : ((s_instance(CS, s_Entity) & ((s_instance(CA, s_ChemicalAcid) & (s_instance(CB, s_ChemicalBase) & (s_instance(C, s_ChemicalProcess) & (s_patient(C, CA) & s_patient(C, CB))))) => (s_instance(CS, s_ChemicalSalt) & s_result(C, CS))))))).

/*
(instance ChemicalBase SetOrClass)
*/
fof(a1568,axiom,s_instance(s_ChemicalBase, s_SetOrClass)).

/*
(subclass ChemicalBase CompoundSubstance)
*/
fof(a1569,axiom,s_subclass(s_ChemicalBase, s_CompoundSubstance)).

/*
(subclass ChemicalSalt CompoundSubstance)
*/
fof(a1570,axiom,s_subclass(s_ChemicalSalt, s_CompoundSubstance)).

/*
(instance SodiumChloride SetOrClass)
*/
fof(a1571,axiom,s_instance(s_SodiumChloride, s_SetOrClass)).

/*
(instance ChemicalSalt SetOrClass)
*/
fof(a1572,axiom,s_instance(s_ChemicalSalt, s_SetOrClass)).

/*
(subclass SodiumChloride ChemicalSalt)
*/
fof(a1573,axiom,s_subclass(s_SodiumChloride, s_ChemicalSalt)).

/*
(names salt SodiumChloride)
*/
fof(a1574,axiom,s_names('salt', s_SodiumChloride)).

/*
(names NaCl SodiumChloride)
*/
fof(a1575,axiom,s_names('NaCl', s_SodiumChloride)).

/*
(forall (?SALT)
 (exists (?SYNTHESIS ?SODIUM ?CHLORINE)
  (and (and (instance ?CHLORINE Object) (instance ?SODIUM Object)
            (instance ?SYNTHESIS Process))
       (=> (instance ?SALT SodiumChloride)
        (and (instance ?SYNTHESIS ChemicalSynthesis)
             (and (resource ?SYNTHESIS ?SODIUM)
                  (and (instance ?SODIUM Sodium)
                       (and (resource ?SYNTHESIS ?CHLORINE)
                            (and (instance ?CHLORINE Chlorine)
                                 (result ?SYNTHESIS ?SALT))))))))))
*/
fof(a1576,axiom,! [SALT] : (? [SYNTHESIS,SODIUM,CHLORINE] : (((s_instance(CHLORINE, s_Object) & s_instance(SODIUM, s_Object) & s_instance(SYNTHESIS, s_Process)) & (s_instance(SALT, s_SodiumChloride) => (s_instance(SYNTHESIS, s_ChemicalSynthesis) & (s_resource(SYNTHESIS, SODIUM) & (s_instance(SODIUM, s_Sodium) & (s_resource(SYNTHESIS, CHLORINE) & (s_instance(CHLORINE, s_Chlorine) & s_result(SYNTHESIS, SALT))))))))))).

/*
(subclass Diamond Mineral)
*/
fof(a1577,axiom,s_subclass(s_Diamond, s_Mineral)).

/*
(instance Diamond SetOrClass)
*/
fof(a1578,axiom,s_instance(s_Diamond, s_SetOrClass)).

/*
(subclass Diamond Carbon)
*/
fof(a1579,axiom,s_subclass(s_Diamond, s_Carbon)).

/*
(subclass SalineSolution Solution)
*/
fof(a1580,axiom,s_subclass(s_SalineSolution, s_Solution)).

/*
(forall (?SOLUTION ?PART)
 (=> (instance ?PART Object)
  (=> (and (instance ?SOLUTION SalineSolution) (part ?PART ?SOLUTION))
   (or (instance ?PART SodiumChloride) (instance ?PART Water)))))
*/
fof(a1581,axiom,! [SOLUTION,PART] : ((s_instance(PART, s_Object) => ((s_instance(SOLUTION, s_SalineSolution) & s_part(PART, SOLUTION)) => (s_instance(PART, s_SodiumChloride) | s_instance(PART, s_Water)))))).

/*
(forall (?WATER)
 (exists (?SYNTHESIS ?HYDROGEN ?OXYGEN)
  (and (and (instance ?OXYGEN Object) (instance ?HYDROGEN Object)
            (instance ?SYNTHESIS Process))
       (=> (instance ?WATER Water)
        (and (instance ?SYNTHESIS ChemicalSynthesis)
             (and (resource ?SYNTHESIS ?HYDROGEN)
                  (and (instance ?HYDROGEN Hydrogen)
                       (and (resource ?SYNTHESIS ?OXYGEN)
                            (and (instance ?OXYGEN Oxygen)
                                 (result ?SYNTHESIS ?WATER))))))))))
*/
fof(a1582,axiom,! [WATER] : (? [SYNTHESIS,HYDROGEN,OXYGEN] : (((s_instance(OXYGEN, s_Object) & s_instance(HYDROGEN, s_Object) & s_instance(SYNTHESIS, s_Process)) & (s_instance(WATER, s_Water) => (s_instance(SYNTHESIS, s_ChemicalSynthesis) & (s_resource(SYNTHESIS, HYDROGEN) & (s_instance(HYDROGEN, s_Hydrogen) & (s_resource(SYNTHESIS, OXYGEN) & (s_instance(OXYGEN, s_Oxygen) & s_result(SYNTHESIS, WATER))))))))))).

/*
(subrelation reactant resource)
*/
fof(a1583,axiom,s_subrelation(s_reactant_m, s_resource_m)).

/*
(instance reactant CaseRole)
*/
fof(a1584,axiom,s_instance(s_reactant_m, s_CaseRole)).

/*
(subrelation reagent instrument)
*/
fof(a1585,axiom,s_subrelation(s_reagent_m, s_instrument_m)).

/*
(instance reagent CaseRole)
*/
fof(a1586,axiom,s_instance(s_reagent_m, s_CaseRole)).

/*
(instance Oil SetOrClass)
*/
fof(a1587,axiom,s_instance(s_Oil, s_SetOrClass)).

/*
(subclass Oil Solution)
*/
fof(a1588,axiom,s_subclass(s_Oil, s_Solution)).

/*
(forall (?OIL)
 (forall (?MIX ?WATER)
  (=> (and (instance ?WATER Object) (instance ?MIX Object))
   (=> (instance ?OIL Oil)
    (not (and (instance ?MIX Mixture)
              (and (part ?WATER ?MIX)
                   (and (instance ?WATER Water) (part ?OIL ?MIX)))))))))
*/
fof(a1589,axiom,! [OIL] : (! [MIX,WATER] : (((s_instance(WATER, s_Object) & s_instance(MIX, s_Object)) => (s_instance(OIL, s_Oil) => (~ (s_instance(MIX, s_Mixture) & (s_part(WATER, MIX) & (s_instance(WATER, s_Water) & s_part(OIL, MIX)))))))))).

/*
(subclass Surfactant Substance)
*/
fof(a1590,axiom,s_subclass(s_Surfactant, s_Substance)).

/*
(instance Surfactant SetOrClass)
*/
fof(a1591,axiom,s_instance(s_Surfactant, s_SetOrClass)).

/*
(subclass Detergent Surfactant)
*/
fof(a1592,axiom,s_subclass(s_Detergent, s_Surfactant)).

/*
(instance Detergent SetOrClass)
*/
fof(a1593,axiom,s_instance(s_Detergent, s_SetOrClass)).

/*
(subclass Detergent Mixture)
*/
fof(a1594,axiom,s_subclass(s_Detergent, s_Mixture)).

/*
(forall (?DETERGENT)
 (=> (instance ?DETERGENT Detergent)
  (hasPurpose ?DETERGENT
   (exists (?REMOVE ?SUBSTANCE ?SURFACE ?OBJECT)
    (and (instance ?REMOVE Removing)
         (and (instance ?SUBSTANCE Substance)
              (and (patient ?REMOVE ?SUBSTANCE)
                   (and (origin ?REMOVE ?SURFACE)
                        (surface ?SURFACE ?OBJECT)))))))))
*/
%% no translation to TPTP available.

/*
(instance Bathing SetOrClass)
*/
fof(a1595,axiom,s_instance(s_Bathing, s_SetOrClass)).

/*
(instance Washing SetOrClass)
*/
fof(a1596,axiom,s_instance(s_Washing, s_SetOrClass)).

/*
(subclass Bathing Washing)
*/
fof(a1597,axiom,s_subclass(s_Bathing, s_Washing)).

/*
(forall (?A ?B)
 (=> (instance ?A Entity)
  (=> (and (instance ?B Bathing) (patient ?B ?A))
   (instance ?A Animal))))
*/
fof(a1598,axiom,! [A,B] : ((s_instance(A, s_Entity) => ((s_instance(B, s_Bathing) & s_patient(B, A)) => s_instance(A, s_Animal))))).

/*
(instance BathingDevice SetOrClass)
*/
fof(a1599,axiom,s_instance(s_BathingDevice, s_SetOrClass)).

/*
(subclass BathingDevice WashingDevice)
*/
fof(a1600,axiom,s_subclass(s_BathingDevice, s_WashingDevice)).

/*
(forall (?PERSON ?BD)
 (=> (instance ?PERSON Entity)
  (=> (instance ?BD BathingDevice)
   (hasPurpose ?BD
    (exists (?B ?P)
     (and (instance ?B Bathing)
          (and (instrument ?B ?BD)
               (and (patient ?B ?PERSON) (instance ?P Human)))))))))
*/
%% no translation to TPTP available.

/*
(instance WashBasin SetOrClass)
*/
fof(a1601,axiom,s_instance(s_WashBasin, s_SetOrClass)).

/*
(subclass WashBasin WashingDevice)
*/
fof(a1602,axiom,s_subclass(s_WashBasin, s_WashingDevice)).

/*
(forall (?B)
 (=> (instance ?B WashBasin)
  (hasPurpose ?B
   (exists (?W ?H)
    (and (instance ?W Washing)
         (and (instrument ?W ?B)
              (and (patient ?W ?H) (instance ?H Hand))))))))
*/
%% no translation to TPTP available.

/*
(subclass Glue Mixture)
*/
fof(a1603,axiom,s_subclass(s_Glue, s_Mixture)).

/*
(instance Glue SetOrClass)
*/
fof(a1604,axiom,s_instance(s_Glue, s_SetOrClass)).

/*
(subclass Glue AttachingDevice)
*/
fof(a1605,axiom,s_subclass(s_Glue, s_AttachingDevice)).

/*
(forall (?GLUE)
 (=> (instance ?GLUE Glue)
  (hasPurpose ?GLUE
   (exists (?ATTACH)
    (and (instance ?ATTACH Attaching) (instrument ?ATTACH ?GLUE))))))
*/
%% no translation to TPTP available.

/*
(instance Glass SetOrClass)
*/
fof(a1606,axiom,s_instance(s_Glass, s_SetOrClass)).

/*
(subclass Glass Mixture)
*/
fof(a1607,axiom,s_subclass(s_Glass, s_Mixture)).

/*
(subclass MetallicAlloy Mixture)
*/
fof(a1608,axiom,s_subclass(s_MetallicAlloy, s_Mixture)).

/*
(forall (?ALLOY)
 (exists (?METAL1 ?METAL2)
  (and (and (instance ?METAL2 Object) (instance ?METAL1 Object))
       (=> (instance ?ALLOY MetallicAlloy)
        (and (instance ?METAL1 Metal)
             (and (instance ?METAL2 Metal)
                  (and (not (equal ?METAL1 ?METAL2))
                       (and (part ?METAL1 ?ALLOY)
                            (part ?METAL2 ?ALLOY)))))))))
*/
fof(a1609,axiom,! [ALLOY] : (? [METAL1,METAL2] : (((s_instance(METAL2, s_Object) & s_instance(METAL1, s_Object)) & (s_instance(ALLOY, s_MetallicAlloy) => (s_instance(METAL1, s_Metal) & (s_instance(METAL2, s_Metal) & ((~ (METAL1 = METAL2)) & (s_part(METAL1, ALLOY) & s_part(METAL2, ALLOY)))))))))).

/*
(instance Steel SetOrClass)
*/
fof(a1610,axiom,s_instance(s_Steel, s_SetOrClass)).

/*
(subclass Steel MetallicAlloy)
*/
fof(a1611,axiom,s_subclass(s_Steel, s_MetallicAlloy)).

/*
(forall (?STEEL)
 (exists (?IRON)
  (and (instance ?IRON Object)
       (=> (instance ?STEEL Steel)
        (and (instance ?IRON Iron) (part ?IRON ?STEEL))))))
*/
fof(a1612,axiom,! [STEEL] : (? [IRON] : ((s_instance(IRON, s_Object) & (s_instance(STEEL, s_Steel) => (s_instance(IRON, s_Iron) & s_part(IRON, STEEL))))))).

/*
(instance Brass SetOrClass)
*/
fof(a1613,axiom,s_instance(s_Brass, s_SetOrClass)).

/*
(instance MetallicAlloy SetOrClass)
*/
fof(a1614,axiom,s_instance(s_MetallicAlloy, s_SetOrClass)).

/*
(subclass Brass MetallicAlloy)
*/
fof(a1615,axiom,s_subclass(s_Brass, s_MetallicAlloy)).

/*
(forall (?BRASS)
 (exists (?COPPER ?ZINC)
  (and (and (instance ?ZINC Object) (instance ?COPPER Object))
       (=> (instance ?BRASS Brass)
        (and (instance ?COPPER Copper)
             (and (instance ?ZINC Zinc)
                  (and (part ?COPPER ?BRASS) (part ?ZINC ?BRASS))))))))
*/
fof(a1616,axiom,! [BRASS] : (? [COPPER,ZINC] : (((s_instance(ZINC, s_Object) & s_instance(COPPER, s_Object)) & (s_instance(BRASS, s_Brass) => (s_instance(COPPER, s_Copper) & (s_instance(ZINC, s_Zinc) & (s_part(COPPER, BRASS) & s_part(ZINC, BRASS))))))))).

/*
(subclass Powder Substance)
*/
fof(a1617,axiom,s_subclass(s_Powder, s_Substance)).

/*
(forall (?POWDER)
 (=> (instance ?POWDER Powder) (attribute ?POWDER Solid)))
*/
fof(a1618,axiom,! [POWDER] : ((s_instance(POWDER, s_Powder) => s_attribute(POWDER, s_Solid)))).

/*
(instance Fallout SetOrClass)
*/
fof(a1619,axiom,s_instance(s_Fallout, s_SetOrClass)).

/*
(subclass Fallout Powder)
*/
fof(a1620,axiom,s_subclass(s_Fallout, s_Powder)).

/*
(forall (?POWDER)
 (=> (instance ?POWDER Fallout)
  (capability RadiatingNuclear instrument ?POWDER)))
*/
fof(a1621,axiom,! [POWDER] : ((s_instance(POWDER, s_Fallout) => s_capability(s_RadiatingNuclear, s_instrument_m, POWDER)))).

/*
(instance Fog SetOrClass)
*/
fof(a1622,axiom,s_instance(s_Fog, s_SetOrClass)).

/*
(subclass Fog WaterCloud)
*/
fof(a1623,axiom,s_subclass(s_Fog, s_WaterCloud)).

/*
(forall (?FOG)
 (exists (?LAND)
  (and (instance ?LAND Entity)
       (=> (instance ?FOG Fog)
        (and (instance ?LAND LandArea) (meetsSpatially ?FOG ?LAND))))))
*/
fof(a1624,axiom,! [FOG] : (? [LAND] : ((s_instance(LAND, s_Entity) & (s_instance(FOG, s_Fog) => (s_instance(LAND, s_LandArea) & s_meetsSpatially(FOG, LAND))))))).

/*
(instance Ice SetOrClass)
*/
fof(a1625,axiom,s_instance(s_Ice, s_SetOrClass)).

/*
(subclass Ice Water)
*/
fof(a1626,axiom,s_subclass(s_Ice, s_Water)).

/*
(forall (?ICE)
 (<=> (instance ?ICE Ice)
  (and (instance ?ICE Water) (attribute ?ICE Solid))))
*/
fof(a1627,axiom,! [ICE] : ((s_instance(ICE, s_Ice) <=> (s_instance(ICE, s_Water) & s_attribute(ICE, s_Solid))))).

/*
(forall (?NUMBER ?ICE)
 (=> (instance ?NUMBER RealNumber)
  (=>
   (and (instance ?ICE Ice)
        (measure ?ICE (MeasureFn ?NUMBER CelsiusDegree)))
   (lessThanOrEqualTo ?NUMBER 0))))
*/
fof(a1628,axiom,! [NUMBER,ICE] : ((s_instance(NUMBER, s_RealNumber) => ((s_instance(ICE, s_Ice) & s_measure(ICE, s_MeasureFn(NUMBER, s_CelsiusDegree))) => lesseq(NUMBER, 0))))).

/*
(subclass Field LandArea)
*/
fof(a1629,axiom,s_subclass(s_Field, s_LandArea)).

/*
(forall (?FIELD)
 (forall (?TREE)
  (=> (instance ?TREE Physical)
   (=> (instance ?FIELD Field)
    (not (and (instance ?TREE BotanicalTree)
              (located ?TREE ?FIELD)))))))
*/
fof(a1630,axiom,! [FIELD] : (! [TREE] : ((s_instance(TREE, s_Physical) => (s_instance(FIELD, s_Field) => (~ (s_instance(TREE, s_BotanicalTree) & s_located(TREE, FIELD)))))))).

/*
(instance Lawn SetOrClass)
*/
fof(a1631,axiom,s_instance(s_Lawn, s_SetOrClass)).

/*
(instance Field SetOrClass)
*/
fof(a1632,axiom,s_instance(s_Field, s_SetOrClass)).

/*
(subclass Lawn Field)
*/
fof(a1633,axiom,s_subclass(s_Lawn, s_Field)).

/*
(forall (?L)
 (exists (?G)
  (and (instance ?G Physical)
       (=> (instance ?L Lawn)
        (and (instance ?G Grass) (located ?G ?L))))))
*/
fof(a1634,axiom,! [L] : (? [G] : ((s_instance(G, s_Physical) & (s_instance(L, s_Lawn) => (s_instance(G, s_Grass) & s_located(G, L))))))).

/*
(instance MilitaryFront SetOrClass)
*/
fof(a1635,axiom,s_instance(s_MilitaryFront, s_SetOrClass)).

/*
(subclass MilitaryFront GeographicArea)
*/
fof(a1636,axiom,s_subclass(s_MilitaryFront, s_GeographicArea)).

/*
(forall (?AREA ?TIME)
 (exists (?BATTLE)
  (and (and (instance ?BATTLE Process) (instance ?BATTLE TimePosition))
       (=> (and (instance ?TIME TimePosition) (instance ?AREA Object))
        (=> (holdsDuring ?TIME (instance ?AREA MilitaryFront))
         (and (instance ?BATTLE Battle)
              (and (eventLocated ?BATTLE ?AREA)
                   (temporalPart ?TIME ?BATTLE))))))))
*/
%% no translation to TPTP available.

/*
(partition3 Region GeographicArea SpaceRegion)
*/
fof(a1637,axiom,s_partition3(s_Region, s_GeographicArea, s_SpaceRegion)).

/*
(subclass AtmosphericRegion SpaceRegion)
*/
fof(a1638,axiom,s_subclass(s_AtmosphericRegion, s_SpaceRegion)).

/*
(subclass StreamWaterArea WaterArea)
*/
fof(a1639,axiom,s_subclass(s_StreamWaterArea, s_WaterArea)).

/*
(instance StreamWaterArea SetOrClass)
*/
fof(a1640,axiom,s_instance(s_StreamWaterArea, s_SetOrClass)).

/*
(subclass StreamWaterArea FlowRegion)
*/
fof(a1641,axiom,s_subclass(s_StreamWaterArea, s_FlowRegion)).

/*
(disjoint StreamWaterArea StaticWaterArea)
*/
fof(a1642,axiom,s_disjoint(s_StreamWaterArea, s_StaticWaterArea)).

/*
(instance StaticWaterArea SetOrClass)
*/
fof(a1643,axiom,s_instance(s_StaticWaterArea, s_SetOrClass)).

/*
(subclass StaticWaterArea WaterArea)
*/
fof(a1644,axiom,s_subclass(s_StaticWaterArea, s_WaterArea)).

/*
(instance FlowRegion SetOrClass)
*/
fof(a1645,axiom,s_instance(s_FlowRegion, s_SetOrClass)).

/*
(subclass FlowRegion Region)
*/
fof(a1646,axiom,s_subclass(s_FlowRegion, s_Region)).

/*
(forall (?FR ?FLUID)
 (=> (instance ?FLUID Object)
  (=> (and (instance ?FR FlowRegion) (located ?FLUID ?FR))
   (attribute ?FLUID Fluid))))
*/
fof(a1647,axiom,! [FR,FLUID] : ((s_instance(FLUID, s_Object) => ((s_instance(FR, s_FlowRegion) & s_located(FLUID, FR)) => s_attribute(FLUID, s_Fluid))))).

/*
(subclass SpaceRegion Region)
*/
fof(a1648,axiom,s_subclass(s_SpaceRegion, s_Region)).

/*
(disjoint SpaceRegion GeographicArea)
*/
fof(a1649,axiom,s_disjoint(s_SpaceRegion, s_GeographicArea)).

/*
(partition3 SpaceRegion AtmosphericRegion OuterSpaceRegion)
*/
fof(a1650,axiom,s_partition3(s_SpaceRegion, s_AtmosphericRegion, s_OuterSpaceRegion)).

/*
(instance OuterSpaceRegion SetOrClass)
*/
fof(a1651,axiom,s_instance(s_OuterSpaceRegion, s_SetOrClass)).

/*
(instance SpaceRegion SetOrClass)
*/
fof(a1652,axiom,s_instance(s_SpaceRegion, s_SetOrClass)).

/*
(subclass OuterSpaceRegion SpaceRegion)
*/
fof(a1653,axiom,s_subclass(s_OuterSpaceRegion, s_SpaceRegion)).

/*
(instance StormFront SetOrClass)
*/
fof(a1654,axiom,s_instance(s_StormFront, s_SetOrClass)).

/*
(instance AtmosphericRegion SetOrClass)
*/
fof(a1655,axiom,s_instance(s_AtmosphericRegion, s_SetOrClass)).

/*
(subclass StormFront AtmosphericRegion)
*/
fof(a1656,axiom,s_subclass(s_StormFront, s_AtmosphericRegion)).

/*
(forall (?FRONT)
 (exists (?AIR1 ?AIR2)
  (and (and (instance ?AIR2 Object) (instance ?AIR1 Object))
       (=> (instance ?FRONT StormFront)
        (and (instance ?AIR1 Air)
             (and (instance ?AIR2 Air)
                  (between ?AIR1 ?FRONT ?AIR2)))))))
*/
fof(a1657,axiom,! [FRONT] : (? [AIR1,AIR2] : (((s_instance(AIR2, s_Object) & s_instance(AIR1, s_Object)) & (s_instance(FRONT, s_StormFront) => (s_instance(AIR1, s_Air) & (s_instance(AIR2, s_Air) & s_between(AIR1, FRONT, AIR2)))))))).

/*
(instance Inside PositionalAttribute)
*/
fof(a1658,axiom,s_instance(s_Inside, s_PositionalAttribute)).

/*
(forall (?INSIDE)
 (exists (?OBJECT)
  (forall (?THING)
   (exists (?PART)
    (and (instance ?PART Object)
         (=> (instance ?THING Physical)
          (and (instance ?OBJECT Object)
               (=> (instance ?INSIDE Inside)
                (=> (located ?THING ?INSIDE)
                 (and (interiorPart ?PART ?OBJECT)
                      (located ?THING ?PART)))))))))))
*/
fof(a1659,axiom,! [INSIDE] : (? [OBJECT] : (! [THING] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(THING, s_Physical) => (s_instance(OBJECT, s_Object) & (s_instance(INSIDE, s_Inside) => (s_located(THING, INSIDE) => (s_interiorPart(PART, OBJECT) & s_located(THING, PART)))))))))))).

/*
(instance Outside PositionalAttribute)
*/
fof(a1660,axiom,s_instance(s_Outside, s_PositionalAttribute)).

/*
(contraryAttribute2 Inside Outside)
*/
fof(a1661,axiom,s_contraryAttribute2(s_Inside, s_Outside)).

/*
(forall (?REGION ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?REGION Object))
  (=> (orientation ?OBJ ?REGION Outside) (instance ?REGION Region))))
*/
fof(a1662,axiom,! [REGION,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(REGION, s_Object)) => (s_orientation(OBJ, REGION, s_Outside) => s_instance(REGION, s_Region))))).

/*
(forall (?REGION ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?REGION Object))
  (=> (orientation ?OBJ ?REGION Inside) (instance ?REGION Region))))
*/
fof(a1663,axiom,! [REGION,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(REGION, s_Object)) => (s_orientation(OBJ, REGION, s_Inside) => s_instance(REGION, s_Region))))).

/*
(forall (?REGION ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?REGION Object))
  (<=> (orientation ?OBJ ?REGION Outside)
   (not (partlyLocated ?OBJ ?REGION)))))
*/
fof(a1664,axiom,! [REGION,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(REGION, s_Object)) => (s_orientation(OBJ, REGION, s_Outside) <=> (~ s_partlyLocated(OBJ, REGION)))))).

/*
(forall (?REGION ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?REGION Object))
  (=> (part ?OBJ ?REGION) (not (orientation ?OBJ ?REGION Outside)))))
*/
fof(a1665,axiom,! [REGION,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(REGION, s_Object)) => (s_part(OBJ, REGION) => (~ s_orientation(OBJ, REGION, s_Outside)))))).

/*
(instance Outdoors SetOrClass)
*/
fof(a1666,axiom,s_instance(s_Outdoors, s_SetOrClass)).

/*
(subclass Outdoors Region)
*/
fof(a1667,axiom,s_subclass(s_Outdoors, s_Region)).

/*
(forall (?OUTDOORS)
 (forall (?BUILDING)
  (=> (instance ?BUILDING Object)
   (=> (instance ?OUTDOORS Outdoors)
    (not (and (instance ?BUILDING Building)
              (orientation ?OUTDOORS ?BUILDING Inside)))))))
*/
fof(a1668,axiom,! [OUTDOORS] : (! [BUILDING] : ((s_instance(BUILDING, s_Object) => (s_instance(OUTDOORS, s_Outdoors) => (~ (s_instance(BUILDING, s_Building) & s_orientation(OUTDOORS, BUILDING, s_Inside)))))))).

/*
(instance Indoors SetOrClass)
*/
fof(a1669,axiom,s_instance(s_Indoors, s_SetOrClass)).

/*
(subclass Indoors Region)
*/
fof(a1670,axiom,s_subclass(s_Indoors, s_Region)).

/*
(disjoint Indoors Outdoors)
*/
fof(a1671,axiom,s_disjoint(s_Indoors, s_Outdoors)).

/*
(forall (?INDOORS)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?INDOORS Indoors)
        (and (instance ?BUILDING Building)
             (orientation ?INDOORS ?BUILDING Inside))))))
*/
fof(a1672,axiom,! [INDOORS] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(INDOORS, s_Indoors) => (s_instance(BUILDING, s_Building) & s_orientation(INDOORS, BUILDING, s_Inside))))))).

/*
(instance BiologicalSpecies SetOrClass)
*/
fof(a1673,axiom,s_instance(s_BiologicalSpecies, s_SetOrClass)).

/*
(instance Class SetOrClass)
*/
fof(a1674,axiom,s_instance(s_Class, s_SetOrClass)).

/*
(subclass BiologicalSpecies Class)
*/
fof(a1675,axiom,s_subclass(s_BiologicalSpecies, s_Class)).

/*
(forall (?SPECIES)
 (=> (instance ?SPECIES BiologicalSpecies)
  (subclass ?SPECIES Organism)))
*/
fof(a1676,axiom,! [SPECIES] : ((s_instance(SPECIES, s_BiologicalSpecies) => s_subclass(SPECIES, s_Organism)))).

/*
(subclass Wood Tissue)
*/
fof(a1677,axiom,s_subclass(s_Wood, s_Tissue)).

/*
(instance Wood SetOrClass)
*/
fof(a1678,axiom,s_instance(s_Wood, s_SetOrClass)).

/*
(subclass Wood PlantSubstance)
*/
fof(a1679,axiom,s_subclass(s_Wood, s_PlantSubstance)).

/*
(forall (?X)
 (exists (?CELL)
  (and (instance ?CELL Object)
       (=> (instance ?X Wood)
        (and (instance ?CELL Cellulose) (part ?CELL ?X))))))
*/
fof(a1680,axiom,! [X] : (? [CELL] : ((s_instance(CELL, s_Object) & (s_instance(X, s_Wood) => (s_instance(CELL, s_Cellulose) & s_part(CELL, X))))))).

/*
(subclass WoodArtifact Artifact)
*/
fof(a1681,axiom,s_subclass(s_WoodArtifact, s_Artifact)).

/*
(forall (?W) (=> (instance ?W WoodArtifact) (material Wood ?W)))
*/
fof(a1682,axiom,! [W] : ((s_instance(W, s_WoodArtifact) => s_material(s_Wood, W)))).

/*
(instance OakWood SetOrClass)
*/
fof(a1683,axiom,s_instance(s_OakWood, s_SetOrClass)).

/*
(instance WoodArtifact SetOrClass)
*/
fof(a1684,axiom,s_instance(s_WoodArtifact, s_SetOrClass)).

/*
(subclass OakWood WoodArtifact)
*/
fof(a1685,axiom,s_subclass(s_OakWood, s_WoodArtifact)).

/*
(subclass Rubber PlantSubstance)
*/
fof(a1686,axiom,s_subclass(s_Rubber, s_PlantSubstance)).

/*
(subclass Rubber BodySubstance)
*/
fof(a1687,axiom,s_subclass(s_Rubber, s_BodySubstance)).

/*
(instance Rubber SetOrClass)
*/
fof(a1688,axiom,s_instance(s_Rubber, s_SetOrClass)).

/*
(subclass Rubber Hydrocarbon)
*/
fof(a1689,axiom,s_subclass(s_Rubber, s_Hydrocarbon)).

/*
(forall (?R)
 (exists (?T)
  (and (instance ?T Object)
       (=> (instance ?R Rubber)
        (and (instance ?T BotanicalTree) (part ?R ?T))))))
*/
fof(a1690,axiom,! [R] : (? [T] : ((s_instance(T, s_Object) & (s_instance(R, s_Rubber) => (s_instance(T, s_BotanicalTree) & s_part(R, T))))))).

/*
(instance Hydrocarbon SetOrClass)
*/
fof(a1691,axiom,s_instance(s_Hydrocarbon, s_SetOrClass)).

/*
(subclass Plastic Hydrocarbon)
*/
fof(a1692,axiom,s_subclass(s_Plastic, s_Hydrocarbon)).

/*
(instance Polypropylene SetOrClass)
*/
fof(a1693,axiom,s_instance(s_Polypropylene, s_SetOrClass)).

/*
(subclass Polypropylene Plastic)
*/
fof(a1694,axiom,s_subclass(s_Polypropylene, s_Plastic)).

/*
(instance Polystyrene SetOrClass)
*/
fof(a1695,axiom,s_instance(s_Polystyrene, s_SetOrClass)).

/*
(instance Plastic SetOrClass)
*/
fof(a1696,axiom,s_instance(s_Plastic, s_SetOrClass)).

/*
(subclass Polystyrene Plastic)
*/
fof(a1697,axiom,s_subclass(s_Polystyrene, s_Plastic)).

/*
(subclass Cellulose PlantSubstance)
*/
fof(a1698,axiom,s_subclass(s_Cellulose, s_PlantSubstance)).

/*
(instance Cellulose SetOrClass)
*/
fof(a1699,axiom,s_instance(s_Cellulose, s_SetOrClass)).

/*
(subclass Cellulose Carbohydrate)
*/
fof(a1700,axiom,s_subclass(s_Cellulose, s_Carbohydrate)).

/*
(instance Starch SetOrClass)
*/
fof(a1701,axiom,s_instance(s_Starch, s_SetOrClass)).

/*
(subclass Starch Carbohydrate)
*/
fof(a1702,axiom,s_subclass(s_Starch, s_Carbohydrate)).

/*
(instance Sugar SetOrClass)
*/
fof(a1703,axiom,s_instance(s_Sugar, s_SetOrClass)).

/*
(subclass Sugar Carbohydrate)
*/
fof(a1704,axiom,s_subclass(s_Sugar, s_Carbohydrate)).

/*
(instance Nectar SetOrClass)
*/
fof(a1705,axiom,s_instance(s_Nectar, s_SetOrClass)).

/*
(subclass Nectar PlantSubstance)
*/
fof(a1706,axiom,s_subclass(s_Nectar, s_PlantSubstance)).

/*
(instance Medicine SetOrClass)
*/
fof(a1707,axiom,s_instance(s_Medicine, s_SetOrClass)).

/*
(subclass Medicine BiologicallyActiveSubstance)
*/
fof(a1708,axiom,s_subclass(s_Medicine, s_BiologicallyActiveSubstance)).

/*
(forall (?M)
 (exists (?P)
  (and (instance ?P Process)
       (=> (instance ?M Medicine)
        (and (instance ?P TherapeuticProcess) (instrument ?P ?M))))))
*/
fof(a1709,axiom,! [M] : (? [P] : ((s_instance(P, s_Process) & (s_instance(M, s_Medicine) => (s_instance(P, s_TherapeuticProcess) & s_instrument(P, M))))))).

/*
(instance Stimulant SetOrClass)
*/
fof(a1710,axiom,s_instance(s_Stimulant, s_SetOrClass)).

/*
(subclass Stimulant BiologicallyActiveSubstance)
*/
fof(a1711,axiom,s_subclass(s_Stimulant, s_BiologicallyActiveSubstance)).

/*
(disjoint Stimulant Depressant)
*/
fof(a1712,axiom,s_disjoint(s_Stimulant, s_Depressant)).

/*
(subclass Depressant BiologicallyActiveSubstance)
*/
fof(a1713,axiom,s_subclass(s_Depressant, s_BiologicallyActiveSubstance)).

/*
(subclass Opium BiologicallyActiveSubstance)
*/
fof(a1714,axiom,s_subclass(s_Opium, s_BiologicallyActiveSubstance)).

/*
(subclass Opium PlantSubstance)
*/
fof(a1715,axiom,s_subclass(s_Opium, s_PlantSubstance)).

/*
(instance Opium SetOrClass)
*/
fof(a1716,axiom,s_instance(s_Opium, s_SetOrClass)).

/*
(subclass Opium Depressant)
*/
fof(a1717,axiom,s_subclass(s_Opium, s_Depressant)).

/*
(forall (?O)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?O Opium)
        (and (instance ?A Alkaloid) (part ?A ?O))))))
*/
fof(a1718,axiom,! [O] : (? [A] : ((s_instance(A, s_Object) & (s_instance(O, s_Opium) => (s_instance(A, s_Alkaloid) & s_part(A, O))))))).

/*
(instance Grass SetOrClass)
*/
fof(a1719,axiom,s_instance(s_Grass, s_SetOrClass)).

/*
(subclass Grass FloweringPlant)
*/
fof(a1720,axiom,s_subclass(s_Grass, s_FloweringPlant)).

/*
(instance Lilac SetOrClass)
*/
fof(a1721,axiom,s_instance(s_Lilac, s_SetOrClass)).

/*
(subclass Lilac FloweringPlant)
*/
fof(a1722,axiom,s_subclass(s_Lilac, s_FloweringPlant)).

/*
(instance Tobacco SetOrClass)
*/
fof(a1723,axiom,s_instance(s_Tobacco, s_SetOrClass)).

/*
(subclass Tobacco FloweringPlant)
*/
fof(a1724,axiom,s_subclass(s_Tobacco, s_FloweringPlant)).

/*
(instance Lesion SetOrClass)
*/
fof(a1725,axiom,s_instance(s_Lesion, s_SetOrClass)).

/*
(subclass Lesion AbnormalAnatomicalStructure)
*/
fof(a1726,axiom,s_subclass(s_Lesion, s_AbnormalAnatomicalStructure)).

/*
(forall (?L)
 (exists (?I)
  (and (instance ?I Process)
       (=> (instance ?L Lesion)
        (and (instance ?I Injuring) (result ?I ?L))))))
*/
fof(a1727,axiom,! [L] : (? [I] : ((s_instance(I, s_Process) & (s_instance(L, s_Lesion) => (s_instance(I, s_Injuring) & s_result(I, L))))))).

/*
(forall (?L)
 (exists (?S ?O)
  (and (and (instance ?O SelfConnectedObject)
            (instance ?S SelfConnectedObject))
       (=> (instance ?L Lesion)
        (and (surface ?S ?O)
             (and (instance ?O Organ) (located ?L ?S)))))))
*/
fof(a1728,axiom,! [L] : (? [S,O] : (((s_instance(O, s_SelfConnectedObject) & s_instance(S, s_SelfConnectedObject)) & (s_instance(L, s_Lesion) => (s_surface(S, O) & (s_instance(O, s_Organ) & s_located(L, S)))))))).

/*
(instance Scar SetOrClass)
*/
fof(a1729,axiom,s_instance(s_Scar, s_SetOrClass)).

/*
(subclass Scar AbnormalAnatomicalStructure)
*/
fof(a1730,axiom,s_subclass(s_Scar, s_AbnormalAnatomicalStructure)).

/*
(forall (?S)
 (exists (?T ?OP ?L)
  (and (and (instance ?L Entity) (instance ?OP Process)
            (instance ?T TimePosition))
       (=> (instance ?S Scar)
        (and (temporalPart ?T (PastFn (WhenFn ?S)))
             (and (holdsDuring ?T (instance ?L Lesion))
                  (and (instance ?OP OrganOrTissueProcess)
                       (and (patient ?OP ?L) (result ?OP ?S)))))))))
*/
%% no translation to TPTP available.

/*
(instance Tumor SetOrClass)
*/
fof(a1731,axiom,s_instance(s_Tumor, s_SetOrClass)).

/*
(subclass Tumor AbnormalAnatomicalStructure)
*/
fof(a1732,axiom,s_subclass(s_Tumor, s_AbnormalAnatomicalStructure)).

/*
(forall (?TUMOR)
 (forall (?PART)
  (=> (instance ?PART Object)
   (=> (instance ?TUMOR Tumor)
    (=> (part ?PART ?TUMOR) (instance ?PART Tissue))))))
*/
fof(a1733,axiom,! [TUMOR] : (! [PART] : ((s_instance(PART, s_Object) => (s_instance(TUMOR, s_Tumor) => (s_part(PART, TUMOR) => s_instance(PART, s_Tissue))))))).

/*
(subclass Tendon Tissue)
*/
fof(a1734,axiom,s_subclass(s_Tendon, s_Tissue)).

/*
(instance Tendon SetOrClass)
*/
fof(a1735,axiom,s_instance(s_Tendon, s_SetOrClass)).

/*
(subclass Tendon AnimalSubstance)
*/
fof(a1736,axiom,s_subclass(s_Tendon, s_AnimalSubstance)).

/*
(forall (?T)
 (exists (?M ?B)
  (and (and (instance ?B Object) (instance ?M Object))
       (=> (instance ?T Tendon)
        (and (instance ?M Muscle)
             (and (instance ?B Bone) (connects ?T ?M ?B)))))))
*/
fof(a1737,axiom,! [T] : (? [M,B] : (((s_instance(B, s_Object) & s_instance(M, s_Object)) & (s_instance(T, s_Tendon) => (s_instance(M, s_Muscle) & (s_instance(B, s_Bone) & s_connects(T, M, B)))))))).

/*
(instance Sweat SetOrClass)
*/
fof(a1738,axiom,s_instance(s_Sweat, s_SetOrClass)).

/*
(subclass Sweat AnimalSubstance)
*/
fof(a1739,axiom,s_subclass(s_Sweat, s_AnimalSubstance)).

/*
(forall (?SWEAT)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?SWEAT Sweat)
        (and (instance ?PART SodiumChloride) (part ?PART ?SWEAT))))))
*/
fof(a1740,axiom,! [SWEAT] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(SWEAT, s_Sweat) => (s_instance(PART, s_SodiumChloride) & s_part(PART, SWEAT))))))).

/*
(subclass PlantLeaf PlantAnatomicalStructure)
*/
fof(a1741,axiom,s_subclass(s_PlantLeaf, s_PlantAnatomicalStructure)).

/*
(instance PlantLeaf SetOrClass)
*/
fof(a1742,axiom,s_instance(s_PlantLeaf, s_SetOrClass)).

/*
(subclass PlantLeaf Organ)
*/
fof(a1743,axiom,s_subclass(s_PlantLeaf, s_Organ)).

/*
(subclass PlantBranch PlantAnatomicalStructure)
*/
fof(a1744,axiom,s_subclass(s_PlantBranch, s_PlantAnatomicalStructure)).

/*
(subclass PlantBranch BodyPart)
*/
fof(a1745,axiom,s_subclass(s_PlantBranch, s_BodyPart)).

/*
(subclass BotanicalTree FloweringPlant)
*/
fof(a1746,axiom,s_subclass(s_BotanicalTree, s_FloweringPlant)).

/*
(forall (?X) (=> (instance ?X BotanicalTree) (material Wood ?X)))
*/
fof(a1747,axiom,! [X] : ((s_instance(X, s_BotanicalTree) => s_material(s_Wood, X)))).

/*
(instance TreeBranch SetOrClass)
*/
fof(a1748,axiom,s_instance(s_TreeBranch, s_SetOrClass)).

/*
(instance PlantBranch SetOrClass)
*/
fof(a1749,axiom,s_instance(s_PlantBranch, s_SetOrClass)).

/*
(subclass TreeBranch PlantBranch)
*/
fof(a1750,axiom,s_subclass(s_TreeBranch, s_PlantBranch)).

/*
(forall (?B)
 (exists (?T)
  (and (instance ?T Object)
       (=> (instance ?B TreeBranch)
        (and (instance ?T BotanicalTree) (part ?B ?T))))))
*/
fof(a1751,axiom,! [B] : (? [T] : ((s_instance(T, s_Object) & (s_instance(B, s_TreeBranch) => (s_instance(T, s_BotanicalTree) & s_part(B, T))))))).

/*
(instance WillowTree SetOrClass)
*/
fof(a1752,axiom,s_instance(s_WillowTree, s_SetOrClass)).

/*
(instance BotanicalTree SetOrClass)
*/
fof(a1753,axiom,s_instance(s_BotanicalTree, s_SetOrClass)).

/*
(subclass WillowTree BotanicalTree)
*/
fof(a1754,axiom,s_subclass(s_WillowTree, s_BotanicalTree)).

/*
(subclass PlantRoot PlantAnatomicalStructure)
*/
fof(a1755,axiom,s_subclass(s_PlantRoot, s_PlantAnatomicalStructure)).

/*
(instance PlantRoot SetOrClass)
*/
fof(a1756,axiom,s_instance(s_PlantRoot, s_SetOrClass)).

/*
(subclass PlantRoot Organ)
*/
fof(a1757,axiom,s_subclass(s_PlantRoot, s_Organ)).

/*
(subclass Flower PlantAnatomicalStructure)
*/
fof(a1758,axiom,s_subclass(s_Flower, s_PlantAnatomicalStructure)).

/*
(instance Flower SetOrClass)
*/
fof(a1759,axiom,s_instance(s_Flower, s_SetOrClass)).

/*
(subclass Flower Organ)
*/
fof(a1760,axiom,s_subclass(s_Flower, s_Organ)).

/*
(forall (?FLOWER)
 (exists (?PLANT ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?PLANT Object))
       (=> (instance ?FLOWER Flower)
        (and (instance ?PLANT FloweringPlant)
             (holdsDuring ?TIME (part ?FLOWER ?PLANT)))))))
*/
%% no translation to TPTP available.

/*
(instance Antibody SetOrClass)
*/
fof(a1761,axiom,s_instance(s_Antibody, s_SetOrClass)).

/*
(subclass Antibody Protein)
*/
fof(a1762,axiom,s_subclass(s_Antibody, s_Protein)).

/*
(forall (?BODY)
 (=> (instance ?BODY Antibody)
  (hasPurpose ?BODY
   (exists (?DEST ?ANTI)
    (and (instance ?DEST Destruction)
         (and (agent ?DEST ?BODY)
              (and (patient ?DEST ?ANTI) (instance ?ANTI Antigen))))))))
*/
%% no translation to TPTP available.

/*
(instance Antibiotic SetOrClass)
*/
fof(a1763,axiom,s_instance(s_Antibiotic, s_SetOrClass)).

/*
(subclass Antibiotic BiologicallyActiveSubstance)
*/
fof(a1764,axiom,s_subclass(s_Antibiotic, s_BiologicallyActiveSubstance)).

/*
(subclass Antigen BiologicallyActiveSubstance)
*/
fof(a1765,axiom,s_subclass(s_Antigen, s_BiologicallyActiveSubstance)).

/*
(instance AntigenA SetOrClass)
*/
fof(a1766,axiom,s_instance(s_AntigenA, s_SetOrClass)).

/*
(subclass AntigenA Antigen)
*/
fof(a1767,axiom,s_subclass(s_AntigenA, s_Antigen)).

/*
(instance AntigenB SetOrClass)
*/
fof(a1768,axiom,s_instance(s_AntigenB, s_SetOrClass)).

/*
(instance Antigen SetOrClass)
*/
fof(a1769,axiom,s_instance(s_Antigen, s_SetOrClass)).

/*
(subclass AntigenB Antigen)
*/
fof(a1770,axiom,s_subclass(s_AntigenB, s_Antigen)).

/*
(subclass BloodCell Cell)
*/
fof(a1771,axiom,s_subclass(s_BloodCell, s_Cell)).

/*
(subclass BloodCell AnimalAnatomicalStructure)
*/
fof(a1772,axiom,s_subclass(s_BloodCell, s_AnimalAnatomicalStructure)).

/*
(forall (?C)
 (exists (?B)
  (and (instance ?B Object)
       (=> (instance ?C BloodCell)
        (and (instance ?B Blood) (part ?C ?B))))))
*/
fof(a1773,axiom,! [C] : (? [B] : ((s_instance(B, s_Object) & (s_instance(C, s_BloodCell) => (s_instance(B, s_Blood) & s_part(C, B))))))).

/*
(instance RedBloodCell SetOrClass)
*/
fof(a1774,axiom,s_instance(s_RedBloodCell, s_SetOrClass)).

/*
(subclass RedBloodCell BloodCell)
*/
fof(a1775,axiom,s_subclass(s_RedBloodCell, s_BloodCell)).

/*
(forall (?C)
 (forall (?N)
  (=> (instance ?N Object)
   (=> (instance ?C RedBloodCell)
    (not (and (instance ?N CellNucleus) (part ?N ?C)))))))
*/
fof(a1776,axiom,! [C] : (! [N] : ((s_instance(N, s_Object) => (s_instance(C, s_RedBloodCell) => (~ (s_instance(N, s_CellNucleus) & s_part(N, C)))))))).

/*
(instance WhiteBloodCell SetOrClass)
*/
fof(a1777,axiom,s_instance(s_WhiteBloodCell, s_SetOrClass)).

/*
(instance BloodCell SetOrClass)
*/
fof(a1778,axiom,s_instance(s_BloodCell, s_SetOrClass)).

/*
(subclass WhiteBloodCell BloodCell)
*/
fof(a1779,axiom,s_subclass(s_WhiteBloodCell, s_BloodCell)).

/*
(forall (?C)
 (exists (?N)
  (and (instance ?N Object)
       (=> (instance ?C WhiteBloodCell)
        (and (instance ?N CellNucleus) (part ?N ?C))))))
*/
fof(a1780,axiom,! [C] : (? [N] : ((s_instance(N, s_Object) & (s_instance(C, s_WhiteBloodCell) => (s_instance(N, s_CellNucleus) & s_part(N, C))))))).

/*
(instance BloodTypeA SetOrClass)
*/
fof(a1781,axiom,s_instance(s_BloodTypeA, s_SetOrClass)).

/*
(subclass BloodTypeA Blood)
*/
fof(a1782,axiom,s_subclass(s_BloodTypeA, s_Blood)).

/*
(forall (?B)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?B BloodTypeA)
        (and (instance ?A AntigenA) (part ?A ?B))))))
*/
fof(a1783,axiom,! [B] : (? [A] : ((s_instance(A, s_Object) & (s_instance(B, s_BloodTypeA) => (s_instance(A, s_AntigenA) & s_part(A, B))))))).

/*
(forall (?B)
 (forall (?A)
  (=> (instance ?A Object)
   (=> (instance ?B BloodTypeA)
    (not (and (instance ?A AntigenB) (part ?A ?B)))))))
*/
fof(a1784,axiom,! [B] : (! [A] : ((s_instance(A, s_Object) => (s_instance(B, s_BloodTypeA) => (~ (s_instance(A, s_AntigenB) & s_part(A, B)))))))).

/*
(instance BloodTypeAB SetOrClass)
*/
fof(a1785,axiom,s_instance(s_BloodTypeAB, s_SetOrClass)).

/*
(subclass BloodTypeAB Blood)
*/
fof(a1786,axiom,s_subclass(s_BloodTypeAB, s_Blood)).

/*
(forall (?B)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?B BloodTypeAB)
        (and (instance ?A AntigenA) (part ?A ?B))))))
*/
fof(a1787,axiom,! [B] : (? [A] : ((s_instance(A, s_Object) & (s_instance(B, s_BloodTypeAB) => (s_instance(A, s_AntigenA) & s_part(A, B))))))).

/*
(forall (?B)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?B BloodTypeAB)
        (and (instance ?A AntigenB) (part ?A ?B))))))
*/
fof(a1788,axiom,! [B] : (? [A] : ((s_instance(A, s_Object) & (s_instance(B, s_BloodTypeAB) => (s_instance(A, s_AntigenB) & s_part(A, B))))))).

/*
(instance BloodTypeB SetOrClass)
*/
fof(a1789,axiom,s_instance(s_BloodTypeB, s_SetOrClass)).

/*
(subclass BloodTypeB Blood)
*/
fof(a1790,axiom,s_subclass(s_BloodTypeB, s_Blood)).

/*
(forall (?B)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?B BloodTypeB)
        (and (instance ?A AntigenB) (part ?A ?B))))))
*/
fof(a1791,axiom,! [B] : (? [A] : ((s_instance(A, s_Object) & (s_instance(B, s_BloodTypeB) => (s_instance(A, s_AntigenB) & s_part(A, B))))))).

/*
(forall (?B)
 (forall (?A)
  (=> (instance ?A Object)
   (=> (instance ?B BloodTypeB)
    (not (and (instance ?A AntigenA) (part ?A ?B)))))))
*/
fof(a1792,axiom,! [B] : (! [A] : ((s_instance(A, s_Object) => (s_instance(B, s_BloodTypeB) => (~ (s_instance(A, s_AntigenA) & s_part(A, B)))))))).

/*
(instance BloodTypeO SetOrClass)
*/
fof(a1793,axiom,s_instance(s_BloodTypeO, s_SetOrClass)).

/*
(subclass BloodTypeO Blood)
*/
fof(a1794,axiom,s_subclass(s_BloodTypeO, s_Blood)).

/*
(forall (?B)
 (forall (?A)
  (=> (instance ?A Object)
   (=> (instance ?B BloodTypeO)
    (not (and (instance ?A AntigenA) (part ?A ?B)))))))
*/
fof(a1795,axiom,! [B] : (! [A] : ((s_instance(A, s_Object) => (s_instance(B, s_BloodTypeO) => (~ (s_instance(A, s_AntigenA) & s_part(A, B)))))))).

/*
(forall (?B)
 (forall (?A)
  (=> (instance ?A Object)
   (=> (instance ?B BloodTypeO)
    (not (and (instance ?A AntigenB) (part ?A ?B)))))))
*/
fof(a1796,axiom,! [B] : (! [A] : ((s_instance(A, s_Object) => (s_instance(B, s_BloodTypeO) => (~ (s_instance(A, s_AntigenB) & s_part(A, B)))))))).

/*
(subclass NerveCell Cell)
*/
fof(a1797,axiom,s_subclass(s_NerveCell, s_Cell)).

/*
(instance NerveCell SetOrClass)
*/
fof(a1798,axiom,s_instance(s_NerveCell, s_SetOrClass)).

/*
(subclass NerveCell AnimalAnatomicalStructure)
*/
fof(a1799,axiom,s_subclass(s_NerveCell, s_AnimalAnatomicalStructure)).

/*
(forall (?N)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?N NerveCell)
        (and (instance ?S NervousSystem) (part ?N ?S))))))
*/
fof(a1800,axiom,! [N] : (? [S] : ((s_instance(S, s_Object) & (s_instance(N, s_NerveCell) => (s_instance(S, s_NervousSystem) & s_part(N, S))))))).

/*
(subclass LiquidBodySubstance BodySubstance)
*/
fof(a1801,axiom,s_subclass(s_LiquidBodySubstance, s_BodySubstance)).

/*
(forall (?SUBSTANCE)
 (=> (instance ?SUBSTANCE LiquidBodySubstance)
  (attribute ?SUBSTANCE Liquid)))
*/
fof(a1802,axiom,! [SUBSTANCE] : ((s_instance(SUBSTANCE, s_LiquidBodySubstance) => s_attribute(SUBSTANCE, s_Liquid)))).

/*
(instance Serum SetOrClass)
*/
fof(a1803,axiom,s_instance(s_Serum, s_SetOrClass)).

/*
(subclass Serum LiquidBodySubstance)
*/
fof(a1804,axiom,s_subclass(s_Serum, s_LiquidBodySubstance)).

/*
(disjoint Serum Blood)
*/
fof(a1805,axiom,s_disjoint(s_Serum, s_Blood)).

/*
(subclass TearSubstance LiquidBodySubstance)
*/
fof(a1806,axiom,s_subclass(s_TearSubstance, s_LiquidBodySubstance)).

/*
(instance TearSubstance SetOrClass)
*/
fof(a1807,axiom,s_instance(s_TearSubstance, s_SetOrClass)).

/*
(instance SalineSolution SetOrClass)
*/
fof(a1808,axiom,s_instance(s_SalineSolution, s_SetOrClass)).

/*
(subclass TearSubstance SalineSolution)
*/
fof(a1809,axiom,s_subclass(s_TearSubstance, s_SalineSolution)).

/*
(forall (?T)
 (exists (?P ?E)
  (and (and (instance ?E Object) (instance ?P Process))
       (=> (instance ?T TearSubstance)
        (and (instance ?E Eye)
             (and (instrument ?P ?E) (result ?P ?T)))))))
*/
fof(a1810,axiom,! [T] : (? [P,E] : (((s_instance(E, s_Object) & s_instance(P, s_Process)) & (s_instance(T, s_TearSubstance) => (s_instance(E, s_Eye) & (s_instrument(P, E) & s_result(P, T)))))))).

/*
(instance LiquidBodySubstance SetOrClass)
*/
fof(a1811,axiom,s_instance(s_LiquidBodySubstance, s_SetOrClass)).

/*
(subclass Milk LiquidBodySubstance)
*/
fof(a1812,axiom,s_subclass(s_Milk, s_LiquidBodySubstance)).

/*
(instance Milk SetOrClass)
*/
fof(a1813,axiom,s_instance(s_Milk, s_SetOrClass)).

/*
(subclass Milk Beverage)
*/
fof(a1814,axiom,s_subclass(s_Milk, s_Beverage)).

/*
(forall (?MILK)
 (exists (?PROCESS ?MAMMAL)
  (and (and (instance ?MAMMAL Object) (instance ?PROCESS Process))
       (=> (instance ?MILK Milk)
        (and (instance ?MAMMAL Mammal)
             (and (attribute ?MAMMAL Female)
                  (and (instrument ?PROCESS ?MAMMAL)
                       (result ?PROCESS ?MILK))))))))
*/
fof(a1815,axiom,! [MILK] : (? [PROCESS,MAMMAL] : (((s_instance(MAMMAL, s_Object) & s_instance(PROCESS, s_Process)) & (s_instance(MILK, s_Milk) => (s_instance(MAMMAL, s_Mammal) & (s_attribute(MAMMAL, s_Female) & (s_instrument(PROCESS, MAMMAL) & s_result(PROCESS, MILK))))))))).

/*
(subclass CellPart BodyPart)
*/
fof(a1816,axiom,s_subclass(s_CellPart, s_BodyPart)).

/*
(forall (?OBJ1)
 (exists (?CELL)
  (and (instance ?CELL Object)
       (=> (instance ?OBJ1 CellPart)
        (and (instance ?CELL Cell) (properPart ?OBJ1 ?CELL))))))
*/
fof(a1817,axiom,! [OBJ1] : (? [CELL] : ((s_instance(CELL, s_Object) & (s_instance(OBJ1, s_CellPart) => (s_instance(CELL, s_Cell) & s_properPart(OBJ1, CELL))))))).

/*
(instance CellNucleus SetOrClass)
*/
fof(a1818,axiom,s_instance(s_CellNucleus, s_SetOrClass)).

/*
(instance CellPart SetOrClass)
*/
fof(a1819,axiom,s_instance(s_CellPart, s_SetOrClass)).

/*
(subclass CellNucleus CellPart)
*/
fof(a1820,axiom,s_subclass(s_CellNucleus, s_CellPart)).

/*
(forall (?NUCLEUS)
 (exists (?CELL)
  (and (instance ?CELL Object)
       (=> (instance ?NUCLEUS CellNucleus)
        (and (instance ?CELL Cell) (part ?NUCLEUS ?CELL))))))
*/
fof(a1821,axiom,! [NUCLEUS] : (? [CELL] : ((s_instance(CELL, s_Object) & (s_instance(NUCLEUS, s_CellNucleus) => (s_instance(CELL, s_Cell) & s_part(NUCLEUS, CELL))))))).

/*
(subclass Tea Beverage)
*/
fof(a1822,axiom,s_subclass(s_Tea, s_Beverage)).

/*
(instance Tea SetOrClass)
*/
fof(a1823,axiom,s_instance(s_Tea, s_SetOrClass)).

/*
(subclass Tea PreparedFood)
*/
fof(a1824,axiom,s_subclass(s_Tea, s_PreparedFood)).

/*
(subclass AlcoholicBeverage Beverage)
*/
fof(a1825,axiom,s_subclass(s_AlcoholicBeverage, s_Beverage)).

/*
(instance Depressant SetOrClass)
*/
fof(a1826,axiom,s_instance(s_Depressant, s_SetOrClass)).

/*
(subclass AlcoholicBeverage Depressant)
*/
fof(a1827,axiom,s_subclass(s_AlcoholicBeverage, s_Depressant)).

/*
(forall (?BEVERAGE)
 (exists (?ALCOHOL)
  (and (instance ?ALCOHOL Object)
       (=> (instance ?BEVERAGE AlcoholicBeverage)
        (and (instance ?ALCOHOL Alcohol) (part ?ALCOHOL ?BEVERAGE))))))
*/
fof(a1828,axiom,! [BEVERAGE] : (? [ALCOHOL] : ((s_instance(ALCOHOL, s_Object) & (s_instance(BEVERAGE, s_AlcoholicBeverage) => (s_instance(ALCOHOL, s_Alcohol) & s_part(ALCOHOL, BEVERAGE))))))).

/*
(instance Wine SetOrClass)
*/
fof(a1829,axiom,s_instance(s_Wine, s_SetOrClass)).

/*
(subclass Wine AlcoholicBeverage)
*/
fof(a1830,axiom,s_subclass(s_Wine, s_AlcoholicBeverage)).

/*
(instance DistilledAlcoholicBeverage SetOrClass)
*/
fof(a1831,axiom,s_instance(s_DistilledAlcoholicBeverage, s_SetOrClass)).

/*
(subclass DistilledAlcoholicBeverage AlcoholicBeverage)
*/
fof(a1832,axiom,s_subclass(s_DistilledAlcoholicBeverage, s_AlcoholicBeverage)).

/*
(forall (?BEVERAGE)
 (exists (?REMOVE ?WATER)
  (and (and (instance ?WATER Entity) (instance ?REMOVE Process))
       (=> (instance ?BEVERAGE DistilledAlcoholicBeverage)
        (and (instance ?REMOVE Removing)
             (and (patient ?REMOVE ?WATER)
                  (and (instance ?WATER Water)
                       (origin ?REMOVE ?BEVERAGE))))))))
*/
fof(a1833,axiom,! [BEVERAGE] : (? [REMOVE,WATER] : (((s_instance(WATER, s_Entity) & s_instance(REMOVE, s_Process)) & (s_instance(BEVERAGE, s_DistilledAlcoholicBeverage) => (s_instance(REMOVE, s_Removing) & (s_patient(REMOVE, WATER) & (s_instance(WATER, s_Water) & s_origin(REMOVE, BEVERAGE))))))))).

/*
(instance Beer SetOrClass)
*/
fof(a1834,axiom,s_instance(s_Beer, s_SetOrClass)).

/*
(instance AlcoholicBeverage SetOrClass)
*/
fof(a1835,axiom,s_instance(s_AlcoholicBeverage, s_SetOrClass)).

/*
(subclass Beer AlcoholicBeverage)
*/
fof(a1836,axiom,s_subclass(s_Beer, s_AlcoholicBeverage)).

/*
(subclass SpinalColumn Organ)
*/
fof(a1837,axiom,s_subclass(s_SpinalColumn, s_Organ)).

/*
(instance SpinalColumn SetOrClass)
*/
fof(a1838,axiom,s_instance(s_SpinalColumn, s_SetOrClass)).

/*
(subclass SpinalColumn AnimalAnatomicalStructure)
*/
fof(a1839,axiom,s_subclass(s_SpinalColumn, s_AnimalAnatomicalStructure)).

/*
(forall (?VERT)
 (forall (?SPINE)
  (exists (?g1518)
   (and (=> (instance ?VERT Vertebrate)
         (and (instance ?VERT Animal)
              (and (component ?g1518 ?VERT)
                   (instance ?g1518 SpinalColumn))))
        (=>
         (and (instance ?VERT Animal)
              (and (component ?SPINE ?VERT)
                   (instance ?SPINE SpinalColumn)))
         (instance ?VERT Vertebrate))))))
*/
fof(a1840,axiom,! [VERT] : (! [SPINE] : (? [G1518] : (((s_instance(VERT, s_Vertebrate) => (s_instance(VERT, s_Animal) & (s_component(G1518, VERT) & s_instance(G1518, s_SpinalColumn)))) & ((s_instance(VERT, s_Animal) & (s_component(SPINE, VERT) & s_instance(SPINE, s_SpinalColumn))) => s_instance(VERT, s_Vertebrate))))))).

/*
(instance SpinalCord SetOrClass)
*/
fof(a1841,axiom,s_instance(s_SpinalCord, s_SetOrClass)).

/*
(subclass SpinalCord Organ)
*/
fof(a1842,axiom,s_subclass(s_SpinalCord, s_Organ)).

/*
(forall (?C)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?C SpinalCord)
        (and (instance ?S NervousSystem) (part ?C ?S))))))
*/
fof(a1843,axiom,! [C] : (? [S] : ((s_instance(S, s_Object) & (s_instance(C, s_SpinalCord) => (s_instance(S, s_NervousSystem) & s_part(C, S))))))).

/*
(forall (?C)
 (exists (?S)
  (and (instance ?S SelfConnectedObject)
       (=> (instance ?C SpinalCord)
        (and (instance ?S SpinalColumn) (contains ?S ?C))))))
*/
fof(a1844,axiom,! [C] : (? [S] : ((s_instance(S, s_SelfConnectedObject) & (s_instance(C, s_SpinalCord) => (s_instance(S, s_SpinalColumn) & s_contains(S, C))))))).

/*
(instance Tail SetOrClass)
*/
fof(a1845,axiom,s_instance(s_Tail, s_SetOrClass)).

/*
(subclass Tail AnimalAnatomicalStructure)
*/
fof(a1846,axiom,s_subclass(s_Tail, s_AnimalAnatomicalStructure)).

/*
(forall (?T)
 (exists (?V)
  (and (instance ?V Object)
       (=> (instance ?T Tail)
        (and (instance ?V Vertebrate)
             (and (part ?T ?V) (not (instance ?V Human))))))))
*/
fof(a1847,axiom,! [T] : (? [V] : ((s_instance(V, s_Object) & (s_instance(T, s_Tail) => (s_instance(V, s_Vertebrate) & (s_part(T, V) & (~ s_instance(V, s_Human))))))))).

/*
(instance Wing SetOrClass)
*/
fof(a1848,axiom,s_instance(s_Wing, s_SetOrClass)).

/*
(subclass Wing Limb)
*/
fof(a1849,axiom,s_subclass(s_Wing, s_Limb)).

/*
(subclass Skin BodyCovering)
*/
fof(a1850,axiom,s_subclass(s_Skin, s_BodyCovering)).

/*
(subclass Skin AnimalAnatomicalStructure)
*/
fof(a1851,axiom,s_subclass(s_Skin, s_AnimalAnatomicalStructure)).

/*
(forall (?SKIN)
 (exists (?SURFACE ?ANIMAL)
  (and (and (instance ?ANIMAL SelfConnectedObject)
            (instance ?SURFACE SelfConnectedObject))
       (=> (instance ?SKIN Skin)
        (and (surface ?SURFACE ?ANIMAL)
             (and (part ?SKIN ?ANIMAL)
                  (and (instance ?ANIMAL Animal)
                       (overlapsSpatially ?SKIN ?SURFACE))))))))
*/
fof(a1852,axiom,! [SKIN] : (? [SURFACE,ANIMAL] : (((s_instance(ANIMAL, s_SelfConnectedObject) & s_instance(SURFACE, s_SelfConnectedObject)) & (s_instance(SKIN, s_Skin) => (s_surface(SURFACE, ANIMAL) & (s_part(SKIN, ANIMAL) & (s_instance(ANIMAL, s_Animal) & s_overlapsSpatially(SKIN, SURFACE))))))))).

/*
(subclass Retina Organ)
*/
fof(a1853,axiom,s_subclass(s_Retina, s_Organ)).

/*
(instance Retina SetOrClass)
*/
fof(a1854,axiom,s_instance(s_Retina, s_SetOrClass)).

/*
(subclass Retina AnimalAnatomicalStructure)
*/
fof(a1855,axiom,s_subclass(s_Retina, s_AnimalAnatomicalStructure)).

/*
(forall (?R)
 (exists (?E)
  (and (instance ?E Object)
       (=> (instance ?R Retina) (and (instance ?E Eye) (part ?R ?E))))))
*/
fof(a1856,axiom,! [R] : (? [E] : ((s_instance(E, s_Object) & (s_instance(R, s_Retina) => (s_instance(E, s_Eye) & s_part(R, E))))))).

/*
(subclass BronchialDuct BodyVessel)
*/
fof(a1857,axiom,s_subclass(s_BronchialDuct, s_BodyVessel)).

/*
(instance BronchialDuct SetOrClass)
*/
fof(a1858,axiom,s_instance(s_BronchialDuct, s_SetOrClass)).

/*
(subclass BronchialDuct AnimalAnatomicalStructure)
*/
fof(a1859,axiom,s_subclass(s_BronchialDuct, s_AnimalAnatomicalStructure)).

/*
(forall (?DUCT)
 (exists (?LUNG)
  (and (instance ?LUNG Object)
       (=> (instance ?DUCT BronchialDuct)
        (and (instance ?LUNG Lung) (located ?DUCT ?LUNG))))))
*/
fof(a1860,axiom,! [DUCT] : (? [LUNG] : ((s_instance(LUNG, s_Object) & (s_instance(DUCT, s_BronchialDuct) => (s_instance(LUNG, s_Lung) & s_located(DUCT, LUNG))))))).

/*
(subclass BloodVessel BodyVessel)
*/
fof(a1861,axiom,s_subclass(s_BloodVessel, s_BodyVessel)).

/*
(subclass BloodVessel AnimalAnatomicalStructure)
*/
fof(a1862,axiom,s_subclass(s_BloodVessel, s_AnimalAnatomicalStructure)).

/*
(forall (?VESSEL)
 (exists (?BLOOD ?TRANSFER)
  (and (and (instance ?TRANSFER Process) (instance ?BLOOD Entity))
       (=> (instance ?VESSEL BloodVessel)
        (and (instance ?BLOOD Blood)
             (and (instance ?TRANSFER Transfer)
                  (and (patient ?TRANSFER ?BLOOD)
                       (instrument ?TRANSFER ?VESSEL))))))))
*/
fof(a1863,axiom,! [VESSEL] : (? [BLOOD,TRANSFER] : (((s_instance(TRANSFER, s_Process) & s_instance(BLOOD, s_Entity)) & (s_instance(VESSEL, s_BloodVessel) => (s_instance(BLOOD, s_Blood) & (s_instance(TRANSFER, s_Transfer) & (s_patient(TRANSFER, BLOOD) & s_instrument(TRANSFER, VESSEL))))))))).

/*
(subclass Alveolus BodyVessel)
*/
fof(a1864,axiom,s_subclass(s_Alveolus, s_BodyVessel)).

/*
(instance Alveolus SetOrClass)
*/
fof(a1865,axiom,s_instance(s_Alveolus, s_SetOrClass)).

/*
(subclass Alveolus AnimalAnatomicalStructure)
*/
fof(a1866,axiom,s_subclass(s_Alveolus, s_AnimalAnatomicalStructure)).

/*
(forall (?A)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?A Alveolus)
        (and (instance ?L Lung) (located ?A ?L))))))
*/
fof(a1867,axiom,! [A] : (? [L] : ((s_instance(L, s_Object) & (s_instance(A, s_Alveolus) => (s_instance(L, s_Lung) & s_located(A, L))))))).

/*
(subclass Artery BloodVessel)
*/
fof(a1868,axiom,s_subclass(s_Artery, s_BloodVessel)).

/*
(forall (?BLOOD ?ARTERY ?TRANSFER)
 (exists (?HEART)
  (and (instance ?HEART Object)
       (=>
        (and (instance ?ARTERY Artery)
             (and (instance ?TRANSFER Transfer)
                  (and (patient ?TRANSFER ?BLOOD)
                       (and (instrument ?TRANSFER ?ARTERY)
                            (instance ?BLOOD Blood)))))
        (and (instance ?HEART Heart) (origin ?TRANSFER ?HEART))))))
*/
fof(a1869,axiom,! [BLOOD,ARTERY,TRANSFER] : (? [HEART] : ((s_instance(HEART, s_Object) & ((s_instance(ARTERY, s_Artery) & (s_instance(TRANSFER, s_Transfer) & (s_patient(TRANSFER, BLOOD) & (s_instrument(TRANSFER, ARTERY) & s_instance(BLOOD, s_Blood))))) => (s_instance(HEART, s_Heart) & s_origin(TRANSFER, HEART))))))).

/*
(subclass Vein BloodVessel)
*/
fof(a1870,axiom,s_subclass(s_Vein, s_BloodVessel)).

/*
(forall (?B ?V ?T)
 (exists (?H)
  (and (instance ?H Entity)
       (=>
        (and (instance ?V Vein)
             (and (instance ?T Transfer)
                  (and (patient ?T ?B)
                       (and (instrument ?T ?V) (instance ?B Blood)))))
        (and (instance ?H Heart) (destination ?T ?H))))))
*/
fof(a1871,axiom,! [B,V,T] : (? [H] : ((s_instance(H, s_Entity) & ((s_instance(V, s_Vein) & (s_instance(T, s_Transfer) & (s_patient(T, B) & (s_instrument(T, V) & s_instance(B, s_Blood))))) => (s_instance(H, s_Heart) & s_destination(T, H))))))).

/*
(instance PulmonaryArtery SetOrClass)
*/
fof(a1872,axiom,s_instance(s_PulmonaryArtery, s_SetOrClass)).

/*
(instance Artery SetOrClass)
*/
fof(a1873,axiom,s_instance(s_Artery, s_SetOrClass)).

/*
(subclass PulmonaryArtery Artery)
*/
fof(a1874,axiom,s_subclass(s_PulmonaryArtery, s_Artery)).

/*
(forall (?BLOOD ?ARTERY ?TRANSFER)
 (exists (?LUNG)
  (and (instance ?LUNG Entity)
       (=>
        (and (instance ?ARTERY PulmonaryArtery)
             (and (instance ?TRANSFER Transfer)
                  (and (patient ?TRANSFER ?BLOOD)
                       (and (instrument ?TRANSFER ?ARTERY)
                            (instance ?BLOOD Blood)))))
        (and (instance ?LUNG Lung) (destination ?TRANSFER ?LUNG))))))
*/
fof(a1875,axiom,! [BLOOD,ARTERY,TRANSFER] : (? [LUNG] : ((s_instance(LUNG, s_Entity) & ((s_instance(ARTERY, s_PulmonaryArtery) & (s_instance(TRANSFER, s_Transfer) & (s_patient(TRANSFER, BLOOD) & (s_instrument(TRANSFER, ARTERY) & s_instance(BLOOD, s_Blood))))) => (s_instance(LUNG, s_Lung) & s_destination(TRANSFER, LUNG))))))).

/*
(instance PulmonaryVein SetOrClass)
*/
fof(a1876,axiom,s_instance(s_PulmonaryVein, s_SetOrClass)).

/*
(instance Vein SetOrClass)
*/
fof(a1877,axiom,s_instance(s_Vein, s_SetOrClass)).

/*
(subclass PulmonaryVein Vein)
*/
fof(a1878,axiom,s_subclass(s_PulmonaryVein, s_Vein)).

/*
(forall (?B ?V ?T)
 (exists (?L ?H ?P)
  (and (and (instance ?P Object) (instance ?H Object)
            (instance ?L Object))
       (=>
        (and (instance ?V PulmonaryVein)
             (and (instance ?T Transfer)
                  (and (patient ?T ?B)
                       (and (instrument ?T ?V) (instance ?B Blood)))))
        (and (instance ?L Lung)
             (and (origin ?T ?L)
                  (and (part ?V ?P)
                       (and (part ?L ?P)
                            (and (part ?H ?P)
                                 (and
                                  (instance ?H Heart)
                                  (destination ?T ?H)))))))))))
*/
fof(a1879,axiom,! [B,V,T] : (? [L,H,P] : (((s_instance(P, s_Object) & s_instance(H, s_Object) & s_instance(L, s_Object)) & ((s_instance(V, s_PulmonaryVein) & (s_instance(T, s_Transfer) & (s_patient(T, B) & (s_instrument(T, V) & s_instance(B, s_Blood))))) => (s_instance(L, s_Lung) & (s_origin(T, L) & (s_part(V, P) & (s_part(L, P) & (s_part(H, P) & (s_instance(H, s_Heart) & s_destination(T, H)))))))))))).

/*
(instance Capillary SetOrClass)
*/
fof(a1880,axiom,s_instance(s_Capillary, s_SetOrClass)).

/*
(instance BloodVessel SetOrClass)
*/
fof(a1881,axiom,s_instance(s_BloodVessel, s_SetOrClass)).

/*
(subclass Capillary BloodVessel)
*/
fof(a1882,axiom,s_subclass(s_Capillary, s_BloodVessel)).

/*
(forall (?C)
 (exists (?A ?V)
  (and (and (instance ?V Object) (instance ?A Object))
       (=> (instance ?C Capillary)
        (and (instance ?A Artery)
             (and (instance ?V Vein) (connects ?C ?A ?V)))))))
*/
fof(a1883,axiom,! [C] : (? [A,V] : (((s_instance(V, s_Object) & s_instance(A, s_Object)) & (s_instance(C, s_Capillary) => (s_instance(A, s_Artery) & (s_instance(V, s_Vein) & s_connects(C, A, V)))))))).

/*
(subclass Lung Organ)
*/
fof(a1884,axiom,s_subclass(s_Lung, s_Organ)).

/*
(instance Lung SetOrClass)
*/
fof(a1885,axiom,s_instance(s_Lung, s_SetOrClass)).

/*
(subclass Lung AnimalAnatomicalStructure)
*/
fof(a1886,axiom,s_subclass(s_Lung, s_AnimalAnatomicalStructure)).

/*
(forall (?ANIMAL)
 (exists (?LUNG)
  (and (instance ?LUNG CorpuscularObject)
       (=> (instance ?ANIMAL CorpuscularObject)
        (=> (capability Breathing experiencer ?ANIMAL)
         (and (component ?LUNG ?ANIMAL) (instance ?LUNG Lung)))))))
*/
fof(a1887,axiom,! [ANIMAL] : (? [LUNG] : ((s_instance(LUNG, s_CorpuscularObject) & (s_instance(ANIMAL, s_CorpuscularObject) => (s_capability(s_Breathing, s_experiencer_m, ANIMAL) => (s_component(LUNG, ANIMAL) & s_instance(LUNG, s_Lung)))))))).

/*
(subclass Kidney Organ)
*/
fof(a1888,axiom,s_subclass(s_Kidney, s_Organ)).

/*
(instance Kidney SetOrClass)
*/
fof(a1889,axiom,s_instance(s_Kidney, s_SetOrClass)).

/*
(subclass Kidney AnimalAnatomicalStructure)
*/
fof(a1890,axiom,s_subclass(s_Kidney, s_AnimalAnatomicalStructure)).

/*
(subclass Spleen Organ)
*/
fof(a1891,axiom,s_subclass(s_Spleen, s_Organ)).

/*
(instance Spleen SetOrClass)
*/
fof(a1892,axiom,s_instance(s_Spleen, s_SetOrClass)).

/*
(subclass Spleen AnimalAnatomicalStructure)
*/
fof(a1893,axiom,s_subclass(s_Spleen, s_AnimalAnatomicalStructure)).

/*
(instance Inhaling SetOrClass)
*/
fof(a1894,axiom,s_instance(s_Inhaling, s_SetOrClass)).

/*
(subclass Inhaling Breathing)
*/
fof(a1895,axiom,s_subclass(s_Inhaling, s_Breathing)).

/*
(forall (?I)
 (exists (?L)
  (and (instance ?L Entity)
       (=> (instance ?I Inhaling)
        (and (instance ?L Lung) (destination ?I ?L))))))
*/
fof(a1896,axiom,! [I] : (? [L] : ((s_instance(L, s_Entity) & (s_instance(I, s_Inhaling) => (s_instance(L, s_Lung) & s_destination(I, L))))))).

/*
(instance Exhaling SetOrClass)
*/
fof(a1897,axiom,s_instance(s_Exhaling, s_SetOrClass)).

/*
(subclass Exhaling Breathing)
*/
fof(a1898,axiom,s_subclass(s_Exhaling, s_Breathing)).

/*
(forall (?E)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?E Exhaling)
        (and (instance ?L Lung) (origin ?E ?L))))))
*/
fof(a1899,axiom,! [E] : (? [L] : ((s_instance(L, s_Object) & (s_instance(E, s_Exhaling) => (s_instance(L, s_Lung) & s_origin(E, L))))))).

/*
(subclass Nostril BodyVessel)
*/
fof(a1900,axiom,s_subclass(s_Nostril, s_BodyVessel)).

/*
(instance Nostril SetOrClass)
*/
fof(a1901,axiom,s_instance(s_Nostril, s_SetOrClass)).

/*
(subclass Nostril AnimalAnatomicalStructure)
*/
fof(a1902,axiom,s_subclass(s_Nostril, s_AnimalAnatomicalStructure)).

/*
(forall (?NOSE)
 (exists (?N1 ?N2)
  (and (and (instance ?N2 Object) (instance ?N1 Object))
       (=> (instance ?NOSE Nose)
        (and (instance ?N1 Nostril)
             (and (instance ?N2 Nostril)
                  (and (not (equal ?N1 ?N2))
                       (and (connected ?N1 ?NOSE)
                            (connected ?N2 ?NOSE)))))))))
*/
fof(a1903,axiom,! [NOSE] : (? [N1,N2] : (((s_instance(N2, s_Object) & s_instance(N1, s_Object)) & (s_instance(NOSE, s_Nose) => (s_instance(N1, s_Nostril) & (s_instance(N2, s_Nostril) & ((~ (N1 = N2)) & (s_connected(N1, NOSE) & s_connected(N2, NOSE)))))))))).

/*
(forall (?NOS)
 (exists (?N ?T)
  (and (and (instance ?T Object) (instance ?N Object))
       (=> (instance ?NOS Nostril)
        (and (instance ?N Nose)
             (and (instance ?T Throat) (connects ?NOS ?N ?T)))))))
*/
fof(a1904,axiom,! [NOS] : (? [N,T] : (((s_instance(T, s_Object) & s_instance(N, s_Object)) & (s_instance(NOS, s_Nostril) => (s_instance(N, s_Nose) & (s_instance(T, s_Throat) & s_connects(NOS, N, T)))))))).

/*
(subclass Heart Organ)
*/
fof(a1905,axiom,s_subclass(s_Heart, s_Organ)).

/*
(instance Heart SetOrClass)
*/
fof(a1906,axiom,s_instance(s_Heart, s_SetOrClass)).

/*
(subclass Heart AnimalAnatomicalStructure)
*/
fof(a1907,axiom,s_subclass(s_Heart, s_AnimalAnatomicalStructure)).

/*
(forall (?HEART)
 (exists (?TRANSFER ?BLOOD)
  (and (and (instance ?BLOOD Entity) (instance ?TRANSFER Process))
       (=> (instance ?HEART Heart)
        (and (instance ?TRANSFER Transfer)
             (and (instance ?BLOOD Blood)
                  (and (instrument ?TRANSFER ?HEART)
                       (patient ?TRANSFER ?BLOOD))))))))
*/
fof(a1908,axiom,! [HEART] : (? [TRANSFER,BLOOD] : (((s_instance(BLOOD, s_Entity) & s_instance(TRANSFER, s_Process)) & (s_instance(HEART, s_Heart) => (s_instance(TRANSFER, s_Transfer) & (s_instance(BLOOD, s_Blood) & (s_instrument(TRANSFER, HEART) & s_patient(TRANSFER, BLOOD))))))))).

/*
(subclass Liver Organ)
*/
fof(a1909,axiom,s_subclass(s_Liver, s_Organ)).

/*
(instance Liver SetOrClass)
*/
fof(a1910,axiom,s_instance(s_Liver, s_SetOrClass)).

/*
(subclass Liver AnimalAnatomicalStructure)
*/
fof(a1911,axiom,s_subclass(s_Liver, s_AnimalAnatomicalStructure)).

/*
(subclass Mouth AnimalAnatomicalStructure)
*/
fof(a1912,axiom,s_subclass(s_Mouth, s_AnimalAnatomicalStructure)).

/*
(instance Mouth SetOrClass)
*/
fof(a1913,axiom,s_instance(s_Mouth, s_SetOrClass)).

/*
(subclass Mouth BodyPart)
*/
fof(a1914,axiom,s_subclass(s_Mouth, s_BodyPart)).

/*
(forall (?MOUTH)
 (exists (?FACE)
  (and (instance ?FACE Object)
       (=> (instance ?MOUTH Mouth)
        (and (instance ?FACE Face) (part ?MOUTH ?FACE))))))
*/
fof(a1915,axiom,! [MOUTH] : (? [FACE] : ((s_instance(FACE, s_Object) & (s_instance(MOUTH, s_Mouth) => (s_instance(FACE, s_Face) & s_part(MOUTH, FACE))))))).

/*
(subclass Tongue AnimalAnatomicalStructure)
*/
fof(a1916,axiom,s_subclass(s_Tongue, s_AnimalAnatomicalStructure)).

/*
(instance Tongue SetOrClass)
*/
fof(a1917,axiom,s_instance(s_Tongue, s_SetOrClass)).

/*
(subclass Tongue BodyPart)
*/
fof(a1918,axiom,s_subclass(s_Tongue, s_BodyPart)).

/*
(forall (?TONGUE)
 (exists (?MOUTH)
  (and (instance ?MOUTH Object)
       (=> (instance ?TONGUE Tongue)
        (and (instance ?MOUTH Mouth) (part ?TONGUE ?MOUTH))))))
*/
fof(a1919,axiom,! [TONGUE] : (? [MOUTH] : ((s_instance(MOUTH, s_Object) & (s_instance(TONGUE, s_Tongue) => (s_instance(MOUTH, s_Mouth) & s_part(TONGUE, MOUTH))))))).

/*
(subclass NervousSystem Organ)
*/
fof(a1920,axiom,s_subclass(s_NervousSystem, s_Organ)).

/*
(instance NervousSystem SetOrClass)
*/
fof(a1921,axiom,s_instance(s_NervousSystem, s_SetOrClass)).

/*
(subclass NervousSystem AnimalAnatomicalStructure)
*/
fof(a1922,axiom,s_subclass(s_NervousSystem, s_AnimalAnatomicalStructure)).

/*
(forall (?A ?S)
 (=>
  (and (instance ?S NervousSystem)
       (and (part ?S ?A) (instance ?A Animal)))
  (instance ?A Vertebrate)))
*/
fof(a1923,axiom,! [A,S] : (((s_instance(S, s_NervousSystem) & (s_part(S, A) & s_instance(A, s_Animal))) => s_instance(A, s_Vertebrate)))).

/*
(subclass Hoof AnimalAnatomicalStructure)
*/
fof(a1924,axiom,s_subclass(s_Hoof, s_AnimalAnatomicalStructure)).

/*
(instance Hoof SetOrClass)
*/
fof(a1925,axiom,s_instance(s_Hoof, s_SetOrClass)).

/*
(subclass Hoof BodyPart)
*/
fof(a1926,axiom,s_subclass(s_Hoof, s_BodyPart)).

/*
(forall (?H)
 (exists (?F ?A)
  (and (and (instance ?A Object) (instance ?F Object))
       (=> (instance ?H Hoof)
        (and (instance ?F Foot)
             (and (instance ?A HoofedMammal)
                  (and (part ?H ?F) (part ?F ?A))))))))
*/
fof(a1927,axiom,! [H] : (? [F,A] : (((s_instance(A, s_Object) & s_instance(F, s_Object)) & (s_instance(H, s_Hoof) => (s_instance(F, s_Foot) & (s_instance(A, s_HoofedMammal) & (s_part(H, F) & s_part(F, A))))))))).

/*
(instance Tooth SetOrClass)
*/
fof(a1928,axiom,s_instance(s_Tooth, s_SetOrClass)).

/*
(subclass Tooth Bone)
*/
fof(a1929,axiom,s_subclass(s_Tooth, s_Bone)).

/*
(forall (?TOOTH)
 (exists (?MOUTH)
  (and (instance ?MOUTH Object)
       (=> (instance ?TOOTH Tooth)
        (and (instance ?MOUTH Mouth) (part ?TOOTH ?MOUTH))))))
*/
fof(a1930,axiom,! [TOOTH] : (? [MOUTH] : ((s_instance(MOUTH, s_Object) & (s_instance(TOOTH, s_Tooth) => (s_instance(MOUTH, s_Mouth) & s_part(TOOTH, MOUTH))))))).

/*
(instance Skull SetOrClass)
*/
fof(a1931,axiom,s_instance(s_Skull, s_SetOrClass)).

/*
(subclass Skull Bone)
*/
fof(a1932,axiom,s_subclass(s_Skull, s_Bone)).

/*
(forall (?S)
 (exists (?V ?H)
  (and (and (instance ?H Object) (instance ?V Object))
       (=> (instance ?S Skull)
        (and (instance ?V Vertebrate)
             (and (instance ?H Head)
                  (and (part ?H ?V) (part ?S ?H))))))))
*/
fof(a1933,axiom,! [S] : (? [V,H] : (((s_instance(H, s_Object) & s_instance(V, s_Object)) & (s_instance(S, s_Skull) => (s_instance(V, s_Vertebrate) & (s_instance(H, s_Head) & (s_part(H, V) & s_part(S, H))))))))).

/*
(instance Horn SetOrClass)
*/
fof(a1934,axiom,s_instance(s_Horn, s_SetOrClass)).

/*
(subclass Horn Bone)
*/
fof(a1935,axiom,s_subclass(s_Horn, s_Bone)).

/*
(forall (?H)
 (exists (?M)
  (and (instance ?M Object)
       (=> (instance ?H Horn)
        (and (instance ?M HoofedMammal) (part ?H ?M))))))
*/
fof(a1936,axiom,! [H] : (? [M] : ((s_instance(M, s_Object) & (s_instance(H, s_Horn) => (s_instance(M, s_HoofedMammal) & s_part(H, M))))))).

/*
(instance Ivory SetOrClass)
*/
fof(a1937,axiom,s_instance(s_Ivory, s_SetOrClass)).

/*
(subclass Ivory Bone)
*/
fof(a1938,axiom,s_subclass(s_Ivory, s_Bone)).

/*
(subclass AnimalShell AnimalAnatomicalStructure)
*/
fof(a1939,axiom,s_subclass(s_AnimalShell, s_AnimalAnatomicalStructure)).

/*
(instance AnimalShell SetOrClass)
*/
fof(a1940,axiom,s_instance(s_AnimalShell, s_SetOrClass)).

/*
(subclass AnimalShell BodyPart)
*/
fof(a1941,axiom,s_subclass(s_AnimalShell, s_BodyPart)).

/*
(forall (?A ?S)
 (=>
  (and (instance ?A Animal)
       (and (instance ?S AnimalShell) (part ?S ?A)))
  (or (instance ?A Invertebrate) (instance ?A Reptile))))
*/
fof(a1942,axiom,! [A,S] : (((s_instance(A, s_Animal) & (s_instance(S, s_AnimalShell) & s_part(S, A))) => (s_instance(A, s_Invertebrate) | s_instance(A, s_Reptile))))).

/*
(instance Ossification SetOrClass)
*/
fof(a1943,axiom,s_instance(s_Ossification, s_SetOrClass)).

/*
(subclass Ossification OrganOrTissueProcess)
*/
fof(a1944,axiom,s_subclass(s_Ossification, s_OrganOrTissueProcess)).

/*
(forall (?O)
 (exists (?B)
  (and (instance ?B Entity)
       (=> (instance ?O Ossification)
        (and (instance ?B Bone) (result ?O ?B))))))
*/
fof(a1945,axiom,! [O] : (? [B] : ((s_instance(B, s_Entity) & (s_instance(O, s_Ossification) => (s_instance(B, s_Bone) & s_result(O, B))))))).

/*
(instance Chewing SetOrClass)
*/
fof(a1946,axiom,s_instance(s_Chewing, s_SetOrClass)).

/*
(subclass Chewing BodyMotion)
*/
fof(a1947,axiom,s_subclass(s_Chewing, s_BodyMotion)).

/*
(forall (?FOOD ?CHEW)
 (=> (instance ?FOOD Object)
  (=> (and (instance ?CHEW Chewing) (resource ?CHEW ?FOOD))
   (instance ?FOOD (FoodForFn Organism)))))
*/
fof(a1948,axiom,! [FOOD,CHEW] : ((s_instance(FOOD, s_Object) => ((s_instance(CHEW, s_Chewing) & s_resource(CHEW, FOOD)) => s_instance(FOOD, s_FoodForFn(s_Organism)))))).

/*
(forall (?TOOTH ?CHEW)
 (=> (instance ?TOOTH Object)
  (=> (and (instance ?CHEW Chewing) (instrument ?CHEW ?TOOTH))
   (instance ?TOOTH Tooth))))
*/
fof(a1949,axiom,! [TOOTH,CHEW] : ((s_instance(TOOTH, s_Object) => ((s_instance(CHEW, s_Chewing) & s_instrument(CHEW, TOOTH)) => s_instance(TOOTH, s_Tooth))))).

/*
(forall (?CHEW)
 (exists (?EAT)
  (and (instance ?EAT Process)
       (=> (instance ?CHEW Chewing)
        (and (instance ?EAT Eating) (subProcess ?CHEW ?EAT))))))
*/
fof(a1950,axiom,! [CHEW] : (? [EAT] : ((s_instance(EAT, s_Process) & (s_instance(CHEW, s_Chewing) => (s_instance(EAT, s_Eating) & s_subProcess(CHEW, EAT))))))).

/*
(instance Feeding SetOrClass)
*/
fof(a1951,axiom,s_instance(s_Feeding, s_SetOrClass)).

/*
(subclass Feeding Giving)
*/
fof(a1952,axiom,s_subclass(s_Feeding, s_Giving)).

/*
(forall (?O ?F)
 (=> (instance ?O Entity)
  (=> (and (instance ?F Feeding) (patient ?F ?O))
   (instance ?O (FoodForFn Animal)))))
*/
fof(a1953,axiom,! [O,F] : ((s_instance(O, s_Entity) => ((s_instance(F, s_Feeding) & s_patient(F, O)) => s_instance(O, s_FoodForFn(s_Animal)))))).

/*
(forall (?A ?F)
 (=> (instance ?A Entity)
  (=> (and (instance ?F Feeding) (destination ?F ?A))
   (instance ?A Animal))))
*/
fof(a1954,axiom,! [A,F] : ((s_instance(A, s_Entity) => ((s_instance(F, s_Feeding) & s_destination(F, A)) => s_instance(A, s_Animal))))).

/*
(subclass Lip AnimalAnatomicalStructure)
*/
fof(a1955,axiom,s_subclass(s_Lip, s_AnimalAnatomicalStructure)).

/*
(instance Lip SetOrClass)
*/
fof(a1956,axiom,s_instance(s_Lip, s_SetOrClass)).

/*
(subclass Lip BodyPart)
*/
fof(a1957,axiom,s_subclass(s_Lip, s_BodyPart)).

/*
(forall (?LIP)
 (exists (?MOUTH)
  (and (instance ?MOUTH Object)
       (=> (instance ?LIP Lip)
        (and (instance ?MOUTH Mouth) (part ?LIP ?MOUTH))))))
*/
fof(a1958,axiom,! [LIP] : (? [MOUTH] : ((s_instance(MOUTH, s_Object) & (s_instance(LIP, s_Lip) => (s_instance(MOUTH, s_Mouth) & s_part(LIP, MOUTH))))))).

/*
(instance Kissing SetOrClass)
*/
fof(a1959,axiom,s_instance(s_Kissing, s_SetOrClass)).

/*
(subclass Kissing Touching)
*/
fof(a1960,axiom,s_subclass(s_Kissing, s_Touching)).

/*
(forall (?KISS)
 (exists (?PERSON1 ?PERSON2 ?LIP1 ?LIP2)
  (and (and (instance ?LIP2 Object) (instance ?LIP1 Object)
            (instance ?PERSON2 Agent) (instance ?PERSON1 Agent))
       (=> (instance ?KISS Kissing)
        (and (agent ?KISS ?PERSON1)
             (and (agent ?KISS ?PERSON2)
                  (and (instance ?PERSON1 Human)
                       (and (instance ?PERSON2 Human)
                            (and (not (equal ?PERSON1 ?PERSON2))
                                 (and
                                  (instance ?LIP1 Lip)
                                  (and
                                   (instance ?LIP2 Lip)
                                   (and
                                    (part ?LIP1 ?PERSON1)
                                    (and
                                     (part ?LIP2 ?PERSON2)
                                     (and
                                      (holdsDuring
                                       (BeginFn (WhenFn ?KISS))
                                       (not
                                        (meetsSpatially ?LIP1 ?LIP2)))
                                      (holdsDuring
                                       (EndFn (WhenFn ?KISS))
                                       (meetsSpatially
                                        ?LIP1
                                        ?LIP2))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Licking SetOrClass)
*/
fof(a1961,axiom,s_instance(s_Licking, s_SetOrClass)).

/*
(subclass Licking Touching)
*/
fof(a1962,axiom,s_subclass(s_Licking, s_Touching)).

/*
(forall (?L)
 (exists (?T)
  (and (instance ?T Object)
       (=> (instance ?L Licking)
        (and (instance ?T Tongue) (instrument ?L ?T))))))
*/
fof(a1963,axiom,! [L] : (? [T] : ((s_instance(T, s_Object) & (s_instance(L, s_Licking) => (s_instance(T, s_Tongue) & s_instrument(L, T))))))).

/*
(instance Embracing SetOrClass)
*/
fof(a1964,axiom,s_instance(s_Embracing, s_SetOrClass)).

/*
(subclass Embracing Touching)
*/
fof(a1965,axiom,s_subclass(s_Embracing, s_Touching)).

/*
(forall (?E)
 (exists (?P1 ?P2)
  (and (and (instance ?P2 Agent) (instance ?P1 Agent))
       (=> (instance ?E Embracing)
        (and (instance ?P1 Human)
             (and (instance ?P2 Human)
                  (and (not (equal ?P1 ?P2))
                       (and (agent ?E ?P1) (agent ?E ?P2)))))))))
*/
fof(a1966,axiom,! [E] : (? [P1,P2] : (((s_instance(P2, s_Agent) & s_instance(P1, s_Agent)) & (s_instance(E, s_Embracing) => (s_instance(P1, s_Human) & (s_instance(P2, s_Human) & ((~ (P1 = P2)) & (s_agent(E, P1) & s_agent(E, P2)))))))))).

/*
(subclass Skeleton AnimalAnatomicalStructure)
*/
fof(a1967,axiom,s_subclass(s_Skeleton, s_AnimalAnatomicalStructure)).

/*
(instance Skeleton SetOrClass)
*/
fof(a1968,axiom,s_instance(s_Skeleton, s_SetOrClass)).

/*
(subclass Skeleton BodyPart)
*/
fof(a1969,axiom,s_subclass(s_Skeleton, s_BodyPart)).

/*
(forall (?ANIMAL ?SKELETON)
 (=>
  (and (instance ?ANIMAL Animal)
       (and (instance ?SKELETON Skeleton) (part ?SKELETON ?ANIMAL)))
  (instance ?ANIMAL Vertebrate)))
*/
fof(a1970,axiom,! [ANIMAL,SKELETON] : (((s_instance(ANIMAL, s_Animal) & (s_instance(SKELETON, s_Skeleton) & s_part(SKELETON, ANIMAL))) => s_instance(ANIMAL, s_Vertebrate)))).

/*
(forall (?S)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?S Skeleton)
        (and (instance ?A Animal) (interiorPart ?S ?A))))))
*/
fof(a1971,axiom,! [S] : (? [A] : ((s_instance(A, s_Object) & (s_instance(S, s_Skeleton) => (s_instance(A, s_Animal) & s_interiorPart(S, A))))))).

/*
(subclass Exoskeleton AnimalAnatomicalStructure)
*/
fof(a1972,axiom,s_subclass(s_Exoskeleton, s_AnimalAnatomicalStructure)).

/*
(instance Exoskeleton SetOrClass)
*/
fof(a1973,axiom,s_instance(s_Exoskeleton, s_SetOrClass)).

/*
(subclass Exoskeleton BodyPart)
*/
fof(a1974,axiom,s_subclass(s_Exoskeleton, s_BodyPart)).

/*
(forall (?ANIMAL ?SKELETON)
 (=>
  (and (instance ?ANIMAL Animal)
       (and (instance ?SKELETON Exoskeleton) (part ?SKELETON ?ANIMAL)))
  (instance ?ANIMAL Invertebrate)))
*/
fof(a1975,axiom,! [ANIMAL,SKELETON] : (((s_instance(ANIMAL, s_Animal) & (s_instance(SKELETON, s_Exoskeleton) & s_part(SKELETON, ANIMAL))) => s_instance(ANIMAL, s_Invertebrate)))).

/*
(forall (?BONE)
 (forall (?SKELETON)
  (exists (?g1568)
   (and (=> (instance ?BONE Bone)
         (and (or (instance ?g1568 Skeleton)
                  (instance ?g1568 Exoskeleton))
              (part ?BONE ?g1568)))
        (=>
         (and (or (instance ?SKELETON Skeleton)
                  (instance ?SKELETON Exoskeleton))
              (part ?BONE ?SKELETON))
         (instance ?BONE Bone))))))
*/
fof(a1976,axiom,! [BONE] : (! [SKELETON] : (? [G1568] : (((s_instance(BONE, s_Bone) => ((s_instance(G1568, s_Skeleton) | s_instance(G1568, s_Exoskeleton)) & s_part(BONE, G1568))) & (((s_instance(SKELETON, s_Skeleton) | s_instance(SKELETON, s_Exoskeleton)) & s_part(BONE, SKELETON)) => s_instance(BONE, s_Bone))))))).

/*
(forall (?X)
 (exists (?A)
  (forall (?PART)
   (=> (instance ?PART Object)
    (and (instance ?A Object)
         (=> (instance ?X Exoskeleton)
          (and (instance ?A Animal)
               (and (part ?X ?A)
                    (not (and (properPart ?PART ?A)
                              (orientation ?PART ?X Outside)))))))))))
*/
fof(a1977,axiom,! [X] : (? [A] : (! [PART] : ((s_instance(PART, s_Object) => (s_instance(A, s_Object) & (s_instance(X, s_Exoskeleton) => (s_instance(A, s_Animal) & (s_part(X, A) & (~ (s_properPart(PART, A) & s_orientation(PART, X, s_Outside)))))))))))).

/*
(subclass BodyJoint BodyJunction)
*/
fof(a1978,axiom,s_subclass(s_BodyJoint, s_BodyJunction)).

/*
(forall (?J)
 (exists (?S ?P1 ?P2)
  (and (and (instance ?P2 CorpuscularObject)
            (instance ?P1 CorpuscularObject)
            (instance ?S CorpuscularObject))
       (=> (instance ?J BodyJoint)
        (and (instance ?S Skeleton)
             (and (component ?P1 ?S)
                  (and (component ?P2 ?S)
                       (and (component ?J ?S)
                            (connects ?J ?P1 ?P2)))))))))
*/
fof(a1979,axiom,! [J] : (? [S,P1,P2] : (((s_instance(P2, s_CorpuscularObject) & s_instance(P1, s_CorpuscularObject) & s_instance(S, s_CorpuscularObject)) & (s_instance(J, s_BodyJoint) => (s_instance(S, s_Skeleton) & (s_component(P1, S) & (s_component(P2, S) & (s_component(J, S) & s_connects(J, P1, P2)))))))))).

/*
(subclass Airway Transitway)
*/
fof(a1980,axiom,s_subclass(s_Airway, s_Transitway)).

/*
(subclass Throat AnimalAnatomicalStructure)
*/
fof(a1981,axiom,s_subclass(s_Throat, s_AnimalAnatomicalStructure)).

/*
(subclass Throat BodyVessel)
*/
fof(a1982,axiom,s_subclass(s_Throat, s_BodyVessel)).

/*
(instance Throat SetOrClass)
*/
fof(a1983,axiom,s_instance(s_Throat, s_SetOrClass)).

/*
(instance Airway SetOrClass)
*/
fof(a1984,axiom,s_instance(s_Airway, s_SetOrClass)).

/*
(subclass Throat Airway)
*/
fof(a1985,axiom,s_subclass(s_Throat, s_Airway)).

/*
(forall (?THROAT)
 (exists (?MOUTH)
  (and (instance ?MOUTH Object)
       (=> (instance ?THROAT Throat)
        (and (instance ?MOUTH Mouth) (connected ?THROAT ?MOUTH))))))
*/
fof(a1986,axiom,! [THROAT] : (? [MOUTH] : ((s_instance(MOUTH, s_Object) & (s_instance(THROAT, s_Throat) => (s_instance(MOUTH, s_Mouth) & s_connected(THROAT, MOUTH))))))).

/*
(subclass Hair AnimalAnatomicalStructure)
*/
fof(a1987,axiom,s_subclass(s_Hair, s_AnimalAnatomicalStructure)).

/*
(forall (?HAIR)
 (exists (?MAMMAL ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?MAMMAL Object))
       (=> (instance ?HAIR Hair)
        (and (instance ?MAMMAL Mammal)
             (holdsDuring ?TIME (part ?HAIR ?MAMMAL)))))))
*/
%% no translation to TPTP available.

/*
(instance FacialHair SetOrClass)
*/
fof(a1988,axiom,s_instance(s_FacialHair, s_SetOrClass)).

/*
(instance Hair SetOrClass)
*/
fof(a1989,axiom,s_instance(s_Hair, s_SetOrClass)).

/*
(subclass FacialHair Hair)
*/
fof(a1990,axiom,s_subclass(s_FacialHair, s_Hair)).

/*
(forall (?H)
 (exists (?F)
  (and (instance ?F Object)
       (=> (instance ?H FacialHair)
        (and (instance ?F Face) (part ?H ?F))))))
*/
fof(a1991,axiom,! [H] : (? [F] : ((s_instance(F, s_Object) & (s_instance(H, s_FacialHair) => (s_instance(F, s_Face) & s_part(H, F))))))).

/*
(instance HairRemoval SetOrClass)
*/
fof(a1992,axiom,s_instance(s_HairRemoval, s_SetOrClass)).

/*
(subclass HairRemoval Removing)
*/
fof(a1993,axiom,s_subclass(s_HairRemoval, s_Removing)).

/*
(forall (?HAIR ?REMOVE)
 (=> (instance ?HAIR Object)
  (=> (and (instance ?REMOVE HairRemoval) (resource ?REMOVE ?HAIR))
   (instance ?HAIR Hair))))
*/
fof(a1994,axiom,! [HAIR,REMOVE] : ((s_instance(HAIR, s_Object) => ((s_instance(REMOVE, s_HairRemoval) & s_resource(REMOVE, HAIR)) => s_instance(HAIR, s_Hair))))).

/*
(instance Peeling SetOrClass)
*/
fof(a1995,axiom,s_instance(s_Peeling, s_SetOrClass)).

/*
(subclass Peeling Removing)
*/
fof(a1996,axiom,s_subclass(s_Peeling, s_Removing)).

/*
(forall (?O ?P)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?O Object)
        (=> (and (instance ?P Peeling) (patient ?P ?O))
         (and (instance ?S Skin) (part ?O ?S)))))))
*/
fof(a1997,axiom,! [O,P] : (? [S] : ((s_instance(S, s_Object) & (s_instance(O, s_Object) => ((s_instance(P, s_Peeling) & s_patient(P, O)) => (s_instance(S, s_Skin) & s_part(O, S)))))))).

/*
(subclass Brain Organ)
*/
fof(a1998,axiom,s_subclass(s_Brain, s_Organ)).

/*
(instance Brain SetOrClass)
*/
fof(a1999,axiom,s_instance(s_Brain, s_SetOrClass)).

/*
(subclass Brain AnimalAnatomicalStructure)
*/
fof(a2000,axiom,s_subclass(s_Brain, s_AnimalAnatomicalStructure)).

/*
(instance intelligenceQuotient BinaryPredicate)
*/
fof(a2001,axiom,s_instance(s_intelligenceQuotient_m, s_BinaryPredicate)).

/*
(instance intelligenceQuotient SingleValuedRelation)
*/
fof(a2002,axiom,s_instance(s_intelligenceQuotient_m, s_SingleValuedRelation)).

/*
(subclass Stomach Organ)
*/
fof(a2003,axiom,s_subclass(s_Stomach, s_Organ)).

/*
(instance Stomach SetOrClass)
*/
fof(a2004,axiom,s_instance(s_Stomach, s_SetOrClass)).

/*
(subclass Stomach AnimalAnatomicalStructure)
*/
fof(a2005,axiom,s_subclass(s_Stomach, s_AnimalAnatomicalStructure)).

/*
(forall (?S)
 (=> (instance ?S Stomach) (capability Digesting instrument ?S)))
*/
fof(a2006,axiom,! [S] : ((s_instance(S, s_Stomach) => s_capability(s_Digesting, s_instrument_m, S)))).

/*
(subclass Intestine BodyVessel)
*/
fof(a2007,axiom,s_subclass(s_Intestine, s_BodyVessel)).

/*
(instance Intestine SetOrClass)
*/
fof(a2008,axiom,s_instance(s_Intestine, s_SetOrClass)).

/*
(subclass Intestine AnimalAnatomicalStructure)
*/
fof(a2009,axiom,s_subclass(s_Intestine, s_AnimalAnatomicalStructure)).

/*
(forall (?I)
 (=> (instance ?I Intestine) (capability Digesting instrument ?I)))
*/
fof(a2010,axiom,! [I] : ((s_instance(I, s_Intestine) => s_capability(s_Digesting, s_instrument_m, I)))).

/*
(forall (?I)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?I Intestine)
        (and (instance ?S Stomach) (connected ?I ?S))))))
*/
fof(a2011,axiom,! [I] : (? [S] : ((s_instance(S, s_Object) & (s_instance(I, s_Intestine) => (s_instance(S, s_Stomach) & s_connected(I, S))))))).

/*
(subclass Hypothalamus BodyPart)
*/
fof(a2012,axiom,s_subclass(s_Hypothalamus, s_BodyPart)).

/*
(instance Hypothalamus SetOrClass)
*/
fof(a2013,axiom,s_instance(s_Hypothalamus, s_SetOrClass)).

/*
(subclass Hypothalamus AnimalAnatomicalStructure)
*/
fof(a2014,axiom,s_subclass(s_Hypothalamus, s_AnimalAnatomicalStructure)).

/*
(forall (?HYPO)
 (exists (?BRAIN)
  (and (instance ?BRAIN Object)
       (=> (instance ?HYPO Hypothalamus)
        (and (instance ?BRAIN Brain) (part ?HYPO ?BRAIN))))))
*/
fof(a2015,axiom,! [HYPO] : (? [BRAIN] : ((s_instance(BRAIN, s_Object) & (s_instance(HYPO, s_Hypothalamus) => (s_instance(BRAIN, s_Brain) & s_part(HYPO, BRAIN))))))).

/*
(subclass Eye Organ)
*/
fof(a2016,axiom,s_subclass(s_Eye, s_Organ)).

/*
(instance Eye SetOrClass)
*/
fof(a2017,axiom,s_instance(s_Eye, s_SetOrClass)).

/*
(subclass Eye AnimalAnatomicalStructure)
*/
fof(a2018,axiom,s_subclass(s_Eye, s_AnimalAnatomicalStructure)).

/*
(forall (?EYE)
 (=> (instance ?EYE Eye) (capability Seeing instrument ?EYE)))
*/
fof(a2019,axiom,! [EYE] : ((s_instance(EYE, s_Eye) => s_capability(s_Seeing, s_instrument_m, EYE)))).

/*
(forall (?EYE)
 (exists (?HEAD)
  (and (instance ?HEAD Object)
       (=> (instance ?EYE Eye)
        (and (instance ?HEAD Head) (part ?EYE ?HEAD))))))
*/
fof(a2020,axiom,! [EYE] : (? [HEAD] : ((s_instance(HEAD, s_Object) & (s_instance(EYE, s_Eye) => (s_instance(HEAD, s_Head) & s_part(EYE, HEAD))))))).

/*
(subclass Ear Organ)
*/
fof(a2021,axiom,s_subclass(s_Ear, s_Organ)).

/*
(instance Ear SetOrClass)
*/
fof(a2022,axiom,s_instance(s_Ear, s_SetOrClass)).

/*
(subclass Ear AnimalAnatomicalStructure)
*/
fof(a2023,axiom,s_subclass(s_Ear, s_AnimalAnatomicalStructure)).

/*
(forall (?EAR)
 (=> (instance ?EAR Ear) (capability Hearing instrument ?EAR)))
*/
fof(a2024,axiom,! [EAR] : ((s_instance(EAR, s_Ear) => s_capability(s_Hearing, s_instrument_m, EAR)))).

/*
(forall (?EAR)
 (exists (?HEAD)
  (and (instance ?HEAD Object)
       (=> (instance ?EAR Ear)
        (and (instance ?HEAD Head) (part ?EAR ?HEAD))))))
*/
fof(a2025,axiom,! [EAR] : (? [HEAD] : ((s_instance(HEAD, s_Object) & (s_instance(EAR, s_Ear) => (s_instance(HEAD, s_Head) & s_part(EAR, HEAD))))))).

/*
(instance Eyelid SetOrClass)
*/
fof(a2026,axiom,s_instance(s_Eyelid, s_SetOrClass)).

/*
(instance Skin SetOrClass)
*/
fof(a2027,axiom,s_instance(s_Skin, s_SetOrClass)).

/*
(subclass Eyelid Skin)
*/
fof(a2028,axiom,s_subclass(s_Eyelid, s_Skin)).

/*
(forall (?E)
 (=> (instance ?E Eyelid) (capability Covering instrument ?E)))
*/
fof(a2029,axiom,! [E] : ((s_instance(E, s_Eyelid) => s_capability(s_Covering, s_instrument_m, E)))).

/*
(forall (?E)
 (=> (instance ?E Eyelid)
  (hasPurpose ?E
   (exists (?EYE ?P ?C)
    (and (instance ?C Covering)
         (and (instance ?C BodyMotion)
              (and (instance ?P Human)
                   (and (experiencer ?C ?P)
                        (and (instrument ?C ?E)
                             (and (patient ?C ?EYE)
                                  (and
                                   (instance ?EYE Eye)
                                   (and
                                    (part ?EYE ?P)
                                    (part ?E ?P)))))))))))))
*/
%% no translation to TPTP available.

/*
(instance EyeIris SetOrClass)
*/
fof(a2030,axiom,s_instance(s_EyeIris, s_SetOrClass)).

/*
(subclass EyeIris Organ)
*/
fof(a2031,axiom,s_subclass(s_EyeIris, s_Organ)).

/*
(forall (?I)
 (exists (?E)
  (and (instance ?E Object)
       (=> (instance ?I EyeIris)
        (and (instance ?E Eye) (part ?I ?E))))))
*/
fof(a2032,axiom,! [I] : (? [E] : ((s_instance(E, s_Object) & (s_instance(I, s_EyeIris) => (s_instance(E, s_Eye) & s_part(I, E))))))).

/*
(subclass Nose Organ)
*/
fof(a2033,axiom,s_subclass(s_Nose, s_Organ)).

/*
(instance Nose SetOrClass)
*/
fof(a2034,axiom,s_instance(s_Nose, s_SetOrClass)).

/*
(subclass Nose AnimalAnatomicalStructure)
*/
fof(a2035,axiom,s_subclass(s_Nose, s_AnimalAnatomicalStructure)).

/*
(forall (?NOSE)
 (=> (instance ?NOSE Nose) (capability Smelling instrument ?NOSE)))
*/
fof(a2036,axiom,! [NOSE] : ((s_instance(NOSE, s_Nose) => s_capability(s_Smelling, s_instrument_m, NOSE)))).

/*
(forall (?NOSE)
 (exists (?FACE)
  (and (instance ?FACE Object)
       (=> (instance ?NOSE Nose)
        (and (instance ?FACE Face) (part ?NOSE ?FACE))))))
*/
fof(a2037,axiom,! [NOSE] : (? [FACE] : ((s_instance(FACE, s_Object) & (s_instance(NOSE, s_Nose) => (s_instance(FACE, s_Face) & s_part(NOSE, FACE))))))).

/*
(instance secretesSubstance BinaryPredicate)
*/
fof(a2038,axiom,s_instance(s_secretesSubstance_m, s_BinaryPredicate)).

/*
(domainSubclass secretesSubstance 1 OrganicObject)
*/
fof(a2039,axiom,s_domainSubclass(s_secretesSubstance_m, 1, s_OrganicObject)).

/*
(domainSubclass secretesSubstance 2 NaturalSubstance)
*/
fof(a2040,axiom,s_domainSubclass(s_secretesSubstance_m, 2, s_NaturalSubstance)).

/*
(forall (?S ?O)
 (forall (?I1)
  (exists (?P ?I2)
   (and (and (instance ?I2 Entity) (instance ?P Process))
        (=> (instance ?I1 Object)
         (=>
          (and (instance ?O SetOrClass) (subclass ?O OrganicObject)
               (subclass ?S NaturalSubstance) (instance ?S SetOrClass))
          (=> (secretesSubstance ?O ?S)
           (=> (instance ?I1 ?O)
            (and (instance ?P BiologicalProcess)
                 (and (eventLocated ?P ?I1)
                      (and (result ?P ?I2) (instance ?I2 ?S))))))))))))
*/
fof(a2041,axiom,! [S,O] : (! [I1] : (? [P,I2] : (((s_instance(I2, s_Entity) & s_instance(P, s_Process)) & (s_instance(I1, s_Object) => ((s_instance(O, s_SetOrClass) & s_subclass(O, s_OrganicObject) & s_subclass(S, s_NaturalSubstance) & s_instance(S, s_SetOrClass)) => (s_secretesSubstance(O, S) => (s_instance(I1, O) => (s_instance(P, s_BiologicalProcess) & (s_eventLocated(P, I1) & (s_result(P, I2) & s_instance(I2, S))))))))))))).

/*
(instance ThyroidGland SetOrClass)
*/
fof(a2042,axiom,s_instance(s_ThyroidGland, s_SetOrClass)).

/*
(subclass ThyroidGland Gland)
*/
fof(a2043,axiom,s_subclass(s_ThyroidGland, s_Gland)).

/*
(instance ThyroidHormone SetOrClass)
*/
fof(a2044,axiom,s_instance(s_ThyroidHormone, s_SetOrClass)).

/*
(subclass ThyroidHormone Hormone)
*/
fof(a2045,axiom,s_subclass(s_ThyroidHormone, s_Hormone)).

/*
(instance PituitaryGland SetOrClass)
*/
fof(a2046,axiom,s_instance(s_PituitaryGland, s_SetOrClass)).

/*
(subclass PituitaryGland Gland)
*/
fof(a2047,axiom,s_subclass(s_PituitaryGland, s_Gland)).

/*
(instance HormoneTSH SetOrClass)
*/
fof(a2048,axiom,s_instance(s_HormoneTSH, s_SetOrClass)).

/*
(subclass HormoneTSH Hormone)
*/
fof(a2049,axiom,s_subclass(s_HormoneTSH, s_Hormone)).

/*
(forall (?HORMONE)
 (exists (?PROC ?GLAND)
  (and (and (instance ?GLAND Object) (instance ?PROC Process))
       (=> (instance ?HORMONE HormoneTSH)
        (and (instance ?GLAND ThyroidGland)
             (and (instrument ?PROC ?GLAND)
                  (result ?PROC ?HORMONE)))))))
*/
fof(a2050,axiom,! [HORMONE] : (? [PROC,GLAND] : (((s_instance(GLAND, s_Object) & s_instance(PROC, s_Process)) & (s_instance(HORMONE, s_HormoneTSH) => (s_instance(GLAND, s_ThyroidGland) & (s_instrument(PROC, GLAND) & s_result(PROC, HORMONE)))))))).

/*
(instance Pancreas SetOrClass)
*/
fof(a2051,axiom,s_instance(s_Pancreas, s_SetOrClass)).

/*
(subclass Pancreas Gland)
*/
fof(a2052,axiom,s_subclass(s_Pancreas, s_Gland)).

/*
(forall (?P) (=> (instance ?P Pancreas) (secretesSubstance ?P Insulin)))
*/
fof(a2053,axiom,! [P] : ((s_instance(P, s_Pancreas) => s_secretesSubstance(P, s_Insulin)))).

/*
(instance Insulin SetOrClass)
*/
fof(a2054,axiom,s_instance(s_Insulin, s_SetOrClass)).

/*
(subclass Insulin Hormone)
*/
fof(a2055,axiom,s_subclass(s_Insulin, s_Hormone)).

/*
(instance Arm SetOrClass)
*/
fof(a2056,axiom,s_instance(s_Arm, s_SetOrClass)).

/*
(subclass Arm Limb)
*/
fof(a2057,axiom,s_subclass(s_Arm, s_Limb)).

/*
(forall (?ARM)
 (exists (?PRIMATE)
  (and (instance ?PRIMATE Object)
       (=> (instance ?ARM Arm)
        (and (instance ?PRIMATE Primate) (part ?ARM ?PRIMATE))))))
*/
fof(a2058,axiom,! [ARM] : (? [PRIMATE] : ((s_instance(PRIMATE, s_Object) & (s_instance(ARM, s_Arm) => (s_instance(PRIMATE, s_Primate) & s_part(ARM, PRIMATE))))))).

/*
(subclass Hand AnimalAnatomicalStructure)
*/
fof(a2059,axiom,s_subclass(s_Hand, s_AnimalAnatomicalStructure)).

/*
(instance Hand SetOrClass)
*/
fof(a2060,axiom,s_instance(s_Hand, s_SetOrClass)).

/*
(subclass Hand BodyPart)
*/
fof(a2061,axiom,s_subclass(s_Hand, s_BodyPart)).

/*
(forall (?HAND)
 (exists (?ARM)
  (and (instance ?ARM Object)
       (=> (instance ?HAND Hand)
        (and (instance ?ARM Arm) (part ?HAND ?ARM))))))
*/
fof(a2062,axiom,! [HAND] : (? [ARM] : ((s_instance(ARM, s_Object) & (s_instance(HAND, s_Hand) => (s_instance(ARM, s_Arm) & s_part(HAND, ARM))))))).

/*
(subclass DigitAppendage AnimalAnatomicalStructure)
*/
fof(a2063,axiom,s_subclass(s_DigitAppendage, s_AnimalAnatomicalStructure)).

/*
(subclass DigitAppendage BodyPart)
*/
fof(a2064,axiom,s_subclass(s_DigitAppendage, s_BodyPart)).

/*
(forall (?DIGIT)
 (exists (?LIMB)
  (and (instance ?LIMB Object)
       (=> (instance ?DIGIT DigitAppendage)
        (and (instance ?LIMB Limb) (part ?DIGIT ?LIMB))))))
*/
fof(a2065,axiom,! [DIGIT] : (? [LIMB] : ((s_instance(LIMB, s_Object) & (s_instance(DIGIT, s_DigitAppendage) => (s_instance(LIMB, s_Limb) & s_part(DIGIT, LIMB))))))).

/*
(instance Toad SetOrClass)
*/
fof(a2066,axiom,s_instance(s_Toad, s_SetOrClass)).

/*
(subclass Toad Amphibian)
*/
fof(a2067,axiom,s_subclass(s_Toad, s_Amphibian)).

/*
(forall (?A)
 (forall (?T)
  (=> (instance ?T Object)
   (=> (instance ?A Toad)
    (not (and (instance ?T Tail) (part ?T ?A)))))))
*/
fof(a2068,axiom,! [A] : (! [T] : ((s_instance(T, s_Object) => (s_instance(A, s_Toad) => (~ (s_instance(T, s_Tail) & s_part(T, A)))))))).

/*
(initialPart DigitAppendage Limb)
*/
fof(a2069,axiom,s_initialPart(s_DigitAppendage, s_Limb)).

/*
(subclass Finger DigitAppendage)
*/
fof(a2070,axiom,s_subclass(s_Finger, s_DigitAppendage)).

/*
(forall (?FINGER)
 (exists (?HAND)
  (and (instance ?HAND Object)
       (=> (instance ?FINGER Finger)
        (and (instance ?HAND Hand) (part ?FINGER ?HAND))))))
*/
fof(a2071,axiom,! [FINGER] : (? [HAND] : ((s_instance(HAND, s_Object) & (s_instance(FINGER, s_Finger) => (s_instance(HAND, s_Hand) & s_part(FINGER, HAND))))))).

/*
(instance Thumb SetOrClass)
*/
fof(a2072,axiom,s_instance(s_Thumb, s_SetOrClass)).

/*
(instance Finger SetOrClass)
*/
fof(a2073,axiom,s_instance(s_Finger, s_SetOrClass)).

/*
(subclass Thumb Finger)
*/
fof(a2074,axiom,s_subclass(s_Thumb, s_Finger)).

/*
(instance NailDigit SetOrClass)
*/
fof(a2075,axiom,s_instance(s_NailDigit, s_SetOrClass)).

/*
(subclass NailDigit AnimalAnatomicalStructure)
*/
fof(a2076,axiom,s_subclass(s_NailDigit, s_AnimalAnatomicalStructure)).

/*
(forall (?N)
 (exists (?D)
  (and (instance ?D Object)
       (=> (instance ?N NailDigit)
        (and (instance ?D DigitAppendage) (part ?N ?D))))))
*/
fof(a2077,axiom,! [N] : (? [D] : ((s_instance(D, s_Object) & (s_instance(N, s_NailDigit) => (s_instance(D, s_DigitAppendage) & s_part(N, D))))))).

/*
(subclass Fingerprint ShapeAttribute)
*/
fof(a2078,axiom,s_subclass(s_Fingerprint, s_ShapeAttribute)).

/*
(instance Fingerprint SetOrClass)
*/
fof(a2079,axiom,s_instance(s_Fingerprint, s_SetOrClass)).

/*
(subclass Fingerprint BiologicalAttribute)
*/
fof(a2080,axiom,s_subclass(s_Fingerprint, s_BiologicalAttribute)).

/*
(forall (?P ?O)
 (exists (?PR ?F)
  (and (and (instance ?F Object) (instance ?PR Process))
       (=> (instance ?O Object)
        (=>
         (and (attribute ?O ?P)
              (and (instance ?P Fingerprint)
                   (not (instance ?O Finger))))
         (and (instrument ?PR ?F)
              (and (instance ?F Finger)
                   (and (attribute ?F ?P) (patient ?PR ?O)))))))))
*/
fof(a2081,axiom,! [P,O] : (? [PR,F] : (((s_instance(F, s_Object) & s_instance(PR, s_Process)) & (s_instance(O, s_Object) => ((s_attribute(O, P) & (s_instance(P, s_Fingerprint) & (~ s_instance(O, s_Finger)))) => (s_instrument(PR, F) & (s_instance(F, s_Finger) & (s_attribute(F, P) & s_patient(PR, O)))))))))).

/*
(subclass Limb AnimalAnatomicalStructure)
*/
fof(a2082,axiom,s_subclass(s_Limb, s_AnimalAnatomicalStructure)).

/*
(subclass Limb BodyPart)
*/
fof(a2083,axiom,s_subclass(s_Limb, s_BodyPart)).

/*
(forall (?LIMB)
 (exists (?VERTEBRATE)
  (and (instance ?VERTEBRATE Object)
       (=> (instance ?LIMB Limb)
        (and (instance ?VERTEBRATE Vertebrate)
             (part ?LIMB ?VERTEBRATE))))))
*/
fof(a2084,axiom,! [LIMB] : (? [VERTEBRATE] : ((s_instance(VERTEBRATE, s_Object) & (s_instance(LIMB, s_Limb) => (s_instance(VERTEBRATE, s_Vertebrate) & s_part(LIMB, VERTEBRATE))))))).

/*
(subclass Snake Reptile)
*/
fof(a2085,axiom,s_subclass(s_Snake, s_Reptile)).

/*
(forall (?SNAKE)
 (forall (?LIMB)
  (=> (instance ?LIMB Object)
   (=> (instance ?SNAKE Snake)
    (not (and (instance ?LIMB Limb) (part ?LIMB ?SNAKE)))))))
*/
fof(a2086,axiom,! [SNAKE] : (! [LIMB] : ((s_instance(LIMB, s_Object) => (s_instance(SNAKE, s_Snake) => (~ (s_instance(LIMB, s_Limb) & s_part(LIMB, SNAKE)))))))).

/*
(instance Rattlesnake SetOrClass)
*/
fof(a2087,axiom,s_instance(s_Rattlesnake, s_SetOrClass)).

/*
(subclass Rattlesnake Snake)
*/
fof(a2088,axiom,s_subclass(s_Rattlesnake, s_Snake)).

/*
(instance Snake SetOrClass)
*/
fof(a2089,axiom,s_instance(s_Snake, s_SetOrClass)).

/*
(subclass ConstrictorSnake Snake)
*/
fof(a2090,axiom,s_subclass(s_ConstrictorSnake, s_Snake)).

/*
(instance AntInsect SetOrClass)
*/
fof(a2091,axiom,s_instance(s_AntInsect, s_SetOrClass)).

/*
(subclass AntInsect Insect)
*/
fof(a2092,axiom,s_subclass(s_AntInsect, s_Insect)).

/*
(instance Anaconda SetOrClass)
*/
fof(a2093,axiom,s_instance(s_Anaconda, s_SetOrClass)).

/*
(instance ConstrictorSnake SetOrClass)
*/
fof(a2094,axiom,s_instance(s_ConstrictorSnake, s_SetOrClass)).

/*
(subclass Anaconda ConstrictorSnake)
*/
fof(a2095,axiom,s_subclass(s_Anaconda, s_ConstrictorSnake)).

/*
(subclass Bee Insect)
*/
fof(a2096,axiom,s_subclass(s_Bee, s_Insect)).

/*
(instance BumbleBee SetOrClass)
*/
fof(a2097,axiom,s_instance(s_BumbleBee, s_SetOrClass)).

/*
(instance Bee SetOrClass)
*/
fof(a2098,axiom,s_instance(s_Bee, s_SetOrClass)).

/*
(subclass BumbleBee Bee)
*/
fof(a2099,axiom,s_subclass(s_BumbleBee, s_Bee)).

/*
(instance FlyInsect SetOrClass)
*/
fof(a2100,axiom,s_instance(s_FlyInsect, s_SetOrClass)).

/*
(subclass FlyInsect Insect)
*/
fof(a2101,axiom,s_subclass(s_FlyInsect, s_Insect)).

/*
(instance Grasshopper SetOrClass)
*/
fof(a2102,axiom,s_instance(s_Grasshopper, s_SetOrClass)).

/*
(subclass Grasshopper Insect)
*/
fof(a2103,axiom,s_subclass(s_Grasshopper, s_Insect)).

/*
(instance Moth SetOrClass)
*/
fof(a2104,axiom,s_instance(s_Moth, s_SetOrClass)).

/*
(subclass Moth Insect)
*/
fof(a2105,axiom,s_subclass(s_Moth, s_Insect)).

/*
(instance QueenInsect SetOrClass)
*/
fof(a2106,axiom,s_instance(s_QueenInsect, s_SetOrClass)).

/*
(subclass QueenInsect Insect)
*/
fof(a2107,axiom,s_subclass(s_QueenInsect, s_Insect)).

/*
(disjoint QueenInsect WorkerInsect)
*/
fof(a2108,axiom,s_disjoint(s_QueenInsect, s_WorkerInsect)).

/*
(forall (?INSECT)
 (=> (instance ?INSECT QueenInsect)
  (and (attribute ?INSECT Female)
       (capability Replication agent ?INSECT))))
*/
fof(a2109,axiom,! [INSECT] : ((s_instance(INSECT, s_QueenInsect) => (s_attribute(INSECT, s_Female) & s_capability(s_Replication, s_agent_m, INSECT))))).

/*
(forall (?INSECT)
 (exists (?GROUP)
  (forall (?MEMBER)
   (=> (instance ?MEMBER Object)
    (and (instance ?GROUP Collection)
         (=> (instance ?INSECT QueenInsect)
          (and (instance ?GROUP Group)
               (and (member ?INSECT ?GROUP)
                    (not (and (member ?MEMBER ?GROUP)
                              (and (capability
                                    Replication
                                    agent
                                    ?MEMBER)
                                   (not
                                    (equal ?MEMBER ?INSECT)))))))))))))
*/
fof(a2110,axiom,! [INSECT] : (? [GROUP] : (! [MEMBER] : ((s_instance(MEMBER, s_Object) => (s_instance(GROUP, s_Collection) & (s_instance(INSECT, s_QueenInsect) => (s_instance(GROUP, s_Group) & (s_member(INSECT, GROUP) & (~ (s_member(MEMBER, GROUP) & (s_capability(s_Replication, s_agent_m, MEMBER) & (~ (MEMBER = INSECT)))))))))))))).

/*
(instance WorkerInsect SetOrClass)
*/
fof(a2111,axiom,s_instance(s_WorkerInsect, s_SetOrClass)).

/*
(subclass WorkerInsect Insect)
*/
fof(a2112,axiom,s_subclass(s_WorkerInsect, s_Insect)).

/*
(instance Leg SetOrClass)
*/
fof(a2113,axiom,s_instance(s_Leg, s_SetOrClass)).

/*
(instance Limb SetOrClass)
*/
fof(a2114,axiom,s_instance(s_Limb, s_SetOrClass)).

/*
(subclass Leg Limb)
*/
fof(a2115,axiom,s_subclass(s_Leg, s_Limb)).

/*
(forall (?LEG)
 (exists (?ANIMAL)
  (and (instance ?ANIMAL Object)
       (=> (instance ?LEG Leg)
        (and (instance ?ANIMAL Animal) (part ?LEG ?ANIMAL))))))
*/
fof(a2116,axiom,! [LEG] : (? [ANIMAL] : ((s_instance(ANIMAL, s_Object) & (s_instance(LEG, s_Leg) => (s_instance(ANIMAL, s_Animal) & s_part(LEG, ANIMAL))))))).

/*
(subclass Foot AnimalAnatomicalStructure)
*/
fof(a2117,axiom,s_subclass(s_Foot, s_AnimalAnatomicalStructure)).

/*
(instance Foot SetOrClass)
*/
fof(a2118,axiom,s_instance(s_Foot, s_SetOrClass)).

/*
(subclass Foot BodyPart)
*/
fof(a2119,axiom,s_subclass(s_Foot, s_BodyPart)).

/*
(forall (?FOOT)
 (exists (?LIMB)
  (and (instance ?LIMB Object)
       (=> (instance ?FOOT Foot)
        (and (instance ?LIMB Leg) (part ?FOOT ?LIMB))))))
*/
fof(a2120,axiom,! [FOOT] : (? [LIMB] : ((s_instance(LIMB, s_Object) & (s_instance(FOOT, s_Foot) => (s_instance(LIMB, s_Leg) & s_part(FOOT, LIMB))))))).

/*
(instance Ankle SetOrClass)
*/
fof(a2121,axiom,s_instance(s_Ankle, s_SetOrClass)).

/*
(subclass Ankle BodyJoint)
*/
fof(a2122,axiom,s_subclass(s_Ankle, s_BodyJoint)).

/*
(forall (?A)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?A Ankle) (and (instance ?L Leg) (part ?A ?L))))))
*/
fof(a2123,axiom,! [A] : (? [L] : ((s_instance(L, s_Object) & (s_instance(A, s_Ankle) => (s_instance(L, s_Leg) & s_part(A, L))))))).

/*
(instance Elbow SetOrClass)
*/
fof(a2124,axiom,s_instance(s_Elbow, s_SetOrClass)).

/*
(subclass Elbow BodyJoint)
*/
fof(a2125,axiom,s_subclass(s_Elbow, s_BodyJoint)).

/*
(forall (?E)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?E Elbow) (and (instance ?A Arm) (part ?E ?A))))))
*/
fof(a2126,axiom,! [E] : (? [A] : ((s_instance(A, s_Object) & (s_instance(E, s_Elbow) => (s_instance(A, s_Arm) & s_part(E, A))))))).

/*
(instance Wrist SetOrClass)
*/
fof(a2127,axiom,s_instance(s_Wrist, s_SetOrClass)).

/*
(subclass Wrist BodyJoint)
*/
fof(a2128,axiom,s_subclass(s_Wrist, s_BodyJoint)).

/*
(forall (?W)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?W Wrist) (and (instance ?A Arm) (part ?W ?A))))))
*/
fof(a2129,axiom,! [W] : (? [A] : ((s_instance(A, s_Object) & (s_instance(W, s_Wrist) => (s_instance(A, s_Arm) & s_part(W, A))))))).

/*
(subclass Toe AnimalAnatomicalStructure)
*/
fof(a2130,axiom,s_subclass(s_Toe, s_AnimalAnatomicalStructure)).

/*
(subclass Toe BodyPart)
*/
fof(a2131,axiom,s_subclass(s_Toe, s_BodyPart)).

/*
(instance Toe SetOrClass)
*/
fof(a2132,axiom,s_instance(s_Toe, s_SetOrClass)).

/*
(instance DigitAppendage SetOrClass)
*/
fof(a2133,axiom,s_instance(s_DigitAppendage, s_SetOrClass)).

/*
(subclass Toe DigitAppendage)
*/
fof(a2134,axiom,s_subclass(s_Toe, s_DigitAppendage)).

/*
(forall (?TOE)
 (exists (?FOOT)
  (and (instance ?FOOT Object)
       (=> (instance ?TOE Toe)
        (and (instance ?FOOT Foot) (part ?TOE ?FOOT))))))
*/
fof(a2135,axiom,! [TOE] : (? [FOOT] : ((s_instance(FOOT, s_Object) & (s_instance(TOE, s_Toe) => (s_instance(FOOT, s_Foot) & s_part(TOE, FOOT))))))).

/*
(instance Knee SetOrClass)
*/
fof(a2136,axiom,s_instance(s_Knee, s_SetOrClass)).

/*
(subclass Knee BodyJoint)
*/
fof(a2137,axiom,s_subclass(s_Knee, s_BodyJoint)).

/*
(forall (?KNEE)
 (exists (?LEG)
  (and (instance ?LEG Object)
       (=> (instance ?KNEE Knee)
        (and (instance ?LEG Leg) (part ?KNEE ?LEG))))))
*/
fof(a2138,axiom,! [KNEE] : (? [LEG] : ((s_instance(LEG, s_Object) & (s_instance(KNEE, s_Knee) => (s_instance(LEG, s_Leg) & s_part(KNEE, LEG))))))).

/*
(subclass Shoulder AnimalAnatomicalStructure)
*/
fof(a2139,axiom,s_subclass(s_Shoulder, s_AnimalAnatomicalStructure)).

/*
(instance Shoulder SetOrClass)
*/
fof(a2140,axiom,s_instance(s_Shoulder, s_SetOrClass)).

/*
(subclass Shoulder BodyPart)
*/
fof(a2141,axiom,s_subclass(s_Shoulder, s_BodyPart)).

/*
(forall (?SHOULDER)
 (exists (?PRIMATE)
  (and (instance ?PRIMATE Object)
       (=> (instance ?SHOULDER Shoulder)
        (and (instance ?PRIMATE Primate) (part ?SHOULDER ?PRIMATE))))))
*/
fof(a2142,axiom,! [SHOULDER] : (? [PRIMATE] : ((s_instance(PRIMATE, s_Object) & (s_instance(SHOULDER, s_Shoulder) => (s_instance(PRIMATE, s_Primate) & s_part(SHOULDER, PRIMATE))))))).

/*
(instance Knuckle SetOrClass)
*/
fof(a2143,axiom,s_instance(s_Knuckle, s_SetOrClass)).

/*
(subclass Knuckle BodyJoint)
*/
fof(a2144,axiom,s_subclass(s_Knuckle, s_BodyJoint)).

/*
(forall (?KNUCKLE)
 (exists (?FINGER)
  (and (instance ?FINGER Object)
       (=> (instance ?KNUCKLE Knuckle)
        (and (instance ?FINGER Finger) (part ?KNUCKLE ?FINGER))))))
*/
fof(a2145,axiom,! [KNUCKLE] : (? [FINGER] : ((s_instance(FINGER, s_Object) & (s_instance(KNUCKLE, s_Knuckle) => (s_instance(FINGER, s_Finger) & s_part(KNUCKLE, FINGER))))))).

/*
(instance HipJoint SetOrClass)
*/
fof(a2146,axiom,s_instance(s_HipJoint, s_SetOrClass)).

/*
(instance BodyJoint SetOrClass)
*/
fof(a2147,axiom,s_instance(s_BodyJoint, s_SetOrClass)).

/*
(subclass HipJoint BodyJoint)
*/
fof(a2148,axiom,s_subclass(s_HipJoint, s_BodyJoint)).

/*
(subclass Torso AnimalAnatomicalStructure)
*/
fof(a2149,axiom,s_subclass(s_Torso, s_AnimalAnatomicalStructure)).

/*
(instance Torso SetOrClass)
*/
fof(a2150,axiom,s_instance(s_Torso, s_SetOrClass)).

/*
(subclass Torso BodyPart)
*/
fof(a2151,axiom,s_subclass(s_Torso, s_BodyPart)).

/*
(forall (?LIMB ?TORSO)
 (=> (and (instance ?TORSO Torso) (instance ?LIMB Limb))
  (not (overlapsSpatially ?TORSO ?LIMB))))
*/
fof(a2152,axiom,! [LIMB,TORSO] : (((s_instance(TORSO, s_Torso) & s_instance(LIMB, s_Limb)) => (~ s_overlapsSpatially(TORSO, LIMB))))).

/*
(instance Waist SetOrClass)
*/
fof(a2153,axiom,s_instance(s_Waist, s_SetOrClass)).

/*
(subclass Waist BodyPart)
*/
fof(a2154,axiom,s_subclass(s_Waist, s_BodyPart)).

/*
(subclass Breast AnimalAnatomicalStructure)
*/
fof(a2155,axiom,s_subclass(s_Breast, s_AnimalAnatomicalStructure)).

/*
(instance Breast SetOrClass)
*/
fof(a2156,axiom,s_instance(s_Breast, s_SetOrClass)).

/*
(subclass Breast Organ)
*/
fof(a2157,axiom,s_subclass(s_Breast, s_Organ)).

/*
(forall (?B)
 (exists (?T)
  (and (instance ?T SelfConnectedObject)
       (=> (instance ?B Breast)
        (and (instance ?T Torso) (part ?B (FrontFn ?T)))))))
*/
fof(a2158,axiom,! [B] : (? [T] : ((s_instance(T, s_SelfConnectedObject) & (s_instance(B, s_Breast) => (s_instance(T, s_Torso) & s_part(B, s_FrontFn(T)))))))).

/*
(forall (?B)
 (exists (?P)
  (and (instance ?P Object)
       (=> (instance ?B Breast)
        (and (instance ?P Primate) (part ?B ?P))))))
*/
fof(a2159,axiom,! [B] : (? [P] : ((s_instance(P, s_Object) & (s_instance(B, s_Breast) => (s_instance(P, s_Primate) & s_part(B, P))))))).

/*
(instance Bust SetOrClass)
*/
fof(a2160,axiom,s_instance(s_Bust, s_SetOrClass)).

/*
(subclass Bust BodyPart)
*/
fof(a2161,axiom,s_subclass(s_Bust, s_BodyPart)).

/*
(subclass Head AnimalAnatomicalStructure)
*/
fof(a2162,axiom,s_subclass(s_Head, s_AnimalAnatomicalStructure)).

/*
(instance Head SetOrClass)
*/
fof(a2163,axiom,s_instance(s_Head, s_SetOrClass)).

/*
(subclass Head BodyPart)
*/
fof(a2164,axiom,s_subclass(s_Head, s_BodyPart)).

/*
(subclass Neck AnimalAnatomicalStructure)
*/
fof(a2165,axiom,s_subclass(s_Neck, s_AnimalAnatomicalStructure)).

/*
(instance Neck SetOrClass)
*/
fof(a2166,axiom,s_instance(s_Neck, s_SetOrClass)).

/*
(subclass Neck BodyPart)
*/
fof(a2167,axiom,s_subclass(s_Neck, s_BodyPart)).

/*
(forall (?NECK)
 (exists (?HEAD)
  (and (instance ?HEAD Object)
       (=> (instance ?NECK Neck)
        (and (instance ?HEAD Head) (connected ?NECK ?HEAD))))))
*/
fof(a2168,axiom,! [NECK] : (? [HEAD] : ((s_instance(HEAD, s_Object) & (s_instance(NECK, s_Neck) => (s_instance(HEAD, s_Head) & s_connected(NECK, HEAD))))))).

/*
(subclass Face AnimalAnatomicalStructure)
*/
fof(a2169,axiom,s_subclass(s_Face, s_AnimalAnatomicalStructure)).

/*
(instance Face SetOrClass)
*/
fof(a2170,axiom,s_instance(s_Face, s_SetOrClass)).

/*
(subclass Face BodyPart)
*/
fof(a2171,axiom,s_subclass(s_Face, s_BodyPart)).

/*
(forall (?FACE)
 (exists (?HEAD)
  (and (instance ?HEAD Object)
       (=> (instance ?FACE Face)
        (and (instance ?HEAD Head) (part ?FACE ?HEAD))))))
*/
fof(a2172,axiom,! [FACE] : (? [HEAD] : ((s_instance(HEAD, s_Object) & (s_instance(FACE, s_Face) => (s_instance(HEAD, s_Head) & s_part(FACE, HEAD))))))).

/*
(forall (?FACE)
 (exists (?VERTEBRATE)
  (and (instance ?VERTEBRATE Object)
       (=> (instance ?FACE Face)
        (and (instance ?VERTEBRATE Vertebrate)
             (part ?FACE ?VERTEBRATE))))))
*/
fof(a2173,axiom,! [FACE] : (? [VERTEBRATE] : ((s_instance(VERTEBRATE, s_Object) & (s_instance(FACE, s_Face) => (s_instance(VERTEBRATE, s_Vertebrate) & s_part(FACE, VERTEBRATE))))))).

/*
(subclass Chin AnimalAnatomicalStructure)
*/
fof(a2174,axiom,s_subclass(s_Chin, s_AnimalAnatomicalStructure)).

/*
(instance Chin SetOrClass)
*/
fof(a2175,axiom,s_instance(s_Chin, s_SetOrClass)).

/*
(subclass Chin BodyPart)
*/
fof(a2176,axiom,s_subclass(s_Chin, s_BodyPart)).

/*
(forall (?CHIN)
 (exists (?FACE)
  (and (instance ?FACE Object)
       (=> (instance ?CHIN Chin)
        (and (instance ?FACE Face) (part ?CHIN ?FACE))))))
*/
fof(a2177,axiom,! [CHIN] : (? [FACE] : ((s_instance(FACE, s_Object) & (s_instance(CHIN, s_Chin) => (s_instance(FACE, s_Face) & s_part(CHIN, FACE))))))).

/*
(forall (?CHIN ?FACE)
 (forall (?PART)
  (=> (instance ?PART Object)
   (=> (instance ?FACE Object)
    (=> (instance ?CHIN Chin)
     (=> (and (part ?PART ?FACE) (not (part ?PART ?CHIN)))
      (orientation ?PART ?CHIN Below)))))))
*/
fof(a2178,axiom,! [CHIN,FACE] : (! [PART] : ((s_instance(PART, s_Object) => (s_instance(FACE, s_Object) => (s_instance(CHIN, s_Chin) => ((s_part(PART, FACE) & (~ s_part(PART, CHIN))) => s_orientation(PART, CHIN, s_Below)))))))).

/*
(partition3 Expressing Gesture ExpressingInLanguage)
*/
fof(a2179,axiom,s_partition3(s_Expressing, s_Gesture, s_ExpressingInLanguage)).

/*
(disjointDecomposition3 Expressing ExpressingApproval
 ExpressingDisapproval)
*/
fof(a2180,axiom,s_disjointDecomposition3(s_Expressing, s_ExpressingApproval, s_ExpressingDisapproval)).

/*
(subclass ExpressingApproval Expressing)
*/
fof(a2181,axiom,s_subclass(s_ExpressingApproval, s_Expressing)).

/*
(forall (?THING ?AGENT ?EXPRESS)
 (=> (and (instance ?THING Formula) (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance ?EXPRESS ExpressingApproval)
        (and (agent ?EXPRESS ?AGENT) (patient ?EXPRESS ?THING)))
   (or (wants ?AGENT ?THING) (desires ?AGENT ?THING)))))
*/
fof(a2182,axiom,! [THING,AGENT,EXPRESS] : (((s_instance(THING, s_Formula) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(EXPRESS, s_ExpressingApproval) & (s_agent(EXPRESS, AGENT) & s_patient(EXPRESS, THING))) => (s_wants(AGENT, THING) | s_desires(AGENT, THING)))))).

/*
(subclass ExpressingDisapproval Expressing)
*/
fof(a2183,axiom,s_subclass(s_ExpressingDisapproval, s_Expressing)).

/*
(forall (?THING ?AGENT ?EXPRESS)
 (=>
  (and (instance ?AGENT CognitiveAgent) (instance ?THING Object)
       (instance ?THING Formula))
  (=>
   (and (instance ?EXPRESS ExpressingDisapproval)
        (and (agent ?EXPRESS ?AGENT) (patient ?EXPRESS ?THING)))
   (or (dislikes ?AGENT ?THING) (disapproves ?AGENT ?THING)))))
*/
fof(a2184,axiom,! [THING,AGENT,EXPRESS] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(THING, s_Object) & s_instance(THING, s_Formula)) => ((s_instance(EXPRESS, s_ExpressingDisapproval) & (s_agent(EXPRESS, AGENT) & s_patient(EXPRESS, THING))) => (s_dislikes(AGENT, THING) | s_disapproves(AGENT, THING)))))).

/*
(instance Regretting SetOrClass)
*/
fof(a2185,axiom,s_instance(s_Regretting, s_SetOrClass)).

/*
(instance ExpressingDisapproval SetOrClass)
*/
fof(a2186,axiom,s_instance(s_ExpressingDisapproval, s_SetOrClass)).

/*
(subclass Regretting ExpressingDisapproval)
*/
fof(a2187,axiom,s_subclass(s_Regretting, s_ExpressingDisapproval)).

/*
(forall (?T ?R)
 (=>
  (and (instance ?R Regretting)
       (and (patient ?R ?T) (instance ?T Sentence)))
  (truth ?T True)))
*/
%% no translation to TPTP available.

/*
(instance ExpressingFarewell SetOrClass)
*/
fof(a2188,axiom,s_instance(s_ExpressingFarewell, s_SetOrClass)).

/*
(subclass ExpressingFarewell Expressing)
*/
fof(a2189,axiom,s_subclass(s_ExpressingFarewell, s_Expressing)).

/*
(instance Congratulating SetOrClass)
*/
fof(a2190,axiom,s_instance(s_Congratulating, s_SetOrClass)).

/*
(subclass Congratulating ExpressingApproval)
*/
fof(a2191,axiom,s_subclass(s_Congratulating, s_ExpressingApproval)).

/*
(forall (?C)
 (exists (?P ?A ?D)
  (and (and (instance ?D Agent) (instance ?A CognitiveAgent)
            (instance ?P Process))
       (=> (instance ?C Congratulating)
        (and (destination ?C ?D)
             (and (agent ?P ?D)
                  (and (agent ?C ?A)
                       (and (wants ?A ?P) (refers ?C ?P)))))))))
*/
fof(a2192,axiom,! [C] : (? [P,A,D] : (((s_instance(D, s_Agent) & s_instance(A, s_CognitiveAgent) & s_instance(P, s_Process)) & (s_instance(C, s_Congratulating) => (s_destination(C, D) & (s_agent(P, D) & (s_agent(C, A) & (s_wants(A, P) & s_refers(C, P)))))))))).

/*
(subclass FacialExpression Gesture)
*/
fof(a2193,axiom,s_subclass(s_FacialExpression, s_Gesture)).

/*
(forall (?AGENT ?EXPRESS)
 (exists (?FACE)
  (and (instance ?FACE Object)
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?EXPRESS FacialExpression)
              (agent ?EXPRESS ?AGENT))
         (and (part ?FACE ?AGENT)
              (and (instance ?FACE Face)
                   (instrument ?EXPRESS ?FACE))))))))
*/
fof(a2194,axiom,! [AGENT,EXPRESS] : (? [FACE] : ((s_instance(FACE, s_Object) & (s_instance(AGENT, s_Agent) => ((s_instance(EXPRESS, s_FacialExpression) & s_agent(EXPRESS, AGENT)) => (s_part(FACE, AGENT) & (s_instance(FACE, s_Face) & s_instrument(EXPRESS, FACE))))))))).

/*
(instance Smiling SetOrClass)
*/
fof(a2195,axiom,s_instance(s_Smiling, s_SetOrClass)).

/*
(subclass Smiling FacialExpression)
*/
fof(a2196,axiom,s_subclass(s_Smiling, s_FacialExpression)).

/*
(forall (?AGENT ?SMILE)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?SMILE Smiling) (agent ?SMILE ?AGENT))
   (holdsDuring (WhenFn ?SMILE) (attribute ?AGENT Happiness)))))
*/
%% no translation to TPTP available.

/*
(instance Frowning SetOrClass)
*/
fof(a2197,axiom,s_instance(s_Frowning, s_SetOrClass)).

/*
(subclass Frowning FacialExpression)
*/
fof(a2198,axiom,s_subclass(s_Frowning, s_FacialExpression)).

/*
(forall (?AGENT ?FROWN)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?FROWN Frowning) (agent ?FROWN ?AGENT))
   (holdsDuring (WhenFn ?FROWN) (attribute ?AGENT Unhappiness)))))
*/
%% no translation to TPTP available.

/*
(subclass Laughing Vocalizing)
*/
fof(a2199,axiom,s_subclass(s_Laughing, s_Vocalizing)).

/*
(instance Laughing SetOrClass)
*/
fof(a2200,axiom,s_instance(s_Laughing, s_SetOrClass)).

/*
(subclass Laughing FacialExpression)
*/
fof(a2201,axiom,s_subclass(s_Laughing, s_FacialExpression)).

/*
(forall (?LAUGH)
 (exists (?SMILE)
  (and (instance ?SMILE Process)
       (=> (instance ?LAUGH Laughing)
        (and (instance ?SMILE Smiling) (subProcess ?SMILE ?LAUGH))))))
*/
fof(a2202,axiom,! [LAUGH] : (? [SMILE] : ((s_instance(SMILE, s_Process) & (s_instance(LAUGH, s_Laughing) => (s_instance(SMILE, s_Smiling) & s_subProcess(SMILE, LAUGH))))))).

/*
(instance Weeping SetOrClass)
*/
fof(a2203,axiom,s_instance(s_Weeping, s_SetOrClass)).

/*
(instance FacialExpression SetOrClass)
*/
fof(a2204,axiom,s_instance(s_FacialExpression, s_SetOrClass)).

/*
(subclass Weeping FacialExpression)
*/
fof(a2205,axiom,s_subclass(s_Weeping, s_FacialExpression)).

/*
(forall (?AGENT ?WEEP)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?WEEP Weeping) (agent ?WEEP ?AGENT))
   (holdsDuring (WhenFn ?WEEP) (attribute ?AGENT Unhappiness)))))
*/
%% no translation to TPTP available.

/*
(instance Nodding SetOrClass)
*/
fof(a2206,axiom,s_instance(s_Nodding, s_SetOrClass)).

/*
(subclass Nodding Gesture)
*/
fof(a2207,axiom,s_subclass(s_Nodding, s_Gesture)).

/*
(forall (?HEAD ?NOD)
 (=> (instance ?HEAD Entity)
  (=> (and (instance ?NOD Nodding) (patient ?NOD ?HEAD))
   (instance ?HEAD Head))))
*/
fof(a2208,axiom,! [HEAD,NOD] : ((s_instance(HEAD, s_Entity) => ((s_instance(NOD, s_Nodding) & s_patient(NOD, HEAD)) => s_instance(HEAD, s_Head))))).

/*
(subclass HandGesture Gesture)
*/
fof(a2209,axiom,s_subclass(s_HandGesture, s_Gesture)).

/*
(forall (?HG)
 (exists (?H)
  (and (instance ?H Entity)
       (=> (instance ?HG HandGesture)
        (and (instance ?H Hand) (patient ?HG ?H))))))
*/
fof(a2210,axiom,! [HG] : (? [H] : ((s_instance(H, s_Entity) & (s_instance(HG, s_HandGesture) => (s_instance(H, s_Hand) & s_patient(HG, H))))))).

/*
(instance Waving SetOrClass)
*/
fof(a2211,axiom,s_instance(s_Waving, s_SetOrClass)).

/*
(subclass Waving HandGesture)
*/
fof(a2212,axiom,s_subclass(s_Waving, s_HandGesture)).

/*
(forall (?HAND ?WAVE)
 (=> (instance ?HAND Entity)
  (=> (and (instance ?WAVE Waving) (patient ?WAVE ?HAND))
   (instance ?HAND Hand))))
*/
fof(a2213,axiom,! [HAND,WAVE] : ((s_instance(HAND, s_Entity) => ((s_instance(WAVE, s_Waving) & s_patient(WAVE, HAND)) => s_instance(HAND, s_Hand))))).

/*
(instance HandGesture SetOrClass)
*/
fof(a2214,axiom,s_instance(s_HandGesture, s_SetOrClass)).

/*
(subclass Clapping HandGesture)
*/
fof(a2215,axiom,s_subclass(s_Clapping, s_HandGesture)).

/*
(subclass Clapping RadiatingSound)
*/
fof(a2216,axiom,s_subclass(s_Clapping, s_RadiatingSound)).

/*
(instance Clapping SetOrClass)
*/
fof(a2217,axiom,s_instance(s_Clapping, s_SetOrClass)).

/*
(subclass Clapping Impacting)
*/
fof(a2218,axiom,s_subclass(s_Clapping, s_Impacting)).

/*
(subclass Inclining BodyMotion)
*/
fof(a2219,axiom,s_subclass(s_Inclining, s_BodyMotion)).

/*
(subclass Inclining MotionDownward)
*/
fof(a2220,axiom,s_subclass(s_Inclining, s_MotionDownward)).

/*
(subclass Bowing Gesture)
*/
fof(a2221,axiom,s_subclass(s_Bowing, s_Gesture)).

/*
(instance Inclining SetOrClass)
*/
fof(a2222,axiom,s_instance(s_Inclining, s_SetOrClass)).

/*
(subclass Bowing Inclining)
*/
fof(a2223,axiom,s_subclass(s_Bowing, s_Inclining)).

/*
(instance Bowing SetOrClass)
*/
fof(a2224,axiom,s_instance(s_Bowing, s_SetOrClass)).

/*
(subclass Bowing MotionDownward)
*/
fof(a2225,axiom,s_subclass(s_Bowing, s_MotionDownward)).

/*
(instance Sinking SetOrClass)
*/
fof(a2226,axiom,s_instance(s_Sinking, s_SetOrClass)).

/*
(subclass Sinking Falling)
*/
fof(a2227,axiom,s_subclass(s_Sinking, s_Falling)).

/*
(forall (?S)
 (exists (?W)
  (and (instance ?W Object)
       (=> (instance ?S Sinking)
        (and (instance ?W WaterArea) (eventLocated ?S ?W))))))
*/
fof(a2228,axiom,! [S] : (? [W] : ((s_instance(W, s_Object) & (s_instance(S, s_Sinking) => (s_instance(W, s_WaterArea) & s_eventLocated(S, W))))))).

/*
(subclass Ducking IntentionalProcess)
*/
fof(a2229,axiom,s_subclass(s_Ducking, s_IntentionalProcess)).

/*
(subclass Ducking BodyMotion)
*/
fof(a2230,axiom,s_subclass(s_Ducking, s_BodyMotion)).

/*
(instance Ducking SetOrClass)
*/
fof(a2231,axiom,s_instance(s_Ducking, s_SetOrClass)).

/*
(subclass Ducking MotionDownward)
*/
fof(a2232,axiom,s_subclass(s_Ducking, s_MotionDownward)).

/*
(forall (?AGENT ?MOTION)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?MOTION Ducking) (agent ?MOTION ?AGENT))
   (hasPurpose ?MOTION
    (not (exists (?IMPACT)
          (and (instance ?IMPACT Impacting)
               (patient ?IMPACT ?AGENT))))))))
*/
%% no translation to TPTP available.

/*
(subclass ExpressingInLanguage Expressing)
*/
fof(a2233,axiom,s_subclass(s_ExpressingInLanguage, s_Expressing)).

/*
(subclass ExpressingInLanguage LinguisticCommunication)
*/
fof(a2234,axiom,s_subclass(s_ExpressingInLanguage, s_LinguisticCommunication)).

/*
(instance TonalLanguage SetOrClass)
*/
fof(a2235,axiom,s_instance(s_TonalLanguage, s_SetOrClass)).

/*
(subclass TonalLanguage SpokenHumanLanguage)
*/
fof(a2236,axiom,s_subclass(s_TonalLanguage, s_SpokenHumanLanguage)).

/*
(instance ExpressingInLanguage SetOrClass)
*/
fof(a2237,axiom,s_instance(s_ExpressingInLanguage, s_SetOrClass)).

/*
(subclass Thanking ExpressingInLanguage)
*/
fof(a2238,axiom,s_subclass(s_Thanking, s_ExpressingInLanguage)).

/*
(instance Thanking SetOrClass)
*/
fof(a2239,axiom,s_instance(s_Thanking, s_SetOrClass)).

/*
(instance ExpressingApproval SetOrClass)
*/
fof(a2240,axiom,s_instance(s_ExpressingApproval, s_SetOrClass)).

/*
(subclass Thanking ExpressingApproval)
*/
fof(a2241,axiom,s_subclass(s_Thanking, s_ExpressingApproval)).

/*
(forall (?AGENT ?PERSON ?THING ?THANK)
 (=>
  (and (instance ?AGENT CognitiveAgent) (instance ?PERSON Entity)
       (instance ?THING Formula))
  (=>
   (and (instance ?THANK Thanking)
        (and (agent ?THANK ?AGENT)
             (and (patient ?THANK ?THING)
                  (destination ?THANK ?PERSON))))
   (and (instance ?PERSON Human)
        (or (holdsDuring (WhenFn ?THANK) (wants ?AGENT ?THING))
            (holdsDuring (WhenFn ?THANK) (desires ?AGENT ?THING)))))))
*/
%% no translation to TPTP available.

/*
(forall (?P ?T)
 (=> (instance ?P Entity)
  (=> (and (instance ?T Thanking) (destination ?T ?P))
   (instance ?P Human))))
*/
fof(a2242,axiom,! [P,T] : ((s_instance(P, s_Entity) => ((s_instance(T, s_Thanking) & s_destination(T, P)) => s_instance(P, s_Human))))).

/*
(instance Greeting SetOrClass)
*/
fof(a2243,axiom,s_instance(s_Greeting, s_SetOrClass)).

/*
(subclass Greeting Expressing)
*/
fof(a2244,axiom,s_subclass(s_Greeting, s_Expressing)).

/*
(subrelation half part)
*/
fof(a2245,axiom,s_subrelation(s_half_m, s_part_m)).

/*
(forall (?WHOLE ?HALF)
 (exists (?OTHER)
  (and (instance ?OTHER Object)
       (=> (and (instance ?HALF Object) (instance ?WHOLE Object))
        (=> (half ?HALF ?WHOLE)
         (and (half ?OTHER ?WHOLE)
              (and (not (equal ?OTHER ?HALF))
                   (equal ?WHOLE
                          (MereologicalSumFn ?HALF ?OTHER)))))))))
*/
fof(a2246,axiom,! [WHOLE,HALF] : (? [OTHER] : ((s_instance(OTHER, s_Object) & ((s_instance(HALF, s_Object) & s_instance(WHOLE, s_Object)) => (s_half(HALF, WHOLE) => (s_half(OTHER, WHOLE) & ((~ (OTHER = HALF)) & (WHOLE = s_MereologicalSumFn(HALF, OTHER)))))))))).

/*
(subrelation third part)
*/
fof(a2247,axiom,s_subrelation(s_third_m, s_part_m)).

/*
(forall (?W ?T)
 (exists (?O1 ?O2)
  (and (and (instance ?O2 Object) (instance ?O1 Object))
       (=> (and (instance ?T Object) (instance ?W Object))
        (=> (third ?T ?W)
         (and (third ?O1 ?W)
              (and (third ?O2 ?W)
                   (and (not (equal ?O1 ?T))
                        (and (not (equal ?O2 ?T))
                             (and (not (equal ?O1 ?O2))
                                  (equal
                                   ?W
                                   (MereologicalSumFn
                                    ?T
                                    (MereologicalSumFn
                                     ?O1
                                     ?O2)))))))))))))
*/
fof(a2248,axiom,! [W,T] : (? [O1,O2] : (((s_instance(O2, s_Object) & s_instance(O1, s_Object)) & ((s_instance(T, s_Object) & s_instance(W, s_Object)) => (s_third(T, W) => (s_third(O1, W) & (s_third(O2, W) & ((~ (O1 = T)) & ((~ (O2 = T)) & ((~ (O1 = O2)) & (W = s_MereologicalSumFn(T, s_MereologicalSumFn(O1, O2)))))))))))))).

/*
(subrelation quarter part)
*/
fof(a2249,axiom,s_subrelation(s_quarter_m, s_part_m)).

/*
(forall (?W ?Q)
 (forall (?H)
  (exists (?g1637)
   (and (instance ?g1637 Object)
        (=> (instance ?H Object)
         (=> (and (instance ?Q Object) (instance ?W Object))
          (and (=> (quarter ?Q ?W)
                (and (half ?g1637 ?W) (half ?Q ?g1637)))
               (=> (and (half ?H ?W) (half ?Q ?H))
                (quarter ?Q ?W)))))))))
*/
fof(a2250,axiom,! [W,Q] : (! [H] : (? [G1637] : ((s_instance(G1637, s_Object) & (s_instance(H, s_Object) => ((s_instance(Q, s_Object) & s_instance(W, s_Object)) => ((s_quarter(Q, W) => (s_half(G1637, W) & s_half(Q, G1637))) & ((s_half(H, W) & s_half(Q, H)) => s_quarter(Q, W)))))))))).

/*
(subrelation most part)
*/
fof(a2251,axiom,s_subrelation(s_most_m, s_part_m)).

/*
(forall (?WHOLE ?MOST)
 (exists (?HALF ?NUMBER1 ?NUMBER2 ?UNIT)
  (and (and (instance ?UNIT UnitOfMeasure)
            (instance ?NUMBER2 RealNumber)
            (instance ?NUMBER1 RealNumber) (instance ?HALF Object))
       (=> (and (instance ?MOST Object) (instance ?WHOLE Object))
        (=> (most ?MOST ?WHOLE)
         (and (half ?HALF ?WHOLE)
              (and (measure ?HALF (MeasureFn ?NUMBER1 ?UNIT))
                   (and (measure ?MOST (MeasureFn ?NUMBER2 ?UNIT))
                        (greaterThan ?NUMBER2 ?NUMBER1)))))))))
*/
fof(a2252,axiom,! [WHOLE,MOST] : (? [HALF,NUMBER1,NUMBER2,UNIT] : (((s_instance(UNIT, s_UnitOfMeasure) & s_instance(NUMBER2, s_RealNumber) & s_instance(NUMBER1, s_RealNumber) & s_instance(HALF, s_Object)) & ((s_instance(MOST, s_Object) & s_instance(WHOLE, s_Object)) => (s_most(MOST, WHOLE) => (s_half(HALF, WHOLE) & (s_measure(HALF, s_MeasureFn(NUMBER1, UNIT)) & (s_measure(MOST, s_MeasureFn(NUMBER2, UNIT)) & greater(NUMBER2, NUMBER1)))))))))).

/*
(instance Blueprint SetOrClass)
*/
fof(a2253,axiom,s_instance(s_Blueprint, s_SetOrClass)).

/*
(subclass Blueprint Icon)
*/
fof(a2254,axiom,s_subclass(s_Blueprint, s_Icon)).

/*
(forall (?PLAN)
 (=> (instance ?PLAN Blueprint)
  (hasPurpose ?PLAN
   (exists (?ARTIFACT)
    (and (instance ?ARTIFACT Artifact) (represents ?PLAN ?ARTIFACT))))))
*/
%% no translation to TPTP available.

/*
(instance Chart SetOrClass)
*/
fof(a2255,axiom,s_instance(s_Chart, s_SetOrClass)).

/*
(subclass Chart Icon)
*/
fof(a2256,axiom,s_subclass(s_Chart, s_Icon)).

/*
(forall (?CHART)
 (exists (?QUANTITY)
  (and (instance ?QUANTITY Entity)
       (=> (instance ?CHART Chart)
        (and (instance ?QUANTITY PhysicalQuantity)
             (refers ?CHART ?QUANTITY))))))
*/
fof(a2257,axiom,! [CHART] : (? [QUANTITY] : ((s_instance(QUANTITY, s_Entity) & (s_instance(CHART, s_Chart) => (s_instance(QUANTITY, s_PhysicalQuantity) & s_refers(CHART, QUANTITY))))))).

/*
(subclass Flag Icon)
*/
fof(a2258,axiom,s_subclass(s_Flag, s_Icon)).

/*
(forall (?FLAG)
 (exists (?FABRIC)
  (and (instance ?FABRIC Object)
       (=> (instance ?FLAG Flag)
        (and (instance ?FABRIC Fabric) (part ?FABRIC ?FLAG))))))
*/
fof(a2259,axiom,! [FLAG] : (? [FABRIC] : ((s_instance(FABRIC, s_Object) & (s_instance(FLAG, s_Flag) => (s_instance(FABRIC, s_Fabric) & s_part(FABRIC, FLAG))))))).

/*
(instance NationalFlag SetOrClass)
*/
fof(a2260,axiom,s_instance(s_NationalFlag, s_SetOrClass)).

/*
(instance Flag SetOrClass)
*/
fof(a2261,axiom,s_instance(s_Flag, s_SetOrClass)).

/*
(subclass NationalFlag Flag)
*/
fof(a2262,axiom,s_subclass(s_NationalFlag, s_Flag)).

/*
(forall (?F)
 (exists (?N)
  (and (instance ?N Entity)
       (=> (instance ?F NationalFlag)
        (and (instance ?N Nation) (refers ?F ?N))))))
*/
fof(a2263,axiom,! [F] : (? [N] : ((s_instance(N, s_Entity) & (s_instance(F, s_NationalFlag) => (s_instance(N, s_Nation) & s_refers(F, N))))))).

/*
(instance GraphDiagram SetOrClass)
*/
fof(a2264,axiom,s_instance(s_GraphDiagram, s_SetOrClass)).

/*
(subclass GraphDiagram Icon)
*/
fof(a2265,axiom,s_subclass(s_GraphDiagram, s_Icon)).

/*
(forall (?G)
 (exists (?Q)
  (and (instance ?Q Entity)
       (=> (instance ?G GraphDiagram)
        (and (instance ?Q PhysicalQuantity) (refers ?G ?Q))))))
*/
fof(a2266,axiom,! [G] : (? [Q] : ((s_instance(Q, s_Entity) & (s_instance(G, s_GraphDiagram) => (s_instance(Q, s_PhysicalQuantity) & s_refers(G, Q))))))).

/*
(instance ArrowIcon SetOrClass)
*/
fof(a2267,axiom,s_instance(s_ArrowIcon, s_SetOrClass)).

/*
(subclass ArrowIcon Icon)
*/
fof(a2268,axiom,s_subclass(s_ArrowIcon, s_Icon)).

/*
(instance Map SetOrClass)
*/
fof(a2269,axiom,s_instance(s_Map, s_SetOrClass)).

/*
(subclass Map Icon)
*/
fof(a2270,axiom,s_subclass(s_Map, s_Icon)).

/*
(forall (?M)
 (exists (?A)
  (and (instance ?A Entity)
       (=> (instance ?M Map)
        (and (instance ?A GeographicArea) (represents ?M ?A))))))
*/
fof(a2271,axiom,! [M] : (? [A] : ((s_instance(A, s_Entity) & (s_instance(M, s_Map) => (s_instance(A, s_GeographicArea) & s_represents(M, A))))))).

/*
(subclass Photograph Image)
*/
fof(a2272,axiom,s_subclass(s_Photograph, s_Image)).

/*
(instance Photograph SetOrClass)
*/
fof(a2273,axiom,s_instance(s_Photograph, s_SetOrClass)).

/*
(subclass Photograph Recording)
*/
fof(a2274,axiom,s_subclass(s_Photograph, s_Recording)).

/*
(instance Photographing SetOrClass)
*/
fof(a2275,axiom,s_instance(s_Photographing, s_SetOrClass)).

/*
(subclass Photographing ContentDevelopment)
*/
fof(a2276,axiom,s_subclass(s_Photographing, s_ContentDevelopment)).

/*
(forall (?SHOOT)
 (exists (?PHOTO ?CAMERA)
  (and (and (instance ?CAMERA Object) (instance ?PHOTO Entity))
       (=> (instance ?SHOOT Photographing)
        (and (instance ?PHOTO Photograph)
             (and (result ?SHOOT ?PHOTO)
                  (and (instrument ?SHOOT ?CAMERA)
                       (instance ?CAMERA Camera))))))))
*/
fof(a2277,axiom,! [SHOOT] : (? [PHOTO,CAMERA] : (((s_instance(CAMERA, s_Object) & s_instance(PHOTO, s_Entity)) & (s_instance(SHOOT, s_Photographing) => (s_instance(PHOTO, s_Photograph) & (s_result(SHOOT, PHOTO) & (s_instrument(SHOOT, CAMERA) & s_instance(CAMERA, s_Camera))))))))).

/*
(instance Camera SetOrClass)
*/
fof(a2278,axiom,s_instance(s_Camera, s_SetOrClass)).

/*
(subclass Camera Device)
*/
fof(a2279,axiom,s_subclass(s_Camera, s_Device)).

/*
(forall (?CAMERA)
 (=> (instance ?CAMERA Camera)
  (capability Photographing instrument ?CAMERA)))
*/
fof(a2280,axiom,! [CAMERA] : ((s_instance(CAMERA, s_Camera) => s_capability(s_Photographing, s_instrument_m, CAMERA)))).

/*
(instance TonMass UnitOfMass)
*/
fof(a2281,axiom,s_instance(s_TonMass, s_UnitOfMass)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER TonMass)
          (MeasureFn (MultiplicationFn ?NUMBER 2000) PoundMass)))))
*/
fof(a2282,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_TonMass) = s_MeasureFn(times(NUMBER, 2000), s_PoundMass)))))).

/*
(instance MetricTon UnitOfMass)
*/
fof(a2283,axiom,s_instance(s_MetricTon, s_UnitOfMass)).

/*
(equal (MeasureFn 1 MetricTon) (MeasureFn 2205 PoundMass))
*/
fof(a2284,axiom,(s_MeasureFn(1, s_MetricTon) = s_MeasureFn(2205, s_PoundMass))).

/*
(forall (?A ?O)
 (=> (and (instance ?O Object) (instance ?A RealNumber))
  (<=> (measure ?O (MeasureFn ?A MetricTon))
   (measure ?O (MeasureFn (MultiplicationFn ?A 2205) PoundMass)))))
*/
fof(a2285,axiom,! [A,O] : (((s_instance(O, s_Object) & s_instance(A, s_RealNumber)) => (s_measure(O, s_MeasureFn(A, s_MetricTon)) <=> s_measure(O, s_MeasureFn(times(A, 2205), s_PoundMass)))))).

/*
(instance LongTon UnitOfMass)
*/
fof(a2286,axiom,s_instance(s_LongTon, s_UnitOfMass)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER LongTon)
          (MeasureFn (MultiplicationFn ?NUMBER 2240) PoundMass)))))
*/
fof(a2287,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_LongTon) = s_MeasureFn(times(NUMBER, 2240), s_PoundMass)))))).

/*
(instance CubicFoot UnitOfVolume)
*/
fof(a2288,axiom,s_instance(s_CubicFoot, s_UnitOfVolume)).

/*
(equal (MeasureFn 1 CubicFoot)
       (MultiplicationFn (MeasureFn 1 FootLength)
        (MultiplicationFn (MeasureFn 1 FootLength)
         (MeasureFn 1 FootLength))))
*/
fof(a2289,axiom,(s_MeasureFn(1, s_CubicFoot) = times(s_MeasureFn(1, s_FootLength), times(s_MeasureFn(1, s_FootLength), s_MeasureFn(1, s_FootLength))))).

/*
(forall (?QUANT ?N4 ?N1 ?N3 ?N2)
 (=>
  (and (instance ?N2 RealNumber) (instance ?N3 RealNumber)
       (instance ?N1 RealNumber) (instance ?N4 RealNumber)
       (instance ?QUANT Entity))
  (=>
   (and (equal ?N4 (MultiplicationFn ?N1 (MultiplicationFn ?N2 ?N3)))
        (equal ?QUANT
               (MultiplicationFn (MeasureFn ?N1 FootLength)
                (MultiplicationFn (MeasureFn ?N2 FootLength)
                 (MeasureFn ?N3 FootLength)))))
   (equal ?QUANT (MeasureFn ?N4 CubicFoot)))))
*/
fof(a2290,axiom,! [QUANT,N4,N1,N3,N2] : (((s_instance(N2, s_RealNumber) & s_instance(N3, s_RealNumber) & s_instance(N1, s_RealNumber) & s_instance(N4, s_RealNumber) & s_instance(QUANT, s_Entity)) => (((N4 = times(N1, times(N2, N3))) & (QUANT = times(s_MeasureFn(N1, s_FootLength), times(s_MeasureFn(N2, s_FootLength), s_MeasureFn(N3, s_FootLength))))) => (QUANT = s_MeasureFn(N4, s_CubicFoot)))))).

/*
(names Registry Ton RegistryTon)
*/
fof(a2291,axiom,s_names('Registry Ton', s_RegistryTon)).

/*
(names Gross Ton RegistryTon)
*/
fof(a2292,axiom,s_names('Gross Ton', s_RegistryTon)).

/*
(instance RegistryTon UnitOfVolume)
*/
fof(a2293,axiom,s_instance(s_RegistryTon, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER RegistryTon)
          (MeasureFn (MultiplicationFn ?NUMBER 100) CubicFoot)))))
*/
fof(a2294,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_RegistryTon) = s_MeasureFn(times(NUMBER, 100), s_CubicFoot)))))).

/*
(instance Page UnitOfInformation)
*/
fof(a2295,axiom,s_instance(s_Page, s_UnitOfInformation)).

/*
(instance LiquorShot UnitOfVolume)
*/
fof(a2296,axiom,s_instance(s_LiquorShot, s_UnitOfVolume)).

/*
(instance MillenniumDuration UnitOfDuration)
*/
fof(a2297,axiom,s_instance(s_MillenniumDuration, s_UnitOfDuration)).

/*
(forall (?N)
 (=> (instance ?N RealNumber)
  (=> (equal ?N (MultiplicationFn 1 ?N))
   (equal (MeasureFn ?N MillenniumDuration)
          (MeasureFn (MultiplicationFn ?N 1000) YearDuration)))))
*/
fof(a2298,axiom,! [N] : ((s_instance(N, s_RealNumber) => ((N = times(1, N)) => (s_MeasureFn(N, s_MillenniumDuration) = s_MeasureFn(times(N, 1000), s_YearDuration)))))).

/*
(instance Acre UnitOfArea)
*/
fof(a2299,axiom,s_instance(s_Acre, s_UnitOfArea)).

/*
(instance SquareMile UnitOfArea)
*/
fof(a2300,axiom,s_instance(s_SquareMile, s_UnitOfArea)).

/*
(equal (MeasureFn 1 SquareMile)
       (PerFn (MeasureFn 1 Mile) (MeasureFn 1 Mile)))
*/
fof(a2301,axiom,(s_MeasureFn(1, s_SquareMile) = s_PerFn(s_MeasureFn(1, s_Mile), s_MeasureFn(1, s_Mile)))).

/*
(instance SquareYard UnitOfArea)
*/
fof(a2302,axiom,s_instance(s_SquareYard, s_UnitOfArea)).

/*
(equal (MeasureFn 1 SquareYard)
       (PerFn (MeasureFn 1 YardLength) (MeasureFn 1 YardLength)))
*/
fof(a2303,axiom,(s_MeasureFn(1, s_SquareYard) = s_PerFn(s_MeasureFn(1, s_YardLength), s_MeasureFn(1, s_YardLength)))).

/*
(instance creator BinaryPredicate)
*/
fof(a2304,axiom,s_instance(s_creator_m, s_BinaryPredicate)).

/*
(forall (?ENTITY ?AGENT)
 (exists (?CREATION)
  (and (instance ?CREATION Process)
       (=> (and (instance ?AGENT Agent) (instance ?ENTITY Entity))
        (=> (creator ?AGENT ?ENTITY)
         (and (instance ?CREATION Creation)
              (and (agent ?CREATION ?AGENT)
                   (result ?CREATION ?ENTITY))))))))
*/
fof(a2305,axiom,! [ENTITY,AGENT] : (? [CREATION] : ((s_instance(CREATION, s_Process) & ((s_instance(AGENT, s_Agent) & s_instance(ENTITY, s_Entity)) => (s_creator(AGENT, ENTITY) => (s_instance(CREATION, s_Creation) & (s_agent(CREATION, AGENT) & s_result(CREATION, ENTITY))))))))).

/*
(subclass Music Proposition)
*/
fof(a2306,axiom,s_subclass(s_Music, s_Proposition)).

/*
(forall (?MC ?MUSIC)
 (=> (instance ?MUSIC Process)
  (=> (and (instance ?MC Music) (realization ?MUSIC ?MC))
   (instance ?MUSIC MakingMusic))))
*/
fof(a2307,axiom,! [MC,MUSIC] : ((s_instance(MUSIC, s_Process) => ((s_instance(MC, s_Music) & s_realization(MUSIC, MC)) => s_instance(MUSIC, s_MakingMusic))))).

/*
(instance MusicalComposition SetOrClass)
*/
fof(a2308,axiom,s_instance(s_MusicalComposition, s_SetOrClass)).

/*
(subclass MusicalComposition Music)
*/
fof(a2309,axiom,s_subclass(s_MusicalComposition, s_Music)).

/*
(comment MusicalComposition
 Currently, MusicalComposition is treated as text, and there 
is no propositional content related to it.  This is dangerous, as there could be millions 
of instances of (for instance) sheet music containing Beethoven's Fifth Symphony, and 
only having MusicalComposition equal to an object would imply that all of this different 
instances are different from each other.  You could also have many different arrangements 
of the same musical composition.  As such, I propose making MusicalComposition a Proposition, 
which refers more to the conception of the music, and SheetMusic the content bearing 
object that contains information about a particular MusicalComposition.  (09-13-2011)
 KJN)
*/
fof(a2310,axiom,s_comment(s_MusicalComposition, 'Currently, MusicalComposition is treated as text, and there is no propositional content related to it.  This is dangerous, as there could be millions of instances of (for instance) sheet music containing Beethoven\'s Fifth Symphony, and only having MusicalComposition equal to an object would imply that all of this different instances are different from each other.  You could also have many different arrangements of the same musical composition.  As such, I propose making MusicalComposition a Proposition, which refers more to the conception of the music, and SheetMusic the content bearing object that contains information about a particular MusicalComposition.  (09-13-2011)', 'KJN')).

/*
(forall (?MUSIC ?MC)
 (forall (?LC ?V)
  (=> (and (instance ?V Process) (instance ?LC Entity))
   (=> (and (instance ?MUSIC Proposition) (instance ?MUSIC Process))
    (=>
     (and (instance ?MC MusicalComposition) (realization ?MC ?MUSIC))
     (not (and (instance ?V Singing)
               (and (patient ?V ?LC)
                    (and (instance ?LC LyricalContent)
                         (subProcess ?V ?MUSIC))))))))))
*/
fof(a2311,axiom,! [MUSIC,MC] : (! [LC,V] : (((s_instance(V, s_Process) & s_instance(LC, s_Entity)) => ((s_instance(MUSIC, s_Proposition) & s_instance(MUSIC, s_Process)) => ((s_instance(MC, s_MusicalComposition) & s_realization(MC, MUSIC)) => (~ (s_instance(V, s_Singing) & (s_patient(V, LC) & (s_instance(LC, s_LyricalContent) & s_subProcess(V, MUSIC))))))))))).

/*
(instance Song SetOrClass)
*/
fof(a2312,axiom,s_instance(s_Song, s_SetOrClass)).

/*
(instance Music SetOrClass)
*/
fof(a2313,axiom,s_instance(s_Music, s_SetOrClass)).

/*
(subclass Song Music)
*/
fof(a2314,axiom,s_subclass(s_Song, s_Music)).

/*
(forall (?MUSIC ?S)
 (exists (?MM ?MV ?LC ?MC)
  (and (and (instance ?MC Entity) (instance ?LC Entity)
            (instance ?MV Process) (instance ?MM Process))
       (=>
        (and (instance ?MUSIC Proposition) (instance ?MUSIC Process))
        (=> (and (instance ?S Song) (realization ?S ?MUSIC))
         (and (instance ?MM MakingMusic)
              (and (instance ?MV Singing)
                   (and (instance ?LC LyricalContent)
                        (and (instance ?MC MusicalComposition)
                             (and (patient ?MM ?MC)
                                  (and
                                   (patient ?MV ?LC)
                                   (and
                                    (subProcess ?MM ?MUSIC)
                                    (subProcess ?MV ?MUSIC)))))))))))))
*/
fof(a2315,axiom,! [MUSIC,S] : (? [MM,MV,LC,MC] : (((s_instance(MC, s_Entity) & s_instance(LC, s_Entity) & s_instance(MV, s_Process) & s_instance(MM, s_Process)) & ((s_instance(MUSIC, s_Proposition) & s_instance(MUSIC, s_Process)) => ((s_instance(S, s_Song) & s_realization(S, MUSIC)) => (s_instance(MM, s_MakingMusic) & (s_instance(MV, s_Singing) & (s_instance(LC, s_LyricalContent) & (s_instance(MC, s_MusicalComposition) & (s_patient(MM, MC) & (s_patient(MV, LC) & (s_subProcess(MM, MUSIC) & s_subProcess(MV, MUSIC)))))))))))))).

/*
(instance LyricalContent SetOrClass)
*/
fof(a2316,axiom,s_instance(s_LyricalContent, s_SetOrClass)).

/*
(subclass LyricalContent Proposition)
*/
fof(a2317,axiom,s_subclass(s_LyricalContent, s_Proposition)).

/*
(comment LyricalContent
 It is important to distinguish the propositional 
content of &%Lyrics from the text that displays it.  Some songs are translated from one 
language to another, but use essentially the same Lyrical content. (09-15-2011)
 KJN)
*/
fof(a2318,axiom,s_comment(s_LyricalContent, 'It is important to distinguish the propositional content of &%Lyrics from the text that displays it.  Some songs are translated from one language to another, but use essentially the same Lyrical content. (09-15-2011)', 'KJN')).

/*
(forall (?X)
 (=> (instance ?X LyricalContent)
  (hasPurpose ?X
   (exists (?S) (and (instance ?S Singing) (patient ?S ?X))))))
*/
%% no translation to TPTP available.

/*
(forall (?L)
 (exists (?W ?I)
  (and (and (instance ?I Proposition)
            (instance ?W ContentBearingPhysical))
       (=> (instance ?L LyricalContent)
        (and (instance ?W Word)
             (and (containsInformation ?W ?I)
                  (subProposition ?I ?L)))))))
*/
fof(a2319,axiom,! [L] : (? [W,I] : (((s_instance(I, s_Proposition) & s_instance(W, s_ContentBearingPhysical)) & (s_instance(L, s_LyricalContent) => (s_instance(W, s_Word) & (s_containsInformation(W, I) & s_subProposition(I, L)))))))).

/*
(instance LegislativeBill DeonticAttribute)
*/
fof(a2320,axiom,s_instance(s_LegislativeBill, s_DeonticAttribute)).

/*
(forall (?TEXT ?TIME1)
 (exists (?TIME2)
  (and (instance ?TIME2 TimeInterval)
       (=>
        (and (instance ?TIME1 TimeInterval) (instance ?TEXT Formula)
             (instance ?TEXT Object))
        (=> (holdsDuring ?TIME1 (modalAttribute ?TEXT Law))
         (and (holdsDuring ?TIME2 (attribute ?TEXT LegislativeBill))
              (earlier ?TIME2 ?TIME1)))))))
*/
%% no translation to TPTP available.

/*
(subclass PassingABill PoliticalProcess)
*/
fof(a2321,axiom,s_subclass(s_PassingABill, s_PoliticalProcess)).

/*
(instance PassingABill SetOrClass)
*/
fof(a2322,axiom,s_instance(s_PassingABill, s_SetOrClass)).

/*
(subclass PassingABill Declaring)
*/
fof(a2323,axiom,s_subclass(s_PassingABill, s_Declaring)).

/*
(forall (?TEXT ?PASS)
 (=> (instance ?TEXT Object)
  (=> (and (instance ?PASS PassingABill) (patient ?PASS ?TEXT))
   (and (holdsDuring (BeginFn (WhenFn ?PASS))
         (attribute ?TEXT LegislativeBill))
        (holdsDuring (EndFn (WhenFn ?PASS)) (attribute ?TEXT Law))))))
*/
%% no translation to TPTP available.

/*
(instance InternationalLaw DeonticAttribute)
*/
fof(a2324,axiom,s_instance(s_InternationalLaw, s_DeonticAttribute)).

/*
(subAttribute InternationalLaw Law)
*/
fof(a2325,axiom,s_subAttribute(s_InternationalLaw, s_Law)).

/*
(instance Illegal DeonticAttribute)
*/
fof(a2326,axiom,s_instance(s_Illegal, s_DeonticAttribute)).

/*
(subAttribute Illegal Prohibition)
*/
fof(a2327,axiom,s_subAttribute(s_Illegal, s_Prohibition)).

/*
(contraryAttribute2 Illegal Legal)
*/
fof(a2328,axiom,s_contraryAttribute2(s_Illegal, s_Legal)).

/*
(instance Legal DeonticAttribute)
*/
fof(a2329,axiom,s_instance(s_Legal, s_DeonticAttribute)).

/*
(subAttribute Legal Permission)
*/
fof(a2330,axiom,s_subAttribute(s_Legal, s_Permission)).

/*
(forall (?F1)
 (forall (?F2)
  (exists (?g1662)
   (and (and (instance ?g1662 Formula) (instance ?g1662 Proposition))
        (=> (and (instance ?F2 Formula) (instance ?F2 Proposition))
         (=> (and (instance ?F1 Proposition) (instance ?F1 Formula))
          (and (=> (modalAttribute ?F1 Legal)
                (not (and (modalAttribute ?F2 Law)
                          (not (consistent ?F1 ?F2)))))
               (=>
                (not (and (modalAttribute ?g1662 Law)
                          (not (consistent ?F1 ?g1662))))
                (modalAttribute ?F1 Legal)))))))))
*/
fof(a2331,axiom,! [F1] : (! [F2] : (? [G1662] : (((s_instance(G1662, s_Formula) & s_instance(G1662, s_Proposition)) & ((s_instance(F2, s_Formula) & s_instance(F2, s_Proposition)) => ((s_instance(F1, s_Proposition) & s_instance(F1, s_Formula)) => ((s_modalAttribute(F1, s_Legal) => (~ (s_modalAttribute(F2, s_Law) & (~ s_consistent(F1, F2))))) & ((~ (s_modalAttribute(G1662, s_Law) & (~ s_consistent(F1, G1662)))) => s_modalAttribute(F1, s_Legal)))))))))).

/*
(subclass CriminalAction IntentionalProcess)
*/
fof(a2332,axiom,s_subclass(s_CriminalAction, s_IntentionalProcess)).

/*
(forall (?ACTION)
 (exists (?LAW ?CONTENT ?CRIME)
  (and (and (instance ?CRIME Proposition)
            (instance ?CONTENT Proposition) (instance ?LAW Formula))
       (=> (instance ?ACTION CriminalAction)
        (and (modalAttribute ?LAW Law)
             (and (containsInformation ?LAW ?CONTENT)
                  (and (realization ?ACTION ?CRIME)
                       (not (consistent ?CONTENT ?CRIME)))))))))
*/
fof(a2333,axiom,! [ACTION] : (? [LAW,CONTENT,CRIME] : (((s_instance(CRIME, s_Proposition) & s_instance(CONTENT, s_Proposition) & s_instance(LAW, s_Formula)) & (s_instance(ACTION, s_CriminalAction) => (s_modalAttribute(LAW, s_Law) & (s_containsInformation(LAW, CONTENT) & (s_realization(ACTION, CRIME) & (~ s_consistent(CONTENT, CRIME)))))))))).

/*
(subclass PoliticalCrime CriminalAction)
*/
fof(a2334,axiom,s_subclass(s_PoliticalCrime, s_CriminalAction)).

/*
(instance PoliticalCrime SetOrClass)
*/
fof(a2335,axiom,s_instance(s_PoliticalCrime, s_SetOrClass)).

/*
(subclass PoliticalCrime PoliticalProcess)
*/
fof(a2336,axiom,s_subclass(s_PoliticalCrime, s_PoliticalProcess)).

/*
(subclass PoliticalRevolution PoliticalProcess)
*/
fof(a2337,axiom,s_subclass(s_PoliticalRevolution, s_PoliticalProcess)).

/*
(instance PoliticalRevolution SetOrClass)
*/
fof(a2338,axiom,s_instance(s_PoliticalRevolution, s_SetOrClass)).

/*
(subclass PoliticalRevolution ViolentContest)
*/
fof(a2339,axiom,s_subclass(s_PoliticalRevolution, s_ViolentContest)).

/*
(forall (?A ?R)
 (=> (instance ?A Entity)
  (=> (and (instance ?R PoliticalRevolution) (patient ?R ?A))
   (instance ?A GeopoliticalArea))))
*/
fof(a2340,axiom,! [A,R] : ((s_instance(A, s_Entity) => ((s_instance(R, s_PoliticalRevolution) & s_patient(R, A)) => s_instance(A, s_GeopoliticalArea))))).

/*
(forall (?A ?R)
 (exists (?GOV1 ?GOV2)
  (and (and (instance ?GOV2 Entity) (instance ?GOV1 Entity))
       (=> (instance ?A GeopoliticalArea)
        (=> (and (instance ?R PoliticalRevolution) (patient ?R ?A))
         (and (holdsDuring (BeginFn (WhenFn ?R))
               (equal ?GOV1 (GovernmentFn ?A)))
              (and (holdsDuring (EndFn (WhenFn ?R))
                    (equal ?GOV2 (GovernmentFn ?A)))
                   (not (equal ?GOV1 ?GOV2)))))))))
*/
%% no translation to TPTP available.

/*
(subclass LawEnforcement PoliticalProcess)
*/
fof(a2341,axiom,s_subclass(s_LawEnforcement, s_PoliticalProcess)).

/*
(subclass LawEnforcement RegulatoryProcess)
*/
fof(a2342,axiom,s_subclass(s_LawEnforcement, s_RegulatoryProcess)).

/*
(forall (?P ?AGENT ?L)
 (exists (?O)
  (and (instance ?O Collection)
       (=> (and (instance ?P Object) (instance ?AGENT Agent))
        (=> (and (instance ?L LawEnforcement) (agent ?L ?AGENT))
         (or (instance ?P PoliceOrganization)
             (and (instance ?O PoliceOrganization) (member ?P ?O))))))))
*/
fof(a2343,axiom,! [P,AGENT,L] : (? [O] : ((s_instance(O, s_Collection) & ((s_instance(P, s_Object) & s_instance(AGENT, s_Agent)) => ((s_instance(L, s_LawEnforcement) & s_agent(L, AGENT)) => (s_instance(P, s_PoliceOrganization) | (s_instance(O, s_PoliceOrganization) & s_member(P, O))))))))).

/*
(instance Imprisoning SetOrClass)
*/
fof(a2344,axiom,s_instance(s_Imprisoning, s_SetOrClass)).

/*
(subclass Imprisoning Confining)
*/
fof(a2345,axiom,s_subclass(s_Imprisoning, s_Confining)).

/*
(forall (?I)
 (exists (?P)
  (and (instance ?P Object)
       (=> (instance ?I Imprisoning)
        (and (instance ?P Prison) (eventLocated ?I ?P))))))
*/
fof(a2346,axiom,! [I] : (? [P] : ((s_instance(P, s_Object) & (s_instance(I, s_Imprisoning) => (s_instance(P, s_Prison) & s_eventLocated(I, P))))))).

/*
(subclass Espionage PoliticalProcess)
*/
fof(a2347,axiom,s_subclass(s_Espionage, s_PoliticalProcess)).

/*
(instance Espionage SetOrClass)
*/
fof(a2348,axiom,s_instance(s_Espionage, s_SetOrClass)).

/*
(subclass Espionage Investigating)
*/
fof(a2349,axiom,s_subclass(s_Espionage, s_Investigating)).

/*
(forall (?S)
 (exists (?GOV1 ?GOV2)
  (and (and (instance ?GOV2 Entity) (instance ?GOV1 Agent))
       (=> (instance ?S Espionage)
        (and (instance ?GOV1 Government)
             (and (instance ?GOV2 Government)
                  (and (agent ?S ?GOV1)
                       (and (patient ?S ?GOV2)
                            (not (equal ?GOV1 ?GOV2))))))))))
*/
fof(a2350,axiom,! [S] : (? [GOV1,GOV2] : (((s_instance(GOV2, s_Entity) & s_instance(GOV1, s_Agent)) & (s_instance(S, s_Espionage) => (s_instance(GOV1, s_Government) & (s_instance(GOV2, s_Government) & (s_agent(S, GOV1) & (s_patient(S, GOV2) & (~ (GOV1 = GOV2))))))))))).

/*
(instance Polling SetOrClass)
*/
fof(a2351,axiom,s_instance(s_Polling, s_SetOrClass)).

/*
(subclass Polling Investigating)
*/
fof(a2352,axiom,s_subclass(s_Polling, s_Investigating)).

/*
(subclass MilitaryInfiltration MilitaryProcess)
*/
fof(a2353,axiom,s_subclass(s_MilitaryInfiltration, s_MilitaryProcess)).

/*
(instance MilitaryInfiltration SetOrClass)
*/
fof(a2354,axiom,s_instance(s_MilitaryInfiltration, s_SetOrClass)).

/*
(subclass MilitaryInfiltration Translocation)
*/
fof(a2355,axiom,s_subclass(s_MilitaryInfiltration, s_Translocation)).

/*
(instance Agreement SetOrClass)
*/
fof(a2356,axiom,s_instance(s_Agreement, s_SetOrClass)).

/*
(subclass Agreement Proposition)
*/
fof(a2357,axiom,s_subclass(s_Agreement, s_Proposition)).

/*
(forall (?COMPACT)
 (exists (?COMM)
  (and (instance ?COMM Entity)
       (=> (instance ?COMPACT Agreement)
        (and (instance ?COMM Committing)
             (represents ?COMM ?COMPACT))))))
*/
fof(a2358,axiom,! [COMPACT] : (? [COMM] : ((s_instance(COMM, s_Entity) & (s_instance(COMPACT, s_Agreement) => (s_instance(COMM, s_Committing) & s_represents(COMM, COMPACT))))))).

/*
(forall (?AGREEMENT)
 (exists (?AGENT1 ?AGENT2)
  (and (and (instance ?AGENT2 CognitiveAgent)
            (instance ?AGENT1 CognitiveAgent))
       (=> (instance ?AGREEMENT Agreement)
        (and (partyToAgreement ?AGENT1 ?AGREEMENT)
             (and (partyToAgreement ?AGENT2 ?AGREEMENT)
                  (not (equal ?AGENT1 ?AGENT2))))))))
*/
fof(a2359,axiom,! [AGREEMENT] : (? [AGENT1,AGENT2] : (((s_instance(AGENT2, s_CognitiveAgent) & s_instance(AGENT1, s_CognitiveAgent)) & (s_instance(AGREEMENT, s_Agreement) => (s_partyToAgreement(AGENT1, AGREEMENT) & (s_partyToAgreement(AGENT2, AGREEMENT) & (~ (AGENT1 = AGENT2))))))))).

/*
(instance partyToAgreement BinaryPredicate)
*/
fof(a2360,axiom,s_instance(s_partyToAgreement_m, s_BinaryPredicate)).

/*
(forall (?CONTENT ?AGENT)
 (exists (?C)
  (and (instance ?C Process)
       (=>
        (and (instance ?AGENT CognitiveAgent)
             (instance ?CONTENT Agreement))
        (=> (partyToAgreement ?AGENT ?CONTENT)
         (and (instance ?C Committing)
              (and (agent ?C ?AGENT) (patient ?C ?CONTENT))))))))
*/
fof(a2361,axiom,! [CONTENT,AGENT] : (? [C] : ((s_instance(C, s_Process) & ((s_instance(AGENT, s_CognitiveAgent) & s_instance(CONTENT, s_Agreement)) => (s_partyToAgreement(AGENT, CONTENT) => (s_instance(C, s_Committing) & (s_agent(C, AGENT) & s_patient(C, CONTENT))))))))).

/*
(instance agreementPeriod BinaryPredicate)
*/
fof(a2362,axiom,s_instance(s_agreementPeriod_m, s_BinaryPredicate)).

/*
(forall (?STARTDATE ?DURATION ?AGREEMENT)
 (=>
  (and (instance ?AGREEMENT Agreement) (instance ?STARTDATE TimePoint)
       (instance ?DURATION TimeInterval)
       (instance ?DURATION TimeDuration))
  (=>
   (and (agreementPeriod ?AGREEMENT ?DURATION)
        (agreementEffectiveDate ?AGREEMENT ?STARTDATE))
   (holdsDuring (TimePeriodFn ?STARTDATE ?DURATION)
    (property ?AGREEMENT ActiveAgreement)))))
*/
%% no translation to TPTP available.

/*
(instance agreementEffectiveDate BinaryPredicate)
*/
fof(a2363,axiom,s_instance(s_agreementEffectiveDate_m, s_BinaryPredicate)).

/*
(instance TimePeriodFn BinaryFunction)
*/
fof(a2364,axiom,s_instance(s_TimePeriodFn_m, s_BinaryFunction)).

/*
(range TimePeriodFn TimeInterval)
*/
fof(a2365,axiom,s_range(s_TimePeriodFn_m, s_TimeInterval)).

/*
(forall (?PERIOD ?INTERVAL ?T2 ?T1)
 (=>
  (and (instance ?PERIOD TimeDuration)
       (instance ?INTERVAL TimeInterval))
  (=>
   (and (instance ?T1 TimePoint)
        (and (instance ?T2 TimePoint)
             (and (equal ?INTERVAL (TimeIntervalFn ?T1 ?T2))
                  (duration ?INTERVAL ?PERIOD))))
   (equal ?INTERVAL (TimePeriodFn ?T1 ?PERIOD)))))
*/
fof(a2366,axiom,! [PERIOD,INTERVAL,T2,T1] : (((s_instance(PERIOD, s_TimeDuration) & s_instance(INTERVAL, s_TimeInterval)) => ((s_instance(T1, s_TimePoint) & (s_instance(T2, s_TimePoint) & ((INTERVAL = s_TimeIntervalFn(T1, T2)) & s_duration(INTERVAL, PERIOD)))) => (INTERVAL = s_TimePeriodFn(T1, PERIOD)))))).

/*
(instance agreementExpirationDate BinaryPredicate)
*/
fof(a2367,axiom,s_instance(s_agreementExpirationDate_m, s_BinaryPredicate)).

/*
(forall (?ENDDATE ?AGREEMENT)
 (=>
  (and (instance ?AGREEMENT Agreement) (instance ?ENDDATE TimePoint))
  (=> (agreementExpirationDate ?AGREEMENT ?ENDDATE)
   (holdsDuring (FutureFn ?ENDDATE)
    (not (property ?AGREEMENT ActiveAgreement))))))
*/
%% no translation to TPTP available.

/*
(instance agreementClause QuaternaryPredicate)
*/
fof(a2368,axiom,s_instance(s_agreementClause_m, s_QuaternaryPredicate)).

/*
(forall (?PROP ?ATTR ?AGENT ?AGREEMENT)
 (exists (?CLAUSE)
  (and (instance ?CLAUSE ContentBearingPhysical)
       (=>
        (and (instance ?AGREEMENT Agreement)
             (instance ?AGENT CognitiveAgent)
             (instance ?ATTR DeonticAttribute)
             (instance ?PROP Proposition))
        (=> (agreementClause ?PROP ?ATTR ?AGREEMENT ?AGENT)
         (and (containsInformation ?CLAUSE ?PROP)
              (partyToAgreement ?AGENT ?AGREEMENT)))))))
*/
fof(a2369,axiom,! [PROP,ATTR,AGENT,AGREEMENT] : (? [CLAUSE] : ((s_instance(CLAUSE, s_ContentBearingPhysical) & ((s_instance(AGREEMENT, s_Agreement) & s_instance(AGENT, s_CognitiveAgent) & s_instance(ATTR, s_DeonticAttribute) & s_instance(PROP, s_Proposition)) => (s_agreementClause(PROP, ATTR, AGREEMENT, AGENT) => (s_containsInformation(CLAUSE, PROP) & s_partyToAgreement(AGENT, AGREEMENT)))))))).

/*
(forall (?PROP ?ATTR ?AGENT ?AGREEMENT)
 (=>
  (and (instance ?AGREEMENT Agreement) (instance ?AGENT CognitiveAgent)
       (instance ?ATTR DeonticAttribute) (instance ?PROP Proposition))
  (=>
   (and (agreementClause ?PROP ?ATTR ?AGREEMENT ?AGENT)
        (or (equal ?ATTR Obligation) (equal ?ATTR Promise)))
   (modalAttribute
    (exists (?PROC)
     (and (realization ?PROC ?PROP) (agent ?PROC ?AGENT)))
    Likely))))
*/
%% no translation to TPTP available.

/*
(forall (?PROP ?AGENT ?AGREEMENT)
 (=>
  (and (instance ?AGREEMENT Agreement) (instance ?AGENT CognitiveAgent)
       (instance ?PROP Proposition))
  (=> (agreementClause ?PROP Prohibition ?AGREEMENT ?AGENT)
   (not (holdsRight
         (exists (?PROC)
          (and (realization ?PROC ?PROP) (agent ?PROC ?AGENT)))
         ?AGENT)))))
*/
%% no translation to TPTP available.

/*
(forall (?PROP ?AGENT ?AGREEMENT)
 (=>
  (and (instance ?AGREEMENT Agreement) (instance ?AGENT CognitiveAgent)
       (instance ?PROP Proposition))
  (=> (agreementClause ?PROP Permission ?AGREEMENT ?AGENT)
   (holdsRight
    (exists (?PROC)
     (and (realization ?PROC ?PROP) (agent ?PROC ?AGENT)))
    ?AGENT))))
*/
%% no translation to TPTP available.

/*
(instance ActiveAgreement RelationalAttribute)
*/
fof(a2370,axiom,s_instance(s_ActiveAgreement, s_RelationalAttribute)).

/*
(forall (?AGREEMENT)
 (=> (instance ?AGREEMENT Entity)
  (=> (property ?AGREEMENT ActiveAgreement)
   (instance ?AGREEMENT Agreement))))
*/
fof(a2371,axiom,! [AGREEMENT] : ((s_instance(AGREEMENT, s_Entity) => (s_property(AGREEMENT, s_ActiveAgreement) => s_instance(AGREEMENT, s_Agreement))))).

/*
(forall (?AGREEMENT)
 (=> (instance ?AGREEMENT Proposition)
  (=> (property ?AGREEMENT ActiveAgreement)
   (modalAttribute (exists (?PROC) (realization ?PROC ?AGREEMENT))
    Obligation))))
*/
%% no translation to TPTP available.

/*
(forall (?ENTITY)
 (=> (instance ?ENTITY Entity)
  (=> (property ?ENTITY Promise)
   (or (property ?ENTITY Contract) (property ?ENTITY NakedPromise)))))
*/
fof(a2372,axiom,! [ENTITY] : ((s_instance(ENTITY, s_Entity) => (s_property(ENTITY, s_Promise) => (s_property(ENTITY, s_Contract) | s_property(ENTITY, s_NakedPromise)))))).

/*
(subAttribute NakedPromise Promise)
*/
fof(a2373,axiom,s_subAttribute(s_NakedPromise, s_Promise)).

/*
(subAttribute Contract ActiveAgreement)
*/
fof(a2374,axiom,s_subAttribute(s_Contract, s_ActiveAgreement)).

/*
(subAttribute Contract Promise)
*/
fof(a2375,axiom,s_subAttribute(s_Contract, s_Promise)).

/*
(contraryAttribute2 NakedPromise Contract)
*/
fof(a2376,axiom,s_contraryAttribute2(s_NakedPromise, s_Contract)).

/*
(forall (?AGREEMENT)
 (forall (?X)
  (=> (and (instance ?X Proposition) (instance ?X Formula))
   (=> (instance ?AGREEMENT Proposition)
    (=> (property ?AGREEMENT Contract)
     (=> (subProposition ?X ?AGREEMENT) (modalAttribute ?X Legal)))))))
*/
fof(a2377,axiom,! [AGREEMENT] : (! [X] : (((s_instance(X, s_Proposition) & s_instance(X, s_Formula)) => (s_instance(AGREEMENT, s_Proposition) => (s_property(AGREEMENT, s_Contract) => (s_subProposition(X, AGREEMENT) => s_modalAttribute(X, s_Legal)))))))).

/*
(forall (?AGENT2 ?AGENT1 ?AGREEMENT ?PROP ?PROC)
 (=>
  (and (instance ?AGENT2 CognitiveAgent)
       (instance ?AGENT1 CognitiveAgent)
       (instance ?AGREEMENT Agreement) (instance ?PROP Proposition))
  (=>
   (and (property ?AGREEMENT Contract)
        (and (partyToAgreement ?AGENT1 ?AGREEMENT)
             (and (partyToAgreement ?AGENT2 ?AGREEMENT)
                  (and (instance ?PROC IntentionalProcess)
                       (and (agent ?PROC ?AGENT1)
                            (and (realization ?PROC ?PROP)
                                 (not
                                  (consistent ?PROP ?AGREEMENT))))))))
   (modalAttribute
    (exists (?LEGAL)
     (and (instance ?LEGAL LegalAction)
          (and (plaintiff ?LEGAL ?AGENT2) (defendant ?LEGAL ?AGENT1))))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(subAttribute MarriageContract Contract)
*/
fof(a2378,axiom,s_subAttribute(s_MarriageContract, s_Contract)).

/*
(forall (?C)
 (exists (?P1 ?P2)
  (and (and (instance ?P2 Human) (instance ?P2 Agreement)
            (instance ?P1 Agreement) (instance ?P1 Human))
       (=> (instance ?C CognitiveAgent)
        (=> (property ?C MarriageContract)
         (and (partyToAgreement ?C ?P1)
              (and (partyToAgreement ?C ?P2) (spouse ?P1 ?P2))))))))
*/
fof(a2379,axiom,! [C] : (? [P1,P2] : (((s_instance(P2, s_Human) & s_instance(P2, s_Agreement) & s_instance(P1, s_Agreement) & s_instance(P1, s_Human)) & (s_instance(C, s_CognitiveAgent) => (s_property(C, s_MarriageContract) => (s_partyToAgreement(C, P1) & (s_partyToAgreement(C, P2) & s_spouse(P1, P2))))))))).

/*
(subAttribute PurchaseContract Contract)
*/
fof(a2380,axiom,s_subAttribute(s_PurchaseContract, s_Contract)).

/*
(forall (?BUYER ?SELLER ?C)
 (exists (?S)
  (and (instance ?S Process)
       (=>
        (and (instance ?C CognitiveAgent) (instance ?C Proposition)
             (instance ?BUYER Agreement) (instance ?SELLER Agent)
             (instance ?SELLER Agreement))
        (=> (property ?C PurchaseContract)
         (and (instance ?S Selling)
              (and (agent ?S ?SELLER)
                   (and (destination ?S ?BUYER)
                        (and (realization ?S ?C)
                             (and (partyToAgreement ?C ?SELLER)
                                  (partyToAgreement ?C ?BUYER)))))))))))
*/
fof(a2381,axiom,! [BUYER,SELLER,C] : (? [S] : ((s_instance(S, s_Process) & ((s_instance(C, s_CognitiveAgent) & s_instance(C, s_Proposition) & s_instance(BUYER, s_Agreement) & s_instance(SELLER, s_Agent) & s_instance(SELLER, s_Agreement)) => (s_property(C, s_PurchaseContract) => (s_instance(S, s_Selling) & (s_agent(S, SELLER) & (s_destination(S, BUYER) & (s_realization(S, C) & (s_partyToAgreement(C, SELLER) & s_partyToAgreement(C, BUYER)))))))))))).

/*
(subAttribute ServiceContract Contract)
*/
fof(a2382,axiom,s_subAttribute(s_ServiceContract, s_Contract)).

/*
(forall (?CUST ?SERVICE ?C)
 (exists (?SP)
  (and (instance ?SP ServiceProcess)
       (=>
        (and (instance ?C CognitiveAgent) (instance ?C Proposition)
             (instance ?SERVICE Agreement)
             (instance ?SERVICE CognitiveAgent)
             (instance ?CUST CognitiveAgent)
             (instance ?CUST Agreement))
        (=> (property ?C ServiceContract)
         (and (instance ?SP ServiceProcess)
              (and (realization ?SP ?C)
                   (and (serviceProvider ?SP ?SERVICE)
                        (and (serviceRecipient ?SP ?CUST)
                             (and (partyToAgreement ?C ?SERVICE)
                                  (partyToAgreement ?C ?CUST)))))))))))
*/
fof(a2383,axiom,! [CUST,SERVICE,C] : (? [SP] : ((s_instance(SP, s_ServiceProcess) & ((s_instance(C, s_CognitiveAgent) & s_instance(C, s_Proposition) & s_instance(SERVICE, s_Agreement) & s_instance(SERVICE, s_CognitiveAgent) & s_instance(CUST, s_CognitiveAgent) & s_instance(CUST, s_Agreement)) => (s_property(C, s_ServiceContract) => (s_instance(SP, s_ServiceProcess) & (s_realization(SP, C) & (s_serviceProvider(SP, SERVICE) & (s_serviceRecipient(SP, CUST) & (s_partyToAgreement(C, SERVICE) & s_partyToAgreement(C, CUST)))))))))))).

/*
(subAttribute Warranty ServiceContract)
*/
fof(a2384,axiom,s_subAttribute(s_Warranty, s_ServiceContract)).

/*
(subAttribute Treaty Contract)
*/
fof(a2385,axiom,s_subAttribute(s_Treaty, s_Contract)).

/*
(forall (?T)
 (exists (?N1 ?N2)
  (and (and (instance ?N2 Agreement) (instance ?N1 Agreement))
       (=> (instance ?T CognitiveAgent)
        (=> (property ?T Treaty)
         (and (partyToAgreement ?T ?N1)
              (and (partyToAgreement ?T ?N2)
                   (and (instance ?N1 Nation)
                        (and (instance ?N2 Nation)
                             (not (equal ?N1 ?N2)))))))))))
*/
fof(a2386,axiom,! [T] : (? [N1,N2] : (((s_instance(N2, s_Agreement) & s_instance(N1, s_Agreement)) & (s_instance(T, s_CognitiveAgent) => (s_property(T, s_Treaty) => (s_partyToAgreement(T, N1) & (s_partyToAgreement(T, N2) & (s_instance(N1, s_Nation) & (s_instance(N2, s_Nation) & (~ (N1 = N2)))))))))))).

/*
(disjointDecomposition6 Sentence Statement Supposition Question Request
 Order)
*/
fof(a2387,axiom,s_disjointDecomposition6(s_Sentence, s_Statement, s_Supposition, s_Question, s_Request, s_Order)).

/*
(subclass Statement Sentence)
*/
fof(a2388,axiom,s_subclass(s_Statement, s_Sentence)).

/*
(forall (?SENTENCE ?STATE)
 (=>
  (and (instance ?STATE Stating)
       (and (result ?STATE ?SENTENCE) (instance ?SENTENCE Sentence)))
  (instance ?SENTENCE Statement)))
*/
fof(a2389,axiom,! [SENTENCE,STATE] : (((s_instance(STATE, s_Stating) & (s_result(STATE, SENTENCE) & s_instance(SENTENCE, s_Sentence))) => s_instance(SENTENCE, s_Statement)))).

/*
(instance Fact SetOrClass)
*/
fof(a2390,axiom,s_instance(s_Fact, s_SetOrClass)).

/*
(instance Statement SetOrClass)
*/
fof(a2391,axiom,s_instance(s_Statement, s_SetOrClass)).

/*
(subclass Fact Statement)
*/
fof(a2392,axiom,s_subclass(s_Fact, s_Statement)).

/*
(forall (?FACT) (=> (instance ?FACT Fact) (truth ?FACT True)))
*/
%% no translation to TPTP available.

/*
(instance Question SetOrClass)
*/
fof(a2393,axiom,s_instance(s_Question, s_SetOrClass)).

/*
(subclass Question Sentence)
*/
fof(a2394,axiom,s_subclass(s_Question, s_Sentence)).

/*
(forall (?SENTENCE ?QUESTION)
 (=>
  (and (instance ?QUESTION Questioning)
       (and (result ?QUESTION ?SENTENCE)
            (instance ?SENTENCE Sentence)))
  (instance ?SENTENCE Question)))
*/
fof(a2395,axiom,! [SENTENCE,QUESTION] : (((s_instance(QUESTION, s_Questioning) & (s_result(QUESTION, SENTENCE) & s_instance(SENTENCE, s_Sentence))) => s_instance(SENTENCE, s_Question)))).

/*
(instance Supposition SetOrClass)
*/
fof(a2396,axiom,s_instance(s_Supposition, s_SetOrClass)).

/*
(subclass Supposition Sentence)
*/
fof(a2397,axiom,s_subclass(s_Supposition, s_Sentence)).

/*
(forall (?SENTENCE ?SUPPOSE)
 (=>
  (and (instance ?SUPPOSE Supposing)
       (and (result ?SUPPOSE ?SENTENCE) (instance ?SENTENCE Sentence)))
  (instance ?SENTENCE Supposition)))
*/
fof(a2398,axiom,! [SENTENCE,SUPPOSE] : (((s_instance(SUPPOSE, s_Supposing) & (s_result(SUPPOSE, SENTENCE) & s_instance(SENTENCE, s_Sentence))) => s_instance(SENTENCE, s_Supposition)))).

/*
(instance Request SetOrClass)
*/
fof(a2399,axiom,s_instance(s_Request, s_SetOrClass)).

/*
(subclass Request Sentence)
*/
fof(a2400,axiom,s_subclass(s_Request, s_Sentence)).

/*
(forall (?SENTENCE ?REQUEST)
 (=>
  (and (instance ?REQUEST Requesting)
       (and (result ?REQUEST ?SENTENCE) (instance ?SENTENCE Sentence)))
  (instance ?SENTENCE Request)))
*/
fof(a2401,axiom,! [SENTENCE,REQUEST] : (((s_instance(REQUEST, s_Requesting) & (s_result(REQUEST, SENTENCE) & s_instance(SENTENCE, s_Sentence))) => s_instance(SENTENCE, s_Request)))).

/*
(instance Order SetOrClass)
*/
fof(a2402,axiom,s_instance(s_Order, s_SetOrClass)).

/*
(subclass Order Sentence)
*/
fof(a2403,axiom,s_subclass(s_Order, s_Sentence)).

/*
(forall (?SENTENCE ?ORDER)
 (=>
  (and (instance ?ORDER Ordering)
       (and (result ?ORDER ?SENTENCE) (instance ?SENTENCE Sentence)))
  (instance ?SENTENCE Order)))
*/
fof(a2404,axiom,! [SENTENCE,ORDER] : (((s_instance(ORDER, s_Ordering) & (s_result(ORDER, SENTENCE) & s_instance(SENTENCE, s_Sentence))) => s_instance(SENTENCE, s_Order)))).

/*
(subclass AudioRecording Recording)
*/
fof(a2405,axiom,s_subclass(s_AudioRecording, s_Recording)).

/*
(comment AudioRecording
 In ver 1.111 of Mid-level-ontology.kif , it says that 
(&%subclass &%AudioRecording &%Text).  This does not seem right.  Deleting that statement.  
Creating a parent class called &%Recording which means something that captures a 
&%Process that happened in real life.  &%AudioRecording and &%VideoRecording will 
inherit from there.  A &%Photograph is also a still recording of what happened in 
real life - as opposed to Graphic Art which is more of an &%ArtWork than a &%Recording, 
so it will also inherit from &%Recording. (09-14-2011) KJN)
*/
fof(a2406,axiom,s_comment(s_AudioRecording, 'In ver 1.111 of Mid-level-ontology.kif , it says that (&%subclass &%AudioRecording &%Text).  This does not seem right.  Deleting that statement.  Creating a parent class called &%Recording which means something that captures a &%Process that happened in real life.  &%AudioRecording and &%VideoRecording will inherit from there.  A &%Photograph is also a still recording of what happened in real life - as opposed to Graphic Art which is more of an &%ArtWork than a &%Recording, so it will also inherit from &%Recording. (09-14-2011)', 'KJN')).

/*
(forall (?X)
 (exists (?EV)
  (and (instance ?EV Entity)
       (=> (instance ?X AudioRecording)
        (and (instance ?EV RadiatingSound)
             (and (represents ?X ?EV)
                  (capability RadiatingSound patient ?X)))))))
*/
fof(a2407,axiom,! [X] : (? [EV] : ((s_instance(EV, s_Entity) & (s_instance(X, s_AudioRecording) => (s_instance(EV, s_RadiatingSound) & (s_represents(X, EV) & s_capability(s_RadiatingSound, s_patient_m, X)))))))).

/*
(forall (?RECORD)
 (exists (?INFO ?SOUND)
  (and (and (instance ?SOUND Process) (instance ?INFO Proposition))
       (=> (instance ?RECORD AudioRecording)
        (and (containsInformation ?RECORD ?INFO)
             (and (realization ?SOUND ?INFO)
                  (instance ?SOUND RadiatingSound)))))))
*/
fof(a2408,axiom,! [RECORD] : (? [INFO,SOUND] : (((s_instance(SOUND, s_Process) & s_instance(INFO, s_Proposition)) & (s_instance(RECORD, s_AudioRecording) => (s_containsInformation(RECORD, INFO) & (s_realization(SOUND, INFO) & s_instance(SOUND, s_RadiatingSound)))))))).

/*
(subrelation record represents)
*/
fof(a2409,axiom,s_subrelation(s_record_m, s_represents_m)).

/*
(comment record
 Adding a more specific relation than &%represents.  While &%represents
can be something like a &%Logo that represents a &%Brand, &%record is more strict in 
the sense that it is an accurate rendering of some &%Process that occurred in real life. 
(09-14-2011). KJN)
*/
fof(a2410,axiom,s_comment(s_record_m, 'Adding a more specific relation than &%represents.  While &%representscan be something like a &%Logo that represents a &%Brand, &%record is more strict in the sense that it is an accurate rendering of some &%Process that occurred in real life. (09-14-2011).', 'KJN')).

/*
(forall (?PHYS ?REC)
 (=>
  (and (instance ?REC ContentBearingObject)
       (instance ?PHYS ContentBearingPhysical))
  (=> (record ?REC ?PHYS) (equivalentContentInstance ?REC ?PHYS))))
*/
fof(a2411,axiom,! [PHYS,REC] : (((s_instance(REC, s_ContentBearingObject) & s_instance(PHYS, s_ContentBearingPhysical)) => (s_record(REC, PHYS) => s_equivalentContentInstance(REC, PHYS))))).

/*
(forall (?PHYS ?REC)
 (exists (?DS)
  (and (instance ?DS DataStorageDevice)
       (=>
        (and (instance ?REC ContentBearingObject)
             (instance ?PHYS Physical))
        (=> (record ?REC ?PHYS)
         (and (instance ?DS DataStorageDevice) (stored ?REC ?DS)))))))
*/
fof(a2412,axiom,! [PHYS,REC] : (? [DS] : ((s_instance(DS, s_DataStorageDevice) & ((s_instance(REC, s_ContentBearingObject) & s_instance(PHYS, s_Physical)) => (s_record(REC, PHYS) => (s_instance(DS, s_DataStorageDevice) & s_stored(REC, DS)))))))).

/*
(instance stored BinaryPredicate)
*/
fof(a2413,axiom,s_instance(s_stored_m, s_BinaryPredicate)).

/*
(instance stored AntisymmetricRelation)
*/
fof(a2414,axiom,s_instance(s_stored_m, s_AntisymmetricRelation)).

/*
(instance stored PartialValuedRelation)
*/
fof(a2415,axiom,s_instance(s_stored_m, s_PartialValuedRelation)).

/*
(instance stored TransitiveRelation)
*/
fof(a2416,axiom,s_instance(s_stored_m, s_TransitiveRelation)).

/*
(comment stored
 Adding a stored method that is specific to storing &%ContentBearingObject
such as &%SymbolicString, &%Recording, etc. in a &%DataStorageDevice.  Will be changing
some axioms to use this instead of other, vaguer ways of describing it.
 KJN)
*/
fof(a2417,axiom,s_comment(s_stored_m, 'Adding a stored method that is specific to storing &%ContentBearingObjectsuch as &%SymbolicString, &%Recording, etc. in a &%DataStorageDevice.  Will be changingsome axioms to use this instead of other, vaguer ways of describing it.', 'KJN')).

/*
(forall (?D ?O)
 (exists (?P)
  (and (instance ?P Process)
       (=>
        (and (instance ?O ContentBearingObject)
             (instance ?D DataStorageDevice))
        (=> (stored ?O ?D)
         (and (instance ?P Writing)
              (and (destination ?P ?D) (patient ?P ?O))))))))
*/
fof(a2418,axiom,! [D,O] : (? [P] : ((s_instance(P, s_Process) & ((s_instance(O, s_ContentBearingObject) & s_instance(D, s_DataStorageDevice)) => (s_stored(O, D) => (s_instance(P, s_Writing) & (s_destination(P, D) & s_patient(P, O))))))))).

/*
(forall (?TIME ?D ?O)
 (=>
  (and (instance ?O ContentBearingObject)
       (instance ?D DataStorageDevice) (instance ?TIME TimePosition))
  (=> (equal ?TIME (WhenFn (stored ?O ?D)))
   (holdsDuring ?TIME
    (modalAttribute (exists (?P) (patient ?P ?O)) Possibility)))))
*/
%% no translation to TPTP available.

/*
(instance Blank RelationalAttribute)
*/
fof(a2419,axiom,s_instance(s_Blank, s_RelationalAttribute)).

/*
(forall (?DSTORE)
 (forall (?DATA)
  (=> (instance ?DATA ContentBearingObject)
   (=>
    (and (instance ?DSTORE DataStorageDevice)
         (attribute ?DSTORE Blank))
    (not (stored ?DATA ?DSTORE))))))
*/
fof(a2420,axiom,! [DSTORE] : (! [DATA] : ((s_instance(DATA, s_ContentBearingObject) => ((s_instance(DSTORE, s_DataStorageDevice) & s_attribute(DSTORE, s_Blank)) => (~ s_stored(DATA, DSTORE))))))).

/*
(subclass Recording ContentBearingObject)
*/
fof(a2421,axiom,s_subclass(s_Recording, s_ContentBearingObject)).

/*
(forall (?R)
 (exists (?P)
  (and (instance ?P Physical)
       (=> (instance ?R Recording)
        (and (instance ?P Process) (record ?R ?P))))))
*/
fof(a2422,axiom,! [R] : (? [P] : ((s_instance(P, s_Physical) & (s_instance(R, s_Recording) => (s_instance(P, s_Process) & s_record(R, P))))))).

/*
(instance MusicRecording SetOrClass)
*/
fof(a2423,axiom,s_instance(s_MusicRecording, s_SetOrClass)).

/*
(subclass MusicRecording AudioRecording)
*/
fof(a2424,axiom,s_subclass(s_MusicRecording, s_AudioRecording)).

/*
(forall (?M)
 (exists (?P)
  (and (instance ?P Physical)
       (=> (instance ?M MusicRecording)
        (and (instance ?P MakingMusic) (record ?M ?P))))))
*/
fof(a2425,axiom,! [M] : (? [P] : ((s_instance(P, s_Physical) & (s_instance(M, s_MusicRecording) => (s_instance(P, s_MakingMusic) & s_record(M, P))))))).

/*
(instance SheetMusic SetOrClass)
*/
fof(a2426,axiom,s_instance(s_SheetMusic, s_SetOrClass)).

/*
(subclass SheetMusic ContentBearingObject)
*/
fof(a2427,axiom,s_subclass(s_SheetMusic, s_ContentBearingObject)).

/*
(forall (?SM)
 (exists (?MC)
  (and (instance ?MC Proposition)
       (=> (instance ?SM SheetMusic)
        (and (instance ?MC MusicalComposition)
             (containsInformation ?SM ?MC))))))
*/
fof(a2428,axiom,! [SM] : (? [MC] : ((s_instance(MC, s_Proposition) & (s_instance(SM, s_SheetMusic) => (s_instance(MC, s_MusicalComposition) & s_containsInformation(SM, MC))))))).

/*
(instance MusicText SetOrClass)
*/
fof(a2429,axiom,s_instance(s_MusicText, s_SetOrClass)).

/*
(subclass MusicText Text)
*/
fof(a2430,axiom,s_subclass(s_MusicText, s_Text)).

/*
(forall (?X)
 (=> (instance ?X MusicText) (capability MakingMusic patient ?X)))
*/
fof(a2431,axiom,! [X] : ((s_instance(X, s_MusicText) => s_capability(s_MakingMusic, s_patient_m, X)))).

/*
(instance VideoRecording SetOrClass)
*/
fof(a2432,axiom,s_instance(s_VideoRecording, s_SetOrClass)).

/*
(instance Recording SetOrClass)
*/
fof(a2433,axiom,s_instance(s_Recording, s_SetOrClass)).

/*
(subclass VideoRecording Recording)
*/
fof(a2434,axiom,s_subclass(s_VideoRecording, s_Recording)).

/*
(forall (?X)
 (exists (?EV)
  (and (instance ?EV Entity)
       (=> (instance ?X VideoRecording)
        (and (instance ?EV Process)
             (and (represents ?X ?EV)
                  (capability RadiatingLight patient ?X)))))))
*/
fof(a2435,axiom,! [X] : (? [EV] : ((s_instance(EV, s_Entity) & (s_instance(X, s_VideoRecording) => (s_instance(EV, s_Process) & (s_represents(X, EV) & s_capability(s_RadiatingLight, s_patient_m, X)))))))).

/*
(forall (?VIDEO)
 (=> (instance ?VIDEO VideoRecording)
  (modalAttribute
   (exists (?AUDIO)
    (and (instance ?AUDIO AudioRecording) (part ?AUDIO ?VIDEO)))
   Possibility)))
*/
%% no translation to TPTP available.

/*
(subclass MediaSystem Collection)
*/
fof(a2436,axiom,s_subclass(s_MediaSystem, s_Collection)).

/*
(forall (?PLAYER)
 (=> (instance ?PLAYER MediaSystem)
  (hasPurpose ?PLAYER
   (or (exists (?VIDEO ?RL)
        (and (instance ?VIDEO VideoRecording)
             (and (instance ?RL RadiatingLight)
                  (and (patient ?RL ?VIDEO)
                       (instrument ?RL ?PLAYER)))))
       (exists (?AUDIO ?RS)
        (and (instance ?AUDIO AudioRecording)
             (and (instance ?RS RadiatingSound)
                  (and (patient ?RS ?AUDIO)
                       (instrument ?RS ?PLAYER)))))))))
*/
%% no translation to TPTP available.

/*
(instance Label SetOrClass)
*/
fof(a2437,axiom,s_instance(s_Label, s_SetOrClass)).

/*
(subclass Label Text)
*/
fof(a2438,axiom,s_subclass(s_Label, s_Text)).

/*
(forall (?LABEL)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?LABEL Label)
        (and (instance ?OBJ SelfConnectedObject)
             (and (connected ?LABEL ?OBJ) (refers ?LABEL ?OBJ)))))))
*/
fof(a2439,axiom,! [LABEL] : (? [OBJ] : ((s_instance(OBJ, s_Object) & (s_instance(LABEL, s_Label) => (s_instance(OBJ, s_SelfConnectedObject) & (s_connected(LABEL, OBJ) & s_refers(LABEL, OBJ)))))))).

/*
(subclass FormText Text)
*/
fof(a2440,axiom,s_subclass(s_FormText, s_Text)).

/*
(subclass TestForm FormText)
*/
fof(a2441,axiom,s_subclass(s_TestForm, s_FormText)).

/*
(instance TestForm SetOrClass)
*/
fof(a2442,axiom,s_instance(s_TestForm, s_SetOrClass)).

/*
(subclass TestForm MeasuringDevice)
*/
fof(a2443,axiom,s_subclass(s_TestForm, s_MeasuringDevice)).

/*
(instance Ballot SetOrClass)
*/
fof(a2444,axiom,s_instance(s_Ballot, s_SetOrClass)).

/*
(subclass Ballot FormText)
*/
fof(a2445,axiom,s_subclass(s_Ballot, s_FormText)).

/*
(forall (?B)
 (=> (instance ?B Ballot)
  (hasPurpose ?B
   (exists (?V) (and (instance ?V Voting) (instrument ?V ?B))))))
*/
%% no translation to TPTP available.

/*
(instance Application SetOrClass)
*/
fof(a2446,axiom,s_instance(s_Application, s_SetOrClass)).

/*
(instance FormText SetOrClass)
*/
fof(a2447,axiom,s_instance(s_FormText, s_SetOrClass)).

/*
(subclass Application FormText)
*/
fof(a2448,axiom,s_subclass(s_Application, s_FormText)).

/*
(forall (?APP)
 (=> (instance ?APP Application)
  (hasPurpose ?APP
   (exists (?JOIN ?GIVE)
    (or (instance ?JOIN JoiningAnOrganization)
        (instance ?GIVE UnilateralGiving))))))
*/
%% no translation to TPTP available.

/*
(instance Announcement SetOrClass)
*/
fof(a2449,axiom,s_instance(s_Announcement, s_SetOrClass)).

/*
(subclass Announcement FactualText)
*/
fof(a2450,axiom,s_subclass(s_Announcement, s_FactualText)).

/*
(forall (?A)
 (exists (?CD ?I)
  (and (and (instance ?I Physical) (instance ?CD Process))
       (=> (instance ?A Announcement)
        (and (instance ?CD ContentDevelopment)
             (and (result ?CD ?A)
                  (and (refers ?A ?I)
                       (and (instance ?I SocialInteraction)
                            (earlier (WhenFn ?CD) (WhenFn ?I))))))))))
*/
fof(a2451,axiom,! [A] : (? [CD,I] : (((s_instance(I, s_Physical) & s_instance(CD, s_Process)) & (s_instance(A, s_Announcement) => (s_instance(CD, s_ContentDevelopment) & (s_result(CD, A) & (s_refers(A, I) & (s_instance(I, s_SocialInteraction) & s_earlier(s_WhenFn(CD), s_WhenFn(I))))))))))).

/*
(instance PerformanceProgram SetOrClass)
*/
fof(a2452,axiom,s_instance(s_PerformanceProgram, s_SetOrClass)).

/*
(subclass PerformanceProgram FactualText)
*/
fof(a2453,axiom,s_subclass(s_PerformanceProgram, s_FactualText)).

/*
(forall (?PROG)
 (exists (?PERF ?PROP)
  (and (and (instance ?PROP Proposition) (instance ?PERF Process))
       (=> (instance ?PROG PerformanceProgram)
        (and (containsInformation ?PROG ?PROP)
             (and (realization ?PERF ?PROP)
                  (instance ?PERF Performance)))))))
*/
fof(a2454,axiom,! [PROG] : (? [PERF,PROP] : (((s_instance(PROP, s_Proposition) & s_instance(PERF, s_Process)) & (s_instance(PROG, s_PerformanceProgram) => (s_containsInformation(PROG, PROP) & (s_realization(PERF, PROP) & s_instance(PERF, s_Performance)))))))).

/*
(instance MotionPictureShot SetOrClass)
*/
fof(a2455,axiom,s_instance(s_MotionPictureShot, s_SetOrClass)).

/*
(subclass MotionPictureShot MotionPicture)
*/
fof(a2456,axiom,s_subclass(s_MotionPictureShot, s_MotionPicture)).

/*
(forall (?SHOT)
 (exists (?MOVIE)
  (and (instance ?MOVIE ContentBearingPhysical)
       (=> (instance ?SHOT MotionPictureShot)
        (and (instance ?MOVIE MotionPicture)
             (subsumesContentInstance ?MOVIE ?SHOT))))))
*/
fof(a2457,axiom,! [SHOT] : (? [MOVIE] : ((s_instance(MOVIE, s_ContentBearingPhysical) & (s_instance(SHOT, s_MotionPictureShot) => (s_instance(MOVIE, s_MotionPicture) & s_subsumesContentInstance(MOVIE, SHOT))))))).

/*
(forall (?SHOT)
 (exists (?C)
  (forall (?C2)
   (=> (instance ?C2 Object)
    (and (instance ?C Object)
         (=> (instance ?SHOT MotionPictureShot)
          (and (instance ?C Camera)
               (and (instrument ?SHOT ?C)
                    (not (and (instance ?C2 Camera)
                              (and (not (equal ?C ?C2))
                                   (instrument ?SHOT ?C2))))))))))))
*/
fof(a2458,axiom,! [SHOT] : (? [C] : (! [C2] : ((s_instance(C2, s_Object) => (s_instance(C, s_Object) & (s_instance(SHOT, s_MotionPictureShot) => (s_instance(C, s_Camera) & (s_instrument(SHOT, C) & (~ (s_instance(C2, s_Camera) & ((~ (C = C2)) & s_instrument(SHOT, C2))))))))))))).

/*
(instance MotionPictureScene SetOrClass)
*/
fof(a2459,axiom,s_instance(s_MotionPictureScene, s_SetOrClass)).

/*
(subclass MotionPictureScene MotionPicture)
*/
fof(a2460,axiom,s_subclass(s_MotionPictureScene, s_MotionPicture)).

/*
(forall (?S ?MOVIE)
 (exists (?M)
  (and (instance ?M Entity)
       (=> (instance ?MOVIE ContentBearingPhysical)
        (=> (instance ?S MotionPictureScene)
         (and (instance ?M MotionPicture)
              (subsumesContentInstance ?MOVIE ?S)))))))
*/
fof(a2461,axiom,! [S,MOVIE] : (? [M] : ((s_instance(M, s_Entity) & (s_instance(MOVIE, s_ContentBearingPhysical) => (s_instance(S, s_MotionPictureScene) => (s_instance(M, s_MotionPicture) & s_subsumesContentInstance(MOVIE, S)))))))).

/*
(subclass Documentary MotionPicture)
*/
fof(a2462,axiom,s_subclass(s_Documentary, s_MotionPicture)).

/*
(instance Documentary SetOrClass)
*/
fof(a2463,axiom,s_instance(s_Documentary, s_SetOrClass)).

/*
(subclass Documentary FactualText)
*/
fof(a2464,axiom,s_subclass(s_Documentary, s_FactualText)).

/*
(subclass BroadcastProgram Series)
*/
fof(a2465,axiom,s_subclass(s_BroadcastProgram, s_Series)).

/*
(forall (?PROGRAM)
 (exists (?BROADCAST)
  (and (instance ?BROADCAST Process)
       (=> (instance ?PROGRAM BroadcastProgram)
        (and (instance ?BROADCAST Broadcasting)
             (patient ?BROADCAST ?PROGRAM))))))
*/
fof(a2466,axiom,! [PROGRAM] : (? [BROADCAST] : ((s_instance(BROADCAST, s_Process) & (s_instance(PROGRAM, s_BroadcastProgram) => (s_instance(BROADCAST, s_Broadcasting) & s_patient(BROADCAST, PROGRAM))))))).

/*
(instance NewsProgram SetOrClass)
*/
fof(a2467,axiom,s_instance(s_NewsProgram, s_SetOrClass)).

/*
(instance BroadcastProgram SetOrClass)
*/
fof(a2468,axiom,s_instance(s_BroadcastProgram, s_SetOrClass)).

/*
(subclass NewsProgram BroadcastProgram)
*/
fof(a2469,axiom,s_subclass(s_NewsProgram, s_BroadcastProgram)).

/*
(forall (?EPISODE ?NUMBER ?PROGRAM)
 (exists (?DISSEMINATE)
  (and (instance ?DISSEMINATE Process)
       (=>
        (and (subclass ?PROGRAM Series) (instance ?PROGRAM SetOrClass)
             (instance ?NUMBER PositiveInteger)
             (instance ?EPISODE Entity))
        (=>
         (and (subclass ?PROGRAM NewsProgram)
              (equal ?EPISODE (SeriesVolumeFn ?PROGRAM ?NUMBER)))
         (and (instance ?DISSEMINATE Disseminating)
              (patient ?DISSEMINATE ?EPISODE)))))))
*/
fof(a2470,axiom,! [EPISODE,NUMBER,PROGRAM] : (? [DISSEMINATE] : ((s_instance(DISSEMINATE, s_Process) & ((s_subclass(PROGRAM, s_Series) & s_instance(PROGRAM, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger) & s_instance(EPISODE, s_Entity)) => ((s_subclass(PROGRAM, s_NewsProgram) & (EPISODE = s_SeriesVolumeFn(PROGRAM, NUMBER))) => (s_instance(DISSEMINATE, s_Disseminating) & s_patient(DISSEMINATE, EPISODE)))))))).

/*
(instance SeriesVolumeFn BinaryFunction)
*/
fof(a2471,axiom,s_instance(s_SeriesVolumeFn_m, s_BinaryFunction)).

/*
(instance SeriesVolumeFn PartialValuedRelation)
*/
fof(a2472,axiom,s_instance(s_SeriesVolumeFn_m, s_PartialValuedRelation)).

/*
(domainSubclass SeriesVolumeFn 1 Series)
*/
fof(a2473,axiom,s_domainSubclass(s_SeriesVolumeFn_m, 1, s_Series)).

/*
(rangeSubclass SeriesVolumeFn Text)
*/
fof(a2474,axiom,s_rangeSubclass(s_SeriesVolumeFn_m, s_Text)).

/*
(forall
 (?TEXT ?INT2 ?INT1 ?VOLUME1 ?VOLUME2 ?CBO1 ?CBO2 ?PUB2 ?DATE2 ?DATE1
  ?PUB1)
 (=>
  (and (subclass ?TEXT Series) (instance ?TEXT SetOrClass)
       (instance ?INT2 PositiveInteger)
       (instance ?INT1 PositiveInteger) (instance ?VOLUME1 SetOrClass)
       (instance ?VOLUME2 SetOrClass) (instance ?DATE2 Day)
       (instance ?DATE1 Day))
  (=>
   (and (subclass ?TEXT Periodical)
        (and (equal (SeriesVolumeFn ?TEXT ?INT1) ?VOLUME1)
             (and (equal (SeriesVolumeFn ?TEXT ?INT2) ?VOLUME2)
                  (and (greaterThan ?INT2 ?INT1)
                       (and (instance ?PUB1 Publication)
                            (and (instance ?PUB2 Publication)
                                 (and
                                  (instance ?CBO1 ?VOLUME1)
                                  (and
                                   (instance ?CBO2 ?VOLUME2)
                                   (and
                                    (patient ?PUB1 ?CBO1)
                                    (and
                                     (patient ?PUB2 ?CBO2)
                                     (and
                                      (date ?PUB1 ?DATE1)
                                      (date ?PUB2 ?DATE2))))))))))))
   (before (EndFn ?DATE1) (EndFn ?DATE2)))))
*/
fof(a2475,axiom,! [TEXT,INT2,INT1,VOLUME1,VOLUME2,CBO1,CBO2,PUB2,DATE2,DATE1,PUB1] : (((s_subclass(TEXT, s_Series) & s_instance(TEXT, s_SetOrClass) & s_instance(INT2, s_PositiveInteger) & s_instance(INT1, s_PositiveInteger) & s_instance(VOLUME1, s_SetOrClass) & s_instance(VOLUME2, s_SetOrClass) & s_instance(DATE2, s_Day) & s_instance(DATE1, s_Day)) => ((s_subclass(TEXT, s_Periodical) & ((s_SeriesVolumeFn(TEXT, INT1) = VOLUME1) & ((s_SeriesVolumeFn(TEXT, INT2) = VOLUME2) & (greater(INT2, INT1) & (s_instance(PUB1, s_Publication) & (s_instance(PUB2, s_Publication) & (s_instance(CBO1, VOLUME1) & (s_instance(CBO2, VOLUME2) & (s_patient(PUB1, CBO1) & (s_patient(PUB2, CBO2) & (s_date(PUB1, DATE1) & s_date(PUB2, DATE2)))))))))))) => s_before(s_EndFn(DATE1), s_EndFn(DATE2)))))).

/*
(forall (?VOLUME ?NUMBER ?SERIES)
 (=>
  (and (subclass ?SERIES ContentBearingPhysical)
       (subclass ?SERIES Series) (instance ?NUMBER PositiveInteger)
       (instance ?VOLUME Entity)
       (subclass ?VOLUME ContentBearingPhysical))
  (=> (equal (SeriesVolumeFn ?SERIES ?NUMBER) ?VOLUME)
   (subsumesContentClass ?SERIES ?VOLUME))))
*/
fof(a2476,axiom,! [VOLUME,NUMBER,SERIES] : (((s_subclass(SERIES, s_ContentBearingPhysical) & s_subclass(SERIES, s_Series) & s_instance(NUMBER, s_PositiveInteger) & s_instance(VOLUME, s_Entity) & s_subclass(VOLUME, s_ContentBearingPhysical)) => ((s_SeriesVolumeFn(SERIES, NUMBER) = VOLUME) => s_subsumesContentClass(SERIES, VOLUME))))).

/*
(subclass Series Text)
*/
fof(a2477,axiom,s_subclass(s_Series, s_Text)).

/*
(forall (?SERIES)
 (exists (?BOOK1 ?BOOK2)
  (and (and (instance ?BOOK2 ContentBearingPhysical)
            (instance ?BOOK1 ContentBearingPhysical))
       (=> (instance ?SERIES Series)
        (and (instance ?BOOK1 Book)
             (and (instance ?BOOK2 Book)
                  (and (subsumesContentInstance ?SERIES ?BOOK1)
                       (and (subsumesContentInstance ?SERIES ?BOOK2)
                            (not (equal ?BOOK1 ?BOOK2))))))))))
*/
fof(a2478,axiom,! [SERIES] : (? [BOOK1,BOOK2] : (((s_instance(BOOK2, s_ContentBearingPhysical) & s_instance(BOOK1, s_ContentBearingPhysical)) & (s_instance(SERIES, s_Series) => (s_instance(BOOK1, s_Book) & (s_instance(BOOK2, s_Book) & (s_subsumesContentInstance(SERIES, BOOK1) & (s_subsumesContentInstance(SERIES, BOOK2) & (~ (BOOK1 = BOOK2))))))))))).

/*
(instance PeriodicalIssueFn BinaryFunction)
*/
fof(a2479,axiom,s_instance(s_PeriodicalIssueFn_m, s_BinaryFunction)).

/*
(instance PeriodicalIssueFn PartialValuedRelation)
*/
fof(a2480,axiom,s_instance(s_PeriodicalIssueFn_m, s_PartialValuedRelation)).

/*
(domainSubclass PeriodicalIssueFn 1 Periodical)
*/
fof(a2481,axiom,s_domainSubclass(s_PeriodicalIssueFn_m, 1, s_Periodical)).

/*
(rangeSubclass PeriodicalIssueFn Periodical)
*/
fof(a2482,axiom,s_rangeSubclass(s_PeriodicalIssueFn_m, s_Periodical)).

/*
(forall (?ISSUE ?NUMBER ?PERIODICAL)
 (=>
  (and (subclass ?PERIODICAL ContentBearingPhysical)
       (subclass ?PERIODICAL Periodical)
       (instance ?NUMBER PositiveInteger) (instance ?ISSUE Entity)
       (subclass ?ISSUE ContentBearingPhysical))
  (=> (equal (PeriodicalIssueFn ?PERIODICAL ?NUMBER) ?ISSUE)
   (subsumesContentClass ?PERIODICAL ?ISSUE))))
*/
fof(a2483,axiom,! [ISSUE,NUMBER,PERIODICAL] : (((s_subclass(PERIODICAL, s_ContentBearingPhysical) & s_subclass(PERIODICAL, s_Periodical) & s_instance(NUMBER, s_PositiveInteger) & s_instance(ISSUE, s_Entity) & s_subclass(ISSUE, s_ContentBearingPhysical)) => ((s_PeriodicalIssueFn(PERIODICAL, NUMBER) = ISSUE) => s_subsumesContentClass(PERIODICAL, ISSUE))))).

/*
(instance Series SetOrClass)
*/
fof(a2484,axiom,s_instance(s_Series, s_SetOrClass)).

/*
(subclass Periodical Series)
*/
fof(a2485,axiom,s_subclass(s_Periodical, s_Series)).

/*
(subclass Article Text)
*/
fof(a2486,axiom,s_subclass(s_Article, s_Text)).

/*
(disjoint Article Book)
*/
fof(a2487,axiom,s_disjoint(s_Article, s_Book)).

/*
(forall (?ARTICLE1 ?BOOK)
 (exists (?ARTICLE2)
  (and (instance ?ARTICLE2 ContentBearingPhysical)
       (=>
        (and (instance ?ARTICLE1 Article)
             (and (instance ?BOOK Book)
                  (subsumesContentInstance ?BOOK ?ARTICLE1)))
        (and (instance ?ARTICLE2 Article)
             (and (not (equal ?ARTICLE2 ?ARTICLE1))
                  (subsumesContentInstance ?BOOK ?ARTICLE2)))))))
*/
fof(a2488,axiom,! [ARTICLE1,BOOK] : (? [ARTICLE2] : ((s_instance(ARTICLE2, s_ContentBearingPhysical) & ((s_instance(ARTICLE1, s_Article) & (s_instance(BOOK, s_Book) & s_subsumesContentInstance(BOOK, ARTICLE1))) => (s_instance(ARTICLE2, s_Article) & ((~ (ARTICLE2 = ARTICLE1)) & s_subsumesContentInstance(BOOK, ARTICLE2)))))))).

/*
(instance Chapter SetOrClass)
*/
fof(a2489,axiom,s_instance(s_Chapter, s_SetOrClass)).

/*
(subclass Chapter Article)
*/
fof(a2490,axiom,s_subclass(s_Chapter, s_Article)).

/*
(forall (?CHAPTER)
 (exists (?BOOK)
  (and (instance ?BOOK ContentBearingPhysical)
       (=> (instance ?CHAPTER Chapter)
        (and (instance ?BOOK Book)
             (subsumesContentInstance ?BOOK ?CHAPTER))))))
*/
fof(a2491,axiom,! [CHAPTER] : (? [BOOK] : ((s_instance(BOOK, s_ContentBearingPhysical) & (s_instance(CHAPTER, s_Chapter) => (s_instance(BOOK, s_Book) & s_subsumesContentInstance(BOOK, CHAPTER))))))).

/*
(subrelation titles names)
*/
fof(a2492,axiom,s_subrelation(s_titles_m, s_names_m)).

/*
(domainSubclass titles 2 ContentBearingPhysical)
*/
fof(a2493,axiom,s_domainSubclass(s_titles_m, 2, s_ContentBearingPhysical)).

/*
(subrelation formerName names)
*/
fof(a2494,axiom,s_subrelation(s_formerName_m, s_names_m)).

/*
(instance familyName BinaryPredicate)
*/
fof(a2495,axiom,s_instance(s_familyName_m, s_BinaryPredicate)).

/*
(instance familyName AsymmetricRelation)
*/
fof(a2496,axiom,s_instance(s_familyName_m, s_AsymmetricRelation)).

/*
(subrelation familyName names)
*/
fof(a2497,axiom,s_subrelation(s_familyName_m, s_names_m)).

/*
(instance middleName BinaryPredicate)
*/
fof(a2498,axiom,s_instance(s_middleName_m, s_BinaryPredicate)).

/*
(instance middleName AsymmetricRelation)
*/
fof(a2499,axiom,s_instance(s_middleName_m, s_AsymmetricRelation)).

/*
(subrelation middleName names)
*/
fof(a2500,axiom,s_subrelation(s_middleName_m, s_names_m)).

/*
(instance givenName BinaryPredicate)
*/
fof(a2501,axiom,s_instance(s_givenName_m, s_BinaryPredicate)).

/*
(instance givenName AsymmetricRelation)
*/
fof(a2502,axiom,s_instance(s_givenName_m, s_AsymmetricRelation)).

/*
(subrelation givenName names)
*/
fof(a2503,axiom,s_subrelation(s_givenName_m, s_names_m)).

/*
(instance localLongName BinaryPredicate)
*/
fof(a2504,axiom,s_instance(s_localLongName_m, s_BinaryPredicate)).

/*
(subrelation localLongName names)
*/
fof(a2505,axiom,s_subrelation(s_localLongName_m, s_names_m)).

/*
(subrelation localShortName names)
*/
fof(a2506,axiom,s_subrelation(s_localShortName_m, s_names_m)).

/*
(instance localShortName BinaryPredicate)
*/
fof(a2507,axiom,s_instance(s_localShortName_m, s_BinaryPredicate)).

/*
(instance Message SetOrClass)
*/
fof(a2508,axiom,s_instance(s_Message, s_SetOrClass)).

/*
(subclass Message FactualText)
*/
fof(a2509,axiom,s_subclass(s_Message, s_FactualText)).

/*
(subclass Report FactualText)
*/
fof(a2510,axiom,s_subclass(s_Report, s_FactualText)).

/*
(subclass Report Article)
*/
fof(a2511,axiom,s_subclass(s_Report, s_Article)).

/*
(instance Newspaper SetOrClass)
*/
fof(a2512,axiom,s_instance(s_Newspaper, s_SetOrClass)).

/*
(subclass Newspaper Periodical)
*/
fof(a2513,axiom,s_subclass(s_Newspaper, s_Periodical)).

/*
(forall (?PAPER)
 (exists (?REPORT)
  (and (instance ?REPORT ContentBearingPhysical)
       (=> (instance ?PAPER Newspaper)
        (and (instance ?REPORT Report)
             (subsumesContentInstance ?PAPER ?REPORT))))))
*/
fof(a2514,axiom,! [PAPER] : (? [REPORT] : ((s_instance(REPORT, s_ContentBearingPhysical) & (s_instance(PAPER, s_Newspaper) => (s_instance(REPORT, s_Report) & s_subsumesContentInstance(PAPER, REPORT))))))).

/*
(forall (?WEEK ?PAPER)
 (exists (?PUBLICATION ?ISSUE)
  (and (and (instance ?ISSUE Entity) (instance ?PUBLICATION Process))
       (=> (instance ?PAPER SetOrClass)
        (=> (and (subclass ?PAPER Newspaper) (instance ?WEEK Week))
         (and (instance ?PUBLICATION Publication)
              (and (temporalPart (WhenFn ?PUBLICATION) ?WEEK)
                   (and (result ?PUBLICATION ?ISSUE)
                        (instance ?ISSUE ?PAPER)))))))))
*/
fof(a2515,axiom,! [WEEK,PAPER] : (? [PUBLICATION,ISSUE] : (((s_instance(ISSUE, s_Entity) & s_instance(PUBLICATION, s_Process)) & (s_instance(PAPER, s_SetOrClass) => ((s_subclass(PAPER, s_Newspaper) & s_instance(WEEK, s_Week)) => (s_instance(PUBLICATION, s_Publication) & (s_temporalPart(s_WhenFn(PUBLICATION), WEEK) & (s_result(PUBLICATION, ISSUE) & s_instance(ISSUE, PAPER)))))))))).

/*
(instance Magazine SetOrClass)
*/
fof(a2516,axiom,s_instance(s_Magazine, s_SetOrClass)).

/*
(instance Periodical SetOrClass)
*/
fof(a2517,axiom,s_instance(s_Periodical, s_SetOrClass)).

/*
(subclass Magazine Periodical)
*/
fof(a2518,axiom,s_subclass(s_Magazine, s_Periodical)).

/*
(instance Letter SetOrClass)
*/
fof(a2519,axiom,s_instance(s_Letter, s_SetOrClass)).

/*
(subclass Letter FactualText)
*/
fof(a2520,axiom,s_subclass(s_Letter, s_FactualText)).

/*
(subclass Holiday TimeInterval)
*/
fof(a2521,axiom,s_subclass(s_Holiday, s_TimeInterval)).

/*
(instance FixedHoliday SetOrClass)
*/
fof(a2522,axiom,s_instance(s_FixedHoliday, s_SetOrClass)).

/*
(subclass FixedHoliday Holiday)
*/
fof(a2523,axiom,s_subclass(s_FixedHoliday, s_Holiday)).

/*
(instance MoveableHoliday SetOrClass)
*/
fof(a2524,axiom,s_instance(s_MoveableHoliday, s_SetOrClass)).

/*
(instance Holiday SetOrClass)
*/
fof(a2525,axiom,s_instance(s_Holiday, s_SetOrClass)).

/*
(subclass MoveableHoliday Holiday)
*/
fof(a2526,axiom,s_subclass(s_MoveableHoliday, s_Holiday)).

/*
(instance HolidayCard SetOrClass)
*/
fof(a2527,axiom,s_instance(s_HolidayCard, s_SetOrClass)).

/*
(subclass HolidayCard ContentBearingObject)
*/
fof(a2528,axiom,s_subclass(s_HolidayCard, s_ContentBearingObject)).

/*
(forall (?C) (=> (instance ?C HolidayCard) (material Paper ?C)))
*/
fof(a2529,axiom,! [C] : ((s_instance(C, s_HolidayCard) => s_material(s_Paper, C)))).

/*
(forall (?C)
 (exists (?H)
  (and (instance ?H Entity)
       (=> (instance ?C HolidayCard)
        (and (instance ?H Holiday) (refers ?C ?H))))))
*/
fof(a2530,axiom,! [C] : (? [H] : ((s_instance(H, s_Entity) & (s_instance(C, s_HolidayCard) => (s_instance(H, s_Holiday) & s_refers(C, H))))))).

/*
(subclass HistoricalAccount NarrativeText)
*/
fof(a2531,axiom,s_subclass(s_HistoricalAccount, s_NarrativeText)).

/*
(subclass HistoricalAccount FactualText)
*/
fof(a2532,axiom,s_subclass(s_HistoricalAccount, s_FactualText)).

/*
(forall (?ACCOUNT)
 (exists (?EVENT)
  (and (instance ?EVENT Physical)
       (=> (instance ?ACCOUNT HistoricalAccount)
        (and (represents ?ACCOUNT ?EVENT)
             (earlier (WhenFn ?EVENT) (WhenFn ?ACCOUNT)))))))
*/
fof(a2533,axiom,! [ACCOUNT] : (? [EVENT] : ((s_instance(EVENT, s_Physical) & (s_instance(ACCOUNT, s_HistoricalAccount) => (s_represents(ACCOUNT, EVENT) & s_earlier(s_WhenFn(EVENT), s_WhenFn(ACCOUNT)))))))).

/*
(instance Biography SetOrClass)
*/
fof(a2534,axiom,s_instance(s_Biography, s_SetOrClass)).

/*
(instance HistoricalAccount SetOrClass)
*/
fof(a2535,axiom,s_instance(s_HistoricalAccount, s_SetOrClass)).

/*
(subclass Biography HistoricalAccount)
*/
fof(a2536,axiom,s_subclass(s_Biography, s_HistoricalAccount)).

/*
(forall (?B)
 (exists (?H)
  (and (instance ?H Entity)
       (=> (instance ?B Biography)
        (and (instance ?H Human) (refers ?B ?H))))))
*/
fof(a2537,axiom,! [B] : (? [H] : ((s_instance(H, s_Entity) & (s_instance(B, s_Biography) => (s_instance(H, s_Human) & s_refers(B, H))))))).

/*
(instance Report SetOrClass)
*/
fof(a2538,axiom,s_instance(s_Report, s_SetOrClass)).

/*
(subclass FinancialText Report)
*/
fof(a2539,axiom,s_subclass(s_FinancialText, s_Report)).

/*
(instance FinancialBill SetOrClass)
*/
fof(a2540,axiom,s_instance(s_FinancialBill, s_SetOrClass)).

/*
(subclass FinancialBill FinancialText)
*/
fof(a2541,axiom,s_subclass(s_FinancialBill, s_FinancialText)).

/*
(subclass ReferenceBook Book)
*/
fof(a2542,axiom,s_subclass(s_ReferenceBook, s_Book)).

/*
(subclass ReferenceBook FactualText)
*/
fof(a2543,axiom,s_subclass(s_ReferenceBook, s_FactualText)).

/*
(instance Dictionary SetOrClass)
*/
fof(a2544,axiom,s_instance(s_Dictionary, s_SetOrClass)).

/*
(instance ReferenceBook SetOrClass)
*/
fof(a2545,axiom,s_instance(s_ReferenceBook, s_SetOrClass)).

/*
(subclass Dictionary ReferenceBook)
*/
fof(a2546,axiom,s_subclass(s_Dictionary, s_ReferenceBook)).

/*
(instance NarrativeText SetOrClass)
*/
fof(a2547,axiom,s_instance(s_NarrativeText, s_SetOrClass)).

/*
(subclass NarrativeText Text)
*/
fof(a2548,axiom,s_subclass(s_NarrativeText, s_Text)).

/*
(partition3 NarrativeText FictionalText HistoricalAccount)
*/
fof(a2549,axiom,s_partition3(s_NarrativeText, s_FictionalText, s_HistoricalAccount)).

/*
(subclass ShortStory FictionalText)
*/
fof(a2550,axiom,s_subclass(s_ShortStory, s_FictionalText)).

/*
(instance ShortStory SetOrClass)
*/
fof(a2551,axiom,s_instance(s_ShortStory, s_SetOrClass)).

/*
(instance Article SetOrClass)
*/
fof(a2552,axiom,s_instance(s_Article, s_SetOrClass)).

/*
(subclass ShortStory Article)
*/
fof(a2553,axiom,s_subclass(s_ShortStory, s_Article)).

/*
(instance MysteryStory SetOrClass)
*/
fof(a2554,axiom,s_instance(s_MysteryStory, s_SetOrClass)).

/*
(subclass MysteryStory FictionalText)
*/
fof(a2555,axiom,s_subclass(s_MysteryStory, s_FictionalText)).

/*
(forall (?S)
 (exists (?C)
  (and (instance ?C Entity)
       (=> (instance ?S MysteryStory)
        (and (instance ?C CriminalAction) (refers ?S ?C))))))
*/
fof(a2556,axiom,! [S] : (? [C] : ((s_instance(C, s_Entity) & (s_instance(S, s_MysteryStory) => (s_instance(C, s_CriminalAction) & s_refers(S, C))))))).

/*
(subclass Novel FictionalText)
*/
fof(a2557,axiom,s_subclass(s_Novel, s_FictionalText)).

/*
(instance Novel SetOrClass)
*/
fof(a2558,axiom,s_instance(s_Novel, s_SetOrClass)).

/*
(subclass Novel Book)
*/
fof(a2559,axiom,s_subclass(s_Novel, s_Book)).

/*
(subclass DramaticPlay FictionalText)
*/
fof(a2560,axiom,s_subclass(s_DramaticPlay, s_FictionalText)).

/*
(forall (?PLAY)
 (=> (instance ?PLAY DramaticPlay)
  (hasPurpose ?PLAY
   (exists (?ACT ?PROP)
    (and (instance ?ACT DramaticActing)
         (and (containsInformation ?PLAY ?PROP)
              (realization ?ACT ?PROP)))))))
*/
%% no translation to TPTP available.

/*
(instance Opera SetOrClass)
*/
fof(a2561,axiom,s_instance(s_Opera, s_SetOrClass)).

/*
(instance DramaticPlay SetOrClass)
*/
fof(a2562,axiom,s_instance(s_DramaticPlay, s_SetOrClass)).

/*
(subclass Opera DramaticPlay)
*/
fof(a2563,axiom,s_subclass(s_Opera, s_DramaticPlay)).

/*
(forall (?OPERA ?ACT)
 (=> (instance ?ACT Process)
  (=> (and (instance ?OPERA Opera) (realization ?ACT ?OPERA))
   (instance ?ACT MakingMusic))))
*/
fof(a2564,axiom,! [OPERA,ACT] : ((s_instance(ACT, s_Process) => ((s_instance(OPERA, s_Opera) & s_realization(ACT, OPERA)) => s_instance(ACT, s_MakingMusic))))).

/*
(instance FrenchLanguage SpokenHumanLanguage)
*/
fof(a2565,axiom,s_instance(s_FrenchLanguage, s_SpokenHumanLanguage)).

/*
(instance FrenchLanguage NaturalLanguage)
*/
fof(a2566,axiom,s_instance(s_FrenchLanguage, s_NaturalLanguage)).

/*
(instance GermanLanguage SpokenHumanLanguage)
*/
fof(a2567,axiom,s_instance(s_GermanLanguage, s_SpokenHumanLanguage)).

/*
(instance GermanLanguage NaturalLanguage)
*/
fof(a2568,axiom,s_instance(s_GermanLanguage, s_NaturalLanguage)).

/*
(instance GreekLanguage SpokenHumanLanguage)
*/
fof(a2569,axiom,s_instance(s_GreekLanguage, s_SpokenHumanLanguage)).

/*
(instance GreekLanguage NaturalLanguage)
*/
fof(a2570,axiom,s_instance(s_GreekLanguage, s_NaturalLanguage)).

/*
(instance LatinLanguage SpokenHumanLanguage)
*/
fof(a2571,axiom,s_instance(s_LatinLanguage, s_SpokenHumanLanguage)).

/*
(instance LatinLanguage NaturalLanguage)
*/
fof(a2572,axiom,s_instance(s_LatinLanguage, s_NaturalLanguage)).

/*
(instance RussianLanguage SpokenHumanLanguage)
*/
fof(a2573,axiom,s_instance(s_RussianLanguage, s_SpokenHumanLanguage)).

/*
(instance RussianLanguage NaturalLanguage)
*/
fof(a2574,axiom,s_instance(s_RussianLanguage, s_NaturalLanguage)).

/*
(instance SpanishLanguage SpokenHumanLanguage)
*/
fof(a2575,axiom,s_instance(s_SpanishLanguage, s_SpokenHumanLanguage)).

/*
(instance SpanishLanguage NaturalLanguage)
*/
fof(a2576,axiom,s_instance(s_SpanishLanguage, s_NaturalLanguage)).

/*
(forall (?H)
 (=> (instance ?H Agent)
  (<=> (attribute ?H LiteracyAttribute)
   (and (hasSkill Reading ?H) (hasSkill Writing ?H)))))
*/
fof(a2577,axiom,! [H] : ((s_instance(H, s_Agent) => (s_attribute(H, s_LiteracyAttribute) <=> (s_hasSkill(s_Reading, H) & s_hasSkill(s_Writing, H)))))).

/*
(instance LiteracyAttribute SetOrClass)
*/
fof(a2578,axiom,s_instance(s_LiteracyAttribute, s_SetOrClass)).

/*
(subclass LiteracyAttribute TraitAttribute)
*/
fof(a2579,axiom,s_subclass(s_LiteracyAttribute, s_TraitAttribute)).

/*
(instance Industry SetOrClass)
*/
fof(a2580,axiom,s_instance(s_Industry, s_SetOrClass)).

/*
(subclass Industry Collection)
*/
fof(a2581,axiom,s_subclass(s_Industry, s_Collection)).

/*
(forall (?MEMB2 ?INDUSTRY ?MEMB1)
 (exists (?CLASS)
  (and (instance ?CLASS SetOrClass)
       (=> (and (instance ?MEMB2 Object) (instance ?MEMB1 Object))
        (=> (instance ?INDUSTRY Industry)
         (=> (and (member ?MEMB1 ?INDUSTRY) (member ?MEMB2 ?INDUSTRY))
          (and (subclass ?CLASS Corporation)
               (and (immediateInstance ?MEMB1 ?CLASS)
                    (immediateInstance ?MEMB2 ?CLASS)))))))))
*/
fof(a2582,axiom,! [MEMB2,INDUSTRY,MEMB1] : (? [CLASS] : ((s_instance(CLASS, s_SetOrClass) & ((s_instance(MEMB2, s_Object) & s_instance(MEMB1, s_Object)) => (s_instance(INDUSTRY, s_Industry) => ((s_member(MEMB1, INDUSTRY) & s_member(MEMB2, INDUSTRY)) => (s_subclass(CLASS, s_Corporation) & (s_immediateInstance(MEMB1, CLASS) & s_immediateInstance(MEMB2, CLASS)))))))))).

/*
(subclass Chimney StationaryArtifact)
*/
fof(a2583,axiom,s_subclass(s_Chimney, s_StationaryArtifact)).

/*
(instance Chimney SetOrClass)
*/
fof(a2584,axiom,s_instance(s_Chimney, s_SetOrClass)).

/*
(subclass Chimney Device)
*/
fof(a2585,axiom,s_subclass(s_Chimney, s_Device)).

/*
(forall (?C)
 (=> (instance ?C Chimney)
  (hasPurpose ?C
   (exists (?S ?R)
    (and (instance ?S Smoke)
         (and (instance ?R Removing) (instrument ?R ?C)))))))
*/
%% no translation to TPTP available.

/*
(instance Curb SetOrClass)
*/
fof(a2586,axiom,s_instance(s_Curb, s_SetOrClass)).

/*
(subclass Curb StationaryArtifact)
*/
fof(a2587,axiom,s_subclass(s_Curb, s_StationaryArtifact)).

/*
(forall (?C)
 (exists (?S ?R)
  (and (and (instance ?R Object) (instance ?S Object))
       (=> (instance ?C Curb)
        (and (instance ?S Sidewalk)
             (and (instance ?R Roadway) (connects ?C ?S ?R)))))))
*/
fof(a2588,axiom,! [C] : (? [S,R] : (((s_instance(R, s_Object) & s_instance(S, s_Object)) & (s_instance(C, s_Curb) => (s_instance(S, s_Sidewalk) & (s_instance(R, s_Roadway) & s_connects(C, S, R)))))))).

/*
(instance Paved Attribute)
*/
fof(a2589,axiom,s_instance(s_Paved, s_Attribute)).

/*
(instance Unpaved Attribute)
*/
fof(a2590,axiom,s_instance(s_Unpaved, s_Attribute)).

/*
(instance Stairway SetOrClass)
*/
fof(a2591,axiom,s_instance(s_Stairway, s_SetOrClass)).

/*
(subclass Stairway StationaryArtifact)
*/
fof(a2592,axiom,s_subclass(s_Stairway, s_StationaryArtifact)).

/*
(forall (?S)
 (=> (instance ?S Stairway)
  (and (capability MotionUpward instrument ?S)
       (capability MotionDownward instrument ?S))))
*/
fof(a2593,axiom,! [S] : ((s_instance(S, s_Stairway) => (s_capability(s_MotionUpward, s_instrument_m, S) & s_capability(s_MotionDownward, s_instrument_m, S))))).

/*
(forall (?B ?S)
 (=>
  (and (instance ?S Stairway)
       (and (part ?S ?B) (instance ?B Building)))
  (hasPurpose ?S
   (exists (?L1 ?L2)
    (and (instance ?L1 BuildingLevel)
         (and (instance ?L2 BuildingLevel)
              (and (part ?L1 ?B)
                   (and (part ?L2 ?B) (connects ?S ?L1 ?L2)))))))))
*/
%% no translation to TPTP available.

/*
(instance Steps SetOrClass)
*/
fof(a2594,axiom,s_instance(s_Steps, s_SetOrClass)).

/*
(subclass Steps StationaryArtifact)
*/
fof(a2595,axiom,s_subclass(s_Steps, s_StationaryArtifact)).

/*
(forall (?STEPS)
 (=> (instance ?STEPS Steps)
  (and (capability MotionUpward instrument ?STEPS)
       (capability MotionDownward instrument ?STEPS))))
*/
fof(a2596,axiom,! [STEPS] : ((s_instance(STEPS, s_Steps) => (s_capability(s_MotionUpward, s_instrument_m, STEPS) & s_capability(s_MotionDownward, s_instrument_m, STEPS))))).

/*
(forall (?LEVEL2 ?BUILDING ?LEVEL1)
 (exists (?STEPS)
  (and (instance ?STEPS Object)
       (=>
        (and (instance ?LEVEL1 BuildingLevel)
             (and (instance ?LEVEL2 BuildingLevel)
                  (and (instance ?BUILDING Building)
                       (and (part ?LEVEL1 ?BUILDING)
                            (part ?LEVEL2 ?BUILDING)))))
        (and (instance ?STEPS Steps)
             (connects ?STEPS ?LEVEL1 ?LEVEL2))))))
*/
fof(a2597,axiom,! [LEVEL2,BUILDING,LEVEL1] : (? [STEPS] : ((s_instance(STEPS, s_Object) & ((s_instance(LEVEL1, s_BuildingLevel) & (s_instance(LEVEL2, s_BuildingLevel) & (s_instance(BUILDING, s_Building) & (s_part(LEVEL1, BUILDING) & s_part(LEVEL2, BUILDING))))) => (s_instance(STEPS, s_Steps) & s_connects(STEPS, LEVEL1, LEVEL2))))))).

/*
(instance Ladder SetOrClass)
*/
fof(a2598,axiom,s_instance(s_Ladder, s_SetOrClass)).

/*
(subclass Ladder Artifact)
*/
fof(a2599,axiom,s_subclass(s_Ladder, s_Artifact)).

/*
(forall (?LADDER)
 (=> (instance ?LADDER Ladder)
  (and (capability MotionUpward instrument ?LADDER)
       (capability MotionDownward instrument ?LADDER))))
*/
fof(a2600,axiom,! [LADDER] : ((s_instance(LADDER, s_Ladder) => (s_capability(s_MotionUpward, s_instrument_m, LADDER) & s_capability(s_MotionDownward, s_instrument_m, LADDER))))).

/*
(instance Transparent InternalAttribute)
*/
fof(a2601,axiom,s_instance(s_Transparent, s_InternalAttribute)).

/*
(forall (?O ?D ?A)
 (=>
  (and (instance ?A Agent) (instance ?D Object) (instance ?O Object))
  (=> (attribute ?O Transparent)
   (modalAttribute
    (exists (?S)
     (and (instance ?S Seeing)
          (and (agent ?S ?A)
               (and (destination ?S ?D) (between ?O ?A ?D)))))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(subclass Curtain WindowCovering)
*/
fof(a2602,axiom,s_subclass(s_Curtain, s_WindowCovering)).

/*
(instance Curtain SetOrClass)
*/
fof(a2603,axiom,s_instance(s_Curtain, s_SetOrClass)).

/*
(subclass Curtain Fabric)
*/
fof(a2604,axiom,s_subclass(s_Curtain, s_Fabric)).

/*
(subclass Window Artifact)
*/
fof(a2605,axiom,s_subclass(s_Window, s_Artifact)).

/*
(forall (?W)
 (exists (?A)
  (and (instance ?A Object)
       (=> (instance ?W Window)
        (and (part ?W ?A)
             (or (instance ?A Building)
                 (or (instance ?A Room) (instance ?A Vehicle))))))))
*/
fof(a2606,axiom,! [W] : (? [A] : ((s_instance(A, s_Object) & (s_instance(W, s_Window) => (s_part(W, A) & (s_instance(A, s_Building) | (s_instance(A, s_Room) | s_instance(A, s_Vehicle))))))))).

/*
(forall (?W) (=> (instance ?W Window) (attribute ?W Transparent)))
*/
fof(a2607,axiom,! [W] : ((s_instance(W, s_Window) => s_attribute(W, s_Transparent)))).

/*
(instance Skylight SetOrClass)
*/
fof(a2608,axiom,s_instance(s_Skylight, s_SetOrClass)).

/*
(instance Window SetOrClass)
*/
fof(a2609,axiom,s_instance(s_Window, s_SetOrClass)).

/*
(subclass Skylight Window)
*/
fof(a2610,axiom,s_subclass(s_Skylight, s_Window)).

/*
(forall (?W)
 (exists (?C)
  (and (instance ?C Object)
       (=> (instance ?W Skylight)
        (and (instance ?C Ceiling) (part ?W ?C))))))
*/
fof(a2611,axiom,! [W] : (? [C] : ((s_instance(C, s_Object) & (s_instance(W, s_Skylight) => (s_instance(C, s_Ceiling) & s_part(W, C))))))).

/*
(instance RearWindow SetOrClass)
*/
fof(a2612,axiom,s_instance(s_RearWindow, s_SetOrClass)).

/*
(instance VehicleWindow SetOrClass)
*/
fof(a2613,axiom,s_instance(s_VehicleWindow, s_SetOrClass)).

/*
(subclass RearWindow VehicleWindow)
*/
fof(a2614,axiom,s_subclass(s_RearWindow, s_VehicleWindow)).

/*
(forall (?W)
 (exists (?A)
  (and (instance ?A SelfConnectedObject)
       (=> (instance ?W RearWindow)
        (and (instance ?A RoadVehicle) (part ?W (BackFn ?A)))))))
*/
fof(a2615,axiom,! [W] : (? [A] : ((s_instance(A, s_SelfConnectedObject) & (s_instance(W, s_RearWindow) => (s_instance(A, s_RoadVehicle) & s_part(W, s_BackFn(A)))))))).

/*
(instance WindowCovering SetOrClass)
*/
fof(a2616,axiom,s_instance(s_WindowCovering, s_SetOrClass)).

/*
(subclass WindowCovering Artifact)
*/
fof(a2617,axiom,s_subclass(s_WindowCovering, s_Artifact)).

/*
(forall (?WC)
 (=> (instance ?WC WindowCovering)
  (hasPurpose ?WC
   (exists (?C ?W)
    (and (instance ?C Covering)
         (and (patient ?C ?W)
              (and (instance ?W Window) (instrument ?C ?WC))))))))
*/
%% no translation to TPTP available.

/*
(instance AdjoiningRoom RelationalAttribute)
*/
fof(a2618,axiom,s_instance(s_AdjoiningRoom, s_RelationalAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X AdjoiningRoom) (instance ?X Room))))
*/
fof(a2619,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_AdjoiningRoom) => s_instance(X, s_Room))))).

/*
(forall (?X)
 (exists (?ROOM ?WALL ?DOOR)
  (and (and (instance ?DOOR Object) (instance ?WALL Object)
            (instance ?ROOM Object))
       (=> (instance ?X Object)
        (=> (attribute ?X AdjoiningRoom)
         (and (attribute ?ROOM AdjoiningRoom)
              (and (not (equal ?ROOM ?X))
                   (and (orientation ?X ?ROOM Adjacent)
                        (and (instance ?WALL Wall)
                             (and (part ?WALL ?ROOM)
                                  (and
                                   (part ?WALL ?X)
                                   (and
                                    (instance ?DOOR Door)
                                    (part ?DOOR ?WALL)))))))))))))
*/
fof(a2620,axiom,! [X] : (? [ROOM,WALL,DOOR] : (((s_instance(DOOR, s_Object) & s_instance(WALL, s_Object) & s_instance(ROOM, s_Object)) & (s_instance(X, s_Object) => (s_attribute(X, s_AdjoiningRoom) => (s_attribute(ROOM, s_AdjoiningRoom) & ((~ (ROOM = X)) & (s_orientation(X, ROOM, s_Adjacent) & (s_instance(WALL, s_Wall) & (s_part(WALL, ROOM) & (s_part(WALL, X) & (s_instance(DOOR, s_Door) & s_part(DOOR, WALL)))))))))))))).

/*
(subclass TransitwayObstacle Object)
*/
fof(a2621,axiom,s_subclass(s_TransitwayObstacle, s_Object)).

/*
(instance TransitwayObstacle SetOrClass)
*/
fof(a2622,axiom,s_instance(s_TransitwayObstacle, s_SetOrClass)).

/*
(subclass Door TransitwayObstacle)
*/
fof(a2623,axiom,s_subclass(s_Door, s_TransitwayObstacle)).

/*
(instance Door SetOrClass)
*/
fof(a2624,axiom,s_instance(s_Door, s_SetOrClass)).

/*
(subclass Door Device)
*/
fof(a2625,axiom,s_subclass(s_Door, s_Device)).

/*
(forall (?DOOR)
 (exists (?WAY)
  (and (instance ?WAY Object)
       (=> (instance ?DOOR Door)
        (and (part ?DOOR ?WAY) (instance ?WAY Doorway))))))
*/
fof(a2626,axiom,! [DOOR] : (? [WAY] : ((s_instance(WAY, s_Object) & (s_instance(DOOR, s_Door) => (s_part(DOOR, WAY) & s_instance(WAY, s_Doorway))))))).

/*
(instance Hinge SetOrClass)
*/
fof(a2627,axiom,s_instance(s_Hinge, s_SetOrClass)).

/*
(subclass Hinge EngineeringComponent)
*/
fof(a2628,axiom,s_subclass(s_Hinge, s_EngineeringComponent)).

/*
(forall (?HINGE)
 (=> (instance ?HINGE Hinge)
  (hasPurpose ?HINGE
   (exists (?OBJ1 ?OBJ2)
    (and (connects ?HINGE ?OBJ1 ?OBJ2)
         (or (capability Rotating patient ?OBJ1)
             (capability Rotating patient ?OBJ2)))))))
*/
%% no translation to TPTP available.

/*
(instance Doorway SetOrClass)
*/
fof(a2629,axiom,s_instance(s_Doorway, s_SetOrClass)).

/*
(subclass Doorway StationaryArtifact)
*/
fof(a2630,axiom,s_subclass(s_Doorway, s_StationaryArtifact)).

/*
(forall (?WAY)
 (exists (?ARTIFACT)
  (and (instance ?ARTIFACT Object)
       (=> (instance ?WAY Doorway)
        (and (part ?WAY ?ARTIFACT)
             (or (instance ?ARTIFACT Building)
                 (instance ?ARTIFACT Room)))))))
*/
fof(a2631,axiom,! [WAY] : (? [ARTIFACT] : ((s_instance(ARTIFACT, s_Object) & (s_instance(WAY, s_Doorway) => (s_part(WAY, ARTIFACT) & (s_instance(ARTIFACT, s_Building) | s_instance(ARTIFACT, s_Room)))))))).

/*
(forall (?DOOR)
 (exists (?ARTIFACT)
  (and (instance ?ARTIFACT Object)
       (=> (instance ?DOOR Door)
        (and (part ?DOOR ?ARTIFACT)
             (or (instance ?ARTIFACT Building)
                 (instance ?ARTIFACT Room)))))))
*/
fof(a2632,axiom,! [DOOR] : (? [ARTIFACT] : ((s_instance(ARTIFACT, s_Object) & (s_instance(DOOR, s_Door) => (s_part(DOOR, ARTIFACT) & (s_instance(ARTIFACT, s_Building) | s_instance(ARTIFACT, s_Room)))))))).

/*
(instance Wall SetOrClass)
*/
fof(a2633,axiom,s_instance(s_Wall, s_SetOrClass)).

/*
(subclass Wall StationaryArtifact)
*/
fof(a2634,axiom,s_subclass(s_Wall, s_StationaryArtifact)).

/*
(forall (?WALL)
 (exists (?ARTIFACT)
  (and (instance ?ARTIFACT Object)
       (=> (instance ?WALL Wall)
        (and (part ?WALL ?ARTIFACT)
             (or (instance ?ARTIFACT Building)
                 (instance ?ARTIFACT Room)))))))
*/
fof(a2635,axiom,! [WALL] : (? [ARTIFACT] : ((s_instance(ARTIFACT, s_Object) & (s_instance(WALL, s_Wall) => (s_part(WALL, ARTIFACT) & (s_instance(ARTIFACT, s_Building) | s_instance(ARTIFACT, s_Room)))))))).

/*
(instance Floor SetOrClass)
*/
fof(a2636,axiom,s_instance(s_Floor, s_SetOrClass)).

/*
(subclass Floor StationaryArtifact)
*/
fof(a2637,axiom,s_subclass(s_Floor, s_StationaryArtifact)).

/*
(forall (?FLOOR)
 (exists (?ARTIFACT)
  (and (instance ?ARTIFACT Object)
       (=> (instance ?FLOOR Floor)
        (and (part ?FLOOR ?ARTIFACT) (instance ?ARTIFACT Room))))))
*/
fof(a2638,axiom,! [FLOOR] : (? [ARTIFACT] : ((s_instance(ARTIFACT, s_Object) & (s_instance(FLOOR, s_Floor) => (s_part(FLOOR, ARTIFACT) & s_instance(ARTIFACT, s_Room))))))).

/*
(subclass Ceiling StationaryArtifact)
*/
fof(a2639,axiom,s_subclass(s_Ceiling, s_StationaryArtifact)).

/*
(forall (?C)
 (exists (?R)
  (and (instance ?R SelfConnectedObject)
       (=> (instance ?C Ceiling)
        (and (top ?C ?R) (instance ?R Room))))))
*/
fof(a2640,axiom,! [C] : (? [R] : ((s_instance(R, s_SelfConnectedObject) & (s_instance(C, s_Ceiling) => (s_top(C, R) & s_instance(R, s_Room))))))).

/*
(instance Roof SetOrClass)
*/
fof(a2641,axiom,s_instance(s_Roof, s_SetOrClass)).

/*
(subclass Roof StationaryArtifact)
*/
fof(a2642,axiom,s_subclass(s_Roof, s_StationaryArtifact)).

/*
(forall (?ROOF)
 (exists (?BUILDING)
  (and (instance ?BUILDING SelfConnectedObject)
       (=> (instance ?ROOF Roof)
        (and (instance ?BUILDING Building) (top ?ROOF ?BUILDING))))))
*/
fof(a2643,axiom,! [ROOF] : (? [BUILDING] : ((s_instance(BUILDING, s_SelfConnectedObject) & (s_instance(ROOF, s_Roof) => (s_instance(BUILDING, s_Building) & s_top(ROOF, BUILDING))))))).

/*
(subclass Fireplace StationaryArtifact)
*/
fof(a2644,axiom,s_subclass(s_Fireplace, s_StationaryArtifact)).

/*
(instance Fireplace SetOrClass)
*/
fof(a2645,axiom,s_instance(s_Fireplace, s_SetOrClass)).

/*
(subclass Fireplace Device)
*/
fof(a2646,axiom,s_subclass(s_Fireplace, s_Device)).

/*
(forall (?F)
 (=> (instance ?F Fireplace)
  (hasPurpose ?F
   (exists (?C) (and (instance ?C Combustion) (eventLocated ?C ?F))))))
*/
%% no translation to TPTP available.

/*
(forall (?F)
 (exists (?C)
  (and (instance ?C Object)
       (=> (instance ?F Fireplace)
        (and (instance ?C Chimney) (connected ?F ?C))))))
*/
fof(a2647,axiom,! [F] : (? [C] : ((s_instance(C, s_Object) & (s_instance(F, s_Fireplace) => (s_instance(C, s_Chimney) & s_connected(F, C))))))).

/*
(forall (?F)
 (exists (?B)
  (and (instance ?B Object)
       (=> (instance ?F Fireplace)
        (and (instance ?B Building) (part ?F ?B))))))
*/
fof(a2648,axiom,! [F] : (? [B] : ((s_instance(B, s_Object) & (s_instance(F, s_Fireplace) => (s_instance(B, s_Building) & s_part(F, B))))))).

/*
(instance Balcony SetOrClass)
*/
fof(a2649,axiom,s_instance(s_Balcony, s_SetOrClass)).

/*
(subclass Balcony StationaryArtifact)
*/
fof(a2650,axiom,s_subclass(s_Balcony, s_StationaryArtifact)).

/*
(forall (?BALCONY)
 (exists (?WALL ?LANDAREA)
  (and (and (instance ?LANDAREA Object) (instance ?WALL Physical))
       (=> (instance ?BALCONY Balcony)
        (and (meetsSpatially ?WALL ?BALCONY)
             (and (instance ?LANDAREA LandArea)
                  (and (located ?WALL ?LANDAREA)
                       (orientation ?BALCONY ?LANDAREA Above))))))))
*/
fof(a2651,axiom,! [BALCONY] : (? [WALL,LANDAREA] : (((s_instance(LANDAREA, s_Object) & s_instance(WALL, s_Physical)) & (s_instance(BALCONY, s_Balcony) => (s_meetsSpatially(WALL, BALCONY) & (s_instance(LANDAREA, s_LandArea) & (s_located(WALL, LANDAREA) & s_orientation(BALCONY, LANDAREA, s_Above))))))))).

/*
(subclass BuildingLevel StationaryArtifact)
*/
fof(a2652,axiom,s_subclass(s_BuildingLevel, s_StationaryArtifact)).

/*
(forall (?LEVEL)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?LEVEL BuildingLevel)
        (and (instance ?BUILDING Building) (part ?LEVEL ?BUILDING))))))
*/
fof(a2653,axiom,! [LEVEL] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(LEVEL, s_BuildingLevel) => (s_instance(BUILDING, s_Building) & s_part(LEVEL, BUILDING))))))).

/*
(instance Basement SetOrClass)
*/
fof(a2654,axiom,s_instance(s_Basement, s_SetOrClass)).

/*
(instance BuildingLevel SetOrClass)
*/
fof(a2655,axiom,s_instance(s_BuildingLevel, s_SetOrClass)).

/*
(subclass Basement BuildingLevel)
*/
fof(a2656,axiom,s_subclass(s_Basement, s_BuildingLevel)).

/*
(forall (?BASEMENT)
 (forall (?LEVEL ?BUILDING)
  (=> (and (instance ?BUILDING Object) (instance ?LEVEL Object))
   (=> (instance ?BASEMENT Basement)
    (not (and (instance ?LEVEL BuildingLevel)
              (and (instance ?BUILDING Building)
                   (and (part ?LEVEL ?BUILDING)
                        (and (part ?BASEMENT ?BUILDING)
                             (and (not (equal ?LEVEL ?BASEMENT))
                                  (orientation
                                   ?LEVEL
                                   ?BASEMENT
                                   Below)))))))))))
*/
fof(a2657,axiom,! [BASEMENT] : (! [LEVEL,BUILDING] : (((s_instance(BUILDING, s_Object) & s_instance(LEVEL, s_Object)) => (s_instance(BASEMENT, s_Basement) => (~ (s_instance(LEVEL, s_BuildingLevel) & (s_instance(BUILDING, s_Building) & (s_part(LEVEL, BUILDING) & (s_part(BASEMENT, BUILDING) & ((~ (LEVEL = BASEMENT)) & s_orientation(LEVEL, BASEMENT, s_Below)))))))))))).

/*
(instance Elevator SetOrClass)
*/
fof(a2658,axiom,s_instance(s_Elevator, s_SetOrClass)).

/*
(subclass Elevator TransportationDevice)
*/
fof(a2659,axiom,s_subclass(s_Elevator, s_TransportationDevice)).

/*
(forall (?E)
 (=> (instance ?E Elevator)
  (hasPurpose ?E
   (exists (?T ?L1 ?L2 ?B)
    (and (instance ?T Transportation)
         (and (origin ?T ?L1)
              (and (instance ?L1 BuildingLevel)
                   (and (destination ?T ?L2)
                        (and (instance ?L2 BuildingLevel)
                             (and (not (equal ?L1 ?L2))
                                  (and
                                   (part ?L1 ?B)
                                   (and
                                    (part ?L2 ?B)
                                    (instance ?B Building)))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?E)
 (=> (instance ?E Elevator)
  (and (capability MotionUpward instrument ?E)
       (capability MotionDownward instrument ?E))))
*/
fof(a2660,axiom,! [E] : ((s_instance(E, s_Elevator) => (s_capability(s_MotionUpward, s_instrument_m, E) & s_capability(s_MotionDownward, s_instrument_m, E))))).

/*
(instance Pump SetOrClass)
*/
fof(a2661,axiom,s_instance(s_Pump, s_SetOrClass)).

/*
(subclass Pump TransportationDevice)
*/
fof(a2662,axiom,s_subclass(s_Pump, s_TransportationDevice)).

/*
(forall (?D ?T)
 (exists (?F)
  (and (instance ?F Object)
       (=>
        (and (instance ?T Transportation)
             (and (instrument ?T ?D) (instance ?D Pump)))
        (and (instrument ?T ?F) (attribute ?F Fluid))))))
*/
fof(a2663,axiom,! [D,T] : (? [F] : ((s_instance(F, s_Object) & ((s_instance(T, s_Transportation) & (s_instrument(T, D) & s_instance(D, s_Pump))) => (s_instrument(T, F) & s_attribute(F, s_Fluid))))))).

/*
(instance Oar SetOrClass)
*/
fof(a2664,axiom,s_instance(s_Oar, s_SetOrClass)).

/*
(subclass Oar TransportationDevice)
*/
fof(a2665,axiom,s_subclass(s_Oar, s_TransportationDevice)).

/*
(forall (?O)
 (=> (instance ?O Oar)
  (hasPurpose ?O
   (exists (?R) (and (instance ?R Rowing) (instrument ?R ?O))))))
*/
%% no translation to TPTP available.

/*
(instance Garage SetOrClass)
*/
fof(a2666,axiom,s_instance(s_Garage, s_SetOrClass)).

/*
(subclass Garage StationaryArtifact)
*/
fof(a2667,axiom,s_subclass(s_Garage, s_StationaryArtifact)).

/*
(forall (?Automobile ?GARAGE)
 (=> (instance ?Automobile Object)
  (=> (instance ?GARAGE Garage)
   (hasPurpose ?GARAGE
    (exists (?AUTO)
     (and (instance ?AUTO RoadVehicle)
          (contains ?GARAGE ?Automobile)))))))
*/
%% no translation to TPTP available.

/*
(forall (?GARAGE)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?GARAGE Garage)
        (and (instance ?BUILDING Building) (part ?GARAGE ?BUILDING))))))
*/
fof(a2668,axiom,! [GARAGE] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(GARAGE, s_Garage) => (s_instance(BUILDING, s_Building) & s_part(GARAGE, BUILDING))))))).

/*
(instance Bathroom SetOrClass)
*/
fof(a2669,axiom,s_instance(s_Bathroom, s_SetOrClass)).

/*
(subclass Bathroom Room)
*/
fof(a2670,axiom,s_subclass(s_Bathroom, s_Room)).

/*
(forall (?B)
 (exists (?W)
  (and (instance ?W Physical)
       (=> (instance ?B Bathroom)
        (and (instance ?W WashBasin) (located ?W ?B))))))
*/
fof(a2671,axiom,! [B] : (? [W] : ((s_instance(W, s_Physical) & (s_instance(B, s_Bathroom) => (s_instance(W, s_WashBasin) & s_located(W, B))))))).

/*
(instance Closet SetOrClass)
*/
fof(a2672,axiom,s_instance(s_Closet, s_SetOrClass)).

/*
(subclass Closet Room)
*/
fof(a2673,axiom,s_subclass(s_Closet, s_Room)).

/*
(forall (?R)
 (=> (instance ?R Closet)
  (hasPurpose ?R
   (exists (?K ?O)
    (and (instance ?K Keeping)
         (and (patient ?K ?O) (located ?O ?R)))))))
*/
%% no translation to TPTP available.

/*
(instance DressingRoom SetOrClass)
*/
fof(a2674,axiom,s_instance(s_DressingRoom, s_SetOrClass)).

/*
(subclass DressingRoom Room)
*/
fof(a2675,axiom,s_subclass(s_DressingRoom, s_Room)).

/*
(forall (?R)
 (=> (instance ?R DressingRoom)
  (hasPurpose ?R
   (exists (?C)
    (and (instance ?C ChangingClothing) (eventLocated ?C ?R))))))
*/
%% no translation to TPTP available.

/*
(instance SittingArea SetOrClass)
*/
fof(a2676,axiom,s_instance(s_SittingArea, s_SetOrClass)).

/*
(subclass SittingArea Region)
*/
fof(a2677,axiom,s_subclass(s_SittingArea, s_Region)).

/*
(forall (?AREA)
 (exists (?SEAT)
  (and (instance ?SEAT Physical)
       (=> (instance ?AREA SittingArea)
        (and (instance ?SEAT Seat) (located ?SEAT ?AREA))))))
*/
fof(a2678,axiom,! [AREA] : (? [SEAT] : ((s_instance(SEAT, s_Physical) & (s_instance(AREA, s_SittingArea) => (s_instance(SEAT, s_Seat) & s_located(SEAT, AREA))))))).

/*
(subclass KitchenArea Region)
*/
fof(a2679,axiom,s_subclass(s_KitchenArea, s_Region)).

/*
(forall (?K)
 (=> (instance ?K KitchenArea)
  (hasPurpose ?K
   (exists (?C) (and (instance ?C Cooking) (eventLocated ?C ?K))))))
*/
%% no translation to TPTP available.

/*
(subclass Kitchen Room)
*/
fof(a2680,axiom,s_subclass(s_Kitchen, s_Room)).

/*
(instance Kitchen SetOrClass)
*/
fof(a2681,axiom,s_instance(s_Kitchen, s_SetOrClass)).

/*
(instance KitchenArea SetOrClass)
*/
fof(a2682,axiom,s_instance(s_KitchenArea, s_SetOrClass)).

/*
(subclass Kitchen KitchenArea)
*/
fof(a2683,axiom,s_subclass(s_Kitchen, s_KitchenArea)).

/*
(forall (?ROOM)
 (=> (instance ?ROOM Kitchen)
  (hasPurpose ?ROOM
   (exists (?COOK)
    (and (instance ?COOK Cooking) (located ?COOK ?ROOM))))))
*/
%% no translation to TPTP available.

/*
(subclass DiningArea Region)
*/
fof(a2684,axiom,s_subclass(s_DiningArea, s_Region)).

/*
(forall (?D)
 (=> (instance ?D DiningArea)
  (hasPurpose ?D
   (exists (?E) (and (instance ?E Eating) (eventLocated ?E ?D))))))
*/
%% no translation to TPTP available.

/*
(subclass DiningRoom Room)
*/
fof(a2685,axiom,s_subclass(s_DiningRoom, s_Room)).

/*
(instance DiningRoom SetOrClass)
*/
fof(a2686,axiom,s_instance(s_DiningRoom, s_SetOrClass)).

/*
(instance DiningArea SetOrClass)
*/
fof(a2687,axiom,s_instance(s_DiningArea, s_SetOrClass)).

/*
(subclass DiningRoom DiningArea)
*/
fof(a2688,axiom,s_subclass(s_DiningRoom, s_DiningArea)).

/*
(instance Bedroom SetOrClass)
*/
fof(a2689,axiom,s_instance(s_Bedroom, s_SetOrClass)).

/*
(subclass Bedroom Room)
*/
fof(a2690,axiom,s_subclass(s_Bedroom, s_Room)).

/*
(forall (?ROOM)
 (exists (?BED)
  (and (instance ?BED Physical)
       (=> (instance ?ROOM Bedroom)
        (and (instance ?BED Bed) (located ?BED ?ROOM))))))
*/
fof(a2691,axiom,! [ROOM] : (? [BED] : ((s_instance(BED, s_Physical) & (s_instance(ROOM, s_Bedroom) => (s_instance(BED, s_Bed) & s_located(BED, ROOM))))))).

/*
(instance Classroom SetOrClass)
*/
fof(a2692,axiom,s_instance(s_Classroom, s_SetOrClass)).

/*
(subclass Classroom Room)
*/
fof(a2693,axiom,s_subclass(s_Classroom, s_Room)).

/*
(forall (?R)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?R Classroom)
        (and (instance ?S School) (part ?R ?S))))))
*/
fof(a2694,axiom,! [R] : (? [S] : ((s_instance(S, s_Object) & (s_instance(R, s_Classroom) => (s_instance(S, s_School) & s_part(R, S))))))).

/*
(forall (?R)
 (=> (instance ?R Classroom)
  (hasPurpose ?R
   (exists (?E)
    (and (instance ?E EducationalProcess) (eventLocated ?E ?R))))))
*/
%% no translation to TPTP available.

/*
(instance Porch SetOrClass)
*/
fof(a2695,axiom,s_instance(s_Porch, s_SetOrClass)).

/*
(subclass Porch StationaryArtifact)
*/
fof(a2696,axiom,s_subclass(s_Porch, s_StationaryArtifact)).

/*
(forall (?PORCH)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?PORCH Porch)
        (and (instance ?BUILDING Building)
             (connected ?PORCH ?BUILDING))))))
*/
fof(a2697,axiom,! [PORCH] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(PORCH, s_Porch) => (s_instance(BUILDING, s_Building) & s_connected(PORCH, BUILDING))))))).

/*
(instance Sidewalk SetOrClass)
*/
fof(a2698,axiom,s_instance(s_Sidewalk, s_SetOrClass)).

/*
(subclass Sidewalk StationaryArtifact)
*/
fof(a2699,axiom,s_subclass(s_Sidewalk, s_StationaryArtifact)).

/*
(forall (?SIDE)
 (=> (instance ?SIDE Sidewalk)
  (hasPurpose ?SIDE
   (exists (?WALK) (and (instance ?WALK Walking) (path ?WALK ?SIDE))))))
*/
%% no translation to TPTP available.

/*
(forall (?SIDE)
 (exists (?ROAD)
  (and (instance ?ROAD Object)
       (=> (instance ?SIDE Sidewalk)
        (and (instance ?ROAD Roadway)
             (orientation ?SIDE ?ROAD Near))))))
*/
fof(a2700,axiom,! [SIDE] : (? [ROAD] : ((s_instance(ROAD, s_Object) & (s_instance(SIDE, s_Sidewalk) => (s_instance(ROAD, s_Roadway) & s_orientation(SIDE, ROAD, s_Near))))))).

/*
(instance Fence SetOrClass)
*/
fof(a2701,axiom,s_instance(s_Fence, s_SetOrClass)).

/*
(subclass Fence StationaryArtifact)
*/
fof(a2702,axiom,s_subclass(s_Fence, s_StationaryArtifact)).

/*
(instance SportsGround SetOrClass)
*/
fof(a2703,axiom,s_instance(s_SportsGround, s_SetOrClass)).

/*
(subclass SportsGround StationaryArtifact)
*/
fof(a2704,axiom,s_subclass(s_SportsGround, s_StationaryArtifact)).

/*
(forall (?GROUND)
 (=> (instance ?GROUND SportsGround)
  (hasPurpose ?GROUND
   (exists (?SPORT)
    (and (instance ?SPORT Sport) (eventLocated ?SPORT ?GROUND))))))
*/
%% no translation to TPTP available.

/*
(instance IndustrialPlant SetOrClass)
*/
fof(a2705,axiom,s_instance(s_IndustrialPlant, s_SetOrClass)).

/*
(subclass IndustrialPlant StationaryArtifact)
*/
fof(a2706,axiom,s_subclass(s_IndustrialPlant, s_StationaryArtifact)).

/*
(forall (?PLANT)
 (exists (?BUILDING)
  (and (instance ?BUILDING Physical)
       (=> (instance ?PLANT IndustrialPlant)
        (or (instance ?PLANT Building)
            (and (instance ?BUILDING Building)
                 (located ?BUILDING ?PLANT)))))))
*/
fof(a2707,axiom,! [PLANT] : (? [BUILDING] : ((s_instance(BUILDING, s_Physical) & (s_instance(PLANT, s_IndustrialPlant) => (s_instance(PLANT, s_Building) | (s_instance(BUILDING, s_Building) & s_located(BUILDING, PLANT)))))))).

/*
(forall (?PLANT)
 (=> (instance ?PLANT IndustrialPlant)
  (hasPurpose ?PLANT
   (exists (?MANUFACTURE)
    (and (instance ?MANUFACTURE Manufacture)
         (eventLocated ?MANUFACTURE ?PLANT))))))
*/
%% no translation to TPTP available.

/*
(instance Laboratory SetOrClass)
*/
fof(a2708,axiom,s_instance(s_Laboratory, s_SetOrClass)).

/*
(subclass Laboratory StationaryArtifact)
*/
fof(a2709,axiom,s_subclass(s_Laboratory, s_StationaryArtifact)).

/*
(forall (?LAB)
 (exists (?EXPERIMENT)
  (and (instance ?EXPERIMENT Process)
       (=> (instance ?LAB Laboratory)
        (and (instance ?EXPERIMENT Experimenting)
             (eventLocated ?EXPERIMENT ?LAB))))))
*/
fof(a2710,axiom,! [LAB] : (? [EXPERIMENT] : ((s_instance(EXPERIMENT, s_Process) & (s_instance(LAB, s_Laboratory) => (s_instance(EXPERIMENT, s_Experimenting) & s_eventLocated(EXPERIMENT, LAB))))))).

/*
(instance experimentalControl CaseRole)
*/
fof(a2711,axiom,s_instance(s_experimentalControl_m, s_CaseRole)).

/*
(subrelation experimentalControl patient)
*/
fof(a2712,axiom,s_subrelation(s_experimentalControl_m, s_patient_m)).

/*
(subclass MilitaryInstallation StationaryArtifact)
*/
fof(a2713,axiom,s_subclass(s_MilitaryInstallation, s_StationaryArtifact)).

/*
(subclass MilitaryInstallation MilitaryArtifact)
*/
fof(a2714,axiom,s_subclass(s_MilitaryInstallation, s_MilitaryArtifact)).

/*
(instance Farm SetOrClass)
*/
fof(a2715,axiom,s_instance(s_Farm, s_SetOrClass)).

/*
(subclass Farm StationaryArtifact)
*/
fof(a2716,axiom,s_subclass(s_Farm, s_StationaryArtifact)).

/*
(instance Barn SetOrClass)
*/
fof(a2717,axiom,s_instance(s_Barn, s_SetOrClass)).

/*
(subclass Barn Building)
*/
fof(a2718,axiom,s_subclass(s_Barn, s_Building)).

/*
(disjoint Barn ResidentialBuilding)
*/
fof(a2719,axiom,s_disjoint(s_Barn, s_ResidentialBuilding)).

/*
(forall (?BARN)
 (exists (?FARM)
  (and (instance ?FARM Object)
       (=> (instance ?BARN Barn)
        (and (instance ?FARM Farm) (located ?BARN ?FARM))))))
*/
fof(a2720,axiom,! [BARN] : (? [FARM] : ((s_instance(FARM, s_Object) & (s_instance(BARN, s_Barn) => (s_instance(FARM, s_Farm) & s_located(BARN, FARM))))))).

/*
(instance PerformanceStage SetOrClass)
*/
fof(a2721,axiom,s_instance(s_PerformanceStage, s_SetOrClass)).

/*
(subclass PerformanceStage StationaryArtifact)
*/
fof(a2722,axiom,s_subclass(s_PerformanceStage, s_StationaryArtifact)).

/*
(forall (?STAGE)
 (=> (instance ?STAGE PerformanceStage)
  (hasPurpose ?STAGE
   (exists (?PERF)
    (and (instance ?PERF Demonstrating) (eventLocated ?PERF ?STAGE))))))
*/
%% no translation to TPTP available.

/*
(forall (?STAGE)
 (exists (?AUDITORIUM)
  (and (instance ?AUDITORIUM Object)
       (=> (instance ?STAGE PerformanceStage)
        (and (instance ?AUDITORIUM Auditorium)
             (part ?STAGE ?AUDITORIUM))))))
*/
fof(a2723,axiom,! [STAGE] : (? [AUDITORIUM] : ((s_instance(AUDITORIUM, s_Object) & (s_instance(STAGE, s_PerformanceStage) => (s_instance(AUDITORIUM, s_Auditorium) & s_part(STAGE, AUDITORIUM))))))).

/*
(instance PerformanceStageWing SetOrClass)
*/
fof(a2724,axiom,s_instance(s_PerformanceStageWing, s_SetOrClass)).

/*
(subclass PerformanceStageWing StationaryArtifact)
*/
fof(a2725,axiom,s_subclass(s_PerformanceStageWing, s_StationaryArtifact)).

/*
(forall (?W)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?W PerformanceStageWing)
        (and (instance ?S PerformanceStage) (part ?W ?S))))))
*/
fof(a2726,axiom,! [W] : (? [S] : ((s_instance(S, s_Object) & (s_instance(W, s_PerformanceStageWing) => (s_instance(S, s_PerformanceStage) & s_part(W, S))))))).

/*
(instance Magnetism SetOrClass)
*/
fof(a2727,axiom,s_instance(s_Magnetism, s_SetOrClass)).

/*
(subclass Magnetism RadiatingElectromagnetic)
*/
fof(a2728,axiom,s_subclass(s_Magnetism, s_RadiatingElectromagnetic)).

/*
(subclass RadioEmission RadiatingElectromagnetic)
*/
fof(a2729,axiom,s_subclass(s_RadioEmission, s_RadiatingElectromagnetic)).

/*
(subclass Broadcasting Disseminating)
*/
fof(a2730,axiom,s_subclass(s_Broadcasting, s_Disseminating)).

/*
(instance RadioEmission SetOrClass)
*/
fof(a2731,axiom,s_instance(s_RadioEmission, s_SetOrClass)).

/*
(subclass Broadcasting RadioEmission)
*/
fof(a2732,axiom,s_subclass(s_Broadcasting, s_RadioEmission)).

/*
(forall (?BROADCAST)
 (exists (?DEVICE)
  (and (instance ?DEVICE Object)
       (=> (instance ?BROADCAST Broadcasting)
        (and (instance ?DEVICE CommunicationDevice)
             (instrument ?BROADCAST ?DEVICE))))))
*/
fof(a2733,axiom,! [BROADCAST] : (? [DEVICE] : ((s_instance(DEVICE, s_Object) & (s_instance(BROADCAST, s_Broadcasting) => (s_instance(DEVICE, s_CommunicationDevice) & s_instrument(BROADCAST, DEVICE))))))).

/*
(instance RadioBroadcasting SetOrClass)
*/
fof(a2734,axiom,s_instance(s_RadioBroadcasting, s_SetOrClass)).

/*
(subclass RadioBroadcasting Broadcasting)
*/
fof(a2735,axiom,s_subclass(s_RadioBroadcasting, s_Broadcasting)).

/*
(forall (?RADIO)
 (=> (instance ?RADIO RadioReceiver)
  (capability RadioBroadcasting patient ?RADIO)))
*/
fof(a2736,axiom,! [RADIO] : ((s_instance(RADIO, s_RadioReceiver) => s_capability(s_RadioBroadcasting, s_patient_m, RADIO)))).

/*
(instance TelevisionBroadcasting SetOrClass)
*/
fof(a2737,axiom,s_instance(s_TelevisionBroadcasting, s_SetOrClass)).

/*
(instance Broadcasting SetOrClass)
*/
fof(a2738,axiom,s_instance(s_Broadcasting, s_SetOrClass)).

/*
(subclass TelevisionBroadcasting Broadcasting)
*/
fof(a2739,axiom,s_subclass(s_TelevisionBroadcasting, s_Broadcasting)).

/*
(instance PeriodicalPublisher SetOrClass)
*/
fof(a2740,axiom,s_instance(s_PeriodicalPublisher, s_SetOrClass)).

/*
(instance Publisher SetOrClass)
*/
fof(a2741,axiom,s_instance(s_Publisher, s_SetOrClass)).

/*
(subclass PeriodicalPublisher Publisher)
*/
fof(a2742,axiom,s_subclass(s_PeriodicalPublisher, s_Publisher)).

/*
(forall (?C)
 (exists (?PUBLISH ?PERIODICAL)
  (and (and (instance ?PERIODICAL Entity) (instance ?PUBLISH Process))
       (=> (instance ?C PeriodicalPublisher)
        (and (instance ?PUBLISH Publication)
             (and (agent ?PUBLISH ?C)
                  (and (patient ?PUBLISH ?PERIODICAL)
                       (instance ?PERIODICAL Periodical))))))))
*/
fof(a2743,axiom,! [C] : (? [PUBLISH,PERIODICAL] : (((s_instance(PERIODICAL, s_Entity) & s_instance(PUBLISH, s_Process)) & (s_instance(C, s_PeriodicalPublisher) => (s_instance(PUBLISH, s_Publication) & (s_agent(PUBLISH, C) & (s_patient(PUBLISH, PERIODICAL) & s_instance(PERIODICAL, s_Periodical))))))))).

/*
(instance Antenna SetOrClass)
*/
fof(a2744,axiom,s_instance(s_Antenna, s_SetOrClass)).

/*
(subclass Antenna CommunicationDevice)
*/
fof(a2745,axiom,s_subclass(s_Antenna, s_CommunicationDevice)).

/*
(forall (?ANTENNA)
 (=> (instance ?ANTENNA Antenna)
  (capability RadioEmission instrument ?ANTENNA)))
*/
fof(a2746,axiom,! [ANTENNA] : ((s_instance(ANTENNA, s_Antenna) => s_capability(s_RadioEmission, s_instrument_m, ANTENNA)))).

/*
(instance Explosion SetOrClass)
*/
fof(a2747,axiom,s_instance(s_Explosion, s_SetOrClass)).

/*
(subclass Explosion Radiating)
*/
fof(a2748,axiom,s_subclass(s_Explosion, s_Radiating)).

/*
(forall (?EXPLOSION)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?EXPLOSION Explosion)
        (and (instance ?PROC ChemicalProcess)
             (causes ?PROC ?EXPLOSION))))))
*/
fof(a2749,axiom,! [EXPLOSION] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(EXPLOSION, s_Explosion) => (s_instance(PROC, s_ChemicalProcess) & s_causes(PROC, EXPLOSION))))))).

/*
(forall (?EXPLOSION)
 (=> (instance ?EXPLOSION Explosion)
  (capability Damaging instrument ?EXPLOSION)))
*/
fof(a2750,axiom,! [EXPLOSION] : ((s_instance(EXPLOSION, s_Explosion) => s_capability(s_Damaging, s_instrument_m, EXPLOSION)))).

/*
(subclass Performance Demonstrating)
*/
fof(a2751,axiom,s_subclass(s_Performance, s_Demonstrating)).

/*
(forall (?PERFORMANCE)
 (exists (?SUB)
  (and (instance ?SUB Process)
       (=> (instance ?PERFORMANCE Performance)
        (and (subProcess ?SUB ?PERFORMANCE)
             (or (instance ?SUB DramaticActing)
                 (instance ?SUB MakingMusic)))))))
*/
fof(a2752,axiom,! [PERFORMANCE] : (? [SUB] : ((s_instance(SUB, s_Process) & (s_instance(PERFORMANCE, s_Performance) => (s_subProcess(SUB, PERFORMANCE) & (s_instance(SUB, s_DramaticActing) | s_instance(SUB, s_MakingMusic)))))))).

/*
(forall (?PERFORMANCE)
 (exists (?STAGE)
  (and (instance ?STAGE Object)
       (=> (instance ?PERFORMANCE Performance)
        (and (instance ?STAGE PerformanceStage)
             (eventLocated ?PERFORMANCE ?STAGE))))))
*/
fof(a2753,axiom,! [PERFORMANCE] : (? [STAGE] : ((s_instance(STAGE, s_Object) & (s_instance(PERFORMANCE, s_Performance) => (s_instance(STAGE, s_PerformanceStage) & s_eventLocated(PERFORMANCE, STAGE))))))).

/*
(instance PerformanceAct SetOrClass)
*/
fof(a2754,axiom,s_instance(s_PerformanceAct, s_SetOrClass)).

/*
(subclass PerformanceAct Performance)
*/
fof(a2755,axiom,s_subclass(s_PerformanceAct, s_Performance)).

/*
(subclass Lecture Demonstrating)
*/
fof(a2756,axiom,s_subclass(s_Lecture, s_Demonstrating)).

/*
(subclass Lecture Speaking)
*/
fof(a2757,axiom,s_subclass(s_Lecture, s_Speaking)).

/*
(subclass Proclaiming Lecture)
*/
fof(a2758,axiom,s_subclass(s_Proclaiming, s_Lecture)).

/*
(instance Proclaiming SetOrClass)
*/
fof(a2759,axiom,s_instance(s_Proclaiming, s_SetOrClass)).

/*
(subclass Proclaiming Declaring)
*/
fof(a2760,axiom,s_subclass(s_Proclaiming, s_Declaring)).

/*
(instance Commenting SetOrClass)
*/
fof(a2761,axiom,s_instance(s_Commenting, s_SetOrClass)).

/*
(subclass Commenting IntentionalProcess)
*/
fof(a2762,axiom,s_subclass(s_Commenting, s_IntentionalProcess)).

/*
(forall (?PROCESS ?COMMENTING)
 (exists (?AGENT ?SPEAKING ?LOOKING)
  (and (and (instance ?LOOKING Process) (instance ?SPEAKING Process)
            (instance ?AGENT Agent))
       (=>
        (and (instance ?COMMENTING Commenting)
             (and (instance ?PROCESS Process)
                  (patient ?COMMENTING ?PROCESS)))
        (and (instance ?AGENT Agent)
             (and (instance ?SPEAKING Speaking)
                  (and (instance ?LOOKING Looking)
                       (and (agent ?SPEAKING ?AGENT)
                            (and (agent ?LOOKING ?AGENT)
                                 (and
                                  (patient ?LOOKING ?PROCESS)
                                  (refers ?SPEAKING ?PROCESS)))))))))))
*/
fof(a2763,axiom,! [PROCESS,COMMENTING] : (? [AGENT,SPEAKING,LOOKING] : (((s_instance(LOOKING, s_Process) & s_instance(SPEAKING, s_Process) & s_instance(AGENT, s_Agent)) & ((s_instance(COMMENTING, s_Commenting) & (s_instance(PROCESS, s_Process) & s_patient(COMMENTING, PROCESS))) => (s_instance(AGENT, s_Agent) & (s_instance(SPEAKING, s_Speaking) & (s_instance(LOOKING, s_Looking) & (s_agent(SPEAKING, AGENT) & (s_agent(LOOKING, AGENT) & (s_patient(LOOKING, PROCESS) & s_refers(SPEAKING, PROCESS)))))))))))).

/*
(instance commentator BinaryPredicate)
*/
fof(a2764,axiom,s_instance(s_commentator_m, s_BinaryPredicate)).

/*
(forall (?PROCESS ?AGENT)
 (exists (?COMMENTING)
  (and (instance ?COMMENTING Process)
       (=> (and (instance ?AGENT Agent) (instance ?PROCESS Process))
        (=> (commentator ?AGENT ?PROCESS)
         (and (instance ?COMMENTING Commenting)
              (and (agent ?COMMENTING ?AGENT)
                   (patient ?COMMENTING ?PROCESS))))))))
*/
fof(a2765,axiom,! [PROCESS,AGENT] : (? [COMMENTING] : ((s_instance(COMMENTING, s_Process) & ((s_instance(AGENT, s_Agent) & s_instance(PROCESS, s_Process)) => (s_commentator(AGENT, PROCESS) => (s_instance(COMMENTING, s_Commenting) & (s_agent(COMMENTING, AGENT) & s_patient(COMMENTING, PROCESS))))))))).

/*
(instance Reciting SetOrClass)
*/
fof(a2766,axiom,s_instance(s_Reciting, s_SetOrClass)).

/*
(instance Speaking SetOrClass)
*/
fof(a2767,axiom,s_instance(s_Speaking, s_SetOrClass)).

/*
(subclass Reciting Speaking)
*/
fof(a2768,axiom,s_subclass(s_Reciting, s_Speaking)).

/*
(forall (?R)
 (exists (?P ?T)
  (and (and (instance ?T ContentBearingPhysical)
            (instance ?P Proposition))
       (=> (instance ?R Reciting)
        (and (realization ?R ?P)
             (and (containsInformation ?T ?P) (instance ?T Text)))))))
*/
fof(a2769,axiom,! [R] : (? [P,T] : (((s_instance(T, s_ContentBearingPhysical) & s_instance(P, s_Proposition)) & (s_instance(R, s_Reciting) => (s_realization(R, P) & (s_containsInformation(T, P) & s_instance(T, s_Text)))))))).

/*
(instance MusicalPerformance SetOrClass)
*/
fof(a2770,axiom,s_instance(s_MusicalPerformance, s_SetOrClass)).

/*
(subclass MusicalPerformance Performance)
*/
fof(a2771,axiom,s_subclass(s_MusicalPerformance, s_Performance)).

/*
(forall (?P ?M)
 (=> (instance ?M Process)
  (=> (and (instance ?P MusicalPerformance) (subProcess ?M ?P))
   (instance ?M MakingMusic))))
*/
fof(a2772,axiom,! [P,M] : ((s_instance(M, s_Process) => ((s_instance(P, s_MusicalPerformance) & s_subProcess(M, P)) => s_instance(M, s_MakingMusic))))).

/*
(instance Sermon SetOrClass)
*/
fof(a2773,axiom,s_instance(s_Sermon, s_SetOrClass)).

/*
(instance Lecture SetOrClass)
*/
fof(a2774,axiom,s_instance(s_Lecture, s_SetOrClass)).

/*
(subclass Sermon Lecture)
*/
fof(a2775,axiom,s_subclass(s_Sermon, s_Lecture)).

/*
(forall (?SERMON)
 (exists (?SERVICE)
  (and (instance ?SERVICE Process)
       (=> (instance ?SERMON Sermon)
        (and (instance ?SERVICE ReligiousService)
             (subProcess ?SERMON ?SERVICE))))))
*/
fof(a2776,axiom,! [SERMON] : (? [SERVICE] : ((s_instance(SERVICE, s_Process) & (s_instance(SERMON, s_Sermon) => (s_instance(SERVICE, s_ReligiousService) & s_subProcess(SERMON, SERVICE))))))).

/*
(instance DramaticActing SetOrClass)
*/
fof(a2777,axiom,s_instance(s_DramaticActing, s_SetOrClass)).

/*
(subclass DramaticActing Pretending)
*/
fof(a2778,axiom,s_subclass(s_DramaticActing, s_Pretending)).

/*
(instance DramaticPerformance SetOrClass)
*/
fof(a2779,axiom,s_instance(s_DramaticPerformance, s_SetOrClass)).

/*
(instance Performance SetOrClass)
*/
fof(a2780,axiom,s_instance(s_Performance, s_SetOrClass)).

/*
(subclass DramaticPerformance Performance)
*/
fof(a2781,axiom,s_subclass(s_DramaticPerformance, s_Performance)).

/*
(forall (?P ?A)
 (=> (instance ?A Process)
  (=> (and (instance ?P DramaticPerformance) (subProcess ?A ?P))
   (instance ?A DramaticActing))))
*/
fof(a2782,axiom,! [P,A] : ((s_instance(A, s_Process) => ((s_instance(P, s_DramaticPerformance) & s_subProcess(A, P)) => s_instance(A, s_DramaticActing))))).

/*
(instance DramaticCast SetOrClass)
*/
fof(a2783,axiom,s_instance(s_DramaticCast, s_SetOrClass)).

/*
(subclass DramaticCast GroupOfPeople)
*/
fof(a2784,axiom,s_subclass(s_DramaticCast, s_GroupOfPeople)).

/*
(forall (?CAST)
 (exists (?TEXT ?PROP ?PROC)
  (forall (?MEMBER)
   (exists (?SUB)
    (and (instance ?SUB Process)
         (=> (instance ?MEMBER Agent)
          (and (and (instance ?PROC Process)
                    (instance ?PROP Proposition)
                    (instance ?TEXT ContentBearingPhysical))
               (=> (instance ?CAST DramaticCast)
                (and (instance ?TEXT FictionalText)
                     (and (containsInformation ?TEXT ?PROP)
                          (and (realization ?PROC ?PROP)
                               (=>
                                (member ?MEMBER ?CAST)
                                (and
                                 (instance ?SUB DramaticActing)
                                 (and
                                  (agent ?SUB ?MEMBER)
                                  (subProcess ?SUB ?PROC)))))))))))))))
*/
fof(a2785,axiom,! [CAST] : (? [TEXT,PROP,PROC] : (! [MEMBER] : (? [SUB] : ((s_instance(SUB, s_Process) & (s_instance(MEMBER, s_Agent) => ((s_instance(PROC, s_Process) & s_instance(PROP, s_Proposition) & s_instance(TEXT, s_ContentBearingPhysical)) & (s_instance(CAST, s_DramaticCast) => (s_instance(TEXT, s_FictionalText) & (s_containsInformation(TEXT, PROP) & (s_realization(PROC, PROP) & (s_member(MEMBER, CAST) => (s_instance(SUB, s_DramaticActing) & (s_agent(SUB, MEMBER) & s_subProcess(SUB, PROC)))))))))))))))).

/*
(subclass SocialParty Meeting)
*/
fof(a2786,axiom,s_subclass(s_SocialParty, s_Meeting)).

/*
(instance SocialParty SetOrClass)
*/
fof(a2787,axiom,s_instance(s_SocialParty, s_SetOrClass)).

/*
(subclass SocialParty RecreationOrExercise)
*/
fof(a2788,axiom,s_subclass(s_SocialParty, s_RecreationOrExercise)).

/*
(subclass FormalMeeting Meeting)
*/
fof(a2789,axiom,s_subclass(s_FormalMeeting, s_Meeting)).

/*
(disjoint FormalMeeting SocialParty)
*/
fof(a2790,axiom,s_disjoint(s_FormalMeeting, s_SocialParty)).

/*
(forall (?MEETING)
 (exists (?PLANNING)
  (and (instance ?PLANNING Process)
       (=> (instance ?MEETING FormalMeeting)
        (and (instance ?PLANNING Planning)
             (and (result ?PLANNING ?MEETING)
                  (earlier (WhenFn ?PLANNING) (WhenFn ?MEETING))))))))
*/
fof(a2791,axiom,! [MEETING] : (? [PLANNING] : ((s_instance(PLANNING, s_Process) & (s_instance(MEETING, s_FormalMeeting) => (s_instance(PLANNING, s_Planning) & (s_result(PLANNING, MEETING) & s_earlier(s_WhenFn(PLANNING), s_WhenFn(MEETING))))))))).

/*
(instance Ceremony SetOrClass)
*/
fof(a2792,axiom,s_instance(s_Ceremony, s_SetOrClass)).

/*
(subclass Funeral Ceremony)
*/
fof(a2793,axiom,s_subclass(s_Funeral, s_Ceremony)).

/*
(subclass Funeral FormalMeeting)
*/
fof(a2794,axiom,s_subclass(s_Funeral, s_FormalMeeting)).

/*
(forall (?F)
 (exists (?D)
  (and (instance ?D Entity)
       (=> (instance ?F Funeral)
        (and (instance ?D Death) (refers ?F ?D))))))
*/
fof(a2795,axiom,! [F] : (? [D] : ((s_instance(D, s_Entity) & (s_instance(F, s_Funeral) => (s_instance(D, s_Death) & s_refers(F, D))))))).

/*
(subclass Burial Funeral)
*/
fof(a2796,axiom,s_subclass(s_Burial, s_Funeral)).

/*
(forall (?BURIAL)
 (exists (?SP)
  (and (instance ?SP Process)
       (=> (instance ?BURIAL Burial)
        (and (instance ?SP Burying) (subProcess ?SP ?BURIAL))))))
*/
fof(a2797,axiom,! [BURIAL] : (? [SP] : ((s_instance(SP, s_Process) & (s_instance(BURIAL, s_Burial) => (s_instance(SP, s_Burying) & s_subProcess(SP, BURIAL))))))).

/*
(instance Funeral SetOrClass)
*/
fof(a2798,axiom,s_instance(s_Funeral, s_SetOrClass)).

/*
(subclass ReligiousFuneral Funeral)
*/
fof(a2799,axiom,s_subclass(s_ReligiousFuneral, s_Funeral)).

/*
(subclass ReligiousFuneral ReligiousProcess)
*/
fof(a2800,axiom,s_subclass(s_ReligiousFuneral, s_ReligiousProcess)).

/*
(forall (?RF)
 (exists (?S)
  (and (instance ?S Process)
       (=> (instance ?RF ReligiousFuneral)
        (and (instance ?S ReligiousService) (subProcess ?S ?RF))))))
*/
fof(a2801,axiom,! [RF] : (? [S] : ((s_instance(S, s_Process) & (s_instance(RF, s_ReligiousFuneral) => (s_instance(S, s_ReligiousService) & s_subProcess(S, RF))))))).

/*
(instance ReligiousFuneral SetOrClass)
*/
fof(a2802,axiom,s_instance(s_ReligiousFuneral, s_SetOrClass)).

/*
(subclass ReligiousBurial ReligiousFuneral)
*/
fof(a2803,axiom,s_subclass(s_ReligiousBurial, s_ReligiousFuneral)).

/*
(instance ReligiousBurial SetOrClass)
*/
fof(a2804,axiom,s_instance(s_ReligiousBurial, s_SetOrClass)).

/*
(instance Burial SetOrClass)
*/
fof(a2805,axiom,s_instance(s_Burial, s_SetOrClass)).

/*
(subclass ReligiousBurial Burial)
*/
fof(a2806,axiom,s_subclass(s_ReligiousBurial, s_Burial)).

/*
(instance Interviewing SetOrClass)
*/
fof(a2807,axiom,s_instance(s_Interviewing, s_SetOrClass)).

/*
(instance FormalMeeting SetOrClass)
*/
fof(a2808,axiom,s_instance(s_FormalMeeting, s_SetOrClass)).

/*
(subclass Interviewing FormalMeeting)
*/
fof(a2809,axiom,s_subclass(s_Interviewing, s_FormalMeeting)).

/*
(instance Choreographing SetOrClass)
*/
fof(a2810,axiom,s_instance(s_Choreographing, s_SetOrClass)).

/*
(subclass Choreographing Planning)
*/
fof(a2811,axiom,s_subclass(s_Choreographing, s_Planning)).

/*
(forall (?D ?P ?G)
 (=> (and (instance ?D Process) (instance ?P Proposition))
  (=>
   (and (instance ?G Choreographing)
        (and (result ?G ?P) (realization ?D ?P)))
   (instance ?D Dancing))))
*/
fof(a2812,axiom,! [D,P,G] : (((s_instance(D, s_Process) & s_instance(P, s_Proposition)) => ((s_instance(G, s_Choreographing) & (s_result(G, P) & s_realization(D, P))) => s_instance(D, s_Dancing))))).

/*
(instance Resolution SetOrClass)
*/
fof(a2813,axiom,s_instance(s_Resolution, s_SetOrClass)).

/*
(subclass Resolution Deciding)
*/
fof(a2814,axiom,s_subclass(s_Resolution, s_Deciding)).

/*
(forall (?RESOLUTION)
 (exists (?AGENT ?MEETING)
  (and (and (instance ?MEETING Process) (instance ?AGENT Agent))
       (=> (instance ?RESOLUTION Resolution)
        (and (instance ?AGENT Organization)
             (and (agent ?RESOLUTION ?AGENT)
                  (and (subProcess ?RESOLUTION ?MEETING)
                       (instance ?MEETING FormalMeeting))))))))
*/
fof(a2815,axiom,! [RESOLUTION] : (? [AGENT,MEETING] : (((s_instance(MEETING, s_Process) & s_instance(AGENT, s_Agent)) & (s_instance(RESOLUTION, s_Resolution) => (s_instance(AGENT, s_Organization) & (s_agent(RESOLUTION, AGENT) & (s_subProcess(RESOLUTION, MEETING) & s_instance(MEETING, s_FormalMeeting))))))))).

/*
(instance Smoking SetOrClass)
*/
fof(a2816,axiom,s_instance(s_Smoking, s_SetOrClass)).

/*
(subclass Smoking RecreationOrExercise)
*/
fof(a2817,axiom,s_subclass(s_Smoking, s_RecreationOrExercise)).

/*
(forall (?SMOKING)
 (exists (?BURN ?CIGAR ?BREATHE ?SMOKE)
  (and (and (instance ?SMOKE Entity) (instance ?BREATHE Process)
            (instance ?CIGAR Object) (instance ?BURN Process))
       (=> (instance ?SMOKING Smoking)
        (and (subProcess ?BURN ?SMOKING)
             (and (instance ?BURN Combustion)
                  (and (resource ?BURN ?CIGAR)
                       (and (instance ?CIGAR CigarOrCigarette)
                            (and (result ?BURN ?SMOKE)
                                 (and
                                  (patient ?BREATHE ?SMOKE)
                                  (and
                                   (instance ?BREATHE Breathing)
                                   (subProcess
                                    ?BREATHE
                                    ?SMOKING))))))))))))
*/
fof(a2818,axiom,! [SMOKING] : (? [BURN,CIGAR,BREATHE,SMOKE] : (((s_instance(SMOKE, s_Entity) & s_instance(BREATHE, s_Process) & s_instance(CIGAR, s_Object) & s_instance(BURN, s_Process)) & (s_instance(SMOKING, s_Smoking) => (s_subProcess(BURN, SMOKING) & (s_instance(BURN, s_Combustion) & (s_resource(BURN, CIGAR) & (s_instance(CIGAR, s_CigarOrCigarette) & (s_result(BURN, SMOKE) & (s_patient(BREATHE, SMOKE) & (s_instance(BREATHE, s_Breathing) & s_subProcess(BREATHE, SMOKING))))))))))))).

/*
(instance Jury SetOrClass)
*/
fof(a2819,axiom,s_instance(s_Jury, s_SetOrClass)).

/*
(subclass Jury GroupOfPeople)
*/
fof(a2820,axiom,s_subclass(s_Jury, s_GroupOfPeople)).

/*
(forall (?JURY)
 (=> (instance ?JURY Jury)
  (holdsRight
   (exists (?DECISION)
    (and (instance ?DECISION LegalDecision) (agent ?DECISION ?JURY)))
   ?JURY)))
*/
%% no translation to TPTP available.

/*
(instance CriminalGang SetOrClass)
*/
fof(a2821,axiom,s_instance(s_CriminalGang, s_SetOrClass)).

/*
(subclass CriminalGang GroupOfPeople)
*/
fof(a2822,axiom,s_subclass(s_CriminalGang, s_GroupOfPeople)).

/*
(forall (?G)
 (=> (instance ?G CriminalGang)
  (hasPurpose ?G
   (exists (?A) (and (instance ?A CriminalAction) (agent ?A ?G))))))
*/
%% no translation to TPTP available.

/*
(instance LegalCharge SetOrClass)
*/
fof(a2823,axiom,s_instance(s_LegalCharge, s_SetOrClass)).

/*
(subclass LegalCharge LegalAction)
*/
fof(a2824,axiom,s_subclass(s_LegalCharge, s_LegalAction)).

/*
(forall (?CHARGE)
 (exists (?GOV)
  (and (instance ?GOV Agent)
       (=> (instance ?CHARGE LegalCharge)
        (and (instance ?GOV Government) (agent ?CHARGE ?GOV))))))
*/
fof(a2825,axiom,! [CHARGE] : (? [GOV] : ((s_instance(GOV, s_Agent) & (s_instance(CHARGE, s_LegalCharge) => (s_instance(GOV, s_Government) & s_agent(CHARGE, GOV))))))).

/*
(subclass LegalAppeal Requesting)
*/
fof(a2826,axiom,s_subclass(s_LegalAppeal, s_Requesting)).

/*
(instance LegalAppeal SetOrClass)
*/
fof(a2827,axiom,s_instance(s_LegalAppeal, s_SetOrClass)).

/*
(subclass LegalAppeal JudicialProcess)
*/
fof(a2828,axiom,s_subclass(s_LegalAppeal, s_JudicialProcess)).

/*
(instance Pleading SetOrClass)
*/
fof(a2829,axiom,s_instance(s_Pleading, s_SetOrClass)).

/*
(subclass Pleading Stating)
*/
fof(a2830,axiom,s_subclass(s_Pleading, s_Stating)).

/*
(forall (?P)
 (exists (?J)
  (and (instance ?J Process)
       (=> (instance ?P Pleading)
        (and (instance ?J JudicialProcess) (subProcess ?P ?J))))))
*/
fof(a2831,axiom,! [P] : (? [J] : ((s_instance(J, s_Process) & (s_instance(P, s_Pleading) => (s_instance(J, s_JudicialProcess) & s_subProcess(P, J))))))).

/*
(forall (?P)
 (exists (?C)
  (and (instance ?C Entity)
       (=> (instance ?P Pleading)
        (and (instance ?C CriminalAction) (refers ?P ?C))))))
*/
fof(a2832,axiom,! [P] : (? [C] : ((s_instance(C, s_Entity) & (s_instance(P, s_Pleading) => (s_instance(C, s_CriminalAction) & s_refers(P, C))))))).

/*
(instance describes BinaryPredicate)
*/
fof(a2833,axiom,s_instance(s_describes_m, s_BinaryPredicate)).

/*
(forall (?OBJECT ?FORMULA)
 (exists (?STATING ?AGENT)
  (and (and (instance ?AGENT Agent) (instance ?STATING Process))
       (=> (and (instance ?FORMULA Formula) (instance ?OBJECT Object))
        (=> (describes ?FORMULA ?OBJECT)
         (and (instance ?STATING Stating)
              (and (agent ?STATING ?AGENT)
                   (and (patient ?STATING ?FORMULA)
                        (refers ?STATING ?OBJECT)))))))))
*/
fof(a2834,axiom,! [OBJECT,FORMULA] : (? [STATING,AGENT] : (((s_instance(AGENT, s_Agent) & s_instance(STATING, s_Process)) & ((s_instance(FORMULA, s_Formula) & s_instance(OBJECT, s_Object)) => (s_describes(FORMULA, OBJECT) => (s_instance(STATING, s_Stating) & (s_agent(STATING, AGENT) & (s_patient(STATING, FORMULA) & s_refers(STATING, OBJECT)))))))))).

/*
(instance Testifying SetOrClass)
*/
fof(a2835,axiom,s_instance(s_Testifying, s_SetOrClass)).

/*
(subclass Testifying Stating)
*/
fof(a2836,axiom,s_subclass(s_Testifying, s_Stating)).

/*
(forall (?TESTIFY)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?TESTIFY Testifying)
        (and (instance ?PROC JudicialProcess)
             (subProcess ?TESTIFY ?PROC))))))
*/
fof(a2837,axiom,! [TESTIFY] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(TESTIFY, s_Testifying) => (s_instance(PROC, s_JudicialProcess) & s_subProcess(TESTIFY, PROC))))))).

/*
(instance CourtRoom SetOrClass)
*/
fof(a2838,axiom,s_instance(s_CourtRoom, s_SetOrClass)).

/*
(subclass CourtRoom Room)
*/
fof(a2839,axiom,s_subclass(s_CourtRoom, s_Room)).

/*
(forall (?PROCESS)
 (exists (?ROOM)
  (and (instance ?ROOM Object)
       (=> (instance ?PROCESS JudicialProcess)
        (and (instance ?ROOM CourtRoom)
             (eventLocated ?PROCESS ?ROOM))))))
*/
fof(a2840,axiom,! [PROCESS] : (? [ROOM] : ((s_instance(ROOM, s_Object) & (s_instance(PROCESS, s_JudicialProcess) => (s_instance(ROOM, s_CourtRoom) & s_eventLocated(PROCESS, ROOM))))))).

/*
(instance LegalOpinion SetOrClass)
*/
fof(a2841,axiom,s_instance(s_LegalOpinion, s_SetOrClass)).

/*
(subclass LegalOpinion Argument)
*/
fof(a2842,axiom,s_subclass(s_LegalOpinion, s_Argument)).

/*
(forall (?OPINION)
 (exists (?DECISION ?TEXT ?PROPOSITION)
  (and (and (instance ?PROPOSITION Argument)
            (instance ?TEXT ContentBearingPhysical)
            (instance ?DECISION Process))
       (=> (instance ?OPINION LegalOpinion)
        (and (instance ?DECISION LegalDecision)
             (and (result ?DECISION ?TEXT)
                  (and (containsInformation ?TEXT ?PROPOSITION)
                       (conclusion ?PROPOSITION ?OPINION))))))))
*/
fof(a2843,axiom,! [OPINION] : (? [DECISION,TEXT,PROPOSITION] : (((s_instance(PROPOSITION, s_Argument) & s_instance(TEXT, s_ContentBearingPhysical) & s_instance(DECISION, s_Process)) & (s_instance(OPINION, s_LegalOpinion) => (s_instance(DECISION, s_LegalDecision) & (s_result(DECISION, TEXT) & (s_containsInformation(TEXT, PROPOSITION) & s_conclusion(PROPOSITION, OPINION))))))))).

/*
(instance LegalAward SetOrClass)
*/
fof(a2844,axiom,s_instance(s_LegalAward, s_SetOrClass)).

/*
(subclass LegalAward LegalDecision)
*/
fof(a2845,axiom,s_subclass(s_LegalAward, s_LegalDecision)).

/*
(instance LegalConviction SetOrClass)
*/
fof(a2846,axiom,s_instance(s_LegalConviction, s_SetOrClass)).

/*
(subclass LegalConviction LegalDecision)
*/
fof(a2847,axiom,s_subclass(s_LegalConviction, s_LegalDecision)).

/*
(instance LegalDismissal SetOrClass)
*/
fof(a2848,axiom,s_instance(s_LegalDismissal, s_SetOrClass)).

/*
(subclass LegalDismissal LegalDecision)
*/
fof(a2849,axiom,s_subclass(s_LegalDismissal, s_LegalDecision)).

/*
(subclass LegalSummons Ordering)
*/
fof(a2850,axiom,s_subclass(s_LegalSummons, s_Ordering)).

/*
(instance LegalSummons SetOrClass)
*/
fof(a2851,axiom,s_instance(s_LegalSummons, s_SetOrClass)).

/*
(subclass LegalSummons JudicialProcess)
*/
fof(a2852,axiom,s_subclass(s_LegalSummons, s_JudicialProcess)).

/*
(forall (?P ?O ?S)
 (exists (?C ?T)
  (and (and (instance ?T TimePosition) (instance ?C Object))
       (=>
        (and (instance ?P Physical)
             (instance ?O ContentBearingPhysical))
        (=>
         (and (instance ?S LegalSummons)
              (and (patient ?S ?O) (destination ?S ?P)))
         (and (instance ?C CourtRoom)
              (containsInformation ?O
               (modalAttribute (holdsDuring ?T (located ?P ?C))
                Law))))))))
*/
%% no translation to TPTP available.

/*
(instance LegalAquittal SetOrClass)
*/
fof(a2853,axiom,s_instance(s_LegalAquittal, s_SetOrClass)).

/*
(subclass LegalAquittal LegalDecision)
*/
fof(a2854,axiom,s_subclass(s_LegalAquittal, s_LegalDecision)).

/*
(instance Sentencing SetOrClass)
*/
fof(a2855,axiom,s_instance(s_Sentencing, s_SetOrClass)).

/*
(subclass Sentencing LegalDecision)
*/
fof(a2856,axiom,s_subclass(s_Sentencing, s_LegalDecision)).

/*
(forall (?P ?S)
 (exists (?C)
  (and (instance ?C Process)
       (=> (instance ?P Entity)
        (=> (and (instance ?S Sentencing) (patient ?S ?P))
         (and (causes ?C ?S)
              (and (instance ?C LegalConviction)
                   (and (patient ?C ?P)
                        (earlier (WhenFn ?C) (WhenFn ?S))))))))))
*/
fof(a2857,axiom,! [P,S] : (? [C] : ((s_instance(C, s_Process) & (s_instance(P, s_Entity) => ((s_instance(S, s_Sentencing) & s_patient(S, P)) => (s_causes(C, S) & (s_instance(C, s_LegalConviction) & (s_patient(C, P) & s_earlier(s_WhenFn(C), s_WhenFn(S))))))))))).

/*
(subrelation defendant patient)
*/
fof(a2858,axiom,s_subrelation(s_defendant_m, s_patient_m)).

/*
(instance defendant CaseRole)
*/
fof(a2859,axiom,s_instance(s_defendant_m, s_CaseRole)).

/*
(subrelation plaintiff agent)
*/
fof(a2860,axiom,s_subrelation(s_plaintiff_m, s_agent_m)).

/*
(instance plaintiff CaseRole)
*/
fof(a2861,axiom,s_instance(s_plaintiff_m, s_CaseRole)).

/*
(subclass GameCall Deciding)
*/
fof(a2862,axiom,s_subclass(s_GameCall, s_Deciding)).

/*
(instance GameCall SetOrClass)
*/
fof(a2863,axiom,s_instance(s_GameCall, s_SetOrClass)).

/*
(subclass GameCall Declaring)
*/
fof(a2864,axiom,s_subclass(s_GameCall, s_Declaring)).

/*
(forall (?CALL)
 (exists (?GAME)
  (and (instance ?GAME Entity)
       (=> (instance ?CALL GameCall)
        (and (instance ?GAME Game) (refers ?CALL ?GAME))))))
*/
fof(a2865,axiom,! [CALL] : (? [GAME] : ((s_instance(GAME, s_Entity) & (s_instance(CALL, s_GameCall) => (s_instance(GAME, s_Game) & s_refers(CALL, GAME))))))).

/*
(instance BeginningOperations SetOrClass)
*/
fof(a2866,axiom,s_instance(s_BeginningOperations, s_SetOrClass)).

/*
(subclass BeginningOperations OrganizationalProcess)
*/
fof(a2867,axiom,s_subclass(s_BeginningOperations, s_OrganizationalProcess)).

/*
(disjoint BeginningOperations CeasingOperations)
*/
fof(a2868,axiom,s_disjoint(s_BeginningOperations, s_CeasingOperations)).

/*
(forall (?ORG ?OP)
 (=>
  (and (instance ?OP BeginningOperations)
       (and (instance ?ORG Organization) (agent ?OP ?ORG)))
  (starts ?OP (WhenFn ?ORG))))
*/
fof(a2869,axiom,! [ORG,OP] : (((s_instance(OP, s_BeginningOperations) & (s_instance(ORG, s_Organization) & s_agent(OP, ORG))) => s_starts(OP, s_WhenFn(ORG))))).

/*
(instance OrganizationalMerging SetOrClass)
*/
fof(a2870,axiom,s_instance(s_OrganizationalMerging, s_SetOrClass)).

/*
(subclass OrganizationalMerging OrganizationalProcess)
*/
fof(a2871,axiom,s_subclass(s_OrganizationalMerging, s_OrganizationalProcess)).

/*
(forall (?ORG1 ?ORG2 ?M)
 (=> (and (instance ?ORG1 Organization) (instance ?ORG2 Organization))
  (=>
   (and (instance ?M OrganizationalMerging)
        (and (patient ?M ?ORG1)
             (and (patient ?M ?ORG2) (not (equal ?ORG1 ?ORG2)))))
   (and (holdsDuring (BeginFn (WhenFn ?M))
         (not (exists (?S1)
               (and (subOrganization ?ORG1 ?S1)
                    (subOrganization ?ORG2 ?S1)))))
        (holdsDuring (EndFn (WhenFn ?M))
         (exists (?S2)
          (and (subOrganization ?ORG1 ?S2)
               (subOrganization ?ORG2 ?S2))))))))
*/
%% no translation to TPTP available.

/*
(instance CeasingOperations SetOrClass)
*/
fof(a2872,axiom,s_instance(s_CeasingOperations, s_SetOrClass)).

/*
(subclass CeasingOperations OrganizationalProcess)
*/
fof(a2873,axiom,s_subclass(s_CeasingOperations, s_OrganizationalProcess)).

/*
(forall (?ORG ?OP)
 (=>
  (and (instance ?OP CeasingOperations)
       (and (instance ?ORG Organization) (agent ?OP ?ORG)))
  (finishes ?OP (WhenFn ?ORG))))
*/
fof(a2874,axiom,! [ORG,OP] : (((s_instance(OP, s_CeasingOperations) & (s_instance(ORG, s_Organization) & s_agent(OP, ORG))) => s_finishes(OP, s_WhenFn(ORG))))).

/*
(instance BecomingDrunk SetOrClass)
*/
fof(a2875,axiom,s_instance(s_BecomingDrunk, s_SetOrClass)).

/*
(subclass BecomingDrunk PsychologicalProcess)
*/
fof(a2876,axiom,s_subclass(s_BecomingDrunk, s_PsychologicalProcess)).

/*
(disjoint BecomingDrunk SoberingUp)
*/
fof(a2877,axiom,s_disjoint(s_BecomingDrunk, s_SoberingUp)).

/*
(forall (?A ?B)
 (=> (instance ?A Agent)
  (=> (and (instance ?B BecomingDrunk) (experiencer ?B ?A))
   (and (holdsDuring (BeginFn (WhenFn ?B)) (attribute ?A Sober))
        (holdsDuring (EndFn (WhenFn ?B)) (attribute ?A Drunk))))))
*/
%% no translation to TPTP available.

/*
(instance Sober ConsciousnessAttribute)
*/
fof(a2878,axiom,s_instance(s_Sober, s_ConsciousnessAttribute)).

/*
(instance SoberingUp SetOrClass)
*/
fof(a2879,axiom,s_instance(s_SoberingUp, s_SetOrClass)).

/*
(subclass SoberingUp PsychologicalProcess)
*/
fof(a2880,axiom,s_subclass(s_SoberingUp, s_PsychologicalProcess)).

/*
(forall (?A ?B)
 (=> (instance ?A Agent)
  (=> (and (instance ?B SoberingUp) (experiencer ?B ?A))
   (and (holdsDuring (BeginFn (WhenFn ?B)) (attribute ?A Drunk))
        (holdsDuring (EndFn (WhenFn ?B)) (attribute ?A Sober))))))
*/
%% no translation to TPTP available.

/*
(instance FallingAsleep SetOrClass)
*/
fof(a2881,axiom,s_instance(s_FallingAsleep, s_SetOrClass)).

/*
(subclass FallingAsleep PsychologicalProcess)
*/
fof(a2882,axiom,s_subclass(s_FallingAsleep, s_PsychologicalProcess)).

/*
(disjoint FallingAsleep WakingUp)
*/
fof(a2883,axiom,s_disjoint(s_FallingAsleep, s_WakingUp)).

/*
(forall (?AGENT ?FALL)
 (exists (?START ?FINISH)
  (and (and (instance ?FINISH TimeInterval)
            (instance ?START TimeInterval))
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?FALL FallingAsleep)
              (experiencer ?FALL ?AGENT))
         (and (starts ?START (WhenFn ?FALL))
              (and (finishes ?FINISH (WhenFn ?FALL))
                   (and (holdsDuring ?START (attribute ?AGENT Awake))
                        (holdsDuring ?FINISH
                         (attribute ?AGENT Asleep))))))))))
*/
%% no translation to TPTP available.

/*
(instance WakingUp SetOrClass)
*/
fof(a2884,axiom,s_instance(s_WakingUp, s_SetOrClass)).

/*
(subclass WakingUp PsychologicalProcess)
*/
fof(a2885,axiom,s_subclass(s_WakingUp, s_PsychologicalProcess)).

/*
(forall (?AGENT ?WAKE)
 (exists (?START ?FINISH)
  (and (and (instance ?FINISH TimeInterval)
            (instance ?START TimeInterval))
       (=> (instance ?AGENT Agent)
        (=> (and (instance ?WAKE WakingUp) (experiencer ?WAKE ?AGENT))
         (and (starts ?START (WhenFn ?WAKE))
              (and (finishes ?FINISH (WhenFn ?WAKE))
                   (and (holdsDuring ?START (attribute ?AGENT Asleep))
                        (holdsDuring ?FINISH
                         (attribute ?AGENT Awake))))))))))
*/
%% no translation to TPTP available.

/*
(instance GainingConsciousness SetOrClass)
*/
fof(a2886,axiom,s_instance(s_GainingConsciousness, s_SetOrClass)).

/*
(subclass GainingConsciousness PsychologicalProcess)
*/
fof(a2887,axiom,s_subclass(s_GainingConsciousness, s_PsychologicalProcess)).

/*
(forall (?A ?G)
 (=> (instance ?A Agent)
  (=> (and (instance ?G GainingConsciousness) (experiencer ?G ?A))
   (and (holdsDuring (BeginFn (WhenFn ?G)) (attribute ?A Unconscious))
        (holdsDuring (EndFn (WhenFn ?G)) (attribute ?A Awake))))))
*/
%% no translation to TPTP available.

/*
(instance LosingConsciousness SetOrClass)
*/
fof(a2888,axiom,s_instance(s_LosingConsciousness, s_SetOrClass)).

/*
(subclass LosingConsciousness PsychologicalProcess)
*/
fof(a2889,axiom,s_subclass(s_LosingConsciousness, s_PsychologicalProcess)).

/*
(disjoint LosingConsciousness GainingConsciousness)
*/
fof(a2890,axiom,s_disjoint(s_LosingConsciousness, s_GainingConsciousness)).

/*
(forall (?A ?L)
 (=> (instance ?A Agent)
  (=> (and (instance ?L LosingConsciousness) (experiencer ?L ?A))
   (and (holdsDuring (BeginFn (WhenFn ?L)) (attribute ?A Awake))
        (holdsDuring (EndFn (WhenFn ?L)) (attribute ?A Unconscious))))))
*/
%% no translation to TPTP available.

/*
(instance issuedBy BinaryPredicate)
*/
fof(a2891,axiom,s_instance(s_issuedBy_m, s_BinaryPredicate)).

/*
(forall (?AGENT ?CERT)
 (exists (?P)
  (and (instance ?P Process)
       (=>
        (and (instance ?CERT Certificate)
             (instance ?AGENT CognitiveAgent))
        (=> (issuedBy ?CERT ?AGENT)
         (and (instance ?P IntentionalProcess)
              (and (agent ?P ?AGENT) (result ?P ?CERT))))))))
*/
fof(a2892,axiom,! [AGENT,CERT] : (? [P] : ((s_instance(P, s_Process) & ((s_instance(CERT, s_Certificate) & s_instance(AGENT, s_CognitiveAgent)) => (s_issuedBy(CERT, AGENT) => (s_instance(P, s_IntentionalProcess) & (s_agent(P, AGENT) & s_result(P, CERT))))))))).

/*
(instance AcademicDegree SetOrClass)
*/
fof(a2893,axiom,s_instance(s_AcademicDegree, s_SetOrClass)).

/*
(subclass AcademicDegree Certificate)
*/
fof(a2894,axiom,s_subclass(s_AcademicDegree, s_Certificate)).

/*
(forall (?DEGREE ?AGENT)
 (exists (?PROGRAM ?STUDY)
  (and (and (instance ?STUDY Process) (instance ?PROGRAM Proposition))
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?DEGREE AcademicDegree)
              (possesses ?AGENT ?DEGREE))
         (and (instance ?PROGRAM EducationalProgram)
              (and (realization ?STUDY ?PROGRAM)
                   (experiencer ?STUDY ?AGENT))))))))
*/
fof(a2895,axiom,! [DEGREE,AGENT] : (? [PROGRAM,STUDY] : (((s_instance(STUDY, s_Process) & s_instance(PROGRAM, s_Proposition)) & (s_instance(AGENT, s_Agent) => ((s_instance(DEGREE, s_AcademicDegree) & s_possesses(AGENT, DEGREE)) => (s_instance(PROGRAM, s_EducationalProgram) & (s_realization(STUDY, PROGRAM) & s_experiencer(STUDY, AGENT))))))))).

/*
(subclass License Certificate)
*/
fof(a2896,axiom,s_subclass(s_License, s_Certificate)).

/*
(forall (?L)
 (exists (?ORG)
  (and (instance ?ORG CognitiveAgent)
       (=> (instance ?L License)
        (and (instance ?ORG GovernmentOrganization)
             (issuedBy ?L ?ORG))))))
*/
fof(a2897,axiom,! [L] : (? [ORG] : ((s_instance(ORG, s_CognitiveAgent) & (s_instance(L, s_License) => (s_instance(ORG, s_GovernmentOrganization) & s_issuedBy(L, ORG))))))).

/*
(instance Ticket SetOrClass)
*/
fof(a2898,axiom,s_instance(s_Ticket, s_SetOrClass)).

/*
(subclass Ticket Certificate)
*/
fof(a2899,axiom,s_subclass(s_Ticket, s_Certificate)).

/*
(forall (?CUST ?AGENT ?TICKET)
 (=> (and (instance ?CUST Agent) (instance ?AGENT CognitiveAgent))
  (=>
   (and (issuedBy ?TICKET ?AGENT)
        (and (instance ?TICKET Ticket) (possesses ?CUST ?TICKET)))
   (confersNorm ?AGENT
    (exists (?T)
     (holdsDuring ?T
      (exists (?P)
       (and (instance ?P Process)
            (and (agent ?P ?AGENT) (experiencer ?P ?CUST))))))
    Permission))))
*/
%% no translation to TPTP available.

/*
(instance Passport SetOrClass)
*/
fof(a2900,axiom,s_instance(s_Passport, s_SetOrClass)).

/*
(subclass Passport License)
*/
fof(a2901,axiom,s_subclass(s_Passport, s_License)).

/*
(forall (?P ?A)
 (=> (instance ?A Agent)
  (=> (and (instance ?P Passport) (possesses ?A ?P))
   (confersNorm ?P
    (exists (?T ?N1 ?N2)
     (and (instance ?T Translocation)
          (and (agent ?T ?A)
               (and (origin ?T ?N1)
                    (and (destination ?T ?N2)
                         (and (instance ?N1 Nation)
                              (and (instance ?N2 Nation)
                                   (not (equal ?N1 ?N2)))))))))
    Permission))))
*/
%% no translation to TPTP available.

/*
(instance PassCertificate SetOrClass)
*/
fof(a2902,axiom,s_instance(s_PassCertificate, s_SetOrClass)).

/*
(subclass PassCertificate Certificate)
*/
fof(a2903,axiom,s_subclass(s_PassCertificate, s_Certificate)).

/*
(forall (?P ?A)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?A Agent)
        (=> (and (instance ?P PassCertificate) (possesses ?A ?P))
         (confersNorm ?P (located ?A ?L) Permission))))))
*/
%% no translation to TPTP available.

/*
(instance Testament SetOrClass)
*/
fof(a2904,axiom,s_instance(s_Testament, s_SetOrClass)).

/*
(subclass Testament Certificate)
*/
fof(a2905,axiom,s_subclass(s_Testament, s_Certificate)).

/*
(forall (?T)
 (exists (?B)
  (and (instance ?B Entity)
       (=> (instance ?T Testament)
        (and (instance ?B Bequeathing) (refers ?T ?B))))))
*/
fof(a2906,axiom,! [T] : (? [B] : ((s_instance(B, s_Entity) & (s_instance(T, s_Testament) => (s_instance(B, s_Bequeathing) & s_refers(T, B))))))).

/*
(instance registeredItem BinaryPredicate)
*/
fof(a2907,axiom,s_instance(s_registeredItem_m, s_BinaryPredicate)).

/*
(subrelation registeredItem refers)
*/
fof(a2908,axiom,s_subrelation(s_registeredItem_m, s_refers_m)).

/*
(subclass EducationalProgram Plan)
*/
fof(a2909,axiom,s_subclass(s_EducationalProgram, s_Plan)).

/*
(forall (?PROGRAM)
 (exists (?COURSE1 ?COURSE2)
  (and (and (instance ?COURSE2 Plan) (instance ?COURSE1 Plan))
       (=> (instance ?PROGRAM EducationalProgram)
        (and (instance ?COURSE1 EducationalCourse)
             (and (instance ?COURSE2 EducationalCourse)
                  (and (not (equal ?COURSE1 ?COURSE2))
                       (and (subPlan ?COURSE1 ?PROGRAM)
                            (subPlan ?COURSE2 ?PROGRAM)))))))))
*/
fof(a2910,axiom,! [PROGRAM] : (? [COURSE1,COURSE2] : (((s_instance(COURSE2, s_Plan) & s_instance(COURSE1, s_Plan)) & (s_instance(PROGRAM, s_EducationalProgram) => (s_instance(COURSE1, s_EducationalCourse) & (s_instance(COURSE2, s_EducationalCourse) & ((~ (COURSE1 = COURSE2)) & (s_subPlan(COURSE1, PROGRAM) & s_subPlan(COURSE2, PROGRAM)))))))))).

/*
(instance EducationalCourse SetOrClass)
*/
fof(a2911,axiom,s_instance(s_EducationalCourse, s_SetOrClass)).

/*
(instance EducationalProgram SetOrClass)
*/
fof(a2912,axiom,s_instance(s_EducationalProgram, s_SetOrClass)).

/*
(subclass EducationalCourse EducationalProgram)
*/
fof(a2913,axiom,s_subclass(s_EducationalCourse, s_EducationalProgram)).

/*
(forall (?COURSE)
 (exists (?CLASS ?ORG)
  (and (and (instance ?ORG Object) (instance ?CLASS Process))
       (=> (instance ?COURSE EducationalCourse)
        (and (realization ?CLASS ?COURSE)
             (and (instance ?CLASS EducationalProcess)
                  (and (eventLocated ?CLASS ?ORG)
                       (instance ?ORG EducationalOrganization))))))))
*/
fof(a2914,axiom,! [COURSE] : (? [CLASS,ORG] : (((s_instance(ORG, s_Object) & s_instance(CLASS, s_Process)) & (s_instance(COURSE, s_EducationalCourse) => (s_realization(CLASS, COURSE) & (s_instance(CLASS, s_EducationalProcess) & (s_eventLocated(CLASS, ORG) & s_instance(ORG, s_EducationalOrganization))))))))).

/*
(instance SportsPlay SetOrClass)
*/
fof(a2915,axiom,s_instance(s_SportsPlay, s_SetOrClass)).

/*
(subclass SportsPlay Plan)
*/
fof(a2916,axiom,s_subclass(s_SportsPlay, s_Plan)).

/*
(forall (?SP ?P)
 (exists (?S)
  (and (instance ?S Process)
       (=> (instance ?P Process)
        (=> (and (instance ?SP SportsPlay) (realization ?P ?SP))
         (and (instance ?S TeamSport)
              (and (instance ?P Maneuver) (subProcess ?P ?S))))))))
*/
fof(a2917,axiom,! [SP,P] : (? [S] : ((s_instance(S, s_Process) & (s_instance(P, s_Process) => ((s_instance(SP, s_SportsPlay) & s_realization(P, SP)) => (s_instance(S, s_TeamSport) & (s_instance(P, s_Maneuver) & s_subProcess(P, S))))))))).

/*
(subclass School EducationalOrganization)
*/
fof(a2918,axiom,s_subclass(s_School, s_EducationalOrganization)).

/*
(subclass PublicSchool School)
*/
fof(a2919,axiom,s_subclass(s_PublicSchool, s_School)).

/*
(instance PublicSchool SetOrClass)
*/
fof(a2920,axiom,s_instance(s_PublicSchool, s_SetOrClass)).

/*
(subclass PublicSchool GovernmentOrganization)
*/
fof(a2921,axiom,s_subclass(s_PublicSchool, s_GovernmentOrganization)).

/*
(instance PrivateSchool SetOrClass)
*/
fof(a2922,axiom,s_instance(s_PrivateSchool, s_SetOrClass)).

/*
(subclass PrivateSchool School)
*/
fof(a2923,axiom,s_subclass(s_PrivateSchool, s_School)).

/*
(disjoint PrivateSchool GovernmentOrganization)
*/
fof(a2924,axiom,s_disjoint(s_PrivateSchool, s_GovernmentOrganization)).

/*
(instance HighSchool SetOrClass)
*/
fof(a2925,axiom,s_instance(s_HighSchool, s_SetOrClass)).

/*
(subclass HighSchool School)
*/
fof(a2926,axiom,s_subclass(s_HighSchool, s_School)).

/*
(forall (?COLLEGE ?STUDENT ?ENTER)
 (exists (?GRAD ?SCHOOL)
  (and (and (instance ?SCHOOL Agent) (instance ?GRAD Process))
       (=> (instance ?STUDENT Entity)
        (=>
         (and (instance ?ENTER Matriculation)
              (and (agent ?ENTER ?COLLEGE)
                   (and (patient ?ENTER ?STUDENT)
                        (instance ?COLLEGE College))))
         (and (instance ?GRAD Graduation)
              (and (agent ?GRAD ?SCHOOL)
                   (and (patient ?GRAD ?STUDENT)
                        (and (instance ?SCHOOL HighSchool)
                             (earlier (WhenFn ?GRAD)
                              (WhenFn ?ENTER)))))))))))
*/
fof(a2927,axiom,! [COLLEGE,STUDENT,ENTER] : (? [GRAD,SCHOOL] : (((s_instance(SCHOOL, s_Agent) & s_instance(GRAD, s_Process)) & (s_instance(STUDENT, s_Entity) => ((s_instance(ENTER, s_Matriculation) & (s_agent(ENTER, COLLEGE) & (s_patient(ENTER, STUDENT) & s_instance(COLLEGE, s_College)))) => (s_instance(GRAD, s_Graduation) & (s_agent(GRAD, SCHOOL) & (s_patient(GRAD, STUDENT) & (s_instance(SCHOOL, s_HighSchool) & s_earlier(s_WhenFn(GRAD), s_WhenFn(ENTER)))))))))))).

/*
(instance SecondarySchool SetOrClass)
*/
fof(a2928,axiom,s_instance(s_SecondarySchool, s_SetOrClass)).

/*
(subclass SecondarySchool School)
*/
fof(a2929,axiom,s_subclass(s_SecondarySchool, s_School)).

/*
(forall (?C ?P ?E)
 (exists (?G ?S)
  (and (and (instance ?S Agent) (instance ?G Process))
       (=> (instance ?P Entity)
        (=>
         (and (instance ?E Matriculation)
              (and (agent ?E ?C)
                   (and (patient ?E ?P) (instance ?C College))))
         (and (instance ?G Graduation)
              (and (agent ?G ?S)
                   (and (patient ?G ?P)
                        (and (instance ?S SecondarySchool)
                             (earlier (WhenFn ?G) (WhenFn ?E)))))))))))
*/
fof(a2930,axiom,! [C,P,E] : (? [G,S] : (((s_instance(S, s_Agent) & s_instance(G, s_Process)) & (s_instance(P, s_Entity) => ((s_instance(E, s_Matriculation) & (s_agent(E, C) & (s_patient(E, P) & s_instance(C, s_College)))) => (s_instance(G, s_Graduation) & (s_agent(G, S) & (s_patient(G, P) & (s_instance(S, s_SecondarySchool) & s_earlier(s_WhenFn(G), s_WhenFn(E)))))))))))).

/*
(instance VocationalSchool SetOrClass)
*/
fof(a2931,axiom,s_instance(s_VocationalSchool, s_SetOrClass)).

/*
(subclass VocationalSchool School)
*/
fof(a2932,axiom,s_subclass(s_VocationalSchool, s_School)).

/*
(forall (?VS)
 (=> (instance ?VS VocationalSchool)
  (hasPurpose ?VS
   (exists (?P ?S ?T)
    (and (instance ?P EducationalProcess)
         (and (eventLocated ?P ?VS)
              (and (student ?S ?VS)
                   (and (experiencer ?P ?S)
                        (and (instance ?T OccupationalTrade)
                             (holdsDuring (EndFn (WhenFn ?P))
                              (attribute ?S ?T)))))))))))
*/
%% no translation to TPTP available.

/*
(subclass PostSecondarySchool School)
*/
fof(a2933,axiom,s_subclass(s_PostSecondarySchool, s_School)).

/*
(partition4 PostSecondarySchool JuniorCollege College University)
*/
fof(a2934,axiom,s_partition4(s_PostSecondarySchool, s_JuniorCollege, s_College, s_University)).

/*
(instance JuniorCollege SetOrClass)
*/
fof(a2935,axiom,s_instance(s_JuniorCollege, s_SetOrClass)).

/*
(subclass JuniorCollege PostSecondarySchool)
*/
fof(a2936,axiom,s_subclass(s_JuniorCollege, s_PostSecondarySchool)).

/*
(instance College SetOrClass)
*/
fof(a2937,axiom,s_instance(s_College, s_SetOrClass)).

/*
(subclass College PostSecondarySchool)
*/
fof(a2938,axiom,s_subclass(s_College, s_PostSecondarySchool)).

/*
(instance University SetOrClass)
*/
fof(a2939,axiom,s_instance(s_University, s_SetOrClass)).

/*
(subclass University PostSecondarySchool)
*/
fof(a2940,axiom,s_subclass(s_University, s_PostSecondarySchool)).

/*
(instance PostSecondarySchool SetOrClass)
*/
fof(a2941,axiom,s_instance(s_PostSecondarySchool, s_SetOrClass)).

/*
(subclass GraduateSchool PostSecondarySchool)
*/
fof(a2942,axiom,s_subclass(s_GraduateSchool, s_PostSecondarySchool)).

/*
(forall (?S)
 (exists (?U)
  (and (instance ?U Object)
       (=> (instance ?S GraduateSchool)
        (and (instance ?U University) (part ?S ?U))))))
*/
fof(a2943,axiom,! [S] : (? [U] : ((s_instance(U, s_Object) & (s_instance(S, s_GraduateSchool) => (s_instance(U, s_University) & s_part(S, U))))))).

/*
(instance MedicalSchool SetOrClass)
*/
fof(a2944,axiom,s_instance(s_MedicalSchool, s_SetOrClass)).

/*
(instance GraduateSchool SetOrClass)
*/
fof(a2945,axiom,s_instance(s_GraduateSchool, s_SetOrClass)).

/*
(subclass MedicalSchool GraduateSchool)
*/
fof(a2946,axiom,s_subclass(s_MedicalSchool, s_GraduateSchool)).

/*
(instance ArtSchool SetOrClass)
*/
fof(a2947,axiom,s_instance(s_ArtSchool, s_SetOrClass)).

/*
(subclass ArtSchool School)
*/
fof(a2948,axiom,s_subclass(s_ArtSchool, s_School)).

/*
(forall (?AS ?P)
 (exists (?M ?ART)
  (and (and (instance ?ART Entity) (instance ?M Process))
       (=>
        (and (instance ?AS ArtSchool)
             (and (instance ?P EducationalProcess)
                  (eventLocated ?P ?AS)))
        (and (instance ?M Making)
             (and (patient ?M ?ART)
                  (and (instance ?ART ArtWork) (refers ?P ?M))))))))
*/
fof(a2949,axiom,! [AS,P] : (? [M,ART] : (((s_instance(ART, s_Entity) & s_instance(M, s_Process)) & ((s_instance(AS, s_ArtSchool) & (s_instance(P, s_EducationalProcess) & s_eventLocated(P, AS))) => (s_instance(M, s_Making) & (s_patient(M, ART) & (s_instance(ART, s_ArtWork) & s_refers(P, M))))))))).

/*
(instance DaySchool SetOrClass)
*/
fof(a2950,axiom,s_instance(s_DaySchool, s_SetOrClass)).

/*
(instance School SetOrClass)
*/
fof(a2951,axiom,s_instance(s_School, s_SetOrClass)).

/*
(subclass DaySchool School)
*/
fof(a2952,axiom,s_subclass(s_DaySchool, s_School)).

/*
(forall (?DS)
 (forall (?S)
  (=> (instance ?S Human)
   (=> (instance ?DS DaySchool)
    (not (and (student ?S ?DS) (home ?S ?DS)))))))
*/
fof(a2953,axiom,! [DS] : (! [S] : ((s_instance(S, s_Human) => (s_instance(DS, s_DaySchool) => (~ (s_student(S, DS) & s_home(S, DS)))))))).

/*
(subrelation student member)
*/
fof(a2954,axiom,s_subrelation(s_student_m, s_member_m)).

/*
(forall (?ORG ?AGENT)
 (exists (?PROCESS)
  (and (instance ?PROCESS Process)
       (=>
        (and (instance ?AGENT Human)
             (instance ?ORG EducationalOrganization))
        (=> (student ?AGENT ?ORG)
         (and (instance ?PROCESS EducationalProcess)
              (and (eventLocated ?PROCESS ?ORG)
                   (destination ?PROCESS ?AGENT))))))))
*/
fof(a2955,axiom,! [ORG,AGENT] : (? [PROCESS] : ((s_instance(PROCESS, s_Process) & ((s_instance(AGENT, s_Human) & s_instance(ORG, s_EducationalOrganization)) => (s_student(AGENT, ORG) => (s_instance(PROCESS, s_EducationalProcess) & (s_eventLocated(PROCESS, ORG) & s_destination(PROCESS, AGENT))))))))).

/*
(instance almamater BinaryPredicate)
*/
fof(a2956,axiom,s_instance(s_almamater_m, s_BinaryPredicate)).

/*
(forall (?SCHOOL ?PERSON)
 (exists (?EV)
  (and (instance ?EV Process)
       (=>
        (and (instance ?PERSON Human)
             (instance ?SCHOOL PostSecondarySchool))
        (=> (almamater ?PERSON ?SCHOOL)
         (and (instance ?EV EducationalProcess)
              (and (destination ?EV ?PERSON)
                   (and (eventLocated ?EV ?SCHOOL)
                        (holdsDuring (WhenFn ?EV)
                         (attribute ?PERSON Student))))))))))
*/
%% no translation to TPTP available.

/*
(subrelation teacher member)
*/
fof(a2957,axiom,s_subrelation(s_teacher_m, s_member_m)).

/*
(forall (?ORG ?AGENT)
 (exists (?PROCESS)
  (and (instance ?PROCESS Process)
       (=>
        (and (instance ?AGENT Human)
             (instance ?ORG EducationalOrganization))
        (=> (teacher ?AGENT ?ORG)
         (and (instance ?PROCESS EducationalProcess)
              (and (eventLocated ?PROCESS ?ORG)
                   (agent ?PROCESS ?AGENT))))))))
*/
fof(a2958,axiom,! [ORG,AGENT] : (? [PROCESS] : ((s_instance(PROCESS, s_Process) & ((s_instance(AGENT, s_Human) & s_instance(ORG, s_EducationalOrganization)) => (s_teacher(AGENT, ORG) => (s_instance(PROCESS, s_EducationalProcess) & (s_eventLocated(PROCESS, ORG) & s_agent(PROCESS, AGENT))))))))).

/*
(instance DriversLicense SetOrClass)
*/
fof(a2959,axiom,s_instance(s_DriversLicense, s_SetOrClass)).

/*
(instance License SetOrClass)
*/
fof(a2960,axiom,s_instance(s_License, s_SetOrClass)).

/*
(subclass DriversLicense License)
*/
fof(a2961,axiom,s_subclass(s_DriversLicense, s_License)).

/*
(forall (?L ?A)
 (=> (instance ?A Agent)
  (=> (and (instance ?L DriversLicense) (possesses ?A ?L))
   (confersNorm ?L
    (exists (?D ?V)
     (and (instance ?D Driving)
          (and (agent ?D ?A)
               (and (patient ?D ?V) (instance ?V RoadVehicle)))))
    Permission))))
*/
%% no translation to TPTP available.

/*
(instance InsurancePolicy SetOrClass)
*/
fof(a2962,axiom,s_instance(s_InsurancePolicy, s_SetOrClass)).

/*
(subclass InsurancePolicy Certificate)
*/
fof(a2963,axiom,s_subclass(s_InsurancePolicy, s_Certificate)).

/*
(instance EconomicRelation SetOrClass)
*/
fof(a2964,axiom,s_instance(s_EconomicRelation, s_SetOrClass)).

/*
(subclass EconomicRelation BinaryRelation)
*/
fof(a2965,axiom,s_subclass(s_EconomicRelation, s_BinaryRelation)).

/*
(forall (?CLASS ?REL)
 (=> (instance ?CLASS SetOrClass)
  (=> (and (instance ?REL EconomicRelation) (domain ?REL 1 ?CLASS))
   (subclass ?CLASS GeopoliticalArea))))
*/
fof(a2966,axiom,! [CLASS,REL] : ((s_instance(CLASS, s_SetOrClass) => ((s_instance(REL, s_EconomicRelation) & s_domain(REL, 1, CLASS)) => s_subclass(CLASS, s_GeopoliticalArea))))).

/*
(instance LaborStriking SetOrClass)
*/
fof(a2967,axiom,s_instance(s_LaborStriking, s_SetOrClass)).

/*
(subclass LaborStriking OrganizationalProcess)
*/
fof(a2968,axiom,s_subclass(s_LaborStriking, s_OrganizationalProcess)).

/*
(forall (?PERSON ?ORG ?STRIKE)
 (=>
  (and (instance ?STRIKE LaborStriking)
       (and (agent ?STRIKE ?PERSON)
            (and (instance ?PERSON Human)
                 (and (patient ?STRIKE ?ORG)
                      (instance ?ORG Organization)))))
  (employs ?ORG ?PERSON)))
*/
fof(a2969,axiom,! [PERSON,ORG,STRIKE] : (((s_instance(STRIKE, s_LaborStriking) & (s_agent(STRIKE, PERSON) & (s_instance(PERSON, s_Human) & (s_patient(STRIKE, ORG) & s_instance(ORG, s_Organization))))) => s_employs(ORG, PERSON)))).

/*
(instance EmploymentFiring SetOrClass)
*/
fof(a2970,axiom,s_instance(s_EmploymentFiring, s_SetOrClass)).

/*
(subclass EmploymentFiring TerminatingEmployment)
*/
fof(a2971,axiom,s_subclass(s_EmploymentFiring, s_TerminatingEmployment)).

/*
(subclass Resigning TerminatingEmployment)
*/
fof(a2972,axiom,s_subclass(s_Resigning, s_TerminatingEmployment)).

/*
(forall (?A ?R)
 (=> (instance ?A CognitiveAgent)
  (=> (and (instance ?R Resigning) (agent ?R ?A)) (wants ?A ?R))))
*/
fof(a2973,axiom,! [A,R] : ((s_instance(A, s_CognitiveAgent) => ((s_instance(R, s_Resigning) & s_agent(R, A)) => s_wants(A, R))))).

/*
(instance Retiring SetOrClass)
*/
fof(a2974,axiom,s_instance(s_Retiring, s_SetOrClass)).

/*
(instance Resigning SetOrClass)
*/
fof(a2975,axiom,s_instance(s_Resigning, s_SetOrClass)).

/*
(subclass Retiring Resigning)
*/
fof(a2976,axiom,s_subclass(s_Retiring, s_Resigning)).

/*
(instance TransferringPosition SetOrClass)
*/
fof(a2977,axiom,s_instance(s_TransferringPosition, s_SetOrClass)).

/*
(subclass TransferringPosition OrganizationalProcess)
*/
fof(a2978,axiom,s_subclass(s_TransferringPosition, s_OrganizationalProcess)).

/*
(forall (?H ?T)
 (exists (?P1 ?P2 ?ORG)
  (and (and (instance ?ORG Organization) (instance ?P2 Position)
            (instance ?P1 Position))
       (=> (instance ?H Human)
        (=>
         (and (instance ?T TransferringPosition) (experiencer ?T ?H))
         (and (holdsDuring (BeginFn (WhenFn ?T))
               (occupiesPosition ?H ?P1 ?ORG))
              (and (holdsDuring (EndFn (WhenFn ?T))
                    (occupiesPosition ?H ?P2 ?ORG))
                   (not (equal ?P1 ?P2)))))))))
*/
%% no translation to TPTP available.

/*
(instance monetaryWage QuaternaryPredicate)
*/
fof(a2979,axiom,s_instance(s_monetaryWage_m, s_QuaternaryPredicate)).

/*
(forall (?ORG ?PERSON ?MONEY ?TIME)
 (=>
  (and (instance ?TIME TimeDuration) (instance ?MONEY CurrencyMeasure)
       (instance ?PERSON Human) (instance ?ORG Organization))
  (=> (monetaryWage ?ORG ?PERSON ?TIME ?MONEY) (employs ?ORG ?PERSON))))
*/
fof(a2980,axiom,! [ORG,PERSON,MONEY,TIME] : (((s_instance(TIME, s_TimeDuration) & s_instance(MONEY, s_CurrencyMeasure) & s_instance(PERSON, s_Human) & s_instance(ORG, s_Organization)) => (s_monetaryWage(ORG, PERSON, TIME, MONEY) => s_employs(ORG, PERSON))))).

/*
(subclass GameArtifact Artifact)
*/
fof(a2981,axiom,s_subclass(s_GameArtifact, s_Artifact)).

/*
(disjointDecomposition3 GameArtifact GameBoard GamePiece)
*/
fof(a2982,axiom,s_disjointDecomposition3(s_GameArtifact, s_GameBoard, s_GamePiece)).

/*
(forall (?ARTIFACT)
 (exists (?GAME)
  (and (and (instance ?GAME SetOrClass) (subclass ?GAME Process))
       (=> (instance ?ARTIFACT GameArtifact)
        (and (subclass ?GAME Game)
             (capability ?GAME instrument ?ARTIFACT))))))
*/
fof(a2983,axiom,! [ARTIFACT] : (? [GAME] : (((s_instance(GAME, s_SetOrClass) & s_subclass(GAME, s_Process)) & (s_instance(ARTIFACT, s_GameArtifact) => (s_subclass(GAME, s_Game) & s_capability(GAME, s_instrument_m, ARTIFACT))))))).

/*
(instance GameBoard SetOrClass)
*/
fof(a2984,axiom,s_instance(s_GameBoard, s_SetOrClass)).

/*
(subclass GameBoard GameArtifact)
*/
fof(a2985,axiom,s_subclass(s_GameBoard, s_GameArtifact)).

/*
(forall (?BOARD)
 (=> (instance ?BOARD GameBoard)
  (hasPurpose ?BOARD
   (exists (?GAME)
    (and (instance ?GAME Game) (eventLocated ?GAME ?BOARD))))))
*/
%% no translation to TPTP available.

/*
(subclass GamePiece GameArtifact)
*/
fof(a2986,axiom,s_subclass(s_GamePiece, s_GameArtifact)).

/*
(instance GameDie SetOrClass)
*/
fof(a2987,axiom,s_instance(s_GameDie, s_SetOrClass)).

/*
(subclass GameDie GamePiece)
*/
fof(a2988,axiom,s_subclass(s_GameDie, s_GamePiece)).

/*
(instance GamePiece SetOrClass)
*/
fof(a2989,axiom,s_instance(s_GamePiece, s_SetOrClass)).

/*
(subclass Ball GamePiece)
*/
fof(a2990,axiom,s_subclass(s_Ball, s_GamePiece)).

/*
(forall (?B) (=> (instance ?B Ball) (attribute ?B Sphere)))
*/
fof(a2991,axiom,! [B] : ((s_instance(B, s_Ball) => s_attribute(B, s_Sphere)))).

/*
(instance ShotBall SetOrClass)
*/
fof(a2992,axiom,s_instance(s_ShotBall, s_SetOrClass)).

/*
(instance Ball SetOrClass)
*/
fof(a2993,axiom,s_instance(s_Ball, s_SetOrClass)).

/*
(subclass ShotBall Ball)
*/
fof(a2994,axiom,s_subclass(s_ShotBall, s_Ball)).

/*
(subclass GameShot Impelling)
*/
fof(a2995,axiom,s_subclass(s_GameShot, s_Impelling)).

/*
(subclass GameShot Maneuver)
*/
fof(a2996,axiom,s_subclass(s_GameShot, s_Maneuver)).

/*
(forall (?SHOT)
 (exists (?PIECE)
  (and (instance ?PIECE Entity)
       (=> (instance ?SHOT GameShot)
        (and (instance ?PIECE GamePiece) (patient ?SHOT ?PIECE))))))
*/
fof(a2997,axiom,! [SHOT] : (? [PIECE] : ((s_instance(PIECE, s_Entity) & (s_instance(SHOT, s_GameShot) => (s_instance(PIECE, s_GamePiece) & s_patient(SHOT, PIECE))))))).

/*
(forall (?SHOT)
 (exists (?GAME)
  (and (instance ?GAME Process)
       (=> (instance ?SHOT GameShot)
        (and (instance ?GAME Game) (subProcess ?SHOT ?GAME))))))
*/
fof(a2998,axiom,! [SHOT] : (? [GAME] : ((s_instance(GAME, s_Process) & (s_instance(SHOT, s_GameShot) => (s_instance(GAME, s_Game) & s_subProcess(SHOT, GAME))))))).

/*
(forall (?SHOT)
 (=> (instance ?SHOT GameShot)
  (hasPurpose ?SHOT (instance ?SHOT Score))))
*/
%% no translation to TPTP available.

/*
(instance Score SetOrClass)
*/
fof(a2999,axiom,s_instance(s_Score, s_SetOrClass)).

/*
(subclass Score GameShot)
*/
fof(a3000,axiom,s_subclass(s_Score, s_GameShot)).

/*
(instance GameGoal SetOrClass)
*/
fof(a3001,axiom,s_instance(s_GameGoal, s_SetOrClass)).

/*
(subclass GameGoal GameArtifact)
*/
fof(a3002,axiom,s_subclass(s_GameGoal, s_GameArtifact)).

/*
(forall (?SCORE ?GOAL ?GAME)
 (exists (?PIECE ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?PIECE Physical))
       (=>
        (and (instance ?GOAL GameGoal)
             (and (instrument ?GAME ?GOAL)
                  (and (instance ?GAME Game)
                       (and (subProcess ?SCORE ?GAME)
                            (instance ?SCORE Score)))))
        (and (instance ?PIECE GamePiece)
             (and (patient ?SCORE ?PIECE)
                  (and (temporalPart ?TIME (WhenFn ?SCORE))
                       (holdsDuring ?TIME (located ?PIECE ?GOAL)))))))))
*/
%% no translation to TPTP available.

/*
(instance SportServe SetOrClass)
*/
fof(a3003,axiom,s_instance(s_SportServe, s_SetOrClass)).

/*
(subclass SportServe GameShot)
*/
fof(a3004,axiom,s_subclass(s_SportServe, s_GameShot)).

/*
(forall (?SS)
 (exists (?S)
  (and (instance ?S Process)
       (=> (instance ?SS SportServe)
        (and (instance ?S Sport)
             (and (subProcess ?SS ?S)
                  (starts (WhenFn ?SS) (WhenFn ?S))))))))
*/
fof(a3005,axiom,! [SS] : (? [S] : ((s_instance(S, s_Process) & (s_instance(SS, s_SportServe) => (s_instance(S, s_Sport) & (s_subProcess(SS, S) & s_starts(s_WhenFn(SS), s_WhenFn(S))))))))).

/*
(subclass Throwing Impelling)
*/
fof(a3006,axiom,s_subclass(s_Throwing, s_Impelling)).

/*
(subclass Throwing BodyMotion)
*/
fof(a3007,axiom,s_subclass(s_Throwing, s_BodyMotion)).

/*
(forall (?THROW)
 (exists (?ARM)
  (and (instance ?ARM Object)
       (=> (instance ?THROW Throwing)
        (and (instance ?ARM Arm) (instrument ?THROW ?ARM))))))
*/
fof(a3008,axiom,! [THROW] : (? [ARM] : ((s_instance(ARM, s_Object) & (s_instance(THROW, s_Throwing) => (s_instance(ARM, s_Arm) & s_instrument(THROW, ARM))))))).

/*
(instance Throwing SetOrClass)
*/
fof(a3009,axiom,s_instance(s_Throwing, s_SetOrClass)).

/*
(subclass Pitching Throwing)
*/
fof(a3010,axiom,s_subclass(s_Pitching, s_Throwing)).

/*
(instance Pitching SetOrClass)
*/
fof(a3011,axiom,s_instance(s_Pitching, s_SetOrClass)).

/*
(instance GameShot SetOrClass)
*/
fof(a3012,axiom,s_instance(s_GameShot, s_SetOrClass)).

/*
(subclass Pitching GameShot)
*/
fof(a3013,axiom,s_subclass(s_Pitching, s_GameShot)).

/*
(forall (?BALL ?PITCH)
 (=> (instance ?BALL Entity)
  (=> (and (instance ?PITCH Pitching) (patient ?PITCH ?BALL))
   (instance ?BALL Ball))))
*/
fof(a3014,axiom,! [BALL,PITCH] : ((s_instance(BALL, s_Entity) => ((s_instance(PITCH, s_Pitching) & s_patient(PITCH, BALL)) => s_instance(BALL, s_Ball))))).

/*
(subclass Catching Touching)
*/
fof(a3015,axiom,s_subclass(s_Catching, s_Touching)).

/*
(instance Catching SetOrClass)
*/
fof(a3016,axiom,s_instance(s_Catching, s_SetOrClass)).

/*
(subclass Catching Maneuver)
*/
fof(a3017,axiom,s_subclass(s_Catching, s_Maneuver)).

/*
(forall (?BALL ?CATCH)
 (=> (instance ?BALL Entity)
  (=> (and (instance ?CATCH Catching) (patient ?CATCH ?BALL))
   (instance ?CATCH Ball))))
*/
fof(a3018,axiom,! [BALL,CATCH] : ((s_instance(BALL, s_Entity) => ((s_instance(CATCH, s_Catching) & s_patient(CATCH, BALL)) => s_instance(CATCH, s_Ball))))).

/*
(forall (?BALL ?AGENT ?CATCH)
 (=> (and (instance ?BALL Object) (instance ?AGENT Animal))
  (=>
   (and (instance ?CATCH Catching)
        (and (agent ?CATCH ?AGENT) (patient ?CATCH ?BALL)))
   (holdsDuring (EndFn (WhenFn ?CATCH)) (grasps ?AGENT ?BALL)))))
*/
%% no translation to TPTP available.

/*
(subclass Sign ContentBearingObject)
*/
fof(a3019,axiom,s_subclass(s_Sign, s_ContentBearingObject)).

/*
(instance Sign SetOrClass)
*/
fof(a3020,axiom,s_instance(s_Sign, s_SetOrClass)).

/*
(subclass Sign DisplayArtifact)
*/
fof(a3021,axiom,s_subclass(s_Sign, s_DisplayArtifact)).

/*
(instance GameArtifact SetOrClass)
*/
fof(a3022,axiom,s_instance(s_GameArtifact, s_SetOrClass)).

/*
(subclass PlayingCard GameArtifact)
*/
fof(a3023,axiom,s_subclass(s_PlayingCard, s_GameArtifact)).

/*
(instance PlayingCard SetOrClass)
*/
fof(a3024,axiom,s_instance(s_PlayingCard, s_SetOrClass)).

/*
(subclass PlayingCard ContentBearingObject)
*/
fof(a3025,axiom,s_subclass(s_PlayingCard, s_ContentBearingObject)).

/*
(forall (?C) (=> (instance ?C PlayingCard) (material Paper ?C)))
*/
fof(a3026,axiom,! [C] : ((s_instance(C, s_PlayingCard) => s_material(s_Paper, C)))).

/*
(subclass Stretching Motion)
*/
fof(a3027,axiom,s_subclass(s_Stretching, s_Motion)).

/*
(instance Stretching SetOrClass)
*/
fof(a3028,axiom,s_instance(s_Stretching, s_SetOrClass)).

/*
(subclass Stretching Lengthening)
*/
fof(a3029,axiom,s_subclass(s_Stretching, s_Lengthening)).

/*
(subclass Accelerating Translocation)
*/
fof(a3030,axiom,s_subclass(s_Accelerating, s_Translocation)).

/*
(instance Accelerating SetOrClass)
*/
fof(a3031,axiom,s_instance(s_Accelerating, s_SetOrClass)).

/*
(subclass Accelerating Increasing)
*/
fof(a3032,axiom,s_subclass(s_Accelerating, s_Increasing)).

/*
(forall (?AGENT ?ACCELERATE)
 (exists (?LENGTH1 ?LENGTH2 ?TIME1 ?TIME2)
  (and (and (instance ?TIME2 TimeDuration)
            (instance ?TIME1 TimeDuration)
            (instance ?LENGTH2 LengthMeasure)
            (instance ?LENGTH1 LengthMeasure))
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?ACCELERATE Accelerating)
              (agent ?ACCELERATE ?AGENT))
         (and (holdsDuring (BeginFn (WhenFn ?ACCELERATE))
               (measure ?AGENT (SpeedFn ?LENGTH1 ?TIME1)))
              (and (holdsDuring (EndFn (WhenFn ?ACCELERATE))
                    (measure ?AGENT (SpeedFn ?LENGTH2 ?TIME2)))
                   (or (greaterThan ?LENGTH2 ?LENGTH1)
                       (greaterThan ?TIME2 ?TIME1)))))))))
*/
%% no translation to TPTP available.

/*
(subclass Decelerating Translocation)
*/
fof(a3033,axiom,s_subclass(s_Decelerating, s_Translocation)).

/*
(instance Decelerating SetOrClass)
*/
fof(a3034,axiom,s_instance(s_Decelerating, s_SetOrClass)).

/*
(subclass Decelerating Decreasing)
*/
fof(a3035,axiom,s_subclass(s_Decelerating, s_Decreasing)).

/*
(forall (?A ?D)
 (exists (?L1 ?L2 ?T1 ?T2)
  (and (and (instance ?T2 TimeDuration) (instance ?T1 TimeDuration)
            (instance ?L2 LengthMeasure) (instance ?L1 LengthMeasure))
       (=> (instance ?A Agent)
        (=> (and (instance ?D Decelerating) (agent ?D ?A))
         (and (holdsDuring (BeginFn (WhenFn ?D))
               (measure ?A (SpeedFn ?L1 ?T1)))
              (and (holdsDuring (EndFn (WhenFn ?D))
                    (measure ?A (SpeedFn ?L2 ?T2)))
                   (or (greaterThan ?L1 ?L2)
                       (greaterThan ?T1 ?T2)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?E ?A ?T)
 (forall (?D)
  (=> (instance ?D Process)
   (=> (and (instance ?E Agent) (instance ?T Entity))
    (=>
     (and (instance ?A Accelerating)
          (and (equal ?T (WhenFn ?A)) (experiencer ?A ?E)))
     (not (and (instance ?D Decelerating)
               (and (experiencer ?D ?E) (equal ?T (WhenFn ?D))))))))))
*/
fof(a3036,axiom,! [E,A,T] : (! [D] : ((s_instance(D, s_Process) => ((s_instance(E, s_Agent) & s_instance(T, s_Entity)) => ((s_instance(A, s_Accelerating) & ((T = s_WhenFn(A)) & s_experiencer(A, E))) => (~ (s_instance(D, s_Decelerating) & (s_experiencer(D, E) & (T = s_WhenFn(D))))))))))).

/*
(instance Shortening SetOrClass)
*/
fof(a3037,axiom,s_instance(s_Shortening, s_SetOrClass)).

/*
(subclass Shortening Decreasing)
*/
fof(a3038,axiom,s_subclass(s_Shortening, s_Decreasing)).

/*
(forall (?O ?S)
 (exists (?L1 ?L2)
  (and (and (instance ?L2 LengthMeasure) (instance ?L1 LengthMeasure))
       (=> (instance ?O Object)
        (=> (and (instance ?S Shortening) (patient ?S ?O))
         (and (holdsDuring (BeginFn (WhenFn ?S)) (length ?O ?L1))
              (and (holdsDuring (EndFn (WhenFn ?S)) (length ?O ?L2))
                   (greaterThan ?L1 ?L2))))))))
*/
%% no translation to TPTP available.

/*
(instance Flying SetOrClass)
*/
fof(a3039,axiom,s_instance(s_Flying, s_SetOrClass)).

/*
(subclass Flying Translocation)
*/
fof(a3040,axiom,s_subclass(s_Flying, s_Translocation)).

/*
(forall (?FLY)
 (exists (?REGION)
  (and (instance ?REGION Object)
       (=> (instance ?FLY Flying)
        (and (instance ?REGION AtmosphericRegion)
             (eventLocated ?FLY ?REGION))))))
*/
fof(a3041,axiom,! [FLY] : (? [REGION] : ((s_instance(REGION, s_Object) & (s_instance(FLY, s_Flying) => (s_instance(REGION, s_AtmosphericRegion) & s_eventLocated(FLY, REGION))))))).

/*
(instance TakingOff SetOrClass)
*/
fof(a3042,axiom,s_instance(s_TakingOff, s_SetOrClass)).

/*
(subclass TakingOff Translocation)
*/
fof(a3043,axiom,s_subclass(s_TakingOff, s_Translocation)).

/*
(forall (?OFF)
 (exists (?REGION ?FLYING)
  (and (and (instance ?FLYING Process) (instance ?REGION Object))
       (=> (instance ?OFF TakingOff)
        (and (not (instance ?REGION AtmosphericRegion))
             (and (holdsDuring (BeginFn (WhenFn ?OFF))
                   (eventLocated ?OFF ?REGION))
                  (and (subProcess ?FLYING ?OFF)
                       (instance ?FLYING Flying))))))))
*/
%% no translation to TPTP available.

/*
(instance Landing SetOrClass)
*/
fof(a3044,axiom,s_instance(s_Landing, s_SetOrClass)).

/*
(subclass Landing Translocation)
*/
fof(a3045,axiom,s_subclass(s_Landing, s_Translocation)).

/*
(forall (?LAND)
 (exists (?REGION ?FLYING)
  (and (and (instance ?FLYING Process) (instance ?REGION Object))
       (=> (instance ?LAND Landing)
        (and (not (instance ?REGION AtmosphericRegion))
             (and (holdsDuring (EndFn (WhenFn ?LAND))
                   (eventLocated ?LAND ?REGION))
                  (and (subProcess ?FLYING ?LAND)
                       (instance ?FLYING Flying))))))))
*/
%% no translation to TPTP available.

/*
(instance Returning SetOrClass)
*/
fof(a3046,axiom,s_instance(s_Returning, s_SetOrClass)).

/*
(subclass Returning Translocation)
*/
fof(a3047,axiom,s_subclass(s_Returning, s_Translocation)).

/*
(forall (?DEST ?AGENT ?RETURN)
 (exists (?TIME)
  (and (instance ?TIME TimeInterval)
       (=> (and (instance ?DEST Object) (instance ?AGENT Agent))
        (=>
         (and (instance ?RETURN Returning)
              (and (experiencer ?RETURN ?AGENT)
                   (destination ?RETURN ?DEST)))
         (and (earlier ?TIME (WhenFn ?RETURN))
              (holdsDuring ?TIME (located ?AGENT ?DEST))))))))
*/
%% no translation to TPTP available.

/*
(instance Escaping SetOrClass)
*/
fof(a3048,axiom,s_instance(s_Escaping, s_SetOrClass)).

/*
(subclass Escaping Translocation)
*/
fof(a3049,axiom,s_subclass(s_Escaping, s_Translocation)).

/*
(forall (?AGENT ?ESCAPE)
 (exists (?CONFINE)
  (and (instance ?CONFINE Process)
       (=> (instance ?AGENT Agent)
        (=> (and (instance ?ESCAPE Escaping) (agent ?ESCAPE ?AGENT))
         (and (instance ?CONFINE Confining)
              (and (patient ?CONFINE ?AGENT)
                   (meetsTemporally (WhenFn ?CONFINE)
                    (WhenFn ?ESCAPE)))))))))
*/
fof(a3050,axiom,! [AGENT,ESCAPE] : (? [CONFINE] : ((s_instance(CONFINE, s_Process) & (s_instance(AGENT, s_Agent) => ((s_instance(ESCAPE, s_Escaping) & s_agent(ESCAPE, AGENT)) => (s_instance(CONFINE, s_Confining) & (s_patient(CONFINE, AGENT) & s_meetsTemporally(s_WhenFn(CONFINE), s_WhenFn(ESCAPE)))))))))).

/*
(forall (?AGENT ?ESCAPE)
 (=> (instance ?AGENT CognitiveAgent)
  (=> (instance ?ESCAPE Escaping)
   (not (holdsRight (agent ?ESCAPE ?AGENT) ?AGENT)))))
*/
%% no translation to TPTP available.

/*
(instance Leaving SetOrClass)
*/
fof(a3051,axiom,s_instance(s_Leaving, s_SetOrClass)).

/*
(subclass Leaving Translocation)
*/
fof(a3052,axiom,s_subclass(s_Leaving, s_Translocation)).

/*
(forall (?LEAVE)
 (exists (?GO)
  (and (instance ?GO Process)
       (=> (instance ?LEAVE Leaving)
        (and (instance ?GO Translocation)
             (and (subProcess ?LEAVE ?GO)
                  (starts (WhenFn ?LEAVE) (WhenFn ?GO))))))))
*/
fof(a3053,axiom,! [LEAVE] : (? [GO] : ((s_instance(GO, s_Process) & (s_instance(LEAVE, s_Leaving) => (s_instance(GO, s_Translocation) & (s_subProcess(LEAVE, GO) & s_starts(s_WhenFn(LEAVE), s_WhenFn(GO))))))))).

/*
(instance Arriving SetOrClass)
*/
fof(a3054,axiom,s_instance(s_Arriving, s_SetOrClass)).

/*
(subclass Arriving Translocation)
*/
fof(a3055,axiom,s_subclass(s_Arriving, s_Translocation)).

/*
(forall (?ARRIVE)
 (exists (?GO)
  (and (instance ?GO Process)
       (=> (instance ?ARRIVE Arriving)
        (and (instance ?GO Translocation)
             (and (subProcess ?ARRIVE ?GO)
                  (finishes (WhenFn ?ARRIVE) (WhenFn ?GO))))))))
*/
fof(a3056,axiom,! [ARRIVE] : (? [GO] : ((s_instance(GO, s_Process) & (s_instance(ARRIVE, s_Arriving) => (s_instance(GO, s_Translocation) & (s_subProcess(ARRIVE, GO) & s_finishes(s_WhenFn(ARRIVE), s_WhenFn(GO))))))))).

/*
(instance Disappearing SetOrClass)
*/
fof(a3057,axiom,s_instance(s_Disappearing, s_SetOrClass)).

/*
(subclass Disappearing Translocation)
*/
fof(a3058,axiom,s_subclass(s_Disappearing, s_Translocation)).

/*
(forall (?D)
 (exists (?OBJ ?AGENT ?SEARCH ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?SEARCH Process)
            (instance ?AGENT Agent) (instance ?OBJ Entity))
       (=> (instance ?D Disappearing)
        (and (instance ?SEARCH Searching)
             (and (earlier (WhenFn ?D) (WhenFn ?SEARCH))
                  (and (agent ?SEARCH ?AGENT)
                       (and (instance ?OBJ Object)
                            (and (patient ?D ?OBJ)
                                 (and
                                  (patient ?SEARCH ?OBJ)
                                  (and
                                   (instance ?TIME TimeInterval)
                                   (and
                                    (temporalPart
                                     ?TIME
                                     (WhenFn ?SEARCH))
                                    (holdsDuring
                                     ?TIME
                                     (not
                                      (modalAttribute
                                       (exists
                                        (?DISC)
                                        (and
                                         (instance ?DISC Discovering)
                                         (and
                                          (agent ?DISC ?AGENT)
                                          (patient ?DISC ?OBJ))))
                                       Possibility)))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Immigrating SetOrClass)
*/
fof(a3059,axiom,s_instance(s_Immigrating, s_SetOrClass)).

/*
(subclass Immigrating Translocation)
*/
fof(a3060,axiom,s_subclass(s_Immigrating, s_Translocation)).

/*
(forall (?A ?I)
 (exists (?N1 ?N2)
  (and (and (instance ?N2 GeopoliticalArea)
            (instance ?N1 GeopoliticalArea))
       (=> (instance ?A Organism)
        (=> (and (instance ?I Immigrating) (agent ?I ?A))
         (and (instance ?N1 Nation)
              (and (instance ?N2 Nation)
                   (and (origin ?I ?N1)
                        (and (destination ?I ?N2)
                             (and (not (equal ?N1 ?N2))
                                  (and
                                   (member ?A (CitizenryFn ?N1))
                                   (and
                                    (not (member ?A (CitizenryFn ?N2)))
                                    (hasPurpose
                                     ?I
                                     (inhabits ?A ?N2))))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?A ?I)
 (=> (instance ?A Agent)
  (=> (and (instance ?I Immigrating) (agent ?I ?A))
   (instance ?A Human))))
*/
fof(a3061,axiom,! [A,I] : ((s_instance(A, s_Agent) => ((s_instance(I, s_Immigrating) & s_agent(I, A)) => s_instance(A, s_Human))))).

/*
(instance Boarding SetOrClass)
*/
fof(a3062,axiom,s_instance(s_Boarding, s_SetOrClass)).

/*
(subclass Boarding Translocation)
*/
fof(a3063,axiom,s_subclass(s_Boarding, s_Translocation)).

/*
(forall (?V ?B)
 (=> (instance ?V Entity)
  (=> (and (instance ?B Boarding) (patient ?B ?V))
   (instance ?V Vehicle))))
*/
fof(a3064,axiom,! [V,B] : ((s_instance(V, s_Entity) => ((s_instance(B, s_Boarding) & s_patient(B, V)) => s_instance(V, s_Vehicle))))).

/*
(forall (?A ?V ?AGENT ?B)
 (=>
  (and (instance ?A SelfConnectedObject) (instance ?V Vehicle)
       (instance ?AGENT Agent))
  (=>
   (and (instance ?B Boarding) (and (agent ?B ?AGENT) (patient ?B ?V)))
   (and (holdsDuring (BeginFn (WhenFn ?B)) (not (onboard ?A ?V)))
        (holdsDuring (EndFn (WhenFn ?B)) (onboard ?A ?V))))))
*/
%% no translation to TPTP available.

/*
(subrelation onboard located)
*/
fof(a3065,axiom,s_subrelation(s_onboard_m, s_located_m)).

/*
(forall (?V ?O)
 (=>
  (and (instance ?O SelfConnectedObject) (instance ?V Vehicle)
       (instance ?V SelfConnectedObject))
  (=> (onboard ?O ?V) (contains ?V ?O))))
*/
fof(a3066,axiom,! [V,O] : (((s_instance(O, s_SelfConnectedObject) & s_instance(V, s_Vehicle) & s_instance(V, s_SelfConnectedObject)) => (s_onboard(O, V) => s_contains(V, O))))).

/*
(forall (?T ?V ?O)
 (=> (and (instance ?V Vehicle) (instance ?O SelfConnectedObject))
  (=>
   (and (onboard ?O ?V)
        (and (instrument ?T ?V) (instance ?T Transportation)))
   (patient ?T ?O))))
*/
fof(a3067,axiom,! [T,V,O] : (((s_instance(V, s_Vehicle) & s_instance(O, s_SelfConnectedObject)) => ((s_onboard(O, V) & (s_instrument(T, V) & s_instance(T, s_Transportation))) => s_patient(T, O))))).

/*
(instance Deboarding SetOrClass)
*/
fof(a3068,axiom,s_instance(s_Deboarding, s_SetOrClass)).

/*
(subclass Deboarding Translocation)
*/
fof(a3069,axiom,s_subclass(s_Deboarding, s_Translocation)).

/*
(forall (?VEHICLE ?B)
 (=> (instance ?VEHICLE Entity)
  (=> (and (instance ?B Deboarding) (patient ?B ?VEHICLE))
   (instance ?VEHICLE Vehicle))))
*/
fof(a3070,axiom,! [VEHICLE,B] : ((s_instance(VEHICLE, s_Entity) => ((s_instance(B, s_Deboarding) & s_patient(B, VEHICLE)) => s_instance(VEHICLE, s_Vehicle))))).

/*
(forall (?V ?A ?B)
 (=>
  (and (instance ?V Vehicle) (instance ?A Agent)
       (instance ?A SelfConnectedObject))
  (=>
   (and (instance ?B Deboarding) (and (agent ?B ?A) (patient ?B ?V)))
   (and (holdsDuring (BeginFn (WhenFn ?B)) (onboard ?A ?V))
        (holdsDuring (EndFn (WhenFn ?B)) (not (onboard ?A ?V)))))))
*/
%% no translation to TPTP available.

/*
(subclass Rotating Motion)
*/
fof(a3071,axiom,s_subclass(s_Rotating, s_Motion)).

/*
(forall (?A ?R)
 (exists (?L)
  (and (instance ?L Object)
       (=> (instance ?A Physical)
        (=> (and (instance ?R Rotating) (patient ?R ?A))
         (and (holdsDuring (BeginFn (WhenFn ?R)) (located ?A ?L))
              (holdsDuring (EndFn (WhenFn ?R)) (located ?A ?L))))))))
*/
%% no translation to TPTP available.

/*
(subclass Tremor Rotating)
*/
fof(a3072,axiom,s_subclass(s_Tremor, s_Rotating)).

/*
(instance axis BinaryPredicate)
*/
fof(a3073,axiom,s_instance(s_axis_m, s_BinaryPredicate)).

/*
(forall (?OBJ ?AXIS)
 (exists (?R)
  (forall (?R2)
   (=> (instance ?R2 Process)
    (and (instance ?R Process)
         (=> (and (instance ?AXIS Agent) (instance ?OBJ Agent))
          (=> (axis ?AXIS ?OBJ)
           (and (instance ?R Rotating)
                (and (part ?AXIS ?OBJ)
                     (and (experiencer ?R ?OBJ)
                          (not (and
                                (instance ?R2 Rotating)
                                (and
                                 (subProcess ?R2 ?R)
                                 (experiencer ?R2 ?AXIS))))))))))))))
*/
fof(a3074,axiom,! [OBJ,AXIS] : (? [R] : (! [R2] : ((s_instance(R2, s_Process) => (s_instance(R, s_Process) & ((s_instance(AXIS, s_Agent) & s_instance(OBJ, s_Agent)) => (s_axis(AXIS, OBJ) => (s_instance(R, s_Rotating) & (s_part(AXIS, OBJ) & (s_experiencer(R, OBJ) & (~ (s_instance(R2, s_Rotating) & (s_subProcess(R2, R) & s_experiencer(R2, AXIS))))))))))))))).

/*
(instance CentrifugalMotion SetOrClass)
*/
fof(a3075,axiom,s_instance(s_CentrifugalMotion, s_SetOrClass)).

/*
(subclass CentrifugalMotion Rotating)
*/
fof(a3076,axiom,s_subclass(s_CentrifugalMotion, s_Rotating)).

/*
(disjoint CentrifugalMotion CentripetalMotion)
*/
fof(a3077,axiom,s_disjoint(s_CentrifugalMotion, s_CentripetalMotion)).

/*
(forall (?CM)
 (exists (?R ?A ?O1 ?O2)
  (and (and (instance ?O2 Agent) (instance ?O1 Agent)
            (instance ?A Object) (instance ?R Process))
       (=> (instance ?CM CentrifugalMotion)
        (and (instance ?R Rotating)
             (and (axis ?A ?O1)
                  (and (origin ?CM ?A)
                       (and (experiencer ?R ?O1)
                            (and (experiencer ?CM ?O2)
                                 (causes ?R ?CM))))))))))
*/
fof(a3078,axiom,! [CM] : (? [R,A,O1,O2] : (((s_instance(O2, s_Agent) & s_instance(O1, s_Agent) & s_instance(A, s_Object) & s_instance(R, s_Process)) & (s_instance(CM, s_CentrifugalMotion) => (s_instance(R, s_Rotating) & (s_axis(A, O1) & (s_origin(CM, A) & (s_experiencer(R, O1) & (s_experiencer(CM, O2) & s_causes(R, CM))))))))))).

/*
(instance CentripetalMotion SetOrClass)
*/
fof(a3079,axiom,s_instance(s_CentripetalMotion, s_SetOrClass)).

/*
(instance Rotating SetOrClass)
*/
fof(a3080,axiom,s_instance(s_Rotating, s_SetOrClass)).

/*
(subclass CentripetalMotion Rotating)
*/
fof(a3081,axiom,s_subclass(s_CentripetalMotion, s_Rotating)).

/*
(forall (?CM)
 (exists (?R ?A ?O1 ?O2)
  (and (and (instance ?O2 Agent) (instance ?O1 Agent)
            (instance ?A Object) (instance ?R Process))
       (=> (instance ?CM CentripetalMotion)
        (and (instance ?R Rotating)
             (and (axis ?A ?O1)
                  (and (destination ?CM ?A)
                       (and (experiencer ?R ?O1)
                            (and (experiencer ?CM ?O2)
                                 (causes ?R ?CM))))))))))
*/
fof(a3082,axiom,! [CM] : (? [R,A,O1,O2] : (((s_instance(O2, s_Agent) & s_instance(O1, s_Agent) & s_instance(A, s_Object) & s_instance(R, s_Process)) & (s_instance(CM, s_CentripetalMotion) => (s_instance(R, s_Rotating) & (s_axis(A, O1) & (s_destination(CM, A) & (s_experiencer(R, O1) & (s_experiencer(CM, O2) & s_causes(R, CM))))))))))).

/*
(instance Reversing SetOrClass)
*/
fof(a3083,axiom,s_instance(s_Reversing, s_SetOrClass)).

/*
(subclass Reversing Motion)
*/
fof(a3084,axiom,s_subclass(s_Reversing, s_Motion)).

/*
(forall (?REVERSE ?BOTTOM ?OBJ ?TOP)
 (=>
  (and (instance ?BOTTOM SelfConnectedObject)
       (instance ?OBJ SelfConnectedObject)
       (instance ?TOP SelfConnectedObject))
  (=>
   (and (instance ?REVERSE Reversing)
        (and (patient ?REVERSE ?OBJ)
             (holdsDuring (BeginFn (WhenFn ?REVERSE))
              (and (top ?TOP ?OBJ) (bottom ?BOTTOM ?OBJ)))))
   (holdsDuring (EndFn (WhenFn ?REVERSE))
    (and (top ?BOTTOM ?OBJ) (bottom ?TOP ?OBJ))))))
*/
%% no translation to TPTP available.

/*
(instance Dripping SetOrClass)
*/
fof(a3085,axiom,s_instance(s_Dripping, s_SetOrClass)).

/*
(subclass Dripping LiquidMotion)
*/
fof(a3086,axiom,s_subclass(s_Dripping, s_LiquidMotion)).

/*
(subclass Stirring LiquidMotion)
*/
fof(a3087,axiom,s_subclass(s_Stirring, s_LiquidMotion)).

/*
(instance Stirring SetOrClass)
*/
fof(a3088,axiom,s_instance(s_Stirring, s_SetOrClass)).

/*
(subclass Stirring Combining)
*/
fof(a3089,axiom,s_subclass(s_Stirring, s_Combining)).

/*
(subclass Pouring LiquidMotion)
*/
fof(a3090,axiom,s_subclass(s_Pouring, s_LiquidMotion)).

/*
(instance Pouring SetOrClass)
*/
fof(a3091,axiom,s_instance(s_Pouring, s_SetOrClass)).

/*
(subclass Pouring Transfer)
*/
fof(a3092,axiom,s_subclass(s_Pouring, s_Transfer)).

/*
(forall (?POUR)
 (exists (?LIQUID ?CONTAINER1 ?CONTAINER2)
  (and (and (instance ?CONTAINER2 Entity) (instance ?CONTAINER1 Object)
            (instance ?LIQUID Object))
       (=> (instance ?POUR Pouring)
        (and (origin ?POUR ?CONTAINER1)
             (and (destination ?POUR ?CONTAINER2)
                  (and (instance ?CONTAINER1 Container)
                       (and (instance ?CONTAINER2 Container)
                            (and (not (equal ?CONTAINER1 ?CONTAINER2))
                                 (and
                                  (patient ?POUR ?LIQUID)
                                  (and
                                   (attribute ?LIQUID Liquid)
                                   (instance
                                    ?LIQUID
                                    Substance))))))))))))
*/
fof(a3093,axiom,! [POUR] : (? [LIQUID,CONTAINER1,CONTAINER2] : (((s_instance(CONTAINER2, s_Entity) & s_instance(CONTAINER1, s_Object) & s_instance(LIQUID, s_Object)) & (s_instance(POUR, s_Pouring) => (s_origin(POUR, CONTAINER1) & (s_destination(POUR, CONTAINER2) & (s_instance(CONTAINER1, s_Container) & (s_instance(CONTAINER2, s_Container) & ((~ (CONTAINER1 = CONTAINER2)) & (s_patient(POUR, LIQUID) & (s_attribute(LIQUID, s_Liquid) & s_instance(LIQUID, s_Substance))))))))))))).

/*
(instance WaterWave SetOrClass)
*/
fof(a3094,axiom,s_instance(s_WaterWave, s_SetOrClass)).

/*
(subclass WaterWave LiquidMotion)
*/
fof(a3095,axiom,s_subclass(s_WaterWave, s_LiquidMotion)).

/*
(forall (?WAVE)
 (exists (?AREA)
  (and (instance ?AREA Object)
       (=> (instance ?WAVE WaterWave)
        (and (instance ?AREA WaterArea) (eventLocated ?WAVE ?AREA))))))
*/
fof(a3096,axiom,! [WAVE] : (? [AREA] : ((s_instance(AREA, s_Object) & (s_instance(WAVE, s_WaterWave) => (s_instance(AREA, s_WaterArea) & s_eventLocated(WAVE, AREA))))))).

/*
(instance waterDepth BinaryPredicate)
*/
fof(a3097,axiom,s_instance(s_waterDepth_m, s_BinaryPredicate)).

/*
(subrelation waterDepth length)
*/
fof(a3098,axiom,s_subrelation(s_waterDepth_m, s_length_m)).

/*
(forall (?DEPTH ?AREA)
 (exists (?BOTTOM ?TOP)
  (and (and (instance ?TOP SelfConnectedObject)
            (instance ?BOTTOM SelfConnectedObject))
       (=>
        (and (instance ?DEPTH LengthMeasure) (instance ?AREA WaterArea)
             (instance ?AREA SelfConnectedObject))
        (=> (waterDepth ?AREA ?DEPTH)
         (and (depth ?TOP ?BOTTOM ?DEPTH)
              (and (top ?TOP ?AREA) (bottom ?BOTTOM ?AREA))))))))
*/
fof(a3099,axiom,! [DEPTH,AREA] : (? [BOTTOM,TOP] : (((s_instance(TOP, s_SelfConnectedObject) & s_instance(BOTTOM, s_SelfConnectedObject)) & ((s_instance(DEPTH, s_LengthMeasure) & s_instance(AREA, s_WaterArea) & s_instance(AREA, s_SelfConnectedObject)) => (s_waterDepth(AREA, DEPTH) => (s_depth(TOP, BOTTOM, DEPTH) & (s_top(TOP, AREA) & s_bottom(BOTTOM, AREA))))))))).

/*
(instance Flooding SetOrClass)
*/
fof(a3100,axiom,s_instance(s_Flooding, s_SetOrClass)).

/*
(subclass Flooding LiquidMotion)
*/
fof(a3101,axiom,s_subclass(s_Flooding, s_LiquidMotion)).

/*
(forall (?P ?F)
 (exists (?L1 ?L2)
  (and (and (instance ?L2 LengthMeasure) (instance ?L1 LengthMeasure))
       (=> (instance ?P WaterArea)
        (=> (and (instance ?F Flooding) (eventLocated ?F ?P))
         (and (holdsDuring (BeginFn (WhenFn ?F)) (waterDepth ?P ?L1))
              (and (holdsDuring (EndFn (WhenFn ?F))
                    (waterDepth ?P ?L2))
                   (greaterThan ?L2 ?L1))))))))
*/
%% no translation to TPTP available.

/*
(subclass Spraying LiquidMotion)
*/
fof(a3102,axiom,s_subclass(s_Spraying, s_LiquidMotion)).

/*
(instance Spraying SetOrClass)
*/
fof(a3103,axiom,s_instance(s_Spraying, s_SetOrClass)).

/*
(subclass Spraying Transfer)
*/
fof(a3104,axiom,s_subclass(s_Spraying, s_Transfer)).

/*
(instance Pulling SetOrClass)
*/
fof(a3105,axiom,s_instance(s_Pulling, s_SetOrClass)).

/*
(subclass Pulling Motion)
*/
fof(a3106,axiom,s_subclass(s_Pulling, s_Motion)).

/*
(instance Submarine SetOrClass)
*/
fof(a3107,axiom,s_instance(s_Submarine, s_SetOrClass)).

/*
(subclass Submarine WaterVehicle)
*/
fof(a3108,axiom,s_subclass(s_Submarine, s_WaterVehicle)).

/*
(instance AirTransportation SetOrClass)
*/
fof(a3109,axiom,s_instance(s_AirTransportation, s_SetOrClass)).

/*
(subclass AirTransportation Transportation)
*/
fof(a3110,axiom,s_subclass(s_AirTransportation, s_Transportation)).

/*
(forall (?TRANSPORT)
 (exists (?CRAFT ?REGION)
  (and (and (instance ?REGION Object) (instance ?CRAFT Object))
       (=> (instance ?TRANSPORT AirTransportation)
        (and (instance ?CRAFT Aircraft)
             (and (instance ?REGION AtmosphericRegion)
                  (and (instrument ?TRANSPORT ?CRAFT)
                       (eventLocated ?TRANSPORT ?REGION))))))))
*/
fof(a3111,axiom,! [TRANSPORT] : (? [CRAFT,REGION] : (((s_instance(REGION, s_Object) & s_instance(CRAFT, s_Object)) & (s_instance(TRANSPORT, s_AirTransportation) => (s_instance(CRAFT, s_Aircraft) & (s_instance(REGION, s_AtmosphericRegion) & (s_instrument(TRANSPORT, CRAFT) & s_eventLocated(TRANSPORT, REGION))))))))).

/*
(instance SpaceTransportation SetOrClass)
*/
fof(a3112,axiom,s_instance(s_SpaceTransportation, s_SetOrClass)).

/*
(subclass SpaceTransportation Transportation)
*/
fof(a3113,axiom,s_subclass(s_SpaceTransportation, s_Transportation)).

/*
(forall (?TRANSPORT)
 (exists (?CRAFT ?REGION)
  (and (and (instance ?REGION Object) (instance ?CRAFT Object))
       (=> (instance ?TRANSPORT SpaceTransportation)
        (and (instance ?CRAFT Spacecraft)
             (and (instance ?REGION SpaceRegion)
                  (and (instrument ?TRANSPORT ?CRAFT)
                       (eventLocated ?TRANSPORT ?REGION))))))))
*/
fof(a3114,axiom,! [TRANSPORT] : (? [CRAFT,REGION] : (((s_instance(REGION, s_Object) & s_instance(CRAFT, s_Object)) & (s_instance(TRANSPORT, s_SpaceTransportation) => (s_instance(CRAFT, s_Spacecraft) & (s_instance(REGION, s_SpaceRegion) & (s_instrument(TRANSPORT, CRAFT) & s_eventLocated(TRANSPORT, REGION))))))))).

/*
(subclass Spacecraft Vehicle)
*/
fof(a3115,axiom,s_subclass(s_Spacecraft, s_Vehicle)).

/*
(forall (?CRAFT)
 (=> (instance ?CRAFT Spacecraft)
  (capability SpaceTransportation instrument ?CRAFT)))
*/
fof(a3116,axiom,! [CRAFT] : ((s_instance(CRAFT, s_Spacecraft) => s_capability(s_SpaceTransportation, s_instrument_m, CRAFT)))).

/*
(instance Spacecraft SetOrClass)
*/
fof(a3117,axiom,s_instance(s_Spacecraft, s_SetOrClass)).

/*
(subclass Rocket Spacecraft)
*/
fof(a3118,axiom,s_subclass(s_Rocket, s_Spacecraft)).

/*
(subclass Missile Projectile)
*/
fof(a3119,axiom,s_subclass(s_Missile, s_Projectile)).

/*
(instance SelfPoweredDevice SetOrClass)
*/
fof(a3120,axiom,s_instance(s_SelfPoweredDevice, s_SetOrClass)).

/*
(subclass Missile SelfPoweredDevice)
*/
fof(a3121,axiom,s_subclass(s_Missile, s_SelfPoweredDevice)).

/*
(forall (?M)
 (exists (?B)
  (and (instance ?B Object)
       (=> (instance ?M Missile)
        (and (instance ?B Bomb) (part ?B ?M))))))
*/
fof(a3122,axiom,! [M] : (? [B] : ((s_instance(B, s_Object) & (s_instance(M, s_Missile) => (s_instance(B, s_Bomb) & s_part(B, M))))))).

/*
(instance BallisticMissile SetOrClass)
*/
fof(a3123,axiom,s_instance(s_BallisticMissile, s_SetOrClass)).

/*
(instance Missile SetOrClass)
*/
fof(a3124,axiom,s_instance(s_Missile, s_SetOrClass)).

/*
(subclass BallisticMissile Missile)
*/
fof(a3125,axiom,s_subclass(s_BallisticMissile, s_Missile)).

/*
(subclass WaterTransportation Transportation)
*/
fof(a3126,axiom,s_subclass(s_WaterTransportation, s_Transportation)).

/*
(forall (?TRANSPORT)
 (exists (?CRAFT ?AREA)
  (and (and (instance ?AREA Object) (instance ?CRAFT Object))
       (=> (instance ?TRANSPORT WaterTransportation)
        (and (instance ?CRAFT WaterVehicle)
             (and (instance ?AREA WaterArea)
                  (and (instrument ?TRANSPORT ?CRAFT)
                       (eventLocated ?TRANSPORT ?AREA))))))))
*/
fof(a3127,axiom,! [TRANSPORT] : (? [CRAFT,AREA] : (((s_instance(AREA, s_Object) & s_instance(CRAFT, s_Object)) & (s_instance(TRANSPORT, s_WaterTransportation) => (s_instance(CRAFT, s_WaterVehicle) & (s_instance(AREA, s_WaterArea) & (s_instrument(TRANSPORT, CRAFT) & s_eventLocated(TRANSPORT, AREA))))))))).

/*
(forall (?CRAFT)
 (=> (instance ?CRAFT WaterVehicle)
  (capability WaterTransportation instrument ?CRAFT)))
*/
fof(a3128,axiom,! [CRAFT] : ((s_instance(CRAFT, s_WaterVehicle) => s_capability(s_WaterTransportation, s_instrument_m, CRAFT)))).

/*
(instance Rowing SetOrClass)
*/
fof(a3129,axiom,s_instance(s_Rowing, s_SetOrClass)).

/*
(instance WaterTransportation SetOrClass)
*/
fof(a3130,axiom,s_instance(s_WaterTransportation, s_SetOrClass)).

/*
(subclass Rowing WaterTransportation)
*/
fof(a3131,axiom,s_subclass(s_Rowing, s_WaterTransportation)).

/*
(forall (?R)
 (exists (?O)
  (and (instance ?O Object)
       (=> (instance ?R Rowing)
        (and (instance ?O Oar) (instrument ?R ?O))))))
*/
fof(a3132,axiom,! [R] : (? [O] : ((s_instance(O, s_Object) & (s_instance(R, s_Rowing) => (s_instance(O, s_Oar) & s_instrument(R, O))))))).

/*
(subclass LandTransportation Transportation)
*/
fof(a3133,axiom,s_subclass(s_LandTransportation, s_Transportation)).

/*
(forall (?LAND)
 (exists (?CRAFT ?AREA)
  (and (and (instance ?AREA Object) (instance ?CRAFT Object))
       (=> (instance ?LAND LandTransportation)
        (and (instance ?CRAFT LandVehicle)
             (and (instance ?AREA LandArea)
                  (and (instrument ?LAND ?CRAFT)
                       (located ?CRAFT ?AREA))))))))
*/
fof(a3134,axiom,! [LAND] : (? [CRAFT,AREA] : (((s_instance(AREA, s_Object) & s_instance(CRAFT, s_Object)) & (s_instance(LAND, s_LandTransportation) => (s_instance(CRAFT, s_LandVehicle) & (s_instance(AREA, s_LandArea) & (s_instrument(LAND, CRAFT) & s_located(CRAFT, AREA))))))))).

/*
(forall (?VEHICLE)
 (=> (instance ?VEHICLE LandVehicle)
  (capability LandTransportation instrument ?VEHICLE)))
*/
fof(a3135,axiom,! [VEHICLE] : ((s_instance(VEHICLE, s_LandVehicle) => s_capability(s_LandTransportation, s_instrument_m, VEHICLE)))).

/*
(forall (?P ?T)
 (=> (instance ?P Object)
  (=> (and (instance ?T LandTransportation) (path ?T ?P))
   (instance ?P LandTransitway))))
*/
fof(a3136,axiom,! [P,T] : ((s_instance(P, s_Object) => ((s_instance(T, s_LandTransportation) & s_path(T, P)) => s_instance(P, s_LandTransitway))))).

/*
(subclass TransportViaRoadVehicle Transportation)
*/
fof(a3137,axiom,s_subclass(s_TransportViaRoadVehicle, s_Transportation)).

/*
(instance TransportViaRoadVehicle SetOrClass)
*/
fof(a3138,axiom,s_instance(s_TransportViaRoadVehicle, s_SetOrClass)).

/*
(instance LandTransportation SetOrClass)
*/
fof(a3139,axiom,s_instance(s_LandTransportation, s_SetOrClass)).

/*
(subclass TransportViaRoadVehicle LandTransportation)
*/
fof(a3140,axiom,s_subclass(s_TransportViaRoadVehicle, s_LandTransportation)).

/*
(instance FlyingAircraft SetOrClass)
*/
fof(a3141,axiom,s_instance(s_FlyingAircraft, s_SetOrClass)).

/*
(subclass FlyingAircraft Driving)
*/
fof(a3142,axiom,s_subclass(s_FlyingAircraft, s_Driving)).

/*
(forall (?FLY)
 (exists (?CRAFT)
  (and (instance ?CRAFT Entity)
       (=> (instance ?FLY FlyingAircraft)
        (and (instance ?CRAFT Aircraft) (patient ?FLY ?CRAFT))))))
*/
fof(a3143,axiom,! [FLY] : (? [CRAFT] : ((s_instance(CRAFT, s_Entity) & (s_instance(FLY, s_FlyingAircraft) => (s_instance(CRAFT, s_Aircraft) & s_patient(FLY, CRAFT))))))).

/*
(forall (?FLY)
 (exists (?FLIGHT)
  (and (instance ?FLIGHT Process)
       (=> (instance ?FLY FlyingAircraft)
        (and (instance ?FLIGHT AirTransportation)
             (subProcess ?FLY ?FLIGHT))))))
*/
fof(a3144,axiom,! [FLY] : (? [FLIGHT] : ((s_instance(FLIGHT, s_Process) & (s_instance(FLY, s_FlyingAircraft) => (s_instance(FLIGHT, s_AirTransportation) & s_subProcess(FLY, FLIGHT))))))).

/*
(subclass Aircraft Vehicle)
*/
fof(a3145,axiom,s_subclass(s_Aircraft, s_Vehicle)).

/*
(forall (?CRAFT)
 (=> (instance ?CRAFT Aircraft)
  (capability AirTransportation instrument ?CRAFT)))
*/
fof(a3146,axiom,! [CRAFT] : ((s_instance(CRAFT, s_Aircraft) => s_capability(s_AirTransportation, s_instrument_m, CRAFT)))).

/*
(instance Helicopter SetOrClass)
*/
fof(a3147,axiom,s_instance(s_Helicopter, s_SetOrClass)).

/*
(instance Aircraft SetOrClass)
*/
fof(a3148,axiom,s_instance(s_Aircraft, s_SetOrClass)).

/*
(subclass Helicopter Aircraft)
*/
fof(a3149,axiom,s_subclass(s_Helicopter, s_Aircraft)).

/*
(instance MilitaryArtifact SetOrClass)
*/
fof(a3150,axiom,s_instance(s_MilitaryArtifact, s_SetOrClass)).

/*
(subclass MilitaryArtifact Artifact)
*/
fof(a3151,axiom,s_subclass(s_MilitaryArtifact, s_Artifact)).

/*
(forall (?A)
 (=> (instance ?A MilitaryArtifact)
  (hasPurpose ?A
   (exists (?O)
    (and (instance ?O MilitaryOrganization) (uses ?A ?O))))))
*/
%% no translation to TPTP available.

/*
(subclass ExplosiveDevice Device)
*/
fof(a3152,axiom,s_subclass(s_ExplosiveDevice, s_Device)).

/*
(forall (?ED)
 (=> (instance ?ED ExplosiveDevice)
  (hasPurpose ?ED
   (exists (?E ?D)
    (and (instance ?E Explosion)
         (and (instrument ?E ?ED)
              (and (causes ?E ?D) (instance ?D Damaging))))))))
*/
%% no translation to TPTP available.

/*
(subclass ExplosiveMine ExplosiveDevice)
*/
fof(a3153,axiom,s_subclass(s_ExplosiveMine, s_ExplosiveDevice)).

/*
(instance ExplosiveMine SetOrClass)
*/
fof(a3154,axiom,s_instance(s_ExplosiveMine, s_SetOrClass)).

/*
(subclass ExplosiveMine Weapon)
*/
fof(a3155,axiom,s_subclass(s_ExplosiveMine, s_Weapon)).

/*
(instance ExplosiveSubstance SetOrClass)
*/
fof(a3156,axiom,s_instance(s_ExplosiveSubstance, s_SetOrClass)).

/*
(subclass ExplosiveSubstance Substance)
*/
fof(a3157,axiom,s_subclass(s_ExplosiveSubstance, s_Substance)).

/*
(forall (?S)
 (=> (instance ?S ExplosiveSubstance)
  (capability Explosion instrument ?S)))
*/
fof(a3158,axiom,! [S] : ((s_instance(S, s_ExplosiveSubstance) => s_capability(s_Explosion, s_instrument_m, S)))).

/*
(forall (?D)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?D ExplosiveDevice)
        (and (instance ?S ExplosiveSubstance) (part ?S ?D))))))
*/
fof(a3159,axiom,! [D] : (? [S] : ((s_instance(S, s_Object) & (s_instance(D, s_ExplosiveDevice) => (s_instance(S, s_ExplosiveSubstance) & s_part(S, D))))))).

/*
(instance Driveway SetOrClass)
*/
fof(a3160,axiom,s_instance(s_Driveway, s_SetOrClass)).

/*
(subclass Driveway Roadway)
*/
fof(a3161,axiom,s_subclass(s_Driveway, s_Roadway)).

/*
(instance OperatingFn UnaryFunction)
*/
fof(a3162,axiom,s_instance(s_OperatingFn_m, s_UnaryFunction)).

/*
(rangeSubclass OperatingFn Process)
*/
fof(a3163,axiom,s_rangeSubclass(s_OperatingFn_m, s_Process)).

/*
(instance Installing SetOrClass)
*/
fof(a3164,axiom,s_instance(s_Installing, s_SetOrClass)).

/*
(subclass Installing Putting)
*/
fof(a3165,axiom,s_subclass(s_Installing, s_Putting)).

/*
(forall (?DEVICE ?INSTALL)
 (=> (instance ?DEVICE Entity)
  (=> (and (instance ?INSTALL Installing) (patient ?INSTALL ?DEVICE))
   (instance ?DEVICE Device))))
*/
fof(a3166,axiom,! [DEVICE,INSTALL] : ((s_instance(DEVICE, s_Entity) => ((s_instance(INSTALL, s_Installing) & s_patient(INSTALL, DEVICE)) => s_instance(DEVICE, s_Device))))).

/*
(forall (?PURPOSE ?DEVICE ?INSTALL)
 (=> (and (instance ?PURPOSE Formula) (instance ?DEVICE Physical))
  (=>
   (and (instance ?INSTALL Installing)
        (and (patient ?INSTALL ?DEVICE) (hasPurpose ?DEVICE ?PURPOSE)))
   (holdsDuring (EndFn (WhenFn ?INSTALL)) (truth ?PURPOSE True)))))
*/
%% no translation to TPTP available.

/*
(instance Rock SetOrClass)
*/
fof(a3167,axiom,s_instance(s_Rock, s_SetOrClass)).

/*
(subclass Rock Substance)
*/
fof(a3168,axiom,s_subclass(s_Rock, s_Substance)).

/*
(forall (?Rock) (=> (instance ?Rock Rock) (attribute ?Rock Solid)))
*/
fof(a3169,axiom,! [ROCK] : ((s_instance(ROCK, s_Rock) => s_attribute(ROCK, s_Solid)))).

/*
(forall (?Rock)
 (exists (?Mineral)
  (and (instance ?Mineral Object)
       (=> (instance ?Rock Rock)
        (and (instance ?Mineral Mineral) (part ?Mineral ?Rock))))))
*/
fof(a3170,axiom,! [ROCK] : (? [MINERAL] : ((s_instance(MINERAL, s_Object) & (s_instance(ROCK, s_Rock) => (s_instance(MINERAL, s_Mineral) & s_part(MINERAL, ROCK))))))).

/*
(subclass Soil Mixture)
*/
fof(a3171,axiom,s_subclass(s_Soil, s_Mixture)).

/*
(forall (?Soil)
 (exists (?Humus ?Mineral)
  (and (and (instance ?Mineral Object) (instance ?Humus Object))
       (=> (instance ?Soil Soil)
        (and (instance ?Humus Humus)
             (and (instance ?Mineral Mineral)
                  (and (part ?Humus ?Soil) (part ?Mineral ?Soil))))))))
*/
fof(a3172,axiom,! [SOIL] : (? [HUMUS,MINERAL] : (((s_instance(MINERAL, s_Object) & s_instance(HUMUS, s_Object)) & (s_instance(SOIL, s_Soil) => (s_instance(HUMUS, s_Humus) & (s_instance(MINERAL, s_Mineral) & (s_part(HUMUS, SOIL) & s_part(MINERAL, SOIL))))))))).

/*
(instance Clay SetOrClass)
*/
fof(a3173,axiom,s_instance(s_Clay, s_SetOrClass)).

/*
(instance Soil SetOrClass)
*/
fof(a3174,axiom,s_instance(s_Soil, s_SetOrClass)).

/*
(subclass Clay Soil)
*/
fof(a3175,axiom,s_subclass(s_Clay, s_Soil)).

/*
(forall (?Soil ?Size ?Particle)
 (=>
  (and (instance ?Size RealNumber) (instance ?Particle Object)
       (instance ?Particle Circle))
  (=>
   (and (part ?Particle ?Soil)
        (and (instance ?Soil Clay)
             (diameter ?Particle (MeasureFn ?Size Centimeter))))
   (greaterThan 2.0e-4 ?Size))))
*/
fof(a3176,axiom,! [SOIL,SIZE,PARTICLE] : (((s_instance(SIZE, s_RealNumber) & s_instance(PARTICLE, s_Object) & s_instance(PARTICLE, s_Circle)) => ((s_part(PARTICLE, SOIL) & (s_instance(SOIL, s_Clay) & s_diameter(PARTICLE, s_MeasureFn(SIZE, s_Centimeter)))) => greater(2.0e-4, SIZE))))).

/*
(instance Humus SetOrClass)
*/
fof(a3177,axiom,s_instance(s_Humus, s_SetOrClass)).

/*
(subclass Humus Mixture)
*/
fof(a3178,axiom,s_subclass(s_Humus, s_Mixture)).

/*
(forall (?Humus)
 (exists (?Soil)
  (and (instance ?Soil Object)
       (=> (instance ?Humus Humus)
        (and (instance ?Soil Soil) (part ?Humus ?Soil))))))
*/
fof(a3179,axiom,! [HUMUS] : (? [SOIL] : ((s_instance(SOIL, s_Object) & (s_instance(HUMUS, s_Humus) => (s_instance(SOIL, s_Soil) & s_part(HUMUS, SOIL))))))).

/*
(subclass Burying Putting)
*/
fof(a3180,axiom,s_subclass(s_Burying, s_Putting)).

/*
(instance Burying SetOrClass)
*/
fof(a3181,axiom,s_instance(s_Burying, s_SetOrClass)).

/*
(subclass Burying Digging)
*/
fof(a3182,axiom,s_subclass(s_Burying, s_Digging)).

/*
(forall (?B)
 (exists (?C ?S)
  (and (and (instance ?S Object) (instance ?C Process))
       (=> (instance ?B Burying)
        (and (instance ?C Covering)
             (and (instrument ?C ?S)
                  (and (instance ?S Soil) (subProcess ?C ?B))))))))
*/
fof(a3183,axiom,! [B] : (? [C,S] : (((s_instance(S, s_Object) & s_instance(C, s_Process)) & (s_instance(B, s_Burying) => (s_instance(C, s_Covering) & (s_instrument(C, S) & (s_instance(S, s_Soil) & s_subProcess(C, B))))))))).

/*
(subclass Digging IntentionalProcess)
*/
fof(a3184,axiom,s_subclass(s_Digging, s_IntentionalProcess)).

/*
(subclass Digging SurfaceChange)
*/
fof(a3185,axiom,s_subclass(s_Digging, s_SurfaceChange)).

/*
(forall (?D)
 (exists (?S)
  (and (instance ?S Entity)
       (=> (instance ?D Digging)
        (and (patient ?D ?S) (instance ?S Soil))))))
*/
fof(a3186,axiom,! [D] : (? [S] : ((s_instance(S, s_Entity) & (s_instance(D, s_Digging) => (s_patient(D, S) & s_instance(S, s_Soil))))))).

/*
(instance Digging SetOrClass)
*/
fof(a3187,axiom,s_instance(s_Digging, s_SetOrClass)).

/*
(subclass Tilling Digging)
*/
fof(a3188,axiom,s_subclass(s_Tilling, s_Digging)).

/*
(subclass Tilling IntentionalProcess)
*/
fof(a3189,axiom,s_subclass(s_Tilling, s_IntentionalProcess)).

/*
(instance Tilling SetOrClass)
*/
fof(a3190,axiom,s_instance(s_Tilling, s_SetOrClass)).

/*
(subclass Tilling SurfaceChange)
*/
fof(a3191,axiom,s_subclass(s_Tilling, s_SurfaceChange)).

/*
(forall (?SOIL ?TILL)
 (=> (instance ?SOIL Entity)
  (=> (and (instance ?TILL Tilling) (patient ?TILL ?SOIL))
   (instance ?SOIL Soil))))
*/
fof(a3192,axiom,! [SOIL,TILL] : ((s_instance(SOIL, s_Entity) => ((s_instance(TILL, s_Tilling) & s_patient(TILL, SOIL)) => s_instance(SOIL, s_Soil))))).

/*
(forall (?T)
 (exists (?A)
  (and (instance ?A Process)
       (=> (instance ?T Tilling)
        (and (instance ?A Agriculture) (subProcess ?T ?A))))))
*/
fof(a3193,axiom,! [T] : (? [A] : ((s_instance(A, s_Process) & (s_instance(T, s_Tilling) => (s_instance(A, s_Agriculture) & s_subProcess(T, A))))))).

/*
(instance Entombing SetOrClass)
*/
fof(a3194,axiom,s_instance(s_Entombing, s_SetOrClass)).

/*
(subclass Entombing Putting)
*/
fof(a3195,axiom,s_subclass(s_Entombing, s_Putting)).

/*
(forall (?C ?E)
 (=> (instance ?C Entity)
  (=> (and (instance ?E Entombing) (patient ?E ?C))
   (instance ?C HumanCorpse))))
*/
fof(a3196,axiom,! [C,E] : ((s_instance(C, s_Entity) => ((s_instance(E, s_Entombing) & s_patient(E, C)) => s_instance(C, s_HumanCorpse))))).

/*
(forall (?T ?E)
 (=> (instance ?T Entity)
  (=> (and (instance ?E Entombing) (destination ?E ?T))
   (instance ?T Tomb))))
*/
fof(a3197,axiom,! [T,E] : ((s_instance(T, s_Entity) => ((s_instance(E, s_Entombing) & s_destination(E, T)) => s_instance(T, s_Tomb))))).

/*
(instance MovingResidence SetOrClass)
*/
fof(a3198,axiom,s_instance(s_MovingResidence, s_SetOrClass)).

/*
(subclass MovingResidence Transfer)
*/
fof(a3199,axiom,s_subclass(s_MovingResidence, s_Transfer)).

/*
(forall (?AGENT ?MOVE)
 (exists (?HOME1 ?HOME2)
  (and (and (instance ?HOME2 PermanentResidence)
            (instance ?HOME1 PermanentResidence))
       (=> (instance ?AGENT Human)
        (=> (and (instance ?MOVE MovingResidence) (agent ?MOVE ?AGENT))
         (and (holdsDuring (BeginFn (WhenFn ?MOVE))
               (home ?AGENT ?HOME1))
              (and (holdsDuring (EndFn (WhenFn ?MOVE))
                    (home ?AGENT ?HOME2))
                   (not (equal ?HOME1 ?HOME2)))))))))
*/
%% no translation to TPTP available.

/*
(instance Harvesting SetOrClass)
*/
fof(a3200,axiom,s_instance(s_Harvesting, s_SetOrClass)).

/*
(subclass Harvesting Removing)
*/
fof(a3201,axiom,s_subclass(s_Harvesting, s_Removing)).

/*
(forall (?H)
 (exists (?A)
  (and (instance ?A Process)
       (=> (instance ?H Harvesting)
        (and (instance ?A Agriculture) (subProcess ?H ?A))))))
*/
fof(a3202,axiom,! [H] : (? [A] : ((s_instance(A, s_Process) & (s_instance(H, s_Harvesting) => (s_instance(A, s_Agriculture) & s_subProcess(H, A))))))).

/*
(forall (?C ?H)
 (=> (instance ?C Entity)
  (=> (and (instance ?H Harvesting) (result ?H ?C))
   (or (instance ?C PlantAnatomicalStructure)
       (instance ?C PlantSubstance)))))
*/
fof(a3203,axiom,! [C,H] : ((s_instance(C, s_Entity) => ((s_instance(H, s_Harvesting) & s_result(H, C)) => (s_instance(C, s_PlantAnatomicalStructure) | s_instance(C, s_PlantSubstance)))))).

/*
(subclass Drilling IntentionalProcess)
*/
fof(a3204,axiom,s_subclass(s_Drilling, s_IntentionalProcess)).

/*
(instance Drilling SetOrClass)
*/
fof(a3205,axiom,s_instance(s_Drilling, s_SetOrClass)).

/*
(subclass Drilling SurfaceChange)
*/
fof(a3206,axiom,s_subclass(s_Drilling, s_SurfaceChange)).

/*
(forall (?OBJ ?DRILL)
 (exists (?HOLE)
  (and (instance ?HOLE Hole)
       (=> (instance ?OBJ SelfConnectedObject)
        (=> (and (instance ?DRILL Drilling) (patient ?DRILL ?OBJ))
         (and (holdsDuring (BeginFn (WhenFn ?DRILL))
               (not (hole ?HOLE ?OBJ)))
              (holdsDuring (EndFn (WhenFn ?DRILL))
               (hole ?HOLE ?OBJ))))))))
*/
%% no translation to TPTP available.

/*
(instance Drill SetOrClass)
*/
fof(a3207,axiom,s_instance(s_Drill, s_SetOrClass)).

/*
(subclass Drill CuttingDevice)
*/
fof(a3208,axiom,s_subclass(s_Drill, s_CuttingDevice)).

/*
(forall (?D)
 (=> (instance ?D Drill)
  (hasPurpose ?D
   (exists (?E ?H)
    (and (instance ?E Cutting)
         (and (instance ?H Hole)
              (and (result ?E ?H) (instrument ?E ?D))))))))
*/
%% no translation to TPTP available.

/*
(instance Saw SetOrClass)
*/
fof(a3209,axiom,s_instance(s_Saw, s_SetOrClass)).

/*
(subclass Saw CuttingDevice)
*/
fof(a3210,axiom,s_subclass(s_Saw, s_CuttingDevice)).

/*
(forall (?OBJ ?SAW ?CUT)
 (exists (?MOTION ?DIR1 ?DIR2 ?TIME ?T1 ?T2 ?PART)
  (and (and (instance ?PART Object) (instance ?T2 TimePosition)
            (instance ?T1 TimePosition) (instance ?TIME TimePosition)
            (instance ?DIR2 PositionalAttribute)
            (instance ?DIR1 PositionalAttribute)
            (instance ?MOTION Process))
       (=>
        (and (instance ?SAW Saw)
             (and (instance ?CUT Cutting)
                  (and (instrument ?CUT ?SAW)
                       (and (instance ?OBJ Object)
                            (patient ?CUT ?OBJ)))))
        (and (instance ?MOTION Motion)
             (and (subProcess ?MOTION ?CUT)
                  (and (instance ?PART CuttingDevice)
                       (and (part ?PART ?SAW)
                            (and (meetsSpatially ?PART ?OBJ)
                                 (and
                                  (patient ?MOTION ?PART)
                                  (and
                                   (instance ?T2 TimeInterval)
                                   (and
                                    (instance ?T2 TimeInterval)
                                    (and
                                     (equal (WhenFn ?MOTION) ?TIME)
                                     (and
                                      (temporalPart ?TIME ?T1)
                                      (and
                                       (temporalPart ?TIME ?T2)
                                       (and
                                        (instance
                                         ?DIR1
                                         DirectionalAttribute)
                                        (and
                                         (instance
                                          ?DIR2
                                          DirectionalAttribute)
                                         (=>
                                          (holdsDuring
                                           ?T1
                                           (direction ?MOTION ?DIR1))
                                          (holdsDuring
                                           ?T2
                                           (and
                                            (direction ?MOTION ?DIR2)
                                            (and
                                             (or
                                              (equal ?DIR1 ?DIR2)
                                              (oppositeDirection
                                               ?DIR1
                                               ?DIR2))
                                             (not
                                              (and
                                               (equal ?DIR1 ?DIR2)
                                               (oppositeDirection
                                                ?DIR1
                                                ?DIR2))))))))))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance PaperShredder SetOrClass)
*/
fof(a3211,axiom,s_instance(s_PaperShredder, s_SetOrClass)).

/*
(subclass PaperShredder CuttingDevice)
*/
fof(a3212,axiom,s_subclass(s_PaperShredder, s_CuttingDevice)).

/*
(forall (?X)
 (=> (instance ?X PaperShredder)
  (hasPurpose ?X
   (exists (?CUT ?PAPER)
    (and (instance ?CUT Cutting)
         (and (instrument ?CUT ?X)
              (and (instance ?PAPER Paper) (patient ?CUT ?PAPER))))))))
*/
%% no translation to TPTP available.

/*
(forall (?X ?CUT ?PAPER ?INFO ?CBO)
 (=>
  (and (instance ?PAPER Object) (instance ?INFO Proposition)
       (instance ?CBO ContentBearingPhysical))
  (=>
   (and (instance ?X PaperShredder)
        (and (instance ?CUT Cutting) (instrument ?CUT ?X)))
   (hasPurpose ?CUT
    (=>
     (and (instance ?CBO VisualContentBearingObject)
          (and (containsInformation ?CBO ?INFO)
               (and (instance ?PAPER Paper) (located ?CBO ?PAPER))))
     (decreasesLikelihood (patient ?CUT ?PAPER)
      (exists (?READ)
       (and (instance ?READ Interpreting)
            (and (patient ?READ ?INFO)
                 (earlier (WhenFn ?CUT) (WhenFn ?READ)))))))))))
*/
%% no translation to TPTP available.

/*
(instance Memorizing SetOrClass)
*/
fof(a3213,axiom,s_instance(s_Memorizing, s_SetOrClass)).

/*
(subclass Memorizing Learning)
*/
fof(a3214,axiom,s_subclass(s_Memorizing, s_Learning)).

/*
(forall (?T ?M)
 (=> (instance ?T Entity)
  (=> (and (instance ?M Memorizing) (patient ?M ?T))
   (instance ?T Text))))
*/
fof(a3215,axiom,! [T,M] : ((s_instance(T, s_Entity) => ((s_instance(M, s_Memorizing) & s_patient(M, T)) => s_instance(T, s_Text))))).

/*
(subclass Imagining PsychologicalProcess)
*/
fof(a3216,axiom,s_subclass(s_Imagining, s_PsychologicalProcess)).

/*
(instance Dreaming SetOrClass)
*/
fof(a3217,axiom,s_instance(s_Dreaming, s_SetOrClass)).

/*
(instance Imagining SetOrClass)
*/
fof(a3218,axiom,s_instance(s_Imagining, s_SetOrClass)).

/*
(subclass Dreaming Imagining)
*/
fof(a3219,axiom,s_subclass(s_Dreaming, s_Imagining)).

/*
(disjoint Dreaming IntentionalProcess)
*/
fof(a3220,axiom,s_disjoint(s_Dreaming, s_IntentionalProcess)).

/*
(forall (?AGENT ?DREAM)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?DREAM Dreaming) (experiencer ?DREAM ?AGENT))
   (holdsDuring (WhenFn ?DREAM) (attribute ?AGENT Asleep)))))
*/
%% no translation to TPTP available.

/*
(instance Frightening SetOrClass)
*/
fof(a3221,axiom,s_instance(s_Frightening, s_SetOrClass)).

/*
(subclass Frightening PsychologicalProcess)
*/
fof(a3222,axiom,s_subclass(s_Frightening, s_PsychologicalProcess)).

/*
(forall (?AGENT ?FRIGHTEN)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?FRIGHTEN Frightening)
        (experiencer ?FRIGHTEN ?AGENT))
   (and (holdsDuring (BeginFn (WhenFn ?FRIGHTEN))
         (not (attribute ?AGENT Anxiety)))
        (holdsDuring (EndFn (WhenFn ?FRIGHTEN))
         (attribute ?AGENT Anxiety))))))
*/
%% no translation to TPTP available.

/*
(instance Execution SetOrClass)
*/
fof(a3223,axiom,s_instance(s_Execution, s_SetOrClass)).

/*
(subclass Execution Killing)
*/
fof(a3224,axiom,s_subclass(s_Execution, s_Killing)).

/*
(forall (?E)
 (exists (?G)
  (and (instance ?G Agent)
       (=> (instance ?E Execution)
        (and (instance ?G Government) (agent ?E ?G))))))
*/
fof(a3225,axiom,! [E] : (? [G] : ((s_instance(G, s_Agent) & (s_instance(E, s_Execution) => (s_instance(G, s_Government) & s_agent(E, G))))))).

/*
(forall (?E)
 (exists (?P)
  (and (instance ?P Entity)
       (=> (instance ?E Execution)
        (and (patient ?E ?P) (instance ?P Human))))))
*/
fof(a3226,axiom,! [E] : (? [P] : ((s_instance(P, s_Entity) & (s_instance(E, s_Execution) => (s_patient(E, P) & s_instance(P, s_Human))))))).

/*
(instance Suicide SetOrClass)
*/
fof(a3227,axiom,s_instance(s_Suicide, s_SetOrClass)).

/*
(subclass Suicide Killing)
*/
fof(a3228,axiom,s_subclass(s_Suicide, s_Killing)).

/*
(forall (?S)
 (exists (?A)
  (and (instance ?A Agent)
       (=> (instance ?S Suicide)
        (and (agent ?S ?A) (experiencer ?S ?A))))))
*/
fof(a3229,axiom,! [S] : (? [A] : ((s_instance(A, s_Agent) & (s_instance(S, s_Suicide) => (s_agent(S, A) & s_experiencer(S, A))))))).

/*
(subclass Trespassing CriminalAction)
*/
fof(a3230,axiom,s_subclass(s_Trespassing, s_CriminalAction)).

/*
(instance Trespassing SetOrClass)
*/
fof(a3231,axiom,s_instance(s_Trespassing, s_SetOrClass)).

/*
(subclass Trespassing Translocation)
*/
fof(a3232,axiom,s_subclass(s_Trespassing, s_Translocation)).

/*
(forall (?P ?H ?T)
 (=> (and (instance ?P Object) (instance ?H Agent))
  (=>
   (and (instance ?T Trespassing) (and (agent ?T ?H) (patient ?T ?P)))
   (and (not (possesses ?H ?P))
        (modalAttribute (located ?H ?P) Illegal)))))
*/
%% no translation to TPTP available.

/*
(instance Protecting SetOrClass)
*/
fof(a3233,axiom,s_instance(s_Protecting, s_SetOrClass)).

/*
(subclass Protecting Maintaining)
*/
fof(a3234,axiom,s_subclass(s_Protecting, s_Maintaining)).

/*
(forall (?HARM ?X ?H ?T)
 (=>
  (and (subclass ?HARM Process) (instance ?HARM SetOrClass)
       (instance ?H SymbolicString) (instance ?T TimePosition))
  (=> (instance ?X Protecting)
   (hasPurpose ?X
    (exists (?OBJ)
     (and (instance ?OBJ Object)
          (and (patient ?X Object)
               (and (subclass ?HARM
                     (KappaFn ?H
                      (and (or (instance ?H CriminalAction)
                               (instance ?H Damaging))
                           (=> (holdsDuring ?T (patient ?H ?OBJ))
                            (not (holdsDuring
                                  ?T
                                  (patient ?X ?OBJ)))))))
                    (or (prevents ?X ?HARM) (hinders ?X ?HARM))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Murder Killing)
*/
fof(a3235,axiom,s_subclass(s_Murder, s_Killing)).

/*
(instance Murder SetOrClass)
*/
fof(a3236,axiom,s_instance(s_Murder, s_SetOrClass)).

/*
(subclass Murder CriminalAction)
*/
fof(a3237,axiom,s_subclass(s_Murder, s_CriminalAction)).

/*
(forall (?MURDER)
 (exists (?PERSON)
  (and (instance ?PERSON Entity)
       (=> (instance ?MURDER Murder)
        (and (patient ?MURDER ?PERSON) (instance ?PERSON Human))))))
*/
fof(a3238,axiom,! [MURDER] : (? [PERSON] : ((s_instance(PERSON, s_Entity) & (s_instance(MURDER, s_Murder) => (s_patient(MURDER, PERSON) & s_instance(PERSON, s_Human))))))).

/*
(subclass Suffocating Killing)
*/
fof(a3239,axiom,s_subclass(s_Suffocating, s_Killing)).

/*
(forall (?H ?P ?S)
 (=> (and (instance ?H Physical) (instance ?P Agent))
  (=> (instance ?S Suffocating)
   (holdsDuring (EndFn (WhenFn ?H))
    (and (experiencer ?S ?P)
         (not (exists (?B)
               (and (instance ?B Breathing) (experiencer ?B ?P)))))))))
*/
%% no translation to TPTP available.

/*
(instance Hanging SetOrClass)
*/
fof(a3240,axiom,s_instance(s_Hanging, s_SetOrClass)).

/*
(instance Suffocating SetOrClass)
*/
fof(a3241,axiom,s_instance(s_Suffocating, s_SetOrClass)).

/*
(subclass Hanging Suffocating)
*/
fof(a3242,axiom,s_subclass(s_Hanging, s_Suffocating)).

/*
(forall (?H)
 (exists (?S ?N ?P)
  (and (and (instance ?P Agent) (instance ?N Object)
            (instance ?S Object))
       (=> (instance ?H Hanging)
        (and (instance ?P Human)
             (and (instance ?S String)
                  (and (instance ?N Neck)
                       (and (experiencer ?H ?P)
                            (and (properPart ?N ?P)
                                 (and
                                  (instrument ?H ?S)
                                  (holdsDuring
                                   (WhenFn ?H)
                                   (meetsSpatially ?S ?N))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Starving SetOrClass)
*/
fof(a3243,axiom,s_instance(s_Starving, s_SetOrClass)).

/*
(subclass Starving Killing)
*/
fof(a3244,axiom,s_subclass(s_Starving, s_Killing)).

/*
(subclass MusicalConducting Guiding)
*/
fof(a3245,axiom,s_subclass(s_MusicalConducting, s_Guiding)).

/*
(forall (?CONDUCT)
 (exists (?MUSIC)
  (and (instance ?MUSIC Process)
       (=> (instance ?CONDUCT MusicalConducting)
        (and (instance ?MUSIC MusicalPerformance)
             (subProcess ?CONDUCT ?MUSIC))))))
*/
fof(a3246,axiom,! [CONDUCT] : (? [MUSIC] : ((s_instance(MUSIC, s_Process) & (s_instance(CONDUCT, s_MusicalConducting) => (s_instance(MUSIC, s_MusicalPerformance) & s_subProcess(CONDUCT, MUSIC))))))).

/*
(forall (?M ?PATIENT ?CONDUCT)
 (=> (instance ?PATIENT Object)
  (=>
   (and (instance ?CONDUCT MusicalConducting)
        (and (patient ?CONDUCT ?PATIENT) (instance ?M Musician)))
   (or (instance ?PATIENT MusicalGroup)
       (holdsDuring (WhenFn ?CONDUCT) (attribute ?PATIENT ?M))))))
*/
%% no translation to TPTP available.

/*
(instance OrchestralConducting SetOrClass)
*/
fof(a3247,axiom,s_instance(s_OrchestralConducting, s_SetOrClass)).

/*
(instance MusicalConducting SetOrClass)
*/
fof(a3248,axiom,s_instance(s_MusicalConducting, s_SetOrClass)).

/*
(subclass OrchestralConducting MusicalConducting)
*/
fof(a3249,axiom,s_subclass(s_OrchestralConducting, s_MusicalConducting)).

/*
(forall (?GRP ?CONDUCT)
 (=> (instance ?GRP Entity)
  (=>
   (and (instance ?CONDUCT OrchestralConducting)
        (patient ?CONDUCT ?GRP))
   (instance ?CONDUCT Orchestra))))
*/
fof(a3250,axiom,! [GRP,CONDUCT] : ((s_instance(GRP, s_Entity) => ((s_instance(CONDUCT, s_OrchestralConducting) & s_patient(CONDUCT, GRP)) => s_instance(CONDUCT, s_Orchestra))))).

/*
(subclass MusicalGroup GroupOfPeople)
*/
fof(a3251,axiom,s_subclass(s_MusicalGroup, s_GroupOfPeople)).

/*
(instance Orchestra SetOrClass)
*/
fof(a3252,axiom,s_instance(s_Orchestra, s_SetOrClass)).

/*
(instance MusicalGroup SetOrClass)
*/
fof(a3253,axiom,s_instance(s_MusicalGroup, s_SetOrClass)).

/*
(subclass Orchestra MusicalGroup)
*/
fof(a3254,axiom,s_subclass(s_Orchestra, s_MusicalGroup)).

/*
(forall (?ORCHESTRA)
 (=> (instance ?ORCHESTRA Orchestra)
  (hasPurpose ?ORCHESTRA
   (exists (?MUSIC)
    (and (instance ?MUSIC MakingInstrumentalMusic)
         (agent ?MUSIC ?ORCHESTRA))))))
*/
%% no translation to TPTP available.

/*
(instance DramaticDirecting SetOrClass)
*/
fof(a3255,axiom,s_instance(s_DramaticDirecting, s_SetOrClass)).

/*
(subclass DramaticDirecting Guiding)
*/
fof(a3256,axiom,s_subclass(s_DramaticDirecting, s_Guiding)).

/*
(forall (?ACT ?DIRECT)
 (=> (instance ?ACT Entity)
  (=> (and (instance ?DIRECT DramaticDirecting) (patient ?DIRECT ?ACT))
   (instance ?ACT DramaticActing))))
*/
fof(a3257,axiom,! [ACT,DIRECT] : ((s_instance(ACT, s_Entity) => ((s_instance(DIRECT, s_DramaticDirecting) & s_patient(DIRECT, ACT)) => s_instance(ACT, s_DramaticActing))))).

/*
(instance Sharing SetOrClass)
*/
fof(a3258,axiom,s_instance(s_Sharing, s_SetOrClass)).

/*
(subclass Sharing ChangeOfPossession)
*/
fof(a3259,axiom,s_subclass(s_Sharing, s_ChangeOfPossession)).

/*
(forall (?AGENT1 ?OBJ ?AGENT2 ?SHARE)
 (exists (?GIVE ?PART)
  (and (and (instance ?PART Object) (instance ?GIVE Process))
       (=>
        (and (instance ?AGENT1 Agent) (instance ?OBJ Object)
             (instance ?AGENT2 Entity))
        (=>
         (and (instance ?SHARE Sharing)
              (and (agent ?SHARE ?AGENT1)
                   (and (destination ?SHARE ?AGENT2)
                        (patient ?SHARE ?OBJ))))
         (and (instance ?GIVE Giving)
              (and (subProcess ?GIVE ?SHARE)
                   (and (patient ?GIVE ?PART)
                        (and (properPart ?PART ?OBJ)
                             (and (agent ?GIVE ?AGENT1)
                                  (destination ?GIVE ?AGENT2)))))))))))
*/
fof(a3260,axiom,! [AGENT1,OBJ,AGENT2,SHARE] : (? [GIVE,PART] : (((s_instance(PART, s_Object) & s_instance(GIVE, s_Process)) & ((s_instance(AGENT1, s_Agent) & s_instance(OBJ, s_Object) & s_instance(AGENT2, s_Entity)) => ((s_instance(SHARE, s_Sharing) & (s_agent(SHARE, AGENT1) & (s_destination(SHARE, AGENT2) & s_patient(SHARE, OBJ)))) => (s_instance(GIVE, s_Giving) & (s_subProcess(GIVE, SHARE) & (s_patient(GIVE, PART) & (s_properPart(PART, OBJ) & (s_agent(GIVE, AGENT1) & s_destination(GIVE, AGENT2)))))))))))).

/*
(subclass Stealing UnilateralGetting)
*/
fof(a3261,axiom,s_subclass(s_Stealing, s_UnilateralGetting)).

/*
(subclass Stealing CriminalAction)
*/
fof(a3262,axiom,s_subclass(s_Stealing, s_CriminalAction)).

/*
(instance Stealing SetOrClass)
*/
fof(a3263,axiom,s_instance(s_Stealing, s_SetOrClass)).

/*
(subclass Robbing Stealing)
*/
fof(a3264,axiom,s_subclass(s_Robbing, s_Stealing)).

/*
(forall (?P2 ?P ?R)
 (exists (?T)
  (and (instance ?T Process)
       (=> (and (instance ?P2 Entity) (instance ?P Agent))
        (=>
         (and (instance ?R Robbing)
              (and (agent ?R ?P) (patient ?R ?P2)))
         (and (instance ?T Threatening)
              (and (subProcess ?T ?R)
                   (patient ?T
                    (exists (?A)
                     (and (instance ?A Attack)
                          (and (agent ?A ?P) (patient ?A ?P2))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Inheriting SetOrClass)
*/
fof(a3265,axiom,s_instance(s_Inheriting, s_SetOrClass)).

/*
(subclass Inheriting UnilateralGetting)
*/
fof(a3266,axiom,s_subclass(s_Inheriting, s_UnilateralGetting)).

/*
(instance Awarding SetOrClass)
*/
fof(a3267,axiom,s_instance(s_Awarding, s_SetOrClass)).

/*
(subclass Awarding UnilateralGiving)
*/
fof(a3268,axiom,s_subclass(s_Awarding, s_UnilateralGiving)).

/*
(forall (?A)
 (exists (?RECIPIENT ?GIVER ?PROCESS ?AWARD)
  (and (and (instance ?AWARD Entity) (instance ?PROCESS Process)
            (instance ?GIVER Agent) (instance ?RECIPIENT Agent))
       (=> (instance ?A Awarding)
        (and (instance ?RECIPIENT Agent)
             (and (instance ?GIVER Agent)
                  (and (instance ?PROCESS Process)
                       (and (instance ?AWARD Object)
                            (and (agent ?PROCESS ?RECIPIENT)
                                 (and
                                  (agent ?A ?GIVER)
                                  (and
                                   (patient ?A ?AWARD)
                                   (and
                                    (destination ?A ?RECIPIENT)
                                    (causes ?PROCESS ?A)))))))))))))
*/
fof(a3269,axiom,! [A] : (? [RECIPIENT,GIVER,PROCESS,AWARD] : (((s_instance(AWARD, s_Entity) & s_instance(PROCESS, s_Process) & s_instance(GIVER, s_Agent) & s_instance(RECIPIENT, s_Agent)) & (s_instance(A, s_Awarding) => (s_instance(RECIPIENT, s_Agent) & (s_instance(GIVER, s_Agent) & (s_instance(PROCESS, s_Process) & (s_instance(AWARD, s_Object) & (s_agent(PROCESS, RECIPIENT) & (s_agent(A, GIVER) & (s_patient(A, AWARD) & (s_destination(A, RECIPIENT) & s_causes(PROCESS, A)))))))))))))).

/*
(instance hasAward BinaryPredicate)
*/
fof(a3270,axiom,s_instance(s_hasAward_m, s_BinaryPredicate)).

/*
(forall (?AWARD ?RECIPIENT)
 (exists (?A)
  (and (instance ?A Process)
       (=> (and (instance ?RECIPIENT Agent) (instance ?AWARD Object))
        (=> (hasAward ?RECIPIENT ?AWARD)
         (and (instance ?A Awarding)
              (and (destination ?A ?RECIPIENT)
                   (patient ?A ?AWARD))))))))
*/
fof(a3271,axiom,! [AWARD,RECIPIENT] : (? [A] : ((s_instance(A, s_Process) & ((s_instance(RECIPIENT, s_Agent) & s_instance(AWARD, s_Object)) => (s_hasAward(RECIPIENT, AWARD) => (s_instance(A, s_Awarding) & (s_destination(A, RECIPIENT) & s_patient(A, AWARD))))))))).

/*
(instance Bequeathing SetOrClass)
*/
fof(a3272,axiom,s_instance(s_Bequeathing, s_SetOrClass)).

/*
(subclass Bequeathing UnilateralGiving)
*/
fof(a3273,axiom,s_subclass(s_Bequeathing, s_UnilateralGiving)).

/*
(forall (?P ?I ?PROP ?H ?B)
 (exists (?D)
  (and (instance ?D Process)
       (=>
        (and (instance ?P Agent) (instance ?I Process)
             (instance ?PROP Object) (instance ?H Agent))
        (=>
         (and (instance ?B Bequeathing)
              (and (agent ?B ?P)
                   (and (destination ?B ?H) (patient ?I ?PROP))))
         (and (instance ?D Death)
              (and (experiencer ?D ?P)
                   (and (earlier (WhenFn ?D) (WhenFn ?B))
                        (and (holdsDuring (ImmediatePastFn (WhenFn ?D))
                              (possesses ?P ?PROP))
                             (confersNorm ?P (possesses ?H ?PROP)
                              Permission))))))))))
*/
%% no translation to TPTP available.

/*
(instance SeizingProperty SetOrClass)
*/
fof(a3274,axiom,s_instance(s_SeizingProperty, s_SetOrClass)).

/*
(subclass SeizingProperty UnilateralGetting)
*/
fof(a3275,axiom,s_subclass(s_SeizingProperty, s_UnilateralGetting)).

/*
(forall (?V ?A ?S)
 (=> (instance ?A Entity)
  (=>
   (and (instance ?S SeizingProperty)
        (and (destination ?S ?A)
             (and (origin ?S ?V) (instance ?V CognitiveAgent))))
   (and (instance ?A Government)
        (not (confersNorm ?V (destination ?S ?A) Permission))))))
*/
%% no translation to TPTP available.

/*
(contraryAttribute2 FullTimePosition PartTimePosition)
*/
fof(a3276,axiom,s_contraryAttribute2(s_FullTimePosition, s_PartTimePosition)).

/*
(instance FullTimePosition Position)
*/
fof(a3277,axiom,s_instance(s_FullTimePosition, s_Position)).

/*
(instance PartTimePosition Position)
*/
fof(a3278,axiom,s_instance(s_PartTimePosition, s_Position)).

/*
(instance CollegeFreshman CollegeStudentPosition)
*/
fof(a3279,axiom,s_instance(s_CollegeFreshman, s_CollegeStudentPosition)).

/*
(forall (?H ?ORG ?P)
 (exists (?T)
  (and (instance ?T TimePosition)
       (=>
        (and (instance ?P Position) (instance ?P Object)
             (instance ?ORG EducationalOrganization)
             (instance ?H Human))
        (=>
         (and (attribute ?P CollegeFreshman)
              (occupiesPosition ?H ?P ?ORG))
         (and (holdsDuring ?T (student ?H ?ORG))
              (lessThan ?T (MeasureFn 1 YearDuration))))))))
*/
%% no translation to TPTP available.

/*
(instance CollegeJunior CollegeStudentPosition)
*/
fof(a3280,axiom,s_instance(s_CollegeJunior, s_CollegeStudentPosition)).

/*
(forall (?H ?ORG ?P)
 (exists (?T)
  (and (instance ?T TimePosition)
       (=>
        (and (instance ?P Position) (instance ?P Object)
             (instance ?ORG EducationalOrganization)
             (instance ?H Human))
        (=>
         (and (attribute ?P CollegeJunior)
              (occupiesPosition ?H ?P ?ORG))
         (and (holdsDuring ?T (student ?H ?ORG))
              (and (greaterThanOrEqualTo ?T (MeasureFn 2 YearDuration))
                   (lessThan ?T (MeasureFn 3 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(instance CollegeSenior CollegeStudentPosition)
*/
fof(a3281,axiom,s_instance(s_CollegeSenior, s_CollegeStudentPosition)).

/*
(forall (?H ?ORG ?P)
 (exists (?T)
  (and (instance ?T TimePosition)
       (=>
        (and (instance ?P Position) (instance ?P Object)
             (instance ?ORG EducationalOrganization)
             (instance ?H Human))
        (=>
         (and (attribute ?P CollegeSenior)
              (occupiesPosition ?H ?P ?ORG))
         (and (holdsDuring ?T (student ?H ?ORG))
              (and (greaterThanOrEqualTo ?T (MeasureFn 3 YearDuration))
                   (lessThan ?T (MeasureFn 4 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(instance CollegeSophomore CollegeStudentPosition)
*/
fof(a3282,axiom,s_instance(s_CollegeSophomore, s_CollegeStudentPosition)).

/*
(forall (?H ?ORG ?P)
 (exists (?T)
  (and (instance ?T TimePosition)
       (=>
        (and (instance ?P Position) (instance ?P Object)
             (instance ?ORG EducationalOrganization)
             (instance ?H Human))
        (=>
         (and (attribute ?P CollegeSophomore)
              (occupiesPosition ?H ?P ?ORG))
         (and (holdsDuring ?T (student ?H ?ORG))
              (and (greaterThanOrEqualTo ?T (MeasureFn 1 YearDuration))
                   (lessThan ?T (MeasureFn 2 YearDuration)))))))))
*/
%% no translation to TPTP available.

/*
(instance CollegeStudentPosition SetOrClass)
*/
fof(a3283,axiom,s_instance(s_CollegeStudentPosition, s_SetOrClass)).

/*
(subclass CollegeStudentPosition Position)
*/
fof(a3284,axiom,s_subclass(s_CollegeStudentPosition, s_Position)).

/*
(instance Comedian EntertainmentProfession)
*/
fof(a3285,axiom,s_instance(s_Comedian, s_EntertainmentProfession)).

/*
(forall (?P ?PREF)
 (exists (?PERF ?L)
  (and (and (instance ?L Process) (instance ?PERF Process))
       (=> (and (instance ?PREF Process) (instance ?P Agent))
        (=> (attribute ?P Comedian)
         (and (instance ?PERF Performance)
              (and (agent ?PREF ?P)
                   (and (instance ?L Laughing) (causes ?PERF ?L)))))))))
*/
fof(a3286,axiom,! [P,PREF] : (? [PERF,L] : (((s_instance(L, s_Process) & s_instance(PERF, s_Process)) & ((s_instance(PREF, s_Process) & s_instance(P, s_Agent)) => (s_attribute(P, s_Comedian) => (s_instance(PERF, s_Performance) & (s_agent(PREF, P) & (s_instance(L, s_Laughing) & s_causes(PERF, L)))))))))).

/*
(instance Actor EntertainmentProfession)
*/
fof(a3287,axiom,s_instance(s_Actor, s_EntertainmentProfession)).

/*
(forall (?PERSON)
 (=> (instance ?PERSON Agent)
  (=> (attribute ?PERSON Actor) (hasSkill DramaticActing ?PERSON))))
*/
fof(a3288,axiom,! [PERSON] : ((s_instance(PERSON, s_Agent) => (s_attribute(PERSON, s_Actor) => s_hasSkill(s_DramaticActing, PERSON))))).

/*
(forall (?T1 ?GROUP ?MEM)
 (=> (and (instance ?T1 TimePosition) (instance ?MEM Object))
  (=>
   (and (instance ?GROUP DramaticCast)
        (holdsDuring ?T1 (member ?MEM ?GROUP)))
   (holdsDuring ?T1 (attribute ?MEM Actor)))))
*/
%% no translation to TPTP available.

/*
(forall (?A ?P)
 (=> (instance ?A Agent)
  (=> (and (instance ?P DramaticPerformance) (agent ?P ?A))
   (holdsDuring (WhenFn ?P) (attribute ?A Actor)))))
*/
%% no translation to TPTP available.

/*
(instance Artist EntertainmentProfession)
*/
fof(a3289,axiom,s_instance(s_Artist, s_EntertainmentProfession)).

/*
(forall (?WORK ?AGENT ?PROCESS)
 (=> (and (instance ?AGENT Agent) (instance ?PROCESS Process))
  (=>
   (and (agent ?PROCESS ?AGENT)
        (and (result ?PROCESS ?WORK) (instance ?WORK ArtWork)))
   (holdsDuring (WhenFn ?PROCESS) (attribute ?AGENT Artist)))))
*/
%% no translation to TPTP available.

/*
(instance Performer EntertainmentProfession)
*/
fof(a3290,axiom,s_instance(s_Performer, s_EntertainmentProfession)).

/*
(subAttribute Performer Artist)
*/
fof(a3291,axiom,s_subAttribute(s_Performer, s_Artist)).

/*
(forall (?A ?P)
 (=> (instance ?A Agent)
  (=> (and (instance ?P Performance) (agent ?P ?A))
   (holdsDuring (WhenFn ?P) (attribute ?A Performer)))))
*/
%% no translation to TPTP available.

/*
(instance Treasurer SkilledOccupation)
*/
fof(a3292,axiom,s_instance(s_Treasurer, s_SkilledOccupation)).

/*
(instance SalesPosition SetOrClass)
*/
fof(a3293,axiom,s_instance(s_SalesPosition, s_SetOrClass)).

/*
(subclass SalesPosition SkilledOccupation)
*/
fof(a3294,axiom,s_subclass(s_SalesPosition, s_SkilledOccupation)).

/*
(instance ClericalSecretary SkilledOccupation)
*/
fof(a3295,axiom,s_instance(s_ClericalSecretary, s_SkilledOccupation)).

/*
(subclass ServicePosition SkilledOccupation)
*/
fof(a3296,axiom,s_subclass(s_ServicePosition, s_SkilledOccupation)).

/*
(instance Dentist Profession)
*/
fof(a3297,axiom,s_instance(s_Dentist, s_Profession)).

/*
(forall (?P)
 (exists (?D ?T)
  (and (and (instance ?T Entity) (instance ?D Process))
       (=> (instance ?P Agent)
        (=> (attribute ?P Dentist)
         (and (instance ?D DiagnosticProcess)
              (and (agent ?D ?P)
                   (and (instance ?T Tooth) (patient ?D ?T)))))))))
*/
fof(a3298,axiom,! [P] : (? [D,T] : (((s_instance(T, s_Entity) & s_instance(D, s_Process)) & (s_instance(P, s_Agent) => (s_attribute(P, s_Dentist) => (s_instance(D, s_DiagnosticProcess) & (s_agent(D, P) & (s_instance(T, s_Tooth) & s_patient(D, T)))))))))).

/*
(instance Pharmacist Profession)
*/
fof(a3299,axiom,s_instance(s_Pharmacist, s_Profession)).

/*
(instance Researcher Profession)
*/
fof(a3300,axiom,s_instance(s_Researcher, s_Profession)).

/*
(forall (?P)
 (exists (?S)
  (and (instance ?S FieldOfStudy)
       (=> (instance ?P Human)
        (=> (attribute ?P Researcher)
         (and (instance ?S Science) (hasExpertise ?P ?S)))))))
*/
fof(a3301,axiom,! [P] : (? [S] : ((s_instance(S, s_FieldOfStudy) & (s_instance(P, s_Human) => (s_attribute(P, s_Researcher) => (s_instance(S, s_Science) & s_hasExpertise(P, S)))))))).

/*
(instance Teacher Profession)
*/
fof(a3302,axiom,s_instance(s_Teacher, s_Profession)).

/*
(forall (?P ?O ?T)
 (=>
  (and (instance ?T Human) (instance ?T Position)
       (instance ?O EducationalOrganization) (instance ?P Human))
  (=> (and (attribute ?T Teacher) (occupiesPosition ?P ?T ?O))
   (teacher ?T ?O))))
*/
fof(a3303,axiom,! [P,O,T] : (((s_instance(T, s_Human) & s_instance(T, s_Position) & s_instance(O, s_EducationalOrganization) & s_instance(P, s_Human)) => ((s_attribute(T, s_Teacher) & s_occupiesPosition(P, T, O)) => s_teacher(T, O))))).

/*
(forall (?T)
 (=> (instance ?T Agent)
  (=> (attribute ?T Teacher) (hasSkill EducationalProcess ?T))))
*/
fof(a3304,axiom,! [T] : ((s_instance(T, s_Agent) => (s_attribute(T, s_Teacher) => s_hasSkill(s_EducationalProcess, T))))).

/*
(subclass EntertainmentProfession SkilledOccupation)
*/
fof(a3305,axiom,s_subclass(s_EntertainmentProfession, s_SkilledOccupation)).

/*
(forall (?EP ?P)
 (=> (instance ?P Human)
  (=> (and (instance ?EP EntertainmentProfession) (attribute ?P ?EP))
   (or (occupation ?P (OccupationFn Performance))
       (occupation ?P (OccupationFn ContentDevelopment))))))
*/
fof(a3306,axiom,! [EP,P] : ((s_instance(P, s_Human) => ((s_instance(EP, s_EntertainmentProfession) & s_attribute(P, EP)) => (s_occupation(P, s_OccupationFn(s_Performance)) | s_occupation(P, s_OccupationFn(s_ContentDevelopment))))))).

/*
(instance SportsPosition SetOrClass)
*/
fof(a3307,axiom,s_instance(s_SportsPosition, s_SetOrClass)).

/*
(subclass SportsPosition SkilledOccupation)
*/
fof(a3308,axiom,s_subclass(s_SportsPosition, s_SkilledOccupation)).

/*
(forall (?H ?O ?P)
 (=> (and (instance ?H Human) (instance ?O Organization))
  (=> (and (occupiesPosition ?H ?P ?O) (instance ?P SportsPosition))
   (instance ?O SportsTeam))))
*/
fof(a3309,axiom,! [H,O,P] : (((s_instance(H, s_Human) & s_instance(O, s_Organization)) => ((s_occupiesPosition(H, P, O) & s_instance(P, s_SportsPosition)) => s_instance(O, s_SportsTeam))))).

/*
(subclass GovernmentPosition Profession)
*/
fof(a3310,axiom,s_subclass(s_GovernmentPosition, s_Profession)).

/*
(forall (?P ?ORG ?O)
 (=> (and (instance ?P Human) (instance ?ORG Organization))
  (=>
   (and (instance ?O GovernmentPosition) (occupiesPosition ?P ?O ?ORG))
   (instance ?ORG GovernmentOrganization))))
*/
fof(a3311,axiom,! [P,ORG,O] : (((s_instance(P, s_Human) & s_instance(ORG, s_Organization)) => ((s_instance(O, s_GovernmentPosition) & s_occupiesPosition(P, O, ORG)) => s_instance(ORG, s_GovernmentOrganization))))).

/*
(instance Journalist Profession)
*/
fof(a3312,axiom,s_instance(s_Journalist, s_Profession)).

/*
(forall (?P)
 (=> (instance ?P Human)
  (=> (attribute ?P Journalist)
   (and (occupation ?P (OccupationFn ContentDevelopment))
        (occupation ?P (OccupationFn Disseminating))))))
*/
fof(a3313,axiom,! [P] : ((s_instance(P, s_Human) => (s_attribute(P, s_Journalist) => (s_occupation(P, s_OccupationFn(s_ContentDevelopment)) & s_occupation(P, s_OccupationFn(s_Disseminating))))))).

/*
(instance ModellingPosition SetOrClass)
*/
fof(a3314,axiom,s_instance(s_ModellingPosition, s_SetOrClass)).

/*
(subclass ModellingPosition Position)
*/
fof(a3315,axiom,s_subclass(s_ModellingPosition, s_Position)).

/*
(instance Soldier GovernmentPosition)
*/
fof(a3316,axiom,s_instance(s_Soldier, s_GovernmentPosition)).

/*
(instance ConfederateSoldier GovernmentPosition)
*/
fof(a3317,axiom,s_instance(s_ConfederateSoldier, s_GovernmentPosition)).

/*
(subAttribute ConfederateSoldier Soldier)
*/
fof(a3318,axiom,s_subAttribute(s_ConfederateSoldier, s_Soldier)).

/*
(instance Sailor SkilledOccupation)
*/
fof(a3319,axiom,s_instance(s_Sailor, s_SkilledOccupation)).

/*
(subAttribute ShipCaptain Sailor)
*/
fof(a3320,axiom,s_subAttribute(s_ShipCaptain, s_Sailor)).

/*
(subAttribute ShipOfficer Sailor)
*/
fof(a3321,axiom,s_subAttribute(s_ShipOfficer, s_Sailor)).

/*
(subAttribute ShipMate Sailor)
*/
fof(a3322,axiom,s_subAttribute(s_ShipMate, s_Sailor)).

/*
(instance MilitaryPrivate GovernmentPosition)
*/
fof(a3323,axiom,s_instance(s_MilitaryPrivate, s_GovernmentPosition)).

/*
(subAttribute MilitaryPrivate Soldier)
*/
fof(a3324,axiom,s_subAttribute(s_MilitaryPrivate, s_Soldier)).

/*
(subAttribute MilitaryOfficer Soldier)
*/
fof(a3325,axiom,s_subAttribute(s_MilitaryOfficer, s_Soldier)).

/*
(instance MilitaryOfficer GovernmentPosition)
*/
fof(a3326,axiom,s_instance(s_MilitaryOfficer, s_GovernmentPosition)).

/*
(forall (?OFFICER)
 (exists (?MANAGE ?PATIENT)
  (and (and (instance ?PATIENT Object) (instance ?MANAGE Process))
       (=> (instance ?OFFICER Agent)
        (=> (attribute ?OFFICER MilitaryOfficer)
         (and (instance ?MANAGE Managing)
              (and (agent ?MANAGE ?OFFICER)
                   (and (patient ?MANAGE ?PATIENT)
                        (or (instance ?PATIENT MilitaryOrganization)
                            (attribute ?PATIENT Soldier))))))))))
*/
fof(a3327,axiom,! [OFFICER] : (? [MANAGE,PATIENT] : (((s_instance(PATIENT, s_Object) & s_instance(MANAGE, s_Process)) & (s_instance(OFFICER, s_Agent) => (s_attribute(OFFICER, s_MilitaryOfficer) => (s_instance(MANAGE, s_Managing) & (s_agent(MANAGE, OFFICER) & (s_patient(MANAGE, PATIENT) & (s_instance(PATIENT, s_MilitaryOrganization) | s_attribute(PATIENT, s_Soldier))))))))))).

/*
(subAttribute MilitaryGeneral MilitaryOfficer)
*/
fof(a3328,axiom,s_subAttribute(s_MilitaryGeneral, s_MilitaryOfficer)).

/*
(instance Admiral GovernmentPosition)
*/
fof(a3329,axiom,s_instance(s_Admiral, s_GovernmentPosition)).

/*
(subAttribute Admiral MilitaryOfficer)
*/
fof(a3330,axiom,s_subAttribute(s_Admiral, s_MilitaryOfficer)).

/*
(instance Major GovernmentPosition)
*/
fof(a3331,axiom,s_instance(s_Major, s_GovernmentPosition)).

/*
(subAttribute Major MilitaryOfficer)
*/
fof(a3332,axiom,s_subAttribute(s_Major, s_MilitaryOfficer)).

/*
(subAttribute MajorGeneral MilitaryGeneral)
*/
fof(a3333,axiom,s_subAttribute(s_MajorGeneral, s_MilitaryGeneral)).

/*
(instance MajorGeneral GovernmentPosition)
*/
fof(a3334,axiom,s_instance(s_MajorGeneral, s_GovernmentPosition)).

/*
(subAttribute BrigadierGeneral MilitaryGeneral)
*/
fof(a3335,axiom,s_subAttribute(s_BrigadierGeneral, s_MilitaryGeneral)).

/*
(instance BrigadierGeneral GovernmentPosition)
*/
fof(a3336,axiom,s_instance(s_BrigadierGeneral, s_GovernmentPosition)).

/*
(subAttribute Lieutenant MilitaryOfficer)
*/
fof(a3337,axiom,s_subAttribute(s_Lieutenant, s_MilitaryOfficer)).

/*
(instance Lieutenant GovernmentPosition)
*/
fof(a3338,axiom,s_instance(s_Lieutenant, s_GovernmentPosition)).

/*
(subAttribute CaptainOfficer MilitaryOfficer)
*/
fof(a3339,axiom,s_subAttribute(s_CaptainOfficer, s_MilitaryOfficer)).

/*
(instance CaptainOfficer GovernmentPosition)
*/
fof(a3340,axiom,s_instance(s_CaptainOfficer, s_GovernmentPosition)).

/*
(subAttribute Colonel MilitaryOfficer)
*/
fof(a3341,axiom,s_subAttribute(s_Colonel, s_MilitaryOfficer)).

/*
(instance Colonel GovernmentPosition)
*/
fof(a3342,axiom,s_instance(s_Colonel, s_GovernmentPosition)).

/*
(subAttribute Sergeant MilitaryOfficer)
*/
fof(a3343,axiom,s_subAttribute(s_Sergeant, s_MilitaryOfficer)).

/*
(instance Sergeant GovernmentPosition)
*/
fof(a3344,axiom,s_instance(s_Sergeant, s_GovernmentPosition)).

/*
(subAttribute Corporal MilitaryOfficer)
*/
fof(a3345,axiom,s_subAttribute(s_Corporal, s_MilitaryOfficer)).

/*
(instance Corporal GovernmentPosition)
*/
fof(a3346,axiom,s_instance(s_Corporal, s_GovernmentPosition)).

/*
(instance CenturyDuration UnitOfDuration)
*/
fof(a3347,axiom,s_instance(s_CenturyDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER CenturyDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 100) YearDuration)))))
*/
fof(a3348,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_CenturyDuration) = s_MeasureFn(times(NUMBER, 100), s_YearDuration)))))).

/*
(instance DecadeDuration UnitOfDuration)
*/
fof(a3349,axiom,s_instance(s_DecadeDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER DecadeDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 10) YearDuration)))))
*/
fof(a3350,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_DecadeDuration) = s_MeasureFn(times(NUMBER, 10), s_YearDuration)))))).

/*
(instance YardLength UnitOfLength)
*/
fof(a3351,axiom,s_instance(s_YardLength, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER YardLength)
          (MeasureFn (MultiplicationFn 3 ?NUMBER) FootLength)))))
*/
fof(a3352,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_YardLength) = s_MeasureFn(times(3, NUMBER), s_FootLength)))))).

/*
(instance Nanometer UnitOfLength)
*/
fof(a3353,axiom,s_instance(s_Nanometer, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Nanometer)
          (MeasureFn (MultiplicationFn ?NUMBER 1.0e-9) Meter)))))
*/
fof(a3354,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Nanometer) = s_MeasureFn(times(NUMBER, 1.0e-9), s_Meter)))))).

/*
(instance NightTime SetOrClass)
*/
fof(a3355,axiom,s_instance(s_NightTime, s_SetOrClass)).

/*
(subclass NightTime TimeInterval)
*/
fof(a3356,axiom,s_subclass(s_NightTime, s_TimeInterval)).

/*
(forall (?NIGHT)
 (exists (?DAY1 ?DAY2)
  (and (and (instance ?DAY2 TimeInterval)
            (instance ?DAY1 TimeInterval))
       (=> (instance ?NIGHT NightTime)
        (and (instance ?DAY1 DayTime)
             (and (instance ?DAY2 DayTime)
                  (and (meetsTemporally ?NIGHT ?DAY1)
                       (meetsTemporally ?DAY2 ?NIGHT))))))))
*/
fof(a3357,axiom,! [NIGHT] : (? [DAY1,DAY2] : (((s_instance(DAY2, s_TimeInterval) & s_instance(DAY1, s_TimeInterval)) & (s_instance(NIGHT, s_NightTime) => (s_instance(DAY1, s_DayTime) & (s_instance(DAY2, s_DayTime) & (s_meetsTemporally(NIGHT, DAY1) & s_meetsTemporally(DAY2, NIGHT))))))))).

/*
(forall (?NIGHT)
 (exists (?RISE ?SET)
  (and (and (instance ?SET TimeInterval) (instance ?RISE TimeInterval))
       (=> (instance ?NIGHT NightTime)
        (and (instance ?RISE Sunrise)
             (and (instance ?SET Sunset)
                  (and (starts ?SET ?NIGHT)
                       (finishes ?RISE ?NIGHT))))))))
*/
fof(a3358,axiom,! [NIGHT] : (? [RISE,SET] : (((s_instance(SET, s_TimeInterval) & s_instance(RISE, s_TimeInterval)) & (s_instance(NIGHT, s_NightTime) => (s_instance(RISE, s_Sunrise) & (s_instance(SET, s_Sunset) & (s_starts(SET, NIGHT) & s_finishes(RISE, NIGHT))))))))).

/*
(subclass DayTime TimeInterval)
*/
fof(a3359,axiom,s_subclass(s_DayTime, s_TimeInterval)).

/*
(forall (?DAY)
 (exists (?NIGHT1 ?NIGHT2)
  (and (and (instance ?NIGHT2 TimeInterval)
            (instance ?NIGHT1 TimeInterval))
       (=> (instance ?DAY DayTime)
        (and (instance ?NIGHT1 NightTime)
             (and (instance ?NIGHT2 NightTime)
                  (and (meetsTemporally ?DAY ?NIGHT1)
                       (meetsTemporally ?NIGHT2 ?DAY))))))))
*/
fof(a3360,axiom,! [DAY] : (? [NIGHT1,NIGHT2] : (((s_instance(NIGHT2, s_TimeInterval) & s_instance(NIGHT1, s_TimeInterval)) & (s_instance(DAY, s_DayTime) => (s_instance(NIGHT1, s_NightTime) & (s_instance(NIGHT2, s_NightTime) & (s_meetsTemporally(DAY, NIGHT1) & s_meetsTemporally(NIGHT2, DAY))))))))).

/*
(forall (?DAY)
 (exists (?RISE ?SET)
  (and (and (instance ?SET TimeInterval) (instance ?RISE TimeInterval))
       (=> (instance ?DAY DayTime)
        (and (instance ?RISE Sunrise)
             (and (instance ?SET Sunset)
                  (and (starts ?RISE ?DAY) (finishes ?SET ?DAY))))))))
*/
fof(a3361,axiom,! [DAY] : (? [RISE,SET] : (((s_instance(SET, s_TimeInterval) & s_instance(RISE, s_TimeInterval)) & (s_instance(DAY, s_DayTime) => (s_instance(RISE, s_Sunrise) & (s_instance(SET, s_Sunset) & (s_starts(RISE, DAY) & s_finishes(SET, DAY))))))))).

/*
(instance Morning SetOrClass)
*/
fof(a3362,axiom,s_instance(s_Morning, s_SetOrClass)).

/*
(subclass Morning DayTime)
*/
fof(a3363,axiom,s_subclass(s_Morning, s_DayTime)).

/*
(forall (?MORNING ?DAY)
 (exists (?HOUR)
  (and (instance ?HOUR TimeInterval)
       (=> (subclass ?DAY Day)
        (=> (instance ?MORNING Morning)
         (and (instance ?HOUR (HourFn 12 ?DAY))
              (finishes ?HOUR ?MORNING)))))))
*/
fof(a3364,axiom,! [MORNING,DAY] : (? [HOUR] : ((s_instance(HOUR, s_TimeInterval) & (s_subclass(DAY, s_Day) => (s_instance(MORNING, s_Morning) => (s_instance(HOUR, s_HourFn(12, DAY)) & s_finishes(HOUR, MORNING)))))))).

/*
(instance AnteMeridiem SetOrClass)
*/
fof(a3365,axiom,s_instance(s_AnteMeridiem, s_SetOrClass)).

/*
(subclass AnteMeridiem TimeInterval)
*/
fof(a3366,axiom,s_subclass(s_AnteMeridiem, s_TimeInterval)).

/*
(forall (?AM)
 (exists (?D ?HOUR1 ?HOUR2)
  (and (and (instance ?HOUR2 TimeInterval)
            (instance ?HOUR1 TimeInterval) (subclass ?D Day))
       (=> (instance ?AM AnteMeridiem)
        (and (instance ?HOUR1 (HourFn 24 ?D))
             (and (starts ?HOUR1 ?AM)
                  (and (instance ?HOUR2 (HourFn 12 ?D))
                       (finishes ?HOUR2 ?AM))))))))
*/
fof(a3367,axiom,! [AM] : (? [D,HOUR1,HOUR2] : (((s_instance(HOUR2, s_TimeInterval) & s_instance(HOUR1, s_TimeInterval) & s_subclass(D, s_Day)) & (s_instance(AM, s_AnteMeridiem) => (s_instance(HOUR1, s_HourFn(24, D)) & (s_starts(HOUR1, AM) & (s_instance(HOUR2, s_HourFn(12, D)) & s_finishes(HOUR2, AM))))))))).

/*
(instance PostMeridiem SetOrClass)
*/
fof(a3368,axiom,s_instance(s_PostMeridiem, s_SetOrClass)).

/*
(subclass PostMeridiem TimeInterval)
*/
fof(a3369,axiom,s_subclass(s_PostMeridiem, s_TimeInterval)).

/*
(forall (?PM)
 (exists (?D ?HOUR1 ?HOUR2)
  (and (and (instance ?HOUR2 TimeInterval)
            (instance ?HOUR1 TimeInterval) (subclass ?D Day))
       (=> (instance ?PM PostMeridiem)
        (and (instance ?HOUR1 (HourFn 12 ?D))
             (and (starts ?HOUR1 ?PM)
                  (and (instance ?HOUR2 (HourFn 24 ?D))
                       (finishes ?HOUR2 ?PM))))))))
*/
fof(a3370,axiom,! [PM] : (? [D,HOUR1,HOUR2] : (((s_instance(HOUR2, s_TimeInterval) & s_instance(HOUR1, s_TimeInterval) & s_subclass(D, s_Day)) & (s_instance(PM, s_PostMeridiem) => (s_instance(HOUR1, s_HourFn(12, D)) & (s_starts(HOUR1, PM) & (s_instance(HOUR2, s_HourFn(24, D)) & s_finishes(HOUR2, PM))))))))).

/*
(instance Afternoon SetOrClass)
*/
fof(a3371,axiom,s_instance(s_Afternoon, s_SetOrClass)).

/*
(instance DayTime SetOrClass)
*/
fof(a3372,axiom,s_instance(s_DayTime, s_SetOrClass)).

/*
(subclass Afternoon DayTime)
*/
fof(a3373,axiom,s_subclass(s_Afternoon, s_DayTime)).

/*
(forall (?AFTERNOON ?DAY)
 (exists (?HOUR)
  (and (instance ?HOUR TimeInterval)
       (=> (subclass ?DAY Day)
        (=> (instance ?AFTERNOON Afternoon)
         (and (instance ?HOUR (HourFn 12 ?DAY))
              (starts ?HOUR ?AFTERNOON)))))))
*/
fof(a3374,axiom,! [AFTERNOON,DAY] : (? [HOUR] : ((s_instance(HOUR, s_TimeInterval) & (s_subclass(DAY, s_Day) => (s_instance(AFTERNOON, s_Afternoon) => (s_instance(HOUR, s_HourFn(12, DAY)) & s_starts(HOUR, AFTERNOON)))))))).

/*
(instance Sunrise SetOrClass)
*/
fof(a3375,axiom,s_instance(s_Sunrise, s_SetOrClass)).

/*
(subclass Sunrise TimeInterval)
*/
fof(a3376,axiom,s_subclass(s_Sunrise, s_TimeInterval)).

/*
(instance Sunset SetOrClass)
*/
fof(a3377,axiom,s_instance(s_Sunset, s_SetOrClass)).

/*
(subclass Sunset TimeInterval)
*/
fof(a3378,axiom,s_subclass(s_Sunset, s_TimeInterval)).

/*
(instance Weekend SetOrClass)
*/
fof(a3379,axiom,s_instance(s_Weekend, s_SetOrClass)).

/*
(subclass Weekend TimeInterval)
*/
fof(a3380,axiom,s_subclass(s_Weekend, s_TimeInterval)).

/*
(forall (?WEEKEND)
 (exists (?SATURDAY ?SUNDAY)
  (and (and (instance ?SUNDAY TimeInterval)
            (instance ?SATURDAY TimeInterval))
       (=> (instance ?WEEKEND Weekend)
        (and (instance ?SATURDAY Saturday)
             (and (instance ?SUNDAY Sunday)
                  (and (starts ?SATURDAY ?WEEKEND)
                       (and (finishes ?SUNDAY ?WEEKEND)
                            (meetsTemporally ?SATURDAY ?SUNDAY)))))))))
*/
fof(a3381,axiom,! [WEEKEND] : (? [SATURDAY,SUNDAY] : (((s_instance(SUNDAY, s_TimeInterval) & s_instance(SATURDAY, s_TimeInterval)) & (s_instance(WEEKEND, s_Weekend) => (s_instance(SATURDAY, s_Saturday) & (s_instance(SUNDAY, s_Sunday) & (s_starts(SATURDAY, WEEKEND) & (s_finishes(SUNDAY, WEEKEND) & s_meetsTemporally(SATURDAY, SUNDAY)))))))))).

/*
(subclass SeasonOfYear TimeInterval)
*/
fof(a3382,axiom,s_subclass(s_SeasonOfYear, s_TimeInterval)).

/*
(partition5 SeasonOfYear WinterSeason SpringSeason SummerSeason
 FallSeason)
*/
fof(a3383,axiom,s_partition5(s_SeasonOfYear, s_WinterSeason, s_SpringSeason, s_SummerSeason, s_FallSeason)).

/*
(instance WinterSeason SetOrClass)
*/
fof(a3384,axiom,s_instance(s_WinterSeason, s_SetOrClass)).

/*
(subclass WinterSeason SeasonOfYear)
*/
fof(a3385,axiom,s_subclass(s_WinterSeason, s_SeasonOfYear)).

/*
(forall (?WINTER)
 (exists (?SPRING)
  (and (instance ?SPRING TimeInterval)
       (=> (instance ?WINTER WinterSeason)
        (and (instance ?SPRING SpringSeason)
             (meetsTemporally ?WINTER ?SPRING))))))
*/
fof(a3386,axiom,! [WINTER] : (? [SPRING] : ((s_instance(SPRING, s_TimeInterval) & (s_instance(WINTER, s_WinterSeason) => (s_instance(SPRING, s_SpringSeason) & s_meetsTemporally(WINTER, SPRING))))))).

/*
(forall (?WINTER)
 (exists (?AUTUMN)
  (and (instance ?AUTUMN TimeInterval)
       (=> (instance ?WINTER WinterSeason)
        (and (instance ?AUTUMN FallSeason)
             (meetsTemporally ?AUTUMN ?WINTER))))))
*/
fof(a3387,axiom,! [WINTER] : (? [AUTUMN] : ((s_instance(AUTUMN, s_TimeInterval) & (s_instance(WINTER, s_WinterSeason) => (s_instance(AUTUMN, s_FallSeason) & s_meetsTemporally(AUTUMN, WINTER))))))).

/*
(instance SpringSeason SetOrClass)
*/
fof(a3388,axiom,s_instance(s_SpringSeason, s_SetOrClass)).

/*
(subclass SpringSeason SeasonOfYear)
*/
fof(a3389,axiom,s_subclass(s_SpringSeason, s_SeasonOfYear)).

/*
(forall (?SPRING)
 (exists (?SUMMER)
  (and (instance ?SUMMER TimeInterval)
       (=> (instance ?SPRING SpringSeason)
        (and (instance ?SUMMER SummerSeason)
             (meetsTemporally ?SPRING ?SUMMER))))))
*/
fof(a3390,axiom,! [SPRING] : (? [SUMMER] : ((s_instance(SUMMER, s_TimeInterval) & (s_instance(SPRING, s_SpringSeason) => (s_instance(SUMMER, s_SummerSeason) & s_meetsTemporally(SPRING, SUMMER))))))).

/*
(forall (?SPRING)
 (exists (?WINTER)
  (and (instance ?WINTER TimeInterval)
       (=> (instance ?SPRING SpringSeason)
        (and (instance ?WINTER WinterSeason)
             (meetsTemporally ?WINTER ?SPRING))))))
*/
fof(a3391,axiom,! [SPRING] : (? [WINTER] : ((s_instance(WINTER, s_TimeInterval) & (s_instance(SPRING, s_SpringSeason) => (s_instance(WINTER, s_WinterSeason) & s_meetsTemporally(WINTER, SPRING))))))).

/*
(instance SummerSeason SetOrClass)
*/
fof(a3392,axiom,s_instance(s_SummerSeason, s_SetOrClass)).

/*
(subclass SummerSeason SeasonOfYear)
*/
fof(a3393,axiom,s_subclass(s_SummerSeason, s_SeasonOfYear)).

/*
(forall (?SUMMER)
 (exists (?SPRING)
  (and (instance ?SPRING TimeInterval)
       (=> (instance ?SUMMER SummerSeason)
        (and (instance ?SPRING SpringSeason)
             (meetsTemporally ?SPRING ?SUMMER))))))
*/
fof(a3394,axiom,! [SUMMER] : (? [SPRING] : ((s_instance(SPRING, s_TimeInterval) & (s_instance(SUMMER, s_SummerSeason) => (s_instance(SPRING, s_SpringSeason) & s_meetsTemporally(SPRING, SUMMER))))))).

/*
(forall (?SUMMER)
 (exists (?AUTUMN)
  (and (instance ?AUTUMN TimeInterval)
       (=> (instance ?SUMMER SummerSeason)
        (and (instance ?AUTUMN FallSeason)
             (meetsTemporally ?SUMMER ?AUTUMN))))))
*/
fof(a3395,axiom,! [SUMMER] : (? [AUTUMN] : ((s_instance(AUTUMN, s_TimeInterval) & (s_instance(SUMMER, s_SummerSeason) => (s_instance(AUTUMN, s_FallSeason) & s_meetsTemporally(SUMMER, AUTUMN))))))).

/*
(instance FallSeason SetOrClass)
*/
fof(a3396,axiom,s_instance(s_FallSeason, s_SetOrClass)).

/*
(instance SeasonOfYear SetOrClass)
*/
fof(a3397,axiom,s_instance(s_SeasonOfYear, s_SetOrClass)).

/*
(subclass FallSeason SeasonOfYear)
*/
fof(a3398,axiom,s_subclass(s_FallSeason, s_SeasonOfYear)).

/*
(forall (?AUTUMN)
 (exists (?SUMMER)
  (and (instance ?SUMMER TimeInterval)
       (=> (instance ?AUTUMN FallSeason)
        (and (instance ?SUMMER SummerSeason)
             (meetsTemporally ?SUMMER ?AUTUMN))))))
*/
fof(a3399,axiom,! [AUTUMN] : (? [SUMMER] : ((s_instance(SUMMER, s_TimeInterval) & (s_instance(AUTUMN, s_FallSeason) => (s_instance(SUMMER, s_SummerSeason) & s_meetsTemporally(SUMMER, AUTUMN))))))).

/*
(forall (?AUTUMN)
 (exists (?WINTER)
  (and (instance ?WINTER TimeInterval)
       (=> (instance ?AUTUMN FallSeason)
        (and (instance ?WINTER WinterSeason)
             (meetsTemporally ?AUTUMN ?WINTER))))))
*/
fof(a3400,axiom,! [AUTUMN] : (? [WINTER] : ((s_instance(WINTER, s_TimeInterval) & (s_instance(AUTUMN, s_FallSeason) => (s_instance(WINTER, s_WinterSeason) & s_meetsTemporally(AUTUMN, WINTER))))))).

/*
(instance Upstairs PositionalAttribute)
*/
fof(a3401,axiom,s_instance(s_Upstairs, s_PositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (exists (?LEVEL1 ?LEVEL2 ?BUILDING)
  (and (and (instance ?BUILDING Object) (instance ?LEVEL2 Object)
            (instance ?LEVEL1 Object))
       (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
        (=> (orientation ?OBJ1 ?OBJ2 Upstairs)
         (and (instance ?LEVEL1 BuildingLevel)
              (and (instance ?LEVEL2 BuildingLevel)
                   (and (instance ?BUILDING Building)
                        (and (part ?LEVEL1 ?BUILDING)
                             (and (part ?LEVEL2 ?BUILDING)
                                  (and
                                   (located ?OBJ1 ?LEVEL1)
                                   (and
                                    (located ?OBJ2 ?LEVEL2)
                                    (orientation
                                     ?LEVEL1
                                     ?LEVEL2
                                     Above)))))))))))))
*/
fof(a3402,axiom,! [OBJ2,OBJ1] : (? [LEVEL1,LEVEL2,BUILDING] : (((s_instance(BUILDING, s_Object) & s_instance(LEVEL2, s_Object) & s_instance(LEVEL1, s_Object)) & ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Upstairs) => (s_instance(LEVEL1, s_BuildingLevel) & (s_instance(LEVEL2, s_BuildingLevel) & (s_instance(BUILDING, s_Building) & (s_part(LEVEL1, BUILDING) & (s_part(LEVEL2, BUILDING) & (s_located(OBJ1, LEVEL1) & (s_located(OBJ2, LEVEL2) & s_orientation(LEVEL1, LEVEL2, s_Above)))))))))))))).

/*
(instance Downstairs PositionalAttribute)
*/
fof(a3403,axiom,s_instance(s_Downstairs, s_PositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (exists (?LEVEL1 ?LEVEL2 ?BUILDING)
  (and (and (instance ?BUILDING Object) (instance ?LEVEL2 Object)
            (instance ?LEVEL1 Object))
       (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
        (=> (orientation ?OBJ1 ?OBJ2 Downstairs)
         (and (instance ?LEVEL1 BuildingLevel)
              (and (instance ?LEVEL2 BuildingLevel)
                   (and (instance ?BUILDING Building)
                        (and (part ?LEVEL1 ?BUILDING)
                             (and (part ?LEVEL2 ?BUILDING)
                                  (and
                                   (located ?OBJ1 ?LEVEL1)
                                   (and
                                    (located ?OBJ2 ?LEVEL2)
                                    (orientation
                                     ?LEVEL1
                                     ?LEVEL2
                                     Below)))))))))))))
*/
fof(a3404,axiom,! [OBJ2,OBJ1] : (? [LEVEL1,LEVEL2,BUILDING] : (((s_instance(BUILDING, s_Object) & s_instance(LEVEL2, s_Object) & s_instance(LEVEL1, s_Object)) & ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Downstairs) => (s_instance(LEVEL1, s_BuildingLevel) & (s_instance(LEVEL2, s_BuildingLevel) & (s_instance(BUILDING, s_Building) & (s_part(LEVEL1, BUILDING) & (s_part(LEVEL2, BUILDING) & (s_located(OBJ1, LEVEL1) & (s_located(OBJ2, LEVEL2) & s_orientation(LEVEL1, LEVEL2, s_Below)))))))))))))).

/*
(instance LinguisticAttribute SetOrClass)
*/
fof(a3405,axiom,s_instance(s_LinguisticAttribute, s_SetOrClass)).

/*
(subclass LinguisticAttribute InternalAttribute)
*/
fof(a3406,axiom,s_subclass(s_LinguisticAttribute, s_InternalAttribute)).

/*
(instance Happiness EmotionalState)
*/
fof(a3407,axiom,s_instance(s_Happiness, s_EmotionalState)).

/*
(forall (?PERSON)
 (forall (?PROP)
  (=> (instance ?PROP Formula)
   (=> (instance ?PERSON CognitiveAgent)
    (=> (attribute ?PERSON Happiness) (not (fears ?PERSON ?PROP)))))))
*/
fof(a3408,axiom,! [PERSON] : (! [PROP] : ((s_instance(PROP, s_Formula) => (s_instance(PERSON, s_CognitiveAgent) => (s_attribute(PERSON, s_Happiness) => (~ s_fears(PERSON, PROP)))))))).

/*
(subAttribute Satisfaction Happiness)
*/
fof(a3409,axiom,s_subAttribute(s_Satisfaction, s_Happiness)).

/*
(subAttribute Tranquility Happiness)
*/
fof(a3410,axiom,s_subAttribute(s_Tranquility, s_Happiness)).

/*
(contraryAttribute2 Tranquility Anxiety)
*/
fof(a3411,axiom,s_contraryAttribute2(s_Tranquility, s_Anxiety)).

/*
(instance Unhappiness EmotionalState)
*/
fof(a3412,axiom,s_instance(s_Unhappiness, s_EmotionalState)).

/*
(contraryAttribute2 Unhappiness Happiness)
*/
fof(a3413,axiom,s_contraryAttribute2(s_Unhappiness, s_Happiness)).

/*
(subAttribute Excitement Happiness)
*/
fof(a3414,axiom,s_subAttribute(s_Excitement, s_Happiness)).

/*
(subAttribute Anxiety Unhappiness)
*/
fof(a3415,axiom,s_subAttribute(s_Anxiety, s_Unhappiness)).

/*
(forall (?PERSON)
 (exists (?PROP)
  (and (instance ?PROP Formula)
       (=> (instance ?PERSON CognitiveAgent)
        (=> (attribute ?PERSON Anxiety) (fears ?PERSON ?PROP))))))
*/
fof(a3416,axiom,! [PERSON] : (? [PROP] : ((s_instance(PROP, s_Formula) & (s_instance(PERSON, s_CognitiveAgent) => (s_attribute(PERSON, s_Anxiety) => s_fears(PERSON, PROP))))))).

/*
(subAttribute Anger Unhappiness)
*/
fof(a3417,axiom,s_subAttribute(s_Anger, s_Unhappiness)).

/*
(forall (?PERSON)
 (exists (?PROP)
  (and (instance ?PROP Formula)
       (=> (instance ?PERSON CognitiveAgent)
        (=> (attribute ?PERSON Anger) (disapproves ?PERSON ?PROP))))))
*/
fof(a3418,axiom,! [PERSON] : (? [PROP] : ((s_instance(PROP, s_Formula) & (s_instance(PERSON, s_CognitiveAgent) => (s_attribute(PERSON, s_Anger) => s_disapproves(PERSON, PROP))))))).

/*
(subAttribute Pain Unhappiness)
*/
fof(a3419,axiom,s_subAttribute(s_Pain, s_Unhappiness)).

/*
(subAttribute Headache Pain)
*/
fof(a3420,axiom,s_subAttribute(s_Headache, s_Pain)).

/*
(forall (?E)
 (exists (?H)
  (and (instance ?H Object)
       (=> (instance ?E Object)
        (=> (attribute ?E Headache)
         (and (instance ?H Head)
              (and (part ?H ?E) (attribute ?H Pain))))))))
*/
fof(a3421,axiom,! [E] : (? [H] : ((s_instance(H, s_Object) & (s_instance(E, s_Object) => (s_attribute(E, s_Headache) => (s_instance(H, s_Head) & (s_part(H, E) & s_attribute(H, s_Pain))))))))).

/*
(instance Surprise EmotionalState)
*/
fof(a3422,axiom,s_instance(s_Surprise, s_EmotionalState)).

/*
(forall (?AGENT ?TIME)
 (exists (?PART ?PROP)
  (and (and (instance ?PROP Formula) (instance ?PART TimePosition))
       (=>
        (and (instance ?TIME TimePosition)
             (instance ?AGENT CognitiveAgent))
        (=> (holdsDuring ?TIME (attribute ?AGENT Surprise))
         (and (temporalPart ?PART (PastFn ?TIME))
              (and (holdsDuring ?PART (expects ?AGENT ?PROP))
                   (holdsDuring ?TIME (truth ?PROP False)))))))))
*/
%% no translation to TPTP available.

/*
(instance structure BinaryPredicate)
*/
fof(a3423,axiom,s_instance(s_structure_m, s_BinaryPredicate)).

/*
(instance structure IrreflexiveRelation)
*/
fof(a3424,axiom,s_instance(s_structure_m, s_IrreflexiveRelation)).

/*
(instance structure AsymmetricRelation)
*/
fof(a3425,axiom,s_instance(s_structure_m, s_AsymmetricRelation)).

/*
(subrelation structure attribute)
*/
fof(a3426,axiom,s_subrelation(s_structure_m, s_attribute_m)).

/*
(instance color BinaryPredicate)
*/
fof(a3427,axiom,s_instance(s_color_m, s_BinaryPredicate)).

/*
(subrelation color attribute)
*/
fof(a3428,axiom,s_subrelation(s_color_m, s_attribute_m)).

/*
(forall (?T1 ?ATTR ?OBJ)
 (=> (and (instance ?T1 TimePosition) (instance ?OBJ Object))
  (=>
   (and (instance ?ATTR ColorAttribute)
        (holdsDuring ?T1 (attribute ?OBJ ?ATTR)))
   (holdsDuring ?T1 (color ?OBJ ?ATTR)))))
*/
%% no translation to TPTP available.

/*
(subclass SpectralColor ColorAttribute)
*/
fof(a3429,axiom,s_subclass(s_SpectralColor, s_ColorAttribute)).

/*
(subclass SecondaryColor ColorAttribute)
*/
fof(a3430,axiom,s_subclass(s_SecondaryColor, s_ColorAttribute)).

/*
(forall (?COLOR ?OBJ)
 (exists (?PROCESS ?RESOURCE1 ?RESOURCE2 ?PRIMARY1 ?PRIMARY2)
  (and (and (instance ?PRIMARY2 Attribute)
            (instance ?PRIMARY1 Attribute) (instance ?RESOURCE2 Object)
            (instance ?RESOURCE1 Object) (instance ?PROCESS Process))
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?COLOR SecondaryColor) (attribute ?OBJ ?COLOR))
         (and (result ?PROCESS ?OBJ)
              (and (resource ?PROCESS ?RESOURCE1)
                   (and (resource ?PROCESS ?RESOURCE2)
                        (and (attribute ?RESOURCE1 ?PRIMARY1)
                             (and (attribute ?RESOURCE2 ?PRIMARY2)
                                  (and
                                   (instance ?PRIMARY1 PrimaryColor)
                                   (and
                                    (instance ?PRIMARY2 PrimaryColor)
                                    (not
                                     (equal
                                      ?PRIMARY1
                                      ?PRIMARY2))))))))))))))
*/
fof(a3431,axiom,! [COLOR,OBJ] : (? [PROCESS,RESOURCE1,RESOURCE2,PRIMARY1,PRIMARY2] : (((s_instance(PRIMARY2, s_Attribute) & s_instance(PRIMARY1, s_Attribute) & s_instance(RESOURCE2, s_Object) & s_instance(RESOURCE1, s_Object) & s_instance(PROCESS, s_Process)) & (s_instance(OBJ, s_Object) => ((s_instance(COLOR, s_SecondaryColor) & s_attribute(OBJ, COLOR)) => (s_result(PROCESS, OBJ) & (s_resource(PROCESS, RESOURCE1) & (s_resource(PROCESS, RESOURCE2) & (s_attribute(RESOURCE1, PRIMARY1) & (s_attribute(RESOURCE2, PRIMARY2) & (s_instance(PRIMARY1, s_PrimaryColor) & (s_instance(PRIMARY2, s_PrimaryColor) & (~ (PRIMARY1 = PRIMARY2))))))))))))))).

/*
(instance VioletColor SpectralColor)
*/
fof(a3432,axiom,s_instance(s_VioletColor, s_SpectralColor)).

/*
(instance VioletColor SecondaryColor)
*/
fof(a3433,axiom,s_instance(s_VioletColor, s_SecondaryColor)).

/*
(instance GrayColor SecondaryColor)
*/
fof(a3434,axiom,s_instance(s_GrayColor, s_SecondaryColor)).

/*
(instance Pink SecondaryColor)
*/
fof(a3435,axiom,s_instance(s_Pink, s_SecondaryColor)).

/*
(instance Brown SecondaryColor)
*/
fof(a3436,axiom,s_instance(s_Brown, s_SecondaryColor)).

/*
(instance OrangeColor SecondaryColor)
*/
fof(a3437,axiom,s_instance(s_OrangeColor, s_SecondaryColor)).

/*
(instance OrangeColor SpectralColor)
*/
fof(a3438,axiom,s_instance(s_OrangeColor, s_SpectralColor)).

/*
(instance Green SecondaryColor)
*/
fof(a3439,axiom,s_instance(s_Green, s_SecondaryColor)).

/*
(instance SpectralColor SetOrClass)
*/
fof(a3440,axiom,s_instance(s_SpectralColor, s_SetOrClass)).

/*
(instance Green SpectralColor)
*/
fof(a3441,axiom,s_instance(s_Green, s_SpectralColor)).

/*
(instance SecondaryColor SetOrClass)
*/
fof(a3442,axiom,s_instance(s_SecondaryColor, s_SetOrClass)).

/*
(instance Purple SecondaryColor)
*/
fof(a3443,axiom,s_instance(s_Purple, s_SecondaryColor)).

/*
(instance LineFormation ShapeAttribute)
*/
fof(a3444,axiom,s_instance(s_LineFormation, s_ShapeAttribute)).

/*
(forall (?COLLECTION)
 (=> (instance ?COLLECTION Object)
  (=> (attribute ?COLLECTION LineFormation)
   (instance ?COLLECTION Collection))))
*/
fof(a3445,axiom,! [COLLECTION] : ((s_instance(COLLECTION, s_Object) => (s_attribute(COLLECTION, s_LineFormation) => s_instance(COLLECTION, s_Collection))))).

/*
(instance Stressed SoundAttribute)
*/
fof(a3446,axiom,s_instance(s_Stressed, s_SoundAttribute)).

/*
(forall (?SYLLABLE)
 (=> (instance ?SYLLABLE Object)
  (=> (attribute ?SYLLABLE Stressed) (instance ?SYLLABLE Syllable))))
*/
fof(a3447,axiom,! [SYLLABLE] : ((s_instance(SYLLABLE, s_Object) => (s_attribute(SYLLABLE, s_Stressed) => s_instance(SYLLABLE, s_Syllable))))).

/*
(forall (?WORD ?SYLLABLE)
 (forall (?SYLLABLE2)
  (=> (instance ?SYLLABLE2 Object)
   (=> (instance ?SYLLABLE Object)
    (=>
     (and (attribute ?SYLLABLE Stressed)
          (and (instance ?WORD Word) (part ?SYLLABLE ?WORD)))
     (not (and (instance ?SYLLABLE2 Syllable)
               (and (part ?SYLLABLE2 ?WORD)
                    (and (attribute ?SYLLABLE2 Stressed)
                         (not (equal ?SYLLABLE2 ?SYLLABLE)))))))))))
*/
fof(a3448,axiom,! [WORD,SYLLABLE] : (! [SYLLABLE2] : ((s_instance(SYLLABLE2, s_Object) => (s_instance(SYLLABLE, s_Object) => ((s_attribute(SYLLABLE, s_Stressed) & (s_instance(WORD, s_Word) & s_part(SYLLABLE, WORD))) => (~ (s_instance(SYLLABLE2, s_Syllable) & (s_part(SYLLABLE2, WORD) & (s_attribute(SYLLABLE2, s_Stressed) & (~ (SYLLABLE2 = SYLLABLE)))))))))))).

/*
(instance Syllable SetOrClass)
*/
fof(a3449,axiom,s_instance(s_Syllable, s_SetOrClass)).

/*
(subclass Syllable SymbolicString)
*/
fof(a3450,axiom,s_subclass(s_Syllable, s_SymbolicString)).

/*
(forall (?WORD)
 (exists (?SYLLABLE)
  (and (instance ?SYLLABLE Object)
       (=> (instance ?WORD Word)
        (and (instance ?SYLLABLE Syllable) (part ?SYLLABLE ?WORD))))))
*/
fof(a3451,axiom,! [WORD] : (? [SYLLABLE] : ((s_instance(SYLLABLE, s_Object) & (s_instance(WORD, s_Word) => (s_instance(SYLLABLE, s_Syllable) & s_part(SYLLABLE, WORD))))))).

/*
(subclass AlphabeticCharacter Character)
*/
fof(a3452,axiom,s_subclass(s_AlphabeticCharacter, s_Character)).

/*
(instance DigitCharacter SetOrClass)
*/
fof(a3453,axiom,s_instance(s_DigitCharacter, s_SetOrClass)).

/*
(subclass DigitCharacter Character)
*/
fof(a3454,axiom,s_subclass(s_DigitCharacter, s_Character)).

/*
(instance Consonant SetOrClass)
*/
fof(a3455,axiom,s_instance(s_Consonant, s_SetOrClass)).

/*
(subclass Consonant AlphabeticCharacter)
*/
fof(a3456,axiom,s_subclass(s_Consonant, s_AlphabeticCharacter)).

/*
(instance Vowel SetOrClass)
*/
fof(a3457,axiom,s_instance(s_Vowel, s_SetOrClass)).

/*
(instance AlphabeticCharacter SetOrClass)
*/
fof(a3458,axiom,s_instance(s_AlphabeticCharacter, s_SetOrClass)).

/*
(subclass Vowel AlphabeticCharacter)
*/
fof(a3459,axiom,s_subclass(s_Vowel, s_AlphabeticCharacter)).

/*
(instance Lost ContestAttribute)
*/
fof(a3460,axiom,s_instance(s_Lost, s_ContestAttribute)).

/*
(contraryAttribute2 Lost Won)
*/
fof(a3461,axiom,s_contraryAttribute2(s_Lost, s_Won)).

/*
(instance Won ContestAttribute)
*/
fof(a3462,axiom,s_instance(s_Won, s_ContestAttribute)).

/*
(instance TieScore ContestAttribute)
*/
fof(a3463,axiom,s_instance(s_TieScore, s_ContestAttribute)).

/*
(subclass GameAttribute ContestAttribute)
*/
fof(a3464,axiom,s_subclass(s_GameAttribute, s_ContestAttribute)).

/*
(forall (?ATTR ?THING)
 (exists (?GAME)
  (and (instance ?GAME Process)
       (=> (and (instance ?THING Agent) (instance ?THING Process))
        (=>
         (and (property ?THING ?ATTR) (instance ?ATTR GameAttribute))
         (and (instance ?GAME Game)
              (or (agent ?GAME ?THING)
                  (or (patient ?GAME ?THING)
                      (subProcess ?THING ?GAME)))))))))
*/
fof(a3465,axiom,! [ATTR,THING] : (? [GAME] : ((s_instance(GAME, s_Process) & ((s_instance(THING, s_Agent) & s_instance(THING, s_Process)) => ((s_property(THING, ATTR) & s_instance(ATTR, s_GameAttribute)) => (s_instance(GAME, s_Game) & (s_agent(GAME, THING) | (s_patient(GAME, THING) | s_subProcess(THING, GAME)))))))))).

/*
(instance GameAttribute SetOrClass)
*/
fof(a3466,axiom,s_instance(s_GameAttribute, s_SetOrClass)).

/*
(subclass SportsAttribute GameAttribute)
*/
fof(a3467,axiom,s_subclass(s_SportsAttribute, s_GameAttribute)).

/*
(forall (?ATTR ?THING)
 (exists (?SPORT)
  (and (instance ?SPORT Process)
       (=> (and (instance ?THING Agent) (instance ?THING Process))
        (=>
         (and (property ?THING ?ATTR) (instance ?ATTR SportsAttribute))
         (and (instance ?SPORT Game)
              (or (agent ?SPORT ?THING)
                  (or (patient ?SPORT ?THING)
                      (subProcess ?THING ?SPORT)))))))))
*/
fof(a3468,axiom,! [ATTR,THING] : (? [SPORT] : ((s_instance(SPORT, s_Process) & ((s_instance(THING, s_Agent) & s_instance(THING, s_Process)) => ((s_property(THING, ATTR) & s_instance(ATTR, s_SportsAttribute)) => (s_instance(SPORT, s_Game) & (s_agent(SPORT, THING) | (s_patient(SPORT, THING) | s_subProcess(THING, SPORT)))))))))).

/*
(instance Foul SportsAttribute)
*/
fof(a3469,axiom,s_instance(s_Foul, s_SportsAttribute)).

/*
(instance SportsAttribute SetOrClass)
*/
fof(a3470,axiom,s_instance(s_SportsAttribute, s_SetOrClass)).

/*
(instance SportsOut SportsAttribute)
*/
fof(a3471,axiom,s_instance(s_SportsOut, s_SportsAttribute)).

/*
(subclass PoliticoEconomicAttribute RelationalAttribute)
*/
fof(a3472,axiom,s_subclass(s_PoliticoEconomicAttribute, s_RelationalAttribute)).

/*
(partition3 PoliticoEconomicAttribute FormOfGovernment
 EconomicAttribute)
*/
fof(a3473,axiom,s_partition3(s_PoliticoEconomicAttribute, s_FormOfGovernment, s_EconomicAttribute)).

/*
(forall (?ATTRIBUTE ?GOVERNMENT)
 (=> (instance ?GOVERNMENT Object)
  (=>
   (and (instance ?ATTRIBUTE PoliticoEconomicAttribute)
        (attribute ?GOVERNMENT ?ATTRIBUTE))
   (instance ?GOVERNMENT Government))))
*/
fof(a3474,axiom,! [ATTRIBUTE,GOVERNMENT] : ((s_instance(GOVERNMENT, s_Object) => ((s_instance(ATTRIBUTE, s_PoliticoEconomicAttribute) & s_attribute(GOVERNMENT, ATTRIBUTE)) => s_instance(GOVERNMENT, s_Government))))).

/*
(instance EconomicAttribute SetOrClass)
*/
fof(a3475,axiom,s_instance(s_EconomicAttribute, s_SetOrClass)).

/*
(subclass EconomicAttribute PoliticoEconomicAttribute)
*/
fof(a3476,axiom,s_subclass(s_EconomicAttribute, s_PoliticoEconomicAttribute)).

/*
(instance FormOfGovernment SetOrClass)
*/
fof(a3477,axiom,s_instance(s_FormOfGovernment, s_SetOrClass)).

/*
(instance PoliticoEconomicAttribute SetOrClass)
*/
fof(a3478,axiom,s_instance(s_PoliticoEconomicAttribute, s_SetOrClass)).

/*
(subclass FormOfGovernment PoliticoEconomicAttribute)
*/
fof(a3479,axiom,s_subclass(s_FormOfGovernment, s_PoliticoEconomicAttribute)).

/*
(instance ChemicalReduction SetOrClass)
*/
fof(a3480,axiom,s_instance(s_ChemicalReduction, s_SetOrClass)).

/*
(subclass ChemicalReduction ChemicalSynthesis)
*/
fof(a3481,axiom,s_subclass(s_ChemicalReduction, s_ChemicalSynthesis)).

/*
(disjoint ChemicalReduction Oxidation)
*/
fof(a3482,axiom,s_disjoint(s_ChemicalReduction, s_Oxidation)).

/*
(forall (?L ?R ?G ?S)
 (=>
  (and (instance ?L PositiveInteger) (instance ?G PositiveInteger)
       (instance ?S PureSubstance))
  (=>
   (and (instance ?R ChemicalReduction)
        (and (patient ?R ?S)
             (holdsDuring (BeginFn (WhenFn ?R))
              (electronNumber ?S ?L))))
   (and (greaterThan ?G ?L)
        (holdsDuring (EndFn (WhenFn ?R)) (electronNumber ?S ?G))))))
*/
%% no translation to TPTP available.

/*
(instance Oxidation SetOrClass)
*/
fof(a3483,axiom,s_instance(s_Oxidation, s_SetOrClass)).

/*
(subclass Oxidation ChemicalDecomposition)
*/
fof(a3484,axiom,s_subclass(s_Oxidation, s_ChemicalDecomposition)).

/*
(forall (?O ?G ?S)
 (exists (?L)
  (and (instance ?L PositiveInteger)
       (=>
        (and (instance ?G PositiveInteger) (instance ?S PureSubstance))
        (=>
         (and (instance ?O Oxidation)
              (and (patient ?O ?S)
                   (holdsDuring (BeginFn (WhenFn ?O))
                    (electronNumber ?S ?G))))
         (and (lessThan ?L ?G)
              (holdsDuring (EndFn (WhenFn ?O))
               (electronNumber ?S ?L))))))))
*/
%% no translation to TPTP available.

/*
(instance Dialysis SetOrClass)
*/
fof(a3485,axiom,s_instance(s_Dialysis, s_SetOrClass)).

/*
(subclass Dialysis Separating)
*/
fof(a3486,axiom,s_subclass(s_Dialysis, s_Separating)).

/*
(forall (?DIALYSIS)
 (exists (?SOLUTION ?SUBSTANCE1 ?SUBSTANCE2)
  (and (and (instance ?SUBSTANCE2 Entity) (instance ?SUBSTANCE1 Entity)
            (instance ?SOLUTION Object))
       (=> (instance ?DIALYSIS Dialysis)
        (and (resource ?DIALYSIS ?SOLUTION)
             (and (instance ?SOLUTION Solution)
                  (and (result ?DIALYSIS ?SUBSTANCE1)
                       (and (instance ?SUBSTANCE1 PureSubstance)
                            (and (result ?DIALYSIS ?SUBSTANCE2)
                                 (and
                                  (instance ?SUBSTANCE2 PureSubstance)
                                  (not
                                   (equal
                                    ?SUBSTANCE1
                                    ?SUBSTANCE2))))))))))))
*/
fof(a3487,axiom,! [DIALYSIS] : (? [SOLUTION,SUBSTANCE1,SUBSTANCE2] : (((s_instance(SUBSTANCE2, s_Entity) & s_instance(SUBSTANCE1, s_Entity) & s_instance(SOLUTION, s_Object)) & (s_instance(DIALYSIS, s_Dialysis) => (s_resource(DIALYSIS, SOLUTION) & (s_instance(SOLUTION, s_Solution) & (s_result(DIALYSIS, SUBSTANCE1) & (s_instance(SUBSTANCE1, s_PureSubstance) & (s_result(DIALYSIS, SUBSTANCE2) & (s_instance(SUBSTANCE2, s_PureSubstance) & (~ (SUBSTANCE1 = SUBSTANCE2))))))))))))).

/*
(instance Diluting SetOrClass)
*/
fof(a3488,axiom,s_instance(s_Diluting, s_SetOrClass)).

/*
(subclass Diluting Putting)
*/
fof(a3489,axiom,s_subclass(s_Diluting, s_Putting)).

/*
(forall (?D)
 (exists (?S)
  (and (instance ?S Object)
       (=> (instance ?D Diluting)
        (and (patient ?D ?S)
             (and (instance ?S Solution) (attribute ?S Liquid)))))))
*/
fof(a3490,axiom,! [D] : (? [S] : ((s_instance(S, s_Object) & (s_instance(D, s_Diluting) => (s_patient(D, S) & (s_instance(S, s_Solution) & s_attribute(S, s_Liquid)))))))).

/*
(instance ChemicalEquilibrium InternalAttribute)
*/
fof(a3491,axiom,s_instance(s_ChemicalEquilibrium, s_InternalAttribute)).

/*
(forall (?PROCESS)
 (=> (instance ?PROCESS Entity)
  (=> (property ?PROCESS ChemicalEquilibrium)
   (instance ?PROCESS ChemicalProcess))))
*/
fof(a3492,axiom,! [PROCESS] : ((s_instance(PROCESS, s_Entity) => (s_property(PROCESS, s_ChemicalEquilibrium) => s_instance(PROCESS, s_ChemicalProcess))))).

/*
(forall (?RESULT ?TIME ?RESOURCE ?PROCESS)
 (exists (?RATIO)
  (and (instance ?RATIO Entity)
       (=>
        (and (instance ?PROCESS Process) (instance ?RESOURCE Quantity)
             (instance ?RESOURCE Object) (instance ?TIME TimePosition)
             (instance ?RESULT Quantity))
        (=> (property ?PROCESS ChemicalEquilibrium)
         (=>
          (and (holdsDuring ?TIME (resource ?PROCESS ?RESOURCE))
               (holdsDuring ?TIME (result ?PROCESS ?RESULT)))
          (equal ?RATIO (DivisionFn ?RESOURCE ?RESULT))))))))
*/
%% no translation to TPTP available.

/*
(instance Chromatography SetOrClass)
*/
fof(a3493,axiom,s_instance(s_Chromatography, s_SetOrClass)).

/*
(subclass Chromatography Separating)
*/
fof(a3494,axiom,s_subclass(s_Chromatography, s_Separating)).

/*
(forall (?C)
 (exists (?M)
  (and (instance ?M Object)
       (=> (instance ?C Chromatography)
        (and (resource ?C ?M)
             (or (instance ?M LiquidMixture)
                 (instance ?M GasMixture)))))))
*/
fof(a3495,axiom,! [C] : (? [M] : ((s_instance(M, s_Object) & (s_instance(C, s_Chromatography) => (s_resource(C, M) & (s_instance(M, s_LiquidMixture) | s_instance(M, s_GasMixture)))))))).

/*
(forall (?C)
 (exists (?S)
  (and (instance ?S Entity)
       (=> (instance ?C Chromatography)
        (and (instance ?S PureSubstance) (result ?C ?S))))))
*/
fof(a3496,axiom,! [C] : (? [S] : ((s_instance(S, s_Entity) & (s_instance(C, s_Chromatography) => (s_instance(S, s_PureSubstance) & s_result(C, S))))))).

/*
(subclass BreakabilityAttribute InternalAttribute)
*/
fof(a3497,axiom,s_subclass(s_BreakabilityAttribute, s_InternalAttribute)).

/*
(instance Fragile BreakabilityAttribute)
*/
fof(a3498,axiom,s_instance(s_Fragile, s_BreakabilityAttribute)).

/*
(instance BreakabilityAttribute SetOrClass)
*/
fof(a3499,axiom,s_instance(s_BreakabilityAttribute, s_SetOrClass)).

/*
(instance Unbreakable BreakabilityAttribute)
*/
fof(a3500,axiom,s_instance(s_Unbreakable, s_BreakabilityAttribute)).

/*
(contraryAttribute2 Unbreakable Fragile)
*/
fof(a3501,axiom,s_contraryAttribute2(s_Unbreakable, s_Fragile)).

/*
(subrelation contestParticipant agent)
*/
fof(a3502,axiom,s_subrelation(s_contestParticipant_m, s_agent_m)).

/*
(instance contestParticipant CaseRole)
*/
fof(a3503,axiom,s_instance(s_contestParticipant_m, s_CaseRole)).

/*
(instance contestParticipant TotalValuedRelation)
*/
fof(a3504,axiom,s_instance(s_contestParticipant_m, s_TotalValuedRelation)).

/*
(instance CivilWar SetOrClass)
*/
fof(a3505,axiom,s_instance(s_CivilWar, s_SetOrClass)).

/*
(subclass CivilWar War)
*/
fof(a3506,axiom,s_subclass(s_CivilWar, s_War)).

/*
(forall (?WAR)
 (exists (?NATION)
  (forall (?AGENT)
   (=> (instance ?AGENT GeopoliticalArea)
    (and (instance ?NATION GeopoliticalArea)
         (=> (instance ?WAR CivilWar)
          (and (instance ?NATION Nation)
               (=> (contestParticipant ?WAR ?AGENT)
                (geopoliticalSubdivision ?AGENT ?NATION)))))))))
*/
fof(a3507,axiom,! [WAR] : (? [NATION] : (! [AGENT] : ((s_instance(AGENT, s_GeopoliticalArea) => (s_instance(NATION, s_GeopoliticalArea) & (s_instance(WAR, s_CivilWar) => (s_instance(NATION, s_Nation) & (s_contestParticipant(WAR, AGENT) => s_geopoliticalSubdivision(AGENT, NATION)))))))))).

/*
(subclass Debating Contest)
*/
fof(a3508,axiom,s_subclass(s_Debating, s_Contest)).

/*
(instance Debating SetOrClass)
*/
fof(a3509,axiom,s_instance(s_Debating, s_SetOrClass)).

/*
(subclass Debating LinguisticCommunication)
*/
fof(a3510,axiom,s_subclass(s_Debating, s_LinguisticCommunication)).

/*
(subclass Negotiating Contest)
*/
fof(a3511,axiom,s_subclass(s_Negotiating, s_Contest)).

/*
(instance Negotiating SetOrClass)
*/
fof(a3512,axiom,s_instance(s_Negotiating, s_SetOrClass)).

/*
(subclass Negotiating LinguisticCommunication)
*/
fof(a3513,axiom,s_subclass(s_Negotiating, s_LinguisticCommunication)).

/*
(forall (?NEGOTIATE)
 (=> (instance ?NEGOTIATE Negotiating)
  (hasPurpose ?NEGOTIATE
   (exists (?COMMIT)
    (and (instance ?COMMIT Committing)
         (and (subProcess ?COMMIT ?NEGOTIATE)
              (finishes (WhenFn ?COMMIT) (WhenFn ?NEGOTIATE))))))))
*/
%% no translation to TPTP available.

/*
(instance BusinessCompetition SetOrClass)
*/
fof(a3514,axiom,s_instance(s_BusinessCompetition, s_SetOrClass)).

/*
(subclass BusinessCompetition Contest)
*/
fof(a3515,axiom,s_subclass(s_BusinessCompetition, s_Contest)).

/*
(forall (?AGENT ?CONTEST)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?CONTEST BusinessCompetition)
        (contestParticipant ?CONTEST ?AGENT))
   (instance ?AGENT Corporation))))
*/
fof(a3516,axiom,! [AGENT,CONTEST] : ((s_instance(AGENT, s_Agent) => ((s_instance(CONTEST, s_BusinessCompetition) & s_contestParticipant(CONTEST, AGENT)) => s_instance(AGENT, s_Corporation))))).

/*
(subclass VisualAcuityAttribute BiologicalAttribute)
*/
fof(a3517,axiom,s_subclass(s_VisualAcuityAttribute, s_BiologicalAttribute)).

/*
(instance ColorBlind VisualAcuityAttribute)
*/
fof(a3518,axiom,s_instance(s_ColorBlind, s_VisualAcuityAttribute)).

/*
(subclass Disability DiseaseOrSyndrome)
*/
fof(a3519,axiom,s_subclass(s_Disability, s_DiseaseOrSyndrome)).

/*
(instance PhysicalDisability SetOrClass)
*/
fof(a3520,axiom,s_instance(s_PhysicalDisability, s_SetOrClass)).

/*
(subclass PhysicalDisability Disability)
*/
fof(a3521,axiom,s_subclass(s_PhysicalDisability, s_Disability)).

/*
(instance Disability SetOrClass)
*/
fof(a3522,axiom,s_instance(s_Disability, s_SetOrClass)).

/*
(subclass SensoryDisability Disability)
*/
fof(a3523,axiom,s_subclass(s_SensoryDisability, s_Disability)).

/*
(instance VisualAcuityAttribute SetOrClass)
*/
fof(a3524,axiom,s_instance(s_VisualAcuityAttribute, s_SetOrClass)).

/*
(instance Blind VisualAcuityAttribute)
*/
fof(a3525,axiom,s_instance(s_Blind, s_VisualAcuityAttribute)).

/*
(instance Blind SensoryDisability)
*/
fof(a3526,axiom,s_instance(s_Blind, s_SensoryDisability)).

/*
(forall (?AGENT)
 (=> (instance ?AGENT Object)
  (=> (attribute ?AGENT Blind) (not (capability Seeing agent ?AGENT)))))
*/
fof(a3527,axiom,! [AGENT] : ((s_instance(AGENT, s_Object) => (s_attribute(AGENT, s_Blind) => (~ s_capability(s_Seeing, s_agent_m, AGENT)))))).

/*
(instance SensoryDisability SetOrClass)
*/
fof(a3528,axiom,s_instance(s_SensoryDisability, s_SetOrClass)).

/*
(instance Deaf SensoryDisability)
*/
fof(a3529,axiom,s_instance(s_Deaf, s_SensoryDisability)).

/*
(forall (?A)
 (=> (instance ?A Object)
  (=> (attribute ?A Deaf) (not (capability Hearing agent ?A)))))
*/
fof(a3530,axiom,! [A] : ((s_instance(A, s_Object) => (s_attribute(A, s_Deaf) => (~ s_capability(s_Hearing, s_agent_m, A)))))).

/*
(instance Hungry BiologicalAttribute)
*/
fof(a3531,axiom,s_instance(s_Hungry, s_BiologicalAttribute)).

/*
(forall (?A)
 (=> (instance ?A CognitiveAgent)
  (=> (attribute ?A Hungry)
   (desires ?A
    (exists (?E) (and (instance ?E Eating) (agent ?E ?A)))))))
*/
%% no translation to TPTP available.

/*
(instance Pregnant BiologicalAttribute)
*/
fof(a3532,axiom,s_instance(s_Pregnant, s_BiologicalAttribute)).

/*
(forall (?H)
 (=> (instance ?H Object)
  (=> (attribute ?H Pregnant) (attribute ?H Female))))
*/
fof(a3533,axiom,! [H] : ((s_instance(H, s_Object) => (s_attribute(H, s_Pregnant) => s_attribute(H, s_Female))))).

/*
(subAttribute Puberty NonFullyFormed)
*/
fof(a3534,axiom,s_subAttribute(s_Puberty, s_NonFullyFormed)).

/*
(instance Fist BodyPosition)
*/
fof(a3535,axiom,s_instance(s_Fist, s_BodyPosition)).

/*
(forall (?HAND)
 (=> (instance ?HAND Object)
  (=> (attribute ?HAND Fist) (instance ?HAND Hand))))
*/
fof(a3536,axiom,! [HAND] : ((s_instance(HAND, s_Object) => (s_attribute(HAND, s_Fist) => s_instance(HAND, s_Hand))))).

/*
(subclass LyingDown BodyMotion)
*/
fof(a3537,axiom,s_subclass(s_LyingDown, s_BodyMotion)).

/*
(instance LyingDown SetOrClass)
*/
fof(a3538,axiom,s_instance(s_LyingDown, s_SetOrClass)).

/*
(subclass LyingDown MotionDownward)
*/
fof(a3539,axiom,s_subclass(s_LyingDown, s_MotionDownward)).

/*
(forall (?AGENT ?LIE)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?LIE LyingDown) (agent ?LIE ?AGENT))
   (and (holdsDuring (BeginFn (WhenFn ?LIE))
         (attribute ?AGENT Sitting))
        (holdsDuring (EndFn (WhenFn ?LIE))
         (attribute ?AGENT Prostrate))))))
*/
%% no translation to TPTP available.

/*
(instance Handstand BodyPosition)
*/
fof(a3540,axiom,s_instance(s_Handstand, s_BodyPosition)).

/*
(instance Kneeling BodyPosition)
*/
fof(a3541,axiom,s_instance(s_Kneeling, s_BodyPosition)).

/*
(instance Splitting BodyPosition)
*/
fof(a3542,axiom,s_instance(s_Splitting, s_BodyPosition)).

/*
(subAttribute Squatting Sitting)
*/
fof(a3543,axiom,s_subAttribute(s_Squatting, s_Sitting)).

/*
(subclass SittingDown BodyMotion)
*/
fof(a3544,axiom,s_subclass(s_SittingDown, s_BodyMotion)).

/*
(instance SittingDown SetOrClass)
*/
fof(a3545,axiom,s_instance(s_SittingDown, s_SetOrClass)).

/*
(subclass SittingDown MotionDownward)
*/
fof(a3546,axiom,s_subclass(s_SittingDown, s_MotionDownward)).

/*
(forall (?AGENT ?SIT)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?SIT SittingDown) (agent ?SIT ?AGENT))
   (and (holdsDuring (BeginFn (WhenFn ?SIT))
         (attribute ?AGENT Standing))
        (holdsDuring (EndFn (WhenFn ?SIT))
         (attribute ?AGENT Sitting))))))
*/
%% no translation to TPTP available.

/*
(subclass StandingUp BodyMotion)
*/
fof(a3547,axiom,s_subclass(s_StandingUp, s_BodyMotion)).

/*
(instance StandingUp SetOrClass)
*/
fof(a3548,axiom,s_instance(s_StandingUp, s_SetOrClass)).

/*
(subclass StandingUp MotionUpward)
*/
fof(a3549,axiom,s_subclass(s_StandingUp, s_MotionUpward)).

/*
(forall (?AGENT ?STAND)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?STAND StandingUp) (agent ?STAND ?AGENT))
   (and (holdsDuring (BeginFn (WhenFn ?STAND))
         (attribute ?AGENT Sitting))
        (holdsDuring (EndFn (WhenFn ?STAND))
         (attribute ?AGENT Standing))))))
*/
%% no translation to TPTP available.

/*
(subclass EyeMotion BodyMotion)
*/
fof(a3550,axiom,s_subclass(s_EyeMotion, s_BodyMotion)).

/*
(forall (?A ?EM)
 (exists (?E)
  (and (instance ?E Object)
       (=> (instance ?A Agent)
        (=> (and (instance ?EM EyeMotion) (agent ?EM ?A))
         (and (instance ?E Eyelid)
              (and (part ?E ?A) (patient ?EM ?E))))))))
*/
fof(a3551,axiom,! [A,EM] : (? [E] : ((s_instance(E, s_Object) & (s_instance(A, s_Agent) => ((s_instance(EM, s_EyeMotion) & s_agent(EM, A)) => (s_instance(E, s_Eyelid) & (s_part(E, A) & s_patient(EM, E))))))))).

/*
(subclass OpeningEyes EyeMotion)
*/
fof(a3552,axiom,s_subclass(s_OpeningEyes, s_EyeMotion)).

/*
(instance OpeningEyes SetOrClass)
*/
fof(a3553,axiom,s_instance(s_OpeningEyes, s_SetOrClass)).

/*
(subclass OpeningEyes Opening)
*/
fof(a3554,axiom,s_subclass(s_OpeningEyes, s_Opening)).

/*
(disjoint OpeningEyes ClosingEyes)
*/
fof(a3555,axiom,s_disjoint(s_OpeningEyes, s_ClosingEyes)).

/*
(instance EyeMotion SetOrClass)
*/
fof(a3556,axiom,s_instance(s_EyeMotion, s_SetOrClass)).

/*
(subclass ClosingEyes EyeMotion)
*/
fof(a3557,axiom,s_subclass(s_ClosingEyes, s_EyeMotion)).

/*
(subclass ClosingEyes Closing)
*/
fof(a3558,axiom,s_subclass(s_ClosingEyes, s_Closing)).

/*
(instance ClosingEyes SetOrClass)
*/
fof(a3559,axiom,s_instance(s_ClosingEyes, s_SetOrClass)).

/*
(subclass Winking ClosingEyes)
*/
fof(a3560,axiom,s_subclass(s_Winking, s_ClosingEyes)).

/*
(instance Winking SetOrClass)
*/
fof(a3561,axiom,s_instance(s_Winking, s_SetOrClass)).

/*
(subclass Winking Gesture)
*/
fof(a3562,axiom,s_subclass(s_Winking, s_Gesture)).

/*
(subclass Shrugging BodyMotion)
*/
fof(a3563,axiom,s_subclass(s_Shrugging, s_BodyMotion)).

/*
(instance Shrugging SetOrClass)
*/
fof(a3564,axiom,s_instance(s_Shrugging, s_SetOrClass)).

/*
(subclass Shrugging Gesture)
*/
fof(a3565,axiom,s_subclass(s_Shrugging, s_Gesture)).

/*
(forall (?SHOULDER ?SHRUG)
 (=> (instance ?SHOULDER Entity)
  (=> (and (instance ?SHRUG Shrugging) (patient ?SHRUG ?SHOULDER))
   (instance ?SHOULDER Shoulder))))
*/
fof(a3566,axiom,! [SHOULDER,SHRUG] : ((s_instance(SHOULDER, s_Entity) => ((s_instance(SHRUG, s_Shrugging) & s_patient(SHRUG, SHOULDER)) => s_instance(SHOULDER, s_Shoulder))))).

/*
(subclass Trembling BodyMotion)
*/
fof(a3567,axiom,s_subclass(s_Trembling, s_BodyMotion)).

/*
(subclass Trembling AutonomicProcess)
*/
fof(a3568,axiom,s_subclass(s_Trembling, s_AutonomicProcess)).

/*
(instance Trembling SetOrClass)
*/
fof(a3569,axiom,s_instance(s_Trembling, s_SetOrClass)).

/*
(instance Tremor SetOrClass)
*/
fof(a3570,axiom,s_instance(s_Tremor, s_SetOrClass)).

/*
(subclass Trembling Tremor)
*/
fof(a3571,axiom,s_subclass(s_Trembling, s_Tremor)).

/*
(disjoint Trembling IntentionalProcess)
*/
fof(a3572,axiom,s_disjoint(s_Trembling, s_IntentionalProcess)).

/*
(instance ReflexiveProcess SetOrClass)
*/
fof(a3573,axiom,s_instance(s_ReflexiveProcess, s_SetOrClass)).

/*
(subclass ReflexiveProcess AutonomicProcess)
*/
fof(a3574,axiom,s_subclass(s_ReflexiveProcess, s_AutonomicProcess)).

/*
(forall (?P)
 (exists (?M)
  (and (instance ?M Entity)
       (=> (instance ?P ReflexiveProcess)
        (and (instance ?M Muscle) (patient ?P ?M))))))
*/
fof(a3575,axiom,! [P] : (? [M] : ((s_instance(M, s_Entity) & (s_instance(P, s_ReflexiveProcess) => (s_instance(M, s_Muscle) & s_patient(P, M))))))).

/*
(instance Dismounting SetOrClass)
*/
fof(a3576,axiom,s_instance(s_Dismounting, s_SetOrClass)).

/*
(subclass Dismounting BodyMotion)
*/
fof(a3577,axiom,s_subclass(s_Dismounting, s_BodyMotion)).

/*
(forall (?O ?A ?D)
 (=> (and (instance ?O Object) (instance ?A Agent))
  (=>
   (and (instance ?D Dismounting) (and (agent ?D ?A) (patient ?D ?O)))
   (and (holdsDuring (BeginFn (WhenFn ?D)) (orientation ?A ?O On))
        (holdsDuring (EndFn (WhenFn ?D))
         (not (orientation ?A ?O On)))))))
*/
%% no translation to TPTP available.

/*
(subclass DomesticAnimal Animal)
*/
fof(a3578,axiom,s_subclass(s_DomesticAnimal, s_Animal)).

/*
(disjoint DomesticAnimal Human)
*/
fof(a3579,axiom,s_disjoint(s_DomesticAnimal, s_Human)).

/*
(forall (?ANIMAL)
 (exists (?KEEP ?PERSON)
  (and (and (instance ?PERSON Agent) (instance ?KEEP Process))
       (=> (instance ?ANIMAL DomesticAnimal)
        (and (instance ?KEEP Keeping)
             (and (agent ?KEEP ?PERSON)
                  (and (instance ?PERSON Human)
                       (patient ?KEEP ?ANIMAL))))))))
*/
fof(a3580,axiom,! [ANIMAL] : (? [KEEP,PERSON] : (((s_instance(PERSON, s_Agent) & s_instance(KEEP, s_Process)) & (s_instance(ANIMAL, s_DomesticAnimal) => (s_instance(KEEP, s_Keeping) & (s_agent(KEEP, PERSON) & (s_instance(PERSON, s_Human) & s_patient(KEEP, ANIMAL))))))))).

/*
(instance (FoodForFn DomesticAnimal) SetOrClass)
*/
fof(a3581,axiom,s_instance(s_FoodForFn(s_DomesticAnimal), s_SetOrClass)).

/*
(subclass Fodder (FoodForFn DomesticAnimal))
*/
fof(a3582,axiom,s_subclass(s_Fodder, s_FoodForFn(s_DomesticAnimal))).

/*
(subclass Fodder OrganicObject)
*/
fof(a3583,axiom,s_subclass(s_Fodder, s_OrganicObject)).

/*
(forall (?FEED)
 (=> (instance ?FEED Fodder)
  (hasPurpose ?FEED
   (exists (?ANIMAL ?EAT)
    (and (instance ?ANIMAL DomesticAnimal)
         (and (instance ?EAT Eating)
              (and (agent ?EAT ?ANIMAL) (patient ?EAT ?FEED))))))))
*/
%% no translation to TPTP available.

/*
(subclass Herbivore Mammal)
*/
fof(a3584,axiom,s_subclass(s_Herbivore, s_Mammal)).

/*
(disjoint Herbivore Carnivore)
*/
fof(a3585,axiom,s_disjoint(s_Herbivore, s_Carnivore)).

/*
(forall (?F ?A ?E)
 (=> (instance ?F Entity)
  (=>
   (and (instance ?A Herbivore)
        (and (agent ?E ?A) (and (instance ?E Eating) (patient ?E ?F))))
   (instance ?F Plant))))
*/
fof(a3586,axiom,! [F,A,E] : ((s_instance(F, s_Entity) => ((s_instance(A, s_Herbivore) & (s_agent(E, A) & (s_instance(E, s_Eating) & s_patient(E, F)))) => s_instance(F, s_Plant))))).

/*
(instance Antelope SetOrClass)
*/
fof(a3587,axiom,s_instance(s_Antelope, s_SetOrClass)).

/*
(subclass Antelope HoofedMammal)
*/
fof(a3588,axiom,s_subclass(s_Antelope, s_HoofedMammal)).

/*
(instance Buffalo SetOrClass)
*/
fof(a3589,axiom,s_instance(s_Buffalo, s_SetOrClass)).

/*
(subclass Buffalo HoofedMammal)
*/
fof(a3590,axiom,s_subclass(s_Buffalo, s_HoofedMammal)).

/*
(subclass DomesticCat DomesticAnimal)
*/
fof(a3591,axiom,s_subclass(s_DomesticCat, s_DomesticAnimal)).

/*
(instance DomesticCat SetOrClass)
*/
fof(a3592,axiom,s_instance(s_DomesticCat, s_SetOrClass)).

/*
(subclass DomesticCat Feline)
*/
fof(a3593,axiom,s_subclass(s_DomesticCat, s_Feline)).

/*
(subclass DomesticDog DomesticAnimal)
*/
fof(a3594,axiom,s_subclass(s_DomesticDog, s_DomesticAnimal)).

/*
(instance DomesticDog SetOrClass)
*/
fof(a3595,axiom,s_instance(s_DomesticDog, s_SetOrClass)).

/*
(subclass DomesticDog Canine)
*/
fof(a3596,axiom,s_subclass(s_DomesticDog, s_Canine)).

/*
(instance Fox SetOrClass)
*/
fof(a3597,axiom,s_instance(s_Fox, s_SetOrClass)).

/*
(subclass Fox Canine)
*/
fof(a3598,axiom,s_subclass(s_Fox, s_Canine)).

/*
(instance Elephant SetOrClass)
*/
fof(a3599,axiom,s_instance(s_Elephant, s_SetOrClass)).

/*
(instance Herbivore SetOrClass)
*/
fof(a3600,axiom,s_instance(s_Herbivore, s_SetOrClass)).

/*
(subclass Elephant Herbivore)
*/
fof(a3601,axiom,s_subclass(s_Elephant, s_Herbivore)).

/*
(instance Horse SetOrClass)
*/
fof(a3602,axiom,s_instance(s_Horse, s_SetOrClass)).

/*
(subclass Horse HoofedMammal)
*/
fof(a3603,axiom,s_subclass(s_Horse, s_HoofedMammal)).

/*
(instance Pig SetOrClass)
*/
fof(a3604,axiom,s_instance(s_Pig, s_SetOrClass)).

/*
(subclass Pig HoofedMammal)
*/
fof(a3605,axiom,s_subclass(s_Pig, s_HoofedMammal)).

/*
(instance Donkey SetOrClass)
*/
fof(a3606,axiom,s_instance(s_Donkey, s_SetOrClass)).

/*
(subclass Donkey HoofedMammal)
*/
fof(a3607,axiom,s_subclass(s_Donkey, s_HoofedMammal)).

/*
(instance Gastropod SetOrClass)
*/
fof(a3608,axiom,s_instance(s_Gastropod, s_SetOrClass)).

/*
(subclass Gastropod Mollusk)
*/
fof(a3609,axiom,s_subclass(s_Gastropod, s_Mollusk)).

/*
(subclass Mule HoofedMammal)
*/
fof(a3610,axiom,s_subclass(s_Mule, s_HoofedMammal)).

/*
(instance Mule SetOrClass)
*/
fof(a3611,axiom,s_instance(s_Mule, s_SetOrClass)).

/*
(subclass Mule DomesticAnimal)
*/
fof(a3612,axiom,s_subclass(s_Mule, s_DomesticAnimal)).

/*
(forall (?MULE)
 (exists (?DONKEY ?HORSE)
  (and (and (instance ?HORSE Organism) (instance ?DONKEY Organism))
       (=> (instance ?MULE Mule)
        (and (father ?MULE ?DONKEY)
             (and (instance ?DONKEY Donkey)
                  (and (mother ?MULE ?HORSE)
                       (instance ?HORSE Horse))))))))
*/
fof(a3613,axiom,! [MULE] : (? [DONKEY,HORSE] : (((s_instance(HORSE, s_Organism) & s_instance(DONKEY, s_Organism)) & (s_instance(MULE, s_Mule) => (s_father(MULE, DONKEY) & (s_instance(DONKEY, s_Donkey) & (s_mother(MULE, HORSE) & s_instance(HORSE, s_Horse))))))))).

/*
(forall (?MULE)
 (=> (instance ?MULE Mule)
  (not (capability SexualReproduction agent ?MULE))))
*/
fof(a3614,axiom,! [MULE] : ((s_instance(MULE, s_Mule) => (~ s_capability(s_SexualReproduction, s_agent_m, MULE))))).

/*
(subclass Sheep HoofedMammal)
*/
fof(a3615,axiom,s_subclass(s_Sheep, s_HoofedMammal)).

/*
(subclass Sheep DomesticAnimal)
*/
fof(a3616,axiom,s_subclass(s_Sheep, s_DomesticAnimal)).

/*
(instance Lamb SetOrClass)
*/
fof(a3617,axiom,s_instance(s_Lamb, s_SetOrClass)).

/*
(instance Sheep SetOrClass)
*/
fof(a3618,axiom,s_instance(s_Sheep, s_SetOrClass)).

/*
(subclass Lamb Sheep)
*/
fof(a3619,axiom,s_subclass(s_Lamb, s_Sheep)).

/*
(forall (?L)
 (<=> (instance ?L Lamb)
  (and (instance ?L Sheep) (attribute ?L NonFullyFormed))))
*/
fof(a3620,axiom,! [L] : ((s_instance(L, s_Lamb) <=> (s_instance(L, s_Sheep) & s_attribute(L, s_NonFullyFormed))))).

/*
(subclass Cow HoofedMammal)
*/
fof(a3621,axiom,s_subclass(s_Cow, s_HoofedMammal)).

/*
(instance DomesticAnimal SetOrClass)
*/
fof(a3622,axiom,s_instance(s_DomesticAnimal, s_SetOrClass)).

/*
(subclass Cow DomesticAnimal)
*/
fof(a3623,axiom,s_subclass(s_Cow, s_DomesticAnimal)).

/*
(instance Calf SetOrClass)
*/
fof(a3624,axiom,s_instance(s_Calf, s_SetOrClass)).

/*
(subclass Calf Cow)
*/
fof(a3625,axiom,s_subclass(s_Calf, s_Cow)).

/*
(forall (?C)
 (<=> (instance ?C Calf)
  (and (instance ?C Cow) (attribute ?C NonFullyFormed))))
*/
fof(a3626,axiom,! [C] : ((s_instance(C, s_Calf) <=> (s_instance(C, s_Cow) & s_attribute(C, s_NonFullyFormed))))).

/*
(instance Bull SetOrClass)
*/
fof(a3627,axiom,s_instance(s_Bull, s_SetOrClass)).

/*
(subclass Bull Cow)
*/
fof(a3628,axiom,s_subclass(s_Bull, s_Cow)).

/*
(forall (?B)
 (<=> (instance ?B Bull) (and (instance ?B Cow) (attribute ?B Male))))
*/
fof(a3629,axiom,! [B] : ((s_instance(B, s_Bull) <=> (s_instance(B, s_Cow) & s_attribute(B, s_Male))))).

/*
(instance FemaleCow SetOrClass)
*/
fof(a3630,axiom,s_instance(s_FemaleCow, s_SetOrClass)).

/*
(instance Cow SetOrClass)
*/
fof(a3631,axiom,s_instance(s_Cow, s_SetOrClass)).

/*
(subclass FemaleCow Cow)
*/
fof(a3632,axiom,s_subclass(s_FemaleCow, s_Cow)).

/*
(forall (?COW)
 (<=> (instance ?COW FemaleCow)
  (and (instance ?COW Cow) (attribute ?COW Female))))
*/
fof(a3633,axiom,! [COW] : ((s_instance(COW, s_FemaleCow) <=> (s_instance(COW, s_Cow) & s_attribute(COW, s_Female))))).

/*
(subclass Poultry Bird)
*/
fof(a3634,axiom,s_subclass(s_Poultry, s_Bird)).

/*
(subclass Chicken Poultry)
*/
fof(a3635,axiom,s_subclass(s_Chicken, s_Poultry)).

/*
(instance Hen SetOrClass)
*/
fof(a3636,axiom,s_instance(s_Hen, s_SetOrClass)).

/*
(subclass Hen Chicken)
*/
fof(a3637,axiom,s_subclass(s_Hen, s_Chicken)).

/*
(forall (?H)
 (<=> (instance ?H Hen)
  (and (instance ?H Chicken) (attribute ?H Female))))
*/
fof(a3638,axiom,! [H] : ((s_instance(H, s_Hen) <=> (s_instance(H, s_Chicken) & s_attribute(H, s_Female))))).

/*
(instance Rooster SetOrClass)
*/
fof(a3639,axiom,s_instance(s_Rooster, s_SetOrClass)).

/*
(instance Chicken SetOrClass)
*/
fof(a3640,axiom,s_instance(s_Chicken, s_SetOrClass)).

/*
(subclass Rooster Chicken)
*/
fof(a3641,axiom,s_subclass(s_Rooster, s_Chicken)).

/*
(forall (?R)
 (<=> (instance ?R Rooster)
  (and (instance ?R Chicken) (attribute ?R Male))))
*/
fof(a3642,axiom,! [R] : ((s_instance(R, s_Rooster) <=> (s_instance(R, s_Chicken) & s_attribute(R, s_Male))))).

/*
(instance Duck SetOrClass)
*/
fof(a3643,axiom,s_instance(s_Duck, s_SetOrClass)).

/*
(subclass Duck Poultry)
*/
fof(a3644,axiom,s_subclass(s_Duck, s_Poultry)).

/*
(instance Goose SetOrClass)
*/
fof(a3645,axiom,s_instance(s_Goose, s_SetOrClass)).

/*
(instance Poultry SetOrClass)
*/
fof(a3646,axiom,s_instance(s_Poultry, s_SetOrClass)).

/*
(subclass Goose Poultry)
*/
fof(a3647,axiom,s_subclass(s_Goose, s_Poultry)).

/*
(instance Owl SetOrClass)
*/
fof(a3648,axiom,s_instance(s_Owl, s_SetOrClass)).

/*
(subclass Owl Bird)
*/
fof(a3649,axiom,s_subclass(s_Owl, s_Bird)).

/*
(instance Pigeon SetOrClass)
*/
fof(a3650,axiom,s_instance(s_Pigeon, s_SetOrClass)).

/*
(subclass Pigeon Bird)
*/
fof(a3651,axiom,s_subclass(s_Pigeon, s_Bird)).

/*
(instance Vulture SetOrClass)
*/
fof(a3652,axiom,s_instance(s_Vulture, s_SetOrClass)).

/*
(subclass Vulture Bird)
*/
fof(a3653,axiom,s_subclass(s_Vulture, s_Bird)).

/*
(subclass Feather AnimalAnatomicalStructure)
*/
fof(a3654,axiom,s_subclass(s_Feather, s_AnimalAnatomicalStructure)).

/*
(instance Feather SetOrClass)
*/
fof(a3655,axiom,s_instance(s_Feather, s_SetOrClass)).

/*
(subclass Feather BodyPart)
*/
fof(a3656,axiom,s_subclass(s_Feather, s_BodyPart)).

/*
(forall (?F)
 (exists (?B)
  (and (instance ?B Object)
       (=> (instance ?F Feather)
        (and (instance ?B Bird) (part ?F ?B))))))
*/
fof(a3657,axiom,! [F] : (? [B] : ((s_instance(B, s_Object) & (s_instance(F, s_Feather) => (s_instance(B, s_Bird) & s_part(F, B))))))).

/*
(instance meatOfAnimal BinaryPredicate)
*/
fof(a3658,axiom,s_instance(s_meatOfAnimal_m, s_BinaryPredicate)).

/*
(domainSubclass meatOfAnimal 1 Meat)
*/
fof(a3659,axiom,s_domainSubclass(s_meatOfAnimal_m, 1, s_Meat)).

/*
(domainSubclass meatOfAnimal 2 Animal)
*/
fof(a3660,axiom,s_domainSubclass(s_meatOfAnimal_m, 2, s_Animal)).

/*
(forall (?M ?ANIMAL ?MEAT)
 (exists (?TIME ?A)
  (and (and (instance ?A Object) (instance ?TIME TimeInterval))
       (=>
        (and (instance ?ANIMAL SetOrClass) (subclass ?ANIMAL Animal)
             (subclass ?MEAT Meat) (instance ?MEAT SetOrClass))
        (=> (and (meatOfAnimal ?MEAT ?ANIMAL) (instance ?M ?MEAT))
         (and (instance ?A ?ANIMAL)
              (and (finishes ?TIME (WhenFn ?A))
                   (holdsDuring ?TIME (part ?M ?A)))))))))
*/
%% no translation to TPTP available.

/*
(instance Beef SetOrClass)
*/
fof(a3661,axiom,s_instance(s_Beef, s_SetOrClass)).

/*
(subclass Beef Meat)
*/
fof(a3662,axiom,s_subclass(s_Beef, s_Meat)).

/*
(meatOfAnimal Beef Cow)
*/
fof(a3663,axiom,s_meatOfAnimal(s_Beef, s_Cow)).

/*
(instance ChickenMeat SetOrClass)
*/
fof(a3664,axiom,s_instance(s_ChickenMeat, s_SetOrClass)).

/*
(subclass ChickenMeat Meat)
*/
fof(a3665,axiom,s_subclass(s_ChickenMeat, s_Meat)).

/*
(meatOfAnimal ChickenMeat Chicken)
*/
fof(a3666,axiom,s_meatOfAnimal(s_ChickenMeat, s_Chicken)).

/*
(instance Pork SetOrClass)
*/
fof(a3667,axiom,s_instance(s_Pork, s_SetOrClass)).

/*
(subclass Pork Meat)
*/
fof(a3668,axiom,s_subclass(s_Pork, s_Meat)).

/*
(meatOfAnimal Pork Pig)
*/
fof(a3669,axiom,s_meatOfAnimal(s_Pork, s_Pig)).

/*
(instance Mouse SetOrClass)
*/
fof(a3670,axiom,s_instance(s_Mouse, s_SetOrClass)).

/*
(subclass Mouse Rodent)
*/
fof(a3671,axiom,s_subclass(s_Mouse, s_Rodent)).

/*
(instance Rat SetOrClass)
*/
fof(a3672,axiom,s_instance(s_Rat, s_SetOrClass)).

/*
(subclass Rat Rodent)
*/
fof(a3673,axiom,s_subclass(s_Rat, s_Rodent)).

/*
(instance Rabbit SetOrClass)
*/
fof(a3674,axiom,s_instance(s_Rabbit, s_SetOrClass)).

/*
(subclass Rabbit Rodent)
*/
fof(a3675,axiom,s_subclass(s_Rabbit, s_Rodent)).

/*
(instance Squirrel SetOrClass)
*/
fof(a3676,axiom,s_instance(s_Squirrel, s_SetOrClass)).

/*
(subclass Squirrel Rodent)
*/
fof(a3677,axiom,s_subclass(s_Squirrel, s_Rodent)).

/*
(instance Hay SetOrClass)
*/
fof(a3678,axiom,s_instance(s_Hay, s_SetOrClass)).

/*
(instance Fodder SetOrClass)
*/
fof(a3679,axiom,s_instance(s_Fodder, s_SetOrClass)).

/*
(subclass Hay Fodder)
*/
fof(a3680,axiom,s_subclass(s_Hay, s_Fodder)).

/*
(forall (?HAY)
 (exists (?MAKE ?GRASS)
  (and (and (instance ?GRASS Object) (instance ?MAKE Process))
       (=> (instance ?HAY Hay)
        (and (instance ?MAKE Making)
             (and (resource ?MAKE ?GRASS)
                  (and (instance ?GRASS Grass)
                       (result ?MAKE ?HAY))))))))
*/
fof(a3681,axiom,! [HAY] : (? [MAKE,GRASS] : (((s_instance(GRASS, s_Object) & s_instance(MAKE, s_Process)) & (s_instance(HAY, s_Hay) => (s_instance(MAKE, s_Making) & (s_resource(MAKE, GRASS) & (s_instance(GRASS, s_Grass) & s_result(MAKE, HAY))))))))).

/*
(instance Copying SetOrClass)
*/
fof(a3682,axiom,s_instance(s_Copying, s_SetOrClass)).

/*
(subclass Copying Making)
*/
fof(a3683,axiom,s_subclass(s_Copying, s_Making)).

/*
(forall (?THING2 ?THING1 ?COPY)
 (=> (and (instance ?THING2 Object) (instance ?THING1 Object))
  (=>
   (and (instance ?COPY Copying)
        (and (resource ?COPY ?THING1) (result ?COPY ?THING2)))
   (copy ?THING1 ?THING2))))
*/
fof(a3684,axiom,! [THING2,THING1,COPY] : (((s_instance(THING2, s_Object) & s_instance(THING1, s_Object)) => ((s_instance(COPY, s_Copying) & (s_resource(COPY, THING1) & s_result(COPY, THING2))) => s_copy(THING1, THING2))))).

/*
(instance Vacationing SetOrClass)
*/
fof(a3685,axiom,s_instance(s_Vacationing, s_SetOrClass)).

/*
(subclass Vacationing RecreationOrExercise)
*/
fof(a3686,axiom,s_subclass(s_Vacationing, s_RecreationOrExercise)).

/*
(forall (?WORK ?PERSON ?VACATION)
 (=>
  (and (instance ?VACATION Vacationing)
       (and (instance ?WORK Working)
            (and (agent ?VACATION ?PERSON)
                 (and (agent ?WORK ?PERSON)
                      (instance ?PERSON Human)))))
  (not (overlapsTemporally (WhenFn ?VACATION) (WhenFn ?WORK)))))
*/
fof(a3687,axiom,! [WORK,PERSON,VACATION] : (((s_instance(VACATION, s_Vacationing) & (s_instance(WORK, s_Working) & (s_agent(VACATION, PERSON) & (s_agent(WORK, PERSON) & s_instance(PERSON, s_Human))))) => (~ s_overlapsTemporally(s_WhenFn(VACATION), s_WhenFn(WORK)))))).

/*
(instance OccupationFn UnaryFunction)
*/
fof(a3688,axiom,s_instance(s_OccupationFn_m, s_UnaryFunction)).

/*
(rangeSubclass OccupationFn FinancialTransaction)
*/
fof(a3689,axiom,s_rangeSubclass(s_OccupationFn_m, s_FinancialTransaction)).

/*
(instance occupation BinaryPredicate)
*/
fof(a3690,axiom,s_instance(s_occupation_m, s_BinaryPredicate)).

/*
(subclass Working FinancialTransaction)
*/
fof(a3691,axiom,s_subclass(s_Working, s_FinancialTransaction)).

/*
(instance Farming SetOrClass)
*/
fof(a3692,axiom,s_instance(s_Farming, s_SetOrClass)).

/*
(subclass Farming Working)
*/
fof(a3693,axiom,s_subclass(s_Farming, s_Working)).

/*
(forall (?FARMER ?FARMING)
 (exists (?FARM)
  (and (instance ?FARM Object)
       (=> (instance ?FARMER Agent)
        (=> (and (instance ?FARMING Farming) (agent ?FARMING ?FARMER))
         (and (instance ?FARM Farm)
              (holdsDuring (WhenFn ?FARMING)
               (located ?FARMER ?FARM))))))))
*/
%% no translation to TPTP available.

/*
(instance Serving SetOrClass)
*/
fof(a3694,axiom,s_instance(s_Serving, s_SetOrClass)).

/*
(subclass Serving Working)
*/
fof(a3695,axiom,s_subclass(s_Serving, s_Working)).

/*
(instance Sales SetOrClass)
*/
fof(a3696,axiom,s_instance(s_Sales, s_SetOrClass)).

/*
(instance Working SetOrClass)
*/
fof(a3697,axiom,s_instance(s_Working, s_SetOrClass)).

/*
(subclass Sales Working)
*/
fof(a3698,axiom,s_subclass(s_Sales, s_Working)).

/*
(subAttribute Retired Unemployed)
*/
fof(a3699,axiom,s_subAttribute(s_Retired, s_Unemployed)).

/*
(subAttribute Housewife Unemployed)
*/
fof(a3700,axiom,s_subAttribute(s_Housewife, s_Unemployed)).

/*
(forall (?W)
 (exists (?H)
  (and (instance ?H Man)
       (=> (instance ?W Woman)
        (=> (attribute ?W Housewife) (wife ?W ?H))))))
*/
fof(a3701,axiom,! [W] : (? [H] : ((s_instance(H, s_Man) & (s_instance(W, s_Woman) => (s_attribute(W, s_Housewife) => s_wife(W, H))))))).

/*
(instance Waiter ServicePosition)
*/
fof(a3702,axiom,s_instance(s_Waiter, s_ServicePosition)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Waiter) (instance ?X Human))))
*/
fof(a3703,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Waiter) => s_instance(X, s_Human))))).

/*
(forall (?CUST ?REST ?DINING ?X ?KITCHEN ?FOOD ?TABLE ?C)
 (=>
  (and (instance ?CUST CognitiveAgent) (instance ?DINING Object)
       (instance ?KITCHEN Object) (instance ?FOOD Entity)
       (instance ?C Process))
  (=>
   (and (attribute ?X Waiter)
        (and (instance ?X Human)
             (and (employs ?REST ?X)
                  (and (instance ?REST Restaurant)
                       (and (customer ?CUST ?REST)
                            (and (located ?CUST ?TABLE)
                                 (instance ?TABLE Table)))))))
   (and (possesses ?REST ?KITCHEN)
        (and (instance ?KITCHEN KitchenArea)
             (and (instance ?DINING DiningArea)
                  (and (located ?TABLE ?DINING)
                       (hasPurpose ?X
                        (and (instance ?C Carrying)
                             (and (agent ?C ?X)
                                  (and
                                   (origin ?C ?KITCHEN)
                                   (and
                                    (destination ?C ?TABLE)
                                    (and
                                     (patient ?C ?FOOD)
                                     (instance
                                      ?FOOD
                                      (FoodForFn Human)))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance ServicePosition SetOrClass)
*/
fof(a3704,axiom,s_instance(s_ServicePosition, s_SetOrClass)).

/*
(instance Maid ServicePosition)
*/
fof(a3705,axiom,s_instance(s_Maid, s_ServicePosition)).

/*
(forall (?MAID ?T1)
 (exists (?SERVE)
  (and (and (instance ?SERVE TimeInterval) (instance ?SERVE Process))
       (=> (and (instance ?T1 TimeInterval) (instance ?MAID Agent))
        (=> (holdsDuring ?T1 (attribute ?MAID Maid))
         (and (during ?SERVE ?T1)
              (and (instance ?SERVE Serving) (agent ?SERVE ?MAID))))))))
*/
%% no translation to TPTP available.

/*
(instance Janitor SetOrClass)
*/
fof(a3706,axiom,s_instance(s_Janitor, s_SetOrClass)).

/*
(instance UnskilledOccupation SetOrClass)
*/
fof(a3707,axiom,s_instance(s_UnskilledOccupation, s_SetOrClass)).

/*
(subclass Janitor UnskilledOccupation)
*/
fof(a3708,axiom,s_subclass(s_Janitor, s_UnskilledOccupation)).

/*
(forall (?J ?P)
 (=> (instance ?P Human)
  (=> (and (instance ?J Janitor) (attribute ?P ?J))
   (occupation ?P (OccupationFn Washing)))))
*/
fof(a3709,axiom,! [J,P] : ((s_instance(P, s_Human) => ((s_instance(J, s_Janitor) & s_attribute(P, J)) => s_occupation(P, s_OccupationFn(s_Washing)))))).

/*
(instance TheaterProfession SetOrClass)
*/
fof(a3710,axiom,s_instance(s_TheaterProfession, s_SetOrClass)).

/*
(subclass TheaterProfession EntertainmentProfession)
*/
fof(a3711,axiom,s_subclass(s_TheaterProfession, s_EntertainmentProfession)).

/*
(instance FilmDirector FilmMakingProfession)
*/
fof(a3712,axiom,s_instance(s_FilmDirector, s_FilmMakingProfession)).

/*
(instance FilmMaking SetOrClass)
*/
fof(a3713,axiom,s_instance(s_FilmMaking, s_SetOrClass)).

/*
(subclass FilmMaking ContentDevelopment)
*/
fof(a3714,axiom,s_subclass(s_FilmMaking, s_ContentDevelopment)).

/*
(forall (?FM)
 (exists (?M ?F)
  (and (and (instance ?F Object) (instance ?M Entity))
       (=> (instance ?FM FilmMaking)
        (and (instance ?M MotionPicture)
             (and (result ?FM ?M)
                  (and (instance ?F PhotographicFilm)
                       (resource ?FM ?F))))))))
*/
fof(a3715,axiom,! [FM] : (? [M,F] : (((s_instance(F, s_Object) & s_instance(M, s_Entity)) & (s_instance(FM, s_FilmMaking) => (s_instance(M, s_MotionPicture) & (s_result(FM, M) & (s_instance(F, s_PhotographicFilm) & s_resource(FM, F))))))))).

/*
(instance EntertainmentProfession SetOrClass)
*/
fof(a3716,axiom,s_instance(s_EntertainmentProfession, s_SetOrClass)).

/*
(subclass FilmMakingProfession EntertainmentProfession)
*/
fof(a3717,axiom,s_subclass(s_FilmMakingProfession, s_EntertainmentProfession)).

/*
(forall (?P ?H)
 (=> (instance ?H Human)
  (=> (and (instance ?P FilmMakingProfession) (attribute ?H ?P))
   (occupation ?H (OccupationFn FilmMaking)))))
*/
fof(a3718,axiom,! [P,H] : ((s_instance(H, s_Human) => ((s_instance(P, s_FilmMakingProfession) & s_attribute(H, P)) => s_occupation(H, s_OccupationFn(s_FilmMaking)))))).

/*
(instance FilmMakingProfession SetOrClass)
*/
fof(a3719,axiom,s_instance(s_FilmMakingProfession, s_SetOrClass)).

/*
(instance FilmProducer FilmMakingProfession)
*/
fof(a3720,axiom,s_instance(s_FilmProducer, s_FilmMakingProfession)).

/*
(instance directed BinaryPredicate)
*/
fof(a3721,axiom,s_instance(s_directed_m, s_BinaryPredicate)).

/*
(forall (?MOVIE ?DIRECTOR)
 (exists (?FILMMAKING ?FILMCREW)
  (and (and (instance ?FILMCREW Agent) (instance ?FILMMAKING Process))
       (=>
        (and (instance ?DIRECTOR Human)
             (instance ?MOVIE MotionPicture))
        (=> (directed ?DIRECTOR ?MOVIE)
         (and (instance ?FILMMAKING FilmMaking)
              (and (instance ?FILMCREW Organization)
                   (and (leader ?FILMCREW ?DIRECTOR)
                        (and (agent ?FILMMAKING ?FILMCREW)
                             (result ?FILMMAKING ?MOVIE))))))))))
*/
fof(a3722,axiom,! [MOVIE,DIRECTOR] : (? [FILMMAKING,FILMCREW] : (((s_instance(FILMCREW, s_Agent) & s_instance(FILMMAKING, s_Process)) & ((s_instance(DIRECTOR, s_Human) & s_instance(MOVIE, s_MotionPicture)) => (s_directed(DIRECTOR, MOVIE) => (s_instance(FILMMAKING, s_FilmMaking) & (s_instance(FILMCREW, s_Organization) & (s_leader(FILMCREW, DIRECTOR) & (s_agent(FILMMAKING, FILMCREW) & s_result(FILMMAKING, MOVIE))))))))))).

/*
(instance Coach SkilledOccupation)
*/
fof(a3723,axiom,s_instance(s_Coach, s_SkilledOccupation)).

/*
(instance GameReferee SkilledOccupation)
*/
fof(a3724,axiom,s_instance(s_GameReferee, s_SkilledOccupation)).

/*
(instance Carpenter OccupationalTrade)
*/
fof(a3725,axiom,s_instance(s_Carpenter, s_OccupationalTrade)).

/*
(forall (?P)
 (=> (instance ?P Agent)
  (=> (attribute ?P Carpenter) (hasSkill Carpentry ?P))))
*/
fof(a3726,axiom,! [P] : ((s_instance(P, s_Agent) => (s_attribute(P, s_Carpenter) => s_hasSkill(s_Carpentry, P))))).

/*
(instance Carpentry SetOrClass)
*/
fof(a3727,axiom,s_instance(s_Carpentry, s_SetOrClass)).

/*
(subclass Carpentry Making)
*/
fof(a3728,axiom,s_subclass(s_Carpentry, s_Making)).

/*
(forall (?C ?W)
 (exists (?B)
  (and (instance ?B Object)
       (=> (instance ?W Object)
        (=> (instance ?C Carpentry)
         (and (instance ?B Building)
              (and (instance ?W Wood)
                   (and (part ?W ?B) (result ?C ?B)))))))))
*/
fof(a3729,axiom,! [C,W] : (? [B] : ((s_instance(B, s_Object) & (s_instance(W, s_Object) => (s_instance(C, s_Carpentry) => (s_instance(B, s_Building) & (s_instance(W, s_Wood) & (s_part(W, B) & s_result(C, B)))))))))).

/*
(instance constructionPeriod BinaryPredicate)
*/
fof(a3730,axiom,s_instance(s_constructionPeriod_m, s_BinaryPredicate)).

/*
(forall (?INTERVAL ?OBJECT)
 (=>
  (and (instance ?OBJECT StationaryArtifact)
       (instance ?INTERVAL TimeInterval))
  (=> (constructionPeriod ?OBJECT ?INTERVAL)
   (holdsDuring ?INTERVAL
    (exists (?CONSTRUCTING)
     (and (instance ?CONSTRUCTING Constructing)
          (result ?CONSTRUCTING ?OBJECT)))))))
*/
%% no translation to TPTP available.

/*
(instance contractor BinaryPredicate)
*/
fof(a3731,axiom,s_instance(s_contractor_m, s_BinaryPredicate)).

/*
(instance Agriculture SetOrClass)
*/
fof(a3732,axiom,s_instance(s_Agriculture, s_SetOrClass)).

/*
(subclass Agriculture Maintaining)
*/
fof(a3733,axiom,s_subclass(s_Agriculture, s_Maintaining)).

/*
(forall (?AGRO)
 (exists (?GROWTH)
  (and (instance ?GROWTH Process)
       (=> (instance ?AGRO Agriculture)
        (and (instance ?GROWTH Growth) (subProcess ?GROWTH ?AGRO))))))
*/
fof(a3734,axiom,! [AGRO] : (? [GROWTH] : ((s_instance(GROWTH, s_Process) & (s_instance(AGRO, s_Agriculture) => (s_instance(GROWTH, s_Growth) & s_subProcess(GROWTH, AGRO))))))).

/*
(instance FarmHand OccupationalTrade)
*/
fof(a3735,axiom,s_instance(s_FarmHand, s_OccupationalTrade)).

/*
(forall (?P)
 (exists (?F)
  (and (instance ?F Process)
       (=> (instance ?P Agent)
        (=> (attribute ?P FarmHand)
         (and (instance ?F Agriculture) (agent ?F ?P)))))))
*/
fof(a3736,axiom,! [P] : (? [F] : ((s_instance(F, s_Process) & (s_instance(P, s_Agent) => (s_attribute(P, s_FarmHand) => (s_instance(F, s_Agriculture) & s_agent(F, P)))))))).

/*
(instance Plumber OccupationalTrade)
*/
fof(a3737,axiom,s_instance(s_Plumber, s_OccupationalTrade)).

/*
(instance OccupationalTrade SetOrClass)
*/
fof(a3738,axiom,s_instance(s_OccupationalTrade, s_SetOrClass)).

/*
(instance Potter OccupationalTrade)
*/
fof(a3739,axiom,s_instance(s_Potter, s_OccupationalTrade)).

/*
(forall (?H)
 (exists (?M ?P)
  (and (and (instance ?P Entity) (instance ?M Process))
       (=> (instance ?H Agent)
        (=> (attribute ?H Potter)
         (and (instance ?P Pottery)
              (and (instance ?M Making)
                   (and (agent ?M ?H) (result ?M ?P)))))))))
*/
fof(a3740,axiom,! [H] : (? [M,P] : (((s_instance(P, s_Entity) & s_instance(M, s_Process)) & (s_instance(H, s_Agent) => (s_attribute(H, s_Potter) => (s_instance(P, s_Pottery) & (s_instance(M, s_Making) & (s_agent(M, H) & s_result(M, P)))))))))).

/*
(subclass ReligiousPosition Position)
*/
fof(a3741,axiom,s_subclass(s_ReligiousPosition, s_Position)).

/*
(forall (?H ?O ?P)
 (=> (and (instance ?H Human) (instance ?O Organization))
  (=> (and (occupiesPosition ?H ?P ?O) (instance ?P ReligiousPosition))
   (instance ?O ReligiousOrganization))))
*/
fof(a3742,axiom,! [H,O,P] : (((s_instance(H, s_Human) & s_instance(O, s_Organization)) => ((s_occupiesPosition(H, P, O) & s_instance(P, s_ReligiousPosition)) => s_instance(O, s_ReligiousOrganization))))).

/*
(instance Cleric Profession)
*/
fof(a3743,axiom,s_instance(s_Cleric, s_Profession)).

/*
(instance Cleric ReligiousPosition)
*/
fof(a3744,axiom,s_instance(s_Cleric, s_ReligiousPosition)).

/*
(instance ReligiousPosition SetOrClass)
*/
fof(a3745,axiom,s_instance(s_ReligiousPosition, s_SetOrClass)).

/*
(instance Deacon ReligiousPosition)
*/
fof(a3746,axiom,s_instance(s_Deacon, s_ReligiousPosition)).

/*
(subAttribute Deacon PartTimePosition)
*/
fof(a3747,axiom,s_subAttribute(s_Deacon, s_PartTimePosition)).

/*
(forall (?TIME ?ORG ?PERSON)
 (exists (?C)
  (and (instance ?C Human)
       (=>
        (and (instance ?PERSON Human) (instance ?ORG Organization)
             (instance ?TIME TimePosition))
        (=>
         (holdsDuring ?TIME
          (and (occupiesPosition ?PERSON Deacon ?ORG)
               (instance ?ORG ReligiousOrganization)))
         (holdsDuring ?TIME
          (and (occupiesPosition ?C Cleric ?ORG)
               (subordinateInOrganization ?ORG ?PERSON ?C))))))))
*/
%% no translation to TPTP available.

/*
(instance PoliceOfficer SkilledOccupation)
*/
fof(a3748,axiom,s_instance(s_PoliceOfficer, s_SkilledOccupation)).

/*
(instance PoliceOfficer GovernmentPosition)
*/
fof(a3749,axiom,s_instance(s_PoliceOfficer, s_GovernmentPosition)).

/*
(forall (?P)
 (=> (instance ?P Agent)
  (=> (attribute ?P PoliceOfficer) (hasSkill PlacingUnderArrest ?P))))
*/
fof(a3750,axiom,! [P] : ((s_instance(P, s_Agent) => (s_attribute(P, s_PoliceOfficer) => s_hasSkill(s_PlacingUnderArrest, P))))).

/*
(subAttribute PoliceCaptain PoliceOfficer)
*/
fof(a3751,axiom,s_subAttribute(s_PoliceCaptain, s_PoliceOfficer)).

/*
(subAttribute PoliceSergeant PoliceOfficer)
*/
fof(a3752,axiom,s_subAttribute(s_PoliceSergeant, s_PoliceOfficer)).

/*
(subAttribute Sheriff PoliceOfficer)
*/
fof(a3753,axiom,s_subAttribute(s_Sheriff, s_PoliceOfficer)).

/*
(subAttribute Marshal PoliceOfficer)
*/
fof(a3754,axiom,s_subAttribute(s_Marshal, s_PoliceOfficer)).

/*
(subAttribute Deputy PoliceOfficer)
*/
fof(a3755,axiom,s_subAttribute(s_Deputy, s_PoliceOfficer)).

/*
(instance Coroner GovernmentPosition)
*/
fof(a3756,axiom,s_instance(s_Coroner, s_GovernmentPosition)).

/*
(subAttribute PoliceDetective PoliceOfficer)
*/
fof(a3757,axiom,s_subAttribute(s_PoliceDetective, s_PoliceOfficer)).

/*
(instance SkilledOccupation SetOrClass)
*/
fof(a3758,axiom,s_instance(s_SkilledOccupation, s_SetOrClass)).

/*
(instance PrivateDetective SkilledOccupation)
*/
fof(a3759,axiom,s_instance(s_PrivateDetective, s_SkilledOccupation)).

/*
(contraryAttribute2 PrivateDetective PoliceDetective)
*/
fof(a3760,axiom,s_contraryAttribute2(s_PrivateDetective, s_PoliceDetective)).

/*
(instance Lawyer Profession)
*/
fof(a3761,axiom,s_instance(s_Lawyer, s_Profession)).

/*
(instance Attorney Profession)
*/
fof(a3762,axiom,s_instance(s_Attorney, s_Profession)).

/*
(subAttribute Attorney Lawyer)
*/
fof(a3763,axiom,s_subAttribute(s_Attorney, s_Lawyer)).

/*
(forall (?P)
 (=> (instance ?P Human)
  (=> (attribute ?P Lawyer) (hasExpertise ?P FieldOfLaw))))
*/
fof(a3764,axiom,! [P] : ((s_instance(P, s_Human) => (s_attribute(P, s_Lawyer) => s_hasExpertise(P, s_FieldOfLaw))))).

/*
(subAttribute AttorneyGeneral Attorney)
*/
fof(a3765,axiom,s_subAttribute(s_AttorneyGeneral, s_Attorney)).

/*
(instance AttorneyGeneral GovernmentPosition)
*/
fof(a3766,axiom,s_instance(s_AttorneyGeneral, s_GovernmentPosition)).

/*
(subAttribute PublicDefender Attorney)
*/
fof(a3767,axiom,s_subAttribute(s_PublicDefender, s_Attorney)).

/*
(instance PublicDefender GovernmentPosition)
*/
fof(a3768,axiom,s_instance(s_PublicDefender, s_GovernmentPosition)).

/*
(subAttribute PublicProsecutor Attorney)
*/
fof(a3769,axiom,s_subAttribute(s_PublicProsecutor, s_Attorney)).

/*
(instance PublicProsecutor GovernmentPosition)
*/
fof(a3770,axiom,s_instance(s_PublicProsecutor, s_GovernmentPosition)).

/*
(subAttribute Judge Attorney)
*/
fof(a3771,axiom,s_subAttribute(s_Judge, s_Attorney)).

/*
(instance GovernmentPosition SetOrClass)
*/
fof(a3772,axiom,s_instance(s_GovernmentPosition, s_SetOrClass)).

/*
(instance Judge GovernmentPosition)
*/
fof(a3773,axiom,s_instance(s_Judge, s_GovernmentPosition)).

/*
(forall (?O ?P)
 (=> (and (instance ?P Human) (instance ?O Organization))
  (=> (occupiesPosition ?P Judge ?O)
   (modalAttribute
    (exists (?D) (and (instance ?D LegalDecision) (agent ?D ?P)))
    Permission))))
*/
%% no translation to TPTP available.

/*
(forall (?O ?P)
 (=> (and (instance ?P Human) (instance ?O Organization))
  (=> (occupiesPosition ?P Judge ?O)
   (instance ?O JudicialOrganization))))
*/
fof(a3774,axiom,! [O,P] : (((s_instance(P, s_Human) & s_instance(O, s_Organization)) => (s_occupiesPosition(P, s_Judge, O) => s_instance(O, s_JudicialOrganization))))).

/*
(subAttribute Professor Teacher)
*/
fof(a3775,axiom,s_subAttribute(s_Professor, s_Teacher)).

/*
(forall (?PERSON ?ORG ?PROF)
 (=>
  (and (instance ?PERSON Human)
       (instance ?ORG EducationalOrganization))
  (=>
   (and (instance ?PROF Professor)
        (occupiesPosition ?PERSON ?PROF ?ORG))
   (and (teacher ?PROF ?ORG) (instance ?ORG PostSecondarySchool)))))
*/
fof(a3776,axiom,! [PERSON,ORG,PROF] : (((s_instance(PERSON, s_Human) & s_instance(ORG, s_EducationalOrganization)) => ((s_instance(PROF, s_Professor) & s_occupiesPosition(PERSON, PROF, ORG)) => (s_teacher(PROF, ORG) & s_instance(ORG, s_PostSecondarySchool)))))).

/*
(instance MedicalDoctor Profession)
*/
fof(a3777,axiom,s_instance(s_MedicalDoctor, s_Profession)).

/*
(forall (?DOCTOR)
 (exists (?PROCESS1 ?PROCESS2)
  (and (and (subclass ?PROCESS2 Process)
            (instance ?PROCESS2 SetOrClass)
            (instance ?PROCESS1 SetOrClass)
            (subclass ?PROCESS1 Process))
       (=> (instance ?DOCTOR Object)
        (=> (attribute ?DOCTOR MedicalDoctor)
         (and (subclass ?PROCESS1 DiagnosticProcess)
              (and (subclass ?PROCESS2 TherapeuticProcess)
                   (and (capability ?PROCESS1 agent ?DOCTOR)
                        (capability ?PROCESS2 agent ?DOCTOR)))))))))
*/
fof(a3778,axiom,! [DOCTOR] : (? [PROCESS1,PROCESS2] : (((s_subclass(PROCESS2, s_Process) & s_instance(PROCESS2, s_SetOrClass) & s_instance(PROCESS1, s_SetOrClass) & s_subclass(PROCESS1, s_Process)) & (s_instance(DOCTOR, s_Object) => (s_attribute(DOCTOR, s_MedicalDoctor) => (s_subclass(PROCESS1, s_DiagnosticProcess) & (s_subclass(PROCESS2, s_TherapeuticProcess) & (s_capability(PROCESS1, s_agent_m, DOCTOR) & s_capability(PROCESS2, s_agent_m, DOCTOR)))))))))).

/*
(subAttribute Surgeon MedicalDoctor)
*/
fof(a3779,axiom,s_subAttribute(s_Surgeon, s_MedicalDoctor)).

/*
(subclass Circumision Removing)
*/
fof(a3780,axiom,s_subclass(s_Circumision, s_Removing)).

/*
(instance Circumision SetOrClass)
*/
fof(a3781,axiom,s_instance(s_Circumision, s_SetOrClass)).

/*
(subclass Circumision Surgery)
*/
fof(a3782,axiom,s_subclass(s_Circumision, s_Surgery)).

/*
(instance NewsReporter Profession)
*/
fof(a3783,axiom,s_instance(s_NewsReporter, s_Profession)).

/*
(forall (?H)
 (exists (?T ?EV)
  (and (and (instance ?EV Physical) (subclass ?T ContentBearingObject)
            (instance ?T Entity))
       (=> (instance ?H Agent)
        (=> (attribute ?H NewsReporter)
         (and (instance ?EV Process)
              (and (overlapsTemporally (WhenFn ?EV) (WhenFn ?H))
                   (and (authors ?H ?T) (refers ?T ?EV)))))))))
*/
fof(a3784,axiom,! [H] : (? [T,EV] : (((s_instance(EV, s_Physical) & s_subclass(T, s_ContentBearingObject) & s_instance(T, s_Entity)) & (s_instance(H, s_Agent) => (s_attribute(H, s_NewsReporter) => (s_instance(EV, s_Process) & (s_overlapsTemporally(s_WhenFn(EV), s_WhenFn(H)) & (s_authors(H, T) & s_refers(T, EV)))))))))).

/*
(subAttribute ArtCritic Journalist)
*/
fof(a3785,axiom,s_subAttribute(s_ArtCritic, s_Journalist)).

/*
(forall (?H)
 (exists (?T ?AW)
  (and (and (instance ?AW Entity) (subclass ?T ContentBearingObject)
            (instance ?T Entity))
       (=> (instance ?H Agent)
        (=> (attribute ?H ArtCritic)
         (and (instance ?AW ArtWork)
              (and (authors ?H ?T) (refers ?T ?AW))))))))
*/
fof(a3786,axiom,! [H] : (? [T,AW] : (((s_instance(AW, s_Entity) & s_subclass(T, s_ContentBearingObject) & s_instance(T, s_Entity)) & (s_instance(H, s_Agent) => (s_attribute(H, s_ArtCritic) => (s_instance(AW, s_ArtWork) & (s_authors(H, T) & s_refers(T, AW))))))))).

/*
(instance Profession SetOrClass)
*/
fof(a3787,axiom,s_instance(s_Profession, s_SetOrClass)).

/*
(instance Accountant Profession)
*/
fof(a3788,axiom,s_instance(s_Accountant, s_Profession)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Accountant) (capability Calculating agent ?X))))
*/
fof(a3789,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Accountant) => s_capability(s_Calculating, s_agent_m, X))))).

/*
(instance Literature FieldOfStudy)
*/
fof(a3790,axiom,s_instance(s_Literature, s_FieldOfStudy)).

/*
(instance Mathematics FieldOfStudy)
*/
fof(a3791,axiom,s_instance(s_Mathematics, s_FieldOfStudy)).

/*
(instance InteriorDesign FieldOfStudy)
*/
fof(a3792,axiom,s_instance(s_InteriorDesign, s_FieldOfStudy)).

/*
(subclass Science FieldOfStudy)
*/
fof(a3793,axiom,s_subclass(s_Science, s_FieldOfStudy)).

/*
(subclass SocialScience Science)
*/
fof(a3794,axiom,s_subclass(s_SocialScience, s_Science)).

/*
(instance PoliticalScience SocialScience)
*/
fof(a3795,axiom,s_instance(s_PoliticalScience, s_SocialScience)).

/*
(instance Anthropology SocialScience)
*/
fof(a3796,axiom,s_instance(s_Anthropology, s_SocialScience)).

/*
(instance ActuaryScience Science)
*/
fof(a3797,axiom,s_instance(s_ActuaryScience, s_Science)).

/*
(instance Archeology FieldOfStudy)
*/
fof(a3798,axiom,s_instance(s_Archeology, s_FieldOfStudy)).

/*
(forall (?X ?R ?L ?W)
 (exists (?D ?S ?O ?T)
  (and (and (instance ?T TimeDuration) (instance ?O Object)
            (instance ?S SelfConnectedObject) (instance ?D Process))
       (=>
        (and (instance ?L SelfConnectedObject)
             (instance ?W SelfConnectedObject))
        (=>
         (and (instance ?X Argument)
              (and (instance ?R Reasoning)
                   (and (subProposition ?X Archeology)
                        (realization ?R ?X))))
         (and (instance ?D Discovering)
              (and (instance ?O Object)
                   (and (patient ?D ?O)
                        (and (refers ?R ?D)
                             (and (earlier (WhenFn ?D) (WhenFn ?R))
                                  (and
                                   (age ?O ?T)
                                   (and
                                    (greaterThan
                                     ?T
                                     (MeasureFn 50 YearDuration))
                                    (holdsDuring
                                     (ImmediatePastFn (WhenFn ?D))
                                     (or
                                      (and
                                       (surface ?S ?W)
                                       (and
                                        (instance ?W BodyOfWater)
                                        (orientation ?O ?S Below)))
                                      (and
                                       (surface ?S ?L)
                                       (and
                                        (instance ?L LandArea)
                                        (orientation
                                         ?O
                                         ?S
                                         Below)))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Architecture FieldOfStudy)
*/
fof(a3799,axiom,s_instance(s_Architecture, s_FieldOfStudy)).

/*
(forall (?H)
 (exists (?D ?P ?B)
  (and (and (instance ?B Entity) (instance ?P Entity)
            (instance ?D Process))
       (=> (instance ?H Human)
        (=> (hasExpertise ?H Architecture)
         (and (instance ?D ContentDevelopment)
              (and (agent ?D ?H)
                   (and (result ?D ?P)
                        (and (instance ?P Blueprint)
                             (and (represents ?P ?B)
                                  (instance ?B Building)))))))))))
*/
fof(a3800,axiom,! [H] : (? [D,P,B] : (((s_instance(B, s_Entity) & s_instance(P, s_Entity) & s_instance(D, s_Process)) & (s_instance(H, s_Human) => (s_hasExpertise(H, s_Architecture) => (s_instance(D, s_ContentDevelopment) & (s_agent(D, H) & (s_result(D, P) & (s_instance(P, s_Blueprint) & (s_represents(P, B) & s_instance(B, s_Building)))))))))))).

/*
(instance Astronomy Science)
*/
fof(a3801,axiom,s_instance(s_Astronomy, s_Science)).

/*
(instance ComputerScience Science)
*/
fof(a3802,axiom,s_instance(s_ComputerScience, s_Science)).

/*
(instance Economics SocialScience)
*/
fof(a3803,axiom,s_instance(s_Economics, s_SocialScience)).

/*
(instance Geography Science)
*/
fof(a3804,axiom,s_instance(s_Geography, s_Science)).

/*
(subField Cartography Geography)
*/
fof(a3805,axiom,s_subField(s_Cartography, s_Geography)).

/*
(instance Cartography Science)
*/
fof(a3806,axiom,s_instance(s_Cartography, s_Science)).

/*
(instance Geology Science)
*/
fof(a3807,axiom,s_instance(s_Geology, s_Science)).

/*
(instance LibraryScience Science)
*/
fof(a3808,axiom,s_instance(s_LibraryScience, s_Science)).

/*
(instance Linguistics SocialScience)
*/
fof(a3809,axiom,s_instance(s_Linguistics, s_SocialScience)).

/*
(instance Psychology SocialScience)
*/
fof(a3810,axiom,s_instance(s_Psychology, s_SocialScience)).

/*
(instance Biology Science)
*/
fof(a3811,axiom,s_instance(s_Biology, s_Science)).

/*
(subField Physiology Biology)
*/
fof(a3812,axiom,s_subField(s_Physiology, s_Biology)).

/*
(instance Physiology Science)
*/
fof(a3813,axiom,s_instance(s_Physiology, s_Science)).

/*
(subField MedicalScience Biology)
*/
fof(a3814,axiom,s_subField(s_MedicalScience, s_Biology)).

/*
(instance MedicalScience Science)
*/
fof(a3815,axiom,s_instance(s_MedicalScience, s_Science)).

/*
(subField VeterinaryScience MedicalScience)
*/
fof(a3816,axiom,s_subField(s_VeterinaryScience, s_MedicalScience)).

/*
(instance VeterinaryScience Science)
*/
fof(a3817,axiom,s_instance(s_VeterinaryScience, s_Science)).

/*
(subField Botany Biology)
*/
fof(a3818,axiom,s_subField(s_Botany, s_Biology)).

/*
(instance Botany Science)
*/
fof(a3819,axiom,s_instance(s_Botany, s_Science)).

/*
(subField Zoology Biology)
*/
fof(a3820,axiom,s_subField(s_Zoology, s_Biology)).

/*
(instance Zoology Science)
*/
fof(a3821,axiom,s_instance(s_Zoology, s_Science)).

/*
(instance Biochemistry Science)
*/
fof(a3822,axiom,s_instance(s_Biochemistry, s_Science)).

/*
(instance Chemistry Science)
*/
fof(a3823,axiom,s_instance(s_Chemistry, s_Science)).

/*
(instance Paleontology Science)
*/
fof(a3824,axiom,s_instance(s_Paleontology, s_Science)).

/*
(instance Physics Science)
*/
fof(a3825,axiom,s_instance(s_Physics, s_Science)).

/*
(instance Science SetOrClass)
*/
fof(a3826,axiom,s_instance(s_Science, s_SetOrClass)).

/*
(instance Engineering Science)
*/
fof(a3827,axiom,s_instance(s_Engineering, s_Science)).

/*
(instance SocialScience SetOrClass)
*/
fof(a3828,axiom,s_instance(s_SocialScience, s_SetOrClass)).

/*
(instance Sociology SocialScience)
*/
fof(a3829,axiom,s_instance(s_Sociology, s_SocialScience)).

/*
(instance Statistics FieldOfStudy)
*/
fof(a3830,axiom,s_instance(s_Statistics, s_FieldOfStudy)).

/*
(subField Electronics Physics)
*/
fof(a3831,axiom,s_subField(s_Electronics, s_Physics)).

/*
(subField Electronics Engineering)
*/
fof(a3832,axiom,s_subField(s_Electronics, s_Engineering)).

/*
(instance Electronics FieldOfStudy)
*/
fof(a3833,axiom,s_instance(s_Electronics, s_FieldOfStudy)).

/*
(instance Theology FieldOfStudy)
*/
fof(a3834,axiom,s_instance(s_Theology, s_FieldOfStudy)).

/*
(forall (?X)
 (exists (?Y)
  (and (instance ?Y Entity)
       (=> (instance ?X Theology)
        (and (instance ?Y ReligiousProcess) (refers ?X ?Y))))))
*/
fof(a3835,axiom,! [X] : (? [Y] : ((s_instance(Y, s_Entity) & (s_instance(X, s_Theology) => (s_instance(Y, s_ReligiousProcess) & s_refers(X, Y))))))).

/*
(instance MilitaryScience FieldOfStudy)
*/
fof(a3836,axiom,s_instance(s_MilitaryScience, s_FieldOfStudy)).

/*
(instance History FieldOfStudy)
*/
fof(a3837,axiom,s_instance(s_History, s_FieldOfStudy)).

/*
(instance Philosophy FieldOfStudy)
*/
fof(a3838,axiom,s_instance(s_Philosophy, s_FieldOfStudy)).

/*
(instance FieldOfLaw FieldOfStudy)
*/
fof(a3839,axiom,s_instance(s_FieldOfLaw, s_FieldOfStudy)).

/*
(subrelation subField subProposition)
*/
fof(a3840,axiom,s_subrelation(s_subField_m, s_subProposition_m)).

/*
(instance subField TransitiveRelation)
*/
fof(a3841,axiom,s_instance(s_subField_m, s_TransitiveRelation)).

/*
(instance subField IrreflexiveRelation)
*/
fof(a3842,axiom,s_instance(s_subField_m, s_IrreflexiveRelation)).

/*
(instance hasExpertise BinaryPredicate)
*/
fof(a3843,axiom,s_instance(s_hasExpertise_m, s_BinaryPredicate)).

/*
(forall (?FIELD ?PERSON)
 (exists (?LEARN)
  (and (instance ?LEARN Process)
       (=>
        (and (instance ?PERSON Human) (instance ?FIELD FieldOfStudy))
        (=> (hasExpertise ?PERSON ?FIELD)
         (and (instance ?LEARN Learning)
              (and (agent ?LEARN ?PERSON)
                   (realization ?LEARN ?FIELD))))))))
*/
fof(a3844,axiom,! [FIELD,PERSON] : (? [LEARN] : ((s_instance(LEARN, s_Process) & ((s_instance(PERSON, s_Human) & s_instance(FIELD, s_FieldOfStudy)) => (s_hasExpertise(PERSON, FIELD) => (s_instance(LEARN, s_Learning) & (s_agent(LEARN, PERSON) & s_realization(LEARN, FIELD))))))))).

/*
(instance hasOccupation BinaryPredicate)
*/
fof(a3845,axiom,s_instance(s_hasOccupation_m, s_BinaryPredicate)).

/*
(domainSubclass hasOccupation 2 IntentionalProcess)
*/
fof(a3846,axiom,s_domainSubclass(s_hasOccupation_m, 2, s_IntentionalProcess)).

/*
(forall (?WORK ?PERSON)
 (exists (?INST)
  (and (instance ?INST Process)
       (=>
        (and (instance ?PERSON Human)
             (subclass ?WORK IntentionalProcess)
             (instance ?WORK SetOrClass))
        (=> (hasOccupation ?PERSON ?WORK)
         (and (instance ?INST ?WORK)
              (and (instance ?INST Working) (agent ?INST ?PERSON))))))))
*/
fof(a3847,axiom,! [WORK,PERSON] : (? [INST] : ((s_instance(INST, s_Process) & ((s_instance(PERSON, s_Human) & s_subclass(WORK, s_IntentionalProcess) & s_instance(WORK, s_SetOrClass)) => (s_hasOccupation(PERSON, WORK) => (s_instance(INST, WORK) & (s_instance(INST, s_Working) & s_agent(INST, PERSON))))))))).

/*
(instance Bleeding SetOrClass)
*/
fof(a3848,axiom,s_instance(s_Bleeding, s_SetOrClass)).

/*
(subclass Bleeding AutonomicProcess)
*/
fof(a3849,axiom,s_subclass(s_Bleeding, s_AutonomicProcess)).

/*
(forall (?BLEED)
 (exists (?INJURY)
  (and (instance ?INJURY Process)
       (=> (instance ?BLEED Bleeding)
        (and (instance ?INJURY Injuring) (causes ?INJURY ?BLEED))))))
*/
fof(a3850,axiom,! [BLEED] : (? [INJURY] : ((s_instance(INJURY, s_Process) & (s_instance(BLEED, s_Bleeding) => (s_instance(INJURY, s_Injuring) & s_causes(INJURY, BLEED))))))).

/*
(forall (?ANIMAL ?BLEED)
 (=> (instance ?ANIMAL Agent)
  (=> (and (instance ?BLEED Bleeding) (experiencer ?BLEED ?ANIMAL))
   (instance ?ANIMAL Animal))))
*/
fof(a3851,axiom,! [ANIMAL,BLEED] : ((s_instance(ANIMAL, s_Agent) => ((s_instance(BLEED, s_Bleeding) & s_experiencer(BLEED, ANIMAL)) => s_instance(ANIMAL, s_Animal))))).

/*
(forall (?ANIMAL ?BLEED)
 (exists (?BLOOD)
  (and (instance ?BLOOD Object)
       (=> (instance ?ANIMAL Agent)
        (=>
         (and (instance ?BLEED Bleeding) (experiencer ?BLEED ?ANIMAL))
         (and (instance ?BLOOD Blood)
              (and (holdsDuring (BeginFn (WhenFn ?BLEED))
                    (part ?BLOOD ?ANIMAL))
                   (holdsDuring (EndFn (WhenFn ?BLEED))
                    (not (part ?BLOOD ?ANIMAL))))))))))
*/
%% no translation to TPTP available.

/*
(instance Blushing SetOrClass)
*/
fof(a3852,axiom,s_instance(s_Blushing, s_SetOrClass)).

/*
(subclass Blushing AutonomicProcess)
*/
fof(a3853,axiom,s_subclass(s_Blushing, s_AutonomicProcess)).

/*
(forall (?A ?B)
 (exists (?T1 ?T2 ?S1 ?S2)
  (and (and (instance ?S2 Attribute) (instance ?S1 Attribute)
            (instance ?T2 TimeInterval) (instance ?T1 TimeInterval))
       (=> (instance ?A Agent)
        (=> (and (instance ?B Blushing) (experiencer ?B ?A))
         (and (instance ?S1 EmotionalState)
              (and (instance ?S2 EmotionalState)
                   (and (not (equal ?S1 ?S2))
                        (and (holdsDuring ?T1 (attribute ?A ?S1))
                             (and (holdsDuring ?T2 (attribute ?A ?S2))
                                  (and
                                   (starts (WhenFn ?B) ?T2)
                                   (finishes (WhenFn ?B) ?T1))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Aborting SetOrClass)
*/
fof(a3854,axiom,s_instance(s_Aborting, s_SetOrClass)).

/*
(subclass Aborting Removing)
*/
fof(a3855,axiom,s_subclass(s_Aborting, s_Removing)).

/*
(forall (?W ?A)
 (=>
  (and (instance ?A Aborting)
       (and (patient ?A ?W) (instance ?W Woman)))
  (and (holdsDuring (BeginFn (WhenFn ?A)) (attribute ?W Pregnant))
       (holdsDuring (EndFn (WhenFn ?A))
        (not (attribute ?W Pregnant))))))
*/
%% no translation to TPTP available.

/*
(instance ClosingContract SetOrClass)
*/
fof(a3856,axiom,s_instance(s_ClosingContract, s_SetOrClass)).

/*
(subclass ClosingContract Committing)
*/
fof(a3857,axiom,s_subclass(s_ClosingContract, s_Committing)).

/*
(forall (?CONTRACT ?AGENT ?CLOSE)
 (=>
  (and (instance ?CONTRACT CognitiveAgent) (instance ?AGENT Agent)
       (instance ?AGENT Agreement))
  (=>
   (and (instance ?CLOSE ClosingContract)
        (and (agent ?CLOSE ?AGENT) (destination ?CLOSE ?CONTRACT)))
   (partyToAgreement ?CONTRACT ?AGENT))))
*/
fof(a3858,axiom,! [CONTRACT,AGENT,CLOSE] : (((s_instance(CONTRACT, s_CognitiveAgent) & s_instance(AGENT, s_Agent) & s_instance(AGENT, s_Agreement)) => ((s_instance(CLOSE, s_ClosingContract) & (s_agent(CLOSE, AGENT) & s_destination(CLOSE, CONTRACT))) => s_partyToAgreement(CONTRACT, AGENT))))).

/*
(instance Opening SetOrClass)
*/
fof(a3859,axiom,s_instance(s_Opening, s_SetOrClass)).

/*
(subclass Opening Motion)
*/
fof(a3860,axiom,s_subclass(s_Opening, s_Motion)).

/*
(instance Closing SetOrClass)
*/
fof(a3861,axiom,s_instance(s_Closing, s_SetOrClass)).

/*
(subclass Closing Motion)
*/
fof(a3862,axiom,s_subclass(s_Closing, s_Motion)).

/*
(instance Diet SetOrClass)
*/
fof(a3863,axiom,s_instance(s_Diet, s_SetOrClass)).

/*
(subclass Diet Plan)
*/
fof(a3864,axiom,s_subclass(s_Diet, s_Plan)).

/*
(forall (?D ?P)
 (exists (?E)
  (and (instance ?E Process)
       (=> (instance ?P Process)
        (=> (and (instance ?D Diet) (realization ?P ?D))
         (and (subProcess ?E ?P) (instance ?E Eating)))))))
*/
fof(a3865,axiom,! [D,P] : (? [E] : ((s_instance(E, s_Process) & (s_instance(P, s_Process) => ((s_instance(D, s_Diet) & s_realization(P, D)) => (s_subProcess(E, P) & s_instance(E, s_Eating)))))))).

/*
(subclass PreparedFood Object)
*/
fof(a3866,axiom,s_subclass(s_PreparedFood, s_Object)).

/*
(forall (?X)
 (=> (instance ?X PreparedFood) (instance ?X (FoodForFn Organism))))
*/
fof(a3867,axiom,! [X] : ((s_instance(X, s_PreparedFood) => s_instance(X, s_FoodForFn(s_Organism))))).

/*
(forall (?X)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?X PreparedFood)
        (and (instance ?PROC IntentionalProcess) (result ?PROC ?X))))))
*/
fof(a3868,axiom,! [X] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(X, s_PreparedFood) => (s_instance(PROC, s_IntentionalProcess) & s_result(PROC, X))))))).

/*
(instance SolidFood SetOrClass)
*/
fof(a3869,axiom,s_instance(s_SolidFood, s_SetOrClass)).

/*
(subclass SolidFood PreparedFood)
*/
fof(a3870,axiom,s_subclass(s_SolidFood, s_PreparedFood)).

/*
(forall (?X)
 (exists (?ING)
  (and (instance ?ING Object)
       (=> (instance ?X SolidFood)
        (and (part ?ING ?X) (attribute ?ING Solid))))))
*/
fof(a3871,axiom,! [X] : (? [ING] : ((s_instance(ING, s_Object) & (s_instance(X, s_SolidFood) => (s_part(ING, X) & s_attribute(ING, s_Solid))))))).

/*
(subclass LiquidFood PreparedFood)
*/
fof(a3872,axiom,s_subclass(s_LiquidFood, s_PreparedFood)).

/*
(forall (?X)
 (forall (?ING)
  (=> (instance ?ING Object)
   (=> (instance ?X LiquidFood)
    (not (and (part ?ING ?X) (attribute ?ING Solid)))))))
*/
fof(a3873,axiom,! [X] : (! [ING] : ((s_instance(ING, s_Object) => (s_instance(X, s_LiquidFood) => (~ (s_part(ING, X) & s_attribute(ING, s_Solid)))))))).

/*
(instance LiquidFood SetOrClass)
*/
fof(a3874,axiom,s_instance(s_LiquidFood, s_SetOrClass)).

/*
(subclass Beverage LiquidFood)
*/
fof(a3875,axiom,s_subclass(s_Beverage, s_LiquidFood)).

/*
(subclass Beverage Substance)
*/
fof(a3876,axiom,s_subclass(s_Beverage, s_Substance)).

/*
(disjoint Meat Beverage)
*/
fof(a3877,axiom,s_disjoint(s_Meat, s_Beverage)).

/*
(forall (?BEV) (=> (instance ?BEV Beverage) (attribute ?BEV Liquid)))
*/
fof(a3878,axiom,! [BEV] : ((s_instance(BEV, s_Beverage) => s_attribute(BEV, s_Liquid)))).

/*
(forall (?BEV ?DRINK)
 (=> (instance ?BEV Entity)
  (=> (and (instance ?DRINK Drinking) (patient ?DRINK ?BEV))
   (instance ?BEV Beverage))))
*/
fof(a3879,axiom,! [BEV,DRINK] : ((s_instance(BEV, s_Entity) => ((s_instance(DRINK, s_Drinking) & s_patient(DRINK, BEV)) => s_instance(BEV, s_Beverage))))).

/*
(instance CookedAttribute RelationalAttribute)
*/
fof(a3880,axiom,s_instance(s_CookedAttribute, s_RelationalAttribute)).

/*
(forall (?FOOD)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?FOOD Object)
        (=> (attribute ?FOOD CookedAttribute)
         (and (instance ?PROC Cooking) (result ?PROC ?FOOD)))))))
*/
fof(a3881,axiom,! [FOOD] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(FOOD, s_Object) => (s_attribute(FOOD, s_CookedAttribute) => (s_instance(PROC, s_Cooking) & s_result(PROC, FOOD)))))))).

/*
(instance RawAttribute RelationalAttribute)
*/
fof(a3882,axiom,s_instance(s_RawAttribute, s_RelationalAttribute)).

/*
(forall (?FOOD)
 (=> (instance ?FOOD Object)
  (=> (attribute ?FOOD RawAttribute)
   (instance ?FOOD (FoodForFn Organism)))))
*/
fof(a3883,axiom,! [FOOD] : ((s_instance(FOOD, s_Object) => (s_attribute(FOOD, s_RawAttribute) => s_instance(FOOD, s_FoodForFn(s_Organism)))))).

/*
(forall (?FOOD)
 (forall (?PROC)
  (=> (instance ?PROC Process)
   (=> (instance ?FOOD Object)
    (=> (attribute ?FOOD RawAttribute)
     (not (and (instance ?PROC Cooking) (result ?PROC ?FOOD))))))))
*/
fof(a3884,axiom,! [FOOD] : (! [PROC] : ((s_instance(PROC, s_Process) => (s_instance(FOOD, s_Object) => (s_attribute(FOOD, s_RawAttribute) => (~ (s_instance(PROC, s_Cooking) & s_result(PROC, FOOD))))))))).

/*
(subclass Baking Cooking)
*/
fof(a3885,axiom,s_subclass(s_Baking, s_Cooking)).

/*
(instance Baking SetOrClass)
*/
fof(a3886,axiom,s_instance(s_Baking, s_SetOrClass)).

/*
(subclass Baking Heating)
*/
fof(a3887,axiom,s_subclass(s_Baking, s_Heating)).

/*
(forall (?B)
 (exists (?O)
  (and (instance ?O Object)
       (=> (instance ?B Baking)
        (and (instance ?O Oven) (instrument ?B ?O))))))
*/
fof(a3888,axiom,! [B] : (? [O] : ((s_instance(O, s_Object) & (s_instance(B, s_Baking) => (s_instance(O, s_Oven) & s_instrument(B, O))))))).

/*
(instance BreadOrBiscuit SetOrClass)
*/
fof(a3889,axiom,s_instance(s_BreadOrBiscuit, s_SetOrClass)).

/*
(subclass BreadOrBiscuit PreparedFood)
*/
fof(a3890,axiom,s_subclass(s_BreadOrBiscuit, s_PreparedFood)).

/*
(forall (?B)
 (exists (?D ?BAKE)
  (and (and (instance ?BAKE Process) (instance ?D Object))
       (=> (instance ?B BreadOrBiscuit)
        (and (instance ?D Dough)
             (and (instance ?BAKE Baking)
                  (and (resource ?BAKE ?D) (result ?BAKE ?B))))))))
*/
fof(a3891,axiom,! [B] : (? [D,BAKE] : (((s_instance(BAKE, s_Process) & s_instance(D, s_Object)) & (s_instance(B, s_BreadOrBiscuit) => (s_instance(D, s_Dough) & (s_instance(BAKE, s_Baking) & (s_resource(BAKE, D) & s_result(BAKE, B))))))))).

/*
(instance Sandwich SetOrClass)
*/
fof(a3892,axiom,s_instance(s_Sandwich, s_SetOrClass)).

/*
(subclass Sandwich PreparedFood)
*/
fof(a3893,axiom,s_subclass(s_Sandwich, s_PreparedFood)).

/*
(forall (?S)
 (exists (?B1 ?B2 ?F)
  (and (and (instance ?F Object) (instance ?B2 Object)
            (instance ?B1 Object))
       (=> (instance ?S Sandwich)
        (and (instance ?B1 BreadOrBiscuit)
             (and (instance ?B2 BreadOrBiscuit)
                  (and (instance ?F (FoodForFn Human))
                       (and (between ?B1 ?F ?B2)
                            (and (not (equal ?B1 ?B2))
                                 (and
                                  (not (equal ?B1 ?F))
                                  (and
                                   (not (equal ?B2 ?F))
                                   (and
                                    (part ?B1 ?S)
                                    (and
                                     (part ?B2 ?S)
                                     (part ?F ?S))))))))))))))
*/
fof(a3894,axiom,! [S] : (? [B1,B2,F] : (((s_instance(F, s_Object) & s_instance(B2, s_Object) & s_instance(B1, s_Object)) & (s_instance(S, s_Sandwich) => (s_instance(B1, s_BreadOrBiscuit) & (s_instance(B2, s_BreadOrBiscuit) & (s_instance(F, s_FoodForFn(s_Human)) & (s_between(B1, F, B2) & ((~ (B1 = B2)) & ((~ (B1 = F)) & ((~ (B2 = F)) & (s_part(B1, S) & (s_part(B2, S) & s_part(F, S))))))))))))))).

/*
(subclass Dough PreparedFood)
*/
fof(a3895,axiom,s_subclass(s_Dough, s_PreparedFood)).

/*
(instance Dough SetOrClass)
*/
fof(a3896,axiom,s_instance(s_Dough, s_SetOrClass)).

/*
(subclass Dough Mixture)
*/
fof(a3897,axiom,s_subclass(s_Dough, s_Mixture)).

/*
(forall (?D)
 (exists (?F ?W)
  (and (and (instance ?W Object) (instance ?F Object))
       (=> (instance ?D Dough)
        (and (instance ?F Flour)
             (and (instance ?W Water)
                  (and (part ?F ?D) (part ?W ?D))))))))
*/
fof(a3898,axiom,! [D] : (? [F,W] : (((s_instance(W, s_Object) & s_instance(F, s_Object)) & (s_instance(D, s_Dough) => (s_instance(F, s_Flour) & (s_instance(W, s_Water) & (s_part(F, D) & s_part(W, D))))))))).

/*
(instance Butter SetOrClass)
*/
fof(a3899,axiom,s_instance(s_Butter, s_SetOrClass)).

/*
(subclass Butter PreparedFood)
*/
fof(a3900,axiom,s_subclass(s_Butter, s_PreparedFood)).

/*
(forall (?B)
 (exists (?C ?M)
  (and (and (instance ?M Object) (instance ?C Process))
       (=> (instance ?B Butter)
        (and (instance ?C Cooking)
             (and (resource ?C ?M)
                  (and (instance ?M Milk) (result ?C ?B))))))))
*/
fof(a3901,axiom,! [B] : (? [C,M] : (((s_instance(M, s_Object) & s_instance(C, s_Process)) & (s_instance(B, s_Butter) => (s_instance(C, s_Cooking) & (s_resource(C, M) & (s_instance(M, s_Milk) & s_result(C, B))))))))).

/*
(subclass CerealGrain Seed)
*/
fof(a3902,axiom,s_subclass(s_CerealGrain, s_Seed)).

/*
(instance RiceGrain SetOrClass)
*/
fof(a3903,axiom,s_instance(s_RiceGrain, s_SetOrClass)).

/*
(subclass RiceGrain CerealGrain)
*/
fof(a3904,axiom,s_subclass(s_RiceGrain, s_CerealGrain)).

/*
(instance WheatGrain SetOrClass)
*/
fof(a3905,axiom,s_instance(s_WheatGrain, s_SetOrClass)).

/*
(subclass WheatGrain CerealGrain)
*/
fof(a3906,axiom,s_subclass(s_WheatGrain, s_CerealGrain)).

/*
(subclass Pea Seed)
*/
fof(a3907,axiom,s_subclass(s_Pea, s_Seed)).

/*
(instance Pea SetOrClass)
*/
fof(a3908,axiom,s_instance(s_Pea, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3909,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass Pea (FoodForFn Animal))
*/
fof(a3910,axiom,s_subclass(s_Pea, s_FoodForFn(s_Animal))).

/*
(subclass Flour PreparedFood)
*/
fof(a3911,axiom,s_subclass(s_Flour, s_PreparedFood)).

/*
(instance Flour SetOrClass)
*/
fof(a3912,axiom,s_instance(s_Flour, s_SetOrClass)).

/*
(instance Powder SetOrClass)
*/
fof(a3913,axiom,s_instance(s_Powder, s_SetOrClass)).

/*
(subclass Flour Powder)
*/
fof(a3914,axiom,s_subclass(s_Flour, s_Powder)).

/*
(forall (?F)
 (exists (?P ?C)
  (and (and (instance ?C Object) (instance ?P Process))
       (=> (instance ?F Flour)
        (and (instance ?P IntentionalProcess)
             (and (resource ?P ?C)
                  (and (instance ?C CerealGrain) (result ?P ?F))))))))
*/
fof(a3915,axiom,! [F] : (? [P,C] : (((s_instance(C, s_Object) & s_instance(P, s_Process)) & (s_instance(F, s_Flour) => (s_instance(P, s_IntentionalProcess) & (s_resource(P, C) & (s_instance(C, s_CerealGrain) & s_result(P, F))))))))).

/*
(subclass Honey AnimalSubstance)
*/
fof(a3916,axiom,s_subclass(s_Honey, s_AnimalSubstance)).

/*
(instance Honey SetOrClass)
*/
fof(a3917,axiom,s_instance(s_Honey, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3918,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass Honey (FoodForFn Animal))
*/
fof(a3919,axiom,s_subclass(s_Honey, s_FoodForFn(s_Animal))).

/*
(forall (?H)
 (exists (?P ?B)
  (and (and (instance ?B Agent) (instance ?P Process))
       (=> (instance ?H Honey)
        (and (instance ?P PhysiologicProcess)
             (and (agent ?P ?B)
                  (and (instance ?B Bee) (result ?P ?H))))))))
*/
fof(a3920,axiom,! [H] : (? [P,B] : (((s_instance(B, s_Agent) & s_instance(P, s_Process)) & (s_instance(H, s_Honey) => (s_instance(P, s_PhysiologicProcess) & (s_agent(P, B) & (s_instance(B, s_Bee) & s_result(P, H))))))))).

/*
(subclass Coconut FruitOrVegetable)
*/
fof(a3921,axiom,s_subclass(s_Coconut, s_FruitOrVegetable)).

/*
(instance Coconut SetOrClass)
*/
fof(a3922,axiom,s_instance(s_Coconut, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3923,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass Coconut (FoodForFn Animal))
*/
fof(a3924,axiom,s_subclass(s_Coconut, s_FoodForFn(s_Animal))).

/*
(instance MaizeGrain SetOrClass)
*/
fof(a3925,axiom,s_instance(s_MaizeGrain, s_SetOrClass)).

/*
(instance CerealGrain SetOrClass)
*/
fof(a3926,axiom,s_instance(s_CerealGrain, s_SetOrClass)).

/*
(subclass MaizeGrain CerealGrain)
*/
fof(a3927,axiom,s_subclass(s_MaizeGrain, s_CerealGrain)).

/*
(instance SoupStock SetOrClass)
*/
fof(a3928,axiom,s_instance(s_SoupStock, s_SetOrClass)).

/*
(subclass SoupStock PreparedFood)
*/
fof(a3929,axiom,s_subclass(s_SoupStock, s_PreparedFood)).

/*
(instance Beverage SetOrClass)
*/
fof(a3930,axiom,s_instance(s_Beverage, s_SetOrClass)).

/*
(subclass Coffee Beverage)
*/
fof(a3931,axiom,s_subclass(s_Coffee, s_Beverage)).

/*
(instance Coffee SetOrClass)
*/
fof(a3932,axiom,s_instance(s_Coffee, s_SetOrClass)).

/*
(instance PreparedFood SetOrClass)
*/
fof(a3933,axiom,s_instance(s_PreparedFood, s_SetOrClass)).

/*
(subclass Coffee PreparedFood)
*/
fof(a3934,axiom,s_subclass(s_Coffee, s_PreparedFood)).

/*
(subclass Apple FruitOrVegetable)
*/
fof(a3935,axiom,s_subclass(s_Apple, s_FruitOrVegetable)).

/*
(instance Apple SetOrClass)
*/
fof(a3936,axiom,s_instance(s_Apple, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3937,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass Apple (FoodForFn Animal))
*/
fof(a3938,axiom,s_subclass(s_Apple, s_FoodForFn(s_Animal))).

/*
(subclass DateFruit FruitOrVegetable)
*/
fof(a3939,axiom,s_subclass(s_DateFruit, s_FruitOrVegetable)).

/*
(instance DateFruit SetOrClass)
*/
fof(a3940,axiom,s_instance(s_DateFruit, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3941,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass DateFruit (FoodForFn Animal))
*/
fof(a3942,axiom,s_subclass(s_DateFruit, s_FoodForFn(s_Animal))).

/*
(subclass PearFruit FruitOrVegetable)
*/
fof(a3943,axiom,s_subclass(s_PearFruit, s_FruitOrVegetable)).

/*
(instance PearFruit SetOrClass)
*/
fof(a3944,axiom,s_instance(s_PearFruit, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3945,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass PearFruit (FoodForFn Animal))
*/
fof(a3946,axiom,s_subclass(s_PearFruit, s_FoodForFn(s_Animal))).

/*
(subclass Avocado FruitOrVegetable)
*/
fof(a3947,axiom,s_subclass(s_Avocado, s_FruitOrVegetable)).

/*
(instance Avocado SetOrClass)
*/
fof(a3948,axiom,s_instance(s_Avocado, s_SetOrClass)).

/*
(instance (FoodForFn Animal) SetOrClass)
*/
fof(a3949,axiom,s_instance(s_FoodForFn(s_Animal), s_SetOrClass)).

/*
(subclass Avocado (FoodForFn Animal))
*/
fof(a3950,axiom,s_subclass(s_Avocado, s_FoodForFn(s_Animal))).

/*
(instance Ion SetOrClass)
*/
fof(a3951,axiom,s_instance(s_Ion, s_SetOrClass)).

/*
(subclass Ion PureSubstance)
*/
fof(a3952,axiom,s_subclass(s_Ion, s_PureSubstance)).

/*
(instance FreeAtom SetOrClass)
*/
fof(a3953,axiom,s_instance(s_FreeAtom, s_SetOrClass)).

/*
(subclass FreeAtom Atom)
*/
fof(a3954,axiom,s_subclass(s_FreeAtom, s_Atom)).

/*
(forall (?A)
 (forall (?M)
  (=> (instance ?M Object)
   (=> (instance ?A FreeAtom)
    (not (and (instance ?M Molecule) (part ?A ?M)))))))
*/
fof(a3955,axiom,! [A] : (! [M] : ((s_instance(M, s_Object) => (s_instance(A, s_FreeAtom) => (~ (s_instance(M, s_Molecule) & s_part(A, M)))))))).

/*
(instance protonNumber BinaryPredicate)
*/
fof(a3956,axiom,s_instance(s_protonNumber_m, s_BinaryPredicate)).

/*
(instance protonNumber SingleValuedRelation)
*/
fof(a3957,axiom,s_instance(s_protonNumber_m, s_SingleValuedRelation)).

/*
(instance protonNumber TotalValuedRelation)
*/
fof(a3958,axiom,s_instance(s_protonNumber_m, s_TotalValuedRelation)).

/*
(forall (?SUBSTANCE ?NUMBER ?ATOM ?PROTON)
 (=>
  (and (instance ?PROTON SymbolicString) (instance ?ATOM Object)
       (instance ?NUMBER PositiveInteger)
       (instance ?SUBSTANCE PureSubstance))
  (=> (protonNumber ?SUBSTANCE ?NUMBER)
   (=>
    (and (part ?ATOM ?SUBSTANCE)
         (or (instance ?ATOM Atom) (instance ?ATOM Molecule)))
    (equal ?NUMBER
           (CardinalityFn
            (KappaFn ?PROTON
             (and (part ?PROTON ?ATOM) (instance ?PROTON Proton)))))))))
*/
%% no translation to TPTP available.

/*
(instance electronNumber BinaryPredicate)
*/
fof(a3959,axiom,s_instance(s_electronNumber_m, s_BinaryPredicate)).

/*
(instance electronNumber SingleValuedRelation)
*/
fof(a3960,axiom,s_instance(s_electronNumber_m, s_SingleValuedRelation)).

/*
(instance electronNumber TotalValuedRelation)
*/
fof(a3961,axiom,s_instance(s_electronNumber_m, s_TotalValuedRelation)).

/*
(forall (?TYPE ?SUBSTANCE ?NUMBER ?ATOM ?ELECTRON)
 (=>
  (and (instance ?ELECTRON SymbolicString) (instance ?ATOM Object)
       (instance ?NUMBER PositiveInteger) (instance ?SUBSTANCE Object)
       (instance ?TYPE PureSubstance))
  (=> (electronNumber ?TYPE ?NUMBER)
   (=>
    (and (part ?ATOM ?SUBSTANCE)
         (or (instance ?ATOM Atom) (instance ?ATOM Molecule)))
    (equal ?NUMBER
           (CardinalityFn
            (KappaFn ?ELECTRON
             (and (part ?ELECTRON ?ATOM)
                  (instance ?ELECTRON Electron)))))))))
*/
%% no translation to TPTP available.

/*
(instance AtomicGroup SetOrClass)
*/
fof(a3962,axiom,s_instance(s_AtomicGroup, s_SetOrClass)).

/*
(subclass AtomicGroup CompoundSubstance)
*/
fof(a3963,axiom,s_subclass(s_AtomicGroup, s_CompoundSubstance)).

/*
(forall (?G)
 (exists (?ATOM1 ?ATOM2)
  (and (and (instance ?ATOM2 Object) (instance ?ATOM1 Object))
       (=> (instance ?G AtomicGroup)
        (and (instance ?ATOM1 Atom)
             (and (instance ?ATOM2 Atom)
                  (and (not (equal ?ATOM1 ?ATOM2))
                       (and (part ?ATOM1 ?G) (part ?ATOM2 ?G)))))))))
*/
fof(a3964,axiom,! [G] : (? [ATOM1,ATOM2] : (((s_instance(ATOM2, s_Object) & s_instance(ATOM1, s_Object)) & (s_instance(G, s_AtomicGroup) => (s_instance(ATOM1, s_Atom) & (s_instance(ATOM2, s_Atom) & ((~ (ATOM1 = ATOM2)) & (s_part(ATOM1, G) & s_part(ATOM2, G)))))))))).

/*
(forall (?G)
 (exists (?M)
  (and (instance ?M Object)
       (=> (instance ?G AtomicGroup)
        (and (instance ?M Molecule) (part ?G ?M))))))
*/
fof(a3965,axiom,! [G] : (? [M] : ((s_instance(M, s_Object) & (s_instance(G, s_AtomicGroup) => (s_instance(M, s_Molecule) & s_part(G, M))))))).

/*
(instance Ambush SetOrClass)
*/
fof(a3966,axiom,s_instance(s_Ambush, s_SetOrClass)).

/*
(subclass Ambush Maneuver)
*/
fof(a3967,axiom,s_subclass(s_Ambush, s_Maneuver)).

/*
(forall (?AG ?AMBUSH)
 (exists (?C)
  (and (instance ?C Process)
       (=> (instance ?AG Agent)
        (=> (and (instance ?AMBUSH Ambush) (agent ?AMBUSH ?AG))
         (and (instance ?C Concealing)
              (and (subProcess ?C ?AMBUSH)
                   (hasPurpose ?C
                    (exists (?ATTACK)
                     (and (instance ?ATTACK Attack)
                          (agent ?ATTACK ?AG)))))))))))
*/
%% no translation to TPTP available.

/*
(instance Blockade SetOrClass)
*/
fof(a3968,axiom,s_instance(s_Blockade, s_SetOrClass)).

/*
(subclass Blockade Maneuver)
*/
fof(a3969,axiom,s_subclass(s_Blockade, s_Maneuver)).

/*
(forall (?B ?A1 ?C)
 (exists (?C1 ?A2)
  (and (and (instance ?A2 CognitiveAgent) (instance ?C1 Process)
            (instance ?C1 SetOrClass))
       (=> (instance ?A1 Agent)
        (=>
         (and (instance ?B Blockade)
              (and (instance ?C Contest)
                   (and (subProcess ?B ?C)
                        (and (contestParticipant ?C ?A1)
                             (agent ?B ?A1)))))
         (and (prevents ?C1 Translocation)
              (and (instance ?B ?C1)
                   (and (contestParticipant ?C ?A2)
                        (and (not (equal ?A1 ?A2))
                             (desires ?A2
                              (exists (?I)
                               (and
                                (instance ?I ?C1)
                                (and
                                 (agent ?I ?A1)
                                 (subProcess ?I ?C))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance MilitaryManeuver SetOrClass)
*/
fof(a3970,axiom,s_instance(s_MilitaryManeuver, s_SetOrClass)).

/*
(subclass MilitaryManeuver Maneuver)
*/
fof(a3971,axiom,s_subclass(s_MilitaryManeuver, s_Maneuver)).

/*
(forall (?M)
 (exists (?B)
  (and (instance ?B Process)
       (=> (instance ?M MilitaryManeuver)
        (and (instance ?B Battle) (subProcess ?M ?B))))))
*/
fof(a3972,axiom,! [M] : (? [B] : ((s_instance(B, s_Process) & (s_instance(M, s_MilitaryManeuver) => (s_instance(B, s_Battle) & s_subProcess(M, B))))))).

/*
(subclass Fire Combustion)
*/
fof(a3973,axiom,s_subclass(s_Fire, s_Combustion)).

/*
(instance Fire SetOrClass)
*/
fof(a3974,axiom,s_instance(s_Fire, s_SetOrClass)).

/*
(subclass Arson Fire)
*/
fof(a3975,axiom,s_subclass(s_Arson, s_Fire)).

/*
(instance Arson SetOrClass)
*/
fof(a3976,axiom,s_instance(s_Arson, s_SetOrClass)).

/*
(subclass Arson Destruction)
*/
fof(a3977,axiom,s_subclass(s_Arson, s_Destruction)).

/*
(subclass Bombing Destruction)
*/
fof(a3978,axiom,s_subclass(s_Bombing, s_Destruction)).

/*
(subclass Bomb Weapon)
*/
fof(a3979,axiom,s_subclass(s_Bomb, s_Weapon)).

/*
(instance ExplosiveDevice SetOrClass)
*/
fof(a3980,axiom,s_instance(s_ExplosiveDevice, s_SetOrClass)).

/*
(subclass Bomb ExplosiveDevice)
*/
fof(a3981,axiom,s_subclass(s_Bomb, s_ExplosiveDevice)).

/*
(forall (?X)
 (exists (?BOMB)
  (and (instance ?BOMB Object)
       (=> (instance ?X Bombing)
        (and (instance ?BOMB Bomb) (instrument ?X ?BOMB))))))
*/
fof(a3982,axiom,! [X] : (? [BOMB] : ((s_instance(BOMB, s_Object) & (s_instance(X, s_Bombing) => (s_instance(BOMB, s_Bomb) & s_instrument(X, BOMB))))))).

/*
(instance CarBombing SetOrClass)
*/
fof(a3983,axiom,s_instance(s_CarBombing, s_SetOrClass)).

/*
(subclass CarBombing Bombing)
*/
fof(a3984,axiom,s_subclass(s_CarBombing, s_Bombing)).

/*
(forall (?X)
 (exists (?BOMB ?CAR)
  (and (and (instance ?CAR Object) (instance ?BOMB Object))
       (=> (instance ?X CarBombing)
        (and (instance ?BOMB Bomb)
             (and (instance ?CAR TransportationDevice)
                  (and (instrument ?X ?CAR)
                       (and (instrument ?X ?BOMB)
                            (connected ?CAR ?BOMB)))))))))
*/
fof(a3985,axiom,! [X] : (? [BOMB,CAR] : (((s_instance(CAR, s_Object) & s_instance(BOMB, s_Object)) & (s_instance(X, s_CarBombing) => (s_instance(BOMB, s_Bomb) & (s_instance(CAR, s_TransportationDevice) & (s_instrument(X, CAR) & (s_instrument(X, BOMB) & s_connected(CAR, BOMB)))))))))).

/*
(instance ChemicalAttack SetOrClass)
*/
fof(a3986,axiom,s_instance(s_ChemicalAttack, s_SetOrClass)).

/*
(subclass ChemicalAttack ViolentContest)
*/
fof(a3987,axiom,s_subclass(s_ChemicalAttack, s_ViolentContest)).

/*
(forall (?X)
 (exists (?CHEM)
  (and (instance ?CHEM Object)
       (=> (instance ?X ChemicalAttack)
        (and (instance ?CHEM Substance) (instrument ?X ?CHEM))))))
*/
fof(a3988,axiom,! [X] : (? [CHEM] : ((s_instance(CHEM, s_Object) & (s_instance(X, s_ChemicalAttack) => (s_instance(CHEM, s_Substance) & s_instrument(X, CHEM))))))).

/*
(instance HandgrenadeAttack SetOrClass)
*/
fof(a3989,axiom,s_instance(s_HandgrenadeAttack, s_SetOrClass)).

/*
(subclass HandgrenadeAttack Bombing)
*/
fof(a3990,axiom,s_subclass(s_HandgrenadeAttack, s_Bombing)).

/*
(instance HandGrenade SetOrClass)
*/
fof(a3991,axiom,s_instance(s_HandGrenade, s_SetOrClass)).

/*
(instance Bomb SetOrClass)
*/
fof(a3992,axiom,s_instance(s_Bomb, s_SetOrClass)).

/*
(subclass HandGrenade Bomb)
*/
fof(a3993,axiom,s_subclass(s_HandGrenade, s_Bomb)).

/*
(forall (?N ?X)
 (=> (instance ?N RealNumber)
  (=> (instance ?X HandGrenade)
   (and (measure ?X (MeasureFn ?N PoundMass)) (lessThan ?N 10)))))
*/
fof(a3994,axiom,! [N,X] : ((s_instance(N, s_RealNumber) => (s_instance(X, s_HandGrenade) => (s_measure(X, s_MeasureFn(N, s_PoundMass)) & less(N, 10)))))).

/*
(forall (?X)
 (exists (?HG)
  (and (instance ?HG Object)
       (=> (instance ?X HandgrenadeAttack)
        (and (instance ?HG HandGrenade) (instrument ?X ?HG))))))
*/
fof(a3995,axiom,! [X] : (? [HG] : ((s_instance(HG, s_Object) & (s_instance(X, s_HandgrenadeAttack) => (s_instance(HG, s_HandGrenade) & s_instrument(X, HG))))))).

/*
(instance Hijacking SetOrClass)
*/
fof(a3996,axiom,s_instance(s_Hijacking, s_SetOrClass)).

/*
(subclass Hijacking Robbing)
*/
fof(a3997,axiom,s_subclass(s_Hijacking, s_Robbing)).

/*
(forall (?H)
 (exists (?V)
  (and (instance ?V Entity)
       (=> (instance ?H Hijacking)
        (and (instance ?V Vehicle) (patient ?H ?V))))))
*/
fof(a3998,axiom,! [H] : (? [V] : ((s_instance(V, s_Entity) & (s_instance(H, s_Hijacking) => (s_instance(V, s_Vehicle) & s_patient(H, V))))))).

/*
(forall (?H)
 (exists (?D)
  (and (instance ?D Process)
       (=> (instance ?H Hijacking)
        (and (subProcess ?D ?H) (instance ?D Driving))))))
*/
fof(a3999,axiom,! [H] : (? [D] : ((s_instance(D, s_Process) & (s_instance(H, s_Hijacking) => (s_subProcess(D, H) & s_instance(D, s_Driving))))))).

/*
(forall (?X)
 (exists (?V ?A)
  (and (and (instance ?A Agent) (instance ?V Object))
       (=> (instance ?X Hijacking)
        (and (agent ?X ?A)
             (and (instance ?V TransportationDevice)
                  (and (holdsDuring (ImmediatePastFn (WhenFn ?X))
                        (not (possesses ?A ?V)))
                       (holdsDuring (WhenFn ?X)
                        (possesses ?A ?V)))))))))
*/
%% no translation to TPTP available.

/*
(instance HostageTaking SetOrClass)
*/
fof(a4000,axiom,s_instance(s_HostageTaking, s_SetOrClass)).

/*
(subclass HostageTaking UnilateralGetting)
*/
fof(a4001,axiom,s_subclass(s_HostageTaking, s_UnilateralGetting)).

/*
(forall (?X)
 (exists (?A)
  (and (instance ?A Entity)
       (=> (instance ?X HostageTaking)
        (and (instance ?A SentientAgent) (patient ?X ?A))))))
*/
fof(a4002,axiom,! [X] : (? [A] : ((s_instance(A, s_Entity) & (s_instance(X, s_HostageTaking) => (s_instance(A, s_SentientAgent) & s_patient(X, A))))))).

/*
(subclass IncendiaryDeviceAttack Combustion)
*/
fof(a4003,axiom,s_subclass(s_IncendiaryDeviceAttack, s_Combustion)).

/*
(instance IncendiaryDeviceAttack SetOrClass)
*/
fof(a4004,axiom,s_instance(s_IncendiaryDeviceAttack, s_SetOrClass)).

/*
(subclass IncendiaryDeviceAttack ViolentContest)
*/
fof(a4005,axiom,s_subclass(s_IncendiaryDeviceAttack, s_ViolentContest)).

/*
(instance Infiltration SetOrClass)
*/
fof(a4006,axiom,s_instance(s_Infiltration, s_SetOrClass)).

/*
(subclass Infiltration JoiningAnOrganization)
*/
fof(a4007,axiom,s_subclass(s_Infiltration, s_JoiningAnOrganization)).

/*
(instance Kidnapping SetOrClass)
*/
fof(a4008,axiom,s_instance(s_Kidnapping, s_SetOrClass)).

/*
(instance Robbing SetOrClass)
*/
fof(a4009,axiom,s_instance(s_Robbing, s_SetOrClass)).

/*
(subclass Kidnapping Robbing)
*/
fof(a4010,axiom,s_subclass(s_Kidnapping, s_Robbing)).

/*
(forall (?X ?N ?G)
 (=> (instance ?N Integer)
  (=>
   (and (instance ?X Kidnapping)
        (and (instance ?G GroupOfPeople)
             (and (memberCount ?G ?N) (patient ?X ?G))))
   (lessThan ?N 3))))
*/
fof(a4011,axiom,! [X,N,G] : ((s_instance(N, s_Integer) => ((s_instance(X, s_Kidnapping) & (s_instance(G, s_GroupOfPeople) & (s_memberCount(G, N) & s_patient(X, G)))) => less(N, 3))))).

/*
(forall (?X)
 (exists (?A ?LOC1 ?LOC2)
  (and (and (instance ?LOC2 Object) (instance ?LOC1 Object)
            (instance ?A Physical))
       (=> (instance ?X Kidnapping)
        (and (instance ?A SentientAgent)
             (and (instance ?LOC1 GeographicArea)
                  (and (instance ?LOC2 GeographicArea)
                       (and (not (equal ?LOC1 ?LOC2))
                            (and (holdsDuring
                                  (ImmediatePastFn (WhenFn ?X))
                                  (located ?A ?LOC1))
                                 (holdsDuring
                                  (WhenFn ?X)
                                  (located ?A ?LOC2)))))))))))
*/
%% no translation to TPTP available.

/*
(instance KnifeAttack SetOrClass)
*/
fof(a4012,axiom,s_instance(s_KnifeAttack, s_SetOrClass)).

/*
(subclass KnifeAttack ViolentContest)
*/
fof(a4013,axiom,s_subclass(s_KnifeAttack, s_ViolentContest)).

/*
(instance Knife SetOrClass)
*/
fof(a4014,axiom,s_instance(s_Knife, s_SetOrClass)).

/*
(subclass Knife CuttingDevice)
*/
fof(a4015,axiom,s_subclass(s_Knife, s_CuttingDevice)).

/*
(subclass CuttingDevice Device)
*/
fof(a4016,axiom,s_subclass(s_CuttingDevice, s_Device)).

/*
(forall (?X)
 (=> (instance ?X CuttingDevice) (capability Cutting ?X instrument)))
*/
fof(a4017,axiom,! [X] : ((s_instance(X, s_CuttingDevice) => s_capability(s_Cutting, X, s_instrument_m)))).

/*
(forall (?X)
 (exists (?HG)
  (and (instance ?HG Object)
       (=> (instance ?X KnifeAttack)
        (and (instance ?HG Knife) (instrument ?X ?HG))))))
*/
fof(a4018,axiom,! [X] : (? [HG] : ((s_instance(HG, s_Object) & (s_instance(X, s_KnifeAttack) => (s_instance(HG, s_Knife) & s_instrument(X, HG))))))).

/*
(instance Blade SetOrClass)
*/
fof(a4019,axiom,s_instance(s_Blade, s_SetOrClass)).

/*
(instance CuttingDevice SetOrClass)
*/
fof(a4020,axiom,s_instance(s_CuttingDevice, s_SetOrClass)).

/*
(subclass Blade CuttingDevice)
*/
fof(a4021,axiom,s_subclass(s_Blade, s_CuttingDevice)).

/*
(forall (?B)
 (exists (?CD)
  (and (instance ?CD Object)
       (=> (instance ?B Blade)
        (and (instance ?CD CuttingDevice) (part ?B ?CD))))))
*/
fof(a4022,axiom,! [B] : (? [CD] : ((s_instance(CD, s_Object) & (s_instance(B, s_Blade) => (s_instance(CD, s_CuttingDevice) & s_part(B, CD))))))).

/*
(forall (?OBJ ?B ?CUT)
 (=>
  (and (instance ?B Blade)
       (and (instance ?CUT Cutting)
            (and (instance ?OBJ Object)
                 (and (instrument ?CUT ?B) (patient ?CUT ?OBJ)))))
  (meetsSpatially ?B ?OBJ)))
*/
fof(a4023,axiom,! [OBJ,B,CUT] : (((s_instance(B, s_Blade) & (s_instance(CUT, s_Cutting) & (s_instance(OBJ, s_Object) & (s_instrument(CUT, B) & s_patient(CUT, OBJ))))) => s_meetsSpatially(B, OBJ)))).

/*
(instance LetterBombAttack SetOrClass)
*/
fof(a4024,axiom,s_instance(s_LetterBombAttack, s_SetOrClass)).

/*
(subclass LetterBombAttack Bombing)
*/
fof(a4025,axiom,s_subclass(s_LetterBombAttack, s_Bombing)).

/*
(instance Lynching SetOrClass)
*/
fof(a4026,axiom,s_instance(s_Lynching, s_SetOrClass)).

/*
(subclass Lynching Killing)
*/
fof(a4027,axiom,s_subclass(s_Lynching, s_Killing)).

/*
(instance MortarAttack SetOrClass)
*/
fof(a4028,axiom,s_instance(s_MortarAttack, s_SetOrClass)).

/*
(subclass MortarAttack Bombing)
*/
fof(a4029,axiom,s_subclass(s_MortarAttack, s_Bombing)).

/*
(instance Mortar SetOrClass)
*/
fof(a4030,axiom,s_instance(s_Mortar, s_SetOrClass)).

/*
(subclass Mortar Weapon)
*/
fof(a4031,axiom,s_subclass(s_Mortar, s_Weapon)).

/*
(forall (?X)
 (exists (?MA)
  (and (instance ?MA Object)
       (=> (instance ?X MortarAttack)
        (and (instance ?MA Mortar) (instrument ?X ?MA))))))
*/
fof(a4032,axiom,! [X] : (? [MA] : ((s_instance(MA, s_Object) & (s_instance(X, s_MortarAttack) => (s_instance(MA, s_Mortar) & s_instrument(X, MA))))))).

/*
(instance RocketMissileAttack SetOrClass)
*/
fof(a4033,axiom,s_instance(s_RocketMissileAttack, s_SetOrClass)).

/*
(subclass RocketMissileAttack Bombing)
*/
fof(a4034,axiom,s_subclass(s_RocketMissileAttack, s_Bombing)).

/*
(instance Rocket SetOrClass)
*/
fof(a4035,axiom,s_instance(s_Rocket, s_SetOrClass)).

/*
(instance Projectile SetOrClass)
*/
fof(a4036,axiom,s_instance(s_Projectile, s_SetOrClass)).

/*
(subclass Rocket Projectile)
*/
fof(a4037,axiom,s_subclass(s_Rocket, s_Projectile)).

/*
(instance Stoning SetOrClass)
*/
fof(a4038,axiom,s_instance(s_Stoning, s_SetOrClass)).

/*
(subclass Stoning ViolentContest)
*/
fof(a4039,axiom,s_subclass(s_Stoning, s_ViolentContest)).

/*
(forall (?X)
 (exists (?ST)
  (and (instance ?ST Object)
       (=> (instance ?X Stoning)
        (and (instance ?ST Rock) (instrument ?X ?ST))))))
*/
fof(a4040,axiom,! [X] : (? [ST] : ((s_instance(ST, s_Object) & (s_instance(X, s_Stoning) => (s_instance(ST, s_Rock) & s_instrument(X, ST))))))).

/*
(instance Bombing SetOrClass)
*/
fof(a4041,axiom,s_instance(s_Bombing, s_SetOrClass)).

/*
(subclass SuicideBombing Bombing)
*/
fof(a4042,axiom,s_subclass(s_SuicideBombing, s_Bombing)).

/*
(instance SuicideBombing SetOrClass)
*/
fof(a4043,axiom,s_instance(s_SuicideBombing, s_SetOrClass)).

/*
(subclass SuicideBombing Killing)
*/
fof(a4044,axiom,s_subclass(s_SuicideBombing, s_Killing)).

/*
(forall (?X)
 (exists (?A)
  (and (instance ?A Agent)
       (=> (instance ?X SuicideBombing)
        (and (agent ?X ?A)
             (holdsDuring (FutureFn (WhenFn ?X))
              (attribute ?A Dead)))))))
*/
%% no translation to TPTP available.

/*
(forall (?P ?X)
 (=> (instance ?P CognitiveAgent)
  (=> (and (instance ?X SuicideBombing) (agent ?X ?P))
   (believes ?P
    (holdsDuring (FutureFn (WhenFn ?X)) (attribute ?P Dead))))))
*/
%% no translation to TPTP available.

/*
(instance Vandalism SetOrClass)
*/
fof(a4045,axiom,s_instance(s_Vandalism, s_SetOrClass)).

/*
(subclass Vandalism Destruction)
*/
fof(a4046,axiom,s_subclass(s_Vandalism, s_Destruction)).

/*
(forall (?X)
 (forall (?A)
  (=> (instance ?A Entity)
   (=> (instance ?X Vandalism)
    (not (and (instance ?A Agent) (patient ?X ?A)))))))
*/
fof(a4047,axiom,! [X] : (! [A] : ((s_instance(A, s_Entity) => (s_instance(X, s_Vandalism) => (~ (s_instance(A, s_Agent) & s_patient(X, A)))))))).

/*
(instance VehicleAttack SetOrClass)
*/
fof(a4048,axiom,s_instance(s_VehicleAttack, s_SetOrClass)).

/*
(subclass VehicleAttack ViolentContest)
*/
fof(a4049,axiom,s_subclass(s_VehicleAttack, s_ViolentContest)).

/*
(forall (?X)
 (exists (?V)
  (and (instance ?V Object)
       (=> (instance ?X VehicleAttack)
        (and (instance ?V TransportationDevice) (instrument ?X ?V))))))
*/
fof(a4050,axiom,! [X] : (? [V] : ((s_instance(V, s_Object) & (s_instance(X, s_VehicleAttack) => (s_instance(V, s_TransportationDevice) & s_instrument(X, V))))))).

/*
(instance BusinessPerson OccupationalRole)
*/
fof(a4051,axiom,s_instance(s_BusinessPerson, s_OccupationalRole)).

/*
(subAttribute BusinessExecutive BusinessPerson)
*/
fof(a4052,axiom,s_subAttribute(s_BusinessExecutive, s_BusinessPerson)).

/*
(forall (?X)
 (exists (?BUSINESS ?MANAGE)
  (and (and (instance ?MANAGE Process) (instance ?BUSINESS Entity))
       (=> (instance ?X Agent)
        (=> (attribute ?X BusinessExecutive)
         (and (instance ?MANAGE Managing)
              (and (instance ?BUSINESS Organization)
                   (and (patient ?MANAGE ?BUSINESS)
                        (agent ?MANAGE ?X)))))))))
*/
fof(a4053,axiom,! [X] : (? [BUSINESS,MANAGE] : (((s_instance(MANAGE, s_Process) & s_instance(BUSINESS, s_Entity)) & (s_instance(X, s_Agent) => (s_attribute(X, s_BusinessExecutive) => (s_instance(MANAGE, s_Managing) & (s_instance(BUSINESS, s_Organization) & (s_patient(MANAGE, BUSINESS) & s_agent(MANAGE, X)))))))))).

/*
(instance Celebrity SocialRole)
*/
fof(a4054,axiom,s_instance(s_Celebrity, s_SocialRole)).

/*
(forall (?X ?A)
 (=> (and (instance ?A SymbolicString) (instance ?X Object))
  (=> (attribute ?X Celebrity)
   (greaterThan
    (CardinalityFn (KappaFn ?A (knows ?A (exists (?P) (equal ?P ?X)))))
    1000))))
*/
%% no translation to TPTP available.

/*
(instance Knight SocialRole)
*/
fof(a4055,axiom,s_instance(s_Knight, s_SocialRole)).

/*
(instance Musician SetOrClass)
*/
fof(a4056,axiom,s_instance(s_Musician, s_SetOrClass)).

/*
(instance ArtisticOccupation SetOrClass)
*/
fof(a4057,axiom,s_instance(s_ArtisticOccupation, s_SetOrClass)).

/*
(subclass Musician ArtisticOccupation)
*/
fof(a4058,axiom,s_subclass(s_Musician, s_ArtisticOccupation)).

/*
(forall (?M ?X)
 (=> (instance ?X Agent)
  (=> (and (attribute ?X ?M) (instance ?M Musician))
   (hasSkill MusicalPerformance ?X))))
*/
fof(a4059,axiom,! [M,X] : ((s_instance(X, s_Agent) => ((s_attribute(X, M) & s_instance(M, s_Musician)) => s_hasSkill(s_MusicalPerformance, X))))).

/*
(instance Veteran SocialRole)
*/
fof(a4060,axiom,s_instance(s_Veteran, s_SocialRole)).

/*
(forall (?H ?T1)
 (exists (?T2)
  (and (instance ?T2 TimePosition)
       (=>
        (and (instance ?H Object) (instance ?T1 Physical)
             (instance ?T1 TimePosition))
        (=> (holdsDuring ?T1 (attribute ?H Veteran))
         (and (temporalPart ?T2 (PastFn (WhenFn ?T1)))
              (and (holdsDuring ?T2 (attribute ?H Soldier))
                   (not (holdsDuring ?T1 (attribute ?H Soldier))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Road Region)
*/
fof(a4061,axiom,s_subclass(s_Road, s_Region)).

/*
(instance Road SetOrClass)
*/
fof(a4062,axiom,s_instance(s_Road, s_SetOrClass)).

/*
(subclass Road Roadway)
*/
fof(a4063,axiom,s_subclass(s_Road, s_Roadway)).

/*
(forall (?X)
 (=> (instance ?X Road)
  (hasPurpose ?X
   (exists (?EV ?VEH)
    (and (instance ?EV Transportation)
         (and (eventLocated ?EV ?X)
              (and (instance ?VEH LandVehicle)
                   (instrument ?EV ?VEH))))))))
*/
%% no translation to TPTP available.

/*
(contraryAttribute2 Civilian MilitaryPerson)
*/
fof(a4064,axiom,s_contraryAttribute2(s_Civilian, s_MilitaryPerson)).

/*
(subclass OccupationalRole Position)
*/
fof(a4065,axiom,s_subclass(s_OccupationalRole, s_Position)).

/*
(instance Civilian SocialRole)
*/
fof(a4066,axiom,s_instance(s_Civilian, s_SocialRole)).

/*
(forall (?X ?T1)
 (=> (and (instance ?T1 TimePosition) (instance ?X Object))
  (=> (holdsDuring ?T1 (attribute ?X Civilian))
   (holdsDuring ?T1 (not (attribute ?X MilitaryPerson))))))
*/
%% no translation to TPTP available.

/*
(instance Widowed SocialRole)
*/
fof(a4067,axiom,s_instance(s_Widowed, s_SocialRole)).

/*
(forall (?P ?NOW)
 (exists (?BEFORE ?SPOUSE)
  (forall (?OTHER)
   (=> (instance ?OTHER Human)
    (and (and (instance ?SPOUSE Human) (instance ?BEFORE TimeInterval))
         (=> (and (instance ?NOW TimeInterval) (instance ?P Human))
          (=> (holdsDuring ?NOW (attribute ?P Widowed))
           (and (and (earlier ?BEFORE ?NOW)
                     (and (holdsDuring ?BEFORE (spouse ?SPOUSE ?P))
                          (holdsDuring ?NOW (attribute ?SPOUSE Dead))))
                (not (holdsDuring ?NOW (spouse ?OTHER ?P)))))))))))
*/
%% no translation to TPTP available.

/*
(instance Convoy SetOrClass)
*/
fof(a4068,axiom,s_instance(s_Convoy, s_SetOrClass)).

/*
(subclass Convoy Collection)
*/
fof(a4069,axiom,s_subclass(s_Convoy, s_Collection)).

/*
(forall (?C)
 (exists (?V1 ?V2 ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?V2 Object)
            (instance ?V1 Object))
       (=> (instance ?C Convoy)
        (and (not (equal ?V1 ?V2))
             (and (instance ?V1 Vehicle)
                  (and (instance ?V2 Vehicle)
                       (and (instance ?TIME TimeInterval)
                            (and (temporalPart ?TIME (WhenFn ?C))
                                 (holdsDuring
                                  ?TIME
                                  (and
                                   (member ?V1 ?C)
                                   (member ?V2 ?C))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?C ?VEH)
 (exists (?DRIVE)
  (and (instance ?DRIVE Process)
       (=> (instance ?VEH Object)
        (=> (and (instance ?C Convoy) (member ?VEH ?C))
         (and (instance ?DRIVE Driving)
              (and (overlapsTemporally (WhenFn ?DRIVE) (WhenFn ?C))
                   (patient ?DRIVE ?VEH))))))))
*/
fof(a4070,axiom,! [C,VEH] : (? [DRIVE] : ((s_instance(DRIVE, s_Process) & (s_instance(VEH, s_Object) => ((s_instance(C, s_Convoy) & s_member(VEH, C)) => (s_instance(DRIVE, s_Driving) & (s_overlapsTemporally(s_WhenFn(DRIVE), s_WhenFn(C)) & s_patient(DRIVE, VEH))))))))).

/*
(forall (?C) (=> (instance ?C Convoy) (attribute ?C LineFormation)))
*/
fof(a4071,axiom,! [C] : ((s_instance(C, s_Convoy) => s_attribute(C, s_LineFormation)))).

/*
(instance Diplomat OccupationalRole)
*/
fof(a4072,axiom,s_instance(s_Diplomat, s_OccupationalRole)).

/*
(subAttribute Diplomat GovernmentPerson)
*/
fof(a4073,axiom,s_subAttribute(s_Diplomat, s_GovernmentPerson)).

/*
(instance Dissident SocialRole)
*/
fof(a4074,axiom,s_instance(s_Dissident, s_SocialRole)).

/*
(instance EmbassyBuilding SetOrClass)
*/
fof(a4075,axiom,s_instance(s_EmbassyBuilding, s_SetOrClass)).

/*
(subclass EmbassyBuilding GovernmentBuilding)
*/
fof(a4076,axiom,s_subclass(s_EmbassyBuilding, s_GovernmentBuilding)).

/*
(forall (?X)
 (exists (?EGOV ?OTHERGOV)
  (and (and (instance ?OTHERGOV Object) (instance ?EGOV Agent))
       (=> (instance ?X EmbassyBuilding)
        (and (instance ?EGOV Nation)
             (and (instance ?OTHERGOV Nation)
                  (and (not (equal ?EGOV ?OTHERGOV))
                       (and (possesses ?EGOV ?X)
                            (located ?X ?OTHERGOV)))))))))
*/
fof(a4077,axiom,! [X] : (? [EGOV,OTHERGOV] : (((s_instance(OTHERGOV, s_Object) & s_instance(EGOV, s_Agent)) & (s_instance(X, s_EmbassyBuilding) => (s_instance(EGOV, s_Nation) & (s_instance(OTHERGOV, s_Nation) & ((~ (EGOV = OTHERGOV)) & (s_possesses(EGOV, X) & s_located(X, OTHERGOV)))))))))).

/*
(instance EntertainmentBuilding SetOrClass)
*/
fof(a4078,axiom,s_instance(s_EntertainmentBuilding, s_SetOrClass)).

/*
(subclass EntertainmentBuilding Building)
*/
fof(a4079,axiom,s_subclass(s_EntertainmentBuilding, s_Building)).

/*
(forall (?BUILDING)
 (=> (instance ?BUILDING EntertainmentBuilding)
  (hasPurpose ?BUILDING
   (exists (?REC)
    (and (instance ?REC RecreationOrExercise)
         (eventLocated ?REC ?BUILDING))))))
*/
%% no translation to TPTP available.

/*
(instance GovernmentBuilding SetOrClass)
*/
fof(a4080,axiom,s_instance(s_GovernmentBuilding, s_SetOrClass)).

/*
(subclass GovernmentBuilding Building)
*/
fof(a4081,axiom,s_subclass(s_GovernmentBuilding, s_Building)).

/*
(forall (?X)
 (exists (?G)
  (and (instance ?G Agent)
       (=> (instance ?X GovernmentBuilding)
        (and (instance ?G Government) (possesses ?G ?X))))))
*/
fof(a4082,axiom,! [X] : (? [G] : ((s_instance(G, s_Agent) & (s_instance(X, s_GovernmentBuilding) => (s_instance(G, s_Government) & s_possesses(G, X))))))).

/*
(instance GovernmentPerson OccupationalRole)
*/
fof(a4083,axiom,s_instance(s_GovernmentPerson, s_OccupationalRole)).

/*
(forall (?X ?T1)
 (exists (?GOV)
  (and (instance ?GOV Organization)
       (=>
        (and (instance ?T1 TimePosition) (instance ?X CognitiveAgent))
        (=> (holdsDuring ?T1 (attribute ?X GovernmentPerson))
         (and (instance ?GOV Government)
              (holdsDuring ?T1 (employs ?GOV ?X))))))))
*/
%% no translation to TPTP available.

/*
(subclass Renting FinancialTransaction)
*/
fof(a4084,axiom,s_subclass(s_Renting, s_FinancialTransaction)).

/*
(instance Renting SetOrClass)
*/
fof(a4085,axiom,s_instance(s_Renting, s_SetOrClass)).

/*
(subclass Renting Borrowing)
*/
fof(a4086,axiom,s_subclass(s_Renting, s_Borrowing)).

/*
(forall (?O ?A ?R)
 (=> (and (instance ?O Agent) (instance ?A Agent))
  (=> (and (instance ?R Renting) (and (agent ?R ?A) (patient ?R ?O)))
   (holdsDuring (WhenFn ?R) (modalAttribute (uses ?A ?O) Permission)))))
*/
%% no translation to TPTP available.

/*
(instance Marketplace SetOrClass)
*/
fof(a4087,axiom,s_instance(s_Marketplace, s_SetOrClass)).

/*
(subclass Marketplace GeographicArea)
*/
fof(a4088,axiom,s_subclass(s_Marketplace, s_GeographicArea)).

/*
(forall (?X)
 (=> (instance ?X Marketplace)
  (hasPurpose ?X
   (exists (?EV)
    (and (instance ?EV FinancialTransaction) (eventLocated ?EV ?X))))))
*/
%% no translation to TPTP available.

/*
(instance StoreOwner OccupationalRole)
*/
fof(a4089,axiom,s_instance(s_StoreOwner, s_OccupationalRole)).

/*
(subAttribute StoreOwner BusinessPerson)
*/
fof(a4090,axiom,s_subAttribute(s_StoreOwner, s_BusinessPerson)).

/*
(instance Militant SocialRole)
*/
fof(a4091,axiom,s_instance(s_Militant, s_SocialRole)).

/*
(instance MilitaryPerson OccupationalRole)
*/
fof(a4092,axiom,s_instance(s_MilitaryPerson, s_OccupationalRole)).

/*
(forall (?X ?T1)
 (exists (?ORG)
  (and (instance ?ORG Collection)
       (=> (and (instance ?T1 TimePosition) (instance ?X Object))
        (=> (holdsDuring ?T1 (attribute ?X MilitaryPerson))
         (and (instance ?ORG MilitaryOrganization)
              (holdsDuring ?T1 (member ?X ?ORG))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?ORG ?X)
 (=> (instance ?T1 TimePosition)
  (=>
   (and (instance ?ORG MilitaryOrganization)
        (and (holdsDuring ?T1 (member ?X ?ORG)) (instance ?X Human)))
   (holdsDuring ?T1 (attribute ?X MilitaryPerson)))))
*/
%% no translation to TPTP available.

/*
(instance OfficeBuilding SetOrClass)
*/
fof(a4093,axiom,s_instance(s_OfficeBuilding, s_SetOrClass)).

/*
(subclass OfficeBuilding Building)
*/
fof(a4094,axiom,s_subclass(s_OfficeBuilding, s_Building)).

/*
(instance PeaceKeepingMission SetOrClass)
*/
fof(a4095,axiom,s_instance(s_PeaceKeepingMission, s_SetOrClass)).

/*
(subclass PeaceKeepingMission MilitaryOrganization)
*/
fof(a4096,axiom,s_subclass(s_PeaceKeepingMission, s_MilitaryOrganization)).

/*
(instance PlaceOfWorship SetOrClass)
*/
fof(a4097,axiom,s_instance(s_PlaceOfWorship, s_SetOrClass)).

/*
(subclass PlaceOfWorship Building)
*/
fof(a4098,axiom,s_subclass(s_PlaceOfWorship, s_Building)).

/*
(forall (?X)
 (=> (instance ?X PlaceOfWorship)
  (hasPurpose ?X
   (exists (?EV)
    (and (instance ?EV ReligiousProcess) (eventLocated ?EV ?X))))))
*/
%% no translation to TPTP available.

/*
(instance PoliceFacility SetOrClass)
*/
fof(a4099,axiom,s_instance(s_PoliceFacility, s_SetOrClass)).

/*
(subclass PoliceFacility Building)
*/
fof(a4100,axiom,s_subclass(s_PoliceFacility, s_Building)).

/*
(instance OccupationalRole SetOrClass)
*/
fof(a4101,axiom,s_instance(s_OccupationalRole, s_SetOrClass)).

/*
(instance PolicePerson OccupationalRole)
*/
fof(a4102,axiom,s_instance(s_PolicePerson, s_OccupationalRole)).

/*
(subAttribute PolicePerson GovernmentPerson)
*/
fof(a4103,axiom,s_subAttribute(s_PolicePerson, s_GovernmentPerson)).

/*
(subAttribute PoliticalFigure Celebrity)
*/
fof(a4104,axiom,s_subAttribute(s_PoliticalFigure, s_Celebrity)).

/*
(forall (?X)
 (exists (?EV)
  (and (instance ?EV Process)
       (=> (instance ?X Agent)
        (=> (attribute ?X PoliticalFigure)
         (and (agent ?EV ?X) (instance ?EV PoliticalProcess)))))))
*/
fof(a4105,axiom,! [X] : (? [EV] : ((s_instance(EV, s_Process) & (s_instance(X, s_Agent) => (s_attribute(X, s_PoliticalFigure) => (s_agent(EV, X) & s_instance(EV, s_PoliticalProcess)))))))).

/*
(forall (?X)
 (exists (?GOV)
  (and (instance ?GOV Collection)
       (=> (instance ?X CognitiveAgent)
        (=> (attribute ?X PoliticalFigure)
         (and (instance ?GOV Government)
              (or (member ?X ?GOV) (desires ?X (member ?X ?GOV)))))))))
*/
%% no translation to TPTP available.

/*
(subAttribute ReligiousFigure Celebrity)
*/
fof(a4106,axiom,s_subAttribute(s_ReligiousFigure, s_Celebrity)).

/*
(instance RestaurantBuilding SetOrClass)
*/
fof(a4107,axiom,s_instance(s_RestaurantBuilding, s_SetOrClass)).

/*
(subclass RestaurantBuilding Building)
*/
fof(a4108,axiom,s_subclass(s_RestaurantBuilding, s_Building)).

/*
(forall (?X)
 (=> (instance ?X RestaurantBuilding)
  (hasPurpose ?X
   (exists (?OWN ?EMP ?EV ?P ?PAY)
    (and (employs ?OWN ?EMP)
         (and (possesses ?OWN ?X)
              (and (instance ?P Human)
                   (and (instance ?PAY FinancialTransaction)
                        (and (agent ?PAY ?P)
                             (and (patient ?PAY ?EMP)
                                  (and
                                   (confersRight ?EMP ?EV ?P)
                                   (and
                                    (instance ?EV Eating)
                                    (and
                                     (agent ?EV ?P)
                                     (eventLocated ?EV ?X))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance EducationalFacility SetOrClass)
*/
fof(a4109,axiom,s_instance(s_EducationalFacility, s_SetOrClass)).

/*
(subclass EducationalFacility StationaryArtifact)
*/
fof(a4110,axiom,s_subclass(s_EducationalFacility, s_StationaryArtifact)).

/*
(forall (?X)
 (exists (?ORG)
  (and (instance ?ORG Agent)
       (=> (instance ?X EducationalFacility)
        (and (instance ?ORG EducationalOrganization)
             (possesses ?ORG ?X))))))
*/
fof(a4111,axiom,! [X] : (? [ORG] : ((s_instance(ORG, s_Agent) & (s_instance(X, s_EducationalFacility) => (s_instance(ORG, s_EducationalOrganization) & s_possesses(ORG, X))))))).

/*
(forall (?X)
 (=> (instance ?X EducationalFacility)
  (hasPurpose ?X
   (exists (?EV)
    (and (instance ?EV EducationalProcess) (eventLocated ?EV ?X))))))
*/
%% no translation to TPTP available.

/*
(instance Student SocialRole)
*/
fof(a4112,axiom,s_instance(s_Student, s_SocialRole)).

/*
(forall (?X)
 (exists (?EV)
  (and (instance ?EV Process)
       (=> (instance ?X Object)
        (=> (attribute ?X Student)
         (and (instance ?EV EducationalProcess) (patient ?EV ?X)))))))
*/
fof(a4113,axiom,! [X] : (? [EV] : ((s_instance(EV, s_Process) & (s_instance(X, s_Object) => (s_attribute(X, s_Student) => (s_instance(EV, s_EducationalProcess) & s_patient(EV, X)))))))).

/*
(instance Subway SetOrClass)
*/
fof(a4114,axiom,s_instance(s_Subway, s_SetOrClass)).

/*
(subclass Subway Hole)
*/
fof(a4115,axiom,s_subclass(s_Subway, s_Hole)).

/*
(forall (?X)
 (exists (?SURF)
  (and (instance ?SURF SelfConnectedObject)
       (=> (instance ?X Subway)
        (and (surface ?SURF GeographicArea)
             (orientation ?X ?SURF Below))))))
*/
fof(a4116,axiom,! [X] : (? [SURF] : ((s_instance(SURF, s_SelfConnectedObject) & (s_instance(X, s_Subway) => (s_surface(SURF, s_GeographicArea) & s_orientation(X, SURF, s_Below))))))).

/*
(forall (?X)
 (=> (instance ?X Subway)
  (hasPurpose ?X
   (exists (?EV ?P)
    (and (instance ?EV Transportation)
         (and (instance ?P Human)
              (and (patient ?EV ?P) (eventLocated ?EV ?X))))))))
*/
%% no translation to TPTP available.

/*
(instance Tourist SocialRole)
*/
fof(a4117,axiom,s_instance(s_Tourist, s_SocialRole)).

/*
(instance TouristSite SetOrClass)
*/
fof(a4118,axiom,s_instance(s_TouristSite, s_SetOrClass)).

/*
(subclass TouristSite GeographicArea)
*/
fof(a4119,axiom,s_subclass(s_TouristSite, s_GeographicArea)).

/*
(instance TerroristOrganization SetOrClass)
*/
fof(a4120,axiom,s_instance(s_TerroristOrganization, s_SetOrClass)).

/*
(subclass TerroristOrganization PoliticalOrganization)
*/
fof(a4121,axiom,s_subclass(s_TerroristOrganization, s_PoliticalOrganization)).

/*
(forall (?X)
 (exists (?EV)
  (and (instance ?EV Process)
       (=> (instance ?X TerroristOrganization)
        (and (instance ?EV ViolentContest) (agent ?EV ?X))))))
*/
fof(a4122,axiom,! [X] : (? [EV] : ((s_instance(EV, s_Process) & (s_instance(X, s_TerroristOrganization) => (s_instance(EV, s_ViolentContest) & s_agent(EV, X))))))).

/*
(instance memberCount BinaryPredicate)
*/
fof(a4123,axiom,s_instance(s_memberCount_m, s_BinaryPredicate)).

/*
(forall (?NUM ?ORG ?MEM)
 (=>
  (and (instance ?MEM SymbolicString) (instance ?ORG Collection)
       (instance ?NUM Integer))
  (=> (memberCount ?ORG ?NUM)
   (equal ?NUM (CardinalityFn (KappaFn ?MEM (member ?MEM ?ORG)))))))
*/
%% no translation to TPTP available.

/*
(instance memberType BinaryPredicate)
*/
fof(a4124,axiom,s_instance(s_memberType_m, s_BinaryPredicate)).

/*
(forall (?MEMBER ?TYPE ?GROUP)
 (=>
  (and (instance ?GROUP Collection) (instance ?TYPE SetOrClass)
       (instance ?MEMBER Object))
  (=> (and (memberType ?GROUP ?TYPE) (member ?MEMBER ?GROUP))
   (instance ?MEMBER ?TYPE))))
*/
fof(a4125,axiom,! [MEMBER,TYPE,GROUP] : (((s_instance(GROUP, s_Collection) & s_instance(TYPE, s_SetOrClass) & s_instance(MEMBER, s_Object)) => ((s_memberType(GROUP, TYPE) & s_member(MEMBER, GROUP)) => s_instance(MEMBER, TYPE))))).

/*
(instance memberTypeCount TernaryPredicate)
*/
fof(a4126,axiom,s_instance(s_memberTypeCount_m, s_TernaryPredicate)).

/*
(forall (?GROUP ?NUMBER ?TYPE)
 (exists (?SUBGROUP)
  (and (instance ?SUBGROUP Collection)
       (=>
        (and (instance ?TYPE SetOrClass)
             (instance ?NUMBER NonnegativeInteger)
             (instance ?GROUP Collection))
        (=> (memberTypeCount ?GROUP ?TYPE ?NUMBER)
         (and (subCollection ?SUBGROUP ?GROUP)
              (and (memberCount ?SUBGROUP ?NUMBER)
                   (memberType ?SUBGROUP ?TYPE))))))))
*/
fof(a4127,axiom,! [GROUP,NUMBER,TYPE] : (? [SUBGROUP] : ((s_instance(SUBGROUP, s_Collection) & ((s_instance(TYPE, s_SetOrClass) & s_instance(NUMBER, s_NonnegativeInteger) & s_instance(GROUP, s_Collection)) => (s_memberTypeCount(GROUP, TYPE, NUMBER) => (s_subCollection(SUBGROUP, GROUP) & (s_memberCount(SUBGROUP, NUMBER) & s_memberType(SUBGROUP, TYPE))))))))).

/*
(forall (?NUMBER1 ?GROUP ?NUMBER2 ?TYPE)
 (=>
  (and (instance ?TYPE SetOrClass)
       (instance ?NUMBER2 NonnegativeInteger)
       (instance ?GROUP Collection) (instance ?NUMBER1 Integer))
  (=>
   (and (memberCount ?GROUP ?NUMBER1)
        (memberTypeCount ?GROUP ?TYPE ?NUMBER2))
   (greaterThanOrEqualTo ?NUMBER1 ?NUMBER2))))
*/
fof(a4128,axiom,! [NUMBER1,GROUP,NUMBER2,TYPE] : (((s_instance(TYPE, s_SetOrClass) & s_instance(NUMBER2, s_NonnegativeInteger) & s_instance(GROUP, s_Collection) & s_instance(NUMBER1, s_Integer)) => ((s_memberCount(GROUP, NUMBER1) & s_memberTypeCount(GROUP, TYPE, NUMBER2)) => s_greaterThanOrEqualTo(NUMBER1, NUMBER2))))).

/*
(forall (?GROUP ?NUMBER ?TYPE)
 (forall (?ITEM)
  (=> (instance ?ITEM Object)
   (=>
    (and (instance ?TYPE SetOrClass)
         (instance ?NUMBER NonnegativeInteger)
         (instance ?GROUP Collection))
    (=> (and (memberTypeCount ?GROUP ?TYPE ?NUMBER) (equal ?NUMBER 0))
     (not (and (instance ?ITEM ?TYPE) (member ?ITEM ?GROUP))))))))
*/
fof(a4129,axiom,! [GROUP,NUMBER,TYPE] : (! [ITEM] : ((s_instance(ITEM, s_Object) => ((s_instance(TYPE, s_SetOrClass) & s_instance(NUMBER, s_NonnegativeInteger) & s_instance(GROUP, s_Collection)) => ((s_memberTypeCount(GROUP, TYPE, NUMBER) & (NUMBER = 0)) => (~ (s_instance(ITEM, TYPE) & s_member(ITEM, GROUP))))))))).

/*
(instance memberAtTime TernaryPredicate)
*/
fof(a4130,axiom,s_instance(s_memberAtTime_m, s_TernaryPredicate)).

/*
(forall (?OBJ ?TIME ?COLLECTION)
 (=>
  (and (instance ?COLLECTION Collection) (instance ?TIME TimePosition)
       (instance ?OBJ SelfConnectedObject))
  (<=> (memberAtTime ?OBJ ?COLLECTION ?TIME)
   (holdsDuring ?TIME (member ?OBJ ?COLLECTION)))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?COLLECTION ?PLACE ?TIME)
 (=>
  (and (instance ?TIME TimePosition) (instance ?PLACE Object)
       (instance ?COLLECTION Collection)
       (instance ?OBJ SelfConnectedObject))
  (=>
   (and (locatedAtTime ?COLLECTION ?TIME ?PLACE)
        (memberAtTime ?OBJ ?COLLECTION ?TIME))
   (locatedAtTime ?OBJ ?TIME ?PLACE))))
*/
fof(a4131,axiom,! [OBJ,COLLECTION,PLACE,TIME] : (((s_instance(TIME, s_TimePosition) & s_instance(PLACE, s_Object) & s_instance(COLLECTION, s_Collection) & s_instance(OBJ, s_SelfConnectedObject)) => ((s_locatedAtTime(COLLECTION, TIME, PLACE) & s_memberAtTime(OBJ, COLLECTION, TIME)) => s_locatedAtTime(OBJ, TIME, PLACE))))).

/*
(instance inventory BinaryPredicate)
*/
fof(a4132,axiom,s_instance(s_inventory_m, s_BinaryPredicate)).

/*
(forall (?I ?C ?O)
 (=>
  (and (instance ?O ContentBearingObject) (instance ?C Collection)
       (instance ?I Object))
  (=> (and (inventory ?O ?C) (member ?I ?C)) (refers ?O ?I))))
*/
fof(a4133,axiom,! [I,C,O] : (((s_instance(O, s_ContentBearingObject) & s_instance(C, s_Collection) & s_instance(I, s_Object)) => ((s_inventory(O, C) & s_member(I, C)) => s_refers(O, I))))).

/*
(instance subordinateInOrganization TernaryPredicate)
*/
fof(a4134,axiom,s_instance(s_subordinateInOrganization_m, s_TernaryPredicate)).

/*
(forall (?ORG ?PERSON2 ?PERSON1)
 (=>
  (and (instance ?PERSON1 Human) (instance ?PERSON2 Human)
       (instance ?ORG Organization))
  (=> (subordinateInOrganization ?ORG ?PERSON1 ?PERSON2)
   (employs ?ORG ?PERSON1))))
*/
fof(a4135,axiom,! [ORG,PERSON2,PERSON1] : (((s_instance(PERSON1, s_Human) & s_instance(PERSON2, s_Human) & s_instance(ORG, s_Organization)) => (s_subordinateInOrganization(ORG, PERSON1, PERSON2) => s_employs(ORG, PERSON1))))).

/*
(forall (?ORG ?PERSON2 ?PERSON1)
 (=>
  (and (instance ?PERSON1 Human) (instance ?PERSON2 Human)
       (instance ?ORG Organization))
  (=> (subordinateInOrganization ?ORG ?PERSON1 ?PERSON2)
   (employs ?ORG ?PERSON2))))
*/
fof(a4136,axiom,! [ORG,PERSON2,PERSON1] : (((s_instance(PERSON1, s_Human) & s_instance(PERSON2, s_Human) & s_instance(ORG, s_Organization)) => (s_subordinateInOrganization(ORG, PERSON1, PERSON2) => s_employs(ORG, PERSON2))))).

/*
(instance subordinatePosition TernaryPredicate)
*/
fof(a4137,axiom,s_instance(s_subordinatePosition_m, s_TernaryPredicate)).

/*
(forall (?PERSON1 ?ORG ?ROLE2 ?ROLE1)
 (exists (?PERSON2)
  (and (instance ?PERSON2 Human)
       (=>
        (and (instance ?ROLE1 Position) (instance ?ROLE2 Position)
             (instance ?ORG Organization) (instance ?PERSON1 Human))
        (=>
         (and (subordinatePosition ?ORG ?ROLE1 ?ROLE2)
              (occupiesPosition ?PERSON1 ?ROLE1 ?ORG))
         (and (instance ?PERSON2 Human)
              (and (occupiesPosition ?PERSON2 ?ROLE2 ?ORG)
                   (subordinateInOrganization ?ORG ?PERSON1
                    ?PERSON2))))))))
*/
fof(a4138,axiom,! [PERSON1,ORG,ROLE2,ROLE1] : (? [PERSON2] : ((s_instance(PERSON2, s_Human) & ((s_instance(ROLE1, s_Position) & s_instance(ROLE2, s_Position) & s_instance(ORG, s_Organization) & s_instance(PERSON1, s_Human)) => ((s_subordinatePosition(ORG, ROLE1, ROLE2) & s_occupiesPosition(PERSON1, ROLE1, ORG)) => (s_instance(PERSON2, s_Human) & (s_occupiesPosition(PERSON2, ROLE2, ORG) & s_subordinateInOrganization(ORG, PERSON1, PERSON2))))))))).

/*
(instance operator BinaryPredicate)
*/
fof(a4139,axiom,s_instance(s_operator_m, s_BinaryPredicate)).

/*
(instance operator AsymmetricRelation)
*/
fof(a4140,axiom,s_instance(s_operator_m, s_AsymmetricRelation)).

/*
(instance operator IrreflexiveRelation)
*/
fof(a4141,axiom,s_instance(s_operator_m, s_IrreflexiveRelation)).

/*
(subclass ClassificationScheme Proposition)
*/
fof(a4142,axiom,s_subclass(s_ClassificationScheme, s_Proposition)).

/*
(instance Taxonomy SetOrClass)
*/
fof(a4143,axiom,s_instance(s_Taxonomy, s_SetOrClass)).

/*
(subclass Taxonomy ClassificationScheme)
*/
fof(a4144,axiom,s_subclass(s_Taxonomy, s_ClassificationScheme)).

/*
(instance abstractPart PartialOrderingRelation)
*/
fof(a4145,axiom,s_instance(s_abstractPart_m, s_PartialOrderingRelation)).

/*
(instance abstractPart BinaryPredicate)
*/
fof(a4146,axiom,s_instance(s_abstractPart_m, s_BinaryPredicate)).

/*
(instance Ontology SetOrClass)
*/
fof(a4147,axiom,s_instance(s_Ontology, s_SetOrClass)).

/*
(instance ClassificationScheme SetOrClass)
*/
fof(a4148,axiom,s_instance(s_ClassificationScheme, s_SetOrClass)).

/*
(subclass Ontology ClassificationScheme)
*/
fof(a4149,axiom,s_subclass(s_Ontology, s_ClassificationScheme)).

/*
(forall (?ONT)
 (exists (?TAX)
  (and (instance ?TAX Abstract)
       (=> (instance ?ONT Ontology)
        (and (instance ?TAX Taxonomy) (abstractPart ?TAX ?ONT))))))
*/
fof(a4150,axiom,! [ONT] : (? [TAX] : ((s_instance(TAX, s_Abstract) & (s_instance(ONT, s_Ontology) => (s_instance(TAX, s_Taxonomy) & s_abstractPart(TAX, ONT))))))).

/*
(instance transported BinaryPredicate)
*/
fof(a4151,axiom,s_instance(s_transported_m, s_BinaryPredicate)).

/*
(instance transported AsymmetricRelation)
*/
fof(a4152,axiom,s_instance(s_transported_m, s_AsymmetricRelation)).

/*
(subrelation transported patient)
*/
fof(a4153,axiom,s_subrelation(s_transported_m, s_patient_m)).

/*
(instance transported CaseRole)
*/
fof(a4154,axiom,s_instance(s_transported_m, s_CaseRole)).

/*
(instance cargo BinaryPredicate)
*/
fof(a4155,axiom,s_instance(s_cargo_m, s_BinaryPredicate)).

/*
(instance cargo AsymmetricRelation)
*/
fof(a4156,axiom,s_instance(s_cargo_m, s_AsymmetricRelation)).

/*
(subrelation cargo transported)
*/
fof(a4157,axiom,s_subrelation(s_cargo_m, s_transported_m)).

/*
(instance cargo CaseRole)
*/
fof(a4158,axiom,s_instance(s_cargo_m, s_CaseRole)).

/*
(instance serviceProvider BinaryPredicate)
*/
fof(a4159,axiom,s_instance(s_serviceProvider_m, s_BinaryPredicate)).

/*
(instance serviceProvider AsymmetricRelation)
*/
fof(a4160,axiom,s_instance(s_serviceProvider_m, s_AsymmetricRelation)).

/*
(instance serviceProvider IntentionalRelation)
*/
fof(a4161,axiom,s_instance(s_serviceProvider_m, s_IntentionalRelation)).

/*
(subrelation serviceProvider agent)
*/
fof(a4162,axiom,s_subrelation(s_serviceProvider_m, s_agent_m)).

/*
(instance serviceProvider CaseRole)
*/
fof(a4163,axiom,s_instance(s_serviceProvider_m, s_CaseRole)).

/*
(instance serviceRecipient BinaryPredicate)
*/
fof(a4164,axiom,s_instance(s_serviceRecipient_m, s_BinaryPredicate)).

/*
(instance serviceRecipient AsymmetricRelation)
*/
fof(a4165,axiom,s_instance(s_serviceRecipient_m, s_AsymmetricRelation)).

/*
(instance serviceRecipient IntentionalRelation)
*/
fof(a4166,axiom,s_instance(s_serviceRecipient_m, s_IntentionalRelation)).

/*
(subrelation serviceRecipient experiencer)
*/
fof(a4167,axiom,s_subrelation(s_serviceRecipient_m, s_experiencer_m)).

/*
(instance serviceRecipient CaseRole)
*/
fof(a4168,axiom,s_instance(s_serviceRecipient_m, s_CaseRole)).

/*
(forall (?EVENT)
 (exists (?PROVIDER)
  (and (instance ?PROVIDER CognitiveAgent)
       (=> (instance ?EVENT ServiceProcess)
        (and (instance ?PROVIDER CognitiveAgent)
             (serviceProvider ?EVENT ?PROVIDER))))))
*/
fof(a4169,axiom,! [EVENT] : (? [PROVIDER] : ((s_instance(PROVIDER, s_CognitiveAgent) & (s_instance(EVENT, s_ServiceProcess) => (s_instance(PROVIDER, s_CognitiveAgent) & s_serviceProvider(EVENT, PROVIDER))))))).

/*
(forall (?EVENT)
 (exists (?RECEIVER)
  (and (instance ?RECEIVER CognitiveAgent)
       (=> (instance ?EVENT ServiceProcess)
        (and (instance ?RECEIVER CognitiveAgent)
             (serviceRecipient ?EVENT ?RECEIVER))))))
*/
fof(a4170,axiom,! [EVENT] : (? [RECEIVER] : ((s_instance(RECEIVER, s_CognitiveAgent) & (s_instance(EVENT, s_ServiceProcess) => (s_instance(RECEIVER, s_CognitiveAgent) & s_serviceRecipient(EVENT, RECEIVER))))))).

/*
(instance benefits BinaryPredicate)
*/
fof(a4171,axiom,s_instance(s_benefits_m, s_BinaryPredicate)).

/*
(instance benefits AsymmetricRelation)
*/
fof(a4172,axiom,s_instance(s_benefits_m, s_AsymmetricRelation)).

/*
(forall (?PROCESS-START ?PROCESS ?AGENT ?AGENT-END)
 (=>
  (and (instance ?AGENT-END TimePoint) (instance ?AGENT Agent)
       (instance ?PROCESS Process) (instance ?PROCESS-START TimePoint))
  (=>
   (and (equal ?PROCESS-START (BeginFn (WhenFn ?PROCESS)))
        (and (equal ?AGENT-END (EndFn (WhenFn ?AGENT)))
             (benefits ?PROCESS ?AGENT)))
   (before ?PROCESS-START ?AGENT-END))))
*/
fof(a4173,axiom,! [PROCESS_START,PROCESS,AGENT,AGENT_END] : (((s_instance(AGENT_END, s_TimePoint) & s_instance(AGENT, s_Agent) & s_instance(PROCESS, s_Process) & s_instance(PROCESS_START, s_TimePoint)) => (((PROCESS_START = s_BeginFn(s_WhenFn(PROCESS))) & ((AGENT_END = s_EndFn(s_WhenFn(AGENT))) & s_benefits(PROCESS, AGENT))) => s_before(PROCESS_START, AGENT_END))))).

/*
(instance areaOfResponsibility TernaryPredicate)
*/
fof(a4174,axiom,s_instance(s_areaOfResponsibility_m, s_TernaryPredicate)).

/*
(domainSubclass areaOfResponsibility 2 Process)
*/
fof(a4175,axiom,s_domainSubclass(s_areaOfResponsibility_m, 2, s_Process)).

/*
(instance friend BinaryPredicate)
*/
fof(a4176,axiom,s_instance(s_friend_m, s_BinaryPredicate)).

/*
(instance friend SymmetricRelation)
*/
fof(a4177,axiom,s_instance(s_friend_m, s_SymmetricRelation)).

/*
(instance friend IntentionalRelation)
*/
fof(a4178,axiom,s_instance(s_friend_m, s_IntentionalRelation)).

/*
(subrelation friend mutualAcquaintance)
*/
fof(a4179,axiom,s_subrelation(s_friend_m, s_mutualAcquaintance_m)).

/*
(instance coworker BinaryPredicate)
*/
fof(a4180,axiom,s_instance(s_coworker_m, s_BinaryPredicate)).

/*
(instance coworker SymmetricRelation)
*/
fof(a4181,axiom,s_instance(s_coworker_m, s_SymmetricRelation)).

/*
(subrelation coworker mutualAcquaintance)
*/
fof(a4182,axiom,s_subrelation(s_coworker_m, s_mutualAcquaintance_m)).

/*
(forall (?T1 ?H2 ?H1)
 (exists (?ORG)
  (and (instance ?ORG Organization)
       (=>
        (and (instance ?H1 Human) (instance ?H2 Human)
             (instance ?T1 TimePosition))
        (=> (holdsDuring ?T1 (coworker ?H1 ?H2))
         (and (instance ?ORG Organization)
              (holdsDuring ?T1
               (and (employs ?ORG ?H1) (employs ?ORG ?H2)))))))))
*/
%% no translation to TPTP available.

/*
(instance cohabitant BinaryPredicate)
*/
fof(a4183,axiom,s_instance(s_cohabitant_m, s_BinaryPredicate)).

/*
(instance cohabitant SymmetricRelation)
*/
fof(a4184,axiom,s_instance(s_cohabitant_m, s_SymmetricRelation)).

/*
(instance cohabitant IntentionalRelation)
*/
fof(a4185,axiom,s_instance(s_cohabitant_m, s_IntentionalRelation)).

/*
(subrelation cohabitant mutualAcquaintance)
*/
fof(a4186,axiom,s_subrelation(s_cohabitant_m, s_mutualAcquaintance_m)).

/*
(forall (?T1 ?H2 ?H1)
 (exists (?UNIT)
  (and (instance ?UNIT Object)
       (=>
        (and (instance ?H1 Collection) (instance ?H1 Human)
             (instance ?T1 TimePosition) (instance ?H2 Human)
             (instance ?H2 Collection))
        (=> (holdsDuring ?T1 (cohabitant ?H1 ?H2))
         (and (instance ?UNIT SocialUnit)
              (holdsDuring ?T1
               (and (member ?UNIT ?H1) (member ?UNIT ?H2)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?T1 ?H2 ?H1 ?UNIT)
 (=>
  (and (instance ?T1 TimePosition) (instance ?H2 Human)
       (instance ?H2 Collection) (instance ?H1 Collection)
       (instance ?H1 Human))
  (=>
   (and (instance ?UNIT SocialUnit)
        (holdsDuring ?T1 (and (member ?UNIT ?H1) (member ?UNIT ?H2))))
   (holdsDuring ?T1 (cohabitant ?H1 ?H2)))))
*/
%% no translation to TPTP available.

/*
(instance grandparent BinaryPredicate)
*/
fof(a4187,axiom,s_instance(s_grandparent_m, s_BinaryPredicate)).

/*
(instance grandparent AsymmetricRelation)
*/
fof(a4188,axiom,s_instance(s_grandparent_m, s_AsymmetricRelation)).

/*
(subrelation grandmother grandparent)
*/
fof(a4189,axiom,s_subrelation(s_grandmother_m, s_grandparent_m)).

/*
(instance grandmother BinaryPredicate)
*/
fof(a4190,axiom,s_instance(s_grandmother_m, s_BinaryPredicate)).

/*
(subrelation grandfather grandparent)
*/
fof(a4191,axiom,s_subrelation(s_grandfather_m, s_grandparent_m)).

/*
(instance grandfather BinaryPredicate)
*/
fof(a4192,axiom,s_instance(s_grandfather_m, s_BinaryPredicate)).

/*
(subrelation grandparent ancestor)
*/
fof(a4193,axiom,s_subrelation(s_grandparent_m, s_ancestor_m)).

/*
(forall (?PARENT ?CHILD)
 (=> (instance ?CHILD Organism)
  (=> (and (parent ?CHILD ?PARENT) (instance ?PARENT Man))
   (father ?CHILD ?PARENT))))
*/
fof(a4194,axiom,! [PARENT,CHILD] : ((s_instance(CHILD, s_Organism) => ((s_parent(CHILD, PARENT) & s_instance(PARENT, s_Man)) => s_father(CHILD, PARENT))))).

/*
(forall (?PARENT ?CHILD)
 (=> (instance ?PARENT Organism)
  (=> (and (parent ?CHILD ?PARENT) (instance ?CHILD Man))
   (son ?CHILD ?PARENT))))
*/
fof(a4195,axiom,! [PARENT,CHILD] : ((s_instance(PARENT, s_Organism) => ((s_parent(CHILD, PARENT) & s_instance(CHILD, s_Man)) => s_son(CHILD, PARENT))))).

/*
(forall (?PARENT ?CHILD)
 (=> (instance ?PARENT Organism)
  (=> (and (parent ?CHILD ?PARENT) (instance ?CHILD Woman))
   (daughter ?CHILD ?PARENT))))
*/
fof(a4196,axiom,! [PARENT,CHILD] : ((s_instance(PARENT, s_Organism) => ((s_parent(CHILD, PARENT) & s_instance(CHILD, s_Woman)) => s_daughter(CHILD, PARENT))))).

/*
(subrelation aunt familyRelation)
*/
fof(a4197,axiom,s_subrelation(s_aunt_m, s_familyRelation_m)).

/*
(instance aunt BinaryPredicate)
*/
fof(a4198,axiom,s_instance(s_aunt_m, s_BinaryPredicate)).

/*
(forall (?H ?A)
 (forall (?P)
  (exists (?g2139)
   (and (instance ?g2139 Human)
        (=> (instance ?P Human)
         (=> (and (instance ?A Woman) (instance ?H Human))
          (and (=> (aunt ?A ?H)
                (and (sister ?A ?g2139) (parent ?H ?g2139)))
               (=> (and (sister ?A ?P) (parent ?H ?P))
                (aunt ?A ?H)))))))))
*/
fof(a4199,axiom,! [H,A] : (! [P] : (? [G2139] : ((s_instance(G2139, s_Human) & (s_instance(P, s_Human) => ((s_instance(A, s_Woman) & s_instance(H, s_Human)) => ((s_aunt(A, H) => (s_sister(A, G2139) & s_parent(H, G2139))) & ((s_sister(A, P) & s_parent(H, P)) => s_aunt(A, H)))))))))).

/*
(subrelation cousin familyRelation)
*/
fof(a4200,axiom,s_subrelation(s_cousin_m, s_familyRelation_m)).

/*
(instance cousin BinaryPredicate)
*/
fof(a4201,axiom,s_instance(s_cousin_m, s_BinaryPredicate)).

/*
(forall (?P2 ?P1)
 (forall (?G1 ?G2)
  (exists (?M ?F)
   (exists (?g2151 ?g2152)
    (forall (?g2157 ?g2158)
     (=> (and (instance ?g2158 Organism) (instance ?g2157 Organism))
      (and (and (instance ?g2152 Man) (instance ?g2151 Woman))
           (and (and (instance ?F Organism) (instance ?M Organism))
                (=> (and (instance ?G2 Man) (instance ?G1 Woman))
                 (=> (and (instance ?P1 Human) (instance ?P2 Human))
                  (and (=> (cousin ?P1 ?P2)
                        (and (and (grandmother ?P1 ?g2151)
                                  (and
                                   (grandfather ?P1 ?g2152)
                                   (and
                                    (grandmother ?P2 ?g2151)
                                    (grandfather ?P2 ?g2152))))
                             (not (and
                                   (mother ?P1 ?g2157)
                                   (and
                                    (father ?P1 ?g2158)
                                    (and
                                     (mother ?P2 ?g2157)
                                     (father ?P2 ?g2158)))))))
                       (=>
                        (and (and (grandmother ?P1 ?G1)
                                  (and
                                   (grandfather ?P1 ?G2)
                                   (and
                                    (grandmother ?P2 ?G1)
                                    (grandfather ?P2 ?G2))))
                             (not (and
                                   (mother ?P1 ?M)
                                   (and
                                    (father ?P1 ?F)
                                    (and
                                     (mother ?P2 ?M)
                                     (father ?P2 ?F))))))
                        (cousin ?P1 ?P2)))))))))))))
*/
fof(a4202,axiom,! [P2,P1] : (! [G1,G2] : (? [M,F] : (? [G2151,G2152] : (! [G2157,G2158] : (((s_instance(G2158, s_Organism) & s_instance(G2157, s_Organism)) => ((s_instance(G2152, s_Man) & s_instance(G2151, s_Woman)) & ((s_instance(F, s_Organism) & s_instance(M, s_Organism)) & ((s_instance(G2, s_Man) & s_instance(G1, s_Woman)) => ((s_instance(P1, s_Human) & s_instance(P2, s_Human)) => ((s_cousin(P1, P2) => ((s_grandmother(P1, G2151) & (s_grandfather(P1, G2152) & (s_grandmother(P2, G2151) & s_grandfather(P2, G2152)))) & (~ (s_mother(P1, G2157) & (s_father(P1, G2158) & (s_mother(P2, G2157) & s_father(P2, G2158))))))) & (((s_grandmother(P1, G1) & (s_grandfather(P1, G2) & (s_grandmother(P2, G1) & s_grandfather(P2, G2)))) & (~ (s_mother(P1, M) & (s_father(P1, F) & (s_mother(P2, M) & s_father(P2, F)))))) => s_cousin(P1, P2)))))))))))))).

/*
(subrelation grandfather familyRelation)
*/
fof(a4203,axiom,s_subrelation(s_grandfather_m, s_familyRelation_m)).

/*
(forall (?P ?H)
 (exists (?C)
  (and (instance ?C Organism)
       (=> (and (instance ?H Human) (instance ?P Man))
        (=> (grandfather ?H ?P) (and (father ?C ?P) (parent ?H ?C)))))))
*/
fof(a4204,axiom,! [P,H] : (? [C] : ((s_instance(C, s_Organism) & ((s_instance(H, s_Human) & s_instance(P, s_Man)) => (s_grandfather(H, P) => (s_father(C, P) & s_parent(H, C)))))))).

/*
(subrelation grandmother familyRelation)
*/
fof(a4205,axiom,s_subrelation(s_grandmother_m, s_familyRelation_m)).

/*
(forall (?P ?H)
 (exists (?C)
  (and (instance ?C Organism)
       (=> (and (instance ?H Human) (instance ?P Woman))
        (=> (grandmother ?H ?P) (and (mother ?C ?P) (parent ?H ?C)))))))
*/
fof(a4206,axiom,! [P,H] : (? [C] : ((s_instance(C, s_Organism) & ((s_instance(H, s_Human) & s_instance(P, s_Woman)) => (s_grandmother(H, P) => (s_mother(C, P) & s_parent(H, C)))))))).

/*
(subrelation nephew familyRelation)
*/
fof(a4207,axiom,s_subrelation(s_nephew_m, s_familyRelation_m)).

/*
(instance nephew BinaryPredicate)
*/
fof(a4208,axiom,s_instance(s_nephew_m, s_BinaryPredicate)).

/*
(forall (?H ?N)
 (forall (?S)
  (exists (?g2167)
   (and (instance ?g2167 Organism)
        (=> (instance ?S Organism)
         (=> (and (instance ?N Man) (instance ?H Human))
          (and (=> (nephew ?N ?H)
                (and (sibling ?g2167 ?H) (son ?N ?g2167)))
               (=> (and (sibling ?S ?H) (son ?N ?S))
                (nephew ?N ?H)))))))))
*/
fof(a4209,axiom,! [H,N] : (! [S] : (? [G2167] : ((s_instance(G2167, s_Organism) & (s_instance(S, s_Organism) => ((s_instance(N, s_Man) & s_instance(H, s_Human)) => ((s_nephew(N, H) => (s_sibling(G2167, H) & s_son(N, G2167))) & ((s_sibling(S, H) & s_son(N, S)) => s_nephew(N, H)))))))))).

/*
(subrelation niece familyRelation)
*/
fof(a4210,axiom,s_subrelation(s_niece_m, s_familyRelation_m)).

/*
(instance niece BinaryPredicate)
*/
fof(a4211,axiom,s_instance(s_niece_m, s_BinaryPredicate)).

/*
(forall (?H ?N)
 (forall (?S)
  (exists (?g2171)
   (and (instance ?g2171 Organism)
        (=> (instance ?S Organism)
         (=> (and (instance ?N Woman) (instance ?H Human))
          (and (=> (niece ?N ?H)
                (and (sibling ?g2171 ?H) (daughter ?N ?g2171)))
               (=> (and (sibling ?S ?H) (daughter ?N ?S))
                (niece ?N ?H)))))))))
*/
fof(a4212,axiom,! [H,N] : (! [S] : (? [G2171] : ((s_instance(G2171, s_Organism) & (s_instance(S, s_Organism) => ((s_instance(N, s_Woman) & s_instance(H, s_Human)) => ((s_niece(N, H) => (s_sibling(G2171, H) & s_daughter(N, G2171))) & ((s_sibling(S, H) & s_daughter(N, S)) => s_niece(N, H)))))))))).

/*
(subrelation uncle familyRelation)
*/
fof(a4213,axiom,s_subrelation(s_uncle_m, s_familyRelation_m)).

/*
(instance uncle BinaryPredicate)
*/
fof(a4214,axiom,s_instance(s_uncle_m, s_BinaryPredicate)).

/*
(forall (?H ?U)
 (forall (?P)
  (exists (?g2175)
   (and (instance ?g2175 Human)
        (=> (instance ?P Human)
         (=> (and (instance ?U Man) (instance ?H Human))
          (and (=> (uncle ?U ?H)
                (and (brother ?U ?g2175) (parent ?H ?g2175)))
               (=> (and (brother ?U ?P) (parent ?H ?P))
                (uncle ?U ?H)))))))))
*/
fof(a4215,axiom,! [H,U] : (! [P] : (? [G2175] : ((s_instance(G2175, s_Human) & (s_instance(P, s_Human) => ((s_instance(U, s_Man) & s_instance(H, s_Human)) => ((s_uncle(U, H) => (s_brother(U, G2175) & s_parent(H, G2175))) & ((s_brother(U, P) & s_parent(H, P)) => s_uncle(U, H)))))))))).

/*
(subrelation stepfather legalRelation)
*/
fof(a4216,axiom,s_subrelation(s_stepfather_m, s_legalRelation_m)).

/*
(instance stepfather BinaryPredicate)
*/
fof(a4217,axiom,s_instance(s_stepfather_m, s_BinaryPredicate)).

/*
(forall (?F ?P)
 (forall (?M)
  (exists (?g2179)
   (and (instance ?g2179 Human)
        (=> (instance ?M Human)
         (=> (and (instance ?P Human) (instance ?F Man))
          (and (=> (stepfather ?P ?F)
                (and (mother ?P ?g2179)
                     (and (spouse ?F ?g2179) (not (father ?P ?F)))))
               (=>
                (and (mother ?P ?M)
                     (and (spouse ?F ?M) (not (father ?P ?F))))
                (stepfather ?P ?F)))))))))
*/
fof(a4218,axiom,! [F,P] : (! [M] : (? [G2179] : ((s_instance(G2179, s_Human) & (s_instance(M, s_Human) => ((s_instance(P, s_Human) & s_instance(F, s_Man)) => ((s_stepfather(P, F) => (s_mother(P, G2179) & (s_spouse(F, G2179) & (~ s_father(P, F))))) & ((s_mother(P, M) & (s_spouse(F, M) & (~ s_father(P, F)))) => s_stepfather(P, F)))))))))).

/*
(subrelation stepmother legalRelation)
*/
fof(a4219,axiom,s_subrelation(s_stepmother_m, s_legalRelation_m)).

/*
(instance stepmother BinaryPredicate)
*/
fof(a4220,axiom,s_instance(s_stepmother_m, s_BinaryPredicate)).

/*
(forall (?M ?P)
 (forall (?F)
  (exists (?g2183)
   (and (instance ?g2183 Human)
        (=> (instance ?F Human)
         (=> (and (instance ?P Human) (instance ?M Woman))
          (and (=> (stepmother ?P ?M)
                (and (father ?P ?g2183)
                     (and (spouse ?M ?g2183) (not (mother ?P ?M)))))
               (=>
                (and (father ?P ?F)
                     (and (spouse ?M ?F) (not (mother ?P ?M))))
                (stepmother ?P ?M)))))))))
*/
fof(a4221,axiom,! [M,P] : (! [F] : (? [G2183] : ((s_instance(G2183, s_Human) & (s_instance(F, s_Human) => ((s_instance(P, s_Human) & s_instance(M, s_Woman)) => ((s_stepmother(P, M) => (s_father(P, G2183) & (s_spouse(M, G2183) & (~ s_mother(P, M))))) & ((s_father(P, F) & (s_spouse(M, F) & (~ s_mother(P, M)))) => s_stepmother(P, M)))))))))).

/*
(subclass NuclearFamily FamilyGroup)
*/
fof(a4222,axiom,s_subclass(s_NuclearFamily, s_FamilyGroup)).

/*
(instance NuclearFamily SetOrClass)
*/
fof(a4223,axiom,s_instance(s_NuclearFamily, s_SetOrClass)).

/*
(subclass NuclearFamily SocialUnit)
*/
fof(a4224,axiom,s_subclass(s_NuclearFamily, s_SocialUnit)).

/*
(forall (?T1 ?CHILD ?PARENT2 ?PARENT1)
 (exists (?FAM)
  (and (instance ?FAM Collection)
       (=>
        (and (instance ?PARENT1 Human) (instance ?PARENT2 Human)
             (instance ?CHILD Human) (instance ?T1 TimePosition))
        (=>
         (and (parent ?CHILD ?PARENT1)
              (and (parent ?CHILD ?PARENT2)
                   (holdsDuring ?T1
                    (and (spouse ?PARENT1 ?PARENT2)
                         (and (cohabitant ?PARENT1 ?PARENT2)
                              (cohabitant ?CHILD ?PARENT1))))))
         (and (instance ?FAM NuclearFamily)
              (holdsDuring ?T1
               (and (member ?CHILD ?FAM)
                    (and (member ?PARENT1 ?FAM)
                         (member ?PARENT2 ?FAM))))))))))
*/
%% no translation to TPTP available.

/*
(instance alias BinaryPredicate)
*/
fof(a4225,axiom,s_instance(s_alias_m, s_BinaryPredicate)).

/*
(instance alias AsymmetricRelation)
*/
fof(a4226,axiom,s_instance(s_alias_m, s_AsymmetricRelation)).

/*
(instance alias PartialValuedRelation)
*/
fof(a4227,axiom,s_instance(s_alias_m, s_PartialValuedRelation)).

/*
(subrelation alias names)
*/
fof(a4228,axiom,s_subrelation(s_alias_m, s_names_m)).

/*
(instance workAddress BinaryPredicate)
*/
fof(a4229,axiom,s_instance(s_workAddress_m, s_BinaryPredicate)).

/*
(instance workAddress AsymmetricRelation)
*/
fof(a4230,axiom,s_instance(s_workAddress_m, s_AsymmetricRelation)).

/*
(subrelation workAddress postContactSite)
*/
fof(a4231,axiom,s_subrelation(s_workAddress_m, s_postContactSite_m)).

/*
(instance homeAddress BinaryPredicate)
*/
fof(a4232,axiom,s_instance(s_homeAddress_m, s_BinaryPredicate)).

/*
(instance homeAddress AsymmetricRelation)
*/
fof(a4233,axiom,s_instance(s_homeAddress_m, s_AsymmetricRelation)).

/*
(subrelation homeAddress postContactSite)
*/
fof(a4234,axiom,s_subrelation(s_homeAddress_m, s_postContactSite_m)).

/*
(instance playsRoleInEvent TernaryPredicate)
*/
fof(a4235,axiom,s_instance(s_playsRoleInEvent_m, s_TernaryPredicate)).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ instrument ?EVENT)
   (instrument ?EVENT ?OBJ))))
*/
fof(a4236,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_instrument_m, EVENT) => s_instrument(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ suffers ?EVENT) (suffers ?EVENT ?OBJ))))
*/
fof(a4237,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_suffers_m, EVENT) => s_suffers(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ destination ?EVENT)
   (destination ?EVENT ?OBJ))))
*/
fof(a4238,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_destination_m, EVENT) => s_destination(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Substance) (instance ?EVENT ChemicalProcess))
  (=> (playsRoleInEvent ?OBJ reactant ?EVENT) (reactant ?EVENT ?OBJ))))
*/
fof(a4239,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Substance) & s_instance(EVENT, s_ChemicalProcess)) => (s_playsRoleInEvent(OBJ, s_reactant_m, EVENT) => s_reactant(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ patient ?EVENT) (patient ?EVENT ?OBJ))))
*/
fof(a4240,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_patient_m, EVENT) => s_patient(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ eventLocated ?EVENT)
   (eventLocated ?EVENT ?OBJ))))
*/
fof(a4241,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_eventLocated_m, EVENT) => s_eventLocated(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=>
  (and (instance ?OBJ CognitiveAgent) (instance ?EVENT ServiceProcess))
  (=> (playsRoleInEvent ?OBJ serviceRecipient ?EVENT)
   (serviceRecipient ?EVENT ?OBJ))))
*/
fof(a4242,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_CognitiveAgent) & s_instance(EVENT, s_ServiceProcess)) => (s_playsRoleInEvent(OBJ, s_serviceRecipient_m, EVENT) => s_serviceRecipient(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Experimenting))
  (=> (playsRoleInEvent ?OBJ experimentalControl ?EVENT)
   (experimentalControl ?EVENT ?OBJ))))
*/
fof(a4243,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Experimenting)) => (s_playsRoleInEvent(OBJ, s_experimentalControl_m, EVENT) => s_experimentalControl(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ resource ?EVENT) (resource ?EVENT ?OBJ))))
*/
fof(a4244,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_resource_m, EVENT) => s_resource(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=>
  (and (instance ?OBJ TransportationDevice)
       (instance ?EVENT Transportation))
  (=> (playsRoleInEvent ?OBJ conveyance ?EVENT)
   (conveyance ?EVENT ?OBJ))))
*/
fof(a4245,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_TransportationDevice) & s_instance(EVENT, s_Transportation)) => (s_playsRoleInEvent(OBJ, s_conveyance_m, EVENT) => s_conveyance(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ CognitiveAgent) (instance ?EVENT LegalAction))
  (=> (playsRoleInEvent ?OBJ defendant ?EVENT)
   (defendant ?EVENT ?OBJ))))
*/
fof(a4246,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_CognitiveAgent) & s_instance(EVENT, s_LegalAction)) => (s_playsRoleInEvent(OBJ, s_defendant_m, EVENT) => s_defendant(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=>
  (and (instance ?EVENT Process) (instance ?OBJ Object)
       (instance ?OBJ PositionalAttribute))
  (=> (playsRoleInEvent ?OBJ direction ?EVENT)
   (direction ?EVENT ?OBJ))))
*/
fof(a4247,axiom,! [EVENT,OBJ] : (((s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object) & s_instance(OBJ, s_PositionalAttribute)) => (s_playsRoleInEvent(OBJ, s_direction_m, EVENT) => s_direction(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Human) (instance ?EVENT Demonstrating))
  (=> (playsRoleInEvent ?OBJ attends ?EVENT) (attends ?EVENT ?OBJ))))
*/
fof(a4248,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Human) & s_instance(EVENT, s_Demonstrating)) => (s_playsRoleInEvent(OBJ, s_attends_m, EVENT) => s_attends(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Translocation))
  (=> (playsRoleInEvent ?OBJ changesLocation ?EVENT)
   (changesLocation ?EVENT ?OBJ))))
*/
fof(a4249,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Translocation)) => (s_playsRoleInEvent(OBJ, s_changesLocation_m, EVENT) => s_changesLocation(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT ChangeOfControl))
  (=> (playsRoleInEvent ?OBJ losesControl ?EVENT)
   (losesControl ?EVENT ?OBJ))))
*/
fof(a4250,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_ChangeOfControl)) => (s_playsRoleInEvent(OBJ, s_losesControl_m, EVENT) => s_losesControl(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ CognitiveAgent) (instance ?EVENT LegalAction))
  (=> (playsRoleInEvent ?OBJ plaintiff ?EVENT)
   (plaintiff ?EVENT ?OBJ))))
*/
fof(a4251,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_CognitiveAgent) & s_instance(EVENT, s_LegalAction)) => (s_playsRoleInEvent(OBJ, s_plaintiff_m, EVENT) => s_plaintiff(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Animal) (instance ?EVENT Confining))
  (=> (playsRoleInEvent ?OBJ detainee ?EVENT) (detainee ?EVENT ?OBJ))))
*/
fof(a4252,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Animal) & s_instance(EVENT, s_Confining)) => (s_playsRoleInEvent(OBJ, s_detainee_m, EVENT) => s_detainee(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT Contest))
  (=> (playsRoleInEvent ?OBJ contestParticipant ?EVENT)
   (contestParticipant ?EVENT ?OBJ))))
*/
fof(a4253,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_Contest)) => (s_playsRoleInEvent(OBJ, s_contestParticipant_m, EVENT) => s_contestParticipant(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Substance) (instance ?EVENT ChemicalProcess))
  (=> (playsRoleInEvent ?OBJ reagent ?EVENT) (reagent ?EVENT ?OBJ))))
*/
fof(a4254,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Substance) & s_instance(EVENT, s_ChemicalProcess)) => (s_playsRoleInEvent(OBJ, s_reagent_m, EVENT) => s_reagent(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Transportation))
  (=> (playsRoleInEvent ?OBJ transported ?EVENT)
   (transported ?EVENT ?OBJ))))
*/
fof(a4255,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Transportation)) => (s_playsRoleInEvent(OBJ, s_transported_m, EVENT) => s_transported(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Shipping))
  (=> (playsRoleInEvent ?OBJ cargo ?EVENT) (cargo ?EVENT ?OBJ))))
*/
fof(a4256,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Shipping)) => (s_playsRoleInEvent(OBJ, s_cargo_m, EVENT) => s_cargo(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ experiencer ?EVENT)
   (experiencer ?EVENT ?OBJ))))
*/
fof(a4257,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_experiencer_m, EVENT) => s_experiencer(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ result ?EVENT) (result ?EVENT ?OBJ))))
*/
fof(a4258,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_result_m, EVENT) => s_result(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ targetInAttack ?EVENT)
   (targetInAttack ?EVENT ?OBJ))))
*/
fof(a4259,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_targetInAttack_m, EVENT) => s_targetInAttack(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ origin ?EVENT) (origin ?EVENT ?OBJ))))
*/
fof(a4260,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_origin_m, EVENT) => s_origin(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Motion))
  (=> (playsRoleInEvent ?OBJ moves ?EVENT) (moves ?EVENT ?OBJ))))
*/
fof(a4261,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Motion)) => (s_playsRoleInEvent(OBJ, s_moves_m, EVENT) => s_moves(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT AchievingControl))
  (=> (playsRoleInEvent ?OBJ controlled ?EVENT)
   (controlled ?EVENT ?OBJ))))
*/
fof(a4262,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_AchievingControl)) => (s_playsRoleInEvent(OBJ, s_controlled_m, EVENT) => s_controlled(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=>
  (and (instance ?OBJ CognitiveAgent) (instance ?EVENT ServiceProcess))
  (=> (playsRoleInEvent ?OBJ serviceProvider ?EVENT)
   (serviceProvider ?EVENT ?OBJ))))
*/
fof(a4263,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_CognitiveAgent) & s_instance(EVENT, s_ServiceProcess)) => (s_playsRoleInEvent(OBJ, s_serviceProvider_m, EVENT) => s_serviceProvider(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ agent ?EVENT) (agent ?EVENT ?OBJ))))
*/
fof(a4264,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_agent_m, EVENT) => s_agent(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Motion))
  (=> (playsRoleInEvent ?OBJ path ?EVENT) (path ?EVENT ?OBJ))))
*/
fof(a4265,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Motion)) => (s_playsRoleInEvent(OBJ, s_path_m, EVENT) => s_path(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT PlacingUnderArrest))
  (=> (playsRoleInEvent ?OBJ arrested ?EVENT) (arrested ?EVENT ?OBJ))))
*/
fof(a4266,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_PlacingUnderArrest)) => (s_playsRoleInEvent(OBJ, s_arrested_m, EVENT) => s_arrested(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ eventPartlyLocated ?EVENT)
   (eventPartlyLocated ?EVENT ?OBJ))))
*/
fof(a4267,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_eventPartlyLocated_m, EVENT) => s_eventPartlyLocated(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?EVENT Process))
  (=> (playsRoleInEvent ?OBJ resourceExhausted ?EVENT)
   (resourceExhausted ?EVENT ?OBJ))))
*/
fof(a4268,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(EVENT, s_Process)) => (s_playsRoleInEvent(OBJ, s_resourceExhausted_m, EVENT) => s_resourceExhausted(EVENT, OBJ))))).

/*
(forall (?EVENT ?OBJ)
 (=> (and (instance ?OBJ Agent) (instance ?EVENT AchievingControl))
  (=> (playsRoleInEvent ?OBJ gainsControl ?EVENT)
   (gainsControl ?EVENT ?OBJ))))
*/
fof(a4269,axiom,! [EVENT,OBJ] : (((s_instance(OBJ, s_Agent) & s_instance(EVENT, s_AchievingControl)) => (s_playsRoleInEvent(OBJ, s_gainsControl_m, EVENT) => s_gainsControl(EVENT, OBJ))))).

/*
(forall (?ROLE2 ?OBJ ?EVENT ?ROLE)
 (=>
  (and (instance ?ROLE CaseRole) (instance ?EVENT Process)
       (instance ?OBJ Object) (instance ?ROLE2 CaseRole))
  (=>
   (and (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
        (subrelation ?ROLE ?ROLE2))
   (playsRoleInEvent ?OBJ ?ROLE2 ?EVENT))))
*/
fof(a4270,axiom,! [ROLE2,OBJ,EVENT,ROLE] : (((s_instance(ROLE, s_CaseRole) & s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object) & s_instance(ROLE2, s_CaseRole)) => ((s_playsRoleInEvent(OBJ, ROLE, EVENT) & s_subrelation(ROLE, ROLE2)) => s_playsRoleInEvent(OBJ, ROLE2, EVENT))))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (instrument ?EVENT ?OBJ)
       (and (instance instrument CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ instrument ?EVENT)))
*/
fof(a4271,axiom,! [OBJ,EVENT] : (((s_instrument(EVENT, OBJ) & (s_instance(s_instrument_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_instrument_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (suffers ?EVENT ?OBJ)
       (and (instance suffers CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ suffers ?EVENT)))
*/
fof(a4272,axiom,! [OBJ,EVENT] : (((s_suffers(EVENT, OBJ) & (s_instance(s_suffers_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_suffers_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (destination ?EVENT ?OBJ)
       (and (instance destination CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ destination ?EVENT)))
*/
fof(a4273,axiom,! [OBJ,EVENT] : (((s_destination(EVENT, OBJ) & (s_instance(s_destination_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_destination_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (reactant ?EVENT ?OBJ)
       (and (instance reactant CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ reactant ?EVENT)))
*/
fof(a4274,axiom,! [OBJ,EVENT] : (((s_reactant(EVENT, OBJ) & (s_instance(s_reactant_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_reactant_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (patient ?EVENT ?OBJ)
       (and (instance patient CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ patient ?EVENT)))
*/
fof(a4275,axiom,! [OBJ,EVENT] : (((s_patient(EVENT, OBJ) & (s_instance(s_patient_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_patient_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (eventLocated ?EVENT ?OBJ)
       (and (instance eventLocated CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ eventLocated ?EVENT)))
*/
fof(a4276,axiom,! [OBJ,EVENT] : (((s_eventLocated(EVENT, OBJ) & (s_instance(s_eventLocated_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_eventLocated_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (serviceRecipient ?EVENT ?OBJ)
       (and (instance serviceRecipient CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ serviceRecipient ?EVENT)))
*/
fof(a4277,axiom,! [OBJ,EVENT] : (((s_serviceRecipient(EVENT, OBJ) & (s_instance(s_serviceRecipient_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_serviceRecipient_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (experimentalControl ?EVENT ?OBJ)
       (and (instance experimentalControl CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ experimentalControl ?EVENT)))
*/
fof(a4278,axiom,! [OBJ,EVENT] : (((s_experimentalControl(EVENT, OBJ) & (s_instance(s_experimentalControl_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_experimentalControl_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (resource ?EVENT ?OBJ)
       (and (instance resource CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ resource ?EVENT)))
*/
fof(a4279,axiom,! [OBJ,EVENT] : (((s_resource(EVENT, OBJ) & (s_instance(s_resource_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_resource_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (conveyance ?EVENT ?OBJ)
       (and (instance conveyance CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ conveyance ?EVENT)))
*/
fof(a4280,axiom,! [OBJ,EVENT] : (((s_conveyance(EVENT, OBJ) & (s_instance(s_conveyance_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_conveyance_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (defendant ?EVENT ?OBJ)
       (and (instance defendant CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ defendant ?EVENT)))
*/
fof(a4281,axiom,! [OBJ,EVENT] : (((s_defendant(EVENT, OBJ) & (s_instance(s_defendant_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_defendant_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (direction ?EVENT ?OBJ)
       (and (instance direction CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ direction ?EVENT)))
*/
fof(a4282,axiom,! [OBJ,EVENT] : (((s_direction(EVENT, OBJ) & (s_instance(s_direction_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_direction_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (attends ?EVENT ?OBJ)
       (and (instance attends CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ attends ?EVENT)))
*/
fof(a4283,axiom,! [OBJ,EVENT] : (((s_attends(EVENT, OBJ) & (s_instance(s_attends_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_attends_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (changesLocation ?EVENT ?OBJ)
       (and (instance changesLocation CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ changesLocation ?EVENT)))
*/
fof(a4284,axiom,! [OBJ,EVENT] : (((s_changesLocation(EVENT, OBJ) & (s_instance(s_changesLocation_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_changesLocation_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (losesControl ?EVENT ?OBJ)
       (and (instance losesControl CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ losesControl ?EVENT)))
*/
fof(a4285,axiom,! [OBJ,EVENT] : (((s_losesControl(EVENT, OBJ) & (s_instance(s_losesControl_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_losesControl_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (plaintiff ?EVENT ?OBJ)
       (and (instance plaintiff CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ plaintiff ?EVENT)))
*/
fof(a4286,axiom,! [OBJ,EVENT] : (((s_plaintiff(EVENT, OBJ) & (s_instance(s_plaintiff_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_plaintiff_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (detainee ?EVENT ?OBJ)
       (and (instance detainee CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ detainee ?EVENT)))
*/
fof(a4287,axiom,! [OBJ,EVENT] : (((s_detainee(EVENT, OBJ) & (s_instance(s_detainee_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_detainee_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (contestParticipant ?EVENT ?OBJ)
       (and (instance contestParticipant CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ contestParticipant ?EVENT)))
*/
fof(a4288,axiom,! [OBJ,EVENT] : (((s_contestParticipant(EVENT, OBJ) & (s_instance(s_contestParticipant_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_contestParticipant_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (reagent ?EVENT ?OBJ)
       (and (instance reagent CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ reagent ?EVENT)))
*/
fof(a4289,axiom,! [OBJ,EVENT] : (((s_reagent(EVENT, OBJ) & (s_instance(s_reagent_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_reagent_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (transported ?EVENT ?OBJ)
       (and (instance transported CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ transported ?EVENT)))
*/
fof(a4290,axiom,! [OBJ,EVENT] : (((s_transported(EVENT, OBJ) & (s_instance(s_transported_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_transported_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (cargo ?EVENT ?OBJ)
       (and (instance cargo CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ cargo ?EVENT)))
*/
fof(a4291,axiom,! [OBJ,EVENT] : (((s_cargo(EVENT, OBJ) & (s_instance(s_cargo_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_cargo_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (experiencer ?EVENT ?OBJ)
       (and (instance experiencer CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ experiencer ?EVENT)))
*/
fof(a4292,axiom,! [OBJ,EVENT] : (((s_experiencer(EVENT, OBJ) & (s_instance(s_experiencer_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_experiencer_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (result ?EVENT ?OBJ)
       (and (instance result CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ result ?EVENT)))
*/
fof(a4293,axiom,! [OBJ,EVENT] : (((s_result(EVENT, OBJ) & (s_instance(s_result_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_result_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (targetInAttack ?EVENT ?OBJ)
       (and (instance targetInAttack CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ targetInAttack ?EVENT)))
*/
fof(a4294,axiom,! [OBJ,EVENT] : (((s_targetInAttack(EVENT, OBJ) & (s_instance(s_targetInAttack_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_targetInAttack_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (origin ?EVENT ?OBJ)
       (and (instance origin CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ origin ?EVENT)))
*/
fof(a4295,axiom,! [OBJ,EVENT] : (((s_origin(EVENT, OBJ) & (s_instance(s_origin_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_origin_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (moves ?EVENT ?OBJ)
       (and (instance moves CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ moves ?EVENT)))
*/
fof(a4296,axiom,! [OBJ,EVENT] : (((s_moves(EVENT, OBJ) & (s_instance(s_moves_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_moves_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (controlled ?EVENT ?OBJ)
       (and (instance controlled CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ controlled ?EVENT)))
*/
fof(a4297,axiom,! [OBJ,EVENT] : (((s_controlled(EVENT, OBJ) & (s_instance(s_controlled_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_controlled_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (serviceProvider ?EVENT ?OBJ)
       (and (instance serviceProvider CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ serviceProvider ?EVENT)))
*/
fof(a4298,axiom,! [OBJ,EVENT] : (((s_serviceProvider(EVENT, OBJ) & (s_instance(s_serviceProvider_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_serviceProvider_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (agent ?EVENT ?OBJ)
       (and (instance agent CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ agent ?EVENT)))
*/
fof(a4299,axiom,! [OBJ,EVENT] : (((s_agent(EVENT, OBJ) & (s_instance(s_agent_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_agent_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (path ?EVENT ?OBJ)
       (and (instance path CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ path ?EVENT)))
*/
fof(a4300,axiom,! [OBJ,EVENT] : (((s_path(EVENT, OBJ) & (s_instance(s_path_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_path_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (arrested ?EVENT ?OBJ)
       (and (instance arrested CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ arrested ?EVENT)))
*/
fof(a4301,axiom,! [OBJ,EVENT] : (((s_arrested(EVENT, OBJ) & (s_instance(s_arrested_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_arrested_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (eventPartlyLocated ?EVENT ?OBJ)
       (and (instance eventPartlyLocated CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ eventPartlyLocated ?EVENT)))
*/
fof(a4302,axiom,! [OBJ,EVENT] : (((s_eventPartlyLocated(EVENT, OBJ) & (s_instance(s_eventPartlyLocated_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_eventPartlyLocated_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (resourceExhausted ?EVENT ?OBJ)
       (and (instance resourceExhausted CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ resourceExhausted ?EVENT)))
*/
fof(a4303,axiom,! [OBJ,EVENT] : (((s_resourceExhausted(EVENT, OBJ) & (s_instance(s_resourceExhausted_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_resourceExhausted_m, EVENT)))).

/*
(forall (?OBJ ?EVENT)
 (=>
  (and (gainsControl ?EVENT ?OBJ)
       (and (instance gainsControl CaseRole)
            (and (instance ?EVENT Process) (instance ?OBJ Object))))
  (playsRoleInEvent ?OBJ gainsControl ?EVENT)))
*/
fof(a4304,axiom,! [OBJ,EVENT] : (((s_gainsControl(EVENT, OBJ) & (s_instance(s_gainsControl_m, s_CaseRole) & (s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object)))) => s_playsRoleInEvent(OBJ, s_gainsControl_m, EVENT)))).

/*
(forall (?ROLE ?OBJ ?CLASS ?PLACE ?TIME ?EVENT)
 (=>
  (and (instance ?ROLE CaseRole) (instance ?OBJ Object)
       (subclass ?CLASS Process) (instance ?CLASS SetOrClass)
       (instance ?PLACE Object) (instance ?TIME TimePosition))
  (=>
   (and (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
        (and (instance ?EVENT ?CLASS)
             (and (subclass ?CLASS Process)
                  (and (time ?EVENT ?TIME)
                       (eventLocated ?EVENT ?PLACE)))))
   (playsRoleInEventOfType ?OBJ ?ROLE ?CLASS ?TIME ?PLACE))))
*/
fof(a4305,axiom,! [ROLE,OBJ,CLASS,PLACE,TIME,EVENT] : (((s_instance(ROLE, s_CaseRole) & s_instance(OBJ, s_Object) & s_subclass(CLASS, s_Process) & s_instance(CLASS, s_SetOrClass) & s_instance(PLACE, s_Object) & s_instance(TIME, s_TimePosition)) => ((s_playsRoleInEvent(OBJ, ROLE, EVENT) & (s_instance(EVENT, CLASS) & (s_subclass(CLASS, s_Process) & (s_time(EVENT, TIME) & s_eventLocated(EVENT, PLACE))))) => s_playsRoleInEventOfType(OBJ, ROLE, CLASS, TIME, PLACE))))).

/*
(instance playsRoleInEventOfType QuintaryPredicate)
*/
fof(a4306,axiom,s_instance(s_playsRoleInEventOfType_m, s_QuintaryPredicate)).

/*
(domainSubclass playsRoleInEventOfType 3 Process)
*/
fof(a4307,axiom,s_domainSubclass(s_playsRoleInEventOfType_m, 3, s_Process)).

/*
(forall (?OBJ ?ROLE ?TYPE ?PLACE ?TIME)
 (exists (?EVENT)
  (and (instance ?EVENT Process)
       (=>
        (and (instance ?TIME TimePosition) (instance ?PLACE Object)
             (instance ?TYPE SetOrClass) (subclass ?TYPE Process)
             (instance ?ROLE CaseRole) (instance ?OBJ Object))
        (=> (playsRoleInEventOfType ?OBJ ?ROLE ?TYPE ?TIME ?PLACE)
         (and (instance ?EVENT ?TYPE)
              (and (time ?EVENT ?TIME)
                   (and (eventLocated ?EVENT ?PLACE)
                        (playsRoleInEvent ?OBJ ?ROLE ?EVENT)))))))))
*/
fof(a4308,axiom,! [OBJ,ROLE,TYPE,PLACE,TIME] : (? [EVENT] : ((s_instance(EVENT, s_Process) & ((s_instance(TIME, s_TimePosition) & s_instance(PLACE, s_Object) & s_instance(TYPE, s_SetOrClass) & s_subclass(TYPE, s_Process) & s_instance(ROLE, s_CaseRole) & s_instance(OBJ, s_Object)) => (s_playsRoleInEventOfType(OBJ, ROLE, TYPE, TIME, PLACE) => (s_instance(EVENT, TYPE) & (s_time(EVENT, TIME) & (s_eventLocated(EVENT, PLACE) & s_playsRoleInEvent(OBJ, ROLE, EVENT)))))))))).

/*
(forall (?ROLE ?OBJ ?TYPE ?PLACE ?TIME ?EVENT)
 (=>
  (and (instance ?ROLE CaseRole) (instance ?OBJ Object)
       (subclass ?TYPE Process) (instance ?TYPE SetOrClass)
       (instance ?PLACE Object) (instance ?TIME TimePosition))
  (=>
   (and (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
        (and (instance ?EVENT ?TYPE)
             (and (subclass ?TYPE Process)
                  (and (time ?EVENT ?TIME)
                       (eventLocated ?EVENT ?PLACE)))))
   (playsRoleInEventOfType ?OBJ ?ROLE ?TYPE ?TIME ?PLACE))))
*/
fof(a4309,axiom,! [ROLE,OBJ,TYPE,PLACE,TIME,EVENT] : (((s_instance(ROLE, s_CaseRole) & s_instance(OBJ, s_Object) & s_subclass(TYPE, s_Process) & s_instance(TYPE, s_SetOrClass) & s_instance(PLACE, s_Object) & s_instance(TIME, s_TimePosition)) => ((s_playsRoleInEvent(OBJ, ROLE, EVENT) & (s_instance(EVENT, TYPE) & (s_subclass(TYPE, s_Process) & (s_time(EVENT, TIME) & s_eventLocated(EVENT, PLACE))))) => s_playsRoleInEventOfType(OBJ, ROLE, TYPE, TIME, PLACE))))).

/*
(instance locatedAtTime TernaryPredicate)
*/
fof(a4310,axiom,s_instance(s_locatedAtTime_m, s_TernaryPredicate)).

/*
(forall (?OBJ ?PLACE ?TIME)
 (=>
  (and (instance ?TIME TimePosition) (instance ?PLACE Object)
       (instance ?OBJ Object))
  (<=> (locatedAtTime ?OBJ ?TIME ?PLACE)
   (holdsDuring ?TIME (located ?OBJ ?PLACE)))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?PLACE ?OBJ ?EVENT ?ROLE)
 (=>
  (and (instance ?ROLE CaseRole) (instance ?EVENT Process)
       (instance ?OBJ Object) (instance ?PLACE Object)
       (instance ?TIME TimePosition))
  (=>
   (and (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
        (and (time ?EVENT ?TIME) (eventLocated ?EVENT ?PLACE)))
   (locatedAtTime ?OBJ ?TIME ?PLACE))))
*/
fof(a4311,axiom,! [TIME,PLACE,OBJ,EVENT,ROLE] : (((s_instance(ROLE, s_CaseRole) & s_instance(EVENT, s_Process) & s_instance(OBJ, s_Object) & s_instance(PLACE, s_Object) & s_instance(TIME, s_TimePosition)) => ((s_playsRoleInEvent(OBJ, ROLE, EVENT) & (s_time(EVENT, TIME) & s_eventLocated(EVENT, PLACE))) => s_locatedAtTime(OBJ, TIME, PLACE))))).

/*
(instance deceptiveIdentifier BinaryPredicate)
*/
fof(a4312,axiom,s_instance(s_deceptiveIdentifier_m, s_BinaryPredicate)).

/*
(instance deceptiveIdentifier AsymmetricRelation)
*/
fof(a4313,axiom,s_instance(s_deceptiveIdentifier_m, s_AsymmetricRelation)).

/*
(subrelation deceptiveIdentifier refers)
*/
fof(a4314,axiom,s_subrelation(s_deceptiveIdentifier_m, s_refers_m)).

/*
(subrelation alias deceptiveIdentifier)
*/
fof(a4315,axiom,s_subrelation(s_alias_m, s_deceptiveIdentifier_m)).

/*
(instance stranger BinaryPredicate)
*/
fof(a4316,axiom,s_instance(s_stranger_m, s_BinaryPredicate)).

/*
(disjointRelation stranger acquaintance)
*/
fof(a4317,axiom,s_disjointRelation(s_stranger_m, s_acquaintance_m)).

/*
(instance mutualStranger BinaryPredicate)
*/
fof(a4318,axiom,s_instance(s_mutualStranger_m, s_BinaryPredicate)).

/*
(instance mutualStranger SymmetricRelation)
*/
fof(a4319,axiom,s_instance(s_mutualStranger_m, s_SymmetricRelation)).

/*
(subrelation mutualStranger stranger)
*/
fof(a4320,axiom,s_subrelation(s_mutualStranger_m, s_stranger_m)).

/*
(disjointRelation mutualStranger mutualAcquaintance)
*/
fof(a4321,axiom,s_disjointRelation(s_mutualStranger_m, s_mutualAcquaintance_m)).

/*
(instance domesticPartner BinaryPredicate)
*/
fof(a4322,axiom,s_instance(s_domesticPartner_m, s_BinaryPredicate)).

/*
(instance domesticPartner SymmetricRelation)
*/
fof(a4323,axiom,s_instance(s_domesticPartner_m, s_SymmetricRelation)).

/*
(instance domesticPartner IntentionalRelation)
*/
fof(a4324,axiom,s_instance(s_domesticPartner_m, s_IntentionalRelation)).

/*
(disjointRelation spouse domesticPartner)
*/
fof(a4325,axiom,s_disjointRelation(s_spouse_m, s_domesticPartner_m)).

/*
(subrelation domesticPartner cohabitant)
*/
fof(a4326,axiom,s_subrelation(s_domesticPartner_m, s_cohabitant_m)).

/*
(instance legalGuardian BinaryPredicate)
*/
fof(a4327,axiom,s_instance(s_legalGuardian_m, s_BinaryPredicate)).

/*
(instance legalGuardian AntisymmetricRelation)
*/
fof(a4328,axiom,s_instance(s_legalGuardian_m, s_AntisymmetricRelation)).

/*
(instance legalGuardian PartialValuedRelation)
*/
fof(a4329,axiom,s_instance(s_legalGuardian_m, s_PartialValuedRelation)).

/*
(forall (?REGION ?OBJ ?PLACE ?TIME)
 (=>
  (and (instance ?TIME TimePosition) (instance ?PLACE GeographicArea)
       (instance ?OBJ Object) (instance ?REGION GeographicArea))
  (=>
   (and (locatedAtTime ?OBJ ?TIME ?PLACE)
        (geographicSubregion ?PLACE ?REGION))
   (locatedAtTime ?OBJ ?TIME ?REGION))))
*/
fof(a4330,axiom,! [REGION,OBJ,PLACE,TIME] : (((s_instance(TIME, s_TimePosition) & s_instance(PLACE, s_GeographicArea) & s_instance(OBJ, s_Object) & s_instance(REGION, s_GeographicArea)) => ((s_locatedAtTime(OBJ, TIME, PLACE) & s_geographicSubregion(PLACE, REGION)) => s_locatedAtTime(OBJ, TIME, REGION))))).

/*
(instance Seating SetOrClass)
*/
fof(a4331,axiom,s_instance(s_Seating, s_SetOrClass)).

/*
(subclass Seating Guiding)
*/
fof(a4332,axiom,s_subclass(s_Seating, s_Guiding)).

/*
(forall (?S)
 (exists (?P ?H)
  (and (and (instance ?H Agent) (instance ?P Entity))
       (=> (instance ?S Seating)
        (and (experiencer ?S ?H)
             (and (instance ?H Human)
                  (and (destination ?S ?P) (instance ?P Seat))))))))
*/
fof(a4333,axiom,! [S] : (? [P,H] : (((s_instance(H, s_Agent) & s_instance(P, s_Entity)) & (s_instance(S, s_Seating) => (s_experiencer(S, H) & (s_instance(H, s_Human) & (s_destination(S, P) & s_instance(P, s_Seat))))))))).

/*
(instance Signalling SetOrClass)
*/
fof(a4334,axiom,s_instance(s_Signalling, s_SetOrClass)).

/*
(subclass Signalling Guiding)
*/
fof(a4335,axiom,s_subclass(s_Signalling, s_Guiding)).

/*
(subclass AchievingControl Guiding)
*/
fof(a4336,axiom,s_subclass(s_AchievingControl, s_Guiding)).

/*
(instance controlled CaseRole)
*/
fof(a4337,axiom,s_instance(s_controlled_m, s_CaseRole)).

/*
(subrelation controlled patient)
*/
fof(a4338,axiom,s_subrelation(s_controlled_m, s_patient_m)).

/*
(instance gainsControl CaseRole)
*/
fof(a4339,axiom,s_instance(s_gainsControl_m, s_CaseRole)).

/*
(subrelation gainsControl agent)
*/
fof(a4340,axiom,s_subrelation(s_gainsControl_m, s_agent_m)).

/*
(instance AchievingControl SetOrClass)
*/
fof(a4341,axiom,s_instance(s_AchievingControl, s_SetOrClass)).

/*
(subclass ChangeOfControl AchievingControl)
*/
fof(a4342,axiom,s_subclass(s_ChangeOfControl, s_AchievingControl)).

/*
(instance losesControl CaseRole)
*/
fof(a4343,axiom,s_instance(s_losesControl_m, s_CaseRole)).

/*
(subrelation losesControl experiencer)
*/
fof(a4344,axiom,s_subrelation(s_losesControl_m, s_experiencer_m)).

/*
(instance ChangeOfControl SetOrClass)
*/
fof(a4345,axiom,s_instance(s_ChangeOfControl, s_SetOrClass)).

/*
(subclass Capturing ChangeOfControl)
*/
fof(a4346,axiom,s_subclass(s_Capturing, s_ChangeOfControl)).

/*
(forall (?OBJ ?CAPTURE)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?CAPTURE Capturing) (controlled ?CAPTURE ?OBJ))
   (instance ?OBJ Agent))))
*/
fof(a4347,axiom,! [OBJ,CAPTURE] : ((s_instance(OBJ, s_Object) => ((s_instance(CAPTURE, s_Capturing) & s_controlled(CAPTURE, OBJ)) => s_instance(OBJ, s_Agent))))).

/*
(instance Capturing SetOrClass)
*/
fof(a4348,axiom,s_instance(s_Capturing, s_SetOrClass)).

/*
(subclass PlacingUnderArrest Capturing)
*/
fof(a4349,axiom,s_subclass(s_PlacingUnderArrest, s_Capturing)).

/*
(instance LawEnforcement SetOrClass)
*/
fof(a4350,axiom,s_instance(s_LawEnforcement, s_SetOrClass)).

/*
(subclass PlacingUnderArrest LawEnforcement)
*/
fof(a4351,axiom,s_subclass(s_PlacingUnderArrest, s_LawEnforcement)).

/*
(subclass PlacingUnderArrest SocialInteraction)
*/
fof(a4352,axiom,s_subclass(s_PlacingUnderArrest, s_SocialInteraction)).

/*
(instance PlacingUnderArrest SetOrClass)
*/
fof(a4353,axiom,s_instance(s_PlacingUnderArrest, s_SetOrClass)).

/*
(subclass PlacingUnderArrest LegalAction)
*/
fof(a4354,axiom,s_subclass(s_PlacingUnderArrest, s_LegalAction)).

/*
(instance arrested CaseRole)
*/
fof(a4355,axiom,s_instance(s_arrested_m, s_CaseRole)).

/*
(subrelation arrested controlled)
*/
fof(a4356,axiom,s_subrelation(s_arrested_m, s_controlled_m)).

/*
(forall (?AGENT ?ARREST)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?ARREST PlacingUnderArrest) (agent ?ARREST ?AGENT))
   (instance ?AGENT CognitiveAgent))))
*/
fof(a4357,axiom,! [AGENT,ARREST] : ((s_instance(AGENT, s_Agent) => ((s_instance(ARREST, s_PlacingUnderArrest) & s_agent(ARREST, AGENT)) => s_instance(AGENT, s_CognitiveAgent))))).

/*
(forall (?OBJ ?ARREST)
 (=> (and (instance ?ARREST PlacingUnderArrest) (instance ?OBJ Agent))
  (=> (arrested ?ARREST ?OBJ)
   (or (instance ?OBJ Human) (instance ?OBJ GroupOfPeople)))))
*/
fof(a4358,axiom,! [OBJ,ARREST] : (((s_instance(ARREST, s_PlacingUnderArrest) & s_instance(OBJ, s_Agent)) => (s_arrested(ARREST, OBJ) => (s_instance(OBJ, s_Human) | s_instance(OBJ, s_GroupOfPeople)))))).

/*
(forall (?MEMBER ?AGENT ?ARREST)
 (exists (?ARREST1)
  (and (instance ?ARREST1 PlacingUnderArrest)
       (=> (instance ?MEMBER Agent)
        (=>
         (and (instance ?ARREST PlacingUnderArrest)
              (and (arrested ?ARREST ?AGENT)
                   (and (instance ?AGENT GroupOfPeople)
                        (member ?MEMBER ?AGENT))))
         (and (instance ?ARREST1 PlacingUnderArrest)
              (and (arrested ?ARREST1 ?MEMBER)
                   (subProcess ?ARREST1 ?ARREST))))))))
*/
fof(a4359,axiom,! [MEMBER,AGENT,ARREST] : (? [ARREST1] : ((s_instance(ARREST1, s_PlacingUnderArrest) & (s_instance(MEMBER, s_Agent) => ((s_instance(ARREST, s_PlacingUnderArrest) & (s_arrested(ARREST, AGENT) & (s_instance(AGENT, s_GroupOfPeople) & s_member(MEMBER, AGENT)))) => (s_instance(ARREST1, s_PlacingUnderArrest) & (s_arrested(ARREST1, MEMBER) & s_subProcess(ARREST1, ARREST))))))))).

/*
(forall (?SUB ?LOC ?PROC)
 (=> (and (instance ?SUB Process) (instance ?LOC Object))
  (=>
   (and (instance ?PROC Process)
        (and (eventLocated ?PROC ?LOC) (subProcess ?SUB ?PROC)))
   (eventLocated ?SUB ?LOC))))
*/
fof(a4360,axiom,! [SUB,LOC,PROC] : (((s_instance(SUB, s_Process) & s_instance(LOC, s_Object)) => ((s_instance(PROC, s_Process) & (s_eventLocated(PROC, LOC) & s_subProcess(SUB, PROC))) => s_eventLocated(SUB, LOC))))).

/*
(forall (?AGENT ?INTERVAL ?IMPRISON)
 (exists (?ARREST ?TIME)
  (and (and (instance ?TIME TimeInterval)
            (instance ?ARREST PlacingUnderArrest))
       (=>
        (and (instance ?IMPRISON Imprisoning)
             (and (detainee ?IMPRISON ?AGENT)
                  (and (instance ?AGENT Human)
                       (and (time ?IMPRISON ?INTERVAL)
                            (instance ?INTERVAL TimeInterval)))))
        (and (instance ?TIME TimeInterval)
             (and (time ?ARREST ?TIME)
                  (and (earlier ?TIME ?INTERVAL)
                       (and (instance ?ARREST PlacingUnderArrest)
                            (arrested ?ARREST ?AGENT)))))))))
*/
fof(a4361,axiom,! [AGENT,INTERVAL,IMPRISON] : (? [ARREST,TIME] : (((s_instance(TIME, s_TimeInterval) & s_instance(ARREST, s_PlacingUnderArrest)) & ((s_instance(IMPRISON, s_Imprisoning) & (s_detainee(IMPRISON, AGENT) & (s_instance(AGENT, s_Human) & (s_time(IMPRISON, INTERVAL) & s_instance(INTERVAL, s_TimeInterval))))) => (s_instance(TIME, s_TimeInterval) & (s_time(ARREST, TIME) & (s_earlier(TIME, INTERVAL) & (s_instance(ARREST, s_PlacingUnderArrest) & s_arrested(ARREST, AGENT)))))))))).

/*
(instance conveyance CaseRole)
*/
fof(a4362,axiom,s_instance(s_conveyance_m, s_CaseRole)).

/*
(subrelation conveyance instrument)
*/
fof(a4363,axiom,s_subrelation(s_conveyance_m, s_instrument_m)).

/*
(forall (?VEHICLE ?TRANSPORT)
 (=>
  (and (instance ?TRANSPORT Transportation)
       (and (instrument ?TRANSPORT ?VEHICLE)
            (instance ?VEHICLE RoadVehicle)))
  (instance ?TRANSPORT TransportViaRoadVehicle)))
*/
fof(a4364,axiom,! [VEHICLE,TRANSPORT] : (((s_instance(TRANSPORT, s_Transportation) & (s_instrument(TRANSPORT, VEHICLE) & s_instance(VEHICLE, s_RoadVehicle))) => s_instance(TRANSPORT, s_TransportViaRoadVehicle)))).

/*
(forall (?VEHICLE ?TRANSPORT)
 (=> (instance ?VEHICLE TransportationDevice)
  (=>
   (and (instance ?TRANSPORT TransportViaRoadVehicle)
        (conveyance ?TRANSPORT ?VEHICLE))
   (instance ?VEHICLE RoadVehicle))))
*/
fof(a4365,axiom,! [VEHICLE,TRANSPORT] : ((s_instance(VEHICLE, s_TransportationDevice) => ((s_instance(TRANSPORT, s_TransportViaRoadVehicle) & s_conveyance(TRANSPORT, VEHICLE)) => s_instance(VEHICLE, s_RoadVehicle))))).

/*
(forall (?TRANSPORT)
 (exists (?DRIVING)
  (and (instance ?DRIVING Process)
       (=> (instance ?TRANSPORT TransportViaRoadVehicle)
        (and (instance ?DRIVING Driving)
             (subProcess ?TRANSPORT ?DRIVING))))))
*/
fof(a4366,axiom,! [TRANSPORT] : (? [DRIVING] : ((s_instance(DRIVING, s_Process) & (s_instance(TRANSPORT, s_TransportViaRoadVehicle) => (s_instance(DRIVING, s_Driving) & s_subProcess(TRANSPORT, DRIVING))))))).

/*
(forall (?DRIVE ?VEHICLE ?TRANSPORT)
 (=>
  (and (instance ?TRANSPORT Transportation)
       (and (subProcess ?TRANSPORT ?DRIVE)
            (and (instance ?DRIVE Driving)
                 (and (instrument ?TRANSPORT ?VEHICLE)
                      (instance ?VEHICLE TransportationDevice)))))
  (patient ?DRIVE ?VEHICLE)))
*/
fof(a4367,axiom,! [DRIVE,VEHICLE,TRANSPORT] : (((s_instance(TRANSPORT, s_Transportation) & (s_subProcess(TRANSPORT, DRIVE) & (s_instance(DRIVE, s_Driving) & (s_instrument(TRANSPORT, VEHICLE) & s_instance(VEHICLE, s_TransportationDevice))))) => s_patient(DRIVE, VEHICLE)))).

/*
(forall (?VEHICLE ?DRIVE)
 (exists (?TRANSPORT)
  (and (instance ?TRANSPORT Process)
       (=>
        (and (instance ?DRIVE Driving)
             (and (patient ?DRIVE ?VEHICLE)
                  (instance ?VEHICLE RoadVehicle)))
        (and (instance ?TRANSPORT TransportViaRoadVehicle)
             (subProcess ?TRANSPORT ?DRIVE))))))
*/
fof(a4368,axiom,! [VEHICLE,DRIVE] : (? [TRANSPORT] : ((s_instance(TRANSPORT, s_Process) & ((s_instance(DRIVE, s_Driving) & (s_patient(DRIVE, VEHICLE) & s_instance(VEHICLE, s_RoadVehicle))) => (s_instance(TRANSPORT, s_TransportViaRoadVehicle) & s_subProcess(TRANSPORT, DRIVE))))))).

/*
(forall (?TRANSPORT ?DRIVER ?DRIVING)
 (=> (instance ?DRIVER Agent)
  (=>
   (and (instance ?DRIVING Driving)
        (and (subProcess ?TRANSPORT ?DRIVING)
             (and (instance ?TRANSPORT Transportation)
                  (agent ?DRIVING ?DRIVER))))
   (transported ?TRANSPORT ?DRIVER))))
*/
fof(a4369,axiom,! [TRANSPORT,DRIVER,DRIVING] : ((s_instance(DRIVER, s_Agent) => ((s_instance(DRIVING, s_Driving) & (s_subProcess(TRANSPORT, DRIVING) & (s_instance(TRANSPORT, s_Transportation) & s_agent(DRIVING, DRIVER)))) => s_transported(TRANSPORT, DRIVER))))).

/*
(forall (?TRANSPORT ?DEST ?DRIVING)
 (=> (instance ?DEST Entity)
  (=>
   (and (instance ?DRIVING Driving)
        (and (subProcess ?TRANSPORT ?DRIVING)
             (and (instance ?TRANSPORT Transportation)
                  (destination ?DRIVING ?DEST))))
   (destination ?TRANSPORT ?DEST))))
*/
fof(a4370,axiom,! [TRANSPORT,DEST,DRIVING] : ((s_instance(DEST, s_Entity) => ((s_instance(DRIVING, s_Driving) & (s_subProcess(TRANSPORT, DRIVING) & (s_instance(TRANSPORT, s_Transportation) & s_destination(DRIVING, DEST)))) => s_destination(TRANSPORT, DEST))))).

/*
(forall (?TRANSPORT ?VEHICLE ?DRIVING)
 (=>
  (and (instance ?DRIVING Driving)
       (and (subProcess ?TRANSPORT ?DRIVING)
            (and (instance ?TRANSPORT Transportation)
                 (and (instance ?VEHICLE Vehicle)
                      (patient ?DRIVING ?VEHICLE)))))
  (conveyance ?TRANSPORT ?VEHICLE)))
*/
fof(a4371,axiom,! [TRANSPORT,VEHICLE,DRIVING] : (((s_instance(DRIVING, s_Driving) & (s_subProcess(TRANSPORT, DRIVING) & (s_instance(TRANSPORT, s_Transportation) & (s_instance(VEHICLE, s_Vehicle) & s_patient(DRIVING, VEHICLE))))) => s_conveyance(TRANSPORT, VEHICLE)))).

/*
(instance GasolineEngine SetOrClass)
*/
fof(a4372,axiom,s_instance(s_GasolineEngine, s_SetOrClass)).

/*
(subclass GasolineEngine InternalCombustionEngine)
*/
fof(a4373,axiom,s_subclass(s_GasolineEngine, s_InternalCombustionEngine)).

/*
(forall (?R)
 (exists (?F)
  (and (instance ?F Object)
       (=> (instance ?R Process)
        (=> (instance ?R (OperatingFn GasolineEngine))
         (and (instance ?F Gasoline) (resource ?R ?F)))))))
*/
fof(a4374,axiom,! [R] : (? [F] : ((s_instance(F, s_Object) & (s_instance(R, s_Process) => (s_instance(R, s_OperatingFn(s_GasolineEngine)) => (s_instance(F, s_Gasoline) & s_resource(R, F)))))))).

/*
(instance DieselEngine SetOrClass)
*/
fof(a4375,axiom,s_instance(s_DieselEngine, s_SetOrClass)).

/*
(instance InternalCombustionEngine SetOrClass)
*/
fof(a4376,axiom,s_instance(s_InternalCombustionEngine, s_SetOrClass)).

/*
(subclass DieselEngine InternalCombustionEngine)
*/
fof(a4377,axiom,s_subclass(s_DieselEngine, s_InternalCombustionEngine)).

/*
(forall (?P)
 (exists (?F)
  (and (instance ?F Object)
       (=> (instance ?P Process)
        (=> (instance ?P (OperatingFn DieselEngine))
         (and (instance ?F DieselFuel) (resource ?P ?F)))))))
*/
fof(a4378,axiom,! [P] : (? [F] : ((s_instance(F, s_Object) & (s_instance(P, s_Process) => (s_instance(P, s_OperatingFn(s_DieselEngine)) => (s_instance(F, s_DieselFuel) & s_resource(P, F)))))))).

/*
(instance typicalPart BinaryPredicate)
*/
fof(a4379,axiom,s_instance(s_typicalPart_m, s_BinaryPredicate)).

/*
(instance typicalPart SpatialRelation)
*/
fof(a4380,axiom,s_instance(s_typicalPart_m, s_SpatialRelation)).

/*
(domainSubclass typicalPart 1 Object)
*/
fof(a4381,axiom,s_domainSubclass(s_typicalPart_m, 1, s_Object)).

/*
(domainSubclass typicalPart 2 Object)
*/
fof(a4382,axiom,s_domainSubclass(s_typicalPart_m, 2, s_Object)).

/*
(forall (?WHOLE ?PART)
 (exists (?X ?Y)
  (and (and (instance ?Y Object) (instance ?X Object))
       (=>
        (and (instance ?PART SetOrClass) (subclass ?PART Object)
             (subclass ?WHOLE Object) (instance ?WHOLE SetOrClass))
        (=> (typicalPart ?PART ?WHOLE)
         (and (instance ?X ?WHOLE)
              (and (instance ?Y ?PART) (part ?Y ?X))))))))
*/
fof(a4383,axiom,! [WHOLE,PART] : (? [X,Y] : (((s_instance(Y, s_Object) & s_instance(X, s_Object)) & ((s_instance(PART, s_SetOrClass) & s_subclass(PART, s_Object) & s_subclass(WHOLE, s_Object) & s_instance(WHOLE, s_SetOrClass)) => (s_typicalPart(PART, WHOLE) => (s_instance(X, WHOLE) & (s_instance(Y, PART) & s_part(Y, X))))))))).

/*
(forall (?PART ?NOTPARTPROB ?PARTPROB ?X ?WHOLE)
 (=>
  (and (instance ?PART SetOrClass) (subclass ?PART Object)
       (instance ?NOTPARTPROB Quantity) (instance ?PARTPROB Quantity)
       (subclass ?WHOLE Object) (instance ?WHOLE SetOrClass))
  (=>
   (and (typicalPart ?PART ?WHOLE)
        (and (instance ?X ?PART)
             (and (equal ?PARTPROB
                         (ProbabilityFn
                          (exists (?Y)
                           (and (instance ?Y ?WHOLE) (part ?X ?Y)))))
                  (equal ?NOTPARTPROB
                         (ProbabilityFn
                          (not (exists
                                (?Z)
                                (and
                                 (instance ?Z ?WHOLE)
                                 (part ?X ?Z)))))))))
   (greaterThan ?PARTPROB ?NOTPARTPROB))))
*/
%% no translation to TPTP available.

/*
(instance typicallyContainsPart BinaryPredicate)
*/
fof(a4384,axiom,s_instance(s_typicallyContainsPart_m, s_BinaryPredicate)).

/*
(instance typicallyContainsPart SpatialRelation)
*/
fof(a4385,axiom,s_instance(s_typicallyContainsPart_m, s_SpatialRelation)).

/*
(domainSubclass typicallyContainsPart 1 Object)
*/
fof(a4386,axiom,s_domainSubclass(s_typicallyContainsPart_m, 1, s_Object)).

/*
(domainSubclass typicallyContainsPart 2 Object)
*/
fof(a4387,axiom,s_domainSubclass(s_typicallyContainsPart_m, 2, s_Object)).

/*
(forall (?WHOLE ?PART)
 (exists (?X ?Y)
  (and (and (instance ?Y Object) (instance ?X Object))
       (=>
        (and (instance ?PART SetOrClass) (subclass ?PART Object)
             (subclass ?WHOLE Object) (instance ?WHOLE SetOrClass))
        (=> (typicallyContainsPart ?PART ?WHOLE)
         (and (instance ?X ?WHOLE)
              (and (instance ?Y ?PART) (part ?Y ?X))))))))
*/
fof(a4388,axiom,! [WHOLE,PART] : (? [X,Y] : (((s_instance(Y, s_Object) & s_instance(X, s_Object)) & ((s_instance(PART, s_SetOrClass) & s_subclass(PART, s_Object) & s_subclass(WHOLE, s_Object) & s_instance(WHOLE, s_SetOrClass)) => (s_typicallyContainsPart(PART, WHOLE) => (s_instance(X, WHOLE) & (s_instance(Y, PART) & s_part(Y, X))))))))).

/*
(forall (?WHOLE ?NOTPARTPROB ?PARTPROB ?Y ?PART)
 (=>
  (and (instance ?WHOLE SetOrClass) (subclass ?WHOLE Object)
       (instance ?NOTPARTPROB Quantity) (instance ?PARTPROB Quantity)
       (subclass ?PART Object) (instance ?PART SetOrClass))
  (=>
   (and (typicallyContainsPart ?PART ?WHOLE)
        (and (instance ?Y ?WHOLE)
             (and (equal ?PARTPROB
                         (ProbabilityFn
                          (exists (?X1)
                           (and (instance ?X1 ?PART) (part ?X1 ?Y)))))
                  (equal ?NOTPARTPROB
                         (ProbabilityFn
                          (not (exists
                                (?X2)
                                (and
                                 (instance ?X2 ?PART)
                                 (part ?X2 ?Y)))))))))
   (greaterThan ?PARTPROB ?NOTPARTPROB))))
*/
%% no translation to TPTP available.

/*
(instance initialPart BinaryPredicate)
*/
fof(a4389,axiom,s_instance(s_initialPart_m, s_BinaryPredicate)).

/*
(instance initialPart SpatialRelation)
*/
fof(a4390,axiom,s_instance(s_initialPart_m, s_SpatialRelation)).

/*
(domainSubclass initialPart 1 Object)
*/
fof(a4391,axiom,s_domainSubclass(s_initialPart_m, 1, s_Object)).

/*
(domainSubclass initialPart 2 Object)
*/
fof(a4392,axiom,s_domainSubclass(s_initialPart_m, 2, s_Object)).

/*
(forall (?PART ?C1 ?C2)
 (exists (?WHOLE)
  (and (instance ?WHOLE Object)
       (=>
        (and (instance ?C1 SetOrClass) (subclass ?C1 Object)
             (subclass ?C2 Object) (instance ?C2 SetOrClass))
        (=> (and (initialPart ?C2 ?C1) (instance ?PART ?C2))
         (and (instance ?WHOLE ?C1)
              (holdsDuring (BeginFn (WhenFn ?PART))
               (part ?PART ?WHOLE))))))))
*/
%% no translation to TPTP available.

/*
(initialPart AnimalAnatomicalStructure Animal)
*/
fof(a4393,axiom,s_initialPart(s_AnimalAnatomicalStructure, s_Animal)).

/*
(instance initiallyContainsPart BinaryPredicate)
*/
fof(a4394,axiom,s_instance(s_initiallyContainsPart_m, s_BinaryPredicate)).

/*
(instance initiallyContainsPart SpatialRelation)
*/
fof(a4395,axiom,s_instance(s_initiallyContainsPart_m, s_SpatialRelation)).

/*
(domainSubclass initiallyContainsPart 1 Object)
*/
fof(a4396,axiom,s_domainSubclass(s_initiallyContainsPart_m, 1, s_Object)).

/*
(domainSubclass initiallyContainsPart 2 Object)
*/
fof(a4397,axiom,s_domainSubclass(s_initiallyContainsPart_m, 2, s_Object)).

/*
(forall (?WHOLE ?C1 ?C2)
 (exists (?PART)
  (and (instance ?PART Object)
       (=>
        (and (instance ?C1 SetOrClass) (subclass ?C1 Object)
             (subclass ?C2 Object) (instance ?C2 SetOrClass))
        (=> (and (initiallyContainsPart ?C2 ?C1) (instance ?WHOLE ?C1))
         (and (instance ?PART ?C2)
              (holdsDuring (BeginFn (WhenFn ?WHOLE))
               (part ?PART ?WHOLE))))))))
*/
%% no translation to TPTP available.

/*
(instance CausingHappiness SetOrClass)
*/
fof(a4398,axiom,s_instance(s_CausingHappiness, s_SetOrClass)).

/*
(subclass CausingHappiness Process)
*/
fof(a4399,axiom,s_subclass(s_CausingHappiness, s_Process)).

/*
(forall (?P ?C)
 (=> (instance ?P Object)
  (=> (and (instance ?C CausingHappiness) (patient ?C ?P))
   (and (holdsDuring (BeginFn (WhenFn ?C))
         (not (attribute ?P Happiness)))
        (holdsDuring (EndFn (WhenFn ?C)) (attribute ?P Happiness))))))
*/
%% no translation to TPTP available.

/*
(instance CausingPain SetOrClass)
*/
fof(a4400,axiom,s_instance(s_CausingPain, s_SetOrClass)).

/*
(subclass CausingPain CausingUnhappiness)
*/
fof(a4401,axiom,s_subclass(s_CausingPain, s_CausingUnhappiness)).

/*
(instance CausingUnhappiness SetOrClass)
*/
fof(a4402,axiom,s_instance(s_CausingUnhappiness, s_SetOrClass)).

/*
(subclass CausingUnhappiness Process)
*/
fof(a4403,axiom,s_subclass(s_CausingUnhappiness, s_Process)).

/*
(forall (?P ?C)
 (=> (instance ?P Object)
  (=> (and (instance ?C CausingHappiness) (patient ?C ?P))
   (and (holdsDuring (BeginFn (WhenFn ?C))
         (not (attribute ?P Unhappiness)))
        (holdsDuring (EndFn (WhenFn ?C)) (attribute ?P Unhappiness))))))
*/
%% no translation to TPTP available.

/*
(instance Lengthening SetOrClass)
*/
fof(a4404,axiom,s_instance(s_Lengthening, s_SetOrClass)).

/*
(subclass Lengthening Increasing)
*/
fof(a4405,axiom,s_subclass(s_Lengthening, s_Increasing)).

/*
(forall (?O ?L)
 (exists (?L1 ?L2)
  (and (and (instance ?L2 LengthMeasure) (instance ?L1 LengthMeasure))
       (=> (instance ?O Object)
        (=> (and (instance ?L Lengthening) (patient ?L ?O))
         (and (holdsDuring (BeginFn (WhenFn ?L)) (length ?O ?L1))
              (and (holdsDuring (EndFn (WhenFn ?L)) (length ?O ?L2))
                   (greaterThan ?L2 ?L1))))))))
*/
%% no translation to TPTP available.

/*
(instance Saving SetOrClass)
*/
fof(a4406,axiom,s_instance(s_Saving, s_SetOrClass)).

/*
(subclass Saving Increasing)
*/
fof(a4407,axiom,s_subclass(s_Saving, s_Increasing)).

/*
(forall (?A ?O ?S)
 (exists (?Q1 ?Q2)
  (and (and (instance ?Q2 CurrencyMeasure)
            (instance ?Q1 CurrencyMeasure))
       (=> (and (instance ?A Agent) (instance ?O Object))
        (=>
         (and (instance ?S Saving) (and (patient ?S ?O) (agent ?S ?A)))
         (and (holdsDuring (BeginFn (WhenFn ?S))
               (monetaryValue ?O ?Q1))
              (and (holdsDuring (EndFn (WhenFn ?S))
                    (monetaryValue ?O ?Q2))
                   (and (possesses ?A ?O) (lessThan ?Q1 ?Q2)))))))))
*/
%% no translation to TPTP available.

/*
(subrelation financialAsset possesses)
*/
fof(a4408,axiom,s_subrelation(s_financialAsset_m, s_possesses_m)).

/*
(forall (?A ?P)
 (exists (?V)
  (and (instance ?V CurrencyMeasure)
       (=> (and (instance ?P Agent) (instance ?A Object))
        (=> (financialAsset ?P ?A) (monetaryValue ?A ?V))))))
*/
fof(a4409,axiom,! [A,P] : (? [V] : ((s_instance(V, s_CurrencyMeasure) & ((s_instance(P, s_Agent) & s_instance(A, s_Object)) => (s_financialAsset(P, A) => s_monetaryValue(A, V))))))).

/*
(instance Barking SetOrClass)
*/
fof(a4410,axiom,s_instance(s_Barking, s_SetOrClass)).

/*
(subclass Barking RadiatingSound)
*/
fof(a4411,axiom,s_subclass(s_Barking, s_RadiatingSound)).

/*
(forall (?B)
 (exists (?D)
  (and (instance ?D Agent)
       (=> (instance ?B Barking)
        (and (instance ?D Canine) (agent ?B ?D))))))
*/
fof(a4412,axiom,! [B] : (? [D] : ((s_instance(D, s_Agent) & (s_instance(B, s_Barking) => (s_instance(D, s_Canine) & s_agent(B, D))))))).

/*
(instance Menstruation SetOrClass)
*/
fof(a4413,axiom,s_instance(s_Menstruation, s_SetOrClass)).

/*
(subclass Menstruation OrganOrTissueProcess)
*/
fof(a4414,axiom,s_subclass(s_Menstruation, s_OrganOrTissueProcess)).

/*
(instance Organification SetOrClass)
*/
fof(a4415,axiom,s_instance(s_Organification, s_SetOrClass)).

/*
(subclass Organification OrganOrTissueProcess)
*/
fof(a4416,axiom,s_subclass(s_Organification, s_OrganOrTissueProcess)).

/*
(forall (?P)
 (exists (?O)
  (and (instance ?O Entity)
       (=> (instance ?P Organification)
        (and (instance ?O Organ) (result ?P ?O))))))
*/
fof(a4417,axiom,! [P] : (? [O] : ((s_instance(O, s_Entity) & (s_instance(P, s_Organification) => (s_instance(O, s_Organ) & s_result(P, O))))))).

/*
(instance BiologicalConception SetOrClass)
*/
fof(a4418,axiom,s_instance(s_BiologicalConception, s_SetOrClass)).

/*
(subclass BiologicalConception OrganOrTissueProcess)
*/
fof(a4419,axiom,s_subclass(s_BiologicalConception, s_OrganOrTissueProcess)).

/*
(forall (?SR)
 (exists (?C)
  (and (instance ?C Process)
       (=> (instance ?SR SexualReproduction)
        (and (instance ?C BiologicalConception) (subProcess ?C ?SR))))))
*/
fof(a4420,axiom,! [SR] : (? [C] : ((s_instance(C, s_Process) & (s_instance(SR, s_SexualReproduction) => (s_instance(C, s_BiologicalConception) & s_subProcess(C, SR))))))).

/*
(instance ContraceptiveDevice SetOrClass)
*/
fof(a4421,axiom,s_instance(s_ContraceptiveDevice, s_SetOrClass)).

/*
(subclass ContraceptiveDevice Device)
*/
fof(a4422,axiom,s_subclass(s_ContraceptiveDevice, s_Device)).

/*
(forall (?C)
 (=> (instance ?C ContraceptiveDevice)
  (hasPurpose ?C
   (exists (?M)
    (and (instance ?M Mating)
         (and (patient ?M ?C)
              (not (exists (?SR)
                    (and (instance ?SR BiologicalConception)
                         (result ?M ?SR))))))))))
*/
%% no translation to TPTP available.

/*
(instance BirdEgg SetOrClass)
*/
fof(a4423,axiom,s_instance(s_BirdEgg, s_SetOrClass)).

/*
(subclass BirdEgg Egg)
*/
fof(a4424,axiom,s_subclass(s_BirdEgg, s_Egg)).

/*
(forall (?E)
 (exists (?SR ?B)
  (and (and (instance ?B Agent) (instance ?SR Process))
       (=> (instance ?E BirdEgg)
        (and (instance ?SR SexualReproduction)
             (and (agent ?SR ?B)
                  (and (instance ?B Bird) (result ?SR ?E))))))))
*/
fof(a4425,axiom,! [E] : (? [SR,B] : (((s_instance(B, s_Agent) & s_instance(SR, s_Process)) & (s_instance(E, s_BirdEgg) => (s_instance(SR, s_SexualReproduction) & (s_agent(SR, B) & (s_instance(B, s_Bird) & s_result(SR, E))))))))).

/*
(subclass Biopsy DiagnosticProcess)
*/
fof(a4426,axiom,s_subclass(s_Biopsy, s_DiagnosticProcess)).

/*
(instance Biopsy SetOrClass)
*/
fof(a4427,axiom,s_instance(s_Biopsy, s_SetOrClass)).

/*
(subclass Biopsy Removing)
*/
fof(a4428,axiom,s_subclass(s_Biopsy, s_Removing)).

/*
(forall (?BS ?B)
 (=> (instance ?BS Entity)
  (=> (and (instance ?B Biopsy) (patient ?B ?BS))
   (instance ?BS BodySubstance))))
*/
fof(a4429,axiom,! [BS,B] : ((s_instance(BS, s_Entity) => ((s_instance(B, s_Biopsy) & s_patient(B, BS)) => s_instance(BS, s_BodySubstance))))).

/*
(subclass Mating OrganismProcess)
*/
fof(a4430,axiom,s_subclass(s_Mating, s_OrganismProcess)).

/*
(instance Mating SetOrClass)
*/
fof(a4431,axiom,s_instance(s_Mating, s_SetOrClass)).

/*
(subclass Raping Mating)
*/
fof(a4432,axiom,s_subclass(s_Raping, s_Mating)).

/*
(instance Raping SetOrClass)
*/
fof(a4433,axiom,s_instance(s_Raping, s_SetOrClass)).

/*
(instance CriminalAction SetOrClass)
*/
fof(a4434,axiom,s_instance(s_CriminalAction, s_SetOrClass)).

/*
(subclass Raping CriminalAction)
*/
fof(a4435,axiom,s_subclass(s_Raping, s_CriminalAction)).

/*
(forall (?R)
 (exists (?A)
  (and (instance ?A CognitiveAgent)
       (=> (instance ?R Raping)
        (and (experiencer ?R ?A) (not (wants ?A ?R)))))))
*/
fof(a4436,axiom,! [R] : (? [A] : ((s_instance(A, s_CognitiveAgent) & (s_instance(R, s_Raping) => (s_experiencer(R, A) & (~ s_wants(A, R)))))))).

/*
(instance LayingEggs SetOrClass)
*/
fof(a4437,axiom,s_instance(s_LayingEggs, s_SetOrClass)).

/*
(subclass LayingEggs OrganismProcess)
*/
fof(a4438,axiom,s_subclass(s_LayingEggs, s_OrganismProcess)).

/*
(forall (?A ?L)
 (exists (?E)
  (and (instance ?E Object)
       (=> (instance ?A Agent)
        (=> (and (instance ?L LayingEggs) (experiencer ?L ?A))
         (and (instance ?E Egg)
              (and (patient ?L ?E)
                   (and (holdsDuring (BeginFn (WhenFn ?L))
                         (part ?E ?A))
                        (holdsDuring (EndFn (WhenFn ?L))
                         (not (part ?E ?A)))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?A ?L)
 (=> (instance ?A Agent)
  (=> (and (instance ?L LayingEggs) (experiencer ?L ?A))
   (and (instance ?A Animal) (attribute ?A Female)))))
*/
fof(a4439,axiom,! [A,L] : ((s_instance(A, s_Agent) => ((s_instance(L, s_LayingEggs) & s_experiencer(L, A)) => (s_instance(A, s_Animal) & s_attribute(A, s_Female)))))).

/*
(instance affiliatedOrganization BinaryPredicate)
*/
fof(a4440,axiom,s_instance(s_affiliatedOrganization_m, s_BinaryPredicate)).

/*
(instance ideologicalAffiliationOfOrganization BinaryPredicate)
*/
fof(a4441,axiom,s_instance(s_ideologicalAffiliationOfOrganization_m, s_BinaryPredicate)).

/*
(instance religiousAffiliationOfOrganization BinaryPredicate)
*/
fof(a4442,axiom,s_instance(s_religiousAffiliationOfOrganization_m, s_BinaryPredicate)).

/*
(instance allegiance BinaryPredicate)
*/
fof(a4443,axiom,s_instance(s_allegiance_m, s_BinaryPredicate)).

/*
(instance ancestorOrganization BinaryPredicate)
*/
fof(a4444,axiom,s_instance(s_ancestorOrganization_m, s_BinaryPredicate)).

/*
(instance ancestorOrganization TransitiveRelation)
*/
fof(a4445,axiom,s_instance(s_ancestorOrganization_m, s_TransitiveRelation)).

/*
(instance ancestorOrganization IrreflexiveRelation)
*/
fof(a4446,axiom,s_instance(s_ancestorOrganization_m, s_IrreflexiveRelation)).

/*
(instance ancestorOrganization PartialValuedRelation)
*/
fof(a4447,axiom,s_instance(s_ancestorOrganization_m, s_PartialValuedRelation)).

/*
(disjointRelation ancestorOrganization subOrganization)
*/
fof(a4448,axiom,s_disjointRelation(s_ancestorOrganization_m, s_subOrganization_m)).

/*
(instance anniversary BinaryPredicate)
*/
fof(a4449,axiom,s_instance(s_anniversary_m, s_BinaryPredicate)).

/*
(instance anniversary TemporalRelation)
*/
fof(a4450,axiom,s_instance(s_anniversary_m, s_TemporalRelation)).

/*
(instance birthday BinaryPredicate)
*/
fof(a4451,axiom,s_instance(s_birthday_m, s_BinaryPredicate)).

/*
(subrelation birthday anniversary)
*/
fof(a4452,axiom,s_subrelation(s_birthday_m, s_anniversary_m)).

/*
(instance birthplace BinaryPredicate)
*/
fof(a4453,axiom,s_instance(s_birthplace_m, s_BinaryPredicate)).

/*
(forall (?PLACE ?INDIV)
 (exists (?BIRTH)
  (and (instance ?BIRTH Process)
       (=> (and (instance ?INDIV Animal) (instance ?PLACE Object))
        (=> (birthplace ?INDIV ?PLACE)
         (and (instance ?BIRTH Birth)
              (and (experiencer ?BIRTH ?INDIV)
                   (eventLocated ?BIRTH ?PLACE))))))))
*/
fof(a4454,axiom,! [PLACE,INDIV] : (? [BIRTH] : ((s_instance(BIRTH, s_Process) & ((s_instance(INDIV, s_Animal) & s_instance(PLACE, s_Object)) => (s_birthplace(INDIV, PLACE) => (s_instance(BIRTH, s_Birth) & (s_experiencer(BIRTH, INDIV) & s_eventLocated(BIRTH, PLACE))))))))).

/*
(instance birthdate BinaryPredicate)
*/
fof(a4455,axiom,s_instance(s_birthdate_m, s_BinaryPredicate)).

/*
(forall (?D ?P)
 (exists (?B)
  (and (instance ?B Process)
       (=> (and (instance ?P Human) (instance ?D Day))
        (=> (birthdate ?P ?D)
         (and (instance ?B Birth)
              (and (experiencer ?B ?P) (date ?B ?D))))))))
*/
fof(a4456,axiom,! [D,P] : (? [B] : ((s_instance(B, s_Process) & ((s_instance(P, s_Human) & s_instance(D, s_Day)) => (s_birthdate(P, D) => (s_instance(B, s_Birth) & (s_experiencer(B, P) & s_date(B, D))))))))).

/*
(instance deathdate BinaryPredicate)
*/
fof(a4457,axiom,s_instance(s_deathdate_m, s_BinaryPredicate)).

/*
(forall (?T ?P)
 (exists (?D)
  (and (instance ?D Process)
       (=> (and (instance ?P Human) (instance ?T Day))
        (=> (deathdate ?P ?T)
         (and (instance ?D Death)
              (and (experiencer ?D ?P) (date ?D ?T))))))))
*/
fof(a4458,axiom,! [T,P] : (? [D] : ((s_instance(D, s_Process) & ((s_instance(P, s_Human) & s_instance(T, s_Day)) => (s_deathdate(P, T) => (s_instance(D, s_Death) & (s_experiencer(D, P) & s_date(D, T))))))))).

/*
(instance deathplace BinaryPredicate)
*/
fof(a4459,axiom,s_instance(s_deathplace_m, s_BinaryPredicate)).

/*
(forall (?L ?P)
 (exists (?D)
  (and (instance ?D Process)
       (=> (and (instance ?P Animal) (instance ?L Object))
        (=> (deathplace ?P ?L)
         (and (instance ?D Death)
              (and (experiencer ?D ?P) (eventLocated ?D ?L))))))))
*/
fof(a4460,axiom,! [L,P] : (? [D] : ((s_instance(D, s_Process) & ((s_instance(P, s_Animal) & s_instance(L, s_Object)) => (s_deathplace(P, L) => (s_instance(D, s_Death) & (s_experiencer(D, P) & s_eventLocated(D, L))))))))).

/*
(instance equipmentCount TernaryPredicate)
*/
fof(a4461,axiom,s_instance(s_equipmentCount_m, s_TernaryPredicate)).

/*
(domainSubclass equipmentCount 2 Device)
*/
fof(a4462,axiom,s_domainSubclass(s_equipmentCount_m, 2, s_Device)).

/*
(instance equipmentType BinaryPredicate)
*/
fof(a4463,axiom,s_instance(s_equipmentType_m, s_BinaryPredicate)).

/*
(forall (?T ?O)
 (exists (?D)
  (and (instance ?D Object)
       (=>
        (and (instance ?O Artifact) (instance ?T Device)
             (instance ?T SetOrClass))
        (=> (equipmentType ?O ?T)
         (and (instance ?D ?T) (or (part ?D ?O) (connected ?D ?O))))))))
*/
fof(a4464,axiom,! [T,O] : (? [D] : ((s_instance(D, s_Object) & ((s_instance(O, s_Artifact) & s_instance(T, s_Device) & s_instance(T, s_SetOrClass)) => (s_equipmentType(O, T) => (s_instance(D, T) & (s_part(D, O) | s_connected(D, O))))))))).

/*
(forall (?O ?C ?T)
 (=>
  (and (instance ?T Device) (subclass ?T Device) (instance ?C Quantity)
       (instance ?O Artifact))
  (=> (equipmentCount ?O ?T ?C) (equipmentType ?O ?T))))
*/
fof(a4465,axiom,! [O,C,T] : (((s_instance(T, s_Device) & s_subclass(T, s_Device) & s_instance(C, s_Quantity) & s_instance(O, s_Artifact)) => (s_equipmentCount(O, T, C) => s_equipmentType(O, T))))).

/*
(forall (?T ?O)
 (exists (?C)
  (and (instance ?C Quantity)
       (=>
        (and (instance ?O Artifact) (instance ?T Device)
             (subclass ?T Device))
        (=> (equipmentType ?O ?T)
         (and (greaterThanOrEqualTo ?C 1)
              (equipmentCount ?O ?T ?C)))))))
*/
fof(a4466,axiom,! [T,O] : (? [C] : ((s_instance(C, s_Quantity) & ((s_instance(O, s_Artifact) & s_instance(T, s_Device) & s_subclass(T, s_Device)) => (s_equipmentType(O, T) => (s_greaterThanOrEqualTo(C, 1) & s_equipmentCount(O, T, C)))))))).

/*
(instance grammaticalRelation BinaryPredicate)
*/
fof(a4467,axiom,s_instance(s_grammaticalRelation_m, s_BinaryPredicate)).

/*
(instance distanceOnPath BinaryPredicate)
*/
fof(a4468,axiom,s_instance(s_distanceOnPath_m, s_BinaryPredicate)).

/*
(instance inString BinaryPredicate)
*/
fof(a4469,axiom,s_instance(s_inString_m, s_BinaryPredicate)).

/*
(subrelation inString part)
*/
fof(a4470,axiom,s_subrelation(s_inString_m, s_part_m)).

/*
(forall (?STRING ?CHAR)
 (=>
  (and (instance ?STRING SymbolicString)
       (and (part ?CHAR ?STRING) (instance ?CHAR Character)))
  (inString ?CHAR ?STRING)))
*/
fof(a4471,axiom,! [STRING,CHAR] : (((s_instance(STRING, s_SymbolicString) & (s_part(CHAR, STRING) & s_instance(CHAR, s_Character))) => s_inString(CHAR, STRING)))).

/*
(instance subString AntisymmetricRelation)
*/
fof(a4472,axiom,s_instance(s_subString_m, s_AntisymmetricRelation)).

/*
(instance subString ReflexiveRelation)
*/
fof(a4473,axiom,s_instance(s_subString_m, s_ReflexiveRelation)).

/*
(instance subString BinaryPredicate)
*/
fof(a4474,axiom,s_instance(s_subString_m, s_BinaryPredicate)).

/*
(instance subString TotalValuedRelation)
*/
fof(a4475,axiom,s_instance(s_subString_m, s_TotalValuedRelation)).

/*
(subrelation subString part)
*/
fof(a4476,axiom,s_subrelation(s_subString_m, s_part_m)).

/*
(forall (?L2 ?S2 ?S1 ?L1)
 (=>
  (and (instance ?L1 Quantity) (instance ?S1 SymbolicString)
       (instance ?S2 SymbolicString) (instance ?L2 Quantity))
  (=>
   (and (subString ?S1 ?S2)
        (and (equal ?L1 (StringLengthFn ?S1))
             (equal ?L2 (StringLengthFn ?S2))))
   (lessThanOrEqualTo ?L1 ?L2))))
*/
fof(a4477,axiom,! [L2,S2,S1,L1] : (((s_instance(L1, s_Quantity) & s_instance(S1, s_SymbolicString) & s_instance(S2, s_SymbolicString) & s_instance(L2, s_Quantity)) => ((s_subString(S1, S2) & ((L1 = s_StringLengthFn(S1)) & (L2 = s_StringLengthFn(S2)))) => lesseq(L1, L2))))).

/*
(forall (?CH ?S2 ?S1)
 (=>
  (and (instance ?S1 SymbolicString) (instance ?S2 SymbolicString)
       (instance ?CH Character))
  (=> (and (subString ?S1 ?S2) (inString ?CH ?S1)) (inString ?CH ?S2))))
*/
fof(a4478,axiom,! [CH,S2,S1] : (((s_instance(S1, s_SymbolicString) & s_instance(S2, s_SymbolicString) & s_instance(CH, s_Character)) => ((s_subString(S1, S2) & s_inString(CH, S1)) => s_inString(CH, S2))))).

/*
(instance SubstringFn TernaryFunction)
*/
fof(a4479,axiom,s_instance(s_SubstringFn_m, s_TernaryFunction)).

/*
(instance SubstringFn PartialValuedRelation)
*/
fof(a4480,axiom,s_instance(s_SubstringFn_m, s_PartialValuedRelation)).

/*
(instance SubstringFn SingleValuedRelation)
*/
fof(a4481,axiom,s_instance(s_SubstringFn_m, s_SingleValuedRelation)).

/*
(range SubstringFn SymbolicString)
*/
fof(a4482,axiom,s_range(s_SubstringFn_m, s_SymbolicString)).

/*
(forall (?LEN ?SUB ?STRING ?END ?START)
 (=>
  (and (instance ?START NonnegativeInteger)
       (instance ?END NonnegativeInteger)
       (instance ?STRING SymbolicString) (instance ?SUB Entity)
       (instance ?LEN Quantity))
  (=>
   (and (equal ?SUB (SubstringFn ?STRING ?START ?END))
        (equal ?LEN (StringLengthFn ?STRING)))
   (and (lessThanOrEqualTo ?START ?END)
        (and (lessThan ?START ?LEN) (lessThanOrEqualTo ?END ?LEN))))))
*/
fof(a4483,axiom,! [LEN,SUB,STRING,END,START] : (((s_instance(START, s_NonnegativeInteger) & s_instance(END, s_NonnegativeInteger) & s_instance(STRING, s_SymbolicString) & s_instance(SUB, s_Entity) & s_instance(LEN, s_Quantity)) => (((SUB = s_SubstringFn(STRING, START, END)) & (LEN = s_StringLengthFn(STRING))) => (lesseq(START, END) & (less(START, LEN) & lesseq(END, LEN))))))).

/*
(instance StringLengthFn UnaryFunction)
*/
fof(a4484,axiom,s_instance(s_StringLengthFn_m, s_UnaryFunction)).

/*
(instance StringLengthFn TotalValuedRelation)
*/
fof(a4485,axiom,s_instance(s_StringLengthFn_m, s_TotalValuedRelation)).

/*
(instance StringLengthFn SingleValuedRelation)
*/
fof(a4486,axiom,s_instance(s_StringLengthFn_m, s_SingleValuedRelation)).

/*
(range StringLengthFn NonnegativeInteger)
*/
fof(a4487,axiom,s_range(s_StringLengthFn_m, s_NonnegativeInteger)).

/*
(instance stringLength BinaryPredicate)
*/
fof(a4488,axiom,s_instance(s_stringLength_m, s_BinaryPredicate)).

/*
(instance stringLength TotalValuedRelation)
*/
fof(a4489,axiom,s_instance(s_stringLength_m, s_TotalValuedRelation)).

/*
(instance stringLength SingleValuedRelation)
*/
fof(a4490,axiom,s_instance(s_stringLength_m, s_SingleValuedRelation)).

/*
(instance stringLength AsymmetricRelation)
*/
fof(a4491,axiom,s_instance(s_stringLength_m, s_AsymmetricRelation)).

/*
(forall (?STRING ?INT)
 (=>
  (and (instance ?INT NonnegativeInteger)
       (instance ?STRING SymbolicString))
  (<=> (stringLength ?INT ?STRING)
   (equal ?INT (StringLengthFn ?STRING)))))
*/
fof(a4492,axiom,! [STRING,INT] : (((s_instance(INT, s_NonnegativeInteger) & s_instance(STRING, s_SymbolicString)) => (s_stringLength(INT, STRING) <=> (INT = s_StringLengthFn(STRING)))))).

/*
(instance StringConcatenateFn BinaryFunction)
*/
fof(a4493,axiom,s_instance(s_StringConcatenateFn_m, s_BinaryFunction)).

/*
(instance StringConcatenateFn TotalValuedRelation)
*/
fof(a4494,axiom,s_instance(s_StringConcatenateFn_m, s_TotalValuedRelation)).

/*
(instance StringConcatenateFn SingleValuedRelation)
*/
fof(a4495,axiom,s_instance(s_StringConcatenateFn_m, s_SingleValuedRelation)).

/*
(range StringConcatenateFn SymbolicString)
*/
fof(a4496,axiom,s_range(s_StringConcatenateFn_m, s_SymbolicString)).

/*
(instance stringConcatenation TernaryPredicate)
*/
fof(a4497,axiom,s_instance(s_stringConcatenation_m, s_TernaryPredicate)).

/*
(instance stringConcatenation TotalValuedRelation)
*/
fof(a4498,axiom,s_instance(s_stringConcatenation_m, s_TotalValuedRelation)).

/*
(instance stringConcatenation SingleValuedRelation)
*/
fof(a4499,axiom,s_instance(s_stringConcatenation_m, s_SingleValuedRelation)).

/*
(forall (?S3 ?S2 ?S1)
 (=>
  (and (instance ?S1 SymbolicString) (instance ?S2 SymbolicString)
       (instance ?S3 SymbolicString))
  (<=> (stringConcatenation ?S1 ?S1 ?S3)
   (equal ?S3 (StringConcatenateFn ?S1 ?S2)))))
*/
fof(a4500,axiom,! [S3,S2,S1] : (((s_instance(S1, s_SymbolicString) & s_instance(S2, s_SymbolicString) & s_instance(S3, s_SymbolicString)) => (s_stringConcatenation(S1, S1, S3) <=> (S3 = s_StringConcatenateFn(S1, S2)))))).

/*
(instance precedesInString TernaryPredicate)
*/
fof(a4501,axiom,s_instance(s_precedesInString_m, s_TernaryPredicate)).

/*
(subrelation stringConcatenation precedesInString)
*/
fof(a4502,axiom,s_subrelation(s_stringConcatenation_m, s_precedesInString_m)).

/*
(forall (?S1 ?S3 ?S2)
 (=>
  (and (instance ?S2 SymbolicString) (instance ?S3 SymbolicString)
       (instance ?S1 SymbolicString))
  (=> (precedesInString ?S1 ?S2 ?S3)
   (and (subString ?S1 ?S3) (subString ?S2 ?S3)))))
*/
fof(a4503,axiom,! [S1,S3,S2] : (((s_instance(S2, s_SymbolicString) & s_instance(S3, s_SymbolicString) & s_instance(S1, s_SymbolicString)) => (s_precedesInString(S1, S2, S3) => (s_subString(S1, S3) & s_subString(S2, S3)))))).

/*
(forall (?S3 ?S1 ?S4 ?S2)
 (=>
  (and (instance ?S2 SymbolicString) (instance ?S4 SymbolicString)
       (instance ?S1 SymbolicString) (instance ?S3 SymbolicString))
  (=>
   (and (precedesInString ?S1 ?S2 ?S4) (precedesInString ?S2 ?S3 ?S4))
   (precedesInString ?S1 ?S3 ?S4))))
*/
fof(a4504,axiom,! [S3,S1,S4,S2] : (((s_instance(S2, s_SymbolicString) & s_instance(S4, s_SymbolicString) & s_instance(S1, s_SymbolicString) & s_instance(S3, s_SymbolicString)) => ((s_precedesInString(S1, S2, S4) & s_precedesInString(S2, S3, S4)) => s_precedesInString(S1, S3, S4))))).

/*
(subclass Descriptor ContentBearingObject)
*/
fof(a4505,axiom,s_subclass(s_Descriptor, s_ContentBearingObject)).

/*
(subclass Name Descriptor)
*/
fof(a4506,axiom,s_subclass(s_Name, s_Descriptor)).

/*
(instance Identifier SetOrClass)
*/
fof(a4507,axiom,s_instance(s_Identifier, s_SetOrClass)).

/*
(instance Name SetOrClass)
*/
fof(a4508,axiom,s_instance(s_Name, s_SetOrClass)).

/*
(subclass Identifier Name)
*/
fof(a4509,axiom,s_subclass(s_Identifier, s_Name)).

/*
(instance Descriptor SetOrClass)
*/
fof(a4510,axiom,s_instance(s_Descriptor, s_SetOrClass)).

/*
(subclass PlaceDescriptor Descriptor)
*/
fof(a4511,axiom,s_subclass(s_PlaceDescriptor, s_Descriptor)).

/*
(subclass DescriptorPart ContentBearingObject)
*/
fof(a4512,axiom,s_subclass(s_DescriptorPart, s_ContentBearingObject)).

/*
(instance DescriptorPart SetOrClass)
*/
fof(a4513,axiom,s_instance(s_DescriptorPart, s_SetOrClass)).

/*
(subclass NamePart DescriptorPart)
*/
fof(a4514,axiom,s_subclass(s_NamePart, s_DescriptorPart)).

/*
(instance IdentifierPart SetOrClass)
*/
fof(a4515,axiom,s_instance(s_IdentifierPart, s_SetOrClass)).

/*
(instance NamePart SetOrClass)
*/
fof(a4516,axiom,s_instance(s_NamePart, s_SetOrClass)).

/*
(subclass IdentifierPart NamePart)
*/
fof(a4517,axiom,s_subclass(s_IdentifierPart, s_NamePart)).

/*
(instance PlaceDescriptor SetOrClass)
*/
fof(a4518,axiom,s_instance(s_PlaceDescriptor, s_SetOrClass)).

/*
(subclass PlaceID PlaceDescriptor)
*/
fof(a4519,axiom,s_subclass(s_PlaceID, s_PlaceDescriptor)).

/*
(subclass LocalizablePlaceID PlaceID)
*/
fof(a4520,axiom,s_subclass(s_LocalizablePlaceID, s_PlaceID)).

/*
(subclass PlaceAddress PlaceID)
*/
fof(a4521,axiom,s_subclass(s_PlaceAddress, s_PlaceID)).

/*
(subclass ContactSite Object)
*/
fof(a4522,axiom,s_subclass(s_ContactSite, s_Object)).

/*
(subclass TelephonyDevice ContactSite)
*/
fof(a4523,axiom,s_subclass(s_TelephonyDevice, s_ContactSite)).

/*
(instance CommunicationDevice SetOrClass)
*/
fof(a4524,axiom,s_instance(s_CommunicationDevice, s_SetOrClass)).

/*
(subclass TelephonyDevice CommunicationDevice)
*/
fof(a4525,axiom,s_subclass(s_TelephonyDevice, s_CommunicationDevice)).

/*
(subclass TelephonyDevice ElectricDevice)
*/
fof(a4526,axiom,s_subclass(s_TelephonyDevice, s_ElectricDevice)).

/*
(instance TelephonyDevice SetOrClass)
*/
fof(a4527,axiom,s_instance(s_TelephonyDevice, s_SetOrClass)).

/*
(subclass Telephone TelephonyDevice)
*/
fof(a4528,axiom,s_subclass(s_Telephone, s_TelephonyDevice)).

/*
(instance canonicalPlaceName TernaryPredicate)
*/
fof(a4529,axiom,s_instance(s_canonicalPlaceName_m, s_TernaryPredicate)).

/*
(forall (?PLACE ?STR ?LANG)
 (=>
  (and (instance ?LANG Language) (instance ?STR SymbolicString)
       (instance ?PLACE Region))
  (=> (canonicalPlaceName ?PLACE ?LANG ?STR) (names ?STR ?PLACE))))
*/
fof(a4530,axiom,! [PLACE,STR,LANG] : (((s_instance(LANG, s_Language) & s_instance(STR, s_SymbolicString) & s_instance(PLACE, s_Region)) => (s_canonicalPlaceName(PLACE, LANG, STR) => s_names(STR, PLACE))))).

/*
(subclass PostalPlace StationaryArtifact)
*/
fof(a4531,axiom,s_subclass(s_PostalPlace, s_StationaryArtifact)).

/*
(subclass PostalPlace LocalizablePlace)
*/
fof(a4532,axiom,s_subclass(s_PostalPlace, s_LocalizablePlace)).

/*
(subclass PostalPlace ContactSite)
*/
fof(a4533,axiom,s_subclass(s_PostalPlace, s_ContactSite)).

/*
(instance MilitaryInstallation SetOrClass)
*/
fof(a4534,axiom,s_instance(s_MilitaryInstallation, s_SetOrClass)).

/*
(subclass MilitaryInstallation PostalPlace)
*/
fof(a4535,axiom,s_subclass(s_MilitaryInstallation, s_PostalPlace)).

/*
(subclass Residence PostalPlace)
*/
fof(a4536,axiom,s_subclass(s_Residence, s_PostalPlace)).

/*
(instance PlaceOfCommerce SetOrClass)
*/
fof(a4537,axiom,s_instance(s_PlaceOfCommerce, s_SetOrClass)).

/*
(instance PostalPlace SetOrClass)
*/
fof(a4538,axiom,s_instance(s_PostalPlace, s_SetOrClass)).

/*
(subclass PlaceOfCommerce PostalPlace)
*/
fof(a4539,axiom,s_subclass(s_PlaceOfCommerce, s_PostalPlace)).

/*
(instance siteForContact AsymmetricRelation)
*/
fof(a4540,axiom,s_instance(s_siteForContact_m, s_AsymmetricRelation)).

/*
(instance siteForContact BinaryPredicate)
*/
fof(a4541,axiom,s_instance(s_siteForContact_m, s_BinaryPredicate)).

/*
(instance postContactSite AsymmetricRelation)
*/
fof(a4542,axiom,s_instance(s_postContactSite_m, s_AsymmetricRelation)).

/*
(instance postContactSite BinaryPredicate)
*/
fof(a4543,axiom,s_instance(s_postContactSite_m, s_BinaryPredicate)).

/*
(subrelation postContactSite siteForContact)
*/
fof(a4544,axiom,s_subrelation(s_postContactSite_m, s_siteForContact_m)).

/*
(instance unitNumber BinaryPredicate)
*/
fof(a4545,axiom,s_instance(s_unitNumber_m, s_BinaryPredicate)).

/*
(instance floorCode BinaryPredicate)
*/
fof(a4546,axiom,s_instance(s_floorCode_m, s_BinaryPredicate)).

/*
(forall (?FLRCODE ?PLACE ?UNITSTR)
 (exists (?UNIT ?FLOOR)
  (and (and (instance ?FLOOR Object) (instance ?UNIT Physical))
       (=>
        (and (instance ?UNITSTR SymbolicString)
             (instance ?PLACE PostalPlace)
             (instance ?FLRCODE SymbolicString))
        (=>
         (and (unitNumber ?UNITSTR ?PLACE) (floorCode ?FLRCODE ?PLACE))
         (and (instance ?FLOOR BuildingLevel)
              (and (instance ?UNIT Room)
                   (and (located ?UNIT ?FLOOR)
                        (and (part ?FLOOR ?PLACE)
                             (and (names ?UNITSTR ?UNIT)
                                  (names ?FLRCODE ?FLOOR)))))))))))
*/
fof(a4547,axiom,! [FLRCODE,PLACE,UNITSTR] : (? [UNIT,FLOOR] : (((s_instance(FLOOR, s_Object) & s_instance(UNIT, s_Physical)) & ((s_instance(UNITSTR, s_SymbolicString) & s_instance(PLACE, s_PostalPlace) & s_instance(FLRCODE, s_SymbolicString)) => ((s_unitNumber(UNITSTR, PLACE) & s_floorCode(FLRCODE, PLACE)) => (s_instance(FLOOR, s_BuildingLevel) & (s_instance(UNIT, s_Room) & (s_located(UNIT, FLOOR) & (s_part(FLOOR, PLACE) & (s_names(UNITSTR, UNIT) & s_names(FLRCODE, FLOOR)))))))))))).

/*
(forall (?BLDG ?PLACE ?UNITSTR)
 (exists (?UNIT)
  (exists (?FLR)
   (and (instance ?FLR SymbolicString)
        (and (instance ?UNIT Physical)
             (=>
              (and (instance ?UNITSTR SymbolicString)
                   (instance ?PLACE PostalPlace)
                   (instance ?BLDG Object))
              (=>
               (and (unitNumber ?UNITSTR ?PLACE)
                    (not (floorCode ?FLR ?PLACE)))
               (and (instance ?UNIT Room)
                    (and (names ?UNITSTR ?UNIT)
                         (located ?UNIT ?BLDG))))))))))
*/
fof(a4548,axiom,! [BLDG,PLACE,UNITSTR] : (? [UNIT] : (? [FLR] : ((s_instance(FLR, s_SymbolicString) & (s_instance(UNIT, s_Physical) & ((s_instance(UNITSTR, s_SymbolicString) & s_instance(PLACE, s_PostalPlace) & s_instance(BLDG, s_Object)) => ((s_unitNumber(UNITSTR, PLACE) & (~ s_floorCode(FLR, PLACE))) => (s_instance(UNIT, s_Room) & (s_names(UNITSTR, UNIT) & s_located(UNIT, BLDG))))))))))).

/*
(instance Neighborhood SetOrClass)
*/
fof(a4549,axiom,s_instance(s_Neighborhood, s_SetOrClass)).

/*
(subclass Neighborhood GeographicArea)
*/
fof(a4550,axiom,s_subclass(s_Neighborhood, s_GeographicArea)).

/*
(forall (?PLACE)
 (exists (?AREA)
  (and (instance ?AREA GeographicArea)
       (=> (instance ?PLACE Neighborhood)
        (geographicSubregion ?PLACE ?AREA)))))
*/
fof(a4551,axiom,! [PLACE] : (? [AREA] : ((s_instance(AREA, s_GeographicArea) & (s_instance(PLACE, s_Neighborhood) => s_geographicSubregion(PLACE, AREA)))))).

/*
(instance postNeighborhood BinaryPredicate)
*/
fof(a4552,axiom,s_instance(s_postNeighborhood_m, s_BinaryPredicate)).

/*
(instance postNeighborhood AsymmetricRelation)
*/
fof(a4553,axiom,s_instance(s_postNeighborhood_m, s_AsymmetricRelation)).

/*
(subrelation postNeighborhood located)
*/
fof(a4554,axiom,s_subrelation(s_postNeighborhood_m, s_located_m)).

/*
(forall (?GEO ?PLACE)
 (<=>
  (and (located ?PLACE ?GEO)
       (and (instance ?PLACE PostalPlace)
            (instance ?GEO Neighborhood)))
  (postNeighborhood ?PLACE ?GEO)))
*/
fof(a4555,axiom,! [GEO,PLACE] : (((s_located(PLACE, GEO) & (s_instance(PLACE, s_PostalPlace) & s_instance(GEO, s_Neighborhood))) <=> s_postNeighborhood(PLACE, GEO)))).

/*
(forall (?CITY ?NEIGHBORHOOD ?PLACE)
 (=>
  (and (instance ?NEIGHBORHOOD Neighborhood)
       (instance ?PLACE PostalPlace))
  (=>
   (and (postNeighborhood ?PLACE ?NEIGHBORHOOD)
        (and (geographicSubregion ?NEIGHBORHOOD ?CITY)
             (instance ?CITY City)))
   (postCity ?PLACE ?CITY))))
*/
fof(a4556,axiom,! [CITY,NEIGHBORHOOD,PLACE] : (((s_instance(NEIGHBORHOOD, s_Neighborhood) & s_instance(PLACE, s_PostalPlace)) => ((s_postNeighborhood(PLACE, NEIGHBORHOOD) & (s_geographicSubregion(NEIGHBORHOOD, CITY) & s_instance(CITY, s_City))) => s_postCity(PLACE, CITY))))).

/*
(forall (?STATE ?NEIGHBORHOOD ?PLACE)
 (=>
  (and (instance ?NEIGHBORHOOD Neighborhood)
       (instance ?PLACE PostalPlace))
  (=>
   (and (postNeighborhood ?PLACE ?NEIGHBORHOOD)
        (and (geographicSubregion ?NEIGHBORHOOD ?STATE)
             (instance ?STATE StateOrProvince)))
   (postDistrict ?PLACE ?STATE))))
*/
fof(a4557,axiom,! [STATE,NEIGHBORHOOD,PLACE] : (((s_instance(NEIGHBORHOOD, s_Neighborhood) & s_instance(PLACE, s_PostalPlace)) => ((s_postNeighborhood(PLACE, NEIGHBORHOOD) & (s_geographicSubregion(NEIGHBORHOOD, STATE) & s_instance(STATE, s_StateOrProvince))) => s_postDistrict(PLACE, STATE))))).

/*
(instance postCountry AsymmetricRelation)
*/
fof(a4558,axiom,s_instance(s_postCountry_m, s_AsymmetricRelation)).

/*
(instance postCountry BinaryPredicate)
*/
fof(a4559,axiom,s_instance(s_postCountry_m, s_BinaryPredicate)).

/*
(subrelation postCountry located)
*/
fof(a4560,axiom,s_subrelation(s_postCountry_m, s_located_m)).

/*
(forall (?COUNTRY ?PLACE)
 (=>
  (and (instance ?PLACE PostalPlace)
       (instance ?COUNTRY GeopoliticalArea))
  (=> (postCountry ?PLACE ?COUNTRY)
   (or (instance ?COUNTRY Nation)
       (instance ?COUNTRY DependencyOrSpecialSovereigntyArea)))))
*/
fof(a4561,axiom,! [COUNTRY,PLACE] : (((s_instance(PLACE, s_PostalPlace) & s_instance(COUNTRY, s_GeopoliticalArea)) => (s_postCountry(PLACE, COUNTRY) => (s_instance(COUNTRY, s_Nation) | s_instance(COUNTRY, s_DependencyOrSpecialSovereigntyArea)))))).

/*
(forall (?GEO ?PLACE)
 (<=>
  (and (located ?PLACE ?GEO)
       (and (instance ?PLACE PostalPlace)
            (or (instance ?GEO Nation)
                (instance ?GEO DependencyOrSpecialSovereigntyArea))))
  (postCountry ?PLACE ?GEO)))
*/
fof(a4562,axiom,! [GEO,PLACE] : (((s_located(PLACE, GEO) & (s_instance(PLACE, s_PostalPlace) & (s_instance(GEO, s_Nation) | s_instance(GEO, s_DependencyOrSpecialSovereigntyArea)))) <=> s_postCountry(PLACE, GEO)))).

/*
(forall (?AREA ?CITY ?PLACE)
 (=> (and (instance ?CITY City) (instance ?PLACE PostalPlace))
  (=>
   (and (postCity ?PLACE ?CITY)
        (and (geographicSubregion ?CITY ?AREA)
             (instance ?AREA StateOrProvince)))
   (postDistrict ?PLACE ?AREA))))
*/
fof(a4563,axiom,! [AREA,CITY,PLACE] : (((s_instance(CITY, s_City) & s_instance(PLACE, s_PostalPlace)) => ((s_postCity(PLACE, CITY) & (s_geographicSubregion(CITY, AREA) & s_instance(AREA, s_StateOrProvince))) => s_postDistrict(PLACE, AREA))))).

/*
(forall (?AREA ?CITY ?PLACE)
 (=> (and (instance ?CITY City) (instance ?PLACE PostalPlace))
  (=>
   (and (postCity ?PLACE ?CITY)
        (and (geographicSubregion ?CITY ?AREA)
             (or (instance ?AREA Nation)
                 (instance ?AREA DependencyOrSpecialSovereigntyArea))))
   (postCountry ?PLACE ?AREA))))
*/
fof(a4564,axiom,! [AREA,CITY,PLACE] : (((s_instance(CITY, s_City) & s_instance(PLACE, s_PostalPlace)) => ((s_postCity(PLACE, CITY) & (s_geographicSubregion(CITY, AREA) & (s_instance(AREA, s_Nation) | s_instance(AREA, s_DependencyOrSpecialSovereigntyArea)))) => s_postCountry(PLACE, AREA))))).

/*
(instance postDistrict AsymmetricRelation)
*/
fof(a4565,axiom,s_instance(s_postDistrict_m, s_AsymmetricRelation)).

/*
(instance postDistrict BinaryPredicate)
*/
fof(a4566,axiom,s_instance(s_postDistrict_m, s_BinaryPredicate)).

/*
(subrelation postDistrict located)
*/
fof(a4567,axiom,s_subrelation(s_postDistrict_m, s_located_m)).

/*
(forall (?GEO ?PLACE)
 (<=>
  (and (located ?PLACE ?GEO)
       (and (instance ?PLACE PostalPlace)
            (instance ?GEO StateOrProvince)))
  (postDistrict ?PLACE ?GEO)))
*/
fof(a4568,axiom,! [GEO,PLACE] : (((s_located(PLACE, GEO) & (s_instance(PLACE, s_PostalPlace) & s_instance(GEO, s_StateOrProvince))) <=> s_postDistrict(PLACE, GEO)))).

/*
(instance postCity AsymmetricRelation)
*/
fof(a4569,axiom,s_instance(s_postCity_m, s_AsymmetricRelation)).

/*
(instance postCity BinaryPredicate)
*/
fof(a4570,axiom,s_instance(s_postCity_m, s_BinaryPredicate)).

/*
(subrelation postCity located)
*/
fof(a4571,axiom,s_subrelation(s_postCity_m, s_located_m)).

/*
(forall (?GEO ?PLACE)
 (<=>
  (and (located ?PLACE ?GEO)
       (and (instance ?PLACE PostalPlace) (instance ?GEO City)))
  (postCity ?PLACE ?GEO)))
*/
fof(a4572,axiom,! [GEO,PLACE] : (((s_located(PLACE, GEO) & (s_instance(PLACE, s_PostalPlace) & s_instance(GEO, s_City))) <=> s_postCity(PLACE, GEO)))).

/*
(instance PostcodeArea SetOrClass)
*/
fof(a4573,axiom,s_instance(s_PostcodeArea, s_SetOrClass)).

/*
(subclass PostcodeArea LocalizablePlace)
*/
fof(a4574,axiom,s_subclass(s_PostcodeArea, s_LocalizablePlace)).

/*
(forall (?AREA)
 (exists (?GEO)
  (and (instance ?GEO GeographicArea)
       (=> (instance ?AREA PostcodeArea)
        (geographicSubregion ?AREA ?GEO)))))
*/
fof(a4575,axiom,! [AREA] : (? [GEO] : ((s_instance(GEO, s_GeographicArea) & (s_instance(AREA, s_PostcodeArea) => s_geographicSubregion(AREA, GEO)))))).

/*
(instance postPostcodeArea AsymmetricRelation)
*/
fof(a4576,axiom,s_instance(s_postPostcodeArea_m, s_AsymmetricRelation)).

/*
(instance postPostcodeArea BinaryPredicate)
*/
fof(a4577,axiom,s_instance(s_postPostcodeArea_m, s_BinaryPredicate)).

/*
(subrelation postPostcodeArea located)
*/
fof(a4578,axiom,s_subrelation(s_postPostcodeArea_m, s_located_m)).

/*
(forall (?AREA ?PLACE)
 (<=>
  (and (located ?PLACE ?AREA)
       (and (instance ?PLACE PostalPlace)
            (instance ?AREA PostcodeArea)))
  (postPostcodeArea ?PLACE ?AREA)))
*/
fof(a4579,axiom,! [AREA,PLACE] : (((s_located(PLACE, AREA) & (s_instance(PLACE, s_PostalPlace) & s_instance(AREA, s_PostcodeArea))) <=> s_postPostcodeArea(PLACE, AREA)))).

/*
(forall (?CITY ?AREA ?PLACE)
 (=> (and (instance ?AREA PostcodeArea) (instance ?PLACE PostalPlace))
  (=>
   (and (postPostcodeArea ?PLACE ?AREA)
        (and (geographicSubregion ?AREA ?CITY) (instance ?CITY City)))
   (postCity ?PLACE ?CITY))))
*/
fof(a4580,axiom,! [CITY,AREA,PLACE] : (((s_instance(AREA, s_PostcodeArea) & s_instance(PLACE, s_PostalPlace)) => ((s_postPostcodeArea(PLACE, AREA) & (s_geographicSubregion(AREA, CITY) & s_instance(CITY, s_City))) => s_postCity(PLACE, CITY))))).

/*
(forall (?GEO ?AREA ?PLACE)
 (=> (and (instance ?AREA PostcodeArea) (instance ?PLACE PostalPlace))
  (=>
   (and (postPostcodeArea ?PLACE ?AREA)
        (and (geographicSubregion ?AREA ?GEO)
             (instance ?GEO StateOrProvince)))
   (postDistrict ?PLACE ?GEO))))
*/
fof(a4581,axiom,! [GEO,AREA,PLACE] : (((s_instance(AREA, s_PostcodeArea) & s_instance(PLACE, s_PostalPlace)) => ((s_postPostcodeArea(PLACE, AREA) & (s_geographicSubregion(AREA, GEO) & s_instance(GEO, s_StateOrProvince))) => s_postDistrict(PLACE, GEO))))).

/*
(instance postStreet AsymmetricRelation)
*/
fof(a4582,axiom,s_instance(s_postStreet_m, s_AsymmetricRelation)).

/*
(instance postStreet BinaryPredicate)
*/
fof(a4583,axiom,s_instance(s_postStreet_m, s_BinaryPredicate)).

/*
(forall (?ROADWAY ?POSTPLACE)
 (=>
  (and (instance ?POSTPLACE PostalPlace) (instance ?ROADWAY Roadway))
  (=> (postStreet ?POSTPLACE ?ROADWAY)
   (orientation ?POSTPLACE ?ROADWAY Adjacent))))
*/
fof(a4584,axiom,! [ROADWAY,POSTPLACE] : (((s_instance(POSTPLACE, s_PostalPlace) & s_instance(ROADWAY, s_Roadway)) => (s_postStreet(POSTPLACE, ROADWAY) => s_orientation(POSTPLACE, ROADWAY, s_Adjacent))))).

/*
(instance postStreetNumber AsymmetricRelation)
*/
fof(a4585,axiom,s_instance(s_postStreetNumber_m, s_AsymmetricRelation)).

/*
(instance postStreetNumber BinaryPredicate)
*/
fof(a4586,axiom,s_instance(s_postStreetNumber_m, s_BinaryPredicate)).

/*
(instance postPostOfficeBox AsymmetricRelation)
*/
fof(a4587,axiom,s_instance(s_postPostOfficeBox_m, s_AsymmetricRelation)).

/*
(instance postPostOfficeBox BinaryPredicate)
*/
fof(a4588,axiom,s_instance(s_postPostOfficeBox_m, s_BinaryPredicate)).

/*
(subclass PostalAddressText PlaceAddress)
*/
fof(a4589,axiom,s_subclass(s_PostalAddressText, s_PlaceAddress)).

/*
(instance LocalizablePlaceID SetOrClass)
*/
fof(a4590,axiom,s_instance(s_LocalizablePlaceID, s_SetOrClass)).

/*
(subclass PostalAddressText LocalizablePlaceID)
*/
fof(a4591,axiom,s_subclass(s_PostalAddressText, s_LocalizablePlaceID)).

/*
(subclass PostalAddressText SymbolicString)
*/
fof(a4592,axiom,s_subclass(s_PostalAddressText, s_SymbolicString)).

/*
(instance PostalAddressText SetOrClass)
*/
fof(a4593,axiom,s_instance(s_PostalAddressText, s_SetOrClass)).

/*
(subclass PostalAddressText LinguisticExpression)
*/
fof(a4594,axiom,s_subclass(s_PostalAddressText, s_LinguisticExpression)).

/*
(instance postAddressText AsymmetricRelation)
*/
fof(a4595,axiom,s_instance(s_postAddressText_m, s_AsymmetricRelation)).

/*
(instance postAddressText BinaryPredicate)
*/
fof(a4596,axiom,s_instance(s_postAddressText_m, s_BinaryPredicate)).

/*
(instance telecomContactDevice AsymmetricRelation)
*/
fof(a4597,axiom,s_instance(s_telecomContactDevice_m, s_AsymmetricRelation)).

/*
(instance telecomContactDevice BinaryPredicate)
*/
fof(a4598,axiom,s_instance(s_telecomContactDevice_m, s_BinaryPredicate)).

/*
(subrelation telecomContactDevice siteForContact)
*/
fof(a4599,axiom,s_subrelation(s_telecomContactDevice_m, s_siteForContact_m)).

/*
(instance PlaceID SetOrClass)
*/
fof(a4600,axiom,s_instance(s_PlaceID, s_SetOrClass)).

/*
(subclass VirtualPlaceID PlaceID)
*/
fof(a4601,axiom,s_subclass(s_VirtualPlaceID, s_PlaceID)).

/*
(instance PlaceAddress SetOrClass)
*/
fof(a4602,axiom,s_instance(s_PlaceAddress, s_SetOrClass)).

/*
(subclass VirtualAddress PlaceAddress)
*/
fof(a4603,axiom,s_subclass(s_VirtualAddress, s_PlaceAddress)).

/*
(instance VirtualPlaceID SetOrClass)
*/
fof(a4604,axiom,s_instance(s_VirtualPlaceID, s_SetOrClass)).

/*
(subclass VirtualAddress VirtualPlaceID)
*/
fof(a4605,axiom,s_subclass(s_VirtualAddress, s_VirtualPlaceID)).

/*
(instance VirtualAddress SetOrClass)
*/
fof(a4606,axiom,s_instance(s_VirtualAddress, s_SetOrClass)).

/*
(subclass TelecomNumber VirtualAddress)
*/
fof(a4607,axiom,s_subclass(s_TelecomNumber, s_VirtualAddress)).

/*
(subclass TelecomNumber SymbolicString)
*/
fof(a4608,axiom,s_subclass(s_TelecomNumber, s_SymbolicString)).

/*
(instance TelecomNumber SetOrClass)
*/
fof(a4609,axiom,s_instance(s_TelecomNumber, s_SetOrClass)).

/*
(instance ContactSite SetOrClass)
*/
fof(a4610,axiom,s_instance(s_ContactSite, s_SetOrClass)).

/*
(subclass TelecomNumber ContactSite)
*/
fof(a4611,axiom,s_subclass(s_TelecomNumber, s_ContactSite)).

/*
(instance deviceTelecomNumber BinaryPredicate)
*/
fof(a4612,axiom,s_instance(s_deviceTelecomNumber_m, s_BinaryPredicate)).

/*
(instance deviceTelecomNumber AsymmetricRelation)
*/
fof(a4613,axiom,s_instance(s_deviceTelecomNumber_m, s_AsymmetricRelation)).

/*
(instance telecomCoreNumber BinaryPredicate)
*/
fof(a4614,axiom,s_instance(s_telecomCoreNumber_m, s_BinaryPredicate)).

/*
(instance telecomCoreNumber AsymmetricRelation)
*/
fof(a4615,axiom,s_instance(s_telecomCoreNumber_m, s_AsymmetricRelation)).

/*
(subrelation telecomCoreNumber subString)
*/
fof(a4616,axiom,s_subrelation(s_telecomCoreNumber_m, s_subString_m)).

/*
(instance telecomCountryCode BinaryPredicate)
*/
fof(a4617,axiom,s_instance(s_telecomCountryCode_m, s_BinaryPredicate)).

/*
(instance telecomCountryCode AsymmetricRelation)
*/
fof(a4618,axiom,s_instance(s_telecomCountryCode_m, s_AsymmetricRelation)).

/*
(subrelation telecomCountryCode subString)
*/
fof(a4619,axiom,s_subrelation(s_telecomCountryCode_m, s_subString_m)).

/*
(instance telecomAreaCode BinaryPredicate)
*/
fof(a4620,axiom,s_instance(s_telecomAreaCode_m, s_BinaryPredicate)).

/*
(instance telecomAreaCode AsymmetricRelation)
*/
fof(a4621,axiom,s_instance(s_telecomAreaCode_m, s_AsymmetricRelation)).

/*
(subrelation telecomAreaCode subString)
*/
fof(a4622,axiom,s_subrelation(s_telecomAreaCode_m, s_subString_m)).

/*
(instance telecomCode2 BinaryPredicate)
*/
fof(a4623,axiom,s_instance(s_telecomCode2_m, s_BinaryPredicate)).

/*
(instance telecomCode2 AsymmetricRelation)
*/
fof(a4624,axiom,s_instance(s_telecomCode2_m, s_AsymmetricRelation)).

/*
(subrelation telecomCode2 subString)
*/
fof(a4625,axiom,s_subrelation(s_telecomCode2_m, s_subString_m)).

/*
(instance telecomExtension BinaryPredicate)
*/
fof(a4626,axiom,s_instance(s_telecomExtension_m, s_BinaryPredicate)).

/*
(instance telecomExtension AsymmetricRelation)
*/
fof(a4627,axiom,s_instance(s_telecomExtension_m, s_AsymmetricRelation)).

/*
(forall (?AC ?WHOLE ?CN)
 (=>
  (and (instance ?CN SymbolicString) (instance ?WHOLE TelecomNumber)
       (instance ?AC SymbolicString))
  (=> (and (telecomCoreNumber ?CN ?WHOLE) (telecomAreaCode ?AC ?WHOLE))
   (precedesInString ?AC ?CN ?WHOLE))))
*/
fof(a4628,axiom,! [AC,WHOLE,CN] : (((s_instance(CN, s_SymbolicString) & s_instance(WHOLE, s_TelecomNumber) & s_instance(AC, s_SymbolicString)) => ((s_telecomCoreNumber(CN, WHOLE) & s_telecomAreaCode(AC, WHOLE)) => s_precedesInString(AC, CN, WHOLE))))).

/*
(forall (?CC ?WHOLE ?CN)
 (=>
  (and (instance ?CN SymbolicString) (instance ?WHOLE TelecomNumber)
       (instance ?CC SymbolicString))
  (=>
   (and (telecomCoreNumber ?CN ?WHOLE) (telecomCountryCode ?CC ?WHOLE))
   (precedesInString ?CC ?CN ?WHOLE))))
*/
fof(a4629,axiom,! [CC,WHOLE,CN] : (((s_instance(CN, s_SymbolicString) & s_instance(WHOLE, s_TelecomNumber) & s_instance(CC, s_SymbolicString)) => ((s_telecomCoreNumber(CN, WHOLE) & s_telecomCountryCode(CC, WHOLE)) => s_precedesInString(CC, CN, WHOLE))))).

/*
(forall (?CC ?WHOLE ?AC)
 (=>
  (and (instance ?AC SymbolicString) (instance ?WHOLE TelecomNumber)
       (instance ?CC SymbolicString))
  (=>
   (and (telecomAreaCode ?AC ?WHOLE) (telecomCountryCode ?CC ?WHOLE))
   (precedesInString ?CC ?AC ?WHOLE))))
*/
fof(a4630,axiom,! [CC,WHOLE,AC] : (((s_instance(AC, s_SymbolicString) & s_instance(WHOLE, s_TelecomNumber) & s_instance(CC, s_SymbolicString)) => ((s_telecomAreaCode(AC, WHOLE) & s_telecomCountryCode(CC, WHOLE)) => s_precedesInString(CC, AC, WHOLE))))).

/*
(forall (?EX ?WHOLE ?CN)
 (=>
  (and (instance ?CN SymbolicString) (instance ?WHOLE TelecomNumber)
       (instance ?EX SymbolicString))
  (=>
   (and (telecomCoreNumber ?CN ?WHOLE) (telecomExtension ?EX ?WHOLE))
   (precedesInString ?CN ?EX ?WHOLE))))
*/
fof(a4631,axiom,! [EX,WHOLE,CN] : (((s_instance(CN, s_SymbolicString) & s_instance(WHOLE, s_TelecomNumber) & s_instance(EX, s_SymbolicString)) => ((s_telecomCoreNumber(CN, WHOLE) & s_telecomExtension(EX, WHOLE)) => s_precedesInString(CN, EX, WHOLE))))).

/*
(forall (?AC ?WHOLE ?C2)
 (=>
  (and (instance ?C2 SymbolicString) (instance ?WHOLE TelecomNumber)
       (instance ?AC SymbolicString))
  (=> (and (telecomCode2 ?C2 ?WHOLE) (telecomAreaCode ?AC ?WHOLE))
   (precedesInString ?AC ?C2 ?WHOLE))))
*/
fof(a4632,axiom,! [AC,WHOLE,C2] : (((s_instance(C2, s_SymbolicString) & s_instance(WHOLE, s_TelecomNumber) & s_instance(AC, s_SymbolicString)) => ((s_telecomCode2(C2, WHOLE) & s_telecomAreaCode(AC, WHOLE)) => s_precedesInString(AC, C2, WHOLE))))).

/*
(forall (?CC ?WHOLE ?C2)
 (=>
  (and (instance ?C2 SymbolicString) (instance ?WHOLE TelecomNumber)
       (instance ?CC SymbolicString))
  (=> (and (telecomCode2 ?C2 ?WHOLE) (telecomCountryCode ?CC ?WHOLE))
   (precedesInString ?CC ?C2 ?WHOLE))))
*/
fof(a4633,axiom,! [CC,WHOLE,C2] : (((s_instance(C2, s_SymbolicString) & s_instance(WHOLE, s_TelecomNumber) & s_instance(CC, s_SymbolicString)) => ((s_telecomCode2(C2, WHOLE) & s_telecomCountryCode(CC, WHOLE)) => s_precedesInString(CC, C2, WHOLE))))).

/*
(instance telephoneNumber BinaryPredicate)
*/
fof(a4634,axiom,s_instance(s_telephoneNumber_m, s_BinaryPredicate)).

/*
(instance telephoneNumber AsymmetricRelation)
*/
fof(a4635,axiom,s_instance(s_telephoneNumber_m, s_AsymmetricRelation)).

/*
(forall (?AGENT ?NUMBER)
 (=> (and (instance ?NUMBER TelecomNumber) (instance ?AGENT Agent))
  (=> (telephoneNumber ?NUMBER ?AGENT)
   (siteForContact ?NUMBER ?AGENT))))
*/
fof(a4636,axiom,! [AGENT,NUMBER] : (((s_instance(NUMBER, s_TelecomNumber) & s_instance(AGENT, s_Agent)) => (s_telephoneNumber(NUMBER, AGENT) => s_siteForContact(NUMBER, AGENT))))).

/*
(instance personalPhoneNumber BinaryPredicate)
*/
fof(a4637,axiom,s_instance(s_personalPhoneNumber_m, s_BinaryPredicate)).

/*
(instance personalPhoneNumber AsymmetricRelation)
*/
fof(a4638,axiom,s_instance(s_personalPhoneNumber_m, s_AsymmetricRelation)).

/*
(subrelation personalPhoneNumber telephoneNumber)
*/
fof(a4639,axiom,s_subrelation(s_personalPhoneNumber_m, s_telephoneNumber_m)).

/*
(forall (?TIME ?NUMBER ?DEVICE ?AGENT)
 (=>
  (and (instance ?TIME TimePosition) (instance ?NUMBER TelecomNumber)
       (instance ?AGENT Agent))
  (=>
   (and (instance ?DEVICE Telephone)
        (holdsDuring ?TIME
         (and (possesses ?AGENT ?DEVICE)
              (deviceTelecomNumber ?NUMBER ?DEVICE))))
   (holdsDuring ?TIME (telephoneNumber ?NUMBER ?AGENT)))))
*/
%% no translation to TPTP available.

/*
(instance homePhoneNumber BinaryPredicate)
*/
fof(a4640,axiom,s_instance(s_homePhoneNumber_m, s_BinaryPredicate)).

/*
(instance homePhoneNumber AsymmetricRelation)
*/
fof(a4641,axiom,s_instance(s_homePhoneNumber_m, s_AsymmetricRelation)).

/*
(subrelation homePhoneNumber telephoneNumber)
*/
fof(a4642,axiom,s_subrelation(s_homePhoneNumber_m, s_telephoneNumber_m)).

/*
(forall (?TIME ?DEVICE ?PLACE ?AGENT ?NUMBER)
 (=>
  (and (instance ?NUMBER TelecomNumber) (instance ?AGENT Human)
       (instance ?PLACE PermanentResidence)
       (instance ?DEVICE TelephonyDevice)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (deviceTelecomNumber ?NUMBER ?DEVICE)
         (and (homePhoneNumber ?NUMBER ?AGENT)
              (and (located ?DEVICE ?PLACE)
                   (instance ?PLACE PermanentResidence)))))
   (holdsDuring ?TIME (home ?AGENT ?PLACE)))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?DEVICE ?PLACE ?AGENT ?NUMBER)
 (=>
  (and (instance ?TIME TimePosition) (instance ?DEVICE TelephonyDevice)
       (instance ?NUMBER TelecomNumber))
  (=>
   (and (instance ?AGENT Human)
        (holdsDuring ?TIME
         (and (deviceTelecomNumber ?NUMBER ?DEVICE)
              (and (telephoneNumber ?NUMBER ?AGENT)
                   (and (located ?DEVICE ?PLACE)
                        (instance ?PLACE Residence))))))
   (holdsDuring ?TIME (inhabits ?AGENT ?PLACE)))))
*/
%% no translation to TPTP available.

/*
(instance workPhoneNumber BinaryPredicate)
*/
fof(a4643,axiom,s_instance(s_workPhoneNumber_m, s_BinaryPredicate)).

/*
(instance workPhoneNumber AsymmetricRelation)
*/
fof(a4644,axiom,s_instance(s_workPhoneNumber_m, s_AsymmetricRelation)).

/*
(subrelation workPhoneNumber telephoneNumber)
*/
fof(a4645,axiom,s_subrelation(s_workPhoneNumber_m, s_telephoneNumber_m)).

/*
(instance FixedPhone SetOrClass)
*/
fof(a4646,axiom,s_instance(s_FixedPhone, s_SetOrClass)).

/*
(subclass FixedPhone Telephone)
*/
fof(a4647,axiom,s_subclass(s_FixedPhone, s_Telephone)).

/*
(instance ReceiverDevice SetOrClass)
*/
fof(a4648,axiom,s_instance(s_ReceiverDevice, s_SetOrClass)).

/*
(subclass MobileCellPhone ReceiverDevice)
*/
fof(a4649,axiom,s_subclass(s_MobileCellPhone, s_ReceiverDevice)).

/*
(subclass MobileCellPhone Telephone)
*/
fof(a4650,axiom,s_subclass(s_MobileCellPhone, s_Telephone)).

/*
(instance mobilePhoneNumber BinaryPredicate)
*/
fof(a4651,axiom,s_instance(s_mobilePhoneNumber_m, s_BinaryPredicate)).

/*
(instance mobilePhoneNumber AsymmetricRelation)
*/
fof(a4652,axiom,s_instance(s_mobilePhoneNumber_m, s_AsymmetricRelation)).

/*
(subrelation mobilePhoneNumber telephoneNumber)
*/
fof(a4653,axiom,s_subrelation(s_mobilePhoneNumber_m, s_telephoneNumber_m)).

/*
(forall (?TIME ?AGENT ?DEVICE ?NUMBER)
 (=>
  (and (instance ?NUMBER TelecomNumber)
       (instance ?DEVICE TelephonyDevice) (instance ?AGENT Agent)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (deviceTelecomNumber ?NUMBER ?DEVICE)
         (mobilePhoneNumber ?NUMBER ?AGENT)))
   (instance ?DEVICE MobileCellPhone))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?AGENT ?DEVICE ?NUMBER)
 (=>
  (and (instance ?TIME TimePosition) (instance ?AGENT Agent)
       (instance ?NUMBER TelecomNumber))
  (=>
   (and (instance ?DEVICE MobileCellPhone)
        (holdsDuring ?TIME
         (and (deviceTelecomNumber ?NUMBER ?DEVICE)
              (telephoneNumber ?NUMBER ?AGENT))))
   (holdsDuring ?TIME (mobilePhoneNumber ?NUMBER ?AGENT)))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?AGENT ?DEVICE ?NUMBER)
 (=>
  (and (instance ?NUMBER TelecomNumber)
       (instance ?DEVICE TelephonyDevice) (instance ?AGENT Agent)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (deviceTelecomNumber ?NUMBER ?DEVICE)
         (mobilePhoneNumber ?NUMBER ?AGENT)))
   (holdsDuring ?TIME (possesses ?AGENT ?DEVICE)))))
*/
%% no translation to TPTP available.

/*
(instance faxNumber BinaryPredicate)
*/
fof(a4654,axiom,s_instance(s_faxNumber_m, s_BinaryPredicate)).

/*
(instance faxNumber AsymmetricRelation)
*/
fof(a4655,axiom,s_instance(s_faxNumber_m, s_AsymmetricRelation)).

/*
(forall (?TIME ?AGENT ?DEVICE ?NUMBER)
 (=>
  (and (instance ?TIME TimePosition) (instance ?AGENT Agent)
       (instance ?NUMBER TelecomNumber))
  (=>
   (and (instance ?DEVICE FaxMachine)
        (holdsDuring ?TIME
         (and (deviceTelecomNumber ?NUMBER ?DEVICE)
              (possesses ?AGENT ?DEVICE))))
   (holdsDuring ?TIME (faxNumber ?NUMBER ?AGENT)))))
*/
%% no translation to TPTP available.

/*
(forall (?TIME ?AGENT ?DEVICE ?NUMBER)
 (=>
  (and (instance ?NUMBER TelecomNumber)
       (instance ?DEVICE TelephonyDevice) (instance ?AGENT Agent)
       (instance ?TIME TimePosition))
  (=>
   (holdsDuring ?TIME
    (and (deviceTelecomNumber ?NUMBER ?DEVICE)
         (faxNumber ?NUMBER ?AGENT)))
   (instance ?DEVICE FaxMachine))))
*/
%% no translation to TPTP available.

/*
(instance FabricIron SetOrClass)
*/
fof(a4656,axiom,s_instance(s_FabricIron, s_SetOrClass)).

/*
(subclass FabricIron Device)
*/
fof(a4657,axiom,s_subclass(s_FabricIron, s_Device)).

/*
(forall (?IRON)
 (exists (?BASE)
  (and (instance ?BASE CorpuscularObject)
       (=> (instance ?IRON FabricIron)
        (and (bottom ?BASE ?IRON)
             (and (material Metal ?BASE) (attribute ?BASE Flat)))))))
*/
fof(a4658,axiom,! [IRON] : (? [BASE] : ((s_instance(BASE, s_CorpuscularObject) & (s_instance(IRON, s_FabricIron) => (s_bottom(BASE, IRON) & (s_material(s_Metal, BASE) & s_attribute(BASE, s_Flat)))))))).

/*
(instance IroningBoard SetOrClass)
*/
fof(a4659,axiom,s_instance(s_IroningBoard, s_SetOrClass)).

/*
(subclass IroningBoard Device)
*/
fof(a4660,axiom,s_subclass(s_IroningBoard, s_Device)).

/*
(forall (?BOARD)
 (=> (instance ?BOARD IroningBoard)
  (hasPurpose ?BOARD
   (exists (?IRON ?FABRIC ?OBJ)
    (and (instance ?IRON Ironing)
         (and (patient ?IRON ?OBJ)
              (and (part ?FABRIC ?OBJ)
                   (and (instance ?FABRIC Fabric)
                        (holdsDuring (WhenFn ?IRON)
                         (orientation ?OBJ ?BOARD On))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Smoothing SurfaceChange)
*/
fof(a4661,axiom,s_subclass(s_Smoothing, s_SurfaceChange)).

/*
(forall (?OBJ ?SMOOTH)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?SMOOTH Smoothing) (patient ?SMOOTH ?OBJ))
         (and (superficialPart ?PART ?OBJ)
              (holdsDuring (EndFn (WhenFn ?SMOOTH))
               (attribute ?PART Smooth))))))))
*/
%% no translation to TPTP available.

/*
(instance Ironing SetOrClass)
*/
fof(a4662,axiom,s_instance(s_Ironing, s_SetOrClass)).

/*
(instance Smoothing SetOrClass)
*/
fof(a4663,axiom,s_instance(s_Smoothing, s_SetOrClass)).

/*
(subclass Ironing Smoothing)
*/
fof(a4664,axiom,s_subclass(s_Ironing, s_Smoothing)).

/*
(forall (?OBJ ?I)
 (exists (?HEAT ?IRON ?PART)
  (and (and (instance ?PART Object) (instance ?IRON Object)
            (instance ?HEAT Process))
       (=> (instance ?OBJ Object)
        (=> (and (instance ?I Ironing) (patient ?I ?OBJ))
         (and (superficialPart ?PART ?OBJ)
              (and (instance ?HEAT Heating)
                   (and (patient ?HEAT ?IRON)
                        (and (patient ?I ?PART)
                             (instrument ?I ?IRON))))))))))
*/
fof(a4665,axiom,! [OBJ,I] : (? [HEAT,IRON,PART] : (((s_instance(PART, s_Object) & s_instance(IRON, s_Object) & s_instance(HEAT, s_Process)) & (s_instance(OBJ, s_Object) => ((s_instance(I, s_Ironing) & s_patient(I, OBJ)) => (s_superficialPart(PART, OBJ) & (s_instance(HEAT, s_Heating) & (s_patient(HEAT, IRON) & (s_patient(I, PART) & s_instrument(I, IRON))))))))))).

/*
(forall (?FABRIC ?OBJ ?I)
 (exists (?IRON ?HEAT)
  (and (and (instance ?HEAT Process) (instance ?IRON Object))
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?I Ironing)
              (and (patient ?I ?OBJ)
                   (and (part ?FABRIC ?OBJ)
                        (instance ?FABRIC Fabric))))
         (and (instance ?HEAT Heating)
              (and (patient ?HEAT ?IRON)
                   (and (instance ?IRON FabricIron)
                        (instrument ?I ?IRON)))))))))
*/
fof(a4666,axiom,! [FABRIC,OBJ,I] : (? [IRON,HEAT] : (((s_instance(HEAT, s_Process) & s_instance(IRON, s_Object)) & (s_instance(OBJ, s_Object) => ((s_instance(I, s_Ironing) & (s_patient(I, OBJ) & (s_part(FABRIC, OBJ) & s_instance(FABRIC, s_Fabric)))) => (s_instance(HEAT, s_Heating) & (s_patient(HEAT, IRON) & (s_instance(IRON, s_FabricIron) & s_instrument(I, IRON)))))))))).

/*
(subclass WhirlpoolTub FluidContainer)
*/
fof(a4667,axiom,s_subclass(s_WhirlpoolTub, s_FluidContainer)).

/*
(forall (?TUB)
 (exists (?VALVE)
  (and (instance ?VALVE Object)
       (=> (instance ?TUB WhirlpoolTub)
        (and (instance ?VALVE PressureControlValve)
             (and (part ?VALVE ?TUB)
                  (hasPurpose ?VALVE
                   (exists (?WATER ?CREATION ?MOTION)
                    (and (instance ?WATER Water)
                         (and (located ?WATER ?TUB)
                              (and (instance ?CREATION Creation)
                                   (and
                                    (instrument ?CREATION ?VALVE)
                                    (and
                                     (result ?CREATION ?MOTION)
                                     (and
                                      (instance ?MOTION Motion)
                                      (located
                                       ?MOTION
                                       ?WATER)))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance HotTub SetOrClass)
*/
fof(a4668,axiom,s_instance(s_HotTub, s_SetOrClass)).

/*
(instance WhirlpoolTub SetOrClass)
*/
fof(a4669,axiom,s_instance(s_WhirlpoolTub, s_SetOrClass)).

/*
(subclass HotTub WhirlpoolTub)
*/
fof(a4670,axiom,s_subclass(s_HotTub, s_WhirlpoolTub)).

/*
(forall (?X ?WATER)
 (=>
  (and (instance ?X HotTub)
       (and (located ?WATER ?X) (instance ?WATER Water)))
  (modalAttribute
   (exists (?HEAT)
    (and (instance ?HEAT Heating)
         (and (instrument ?HEAT ?X) (patient ?HEAT ?WATER))))
   Possibility)))
*/
%% no translation to TPTP available.

/*
(subclass SizeAttribute RelationalAttribute)
*/
fof(a4671,axiom,s_subclass(s_SizeAttribute, s_RelationalAttribute)).

/*
(forall (?ATTR ?X)
 (=> (instance ?X Object)
  (=> (and (attribute ?X ?ATTR) (instance ?ATTR SizeAttribute))
   (instance ?X Object))))
*/
fof(a4672,axiom,! [ATTR,X] : ((s_instance(X, s_Object) => ((s_attribute(X, ATTR) & s_instance(ATTR, s_SizeAttribute)) => s_instance(X, s_Object))))).

/*
(instance SizeAttribute SetOrClass)
*/
fof(a4673,axiom,s_instance(s_SizeAttribute, s_SetOrClass)).

/*
(instance DoubleSize SizeAttribute)
*/
fof(a4674,axiom,s_instance(s_DoubleSize, s_SizeAttribute)).

/*
(forall (?X)
 (=> (and (instance ?X WhirlpoolTub) (attribute ?X DoubleSize))
  (modalAttribute
   (exists (?T1)
    (holdsDuring ?T1
     (exists (?P1 ?P2)
      (and (instance ?P1 Human)
           (and (instance ?P2 Human)
                (and (not (equal ?P1 ?P2))
                     (and (located ?P1 ?X) (located ?P2 ?X))))))))
   Possibility)))
*/
%% no translation to TPTP available.

/*
(instance Kennel SetOrClass)
*/
fof(a4675,axiom,s_instance(s_Kennel, s_SetOrClass)).

/*
(instance TrapOrCage SetOrClass)
*/
fof(a4676,axiom,s_instance(s_TrapOrCage, s_SetOrClass)).

/*
(subclass Kennel TrapOrCage)
*/
fof(a4677,axiom,s_subclass(s_Kennel, s_TrapOrCage)).

/*
(forall (?KENNEL)
 (=> (instance ?KENNEL Kennel)
  (hasPurpose ?KENNEL
   (exists (?ANIMAL ?CONFINING)
    (and (instance ?ANIMAL DomesticAnimal)
         (and (instance ?CONFINING Confining)
              (and (patient ?CONFINING ?ANIMAL)
                   (eventLocated ?CONFINING ?KENNEL))))))))
*/
%% no translation to TPTP available.

/*
(subclass DryingDevice Device)
*/
fof(a4678,axiom,s_subclass(s_DryingDevice, s_Device)).

/*
(forall (?D)
 (=> (instance ?D DryingDevice)
  (hasPurpose ?D
   (exists (?DRYING)
    (and (instance ?DRYING Drying) (instrument ?DRYING ?D))))))
*/
%% no translation to TPTP available.

/*
(instance ClothesDryer SetOrClass)
*/
fof(a4679,axiom,s_instance(s_ClothesDryer, s_SetOrClass)).

/*
(subclass ClothesDryer DryingDevice)
*/
fof(a4680,axiom,s_subclass(s_ClothesDryer, s_DryingDevice)).

/*
(instance ClothesWashingMachine SetOrClass)
*/
fof(a4681,axiom,s_instance(s_ClothesWashingMachine, s_SetOrClass)).

/*
(instance WashingDevice SetOrClass)
*/
fof(a4682,axiom,s_instance(s_WashingDevice, s_SetOrClass)).

/*
(subclass ClothesWashingMachine WashingDevice)
*/
fof(a4683,axiom,s_subclass(s_ClothesWashingMachine, s_WashingDevice)).

/*
(instance DryingDevice SetOrClass)
*/
fof(a4684,axiom,s_instance(s_DryingDevice, s_SetOrClass)).

/*
(subclass HairDryer DryingDevice)
*/
fof(a4685,axiom,s_subclass(s_HairDryer, s_DryingDevice)).

/*
(instance HairDryer SetOrClass)
*/
fof(a4686,axiom,s_instance(s_HairDryer, s_SetOrClass)).

/*
(subclass HairDryer ElectricDevice)
*/
fof(a4687,axiom,s_subclass(s_HairDryer, s_ElectricDevice)).

/*
(forall (?HD)
 (=> (instance ?HD HairDryer)
  (hasPurpose ?HD
   (exists (?HAIR ?DRYING)
    (and (instance ?HAIR Hair)
         (and (instance ?DRYING Drying)
              (and (patient ?DRYING ?HAIR)
                   (instrument ?DRYING ?HD))))))))
*/
%% no translation to TPTP available.

/*
(instance SelfServiceLaundry SetOrClass)
*/
fof(a4688,axiom,s_instance(s_SelfServiceLaundry, s_SetOrClass)).

/*
(subclass SelfServiceLaundry Room)
*/
fof(a4689,axiom,s_subclass(s_SelfServiceLaundry, s_Room)).

/*
(forall (?ROOM)
 (exists (?WASHER ?DRYER)
  (and (and (instance ?DRYER Collection) (instance ?WASHER Collection))
       (=> (instance ?ROOM SelfServiceLaundry)
        (and (instance ?WASHER Collection)
             (and (memberType ?WASHER ClothesWashingMachine)
                  (and (located ?WASHER ?ROOM)
                       (and (instance ?DRYER Collection)
                            (and (memberType ?DRYER ClothesDryer)
                                 (located ?DRYER ?ROOM))))))))))
*/
fof(a4690,axiom,! [ROOM] : (? [WASHER,DRYER] : (((s_instance(DRYER, s_Collection) & s_instance(WASHER, s_Collection)) & (s_instance(ROOM, s_SelfServiceLaundry) => (s_instance(WASHER, s_Collection) & (s_memberType(WASHER, s_ClothesWashingMachine) & (s_located(WASHER, ROOM) & (s_instance(DRYER, s_Collection) & (s_memberType(DRYER, s_ClothesDryer) & s_located(DRYER, ROOM))))))))))).

/*
(forall (?ROOM)
 (=> (instance ?ROOM SelfServiceLaundry)
  (attribute ?ROOM CommunalAttribute)))
*/
fof(a4691,axiom,! [ROOM] : ((s_instance(ROOM, s_SelfServiceLaundry) => s_attribute(ROOM, s_CommunalAttribute)))).

/*
(instance Microwave SetOrClass)
*/
fof(a4692,axiom,s_instance(s_Microwave, s_SetOrClass)).

/*
(subclass Microwave ElectricDevice)
*/
fof(a4693,axiom,s_subclass(s_Microwave, s_ElectricDevice)).

/*
(forall (?M)
 (=> (instance ?M Microwave)
  (hasPurpose ?M
   (exists (?FOOD ?HEATING)
    (and (instance ?FOOD PreparedFood)
         (and (instance ?HEATING Heating)
              (and (instrument ?HEATING ?M)
                   (patient ?HEATING ?FOOD))))))))
*/
%% no translation to TPTP available.

/*
(forall (?M)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (and (instance ?M Microwave) (attribute ?M DeviceOn))
        (and (instance ?PROC RadiatingElectromagnetic)
             (instrument ?PROC ?M))))))
*/
fof(a4694,axiom,! [M] : (? [PROC] : ((s_instance(PROC, s_Process) & ((s_instance(M, s_Microwave) & s_attribute(M, s_DeviceOn)) => (s_instance(PROC, s_RadiatingElectromagnetic) & s_instrument(PROC, M))))))).

/*
(instance SmokeDetector SetOrClass)
*/
fof(a4695,axiom,s_instance(s_SmokeDetector, s_SetOrClass)).

/*
(subclass SmokeDetector Device)
*/
fof(a4696,axiom,s_subclass(s_SmokeDetector, s_Device)).

/*
(forall (?D)
 (=> (instance ?D SmokeDetector)
  (hasPurpose ?D
   (exists (?DISCOVER ?SMOKE)
    (and (instance ?DISCOVER Discovering)
         (and (instrument ?DISCOVER ?D)
              (and (patient ?DISCOVER ?SMOKE)
                   (instance ?SMOKE Smoke))))))))
*/
%% no translation to TPTP available.

/*
(subclass Sprinkler Device)
*/
fof(a4697,axiom,s_subclass(s_Sprinkler, s_Device)).

/*
(instance WaterSprinkler SetOrClass)
*/
fof(a4698,axiom,s_instance(s_WaterSprinkler, s_SetOrClass)).

/*
(instance Sprinkler SetOrClass)
*/
fof(a4699,axiom,s_instance(s_Sprinkler, s_SetOrClass)).

/*
(subclass WaterSprinkler Sprinkler)
*/
fof(a4700,axiom,s_subclass(s_WaterSprinkler, s_Sprinkler)).

/*
(forall (?W)
 (=> (instance ?W WaterSprinkler)
  (hasPurpose ?W
   (exists (?WM) (and (instance ?WM WaterMotion) (origin ?WM ?W))))))
*/
%% no translation to TPTP available.

/*
(instance FireSprinklerSystem SetOrClass)
*/
fof(a4701,axiom,s_instance(s_FireSprinklerSystem, s_SetOrClass)).

/*
(subclass FireSprinklerSystem Collection)
*/
fof(a4702,axiom,s_subclass(s_FireSprinklerSystem, s_Collection)).

/*
(forall (?X)
 (exists (?DETECT ?SPRINKLER)
  (and (and (instance ?SPRINKLER Object) (instance ?DETECT Object))
       (=> (instance ?X FireSprinklerSystem)
        (and (instance ?DETECT SmokeDetector)
             (and (instance ?SPRINKLER WaterSprinkler)
                  (and (member ?DETECT ?X) (member ?SPRINKLER ?X))))))))
*/
fof(a4703,axiom,! [X] : (? [DETECT,SPRINKLER] : (((s_instance(SPRINKLER, s_Object) & s_instance(DETECT, s_Object)) & (s_instance(X, s_FireSprinklerSystem) => (s_instance(DETECT, s_SmokeDetector) & (s_instance(SPRINKLER, s_WaterSprinkler) & (s_member(DETECT, X) & s_member(SPRINKLER, X))))))))).

/*
(forall (?X)
 (exists (?FIRE ?DISCOVER ?WM)
  (and (and (instance ?WM Process) (instance ?DISCOVER Process)
            (instance ?FIRE Entity))
       (=> (instance ?X FireSprinklerSystem)
        (and (instance ?DISCOVER Discovering)
             (and (instance ?FIRE Fire)
                  (and (instrument ?DISCOVER ?X)
                       (and (patient ?DISCOVER ?FIRE)
                            (and (instance ?WM WaterMotion)
                                 (and
                                  (origin ?WM ?X)
                                  (causes ?DISCOVER ?WM)))))))))))
*/
fof(a4704,axiom,! [X] : (? [FIRE,DISCOVER,WM] : (((s_instance(WM, s_Process) & s_instance(DISCOVER, s_Process) & s_instance(FIRE, s_Entity)) & (s_instance(X, s_FireSprinklerSystem) => (s_instance(DISCOVER, s_Discovering) & (s_instance(FIRE, s_Fire) & (s_instrument(DISCOVER, X) & (s_patient(DISCOVER, FIRE) & (s_instance(WM, s_WaterMotion) & (s_origin(WM, X) & s_causes(DISCOVER, WM)))))))))))).

/*
(instance FireExtinguisher SetOrClass)
*/
fof(a4705,axiom,s_instance(s_FireExtinguisher, s_SetOrClass)).

/*
(subclass FireExtinguisher Device)
*/
fof(a4706,axiom,s_subclass(s_FireExtinguisher, s_Device)).

/*
(forall (?FE)
 (=> (instance ?FE FireExtinguisher)
  (hasPurpose ?FE
   (exists (?PROC)
    (and (instance ?PROC (StopFn Fire)) (instrument ?PROC ?FE))))))
*/
%% no translation to TPTP available.

/*
(forall (?FE)
 (exists (?PERSON ?CARRY)
  (and (and (instance ?PERSON Object) (instance ?CARRY Process)
            (subclass ?CARRY Process))
       (=> (instance ?FE FireExtinguisher)
        (and (instance ?PERSON Human)
             (and (instance ?CARRY Carrying)
                  (and (patient ?CARRY ?FE)
                       (capability ?CARRY instrument ?PERSON))))))))
*/
fof(a4707,axiom,! [FE] : (? [PERSON,CARRY] : (((s_instance(PERSON, s_Object) & s_instance(CARRY, s_Process) & s_subclass(CARRY, s_Process)) & (s_instance(FE, s_FireExtinguisher) => (s_instance(PERSON, s_Human) & (s_instance(CARRY, s_Carrying) & (s_patient(CARRY, FE) & s_capability(CARRY, s_instrument_m, PERSON))))))))).

/*
(instance IceMachine SetOrClass)
*/
fof(a4708,axiom,s_instance(s_IceMachine, s_SetOrClass)).

/*
(subclass IceMachine Machine)
*/
fof(a4709,axiom,s_subclass(s_IceMachine, s_Machine)).

/*
(forall (?IM)
 (=> (instance ?IM IceMachine)
  (hasPurpose ?IM
   (exists (?PROC ?ICE)
    (and (instrument ?PROC ?IM)
         (and (result ?PROC ?ICE) (instance ?ICE Ice)))))))
*/
%% no translation to TPTP available.

/*
(instance Clock SetOrClass)
*/
fof(a4710,axiom,s_instance(s_Clock, s_SetOrClass)).

/*
(subclass AlarmClock Clock)
*/
fof(a4711,axiom,s_subclass(s_AlarmClock, s_Clock)).

/*
(forall (?AC)
 (=> (instance ?AC AlarmClock)
  (hasPurpose ?AC
   (exists (?TIME ?M ?Q)
    (and (instance ?M Measuring)
         (and (agent ?M ?AC)
              (and (result ?M ?Q)
                   (and (equal ?Q ?TIME)
                        (holdsDuring (WhenFn ?M)
                         (exists (?S)
                          (and (instance ?S RadiatingSound)
                               (agent ?S ?AC))))))))))))
*/
%% no translation to TPTP available.

/*
(instance AlarmClock SetOrClass)
*/
fof(a4712,axiom,s_instance(s_AlarmClock, s_SetOrClass)).

/*
(subclass AMFMAlarmClock AlarmClock)
*/
fof(a4713,axiom,s_subclass(s_AMFMAlarmClock, s_AlarmClock)).

/*
(instance AMFMAlarmClock SetOrClass)
*/
fof(a4714,axiom,s_instance(s_AMFMAlarmClock, s_SetOrClass)).

/*
(instance RadioReceiver SetOrClass)
*/
fof(a4715,axiom,s_instance(s_RadioReceiver, s_SetOrClass)).

/*
(subclass AMFMAlarmClock RadioReceiver)
*/
fof(a4716,axiom,s_subclass(s_AMFMAlarmClock, s_RadioReceiver)).

/*
(instance ElectricCoffeeMaker SetOrClass)
*/
fof(a4717,axiom,s_instance(s_ElectricCoffeeMaker, s_SetOrClass)).

/*
(subclass ElectricCoffeeMaker ElectricDevice)
*/
fof(a4718,axiom,s_subclass(s_ElectricCoffeeMaker, s_ElectricDevice)).

/*
(forall (?C)
 (=> (instance ?C ElectricCoffeeMaker)
  (hasPurpose ?C
   (exists (?COFFEE ?M)
    (and (instance ?M Making)
         (and (instrument ?M ?C)
              (and (result ?M ?COFFEE) (instance ?COFFEE Coffee))))))))
*/
%% no translation to TPTP available.

/*
(instance Clean SubjectiveAssessmentAttribute)
*/
fof(a4719,axiom,s_instance(s_Clean, s_SubjectiveAssessmentAttribute)).

/*
(instance Dirty SubjectiveAssessmentAttribute)
*/
fof(a4720,axiom,s_instance(s_Dirty, s_SubjectiveAssessmentAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Clean) (instance ?X Object))))
*/
fof(a4721,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Clean) => s_instance(X, s_Object))))).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Dirty) (instance ?X Object))))
*/
fof(a4722,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Dirty) => s_instance(X, s_Object))))).

/*
(contraryAttribute2 Dirty Clean)
*/
fof(a4723,axiom,s_contraryAttribute2(s_Dirty, s_Clean)).

/*
(subclass DataStorageDevice Device)
*/
fof(a4724,axiom,s_subclass(s_DataStorageDevice, s_Device)).

/*
(instance DataStorageDevice SetOrClass)
*/
fof(a4725,axiom,s_instance(s_DataStorageDevice, s_SetOrClass)).

/*
(subclass Whiteboard DataStorageDevice)
*/
fof(a4726,axiom,s_subclass(s_Whiteboard, s_DataStorageDevice)).

/*
(instance Whiteboard SetOrClass)
*/
fof(a4727,axiom,s_instance(s_Whiteboard, s_SetOrClass)).

/*
(instance DisplayArtifact SetOrClass)
*/
fof(a4728,axiom,s_instance(s_DisplayArtifact, s_SetOrClass)).

/*
(subclass Whiteboard DisplayArtifact)
*/
fof(a4729,axiom,s_subclass(s_Whiteboard, s_DisplayArtifact)).

/*
(forall (?OBJ) (=> (instance ?OBJ Whiteboard) (color ?OBJ White)))
*/
fof(a4730,axiom,! [OBJ] : ((s_instance(OBJ, s_Whiteboard) => s_color(OBJ, s_White)))).

/*
(forall (?OBJ) (=> (instance ?OBJ Whiteboard) (structure ?OBJ Flat)))
*/
fof(a4731,axiom,! [OBJ] : ((s_instance(OBJ, s_Whiteboard) => s_structure(OBJ, s_Flat)))).

/*
(forall (?OBJ)
 (=> (instance ?OBJ Whiteboard)
  (hasPurpose ?OBJ
   (exists (?WRITE)
    (and (instance ?WRITE Writing) (destination ?WRITE ?OBJ))))))
*/
%% no translation to TPTP available.

/*
(instance Steam SetOrClass)
*/
fof(a4732,axiom,s_instance(s_Steam, s_SetOrClass)).

/*
(subclass Steam Water)
*/
fof(a4733,axiom,s_subclass(s_Steam, s_Water)).

/*
(forall (?STEAM)
 (exists (?BOIL ?WATER)
  (and (and (instance ?WATER Entity) (instance ?BOIL Process))
       (=> (instance ?STEAM Steam)
        (and (instance ?BOIL Boiling)
             (and (instance ?WATER Water)
                  (and (patient ?BOIL ?WATER)
                       (and (result ?BOIL ?STEAM)
                            (attribute ?STEAM Gas)))))))))
*/
fof(a4734,axiom,! [STEAM] : (? [BOIL,WATER] : (((s_instance(WATER, s_Entity) & s_instance(BOIL, s_Process)) & (s_instance(STEAM, s_Steam) => (s_instance(BOIL, s_Boiling) & (s_instance(WATER, s_Water) & (s_patient(BOIL, WATER) & (s_result(BOIL, STEAM) & s_attribute(STEAM, s_Gas)))))))))).

/*
(instance WaterHeater SetOrClass)
*/
fof(a4735,axiom,s_instance(s_WaterHeater, s_SetOrClass)).

/*
(subclass WaterHeater HeatingDevice)
*/
fof(a4736,axiom,s_subclass(s_WaterHeater, s_HeatingDevice)).

/*
(forall (?X)
 (=> (instance ?X WaterHeater)
  (hasPurpose ?X
   (exists (?HEAT ?WATER)
    (and (instance ?HEAT Heating)
         (and (instance ?WATER Water)
              (and (patient ?HEAT ?WATER) (instrument ?HEAT ?X))))))))
*/
%% no translation to TPTP available.

/*
(instance airTemperature BinaryPredicate)
*/
fof(a4737,axiom,s_instance(s_airTemperature_m, s_BinaryPredicate)).

/*
(subrelation airTemperature measure)
*/
fof(a4738,axiom,s_subrelation(s_airTemperature_m, s_measure_m)).

/*
(subclass TemperatureAttribute SubjectiveAssessmentAttribute)
*/
fof(a4739,axiom,s_subclass(s_TemperatureAttribute, s_SubjectiveAssessmentAttribute)).

/*
(forall (?Y ?X)
 (exists (?TEMP)
  (and (and (instance ?TEMP PhysicalQuantity) (instance ?TEMP Object))
       (=>
        (and (attribute ?X ?Y)
             (and (instance ?Y TemperatureAttribute)
                  (instance ?X Object)))
        (and (measure ?X ?TEMP)
             (and (instance ?TEMP TemperatureMeasure)
                  (attribute ?TEMP ?Y)))))))
*/
fof(a4740,axiom,! [Y,X] : (? [TEMP] : (((s_instance(TEMP, s_PhysicalQuantity) & s_instance(TEMP, s_Object)) & ((s_attribute(X, Y) & (s_instance(Y, s_TemperatureAttribute) & s_instance(X, s_Object))) => (s_measure(X, TEMP) & (s_instance(TEMP, s_TemperatureMeasure) & s_attribute(TEMP, Y)))))))).

/*
(instance ColdTemperature TemperatureAttribute)
*/
fof(a4741,axiom,s_instance(s_ColdTemperature, s_TemperatureAttribute)).

/*
(successorAttributeClosure ColdTemperature HotTemperature)
*/
fof(a4742,axiom,s_successorAttributeClosure(s_ColdTemperature, s_HotTemperature)).

/*
(instance CoolTemperature TemperatureAttribute)
*/
fof(a4743,axiom,s_instance(s_CoolTemperature, s_TemperatureAttribute)).

/*
(successorAttribute ColdTemperature CoolTemperature)
*/
fof(a4744,axiom,s_successorAttribute(s_ColdTemperature, s_CoolTemperature)).

/*
(instance WarmTemperature TemperatureAttribute)
*/
fof(a4745,axiom,s_instance(s_WarmTemperature, s_TemperatureAttribute)).

/*
(successorAttribute CoolTemperature WarmTemperature)
*/
fof(a4746,axiom,s_successorAttribute(s_CoolTemperature, s_WarmTemperature)).

/*
(instance TemperatureAttribute SetOrClass)
*/
fof(a4747,axiom,s_instance(s_TemperatureAttribute, s_SetOrClass)).

/*
(instance HotTemperature TemperatureAttribute)
*/
fof(a4748,axiom,s_instance(s_HotTemperature, s_TemperatureAttribute)).

/*
(successorAttribute WarmTemperature HotTemperature)
*/
fof(a4749,axiom,s_successorAttribute(s_WarmTemperature, s_HotTemperature)).

/*
(forall (?X ?CLASS ?Y)
 (exists (?TEMPX ?TEMPY)
  (and (and (instance ?TEMPY PhysicalQuantity)
            (instance ?TEMPX PhysicalQuantity))
       (=>
        (and (instance ?Y Object) (instance ?CLASS SetOrClass)
             (instance ?X Object))
        (=>
         (and (immediateInstance ?X ?CLASS)
              (and (immediateInstance ?Y ?CLASS)
                   (and (attribute ?X ColdTemperature)
                        (attribute ?Y HotTemperature))))
         (and (measure ?X ?TEMPX)
              (and (instance ?TEMPX TemperatureMeasure)
                   (and (measure ?Y ?TEMPY)
                        (and (instance ?TEMPY TemperatureMeasure)
                             (greaterThan ?TEMPY ?TEMPX))))))))))
*/
fof(a4750,axiom,! [X,CLASS,Y] : (? [TEMPX,TEMPY] : (((s_instance(TEMPY, s_PhysicalQuantity) & s_instance(TEMPX, s_PhysicalQuantity)) & ((s_instance(Y, s_Object) & s_instance(CLASS, s_SetOrClass) & s_instance(X, s_Object)) => ((s_immediateInstance(X, CLASS) & (s_immediateInstance(Y, CLASS) & (s_attribute(X, s_ColdTemperature) & s_attribute(Y, s_HotTemperature)))) => (s_measure(X, TEMPX) & (s_instance(TEMPX, s_TemperatureMeasure) & (s_measure(Y, TEMPY) & (s_instance(TEMPY, s_TemperatureMeasure) & greater(TEMPY, TEMPX))))))))))).

/*
(instance Multilingual RelationalAttribute)
*/
fof(a4751,axiom,s_instance(s_Multilingual, s_RelationalAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Multilingual) (instance ?X Human))))
*/
fof(a4752,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Multilingual) => s_instance(X, s_Human))))).

/*
(forall (?X ?SPEAK)
 (=> (instance ?X Agent)
  (=>
   (and (attribute ?X Multilingual)
        (and (instance ?SPEAK Speaking) (agent ?SPEAK ?X)))
   (modalAttribute
    (exists (?LANG1 ?LANG2)
     (and (instance ?LANG1 SpokenHumanLanguage)
          (and (instance ?LANG2 SpokenHumanLanguage)
               (and (not (equal ?LANG1 ?LANG2))
                    (or (patient ?SPEAK ?LANG1)
                        (patient ?SPEAK ?LANG2))))))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(subclass RecreationalVehicle Vehicle)
*/
fof(a4753,axiom,s_subclass(s_RecreationalVehicle, s_Vehicle)).

/*
(instance RecreationalVehicle SetOrClass)
*/
fof(a4754,axiom,s_instance(s_RecreationalVehicle, s_SetOrClass)).

/*
(instance MobileResidence SetOrClass)
*/
fof(a4755,axiom,s_instance(s_MobileResidence, s_SetOrClass)).

/*
(subclass RecreationalVehicle MobileResidence)
*/
fof(a4756,axiom,s_subclass(s_RecreationalVehicle, s_MobileResidence)).

/*
(forall (?RV)
 (=> (instance ?RV RecreationalVehicle)
  (modalAttribute
   (exists (?BED ?DINING ?KITCHEN)
    (and (instance ?BED Bed)
         (and (instance ?DINING DiningArea)
              (and (instance ?KITCHEN KitchenArea)
                   (and (located ?BED ?RV)
                        (and (located ?DINING ?RV)
                             (located ?KITCHEN ?RV)))))))
   Likely)))
*/
%% no translation to TPTP available.

/*
(instance ElectronicLock SetOrClass)
*/
fof(a4757,axiom,s_instance(s_ElectronicLock, s_SetOrClass)).

/*
(instance Lock SetOrClass)
*/
fof(a4758,axiom,s_instance(s_Lock, s_SetOrClass)).

/*
(subclass ElectronicLock Lock)
*/
fof(a4759,axiom,s_subclass(s_ElectronicLock, s_Lock)).

/*
(forall (?LOCK)
 (=> (instance ?LOCK ElectronicLock)
  (hasPurpose ?LOCK
   (exists (?ES ?PROC)
    (and (instance ?ES ElectronicSignalling)
         (and (destination ?ES ?LOCK)
              (and (instance ?PROC Opening)
                   (and (instrument ?PROC ?LOCK)
                        (before (BeginFn (WhenFn ?ES))
                         (BeginFn (WhenFn ?PROC)))))))))))
*/
%% no translation to TPTP available.

/*
(subclass RunningTrack StationaryArtifact)
*/
fof(a4760,axiom,s_subclass(s_RunningTrack, s_StationaryArtifact)).

/*
(instance RunningTrack SetOrClass)
*/
fof(a4761,axiom,s_instance(s_RunningTrack, s_SetOrClass)).

/*
(subclass RunningTrack LandTransitway)
*/
fof(a4762,axiom,s_subclass(s_RunningTrack, s_LandTransitway)).

/*
(forall (?TRACK)
 (=> (instance ?TRACK RunningTrack)
  (hasPurpose ?TRACK
   (exists (?RUN ?HUMAN)
    (and (instance ?HUMAN Human)
         (and (instance ?RUN Running)
              (and (agent ?RUN ?HUMAN) (path ?RUN ?TRACK))))))))
*/
%% no translation to TPTP available.

/*
(instance KnockLight SetOrClass)
*/
fof(a4763,axiom,s_instance(s_KnockLight, s_SetOrClass)).

/*
(subclass KnockLight Device)
*/
fof(a4764,axiom,s_subclass(s_KnockLight, s_Device)).

/*
(forall (?DOOR ?ROOM ?KL)
 (=>
  (and (instance ?KL KnockLight)
       (and (instance ?ROOM Room)
            (and (located ?KL ?ROOM)
                 (and (instance ?DOOR Door) (part ?DOOR ?ROOM)))))
  (hasPurpose ?KL
   (exists (?SOUND ?LIGHT ?IMPACT)
    (and (instance ?IMPACT Impacting)
         (and (patient ?IMPACT ?DOOR)
              (and (causes ?IMPACT ?SOUND)
                   (and (instance ?SOUND RadiatingSound)
                        (and (agent ?SOUND ?DOOR)
                             (and (causes ?SOUND ?LIGHT)
                                  (and
                                   (instance ?LIGHT RadiatingLight)
                                   (agent ?LIGHT ?KL))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?KL ?DOOR ?LOC ?X)
 (=> (and (instance ?LOC Object) (instance ?X Agent))
  (=>
   (and (instance ?KL KnockLight)
        (and (attribute ?X Deaf)
             (and (located ?KL ?LOC)
                  (and (located ?X ?LOC)
                       (and (instance ?DOOR Door)
                            (part ?DOOR ?LOC))))))
   (hasPurposeForAgent ?KL
    (knows ?X
     (exists (?KNOCK)
      (and (instance ?KNOCK Impacting) (patient ?KNOCK ?DOOR))))
    ?X))))
*/
%% no translation to TPTP available.

/*
(instance PrayerMat SetOrClass)
*/
fof(a4765,axiom,s_instance(s_PrayerMat, s_SetOrClass)).

/*
(instance Rug SetOrClass)
*/
fof(a4766,axiom,s_instance(s_Rug, s_SetOrClass)).

/*
(subclass PrayerMat Rug)
*/
fof(a4767,axiom,s_subclass(s_PrayerMat, s_Rug)).

/*
(forall (?MAT)
 (=> (instance ?MAT PrayerMat)
  (hasPurpose ?MAT
   (exists (?PRAY ?PERSON)
    (and (instance ?PRAY Praying)
         (and (agent ?PRAY ?PERSON)
              (and (instance ?PERSON Human)
                   (holdsDuring (WhenFn ?PRAY)
                    (orientation ?PERSON ?MAT On)))))))))
*/
%% no translation to TPTP available.

/*
(instance VideoGame SetOrClass)
*/
fof(a4768,axiom,s_instance(s_VideoGame, s_SetOrClass)).

/*
(subclass VideoGame Game)
*/
fof(a4769,axiom,s_subclass(s_VideoGame, s_Game)).

/*
(forall (?GAME)
 (exists (?VIDEO)
  (and (instance ?VIDEO Entity)
       (=> (instance ?GAME VideoGame)
        (and (instance ?VIDEO VideoRecording)
             (represents ?VIDEO ?GAME))))))
*/
fof(a4770,axiom,! [GAME] : (? [VIDEO] : ((s_instance(VIDEO, s_Entity) & (s_instance(GAME, s_VideoGame) => (s_instance(VIDEO, s_VideoRecording) & s_represents(VIDEO, GAME))))))).

/*
(instance VideoGamePlayer SetOrClass)
*/
fof(a4771,axiom,s_instance(s_VideoGamePlayer, s_SetOrClass)).

/*
(subclass VideoGamePlayer MediaSystem)
*/
fof(a4772,axiom,s_subclass(s_VideoGamePlayer, s_MediaSystem)).

/*
(forall (?X)
 (=> (instance ?X VideoGamePlayer)
  (hasPurpose ?X
   (exists (?GAME ?RL ?MOVE ?CONTROLLER ?PLAYER)
    (and (instance ?GAME VideoGame)
         (and (instrument ?GAME ?X)
              (and (agent ?GAME ?PLAYER)
                   (and (instance ?MOVE Maneuver)
                        (and (instrument ?MOVE ?CONTROLLER)
                             (and (agent ?MOVE ?PLAYER)
                                  (and
                                   (subProcess ?MOVE ?GAME)
                                   (and
                                    (part ?CONTROLLER ?X)
                                    (and
                                     (instance ?RL RadiatingLight)
                                     (and
                                      (agent ?RL ?X)
                                      (patient ?RL ?GAME)))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance ElectricalOutlet SetOrClass)
*/
fof(a4773,axiom,s_instance(s_ElectricalOutlet, s_SetOrClass)).

/*
(subclass ElectricalOutlet Device)
*/
fof(a4774,axiom,s_subclass(s_ElectricalOutlet, s_Device)).

/*
(forall (?X)
 (exists (?HOLE)
  (and (instance ?HOLE Collection)
       (=> (instance ?X ElectricalOutlet)
        (and (instance ?HOLE Collection)
             (and (memberType ?HOLE Hole) (part ?HOLE ?X)))))))
*/
fof(a4775,axiom,! [X] : (? [HOLE] : ((s_instance(HOLE, s_Collection) & (s_instance(X, s_ElectricalOutlet) => (s_instance(HOLE, s_Collection) & (s_memberType(HOLE, s_Hole) & s_part(HOLE, X)))))))).

/*
(forall (?X)
 (=> (instance ?X ElectricalOutlet)
  (hasPurpose ?X
   (exists (?POWER ?WIRE)
    (and (instance ?POWER PowerSource)
         (and (instance ?WIRE Collection)
              (and (memberType ?WIRE WireLine)
                   (connectsEngineeringComponents ?WIRE ?X
                    ?POWER))))))))
*/
%% no translation to TPTP available.

/*
(instance ElectricalPlug SetOrClass)
*/
fof(a4776,axiom,s_instance(s_ElectricalPlug, s_SetOrClass)).

/*
(instance Plug SetOrClass)
*/
fof(a4777,axiom,s_instance(s_Plug, s_SetOrClass)).

/*
(subclass ElectricalPlug Plug)
*/
fof(a4778,axiom,s_subclass(s_ElectricalPlug, s_Plug)).

/*
(forall (?X) (=> (instance ?X ElectricalPlug) (material Metal ?X)))
*/
fof(a4779,axiom,! [X] : ((s_instance(X, s_ElectricalPlug) => s_material(s_Metal, X)))).

/*
(forall (?X)
 (=> (instance ?X ElectricalPlug)
  (hasPurpose ?X
   (exists (?OUTLET)
    (and (instance ?OUTLET ElectricalOutlet)
         (completelyFills ?X ?OUTLET))))))
*/
%% no translation to TPTP available.

/*
(forall (?DEVICE ?POWER ?OUTLET ?PLUG)
 (exists (?RE)
  (and (instance ?RE Process)
       (=>
        (and (instance ?PLUG ElectricalPlug)
             (and (instance ?DEVICE ElectricDevice)
                  (and (instance ?OUTLET ElectricalOutlet)
                       (and (connectedEngineeringComponents ?DEVICE
                             ?PLUG)
                            (and (completelyFills ?PLUG ?OUTLET)
                                 (and
                                  (instance ?POWER PowerSource)
                                  (connectedEngineeringComponents
                                   ?POWER
                                   ?OUTLET)))))))
        (and (instance ?RE RadiatingElectromagnetic)
             (and (origin ?RE ?POWER) (destination ?RE ?DEVICE)))))))
*/
fof(a4780,axiom,! [DEVICE,POWER,OUTLET,PLUG] : (? [RE] : ((s_instance(RE, s_Process) & ((s_instance(PLUG, s_ElectricalPlug) & (s_instance(DEVICE, s_ElectricDevice) & (s_instance(OUTLET, s_ElectricalOutlet) & (s_connectedEngineeringComponents(DEVICE, PLUG) & (s_completelyFills(PLUG, OUTLET) & (s_instance(POWER, s_PowerSource) & s_connectedEngineeringComponents(POWER, OUTLET))))))) => (s_instance(RE, s_RadiatingElectromagnetic) & (s_origin(RE, POWER) & s_destination(RE, DEVICE)))))))).

/*
(instance OutletAdapter SetOrClass)
*/
fof(a4781,axiom,s_instance(s_OutletAdapter, s_SetOrClass)).

/*
(subclass OutletAdapter Device)
*/
fof(a4782,axiom,s_subclass(s_OutletAdapter, s_Device)).

/*
(forall (?ADAPT ?HOLD)
 (exists (?HOLE)
  (and (instance ?HOLE Collection)
       (=> (instance ?HOLD Object)
        (=> (instance ?ADAPT OutletAdapter)
         (and (instance ?HOLE Collection)
              (and (memberType ?HOLE Hole)
                   (and (part ?HOLD ?ADAPT)
                        (material Metal ?ADAPT)))))))))
*/
fof(a4783,axiom,! [ADAPT,HOLD] : (? [HOLE] : ((s_instance(HOLE, s_Collection) & (s_instance(HOLD, s_Object) => (s_instance(ADAPT, s_OutletAdapter) => (s_instance(HOLE, s_Collection) & (s_memberType(HOLE, s_Hole) & (s_part(HOLD, ADAPT) & s_material(s_Metal, ADAPT)))))))))).

/*
(forall (?ADAPT)
 (=> (instance ?ADAPT OutletAdapter)
  (hasPurpose ?ADAPT
   (exists (?OUTLET ?PLUG)
    (and (instance ?PLUG ElectricalPlug)
         (and (instance ?OUTLET ElectricalOutlet)
              (and (completelyFills ?PLUG ?ADAPT)
                   (and (completelyFills ?ADAPT ?OUTLET)
                        (connectsEngineeringComponents ?ADAPT ?PLUG
                         ?OUTLET)))))))))
*/
%% no translation to TPTP available.

/*
(instance AirConditioner SetOrClass)
*/
fof(a4784,axiom,s_instance(s_AirConditioner, s_SetOrClass)).

/*
(subclass AirConditioner ElectricDevice)
*/
fof(a4785,axiom,s_subclass(s_AirConditioner, s_ElectricDevice)).

/*
(forall (?X)
 (=> (instance ?X AirConditioner)
  (hasPurpose ?X
   (exists (?PROC ?TEMP ?AREA)
    (and (located ?X ?AREA)
         (and (instance ?PROC Process)
              (and (instrument ?PROC ?X)
                   (result ?PROC (airTemperature ?AREA ?TEMP)))))))))
*/
%% no translation to TPTP available.

/*
(instance Surrounded PositionalAttribute)
*/
fof(a4786,axiom,s_instance(s_Surrounded, s_PositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?X)
  (=> (instance ?X SelfConnectedObject)
   (=>
    (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 Object))
    (=> (orientation ?OBJ1 ?OBJ2 Surrounded)
     (=> (side ?X ?OBJ1) (meetsSpatially ?X ?OBJ2)))))))
*/
fof(a4787,axiom,! [OBJ2,OBJ1] : (! [X] : ((s_instance(X, s_SelfConnectedObject) => ((s_instance(OBJ1, s_SelfConnectedObject) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Surrounded) => (s_side(X, OBJ1) => s_meetsSpatially(X, OBJ2)))))))).

/*
(instance Courtyard SetOrClass)
*/
fof(a4788,axiom,s_instance(s_Courtyard, s_SetOrClass)).

/*
(subclass Courtyard StationaryArtifact)
*/
fof(a4789,axiom,s_subclass(s_Courtyard, s_StationaryArtifact)).

/*
(forall (?X)
 (exists (?BLDG)
  (forall (?ROOF)
   (=> (instance ?ROOF SelfConnectedObject)
    (and (instance ?BLDG Object)
         (=> (instance ?X Courtyard)
          (and (not (and (instance ?ROOF Roof) (top ?ROOF ?X)))
               (and (instance ?BLDG Building)
                    (orientation ?X ?BLDG Surrounded)))))))))
*/
fof(a4790,axiom,! [X] : (? [BLDG] : (! [ROOF] : ((s_instance(ROOF, s_SelfConnectedObject) => (s_instance(BLDG, s_Object) & (s_instance(X, s_Courtyard) => ((~ (s_instance(ROOF, s_Roof) & s_top(ROOF, X))) & (s_instance(BLDG, s_Building) & s_orientation(X, BLDG, s_Surrounded)))))))))).

/*
(instance SpeakerDevice SetOrClass)
*/
fof(a4791,axiom,s_instance(s_SpeakerDevice, s_SetOrClass)).

/*
(subclass SpeakerDevice ElectricDevice)
*/
fof(a4792,axiom,s_subclass(s_SpeakerDevice, s_ElectricDevice)).

/*
(forall (?X)
 (=> (instance ?X SpeakerDevice)
  (hasPurpose ?X
   (exists (?RS)
    (and (instance ?RS RadiatingSound)
         (and (instrument ?RS ?X) (attribute ?RS Audible)))))))
*/
%% no translation to TPTP available.

/*
(instance Earphone SetOrClass)
*/
fof(a4793,axiom,s_instance(s_Earphone, s_SetOrClass)).

/*
(subclass Earphone Device)
*/
fof(a4794,axiom,s_subclass(s_Earphone, s_Device)).

/*
(forall (?X)
 (=> (instance ?X Earphone)
  (hasPurpose ?X
   (exists (?ES ?RS ?SIGNAL ?EAR ?PROC)
    (and (instance ?ES ElectricalSignalling)
         (and (patient ?ES ?SIGNAL)
              (and (destination ?ES ?X)
                   (and (instance ?PROC Process)
                        (and (instrument ?PROC ?X)
                             (and (patient ?PROC ?SIGNAL)
                                  (and
                                   (result ?PROC ?RS)
                                   (and
                                    (instance ?RS RadiatingSound)
                                    (and
                                     (origin ?RS ?X)
                                     (and
                                      (before
                                       (BeginFn (WhenFn ?ES))
                                       (BeginFn (WhenFn ?PROC)))
                                      (and
                                       (before
                                        (BeginFn (WhenFn ?PROC))
                                        (BeginFn (WhenFn ?RS)))
                                       (and
                                        (instance ?EAR Ear)
                                        (orientation
                                         ?X
                                         ?EAR
                                         Adjacent)))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Public SetOrClass)
*/
fof(a4795,axiom,s_instance(s_Public, s_SetOrClass)).

/*
(subclass Public GroupOfPeople)
*/
fof(a4796,axiom,s_subclass(s_Public, s_GroupOfPeople)).

/*
(forall (?T1 ?AGENT2 ?AGENT1)
 (exists (?INTEREST)
  (and (instance ?INTEREST Formula)
       (=>
        (and (instance ?AGENT1 CognitiveAgent)
             (instance ?AGENT2 CognitiveAgent)
             (instance ?T1 TimePosition))
        (=>
         (holdsDuring ?T1
          (and (member ?AGENT1 Public)
               (and (member ?AGENT2 Public)
                    (not (equal ?AGENT1 ?AGENT2)))))
         (holdsDuring ?T1
          (and (desires ?AGENT1 ?INTEREST)
               (desires ?AGENT2 ?INTEREST))))))))
*/
%% no translation to TPTP available.

/*
(instance PublicAddressSystem SetOrClass)
*/
fof(a4797,axiom,s_instance(s_PublicAddressSystem, s_SetOrClass)).

/*
(instance CommunicationSystem SetOrClass)
*/
fof(a4798,axiom,s_instance(s_CommunicationSystem, s_SetOrClass)).

/*
(subclass PublicAddressSystem CommunicationSystem)
*/
fof(a4799,axiom,s_subclass(s_PublicAddressSystem, s_CommunicationSystem)).

/*
(forall (?X)
 (=> (instance ?X PublicAddressSystem)
  (and (memberType ?X Microphone) (memberType ?X SpeakerDevice))))
*/
fof(a4800,axiom,! [X] : ((s_instance(X, s_PublicAddressSystem) => (s_memberType(X, s_Microphone) & s_memberType(X, s_SpeakerDevice))))).

/*
(forall (?X)
 (=> (instance ?X PublicAddressSystem)
  (hasPurpose ?X
   (exists (?RS ?AREA ?GRP)
    (and (instance ?AREA LandArea)
         (and (located ?X ?AREA)
              (and (instance ?GRP GroupOfPeople)
                   (and (located ?GRP ?AREA)
                        (and (instance ?RS RadiatingSound)
                             (and (instrument ?RS ?X)
                                  (forall
                                   (?PERSON)
                                   (=>
                                    (member ?PERSON ?GRP)
                                    (exists
                                     (?HEAR)
                                     (and
                                      (instance ?HEAR Hearing)
                                      (and
                                       (patient ?HEAR ?RS)
                                       (agent
                                        ?HEAR
                                        ?PERSON))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Wheelchair SetOrClass)
*/
fof(a4801,axiom,s_instance(s_Wheelchair, s_SetOrClass)).

/*
(subclass Wheelchair TransportationDevice)
*/
fof(a4802,axiom,s_subclass(s_Wheelchair, s_TransportationDevice)).

/*
(forall (?X)
 (exists (?WHEEL ?SEAT)
  (and (and (instance ?SEAT Object) (instance ?WHEEL Object))
       (=> (instance ?X Wheelchair)
        (and (instance ?SEAT Seat)
             (and (instance ?WHEEL Wheel)
                  (and (part ?SEAT ?X) (part ?WHEEL ?X))))))))
*/
fof(a4803,axiom,! [X] : (? [WHEEL,SEAT] : (((s_instance(SEAT, s_Object) & s_instance(WHEEL, s_Object)) & (s_instance(X, s_Wheelchair) => (s_instance(SEAT, s_Seat) & (s_instance(WHEEL, s_Wheel) & (s_part(SEAT, X) & s_part(WHEEL, X))))))))).

/*
(forall (?X)
 (=> (instance ?X Wheelchair)
  (hasPurpose ?X
   (exists (?TRANSPORT ?HUMAN)
    (and (instance ?HUMAN Human)
         (and (not (capability Walking agent ?HUMAN))
              (and (instance ?TRANSPORT Transportation)
                   (and (agent ?TRANSPORT ?HUMAN)
                        (instrument ?TRANSPORT ?X)))))))))
*/
%% no translation to TPTP available.

/*
(instance WheelchairAccessible ObjectiveNorm)
*/
fof(a4804,axiom,s_instance(s_WheelchairAccessible, s_ObjectiveNorm)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X WheelchairAccessible)
   (attribute ?X HandicappedFriendly))))
*/
fof(a4805,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_WheelchairAccessible) => s_attribute(X, s_HandicappedFriendly))))).

/*
(forall (?X)
 (=>
  (and (attribute ?X WheelchairAccessible)
       (or (instance ?X Building) (instance ?X Room)))
  (modalAttribute
   (exists (?MOTION ?WHEELCHAIR)
    (and (instance ?MOTION Motion)
         (and (instrument ?MOTION ?WHEELCHAIR)
              (and (instance ?WHEELCHAIR Wheelchair)
                   (eventLocated ?MOTION ?X)))))
   Possibility)))
*/
%% no translation to TPTP available.

/*
(instance HandicappedFriendly SubjectiveAssessmentAttribute)
*/
fof(a4806,axiom,s_instance(s_HandicappedFriendly, s_SubjectiveAssessmentAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X HandicappedFriendly) (instance ?X Object))))
*/
fof(a4807,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_HandicappedFriendly) => s_instance(X, s_Object))))).

/*
(forall (?X)
 (exists (?ATTR ?PERSON)
  (and (and (instance ?PERSON CognitiveAgent)
            (instance ?ATTR Attribute))
       (=> (instance ?X Object)
        (=> (attribute ?X HandicappedFriendly)
         (and (instance ?ATTR Disability)
              (and (instance ?PERSON Human)
                   (and (attribute ?PERSON ?ATTR)
                        (inScopeOfInterest ?PERSON ?X)))))))))
*/
fof(a4808,axiom,! [X] : (? [ATTR,PERSON] : (((s_instance(PERSON, s_CognitiveAgent) & s_instance(ATTR, s_Attribute)) & (s_instance(X, s_Object) => (s_attribute(X, s_HandicappedFriendly) => (s_instance(ATTR, s_Disability) & (s_instance(PERSON, s_Human) & (s_attribute(PERSON, ATTR) & s_inScopeOfInterest(PERSON, X)))))))))).

/*
(instance Recliner SetOrClass)
*/
fof(a4809,axiom,s_instance(s_Recliner, s_SetOrClass)).

/*
(instance Seat SetOrClass)
*/
fof(a4810,axiom,s_instance(s_Seat, s_SetOrClass)).

/*
(subclass Recliner Seat)
*/
fof(a4811,axiom,s_subclass(s_Recliner, s_Seat)).

/*
(forall (?X)
 (=> (instance ?X Recliner)
  (modalAttribute
   (exists (?INCLINE)
    (and (instance ?INCLINE Inclining) (patient ?INCLINE ?X)))
   Possibility)))
*/
%% no translation to TPTP available.

/*
(subclass VisualContentBearingPhysical ContentBearingPhysical)
*/
fof(a4812,axiom,s_subclass(s_VisualContentBearingPhysical, s_ContentBearingPhysical)).

/*
(subclass VisualContentBearingObject ContentBearingObject)
*/
fof(a4813,axiom,s_subclass(s_VisualContentBearingObject, s_ContentBearingObject)).

/*
(instance VisualContentBearingPhysical SetOrClass)
*/
fof(a4814,axiom,s_instance(s_VisualContentBearingPhysical, s_SetOrClass)).

/*
(subclass VisualContentBearingObject VisualContentBearingPhysical)
*/
fof(a4815,axiom,s_subclass(s_VisualContentBearingObject, s_VisualContentBearingPhysical)).

/*
(instance Image SetOrClass)
*/
fof(a4816,axiom,s_instance(s_Image, s_SetOrClass)).

/*
(instance VisualContentBearingObject SetOrClass)
*/
fof(a4817,axiom,s_instance(s_VisualContentBearingObject, s_SetOrClass)).

/*
(subclass Image VisualContentBearingObject)
*/
fof(a4818,axiom,s_subclass(s_Image, s_VisualContentBearingObject)).

/*
(instance MultimediaProjector SetOrClass)
*/
fof(a4819,axiom,s_instance(s_MultimediaProjector, s_SetOrClass)).

/*
(instance MediaSystem SetOrClass)
*/
fof(a4820,axiom,s_instance(s_MediaSystem, s_SetOrClass)).

/*
(subclass MultimediaProjector MediaSystem)
*/
fof(a4821,axiom,s_subclass(s_MultimediaProjector, s_MediaSystem)).

/*
(forall (?X)
 (=> (instance ?X MultimediaProjector)
  (hasPurpose ?X
   (exists (?RS ?SCREEN ?VIDEO)
    (and (instance ?RS RadiatingLight)
         (and (instrument ?RS ?X)
              (and (patient ?RS ?VIDEO)
                   (and (or (instance ?VIDEO VideoRecording)
                            (instance ?VIDEO Image))
                        (and (destination ?RS ?SCREEN)
                             (and (instance ?SCREEN Artifact)
                                  (and
                                   (attribute ?SCREEN Flat)
                                   (not
                                    (connected ?X ?SCREEN)))))))))))))
*/
%% no translation to TPTP available.

/*
(instance AudioRecorder SetOrClass)
*/
fof(a4822,axiom,s_instance(s_AudioRecorder, s_SetOrClass)).

/*
(subclass AudioRecorder Device)
*/
fof(a4823,axiom,s_subclass(s_AudioRecorder, s_Device)).

/*
(forall (?X)
 (=> (instance ?X AudioRecorder)
  (hasPurpose ?X
   (exists (?RS ?RECORD ?PROC)
    (and (instance ?RS RadiatingSound)
         (and (instance ?PROC IntentionalProcess)
              (and (instrument ?PROC ?X)
                   (and (patient ?PROC ?RS)
                        (and (result ?PROC ?RECORD)
                             (instance ?RECORD AudioRecording))))))))))
*/
%% no translation to TPTP available.

/*
(instance VideoDisplay SetOrClass)
*/
fof(a4824,axiom,s_instance(s_VideoDisplay, s_SetOrClass)).

/*
(subclass VideoDisplay ElectricDevice)
*/
fof(a4825,axiom,s_subclass(s_VideoDisplay, s_ElectricDevice)).

/*
(forall (?X)
 (=> (instance ?X VideoDisplay)
  (hasPurpose ?X
   (exists (?RL ?VIDEO)
    (and (instance ?RL RadiatingLight)
         (and (instance ?VIDEO VideoRecording)
              (and (patient ?RL ?VIDEO) (instrument ?RL ?X))))))))
*/
%% no translation to TPTP available.

/*
(instance TDDPhone SetOrClass)
*/
fof(a4826,axiom,s_instance(s_TDDPhone, s_SetOrClass)).

/*
(instance Telephone SetOrClass)
*/
fof(a4827,axiom,s_instance(s_Telephone, s_SetOrClass)).

/*
(subclass TDDPhone Telephone)
*/
fof(a4828,axiom,s_subclass(s_TDDPhone, s_Telephone)).

/*
(forall (?TDD)
 (=> (instance ?TDD TDDPhone)
  (hasPurpose ?TDD
   (exists (?AGENT ?PHONING)
    (and (instance ?PHONING Telephoning)
         (and (instrument ?PHONING ?TDD)
              (and (agent ?PHONING ?AGENT)
                   (attribute ?AGENT Deaf))))))))
*/
%% no translation to TPTP available.

/*
(instance Photocopier SetOrClass)
*/
fof(a4829,axiom,s_instance(s_Photocopier, s_SetOrClass)).

/*
(instance ElectricDevice SetOrClass)
*/
fof(a4830,axiom,s_instance(s_ElectricDevice, s_SetOrClass)).

/*
(subclass Photocopier ElectricDevice)
*/
fof(a4831,axiom,s_subclass(s_Photocopier, s_ElectricDevice)).

/*
(forall (?INFO ?OBJ1 ?X ?COPY)
 (=>
  (and (instance ?INFO Proposition)
       (instance ?OBJ1 ContentBearingPhysical)
       (instance ?COPY Process))
  (=> (instance ?X Photocopier)
   (hasPurpose ?X
    (=>
     (and (instance ?OBJ1 TwoDimensionalObject)
          (and (instance ?OBJ1 VisualContentBearingObject)
               (and (containsInformation ?OBJ1 ?INFO)
                    (and (instance ?COPY Photocopying)
                         (and (instrument ?COPY ?X)
                              (patient ?COPY ?OBJ1))))))
     (exists (?OBJ2 ?SHEET)
      (and (result ?COPY ?OBJ2)
           (and (instance ?OBJ2 TwoDimensionalObject)
                (and (instance ?OBJ2 VisualContentBearingObject)
                     (and (instance ?SHEET PrintedSheet)
                          (and (located ?OBJ2 ?SHEET)
                               (containsInformation
                                ?OBJ2
                                ?INFO))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?X)
 (=> (instance ?X Photocopier)
  (hasPurpose ?X
   (exists (?COPY)
    (and (instance ?COPY Photocopying) (instrument ?COPY ?X))))))
*/
%% no translation to TPTP available.

/*
(instance Photocopying SetOrClass)
*/
fof(a4832,axiom,s_instance(s_Photocopying, s_SetOrClass)).

/*
(subclass Photocopying Making)
*/
fof(a4833,axiom,s_subclass(s_Photocopying, s_Making)).

/*
(forall (?COPY)
 (exists (?OBJ1 ?OBJ2)
  (and (and (instance ?OBJ2 Entity) (instance ?OBJ1 Entity))
       (=> (instance ?COPY Photocopying)
        (and (instance ?OBJ1 Object)
             (and (instance ?OBJ2 VisualContentBearingObject)
                  (and (patient ?COPY ?OBJ1)
                       (and (result ?COPY ?OBJ2)
                            (represents ?OBJ2 ?OBJ1)))))))))
*/
fof(a4834,axiom,! [COPY] : (? [OBJ1,OBJ2] : (((s_instance(OBJ2, s_Entity) & s_instance(OBJ1, s_Entity)) & (s_instance(COPY, s_Photocopying) => (s_instance(OBJ1, s_Object) & (s_instance(OBJ2, s_VisualContentBearingObject) & (s_patient(COPY, OBJ1) & (s_result(COPY, OBJ2) & s_represents(OBJ2, OBJ1)))))))))).

/*
(instance Sail SetOrClass)
*/
fof(a4835,axiom,s_instance(s_Sail, s_SetOrClass)).

/*
(subclass Sail Artifact)
*/
fof(a4836,axiom,s_subclass(s_Sail, s_Artifact)).

/*
(forall (?SAIL)
 (exists (?MAST)
  (and (instance ?MAST Object)
       (=> (instance ?SAIL Sail)
        (and (material Fabric ?SAIL)
             (and (instance ?MAST Mast) (connected ?SAIL ?MAST)))))))
*/
fof(a4837,axiom,! [SAIL] : (? [MAST] : ((s_instance(MAST, s_Object) & (s_instance(SAIL, s_Sail) => (s_material(s_Fabric, SAIL) & (s_instance(MAST, s_Mast) & s_connected(SAIL, MAST)))))))).

/*
(instance PowerSource SetOrClass)
*/
fof(a4838,axiom,s_instance(s_PowerSource, s_SetOrClass)).

/*
(subclass ACPowerSource PowerSource)
*/
fof(a4839,axiom,s_subclass(s_ACPowerSource, s_PowerSource)).

/*
(instance SinglePhasePowerSource SetOrClass)
*/
fof(a4840,axiom,s_instance(s_SinglePhasePowerSource, s_SetOrClass)).

/*
(subclass SinglePhasePowerSource ACPowerSource)
*/
fof(a4841,axiom,s_subclass(s_SinglePhasePowerSource, s_ACPowerSource)).

/*
(instance ThreePhasePowerSource SetOrClass)
*/
fof(a4842,axiom,s_instance(s_ThreePhasePowerSource, s_SetOrClass)).

/*
(instance ACPowerSource SetOrClass)
*/
fof(a4843,axiom,s_instance(s_ACPowerSource, s_SetOrClass)).

/*
(subclass ThreePhasePowerSource ACPowerSource)
*/
fof(a4844,axiom,s_subclass(s_ThreePhasePowerSource, s_ACPowerSource)).

/*
(instance voltageMeasure BinaryPredicate)
*/
fof(a4845,axiom,s_instance(s_voltageMeasure_m, s_BinaryPredicate)).

/*
(forall (?QUANT ?MEAS ?OBJ)
 (=>
  (and (instance ?OBJ PowerSource) (instance ?MEAS PhysicalQuantity)
       (instance ?QUANT RealNumber))
  (=> (voltageMeasure ?OBJ ?MEAS)
   (equal ?MEAS (MeasureFn ?QUANT Volt)))))
*/
fof(a4846,axiom,! [QUANT,MEAS,OBJ] : (((s_instance(OBJ, s_PowerSource) & s_instance(MEAS, s_PhysicalQuantity) & s_instance(QUANT, s_RealNumber)) => (s_voltageMeasure(OBJ, MEAS) => (MEAS = s_MeasureFn(QUANT, s_Volt)))))).

/*
(forall (?MEAS ?OBJ)
 (exists (?ELEC ?PROC)
  (and (and (instance ?PROC Process) (instance ?ELEC Object))
       (=>
        (and (instance ?OBJ PowerSource)
             (instance ?MEAS PhysicalQuantity))
        (=> (voltageMeasure ?OBJ ?MEAS)
         (and (instance ?ELEC Electricity)
              (and (instance ?PROC Process)
                   (and (instrument ?PROC ?OBJ)
                        (and (result ?PROC ?ELEC)
                             (measure ?ELEC ?MEAS))))))))))
*/
fof(a4847,axiom,! [MEAS,OBJ] : (? [ELEC,PROC] : (((s_instance(PROC, s_Process) & s_instance(ELEC, s_Object)) & ((s_instance(OBJ, s_PowerSource) & s_instance(MEAS, s_PhysicalQuantity)) => (s_voltageMeasure(OBJ, MEAS) => (s_instance(ELEC, s_Electricity) & (s_instance(PROC, s_Process) & (s_instrument(PROC, OBJ) & (s_result(PROC, ELEC) & s_measure(ELEC, MEAS))))))))))).

/*
(subclass Document ContentBearingObject)
*/
fof(a4848,axiom,s_subclass(s_Document, s_ContentBearingObject)).

/*
(subclass Document Artifact)
*/
fof(a4849,axiom,s_subclass(s_Document, s_Artifact)).

/*
(forall (?DOC)
 (=> (instance ?DOC Document)
  (hasPurpose ?DOC
   (exists (?COMM)
    (and (instance ?COMM Communication) (instrument ?COMM ?DOC))))))
*/
%% no translation to TPTP available.

/*
(instance Document SetOrClass)
*/
fof(a4850,axiom,s_instance(s_Document, s_SetOrClass)).

/*
(subclass Book Document)
*/
fof(a4851,axiom,s_subclass(s_Book, s_Document)).

/*
(instance Book SetOrClass)
*/
fof(a4852,axiom,s_instance(s_Book, s_SetOrClass)).

/*
(subclass GuideBook Book)
*/
fof(a4853,axiom,s_subclass(s_GuideBook, s_Book)).

/*
(forall (?X)
 (exists (?LOC)
  (and (instance ?LOC Entity)
       (=> (instance ?X GuideBook)
        (and (instance ?LOC GeographicArea) (refers ?X ?LOC))))))
*/
fof(a4854,axiom,! [X] : (? [LOC] : ((s_instance(LOC, s_Entity) & (s_instance(X, s_GuideBook) => (s_instance(LOC, s_GeographicArea) & s_refers(X, LOC))))))).

/*
(instance DiningGuide SetOrClass)
*/
fof(a4855,axiom,s_instance(s_DiningGuide, s_SetOrClass)).

/*
(instance GuideBook SetOrClass)
*/
fof(a4856,axiom,s_instance(s_GuideBook, s_SetOrClass)).

/*
(subclass DiningGuide GuideBook)
*/
fof(a4857,axiom,s_subclass(s_DiningGuide, s_GuideBook)).

/*
(forall (?X)
 (exists (?LOC ?REST)
  (and (and (instance ?REST Physical) (instance ?LOC Object))
       (=> (instance ?X DiningGuide)
        (and (instance ?LOC GeographicArea)
             (and (refers ?X ?LOC)
                  (and (instance ?REST Restaurant)
                       (and (located ?REST ?LOC)
                            (refers ?X ?REST)))))))))
*/
fof(a4858,axiom,! [X] : (? [LOC,REST] : (((s_instance(REST, s_Physical) & s_instance(LOC, s_Object)) & (s_instance(X, s_DiningGuide) => (s_instance(LOC, s_GeographicArea) & (s_refers(X, LOC) & (s_instance(REST, s_Restaurant) & (s_located(REST, LOC) & s_refers(X, REST)))))))))).

/*
(instance TelephoneHandset SetOrClass)
*/
fof(a4859,axiom,s_instance(s_TelephoneHandset, s_SetOrClass)).

/*
(subclass TelephoneHandset Device)
*/
fof(a4860,axiom,s_subclass(s_TelephoneHandset, s_Device)).

/*
(forall (?X)
 (exists (?EARPHONE ?MIC)
  (and (and (instance ?MIC Object) (instance ?EARPHONE Object))
       (=> (instance ?X TelephoneHandset)
        (and (instance ?EARPHONE Earphone)
             (and (instance ?MIC Microphone)
                  (and (part ?EARPHONE ?X) (part ?MIC ?X))))))))
*/
fof(a4861,axiom,! [X] : (? [EARPHONE,MIC] : (((s_instance(MIC, s_Object) & s_instance(EARPHONE, s_Object)) & (s_instance(X, s_TelephoneHandset) => (s_instance(EARPHONE, s_Earphone) & (s_instance(MIC, s_Microphone) & (s_part(EARPHONE, X) & s_part(MIC, X))))))))).

/*
(instance FireAlarm SetOrClass)
*/
fof(a4862,axiom,s_instance(s_FireAlarm, s_SetOrClass)).

/*
(subclass FireAlarm Device)
*/
fof(a4863,axiom,s_subclass(s_FireAlarm, s_Device)).

/*
(forall (?LOC ?X)
 (exists (?RS)
  (and (instance ?RS Process)
       (=> (instance ?LOC Object)
        (=>
         (and (instance ?X FireAlarm)
              (and (attribute ?X DeviceOn) (located ?X ?LOC)))
         (and (instance ?RS RadiatingSound)
              (and (instrument ?RS ?X)
                   (hasPurpose ?RS
                    (exists (?GRP)
                     (and (instance ?GRP GroupOfPeople)
                          (and (located ?GRP ?LOC)
                               (knows
                                ?GRP
                                (exists
                                 (?FIRE)
                                 (and
                                  (instance ?FIRE Fire)
                                  (eventLocated
                                   ?FIRE
                                   ?LOC)))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance GrabBar SetOrClass)
*/
fof(a4864,axiom,s_instance(s_GrabBar, s_SetOrClass)).

/*
(subclass GrabBar Artifact)
*/
fof(a4865,axiom,s_subclass(s_GrabBar, s_Artifact)).

/*
(forall (?X)
 (exists (?WALL)
  (and (instance ?WALL Object)
       (=> (instance ?X GrabBar)
        (and (and (instance ?WALL Wall) (connected ?X ?WALL))
             (hasPurpose ?X
              (exists (?GRAB)
               (and (instance ?GRAB Grabbing)
                    (instrument ?GRAB ?X)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?X)
 (=> (instance ?X GrabBar)
  (modalAttribute
   (exists (?HUMAN)
    (and (attribute ?HUMAN PhysicalDisability)
         (inScopeOfInterest ?HUMAN ?X)))
   Likely)))
*/
%% no translation to TPTP available.

/*
(instance HighRise SetOrClass)
*/
fof(a4866,axiom,s_instance(s_HighRise, s_SetOrClass)).

/*
(subclass HighRise Building)
*/
fof(a4867,axiom,s_subclass(s_HighRise, s_Building)).

/*
(forall (?X)
 (exists (?LEVELS ?NUM)
  (forall (?FLR)
   (=> (instance ?FLR Object)
    (and (and (instance ?NUM Integer) (instance ?LEVELS Collection))
         (=> (instance ?X HighRise)
          (and (instance ?LEVELS Collection)
               (and (=>
                     (and (instance ?FLR BuildingLevel) (part ?FLR ?X))
                     (member ?FLR ?LEVELS))
                    (and (memberCount ?LEVELS ?NUM)
                         (greaterThanOrEqualTo ?NUM 10))))))))))
*/
fof(a4868,axiom,! [X] : (? [LEVELS,NUM] : (! [FLR] : ((s_instance(FLR, s_Object) => ((s_instance(NUM, s_Integer) & s_instance(LEVELS, s_Collection)) & (s_instance(X, s_HighRise) => (s_instance(LEVELS, s_Collection) & (((s_instance(FLR, s_BuildingLevel) & s_part(FLR, X)) => s_member(FLR, LEVELS)) & (s_memberCount(LEVELS, NUM) & s_greaterThanOrEqualTo(NUM, 10))))))))))).

/*
(instance Soaking SetOrClass)
*/
fof(a4869,axiom,s_instance(s_Soaking, s_SetOrClass)).

/*
(subclass Soaking Wetting)
*/
fof(a4870,axiom,s_subclass(s_Soaking, s_Wetting)).

/*
(forall (?SOAK)
 (exists (?WATER ?OBJ)
  (and (and (instance ?OBJ Object) (instance ?WATER Object))
       (=> (instance ?SOAK Soaking)
        (and (instance ?OBJ Object)
             (and (patient ?SOAK ?OBJ)
                  (and (instance ?WATER Water)
                       (and (resource ?SOAK ?WATER)
                            (holdsDuring ?SOAK
                             (orientation ?OBJ ?WATER
                              Surrounded))))))))))
*/
%% no translation to TPTP available.

/*
(instance GrecianTub SetOrClass)
*/
fof(a4871,axiom,s_instance(s_GrecianTub, s_SetOrClass)).

/*
(instance BathTub SetOrClass)
*/
fof(a4872,axiom,s_instance(s_BathTub, s_SetOrClass)).

/*
(subclass GrecianTub BathTub)
*/
fof(a4873,axiom,s_subclass(s_GrecianTub, s_BathTub)).

/*
(forall (?X)
 (=> (instance ?X GrecianTub)
  (hasPurpose ?X
   (exists (?HUMAN ?SOAK)
    (and (instance ?SOAK Soaking)
         (and (instance ?HUMAN Human)
              (and (agent ?SOAK ?HUMAN)
                   (and (patient ?SOAK ?HUMAN)
                        (eventLocated ?SOAK ?X)))))))))
*/
%% no translation to TPTP available.

/*
(instance HemisphereFigure SetOrClass)
*/
fof(a4874,axiom,s_instance(s_HemisphereFigure, s_SetOrClass)).

/*
(subclass HemisphereFigure ThreeDimensionalFigure)
*/
fof(a4875,axiom,s_subclass(s_HemisphereFigure, s_ThreeDimensionalFigure)).

/*
(forall (?HEMI ?X)
 (exists (?Y)
  (and (instance ?Y Object)
       (=> (instance ?X Object)
        (=>
         (and (attribute ?X ?HEMI) (instance ?HEMI HemisphereFigure))
         (and (instance ?Y Sphere) (half ?HEMI ?Y)))))))
*/
fof(a4876,axiom,! [HEMI,X] : (? [Y] : ((s_instance(Y, s_Object) & (s_instance(X, s_Object) => ((s_attribute(X, HEMI) & s_instance(HEMI, s_HemisphereFigure)) => (s_instance(Y, s_Sphere) & s_half(HEMI, Y)))))))).

/*
(instance Dome SetOrClass)
*/
fof(a4877,axiom,s_instance(s_Dome, s_SetOrClass)).

/*
(instance Ceiling SetOrClass)
*/
fof(a4878,axiom,s_instance(s_Ceiling, s_SetOrClass)).

/*
(subclass Dome Ceiling)
*/
fof(a4879,axiom,s_subclass(s_Dome, s_Ceiling)).

/*
(forall (?X)
 (exists (?HEMI)
  (and (instance ?HEMI Attribute)
       (=> (instance ?X Dome)
        (and (attribute ?X ?HEMI) (instance ?HEMI HemisphereFigure))))))
*/
fof(a4880,axiom,! [X] : (? [HEMI] : ((s_instance(HEMI, s_Attribute) & (s_instance(X, s_Dome) => (s_attribute(X, HEMI) & s_instance(HEMI, s_HemisphereFigure))))))).

/*
(instance Historical RelationalAttribute)
*/
fof(a4881,axiom,s_instance(s_Historical, s_RelationalAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Historical) (instance ?X Physical))))
*/
fof(a4882,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Historical) => s_instance(X, s_Physical))))).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Historical) (refers History ?X))))
*/
fof(a4883,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Historical) => s_refers(s_History, X))))).

/*
(forall (?X)
 (exists (?EV)
  (and (and (instance ?EV Object) (instance ?EV Process))
       (=> (and (attribute ?X Historical) (instance ?X City))
        (and (instance ?EV Physical)
             (and (attribute ?EV Historical) (eventLocated ?EV ?X)))))))
*/
fof(a4884,axiom,! [X] : (? [EV] : (((s_instance(EV, s_Object) & s_instance(EV, s_Process)) & ((s_attribute(X, s_Historical) & s_instance(X, s_City)) => (s_instance(EV, s_Physical) & (s_attribute(EV, s_Historical) & s_eventLocated(EV, X)))))))).

/*
(instance Rural RelationalAttribute)
*/
fof(a4885,axiom,s_instance(s_Rural, s_RelationalAttribute)).

/*
(instance Suburban RelationalAttribute)
*/
fof(a4886,axiom,s_instance(s_Suburban, s_RelationalAttribute)).

/*
(instance Urban RelationalAttribute)
*/
fof(a4887,axiom,s_instance(s_Urban, s_RelationalAttribute)).

/*
(subclass Patio Region)
*/
fof(a4888,axiom,s_subclass(s_Patio, s_Region)).

/*
(forall (?X)
 (exists (?BLDG)
  (and (instance ?BLDG Object)
       (=> (instance ?X Patio)
        (and (modalAttribute (attribute ?X Paved) Likely)
             (and (instance ?BLDG Building)
                  (and (orientation ?X ?BLDG Adjacent)
                       (located ?X Outdoors))))))))
*/
%% no translation to TPTP available.

/*
(instance Patio SetOrClass)
*/
fof(a4889,axiom,s_instance(s_Patio, s_SetOrClass)).

/*
(subclass Lanai Patio)
*/
fof(a4890,axiom,s_subclass(s_Lanai, s_Patio)).

/*
(instance Lanai SetOrClass)
*/
fof(a4891,axiom,s_instance(s_Lanai, s_SetOrClass)).

/*
(subclass Lanai StationaryArtifact)
*/
fof(a4892,axiom,s_subclass(s_Lanai, s_StationaryArtifact)).

/*
(forall (?X)
 (exists (?ROOF)
  (and (instance ?ROOF Object)
       (=> (instance ?X Lanai)
        (and (instance ?ROOF Roof)
             (and (part ?ROOF ?X)
                  (modalAttribute
                   (exists (?AREA)
                    (and (instance ?AREA SittingArea)
                         (located ?AREA ?X)))
                   Likely)))))))
*/
%% no translation to TPTP available.

/*
(instance hasUniform BinaryPredicate)
*/
fof(a4893,axiom,s_instance(s_hasUniform_m, s_BinaryPredicate)).

/*
(domainSubclass hasUniform 2 UniformClothing)
*/
fof(a4894,axiom,s_domainSubclass(s_hasUniform_m, 2, s_UniformClothing)).

/*
(forall (?UNIFORM ?GRP)
 (=>
  (and (instance ?GRP Group) (subclass ?UNIFORM UniformClothing)
       (instance ?UNIFORM SetOrClass))
  (=> (hasUniform ?GRP ?UNIFORM)
   (modalAttribute
    (exists (?PERS ?CLOTHING ?TIME)
     (and (member ?PERS ?GRP)
          (and (instance ?CLOTHING ?UNIFORM)
               (holdsDuring ?TIME (wears ?PERS ?CLOTHING)))))
    Likely))))
*/
%% no translation to TPTP available.

/*
(instance UniformClothing SetOrClass)
*/
fof(a4895,axiom,s_instance(s_UniformClothing, s_SetOrClass)).

/*
(subclass UniformClothing Clothing)
*/
fof(a4896,axiom,s_subclass(s_UniformClothing, s_Clothing)).

/*
(forall (?X)
 (exists (?GRP)
  (and (instance ?GRP Group)
       (=> (and (instance ?X SetOrClass) (subclass ?X UniformClothing))
        (=> (subclass ?X UniformClothing) (hasUniform ?GRP ?X))))))
*/
fof(a4897,axiom,! [X] : (? [GRP] : ((s_instance(GRP, s_Group) & ((s_instance(X, s_SetOrClass) & s_subclass(X, s_UniformClothing)) => (s_subclass(X, s_UniformClothing) => s_hasUniform(GRP, X))))))).

/*
(forall (?X)
 (exists (?PROC ?DESIGN)
  (and (and (instance ?DESIGN Entity) (instance ?PROC Process))
       (=> (instance ?X UniformClothing)
        (and (instance ?PROC IntentionalProcess)
             (and (result ?PROC ?DESIGN) (represents ?X ?DESIGN)))))))
*/
fof(a4898,axiom,! [X] : (? [PROC,DESIGN] : (((s_instance(DESIGN, s_Entity) & s_instance(PROC, s_Process)) & (s_instance(X, s_UniformClothing) => (s_instance(PROC, s_IntentionalProcess) & (s_result(PROC, DESIGN) & s_represents(X, DESIGN)))))))).

/*
(subclass Tripod Device)
*/
fof(a4899,axiom,s_subclass(s_Tripod, s_Device)).

/*
(forall (?X)
 (exists (?LEG1 ?LEG2 ?LEG3)
  (and (and (instance ?LEG3 Object) (instance ?LEG2 Object)
            (instance ?LEG1 Object))
       (=> (instance ?X Tripod)
        (and (part ?LEG1 ?X)
             (and (part ?LEG2 ?X)
                  (and (part ?LEG3 ?X)
                       (and (meetsSpatially ?LEG1 ?LEG2)
                            (and (meetsSpatially ?LEG2 ?LEG3)
                                 (meetsSpatially ?LEG1 ?LEG3))))))))))
*/
fof(a4900,axiom,! [X] : (? [LEG1,LEG2,LEG3] : (((s_instance(LEG3, s_Object) & s_instance(LEG2, s_Object) & s_instance(LEG1, s_Object)) & (s_instance(X, s_Tripod) => (s_part(LEG1, X) & (s_part(LEG2, X) & (s_part(LEG3, X) & (s_meetsSpatially(LEG1, LEG2) & (s_meetsSpatially(LEG2, LEG3) & s_meetsSpatially(LEG1, LEG3))))))))))).

/*
(forall (?X)
 (=> (instance ?X Tripod)
  (hasPurpose ?X
   (exists (?OBJ ?PUT ?PROC)
    (and (instance ?OBJ Artifact)
         (and (instance ?PUT Putting)
              (and (patient ?PUT ?OBJ)
                   (and (destination ?PUT ?X)
                        (and (instance ?PROC Process)
                             (and (instrument ?PROC ?OBJ)
                                  (before
                                   (EndFn (WhenFn ?PUT))
                                   (BeginFn (WhenFn ?PROC)))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Easel SetOrClass)
*/
fof(a4901,axiom,s_instance(s_Easel, s_SetOrClass)).

/*
(instance Tripod SetOrClass)
*/
fof(a4902,axiom,s_instance(s_Tripod, s_SetOrClass)).

/*
(subclass Easel Tripod)
*/
fof(a4903,axiom,s_subclass(s_Easel, s_Tripod)).

/*
(forall (?X)
 (=> (instance ?X Easel)
  (hasPurpose ?X
   (exists (?OBJ ?PUT)
    (and (instance ?OBJ Artifact)
         (and (attribute ?OBJ Flat)
              (and (instance ?PUT Putting)
                   (and (patient ?PUT ?OBJ)
                        (destination ?PUT ?X)))))))))
*/
%% no translation to TPTP available.

/*
(instance Solarium SetOrClass)
*/
fof(a4904,axiom,s_instance(s_Solarium, s_SetOrClass)).

/*
(subclass Solarium Room)
*/
fof(a4905,axiom,s_subclass(s_Solarium, s_Room)).

/*
(forall (?X)
 (exists (?WALL)
  (and (instance ?WALL Object)
       (=> (instance ?X Solarium)
        (and (instance ?WALL Wall)
             (and (part ?WALL ?X) (attribute ?WALL Transparent)))))))
*/
fof(a4906,axiom,! [X] : (? [WALL] : ((s_instance(WALL, s_Object) & (s_instance(X, s_Solarium) => (s_instance(WALL, s_Wall) & (s_part(WALL, X) & s_attribute(WALL, s_Transparent)))))))).

/*
(instance ExerciseCenter SetOrClass)
*/
fof(a4907,axiom,s_instance(s_ExerciseCenter, s_SetOrClass)).

/*
(instance SportsFacility SetOrClass)
*/
fof(a4908,axiom,s_instance(s_SportsFacility, s_SetOrClass)).

/*
(subclass ExerciseCenter SportsFacility)
*/
fof(a4909,axiom,s_subclass(s_ExerciseCenter, s_SportsFacility)).

/*
(forall (?X)
 (=> (instance ?X ExerciseCenter)
  (hasPurpose ?X
   (exists (?DEVICE)
    (and (or (instance ?DEVICE AerobicExerciseDevice)
             (instance ?DEVICE AnaerobicExerciseDevice))
         (located ?DEVICE ?X))))))
*/
%% no translation to TPTP available.

/*
(instance GameRoom SetOrClass)
*/
fof(a4910,axiom,s_instance(s_GameRoom, s_SetOrClass)).

/*
(subclass GameRoom Room)
*/
fof(a4911,axiom,s_subclass(s_GameRoom, s_Room)).

/*
(forall (?X)
 (=> (instance ?X GameRoom)
  (hasPurpose ?X
   (exists (?GAME)
    (and (instance ?GAME Game) (eventLocated ?GAME ?X))))))
*/
%% no translation to TPTP available.

/*
(instance Nursery SetOrClass)
*/
fof(a4912,axiom,s_instance(s_Nursery, s_SetOrClass)).

/*
(subclass Nursery Room)
*/
fof(a4913,axiom,s_subclass(s_Nursery, s_Room)).

/*
(forall (?X)
 (exists (?CRIB)
  (and (instance ?CRIB Physical)
       (=> (instance ?X Nursery)
        (and (instance ?CRIB Crib) (located ?CRIB ?X))))))
*/
fof(a4914,axiom,! [X] : (? [CRIB] : ((s_instance(CRIB, s_Physical) & (s_instance(X, s_Nursery) => (s_instance(CRIB, s_Crib) & s_located(CRIB, X))))))).

/*
(instance SteamBath SetOrClass)
*/
fof(a4915,axiom,s_instance(s_SteamBath, s_SetOrClass)).

/*
(subclass SteamBath Room)
*/
fof(a4916,axiom,s_subclass(s_SteamBath, s_Room)).

/*
(forall (?X)
 (exists (?STEAM)
  (and (instance ?STEAM Physical)
       (=> (instance ?X SteamBath)
        (and (instance ?STEAM Steam) (located ?STEAM ?X))))))
*/
fof(a4917,axiom,! [X] : (? [STEAM] : ((s_instance(STEAM, s_Physical) & (s_instance(X, s_SteamBath) => (s_instance(STEAM, s_Steam) & s_located(STEAM, X))))))).

/*
(forall (?X)
 (=> (instance ?X SteamBath)
  (hasPurpose ?X
   (exists (?BATH)
    (and (instance ?BATH Bathing) (eventLocated ?BATH ?X))))))
*/
%% no translation to TPTP available.

/*
(instance HeatedPool SetOrClass)
*/
fof(a4918,axiom,s_instance(s_HeatedPool, s_SetOrClass)).

/*
(instance SwimmingPool SetOrClass)
*/
fof(a4919,axiom,s_instance(s_SwimmingPool, s_SetOrClass)).

/*
(subclass HeatedPool SwimmingPool)
*/
fof(a4920,axiom,s_subclass(s_HeatedPool, s_SwimmingPool)).

/*
(forall (?WATER ?HEATER ?X)
 (=>
  (and (instance ?X HeatedPool)
       (and (contains ?X ?WATER)
            (and (instance ?WATER Water)
                 (and (part ?X ?HEATER)
                      (and (instance ?HEATER WaterHeater)
                           (attribute ?HEATER DeviceOn))))))
  (attribute ?WATER WarmTemperature)))
*/
fof(a4921,axiom,! [WATER,HEATER,X] : (((s_instance(X, s_HeatedPool) & (s_contains(X, WATER) & (s_instance(WATER, s_Water) & (s_part(X, HEATER) & (s_instance(HEATER, s_WaterHeater) & s_attribute(HEATER, s_DeviceOn)))))) => s_attribute(WATER, s_WarmTemperature)))).

/*
(instance RoomHeater SetOrClass)
*/
fof(a4922,axiom,s_instance(s_RoomHeater, s_SetOrClass)).

/*
(instance HeatingDevice SetOrClass)
*/
fof(a4923,axiom,s_instance(s_HeatingDevice, s_SetOrClass)).

/*
(subclass RoomHeater HeatingDevice)
*/
fof(a4924,axiom,s_subclass(s_RoomHeater, s_HeatingDevice)).

/*
(forall (?X)
 (=> (instance ?X RoomHeater)
  (hasPurpose ?X
   (exists (?AIR ?HEATING ?ROOM)
    (and (instance ?AIR Air)
         (and (instance ?ROOM Room)
              (and (located ?AIR ?ROOM)
                   (and (instance ?HEATING Heating)
                        (and (patient ?HEATING ?AIR)
                             (instrument ?HEATING ?X))))))))))
*/
%% no translation to TPTP available.

/*
(subclass DanceHall StationaryArtifact)
*/
fof(a4925,axiom,s_subclass(s_DanceHall, s_StationaryArtifact)).

/*
(forall (?DISCO)
 (=> (instance ?DISCO DanceHall)
  (hasPurpose ?DISCO
   (exists (?DANCE ?MUSIC)
    (and (instance ?MUSIC MakingMusic)
         (and (instance ?DANCE Dancing)
              (and (cooccur ?MUSIC ?DANCE)
                   (and (eventLocated ?MUSIC ?DISCO)
                        (eventLocated ?DANCE ?DISCO)))))))))
*/
%% no translation to TPTP available.

/*
(instance NightClub SetOrClass)
*/
fof(a4926,axiom,s_instance(s_NightClub, s_SetOrClass)).

/*
(instance DanceHall SetOrClass)
*/
fof(a4927,axiom,s_instance(s_DanceHall, s_SetOrClass)).

/*
(subclass NightClub DanceHall)
*/
fof(a4928,axiom,s_subclass(s_NightClub, s_DanceHall)).

/*
(forall (?X)
 (exists (?BAR)
  (and (instance ?BAR Physical)
       (=> (instance ?X NightClub)
        (and (instance ?BAR Tavern) (located ?BAR ?X))))))
*/
fof(a4929,axiom,! [X] : (? [BAR] : ((s_instance(BAR, s_Physical) & (s_instance(X, s_NightClub) => (s_instance(BAR, s_Tavern) & s_located(BAR, X))))))).

/*
(instance ScubaDiving SetOrClass)
*/
fof(a4930,axiom,s_instance(s_ScubaDiving, s_SetOrClass)).

/*
(subclass ScubaDiving Swimming)
*/
fof(a4931,axiom,s_subclass(s_ScubaDiving, s_Swimming)).

/*
(forall (?SCUBA)
 (exists (?WATER ?DEVICE ?BREATH)
  (and (and (instance ?BREATH Process) (instance ?DEVICE Object)
            (instance ?WATER Object))
       (=> (instance ?SCUBA ScubaDiving)
        (and (instance ?WATER WaterArea)
             (and (orientation ?SCUBA ?WATER Below)
                  (and (instance ?DEVICE Device)
                       (and (instance ?BREATH Breathing)
                            (and (instrument ?BREATH ?DEVICE)
                                 (subProcess ?BREATH ?SCUBA))))))))))
*/
fof(a4932,axiom,! [SCUBA] : (? [WATER,DEVICE,BREATH] : (((s_instance(BREATH, s_Process) & s_instance(DEVICE, s_Object) & s_instance(WATER, s_Object)) & (s_instance(SCUBA, s_ScubaDiving) => (s_instance(WATER, s_WaterArea) & (s_orientation(SCUBA, WATER, s_Below) & (s_instance(DEVICE, s_Device) & (s_instance(BREATH, s_Breathing) & (s_instrument(BREATH, DEVICE) & s_subProcess(BREATH, SCUBA))))))))))).

/*
(instance AmericansWithDisabilitiesAct Proposition)
*/
fof(a4933,axiom,s_instance(s_AmericansWithDisabilitiesAct, s_Proposition)).

/*
(subrelation conforms represents)
*/
fof(a4934,axiom,s_subrelation(s_conforms_m, s_represents_m)).

/*
(forall (?OBJ)
 (=> (instance ?OBJ Object)
  (=> (conforms ?OBJ AmericansWithDisabilitiesAct)
   (attribute ?OBJ HandicappedFriendly))))
*/
fof(a4935,axiom,! [OBJ] : ((s_instance(OBJ, s_Object) => (s_conforms(OBJ, s_AmericansWithDisabilitiesAct) => s_attribute(OBJ, s_HandicappedFriendly))))).

/*
(instance USFEMA GovernmentOrganization)
*/
fof(a4936,axiom,s_instance(s_USFEMA, s_GovernmentOrganization)).

/*
(subrelation approves inScopeOfInterest)
*/
fof(a4937,axiom,s_subrelation(s_approves_m, s_inScopeOfInterest_m)).

/*
(instance approves BinaryPredicate)
*/
fof(a4938,axiom,s_instance(s_approves_m, s_BinaryPredicate)).

/*
(forall (?AGENT2 ?AGENT1)
 (exists (?PROP)
  (and (instance ?PROP Proposition)
       (=>
        (and (instance ?AGENT1 CognitiveAgent)
             (instance ?AGENT2 CognitiveAgent))
        (=> (approves ?AGENT1 ?AGENT2)
         (believes ?AGENT1 (conforms ?AGENT2 ?PROP)))))))
*/
%% no translation to TPTP available.

/*
(instance WetBar SetOrClass)
*/
fof(a4939,axiom,s_instance(s_WetBar, s_SetOrClass)).

/*
(subclass WetBar Artifact)
*/
fof(a4940,axiom,s_subclass(s_WetBar, s_Artifact)).

/*
(forall (?X)
 (exists (?SINK ?OBJ)
  (and (and (instance ?OBJ Object) (instance ?SINK Object))
       (=> (instance ?X WetBar)
        (and (instance ?SINK WashBasin)
             (and (part ?SINK ?X)
                  (and (instance ?OBJ Object)
                       (and (attribute ?OBJ Flat)
                            (and (hasPurpose
                                  ?OBJ
                                  (exists
                                   (?PREP ?FOOD)
                                   (and
                                    (instance ?PREP Making)
                                    (and
                                     (result ?PREP ?FOOD)
                                     (and
                                      (or
                                       (instance ?FOOD PreparedFood)
                                       (instance ?FOOD Beverage))
                                      (eventLocated ?PREP ?OBJ))))))
                                 (part ?OBJ ?X))))))))))
*/
%% no translation to TPTP available.

/*
(instance SurveillanceSystem SetOrClass)
*/
fof(a4941,axiom,s_instance(s_SurveillanceSystem, s_SetOrClass)).

/*
(subclass SurveillanceSystem Collection)
*/
fof(a4942,axiom,s_subclass(s_SurveillanceSystem, s_Collection)).

/*
(forall (?X)
 (=> (instance ?X SurveillanceSystem)
  (and (memberType ?X Camera) (memberType ?X VideoDisplay))))
*/
fof(a4943,axiom,! [X] : ((s_instance(X, s_SurveillanceSystem) => (s_memberType(X, s_Camera) & s_memberType(X, s_VideoDisplay))))).

/*
(forall (?X ?VIDEO ?DISPLAY ?LOC2 ?LOC1)
 (=> (and (instance ?LOC2 Object) (instance ?LOC1 Object))
  (=>
   (and (instance ?X SurveillanceSystem)
        (and (member ?X ?VIDEO)
             (and (member ?X ?DISPLAY)
                  (and (located ?VIDEO ?LOC1)
                       (and (instance ?VIDEO Camera)
                            (and (located ?DISPLAY ?LOC2)
                                 (and
                                  (not (equal ?LOC1 ?LOC2))
                                  (instance
                                   ?DISPLAY
                                   VideoDisplay))))))))
   (hasPurpose ?X
    (exists (?PROC ?VID ?RL ?CAPTURE)
     (and (instance ?PROC Process)
          (and (eventLocated ?PROC ?LOC1)
               (and (represents ?VID ?PROC)
                    (and (instrument ?CAPTURE Camera)
                         (and (result ?CAPTURE ?VID)
                              (and (instance ?RL RadiatingLight)
                                   (and
                                    (instrument ?RL ?DISPLAY)
                                    (and
                                     (patient ?RL ?VID)
                                     (and
                                      (before
                                       (BeginFn ?PROC)
                                       (BeginFn ?CAPTURE))
                                      (before
                                       (BeginFn ?CAPTURE)
                                       (BeginFn ?RL))))))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?X)
 (=> (instance ?X SecurityUnit)
  (modalAttribute
   (exists (?S)
    (and (instance ?S SurveillanceSystem) (inScopeOfInterest ?X ?S)))
   Likely)))
*/
%% no translation to TPTP available.

/*
(subclass ArtifactMediatedCommunication Communication)
*/
fof(a4944,axiom,s_subclass(s_ArtifactMediatedCommunication, s_Communication)).

/*
(forall (?X)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?X ArtifactMediatedCommunication)
        (and (instance ?OBJ Artifact) (instrument ?X ?OBJ))))))
*/
fof(a4945,axiom,! [X] : (? [OBJ] : ((s_instance(OBJ, s_Object) & (s_instance(X, s_ArtifactMediatedCommunication) => (s_instance(OBJ, s_Artifact) & s_instrument(X, OBJ))))))).

/*
(instance ArtifactMediatedCommunication SetOrClass)
*/
fof(a4946,axiom,s_instance(s_ArtifactMediatedCommunication, s_SetOrClass)).

/*
(subclass TelephoneCommunication ArtifactMediatedCommunication)
*/
fof(a4947,axiom,s_subclass(s_TelephoneCommunication, s_ArtifactMediatedCommunication)).

/*
(forall (?X)
 (exists (?TEL1 ?TEL2 ?ORIGIN ?DEST)
  (and (and (instance ?DEST ContactSite) (instance ?ORIGIN ContactSite)
            (instance ?TEL2 Agent) (instance ?TEL1 Agent))
       (=> (instance ?X TelephoneCommunication)
        (and (origin ?X ?ORIGIN)
             (and (destination ?X ?DEST)
                  (and (siteForContact ?ORIGIN ?TEL1)
                       (and (siteForContact ?DEST ?TEL2)
                            (and (instance ?TEL1 Telephone)
                                 (and
                                  (instance ?TEL2 Telephone)
                                  (and
                                   (instrument ?X ?TEL1)
                                   (instrument ?X ?TEL2))))))))))))
*/
fof(a4948,axiom,! [X] : (? [TEL1,TEL2,ORIGIN,DEST] : (((s_instance(DEST, s_ContactSite) & s_instance(ORIGIN, s_ContactSite) & s_instance(TEL2, s_Agent) & s_instance(TEL1, s_Agent)) & (s_instance(X, s_TelephoneCommunication) => (s_origin(X, ORIGIN) & (s_destination(X, DEST) & (s_siteForContact(ORIGIN, TEL1) & (s_siteForContact(DEST, TEL2) & (s_instance(TEL1, s_Telephone) & (s_instance(TEL2, s_Telephone) & (s_instrument(X, TEL1) & s_instrument(X, TEL2))))))))))))).

/*
(instance OperatorAssistedTelephoneCommunication SetOrClass)
*/
fof(a4949,axiom,s_instance(s_OperatorAssistedTelephoneCommunication, s_SetOrClass)).

/*
(subclass OperatorAssistedTelephoneCommunication TelephoneCommunication)
*/
fof(a4950,axiom,s_subclass(s_OperatorAssistedTelephoneCommunication, s_TelephoneCommunication)).

/*
(forall (?RESULT ?X)
 (exists (?ORIGIN ?DEST ?OPERATOR)
  (and (and (instance ?OPERATOR Physical) (instance ?DEST Entity)
            (instance ?ORIGIN Object))
       (=> (instance ?RESULT Entity)
        (=> (instance ?X OperatorAssistedTelephoneCommunication)
         (and (origin ?X ?ORIGIN)
              (and (destination ?X ?DEST)
                   (and (instance ?OPERATOR Human)
                        (hasPurpose ?OPERATOR
                         (exists (?PROC)
                          (and (instance ?PROC IntentionalProcess)
                               (and
                                (agent ?PROC ?OPERATOR)
                                (and
                                 (subProcess ?PROC ?X)
                                 (and
                                  (result ?PROC ?RESULT)
                                  (equal
                                   ?RESULT
                                   (modalAttribute
                                    (exists
                                     (?COMM)
                                     (and
                                      (instance ?COMM Communication)
                                      (and
                                       (origin ?COMM ?ORIGIN)
                                       (destination ?COMM ?DEST))))
                                    Possibility))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance DirectDialTelephoneCommunication SetOrClass)
*/
fof(a4951,axiom,s_instance(s_DirectDialTelephoneCommunication, s_SetOrClass)).

/*
(instance TelephoneCommunication SetOrClass)
*/
fof(a4952,axiom,s_instance(s_TelephoneCommunication, s_SetOrClass)).

/*
(subclass DirectDialTelephoneCommunication TelephoneCommunication)
*/
fof(a4953,axiom,s_subclass(s_DirectDialTelephoneCommunication, s_TelephoneCommunication)).

/*
(forall (?X ?RESULT ?DEST ?ORIGIN)
 (forall (?OPERATOR)
  (=> (instance ?OPERATOR Physical)
   (=>
    (and (instance ?RESULT Entity) (instance ?DEST Entity)
         (instance ?ORIGIN Object))
    (=> (instance ?X DirectDialTelephoneCommunication)
     (not (and (instance ?OPERATOR Human)
               (hasPurpose ?OPERATOR
                (exists (?PROC)
                 (and (instance ?PROC IntentionalProcess)
                      (and (agent ?PROC ?OPERATOR)
                           (and (subProcess ?PROC ?X)
                                (and
                                 (result ?PROC ?RESULT)
                                 (equal
                                  ?RESULT
                                  (modalAttribute
                                   (exists
                                    (?COMM)
                                    (and
                                     (instance ?COMM Communication)
                                     (and
                                      (origin ?COMM ?ORIGIN)
                                      (destination ?COMM ?DEST))))
                                   Possibility)))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance VoiceMail SetOrClass)
*/
fof(a4954,axiom,s_instance(s_VoiceMail, s_SetOrClass)).

/*
(instance AudioRecording SetOrClass)
*/
fof(a4955,axiom,s_instance(s_AudioRecording, s_SetOrClass)).

/*
(subclass VoiceMail AudioRecording)
*/
fof(a4956,axiom,s_subclass(s_VoiceMail, s_AudioRecording)).

/*
(forall (?X)
 (exists (?TEL)
  (and (instance ?TEL Process)
       (=> (instance ?X VoiceMail)
        (and (instance ?TEL TelephoneCommunication)
             (patient ?TEL ?X))))))
*/
fof(a4957,axiom,! [X] : (? [TEL] : ((s_instance(TEL, s_Process) & (s_instance(X, s_VoiceMail) => (s_instance(TEL, s_TelephoneCommunication) & s_patient(TEL, X))))))).

/*
(instance Local RelationalAttribute)
*/
fof(a4958,axiom,s_instance(s_Local, s_RelationalAttribute)).

/*
(forall (?X)
 (exists (?TEL1 ?TEL2 ?ORIGIN ?DEST ?CODE)
  (and (and (instance ?CODE SymbolicString) (instance ?DEST Agent)
            (instance ?ORIGIN Agent) (instance ?TEL2 TelecomNumber)
            (instance ?TEL1 TelecomNumber))
       (=>
        (and (instance ?X TelephoneCommunication) (attribute ?X Local))
        (and (origin ?X ?ORIGIN)
             (and (destination ?X ?DEST)
                  (and (telephoneNumber ?TEL1 ?ORIGIN)
                       (and (telephoneNumber ?TEL2 ?DEST)
                            (and (telecomAreaCode ?CODE ?TEL1)
                                 (telecomAreaCode ?CODE ?TEL2))))))))))
*/
fof(a4959,axiom,! [X] : (? [TEL1,TEL2,ORIGIN,DEST,CODE] : (((s_instance(CODE, s_SymbolicString) & s_instance(DEST, s_Agent) & s_instance(ORIGIN, s_Agent) & s_instance(TEL2, s_TelecomNumber) & s_instance(TEL1, s_TelecomNumber)) & ((s_instance(X, s_TelephoneCommunication) & s_attribute(X, s_Local)) => (s_origin(X, ORIGIN) & (s_destination(X, DEST) & (s_telephoneNumber(TEL1, ORIGIN) & (s_telephoneNumber(TEL2, DEST) & (s_telecomAreaCode(CODE, TEL1) & s_telecomAreaCode(CODE, TEL2))))))))))).

/*
(instance Domestic RelationalAttribute)
*/
fof(a4960,axiom,s_instance(s_Domestic, s_RelationalAttribute)).

/*
(forall (?X)
 (exists (?ORIGIN ?DEST ?COUNTRY)
  (and (and (instance ?COUNTRY Object) (instance ?DEST Physical)
            (instance ?ORIGIN Object))
       (=>
        (and (instance ?X TelephoneCommunication)
             (attribute ?X Domestic))
        (and (origin ?X ?ORIGIN)
             (and (destination ?X ?DEST)
                  (and (located ?ORIGIN ?COUNTRY)
                       (and (located ?DEST ?COUNTRY)
                            (instance ?COUNTRY Nation)))))))))
*/
fof(a4961,axiom,! [X] : (? [ORIGIN,DEST,COUNTRY] : (((s_instance(COUNTRY, s_Object) & s_instance(DEST, s_Physical) & s_instance(ORIGIN, s_Object)) & ((s_instance(X, s_TelephoneCommunication) & s_attribute(X, s_Domestic)) => (s_origin(X, ORIGIN) & (s_destination(X, DEST) & (s_located(ORIGIN, COUNTRY) & (s_located(DEST, COUNTRY) & s_instance(COUNTRY, s_Nation)))))))))).

/*
(instance International RelationalAttribute)
*/
fof(a4962,axiom,s_instance(s_International, s_RelationalAttribute)).

/*
(forall (?X)
 (exists (?ORIGIN ?DEST ?CTRY1 ?CTRY2)
  (and (and (instance ?CTRY2 Object) (instance ?CTRY1 Object)
            (instance ?DEST Physical) (instance ?ORIGIN Object))
       (=>
        (and (instance ?X TelephoneCommunication)
             (attribute ?X International))
        (and (origin ?X ?ORIGIN)
             (and (destination ?X ?DEST)
                  (and (located ?ORIGIN ?CTRY1)
                       (and (located ?DEST ?CTRY2)
                            (and (instance ?CTRY1 Nation)
                                 (and
                                  (instance ?CTRY2 Nation)
                                  (not (equal ?CTRY1 ?CTRY2))))))))))))
*/
fof(a4963,axiom,! [X] : (? [ORIGIN,DEST,CTRY1,CTRY2] : (((s_instance(CTRY2, s_Object) & s_instance(CTRY1, s_Object) & s_instance(DEST, s_Physical) & s_instance(ORIGIN, s_Object)) & ((s_instance(X, s_TelephoneCommunication) & s_attribute(X, s_International)) => (s_origin(X, ORIGIN) & (s_destination(X, DEST) & (s_located(ORIGIN, CTRY1) & (s_located(DEST, CTRY2) & (s_instance(CTRY1, s_Nation) & (s_instance(CTRY2, s_Nation) & (~ (CTRY1 = CTRY2))))))))))))).

/*
(instance CommunalAttribute RelationalAttribute)
*/
fof(a4964,axiom,s_instance(s_CommunalAttribute, s_RelationalAttribute)).

/*
(instance PrivateAttribute RelationalAttribute)
*/
fof(a4965,axiom,s_instance(s_PrivateAttribute, s_RelationalAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X CommunalAttribute) (instance ?X Object))))
*/
fof(a4966,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_CommunalAttribute) => s_instance(X, s_Object))))).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X PrivateAttribute)
   (modalAttribute (not (attribute ?X CommunalAttribute)) Likely))))
*/
%% no translation to TPTP available.

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X CommunalAttribute)
   (modalAttribute (not (attribute ?X PrivateAttribute)) Likely))))
*/
%% no translation to TPTP available.

/*
(instance Policy SetOrClass)
*/
fof(a4967,axiom,s_instance(s_Policy, s_SetOrClass)).

/*
(subclass Policy Proposition)
*/
fof(a4968,axiom,s_subclass(s_Policy, s_Proposition)).

/*
(forall (?POLICY)
 (exists (?ORG)
  (and (instance ?ORG Organization)
       (=> (instance ?POLICY Policy) (policyOwner ?ORG ?POLICY)))))
*/
fof(a4969,axiom,! [POLICY] : (? [ORG] : ((s_instance(ORG, s_Organization) & (s_instance(POLICY, s_Policy) => s_policyOwner(ORG, POLICY)))))).

/*
(instance policyOwner BinaryPredicate)
*/
fof(a4970,axiom,s_instance(s_policyOwner_m, s_BinaryPredicate)).

/*
(forall (?POLICY ?AGENT)
 (exists (?CREATE)
  (and (instance ?CREATE Process)
       (=>
        (and (instance ?AGENT Organization) (instance ?POLICY Policy))
        (=> (policyOwner ?AGENT ?POLICY)
         (and (instance ?CREATE Creation)
              (and (agent ?CREATE ?AGENT)
                   (result ?CREATE ?POLICY))))))))
*/
fof(a4971,axiom,! [POLICY,AGENT] : (? [CREATE] : ((s_instance(CREATE, s_Process) & ((s_instance(AGENT, s_Organization) & s_instance(POLICY, s_Policy)) => (s_policyOwner(AGENT, POLICY) => (s_instance(CREATE, s_Creation) & (s_agent(CREATE, AGENT) & s_result(CREATE, POLICY))))))))).

/*
(instance Hydrogen SetOrClass)
*/
fof(a4972,axiom,s_instance(s_Hydrogen, s_SetOrClass)).

/*
(subclass Hydrogen ElementalSubstance)
*/
fof(a4973,axiom,s_subclass(s_Hydrogen, s_ElementalSubstance)).

/*
(names Hydrogen Hydrogen)
*/
fof(a4974,axiom,s_names(s_Hydrogen, 'Hydrogen')).

/*
(atomicNumber Hydrogen 1)
*/
fof(a4975,axiom,s_atomicNumber(s_Hydrogen, 1)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Hydrogen) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 1.0079 Amu))))
*/
fof(a4976,axiom,! [ATOM] : (((s_instance(ATOM, s_Hydrogen) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(1.0079, s_Amu))))).

/*
(instance Helium SetOrClass)
*/
fof(a4977,axiom,s_instance(s_Helium, s_SetOrClass)).

/*
(subclass Helium ElementalSubstance)
*/
fof(a4978,axiom,s_subclass(s_Helium, s_ElementalSubstance)).

/*
(names Helium Helium)
*/
fof(a4979,axiom,s_names(s_Helium, 'Helium')).

/*
(atomicNumber Helium 2)
*/
fof(a4980,axiom,s_atomicNumber(s_Helium, 2)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Helium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 4.0026 Amu))))
*/
fof(a4981,axiom,! [ATOM] : (((s_instance(ATOM, s_Helium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(4.0026, s_Amu))))).

/*
(instance Lithium SetOrClass)
*/
fof(a4982,axiom,s_instance(s_Lithium, s_SetOrClass)).

/*
(subclass Lithium ElementalSubstance)
*/
fof(a4983,axiom,s_subclass(s_Lithium, s_ElementalSubstance)).

/*
(names Lithium Lithium)
*/
fof(a4984,axiom,s_names(s_Lithium, 'Lithium')).

/*
(atomicNumber Lithium 3)
*/
fof(a4985,axiom,s_atomicNumber(s_Lithium, 3)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Lithium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 6.939 Amu))))
*/
fof(a4986,axiom,! [ATOM] : (((s_instance(ATOM, s_Lithium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(6.939, s_Amu))))).

/*
(instance Beryllium SetOrClass)
*/
fof(a4987,axiom,s_instance(s_Beryllium, s_SetOrClass)).

/*
(subclass Beryllium ElementalSubstance)
*/
fof(a4988,axiom,s_subclass(s_Beryllium, s_ElementalSubstance)).

/*
(names Beryllium Beryllium)
*/
fof(a4989,axiom,s_names(s_Beryllium, 'Beryllium')).

/*
(atomicNumber Beryllium 4)
*/
fof(a4990,axiom,s_atomicNumber(s_Beryllium, 4)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Beryllium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 9.0122 Amu))))
*/
fof(a4991,axiom,! [ATOM] : (((s_instance(ATOM, s_Beryllium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(9.0122, s_Amu))))).

/*
(instance Boron SetOrClass)
*/
fof(a4992,axiom,s_instance(s_Boron, s_SetOrClass)).

/*
(subclass Boron ElementalSubstance)
*/
fof(a4993,axiom,s_subclass(s_Boron, s_ElementalSubstance)).

/*
(names Boron Boron)
*/
fof(a4994,axiom,s_names(s_Boron, 'Boron')).

/*
(atomicNumber Boron 5)
*/
fof(a4995,axiom,s_atomicNumber(s_Boron, 5)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Boron) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 10.811 Amu))))
*/
fof(a4996,axiom,! [ATOM] : (((s_instance(ATOM, s_Boron) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(10.811, s_Amu))))).

/*
(instance Carbon SetOrClass)
*/
fof(a4997,axiom,s_instance(s_Carbon, s_SetOrClass)).

/*
(subclass Carbon ElementalSubstance)
*/
fof(a4998,axiom,s_subclass(s_Carbon, s_ElementalSubstance)).

/*
(names Carbon Carbon)
*/
fof(a4999,axiom,s_names(s_Carbon, 'Carbon')).

/*
(atomicNumber Carbon 6)
*/
fof(a5000,axiom,s_atomicNumber(s_Carbon, 6)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Carbon) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 12.01115 Amu))))
*/
fof(a5001,axiom,! [ATOM] : (((s_instance(ATOM, s_Carbon) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(12.01115, s_Amu))))).

/*
(instance Nitrogen SetOrClass)
*/
fof(a5002,axiom,s_instance(s_Nitrogen, s_SetOrClass)).

/*
(subclass Nitrogen ElementalSubstance)
*/
fof(a5003,axiom,s_subclass(s_Nitrogen, s_ElementalSubstance)).

/*
(names Nitrogen Nitrogen)
*/
fof(a5004,axiom,s_names(s_Nitrogen, 'Nitrogen')).

/*
(atomicNumber Nitrogen 7)
*/
fof(a5005,axiom,s_atomicNumber(s_Nitrogen, 7)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Nitrogen) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 14.0067 Amu))))
*/
fof(a5006,axiom,! [ATOM] : (((s_instance(ATOM, s_Nitrogen) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(14.0067, s_Amu))))).

/*
(instance Oxygen SetOrClass)
*/
fof(a5007,axiom,s_instance(s_Oxygen, s_SetOrClass)).

/*
(subclass Oxygen ElementalSubstance)
*/
fof(a5008,axiom,s_subclass(s_Oxygen, s_ElementalSubstance)).

/*
(names Oxygen Oxygen)
*/
fof(a5009,axiom,s_names(s_Oxygen, 'Oxygen')).

/*
(atomicNumber Oxygen 8)
*/
fof(a5010,axiom,s_atomicNumber(s_Oxygen, 8)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Oxygen) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 15.9994 Amu))))
*/
fof(a5011,axiom,! [ATOM] : (((s_instance(ATOM, s_Oxygen) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(15.9994, s_Amu))))).

/*
(instance Fluorine SetOrClass)
*/
fof(a5012,axiom,s_instance(s_Fluorine, s_SetOrClass)).

/*
(subclass Fluorine ElementalSubstance)
*/
fof(a5013,axiom,s_subclass(s_Fluorine, s_ElementalSubstance)).

/*
(names Fluorine Fluorine)
*/
fof(a5014,axiom,s_names(s_Fluorine, 'Fluorine')).

/*
(atomicNumber Fluorine 9)
*/
fof(a5015,axiom,s_atomicNumber(s_Fluorine, 9)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Fluorine) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 18.9984 Amu))))
*/
fof(a5016,axiom,! [ATOM] : (((s_instance(ATOM, s_Fluorine) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(18.9984, s_Amu))))).

/*
(instance Neon SetOrClass)
*/
fof(a5017,axiom,s_instance(s_Neon, s_SetOrClass)).

/*
(subclass Neon ElementalSubstance)
*/
fof(a5018,axiom,s_subclass(s_Neon, s_ElementalSubstance)).

/*
(names Neon Neon)
*/
fof(a5019,axiom,s_names(s_Neon, 'Neon')).

/*
(atomicNumber Neon 10)
*/
fof(a5020,axiom,s_atomicNumber(s_Neon, 10)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Neon) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 20.183 Amu))))
*/
fof(a5021,axiom,! [ATOM] : (((s_instance(ATOM, s_Neon) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(20.183, s_Amu))))).

/*
(instance Sodium SetOrClass)
*/
fof(a5022,axiom,s_instance(s_Sodium, s_SetOrClass)).

/*
(subclass Sodium ElementalSubstance)
*/
fof(a5023,axiom,s_subclass(s_Sodium, s_ElementalSubstance)).

/*
(names Sodium Sodium)
*/
fof(a5024,axiom,s_names(s_Sodium, 'Sodium')).

/*
(atomicNumber Sodium 11)
*/
fof(a5025,axiom,s_atomicNumber(s_Sodium, 11)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Sodium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 22.9898 Amu))))
*/
fof(a5026,axiom,! [ATOM] : (((s_instance(ATOM, s_Sodium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(22.9898, s_Amu))))).

/*
(instance Magnesium SetOrClass)
*/
fof(a5027,axiom,s_instance(s_Magnesium, s_SetOrClass)).

/*
(subclass Magnesium ElementalSubstance)
*/
fof(a5028,axiom,s_subclass(s_Magnesium, s_ElementalSubstance)).

/*
(names Magnesium Magnesium)
*/
fof(a5029,axiom,s_names(s_Magnesium, 'Magnesium')).

/*
(atomicNumber Magnesium 12)
*/
fof(a5030,axiom,s_atomicNumber(s_Magnesium, 12)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Magnesium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 24.312 Amu))))
*/
fof(a5031,axiom,! [ATOM] : (((s_instance(ATOM, s_Magnesium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(24.312, s_Amu))))).

/*
(instance Aluminum SetOrClass)
*/
fof(a5032,axiom,s_instance(s_Aluminum, s_SetOrClass)).

/*
(subclass Aluminum ElementalSubstance)
*/
fof(a5033,axiom,s_subclass(s_Aluminum, s_ElementalSubstance)).

/*
(names Aluminum Aluminum)
*/
fof(a5034,axiom,s_names(s_Aluminum, 'Aluminum')).

/*
(atomicNumber Aluminum 13)
*/
fof(a5035,axiom,s_atomicNumber(s_Aluminum, 13)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Aluminum) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 26.9815 Amu))))
*/
fof(a5036,axiom,! [ATOM] : (((s_instance(ATOM, s_Aluminum) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(26.9815, s_Amu))))).

/*
(instance Silicon SetOrClass)
*/
fof(a5037,axiom,s_instance(s_Silicon, s_SetOrClass)).

/*
(subclass Silicon ElementalSubstance)
*/
fof(a5038,axiom,s_subclass(s_Silicon, s_ElementalSubstance)).

/*
(names Silicon Silicon)
*/
fof(a5039,axiom,s_names(s_Silicon, 'Silicon')).

/*
(atomicNumber Silicon 14)
*/
fof(a5040,axiom,s_atomicNumber(s_Silicon, 14)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Silicon) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 28.086 Amu))))
*/
fof(a5041,axiom,! [ATOM] : (((s_instance(ATOM, s_Silicon) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(28.086, s_Amu))))).

/*
(instance Phosphorus SetOrClass)
*/
fof(a5042,axiom,s_instance(s_Phosphorus, s_SetOrClass)).

/*
(subclass Phosphorus ElementalSubstance)
*/
fof(a5043,axiom,s_subclass(s_Phosphorus, s_ElementalSubstance)).

/*
(names Phosphorus Phosphorus)
*/
fof(a5044,axiom,s_names(s_Phosphorus, 'Phosphorus')).

/*
(atomicNumber Phosphorus 15)
*/
fof(a5045,axiom,s_atomicNumber(s_Phosphorus, 15)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Phosphorus) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 30.9738 Amu))))
*/
fof(a5046,axiom,! [ATOM] : (((s_instance(ATOM, s_Phosphorus) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(30.9738, s_Amu))))).

/*
(instance Sulphur SetOrClass)
*/
fof(a5047,axiom,s_instance(s_Sulphur, s_SetOrClass)).

/*
(subclass Sulphur ElementalSubstance)
*/
fof(a5048,axiom,s_subclass(s_Sulphur, s_ElementalSubstance)).

/*
(names Sulphur Sulphur)
*/
fof(a5049,axiom,s_names(s_Sulphur, 'Sulphur')).

/*
(atomicNumber Sulphur 16)
*/
fof(a5050,axiom,s_atomicNumber(s_Sulphur, 16)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Sulphur) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 32.064 Amu))))
*/
fof(a5051,axiom,! [ATOM] : (((s_instance(ATOM, s_Sulphur) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(32.064, s_Amu))))).

/*
(instance Chlorine SetOrClass)
*/
fof(a5052,axiom,s_instance(s_Chlorine, s_SetOrClass)).

/*
(subclass Chlorine ElementalSubstance)
*/
fof(a5053,axiom,s_subclass(s_Chlorine, s_ElementalSubstance)).

/*
(names Chlorine Chlorine)
*/
fof(a5054,axiom,s_names(s_Chlorine, 'Chlorine')).

/*
(atomicNumber Chlorine 17)
*/
fof(a5055,axiom,s_atomicNumber(s_Chlorine, 17)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Chlorine) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 35.453 Amu))))
*/
fof(a5056,axiom,! [ATOM] : (((s_instance(ATOM, s_Chlorine) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(35.453, s_Amu))))).

/*
(instance Argon SetOrClass)
*/
fof(a5057,axiom,s_instance(s_Argon, s_SetOrClass)).

/*
(subclass Argon ElementalSubstance)
*/
fof(a5058,axiom,s_subclass(s_Argon, s_ElementalSubstance)).

/*
(names Argon Argon)
*/
fof(a5059,axiom,s_names(s_Argon, 'Argon')).

/*
(atomicNumber Argon 18)
*/
fof(a5060,axiom,s_atomicNumber(s_Argon, 18)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Argon) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 39.948 Amu))))
*/
fof(a5061,axiom,! [ATOM] : (((s_instance(ATOM, s_Argon) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(39.948, s_Amu))))).

/*
(instance Potassium SetOrClass)
*/
fof(a5062,axiom,s_instance(s_Potassium, s_SetOrClass)).

/*
(subclass Potassium ElementalSubstance)
*/
fof(a5063,axiom,s_subclass(s_Potassium, s_ElementalSubstance)).

/*
(names Potassium Potassium)
*/
fof(a5064,axiom,s_names(s_Potassium, 'Potassium')).

/*
(atomicNumber Potassium 19)
*/
fof(a5065,axiom,s_atomicNumber(s_Potassium, 19)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Potassium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 39.0983 Amu))))
*/
fof(a5066,axiom,! [ATOM] : (((s_instance(ATOM, s_Potassium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(39.0983, s_Amu))))).

/*
(instance Calcium SetOrClass)
*/
fof(a5067,axiom,s_instance(s_Calcium, s_SetOrClass)).

/*
(subclass Calcium ElementalSubstance)
*/
fof(a5068,axiom,s_subclass(s_Calcium, s_ElementalSubstance)).

/*
(names Calcium Calcium)
*/
fof(a5069,axiom,s_names(s_Calcium, 'Calcium')).

/*
(atomicNumber Calcium 20)
*/
fof(a5070,axiom,s_atomicNumber(s_Calcium, 20)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Calcium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 40.08 Amu))))
*/
fof(a5071,axiom,! [ATOM] : (((s_instance(ATOM, s_Calcium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(40.08, s_Amu))))).

/*
(instance Scandium SetOrClass)
*/
fof(a5072,axiom,s_instance(s_Scandium, s_SetOrClass)).

/*
(subclass Scandium ElementalSubstance)
*/
fof(a5073,axiom,s_subclass(s_Scandium, s_ElementalSubstance)).

/*
(names Scandium Scandium)
*/
fof(a5074,axiom,s_names(s_Scandium, 'Scandium')).

/*
(atomicNumber Scandium 21)
*/
fof(a5075,axiom,s_atomicNumber(s_Scandium, 21)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Scandium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 44.956 Amu))))
*/
fof(a5076,axiom,! [ATOM] : (((s_instance(ATOM, s_Scandium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(44.956, s_Amu))))).

/*
(instance Titanium SetOrClass)
*/
fof(a5077,axiom,s_instance(s_Titanium, s_SetOrClass)).

/*
(subclass Titanium ElementalSubstance)
*/
fof(a5078,axiom,s_subclass(s_Titanium, s_ElementalSubstance)).

/*
(names Titanium Titanium)
*/
fof(a5079,axiom,s_names(s_Titanium, 'Titanium')).

/*
(atomicNumber Titanium 22)
*/
fof(a5080,axiom,s_atomicNumber(s_Titanium, 22)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Titanium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 47.9 Amu))))
*/
fof(a5081,axiom,! [ATOM] : (((s_instance(ATOM, s_Titanium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(47.9, s_Amu))))).

/*
(instance Vanadium SetOrClass)
*/
fof(a5082,axiom,s_instance(s_Vanadium, s_SetOrClass)).

/*
(subclass Vanadium ElementalSubstance)
*/
fof(a5083,axiom,s_subclass(s_Vanadium, s_ElementalSubstance)).

/*
(names Vanadium Vanadium)
*/
fof(a5084,axiom,s_names(s_Vanadium, 'Vanadium')).

/*
(atomicNumber Vanadium 23)
*/
fof(a5085,axiom,s_atomicNumber(s_Vanadium, 23)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Vanadium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 50.9415 Amu))))
*/
fof(a5086,axiom,! [ATOM] : (((s_instance(ATOM, s_Vanadium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(50.9415, s_Amu))))).

/*
(instance Chromium SetOrClass)
*/
fof(a5087,axiom,s_instance(s_Chromium, s_SetOrClass)).

/*
(subclass Chromium ElementalSubstance)
*/
fof(a5088,axiom,s_subclass(s_Chromium, s_ElementalSubstance)).

/*
(names Chromium Chromium)
*/
fof(a5089,axiom,s_names(s_Chromium, 'Chromium')).

/*
(atomicNumber Chromium 24)
*/
fof(a5090,axiom,s_atomicNumber(s_Chromium, 24)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Chromium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 51.996 Amu))))
*/
fof(a5091,axiom,! [ATOM] : (((s_instance(ATOM, s_Chromium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(51.996, s_Amu))))).

/*
(instance Manganese SetOrClass)
*/
fof(a5092,axiom,s_instance(s_Manganese, s_SetOrClass)).

/*
(subclass Manganese ElementalSubstance)
*/
fof(a5093,axiom,s_subclass(s_Manganese, s_ElementalSubstance)).

/*
(names Manganese Manganese)
*/
fof(a5094,axiom,s_names(s_Manganese, 'Manganese')).

/*
(atomicNumber Manganese 25)
*/
fof(a5095,axiom,s_atomicNumber(s_Manganese, 25)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Manganese) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 54.938 Amu))))
*/
fof(a5096,axiom,! [ATOM] : (((s_instance(ATOM, s_Manganese) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(54.938, s_Amu))))).

/*
(instance Iron SetOrClass)
*/
fof(a5097,axiom,s_instance(s_Iron, s_SetOrClass)).

/*
(subclass Iron ElementalSubstance)
*/
fof(a5098,axiom,s_subclass(s_Iron, s_ElementalSubstance)).

/*
(names Iron Iron)
*/
fof(a5099,axiom,s_names(s_Iron, 'Iron')).

/*
(atomicNumber Iron 26)
*/
fof(a5100,axiom,s_atomicNumber(s_Iron, 26)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Iron) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 55.847 Amu))))
*/
fof(a5101,axiom,! [ATOM] : (((s_instance(ATOM, s_Iron) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(55.847, s_Amu))))).

/*
(instance Cobalt SetOrClass)
*/
fof(a5102,axiom,s_instance(s_Cobalt, s_SetOrClass)).

/*
(subclass Cobalt ElementalSubstance)
*/
fof(a5103,axiom,s_subclass(s_Cobalt, s_ElementalSubstance)).

/*
(names Cobalt Cobalt)
*/
fof(a5104,axiom,s_names(s_Cobalt, 'Cobalt')).

/*
(atomicNumber Cobalt 27)
*/
fof(a5105,axiom,s_atomicNumber(s_Cobalt, 27)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Cobalt) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 58.993 Amu))))
*/
fof(a5106,axiom,! [ATOM] : (((s_instance(ATOM, s_Cobalt) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(58.993, s_Amu))))).

/*
(instance Nickel SetOrClass)
*/
fof(a5107,axiom,s_instance(s_Nickel, s_SetOrClass)).

/*
(subclass Nickel ElementalSubstance)
*/
fof(a5108,axiom,s_subclass(s_Nickel, s_ElementalSubstance)).

/*
(names Nickel Nickel)
*/
fof(a5109,axiom,s_names(s_Nickel, 'Nickel')).

/*
(atomicNumber Nickel 28)
*/
fof(a5110,axiom,s_atomicNumber(s_Nickel, 28)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Nickel) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 58.71 Amu))))
*/
fof(a5111,axiom,! [ATOM] : (((s_instance(ATOM, s_Nickel) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(58.71, s_Amu))))).

/*
(instance Copper SetOrClass)
*/
fof(a5112,axiom,s_instance(s_Copper, s_SetOrClass)).

/*
(subclass Copper ElementalSubstance)
*/
fof(a5113,axiom,s_subclass(s_Copper, s_ElementalSubstance)).

/*
(names Copper Copper)
*/
fof(a5114,axiom,s_names(s_Copper, 'Copper')).

/*
(atomicNumber Copper 29)
*/
fof(a5115,axiom,s_atomicNumber(s_Copper, 29)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Copper) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 63.54 Amu))))
*/
fof(a5116,axiom,! [ATOM] : (((s_instance(ATOM, s_Copper) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(63.54, s_Amu))))).

/*
(instance Zinc SetOrClass)
*/
fof(a5117,axiom,s_instance(s_Zinc, s_SetOrClass)).

/*
(subclass Zinc ElementalSubstance)
*/
fof(a5118,axiom,s_subclass(s_Zinc, s_ElementalSubstance)).

/*
(names Zinc Zinc)
*/
fof(a5119,axiom,s_names(s_Zinc, 'Zinc')).

/*
(atomicNumber Zinc 30)
*/
fof(a5120,axiom,s_atomicNumber(s_Zinc, 30)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Zinc) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 65.38 Amu))))
*/
fof(a5121,axiom,! [ATOM] : (((s_instance(ATOM, s_Zinc) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(65.38, s_Amu))))).

/*
(instance Gallium SetOrClass)
*/
fof(a5122,axiom,s_instance(s_Gallium, s_SetOrClass)).

/*
(subclass Gallium ElementalSubstance)
*/
fof(a5123,axiom,s_subclass(s_Gallium, s_ElementalSubstance)).

/*
(names Gallium Gallium)
*/
fof(a5124,axiom,s_names(s_Gallium, 'Gallium')).

/*
(atomicNumber Gallium 31)
*/
fof(a5125,axiom,s_atomicNumber(s_Gallium, 31)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Gallium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 69.72 Amu))))
*/
fof(a5126,axiom,! [ATOM] : (((s_instance(ATOM, s_Gallium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(69.72, s_Amu))))).

/*
(instance Germanium SetOrClass)
*/
fof(a5127,axiom,s_instance(s_Germanium, s_SetOrClass)).

/*
(subclass Germanium ElementalSubstance)
*/
fof(a5128,axiom,s_subclass(s_Germanium, s_ElementalSubstance)).

/*
(names Germanium Germanium)
*/
fof(a5129,axiom,s_names(s_Germanium, 'Germanium')).

/*
(atomicNumber Germanium 32)
*/
fof(a5130,axiom,s_atomicNumber(s_Germanium, 32)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Germanium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 72.59 Amu))))
*/
fof(a5131,axiom,! [ATOM] : (((s_instance(ATOM, s_Germanium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(72.59, s_Amu))))).

/*
(instance Arsenic SetOrClass)
*/
fof(a5132,axiom,s_instance(s_Arsenic, s_SetOrClass)).

/*
(subclass Arsenic ElementalSubstance)
*/
fof(a5133,axiom,s_subclass(s_Arsenic, s_ElementalSubstance)).

/*
(names Arsenic Arsenic)
*/
fof(a5134,axiom,s_names(s_Arsenic, 'Arsenic')).

/*
(atomicNumber Arsenic 33)
*/
fof(a5135,axiom,s_atomicNumber(s_Arsenic, 33)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Arsenic) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 74.922 Amu))))
*/
fof(a5136,axiom,! [ATOM] : (((s_instance(ATOM, s_Arsenic) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(74.922, s_Amu))))).

/*
(instance Selenium SetOrClass)
*/
fof(a5137,axiom,s_instance(s_Selenium, s_SetOrClass)).

/*
(subclass Selenium ElementalSubstance)
*/
fof(a5138,axiom,s_subclass(s_Selenium, s_ElementalSubstance)).

/*
(names Selenium Selenium)
*/
fof(a5139,axiom,s_names(s_Selenium, 'Selenium')).

/*
(atomicNumber Selenium 34)
*/
fof(a5140,axiom,s_atomicNumber(s_Selenium, 34)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Selenium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 78.96 Amu))))
*/
fof(a5141,axiom,! [ATOM] : (((s_instance(ATOM, s_Selenium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(78.96, s_Amu))))).

/*
(instance Bromine SetOrClass)
*/
fof(a5142,axiom,s_instance(s_Bromine, s_SetOrClass)).

/*
(subclass Bromine ElementalSubstance)
*/
fof(a5143,axiom,s_subclass(s_Bromine, s_ElementalSubstance)).

/*
(names Bromine Bromine)
*/
fof(a5144,axiom,s_names(s_Bromine, 'Bromine')).

/*
(atomicNumber Bromine 35)
*/
fof(a5145,axiom,s_atomicNumber(s_Bromine, 35)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Bromine) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 79.909 Amu))))
*/
fof(a5146,axiom,! [ATOM] : (((s_instance(ATOM, s_Bromine) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(79.909, s_Amu))))).

/*
(instance Krypton SetOrClass)
*/
fof(a5147,axiom,s_instance(s_Krypton, s_SetOrClass)).

/*
(subclass Krypton ElementalSubstance)
*/
fof(a5148,axiom,s_subclass(s_Krypton, s_ElementalSubstance)).

/*
(names Krypton Krypton)
*/
fof(a5149,axiom,s_names(s_Krypton, 'Krypton')).

/*
(atomicNumber Krypton 36)
*/
fof(a5150,axiom,s_atomicNumber(s_Krypton, 36)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Krypton) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 83.8 Amu))))
*/
fof(a5151,axiom,! [ATOM] : (((s_instance(ATOM, s_Krypton) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(83.8, s_Amu))))).

/*
(instance Rubidium SetOrClass)
*/
fof(a5152,axiom,s_instance(s_Rubidium, s_SetOrClass)).

/*
(subclass Rubidium ElementalSubstance)
*/
fof(a5153,axiom,s_subclass(s_Rubidium, s_ElementalSubstance)).

/*
(names Rubidium Rubidium)
*/
fof(a5154,axiom,s_names(s_Rubidium, 'Rubidium')).

/*
(atomicNumber Rubidium 37)
*/
fof(a5155,axiom,s_atomicNumber(s_Rubidium, 37)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Rubidium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 85.47 Amu))))
*/
fof(a5156,axiom,! [ATOM] : (((s_instance(ATOM, s_Rubidium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(85.47, s_Amu))))).

/*
(instance Strontium SetOrClass)
*/
fof(a5157,axiom,s_instance(s_Strontium, s_SetOrClass)).

/*
(subclass Strontium ElementalSubstance)
*/
fof(a5158,axiom,s_subclass(s_Strontium, s_ElementalSubstance)).

/*
(names Strontium Strontium)
*/
fof(a5159,axiom,s_names(s_Strontium, 'Strontium')).

/*
(atomicNumber Strontium 38)
*/
fof(a5160,axiom,s_atomicNumber(s_Strontium, 38)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Strontium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 87.62 Amu))))
*/
fof(a5161,axiom,! [ATOM] : (((s_instance(ATOM, s_Strontium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(87.62, s_Amu))))).

/*
(instance Yttrium SetOrClass)
*/
fof(a5162,axiom,s_instance(s_Yttrium, s_SetOrClass)).

/*
(subclass Yttrium ElementalSubstance)
*/
fof(a5163,axiom,s_subclass(s_Yttrium, s_ElementalSubstance)).

/*
(names Yttrium Yttrium)
*/
fof(a5164,axiom,s_names(s_Yttrium, 'Yttrium')).

/*
(atomicNumber Yttrium 39)
*/
fof(a5165,axiom,s_atomicNumber(s_Yttrium, 39)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Yttrium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 88.905 Amu))))
*/
fof(a5166,axiom,! [ATOM] : (((s_instance(ATOM, s_Yttrium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(88.905, s_Amu))))).

/*
(instance Zirconium SetOrClass)
*/
fof(a5167,axiom,s_instance(s_Zirconium, s_SetOrClass)).

/*
(subclass Zirconium ElementalSubstance)
*/
fof(a5168,axiom,s_subclass(s_Zirconium, s_ElementalSubstance)).

/*
(names Zirconium Zirconium)
*/
fof(a5169,axiom,s_names(s_Zirconium, 'Zirconium')).

/*
(atomicNumber Zirconium 40)
*/
fof(a5170,axiom,s_atomicNumber(s_Zirconium, 40)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Zirconium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 91.22 Amu))))
*/
fof(a5171,axiom,! [ATOM] : (((s_instance(ATOM, s_Zirconium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(91.22, s_Amu))))).

/*
(instance Niobium SetOrClass)
*/
fof(a5172,axiom,s_instance(s_Niobium, s_SetOrClass)).

/*
(subclass Niobium ElementalSubstance)
*/
fof(a5173,axiom,s_subclass(s_Niobium, s_ElementalSubstance)).

/*
(names Niobium Niobium)
*/
fof(a5174,axiom,s_names(s_Niobium, 'Niobium')).

/*
(atomicNumber Niobium 41)
*/
fof(a5175,axiom,s_atomicNumber(s_Niobium, 41)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Niobium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 92.906 Amu))))
*/
fof(a5176,axiom,! [ATOM] : (((s_instance(ATOM, s_Niobium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(92.906, s_Amu))))).

/*
(instance Molybdenum SetOrClass)
*/
fof(a5177,axiom,s_instance(s_Molybdenum, s_SetOrClass)).

/*
(subclass Molybdenum ElementalSubstance)
*/
fof(a5178,axiom,s_subclass(s_Molybdenum, s_ElementalSubstance)).

/*
(names Molybdenum Molybdenum)
*/
fof(a5179,axiom,s_names(s_Molybdenum, 'Molybdenum')).

/*
(atomicNumber Molybdenum 42)
*/
fof(a5180,axiom,s_atomicNumber(s_Molybdenum, 42)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Molybdenum) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 95.94 Amu))))
*/
fof(a5181,axiom,! [ATOM] : (((s_instance(ATOM, s_Molybdenum) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(95.94, s_Amu))))).

/*
(instance Technetium SetOrClass)
*/
fof(a5182,axiom,s_instance(s_Technetium, s_SetOrClass)).

/*
(subclass Technetium ElementalSubstance)
*/
fof(a5183,axiom,s_subclass(s_Technetium, s_ElementalSubstance)).

/*
(names Technetium Technetium)
*/
fof(a5184,axiom,s_names(s_Technetium, 'Technetium')).

/*
(atomicNumber Technetium 43)
*/
fof(a5185,axiom,s_atomicNumber(s_Technetium, 43)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Technetium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 98 Amu))))
*/
fof(a5186,axiom,! [ATOM] : (((s_instance(ATOM, s_Technetium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(98, s_Amu))))).

/*
(instance Ruthenium SetOrClass)
*/
fof(a5187,axiom,s_instance(s_Ruthenium, s_SetOrClass)).

/*
(subclass Ruthenium ElementalSubstance)
*/
fof(a5188,axiom,s_subclass(s_Ruthenium, s_ElementalSubstance)).

/*
(names Ruthenium Ruthenium)
*/
fof(a5189,axiom,s_names(s_Ruthenium, 'Ruthenium')).

/*
(atomicNumber Ruthenium 44)
*/
fof(a5190,axiom,s_atomicNumber(s_Ruthenium, 44)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Ruthenium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 101.07 Amu))))
*/
fof(a5191,axiom,! [ATOM] : (((s_instance(ATOM, s_Ruthenium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(101.07, s_Amu))))).

/*
(instance Rhodium SetOrClass)
*/
fof(a5192,axiom,s_instance(s_Rhodium, s_SetOrClass)).

/*
(subclass Rhodium ElementalSubstance)
*/
fof(a5193,axiom,s_subclass(s_Rhodium, s_ElementalSubstance)).

/*
(names Rhodium Rhodium)
*/
fof(a5194,axiom,s_names(s_Rhodium, 'Rhodium')).

/*
(atomicNumber Rhodium 45)
*/
fof(a5195,axiom,s_atomicNumber(s_Rhodium, 45)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Rhodium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 102.905 Amu))))
*/
fof(a5196,axiom,! [ATOM] : (((s_instance(ATOM, s_Rhodium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(102.905, s_Amu))))).

/*
(instance Palladium SetOrClass)
*/
fof(a5197,axiom,s_instance(s_Palladium, s_SetOrClass)).

/*
(subclass Palladium ElementalSubstance)
*/
fof(a5198,axiom,s_subclass(s_Palladium, s_ElementalSubstance)).

/*
(names Palladium Palladium)
*/
fof(a5199,axiom,s_names(s_Palladium, 'Palladium')).

/*
(atomicNumber Palladium 46)
*/
fof(a5200,axiom,s_atomicNumber(s_Palladium, 46)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Palladium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 106.4 Amu))))
*/
fof(a5201,axiom,! [ATOM] : (((s_instance(ATOM, s_Palladium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(106.4, s_Amu))))).

/*
(instance Silver SetOrClass)
*/
fof(a5202,axiom,s_instance(s_Silver, s_SetOrClass)).

/*
(subclass Silver ElementalSubstance)
*/
fof(a5203,axiom,s_subclass(s_Silver, s_ElementalSubstance)).

/*
(names Silver Silver)
*/
fof(a5204,axiom,s_names(s_Silver, 'Silver')).

/*
(atomicNumber Silver 47)
*/
fof(a5205,axiom,s_atomicNumber(s_Silver, 47)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Silver) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 107.87 Amu))))
*/
fof(a5206,axiom,! [ATOM] : (((s_instance(ATOM, s_Silver) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(107.87, s_Amu))))).

/*
(instance Cadmium SetOrClass)
*/
fof(a5207,axiom,s_instance(s_Cadmium, s_SetOrClass)).

/*
(subclass Cadmium ElementalSubstance)
*/
fof(a5208,axiom,s_subclass(s_Cadmium, s_ElementalSubstance)).

/*
(names Cadmium Cadmium)
*/
fof(a5209,axiom,s_names(s_Cadmium, 'Cadmium')).

/*
(atomicNumber Cadmium 48)
*/
fof(a5210,axiom,s_atomicNumber(s_Cadmium, 48)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Cadmium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 112.4 Amu))))
*/
fof(a5211,axiom,! [ATOM] : (((s_instance(ATOM, s_Cadmium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(112.4, s_Amu))))).

/*
(instance Indium SetOrClass)
*/
fof(a5212,axiom,s_instance(s_Indium, s_SetOrClass)).

/*
(subclass Indium ElementalSubstance)
*/
fof(a5213,axiom,s_subclass(s_Indium, s_ElementalSubstance)).

/*
(names Indium Indium)
*/
fof(a5214,axiom,s_names(s_Indium, 'Indium')).

/*
(atomicNumber Indium 49)
*/
fof(a5215,axiom,s_atomicNumber(s_Indium, 49)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Indium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 114.82 Amu))))
*/
fof(a5216,axiom,! [ATOM] : (((s_instance(ATOM, s_Indium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(114.82, s_Amu))))).

/*
(instance Tin SetOrClass)
*/
fof(a5217,axiom,s_instance(s_Tin, s_SetOrClass)).

/*
(subclass Tin ElementalSubstance)
*/
fof(a5218,axiom,s_subclass(s_Tin, s_ElementalSubstance)).

/*
(names Tin Tin)
*/
fof(a5219,axiom,s_names(s_Tin, 'Tin')).

/*
(atomicNumber Tin 50)
*/
fof(a5220,axiom,s_atomicNumber(s_Tin, 50)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Tin) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 118.69 Amu))))
*/
fof(a5221,axiom,! [ATOM] : (((s_instance(ATOM, s_Tin) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(118.69, s_Amu))))).

/*
(instance Antimony SetOrClass)
*/
fof(a5222,axiom,s_instance(s_Antimony, s_SetOrClass)).

/*
(subclass Antimony ElementalSubstance)
*/
fof(a5223,axiom,s_subclass(s_Antimony, s_ElementalSubstance)).

/*
(names Antimony Antimony)
*/
fof(a5224,axiom,s_names(s_Antimony, 'Antimony')).

/*
(atomicNumber Antimony 51)
*/
fof(a5225,axiom,s_atomicNumber(s_Antimony, 51)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Antimony) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 121.75 Amu))))
*/
fof(a5226,axiom,! [ATOM] : (((s_instance(ATOM, s_Antimony) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(121.75, s_Amu))))).

/*
(instance Tellurium SetOrClass)
*/
fof(a5227,axiom,s_instance(s_Tellurium, s_SetOrClass)).

/*
(subclass Tellurium ElementalSubstance)
*/
fof(a5228,axiom,s_subclass(s_Tellurium, s_ElementalSubstance)).

/*
(names Tellurium Tellurium)
*/
fof(a5229,axiom,s_names(s_Tellurium, 'Tellurium')).

/*
(atomicNumber Tellurium 52)
*/
fof(a5230,axiom,s_atomicNumber(s_Tellurium, 52)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Tellurium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 127.6 Amu))))
*/
fof(a5231,axiom,! [ATOM] : (((s_instance(ATOM, s_Tellurium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(127.6, s_Amu))))).

/*
(instance Iodine SetOrClass)
*/
fof(a5232,axiom,s_instance(s_Iodine, s_SetOrClass)).

/*
(subclass Iodine ElementalSubstance)
*/
fof(a5233,axiom,s_subclass(s_Iodine, s_ElementalSubstance)).

/*
(names Iodine Iodine)
*/
fof(a5234,axiom,s_names(s_Iodine, 'Iodine')).

/*
(atomicNumber Iodine 53)
*/
fof(a5235,axiom,s_atomicNumber(s_Iodine, 53)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Iodine) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 126.904 Amu))))
*/
fof(a5236,axiom,! [ATOM] : (((s_instance(ATOM, s_Iodine) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(126.904, s_Amu))))).

/*
(instance Xenon SetOrClass)
*/
fof(a5237,axiom,s_instance(s_Xenon, s_SetOrClass)).

/*
(subclass Xenon ElementalSubstance)
*/
fof(a5238,axiom,s_subclass(s_Xenon, s_ElementalSubstance)).

/*
(names Xenon Xenon)
*/
fof(a5239,axiom,s_names(s_Xenon, 'Xenon')).

/*
(atomicNumber Xenon 54)
*/
fof(a5240,axiom,s_atomicNumber(s_Xenon, 54)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Xenon) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 131.3 Amu))))
*/
fof(a5241,axiom,! [ATOM] : (((s_instance(ATOM, s_Xenon) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(131.3, s_Amu))))).

/*
(instance Caesium SetOrClass)
*/
fof(a5242,axiom,s_instance(s_Caesium, s_SetOrClass)).

/*
(subclass Caesium ElementalSubstance)
*/
fof(a5243,axiom,s_subclass(s_Caesium, s_ElementalSubstance)).

/*
(names Caesium Caesium)
*/
fof(a5244,axiom,s_names(s_Caesium, 'Caesium')).

/*
(atomicNumber Caesium 55)
*/
fof(a5245,axiom,s_atomicNumber(s_Caesium, 55)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Caesium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 132.90546 Amu))))
*/
fof(a5246,axiom,! [ATOM] : (((s_instance(ATOM, s_Caesium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(132.90546, s_Amu))))).

/*
(instance Barium SetOrClass)
*/
fof(a5247,axiom,s_instance(s_Barium, s_SetOrClass)).

/*
(subclass Barium ElementalSubstance)
*/
fof(a5248,axiom,s_subclass(s_Barium, s_ElementalSubstance)).

/*
(names Barium Barium)
*/
fof(a5249,axiom,s_names(s_Barium, 'Barium')).

/*
(atomicNumber Barium 56)
*/
fof(a5250,axiom,s_atomicNumber(s_Barium, 56)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Barium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 137.34 Amu))))
*/
fof(a5251,axiom,! [ATOM] : (((s_instance(ATOM, s_Barium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(137.34, s_Amu))))).

/*
(instance Lanthanum SetOrClass)
*/
fof(a5252,axiom,s_instance(s_Lanthanum, s_SetOrClass)).

/*
(subclass Lanthanum ElementalSubstance)
*/
fof(a5253,axiom,s_subclass(s_Lanthanum, s_ElementalSubstance)).

/*
(names Lanthanum Lanthanum)
*/
fof(a5254,axiom,s_names(s_Lanthanum, 'Lanthanum')).

/*
(atomicNumber Lanthanum 57)
*/
fof(a5255,axiom,s_atomicNumber(s_Lanthanum, 57)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Lanthanum) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 138.9055 Amu))))
*/
fof(a5256,axiom,! [ATOM] : (((s_instance(ATOM, s_Lanthanum) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(138.9055, s_Amu))))).

/*
(instance Cerium SetOrClass)
*/
fof(a5257,axiom,s_instance(s_Cerium, s_SetOrClass)).

/*
(subclass Cerium ElementalSubstance)
*/
fof(a5258,axiom,s_subclass(s_Cerium, s_ElementalSubstance)).

/*
(names Cerium Cerium)
*/
fof(a5259,axiom,s_names(s_Cerium, 'Cerium')).

/*
(atomicNumber Cerium 58)
*/
fof(a5260,axiom,s_atomicNumber(s_Cerium, 58)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Cerium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 140.12 Amu))))
*/
fof(a5261,axiom,! [ATOM] : (((s_instance(ATOM, s_Cerium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(140.12, s_Amu))))).

/*
(instance Praseodymium SetOrClass)
*/
fof(a5262,axiom,s_instance(s_Praseodymium, s_SetOrClass)).

/*
(subclass Praseodymium ElementalSubstance)
*/
fof(a5263,axiom,s_subclass(s_Praseodymium, s_ElementalSubstance)).

/*
(names Praseodymium Praseodymium)
*/
fof(a5264,axiom,s_names(s_Praseodymium, 'Praseodymium')).

/*
(atomicNumber Praseodymium 59)
*/
fof(a5265,axiom,s_atomicNumber(s_Praseodymium, 59)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Praseodymium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 140.907 Amu))))
*/
fof(a5266,axiom,! [ATOM] : (((s_instance(ATOM, s_Praseodymium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(140.907, s_Amu))))).

/*
(instance Neodymium SetOrClass)
*/
fof(a5267,axiom,s_instance(s_Neodymium, s_SetOrClass)).

/*
(subclass Neodymium ElementalSubstance)
*/
fof(a5268,axiom,s_subclass(s_Neodymium, s_ElementalSubstance)).

/*
(names Neodymium Neodymium)
*/
fof(a5269,axiom,s_names(s_Neodymium, 'Neodymium')).

/*
(atomicNumber Neodymium 60)
*/
fof(a5270,axiom,s_atomicNumber(s_Neodymium, 60)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Neodymium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 144.24 Amu))))
*/
fof(a5271,axiom,! [ATOM] : (((s_instance(ATOM, s_Neodymium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(144.24, s_Amu))))).

/*
(instance Promethium SetOrClass)
*/
fof(a5272,axiom,s_instance(s_Promethium, s_SetOrClass)).

/*
(subclass Promethium ElementalSubstance)
*/
fof(a5273,axiom,s_subclass(s_Promethium, s_ElementalSubstance)).

/*
(names Promethium Promethium)
*/
fof(a5274,axiom,s_names(s_Promethium, 'Promethium')).

/*
(atomicNumber Promethium 61)
*/
fof(a5275,axiom,s_atomicNumber(s_Promethium, 61)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Promethium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 147 Amu))))
*/
fof(a5276,axiom,! [ATOM] : (((s_instance(ATOM, s_Promethium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(147, s_Amu))))).

/*
(instance Samarium SetOrClass)
*/
fof(a5277,axiom,s_instance(s_Samarium, s_SetOrClass)).

/*
(subclass Samarium ElementalSubstance)
*/
fof(a5278,axiom,s_subclass(s_Samarium, s_ElementalSubstance)).

/*
(names Samarium Samarium)
*/
fof(a5279,axiom,s_names(s_Samarium, 'Samarium')).

/*
(atomicNumber Samarium 62)
*/
fof(a5280,axiom,s_atomicNumber(s_Samarium, 62)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Samarium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 150.35 Amu))))
*/
fof(a5281,axiom,! [ATOM] : (((s_instance(ATOM, s_Samarium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(150.35, s_Amu))))).

/*
(instance Europium SetOrClass)
*/
fof(a5282,axiom,s_instance(s_Europium, s_SetOrClass)).

/*
(subclass Europium ElementalSubstance)
*/
fof(a5283,axiom,s_subclass(s_Europium, s_ElementalSubstance)).

/*
(names Europium Europium)
*/
fof(a5284,axiom,s_names(s_Europium, 'Europium')).

/*
(atomicNumber Europium 63)
*/
fof(a5285,axiom,s_atomicNumber(s_Europium, 63)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Europium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 151.25 Amu))))
*/
fof(a5286,axiom,! [ATOM] : (((s_instance(ATOM, s_Europium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(151.25, s_Amu))))).

/*
(instance Gadolinium SetOrClass)
*/
fof(a5287,axiom,s_instance(s_Gadolinium, s_SetOrClass)).

/*
(subclass Gadolinium ElementalSubstance)
*/
fof(a5288,axiom,s_subclass(s_Gadolinium, s_ElementalSubstance)).

/*
(names Gadolinium Gadolinium)
*/
fof(a5289,axiom,s_names(s_Gadolinium, 'Gadolinium')).

/*
(atomicNumber Gadolinium 64)
*/
fof(a5290,axiom,s_atomicNumber(s_Gadolinium, 64)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Gadolinium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 157.25 Amu))))
*/
fof(a5291,axiom,! [ATOM] : (((s_instance(ATOM, s_Gadolinium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(157.25, s_Amu))))).

/*
(instance Terbium SetOrClass)
*/
fof(a5292,axiom,s_instance(s_Terbium, s_SetOrClass)).

/*
(subclass Terbium ElementalSubstance)
*/
fof(a5293,axiom,s_subclass(s_Terbium, s_ElementalSubstance)).

/*
(names Terbium Terbium)
*/
fof(a5294,axiom,s_names(s_Terbium, 'Terbium')).

/*
(atomicNumber Terbium 65)
*/
fof(a5295,axiom,s_atomicNumber(s_Terbium, 65)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Terbium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 158.924 Amu))))
*/
fof(a5296,axiom,! [ATOM] : (((s_instance(ATOM, s_Terbium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(158.924, s_Amu))))).

/*
(instance Dysprosium SetOrClass)
*/
fof(a5297,axiom,s_instance(s_Dysprosium, s_SetOrClass)).

/*
(subclass Dysprosium ElementalSubstance)
*/
fof(a5298,axiom,s_subclass(s_Dysprosium, s_ElementalSubstance)).

/*
(names Dysprosium Dysprosium)
*/
fof(a5299,axiom,s_names(s_Dysprosium, 'Dysprosium')).

/*
(atomicNumber Dysprosium 66)
*/
fof(a5300,axiom,s_atomicNumber(s_Dysprosium, 66)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Dysprosium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 162.5 Amu))))
*/
fof(a5301,axiom,! [ATOM] : (((s_instance(ATOM, s_Dysprosium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(162.5, s_Amu))))).

/*
(instance Holmium SetOrClass)
*/
fof(a5302,axiom,s_instance(s_Holmium, s_SetOrClass)).

/*
(subclass Holmium ElementalSubstance)
*/
fof(a5303,axiom,s_subclass(s_Holmium, s_ElementalSubstance)).

/*
(names Holmium Holmium)
*/
fof(a5304,axiom,s_names(s_Holmium, 'Holmium')).

/*
(atomicNumber Holmium 67)
*/
fof(a5305,axiom,s_atomicNumber(s_Holmium, 67)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Holmium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 167.26 Amu))))
*/
fof(a5306,axiom,! [ATOM] : (((s_instance(ATOM, s_Holmium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(167.26, s_Amu))))).

/*
(instance Erbium SetOrClass)
*/
fof(a5307,axiom,s_instance(s_Erbium, s_SetOrClass)).

/*
(subclass Erbium ElementalSubstance)
*/
fof(a5308,axiom,s_subclass(s_Erbium, s_ElementalSubstance)).

/*
(names Erbium Erbium)
*/
fof(a5309,axiom,s_names(s_Erbium, 'Erbium')).

/*
(atomicNumber Erbium 68)
*/
fof(a5310,axiom,s_atomicNumber(s_Erbium, 68)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Erbium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 167.26 Amu))))
*/
fof(a5311,axiom,! [ATOM] : (((s_instance(ATOM, s_Erbium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(167.26, s_Amu))))).

/*
(instance Thulium SetOrClass)
*/
fof(a5312,axiom,s_instance(s_Thulium, s_SetOrClass)).

/*
(subclass Thulium ElementalSubstance)
*/
fof(a5313,axiom,s_subclass(s_Thulium, s_ElementalSubstance)).

/*
(names Thulium Thulium)
*/
fof(a5314,axiom,s_names(s_Thulium, 'Thulium')).

/*
(atomicNumber Thulium 69)
*/
fof(a5315,axiom,s_atomicNumber(s_Thulium, 69)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Thulium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 168.934 Amu))))
*/
fof(a5316,axiom,! [ATOM] : (((s_instance(ATOM, s_Thulium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(168.934, s_Amu))))).

/*
(instance Ytterbium SetOrClass)
*/
fof(a5317,axiom,s_instance(s_Ytterbium, s_SetOrClass)).

/*
(subclass Ytterbium ElementalSubstance)
*/
fof(a5318,axiom,s_subclass(s_Ytterbium, s_ElementalSubstance)).

/*
(names Ytterbium Ytterbium)
*/
fof(a5319,axiom,s_names(s_Ytterbium, 'Ytterbium')).

/*
(atomicNumber Ytterbium 70)
*/
fof(a5320,axiom,s_atomicNumber(s_Ytterbium, 70)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Ytterbium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 173.04 Amu))))
*/
fof(a5321,axiom,! [ATOM] : (((s_instance(ATOM, s_Ytterbium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(173.04, s_Amu))))).

/*
(instance Lutetium SetOrClass)
*/
fof(a5322,axiom,s_instance(s_Lutetium, s_SetOrClass)).

/*
(subclass Lutetium ElementalSubstance)
*/
fof(a5323,axiom,s_subclass(s_Lutetium, s_ElementalSubstance)).

/*
(names Lutetium Lutetium)
*/
fof(a5324,axiom,s_names(s_Lutetium, 'Lutetium')).

/*
(atomicNumber Lutetium 71)
*/
fof(a5325,axiom,s_atomicNumber(s_Lutetium, 71)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Lutetium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 194.967 Amu))))
*/
fof(a5326,axiom,! [ATOM] : (((s_instance(ATOM, s_Lutetium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(194.967, s_Amu))))).

/*
(instance Hafnium SetOrClass)
*/
fof(a5327,axiom,s_instance(s_Hafnium, s_SetOrClass)).

/*
(subclass Hafnium ElementalSubstance)
*/
fof(a5328,axiom,s_subclass(s_Hafnium, s_ElementalSubstance)).

/*
(names Hafnium Hafnium)
*/
fof(a5329,axiom,s_names(s_Hafnium, 'Hafnium')).

/*
(atomicNumber Hafnium 72)
*/
fof(a5330,axiom,s_atomicNumber(s_Hafnium, 72)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Hafnium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 178.49 Amu))))
*/
fof(a5331,axiom,! [ATOM] : (((s_instance(ATOM, s_Hafnium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(178.49, s_Amu))))).

/*
(instance Tantalum SetOrClass)
*/
fof(a5332,axiom,s_instance(s_Tantalum, s_SetOrClass)).

/*
(subclass Tantalum ElementalSubstance)
*/
fof(a5333,axiom,s_subclass(s_Tantalum, s_ElementalSubstance)).

/*
(names Tantalum Tantalum)
*/
fof(a5334,axiom,s_names(s_Tantalum, 'Tantalum')).

/*
(atomicNumber Tantalum 73)
*/
fof(a5335,axiom,s_atomicNumber(s_Tantalum, 73)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Tantalum) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 180.948 Amu))))
*/
fof(a5336,axiom,! [ATOM] : (((s_instance(ATOM, s_Tantalum) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(180.948, s_Amu))))).

/*
(instance Tungsten SetOrClass)
*/
fof(a5337,axiom,s_instance(s_Tungsten, s_SetOrClass)).

/*
(subclass Tungsten ElementalSubstance)
*/
fof(a5338,axiom,s_subclass(s_Tungsten, s_ElementalSubstance)).

/*
(names Tungsten Tungsten)
*/
fof(a5339,axiom,s_names(s_Tungsten, 'Tungsten')).

/*
(atomicNumber Tungsten 74)
*/
fof(a5340,axiom,s_atomicNumber(s_Tungsten, 74)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Tungsten) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 183.85 Amu))))
*/
fof(a5341,axiom,! [ATOM] : (((s_instance(ATOM, s_Tungsten) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(183.85, s_Amu))))).

/*
(instance Rhenium SetOrClass)
*/
fof(a5342,axiom,s_instance(s_Rhenium, s_SetOrClass)).

/*
(subclass Rhenium ElementalSubstance)
*/
fof(a5343,axiom,s_subclass(s_Rhenium, s_ElementalSubstance)).

/*
(names Rhenium Rhenium)
*/
fof(a5344,axiom,s_names(s_Rhenium, 'Rhenium')).

/*
(atomicNumber Rhenium 75)
*/
fof(a5345,axiom,s_atomicNumber(s_Rhenium, 75)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Rhenium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 186.2 Amu))))
*/
fof(a5346,axiom,! [ATOM] : (((s_instance(ATOM, s_Rhenium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(186.2, s_Amu))))).

/*
(instance Osmium SetOrClass)
*/
fof(a5347,axiom,s_instance(s_Osmium, s_SetOrClass)).

/*
(subclass Osmium ElementalSubstance)
*/
fof(a5348,axiom,s_subclass(s_Osmium, s_ElementalSubstance)).

/*
(names Osmium Osmium)
*/
fof(a5349,axiom,s_names(s_Osmium, 'Osmium')).

/*
(atomicNumber Osmium 76)
*/
fof(a5350,axiom,s_atomicNumber(s_Osmium, 76)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Osmium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 190.2 Amu))))
*/
fof(a5351,axiom,! [ATOM] : (((s_instance(ATOM, s_Osmium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(190.2, s_Amu))))).

/*
(instance Iridium SetOrClass)
*/
fof(a5352,axiom,s_instance(s_Iridium, s_SetOrClass)).

/*
(subclass Iridium ElementalSubstance)
*/
fof(a5353,axiom,s_subclass(s_Iridium, s_ElementalSubstance)).

/*
(names Iridium Iridium)
*/
fof(a5354,axiom,s_names(s_Iridium, 'Iridium')).

/*
(atomicNumber Iridium 77)
*/
fof(a5355,axiom,s_atomicNumber(s_Iridium, 77)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Iridium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 192.217 Amu))))
*/
fof(a5356,axiom,! [ATOM] : (((s_instance(ATOM, s_Iridium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(192.217, s_Amu))))).

/*
(instance Platinum SetOrClass)
*/
fof(a5357,axiom,s_instance(s_Platinum, s_SetOrClass)).

/*
(subclass Platinum ElementalSubstance)
*/
fof(a5358,axiom,s_subclass(s_Platinum, s_ElementalSubstance)).

/*
(names Platinum Platinum)
*/
fof(a5359,axiom,s_names(s_Platinum, 'Platinum')).

/*
(atomicNumber Platinum 78)
*/
fof(a5360,axiom,s_atomicNumber(s_Platinum, 78)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Platinum) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 195.078 Amu))))
*/
fof(a5361,axiom,! [ATOM] : (((s_instance(ATOM, s_Platinum) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(195.078, s_Amu))))).

/*
(instance Gold SetOrClass)
*/
fof(a5362,axiom,s_instance(s_Gold, s_SetOrClass)).

/*
(subclass Gold ElementalSubstance)
*/
fof(a5363,axiom,s_subclass(s_Gold, s_ElementalSubstance)).

/*
(names Gold Gold)
*/
fof(a5364,axiom,s_names(s_Gold, 'Gold')).

/*
(atomicNumber Gold 79)
*/
fof(a5365,axiom,s_atomicNumber(s_Gold, 79)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Gold) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 196.96655 Amu))))
*/
fof(a5366,axiom,! [ATOM] : (((s_instance(ATOM, s_Gold) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(196.96655, s_Amu))))).

/*
(instance Mercury SetOrClass)
*/
fof(a5367,axiom,s_instance(s_Mercury, s_SetOrClass)).

/*
(subclass Mercury ElementalSubstance)
*/
fof(a5368,axiom,s_subclass(s_Mercury, s_ElementalSubstance)).

/*
(names Mercury Mercury)
*/
fof(a5369,axiom,s_names(s_Mercury, 'Mercury')).

/*
(atomicNumber Mercury 80)
*/
fof(a5370,axiom,s_atomicNumber(s_Mercury, 80)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Mercury) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 200.59 Amu))))
*/
fof(a5371,axiom,! [ATOM] : (((s_instance(ATOM, s_Mercury) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(200.59, s_Amu))))).

/*
(instance Thallium SetOrClass)
*/
fof(a5372,axiom,s_instance(s_Thallium, s_SetOrClass)).

/*
(subclass Thallium ElementalSubstance)
*/
fof(a5373,axiom,s_subclass(s_Thallium, s_ElementalSubstance)).

/*
(names Thallium Thallium)
*/
fof(a5374,axiom,s_names(s_Thallium, 'Thallium')).

/*
(atomicNumber Thallium 81)
*/
fof(a5375,axiom,s_atomicNumber(s_Thallium, 81)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Thallium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 204.3833 Amu))))
*/
fof(a5376,axiom,! [ATOM] : (((s_instance(ATOM, s_Thallium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(204.3833, s_Amu))))).

/*
(instance Lead SetOrClass)
*/
fof(a5377,axiom,s_instance(s_Lead, s_SetOrClass)).

/*
(subclass Lead ElementalSubstance)
*/
fof(a5378,axiom,s_subclass(s_Lead, s_ElementalSubstance)).

/*
(names Lead Lead)
*/
fof(a5379,axiom,s_names(s_Lead, 'Lead')).

/*
(atomicNumber Lead 82)
*/
fof(a5380,axiom,s_atomicNumber(s_Lead, 82)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Lead) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 207.19 Amu))))
*/
fof(a5381,axiom,! [ATOM] : (((s_instance(ATOM, s_Lead) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(207.19, s_Amu))))).

/*
(instance Bismuth SetOrClass)
*/
fof(a5382,axiom,s_instance(s_Bismuth, s_SetOrClass)).

/*
(subclass Bismuth ElementalSubstance)
*/
fof(a5383,axiom,s_subclass(s_Bismuth, s_ElementalSubstance)).

/*
(names Bismuth Bismuth)
*/
fof(a5384,axiom,s_names(s_Bismuth, 'Bismuth')).

/*
(atomicNumber Bismuth 83)
*/
fof(a5385,axiom,s_atomicNumber(s_Bismuth, 83)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Bismuth) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 208.98 Amu))))
*/
fof(a5386,axiom,! [ATOM] : (((s_instance(ATOM, s_Bismuth) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(208.98, s_Amu))))).

/*
(instance Polonium SetOrClass)
*/
fof(a5387,axiom,s_instance(s_Polonium, s_SetOrClass)).

/*
(subclass Polonium ElementalSubstance)
*/
fof(a5388,axiom,s_subclass(s_Polonium, s_ElementalSubstance)).

/*
(names Polonium Polonium)
*/
fof(a5389,axiom,s_names(s_Polonium, 'Polonium')).

/*
(atomicNumber Polonium 84)
*/
fof(a5390,axiom,s_atomicNumber(s_Polonium, 84)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Polonium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 210 Amu))))
*/
fof(a5391,axiom,! [ATOM] : (((s_instance(ATOM, s_Polonium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(210, s_Amu))))).

/*
(instance Astatine SetOrClass)
*/
fof(a5392,axiom,s_instance(s_Astatine, s_SetOrClass)).

/*
(subclass Astatine ElementalSubstance)
*/
fof(a5393,axiom,s_subclass(s_Astatine, s_ElementalSubstance)).

/*
(names Astatine Astatine)
*/
fof(a5394,axiom,s_names(s_Astatine, 'Astatine')).

/*
(atomicNumber Astatine 85)
*/
fof(a5395,axiom,s_atomicNumber(s_Astatine, 85)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Astatine) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 210 Amu))))
*/
fof(a5396,axiom,! [ATOM] : (((s_instance(ATOM, s_Astatine) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(210, s_Amu))))).

/*
(instance Radon SetOrClass)
*/
fof(a5397,axiom,s_instance(s_Radon, s_SetOrClass)).

/*
(subclass Radon ElementalSubstance)
*/
fof(a5398,axiom,s_subclass(s_Radon, s_ElementalSubstance)).

/*
(names Radon Radon)
*/
fof(a5399,axiom,s_names(s_Radon, 'Radon')).

/*
(atomicNumber Radon 86)
*/
fof(a5400,axiom,s_atomicNumber(s_Radon, 86)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Radon) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 222 Amu))))
*/
fof(a5401,axiom,! [ATOM] : (((s_instance(ATOM, s_Radon) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(222, s_Amu))))).

/*
(instance Francium SetOrClass)
*/
fof(a5402,axiom,s_instance(s_Francium, s_SetOrClass)).

/*
(subclass Francium ElementalSubstance)
*/
fof(a5403,axiom,s_subclass(s_Francium, s_ElementalSubstance)).

/*
(names Francium Francium)
*/
fof(a5404,axiom,s_names(s_Francium, 'Francium')).

/*
(atomicNumber Francium 87)
*/
fof(a5405,axiom,s_atomicNumber(s_Francium, 87)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Francium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 223 Amu))))
*/
fof(a5406,axiom,! [ATOM] : (((s_instance(ATOM, s_Francium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(223, s_Amu))))).

/*
(instance Radium SetOrClass)
*/
fof(a5407,axiom,s_instance(s_Radium, s_SetOrClass)).

/*
(subclass Radium ElementalSubstance)
*/
fof(a5408,axiom,s_subclass(s_Radium, s_ElementalSubstance)).

/*
(names Radium Radium)
*/
fof(a5409,axiom,s_names(s_Radium, 'Radium')).

/*
(atomicNumber Radium 88)
*/
fof(a5410,axiom,s_atomicNumber(s_Radium, 88)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Radium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 226 Amu))))
*/
fof(a5411,axiom,! [ATOM] : (((s_instance(ATOM, s_Radium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(226, s_Amu))))).

/*
(instance Actinium SetOrClass)
*/
fof(a5412,axiom,s_instance(s_Actinium, s_SetOrClass)).

/*
(subclass Actinium ElementalSubstance)
*/
fof(a5413,axiom,s_subclass(s_Actinium, s_ElementalSubstance)).

/*
(names Actinium Actinium)
*/
fof(a5414,axiom,s_names(s_Actinium, 'Actinium')).

/*
(atomicNumber Actinium 89)
*/
fof(a5415,axiom,s_atomicNumber(s_Actinium, 89)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Actinium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 227 Amu))))
*/
fof(a5416,axiom,! [ATOM] : (((s_instance(ATOM, s_Actinium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(227, s_Amu))))).

/*
(instance Thorium SetOrClass)
*/
fof(a5417,axiom,s_instance(s_Thorium, s_SetOrClass)).

/*
(subclass Thorium ElementalSubstance)
*/
fof(a5418,axiom,s_subclass(s_Thorium, s_ElementalSubstance)).

/*
(names Thorium Thorium)
*/
fof(a5419,axiom,s_names(s_Thorium, 'Thorium')).

/*
(atomicNumber Thorium 90)
*/
fof(a5420,axiom,s_atomicNumber(s_Thorium, 90)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Thorium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 232.038 Amu))))
*/
fof(a5421,axiom,! [ATOM] : (((s_instance(ATOM, s_Thorium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(232.038, s_Amu))))).

/*
(instance Protactinium SetOrClass)
*/
fof(a5422,axiom,s_instance(s_Protactinium, s_SetOrClass)).

/*
(subclass Protactinium ElementalSubstance)
*/
fof(a5423,axiom,s_subclass(s_Protactinium, s_ElementalSubstance)).

/*
(names Protactinium Protactinium)
*/
fof(a5424,axiom,s_names(s_Protactinium, 'Protactinium')).

/*
(atomicNumber Protactinium 91)
*/
fof(a5425,axiom,s_atomicNumber(s_Protactinium, 91)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Protactinium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 231 Amu))))
*/
fof(a5426,axiom,! [ATOM] : (((s_instance(ATOM, s_Protactinium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(231, s_Amu))))).

/*
(instance Uranium SetOrClass)
*/
fof(a5427,axiom,s_instance(s_Uranium, s_SetOrClass)).

/*
(subclass Uranium ElementalSubstance)
*/
fof(a5428,axiom,s_subclass(s_Uranium, s_ElementalSubstance)).

/*
(names Uranium Uranium)
*/
fof(a5429,axiom,s_names(s_Uranium, 'Uranium')).

/*
(atomicNumber Uranium 92)
*/
fof(a5430,axiom,s_atomicNumber(s_Uranium, 92)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Uranium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 231 Amu))))
*/
fof(a5431,axiom,! [ATOM] : (((s_instance(ATOM, s_Uranium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(231, s_Amu))))).

/*
(instance Neptunium SetOrClass)
*/
fof(a5432,axiom,s_instance(s_Neptunium, s_SetOrClass)).

/*
(subclass Neptunium ElementalSubstance)
*/
fof(a5433,axiom,s_subclass(s_Neptunium, s_ElementalSubstance)).

/*
(names Neptunium Neptunium)
*/
fof(a5434,axiom,s_names(s_Neptunium, 'Neptunium')).

/*
(atomicNumber Neptunium 93)
*/
fof(a5435,axiom,s_atomicNumber(s_Neptunium, 93)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Neptunium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 237 Amu))))
*/
fof(a5436,axiom,! [ATOM] : (((s_instance(ATOM, s_Neptunium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(237, s_Amu))))).

/*
(instance Plutonium SetOrClass)
*/
fof(a5437,axiom,s_instance(s_Plutonium, s_SetOrClass)).

/*
(subclass Plutonium ElementalSubstance)
*/
fof(a5438,axiom,s_subclass(s_Plutonium, s_ElementalSubstance)).

/*
(names Plutonium Plutonium)
*/
fof(a5439,axiom,s_names(s_Plutonium, 'Plutonium')).

/*
(atomicNumber Plutonium 94)
*/
fof(a5440,axiom,s_atomicNumber(s_Plutonium, 94)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Plutonium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 242 Amu))))
*/
fof(a5441,axiom,! [ATOM] : (((s_instance(ATOM, s_Plutonium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(242, s_Amu))))).

/*
(instance Americium SetOrClass)
*/
fof(a5442,axiom,s_instance(s_Americium, s_SetOrClass)).

/*
(subclass Americium ElementalSubstance)
*/
fof(a5443,axiom,s_subclass(s_Americium, s_ElementalSubstance)).

/*
(names Americium Americium)
*/
fof(a5444,axiom,s_names(s_Americium, 'Americium')).

/*
(atomicNumber Americium 95)
*/
fof(a5445,axiom,s_atomicNumber(s_Americium, 95)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Americium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 243 Amu))))
*/
fof(a5446,axiom,! [ATOM] : (((s_instance(ATOM, s_Americium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(243, s_Amu))))).

/*
(instance Curium SetOrClass)
*/
fof(a5447,axiom,s_instance(s_Curium, s_SetOrClass)).

/*
(subclass Curium ElementalSubstance)
*/
fof(a5448,axiom,s_subclass(s_Curium, s_ElementalSubstance)).

/*
(names Curium Curium)
*/
fof(a5449,axiom,s_names(s_Curium, 'Curium')).

/*
(atomicNumber Curium 96)
*/
fof(a5450,axiom,s_atomicNumber(s_Curium, 96)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Curium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 247 Amu))))
*/
fof(a5451,axiom,! [ATOM] : (((s_instance(ATOM, s_Curium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(247, s_Amu))))).

/*
(instance Berkelium SetOrClass)
*/
fof(a5452,axiom,s_instance(s_Berkelium, s_SetOrClass)).

/*
(subclass Berkelium ElementalSubstance)
*/
fof(a5453,axiom,s_subclass(s_Berkelium, s_ElementalSubstance)).

/*
(names Berkelium Berkelium)
*/
fof(a5454,axiom,s_names(s_Berkelium, 'Berkelium')).

/*
(atomicNumber Berkelium 97)
*/
fof(a5455,axiom,s_atomicNumber(s_Berkelium, 97)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Berkelium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 247 Amu))))
*/
fof(a5456,axiom,! [ATOM] : (((s_instance(ATOM, s_Berkelium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(247, s_Amu))))).

/*
(instance Californium SetOrClass)
*/
fof(a5457,axiom,s_instance(s_Californium, s_SetOrClass)).

/*
(subclass Californium ElementalSubstance)
*/
fof(a5458,axiom,s_subclass(s_Californium, s_ElementalSubstance)).

/*
(names Californium Californium)
*/
fof(a5459,axiom,s_names(s_Californium, 'Californium')).

/*
(atomicNumber Californium 98)
*/
fof(a5460,axiom,s_atomicNumber(s_Californium, 98)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Californium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 249 Amu))))
*/
fof(a5461,axiom,! [ATOM] : (((s_instance(ATOM, s_Californium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(249, s_Amu))))).

/*
(instance Einsteinium SetOrClass)
*/
fof(a5462,axiom,s_instance(s_Einsteinium, s_SetOrClass)).

/*
(subclass Einsteinium ElementalSubstance)
*/
fof(a5463,axiom,s_subclass(s_Einsteinium, s_ElementalSubstance)).

/*
(names Einsteinium Einsteinium)
*/
fof(a5464,axiom,s_names(s_Einsteinium, 'Einsteinium')).

/*
(atomicNumber Einsteinium 99)
*/
fof(a5465,axiom,s_atomicNumber(s_Einsteinium, 99)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Einsteinium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 254 Amu))))
*/
fof(a5466,axiom,! [ATOM] : (((s_instance(ATOM, s_Einsteinium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(254, s_Amu))))).

/*
(instance Fermium SetOrClass)
*/
fof(a5467,axiom,s_instance(s_Fermium, s_SetOrClass)).

/*
(subclass Fermium ElementalSubstance)
*/
fof(a5468,axiom,s_subclass(s_Fermium, s_ElementalSubstance)).

/*
(names Fermium Fermium)
*/
fof(a5469,axiom,s_names(s_Fermium, 'Fermium')).

/*
(atomicNumber Fermium 100)
*/
fof(a5470,axiom,s_atomicNumber(s_Fermium, 100)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Fermium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 253 Amu))))
*/
fof(a5471,axiom,! [ATOM] : (((s_instance(ATOM, s_Fermium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(253, s_Amu))))).

/*
(instance Mendelevium SetOrClass)
*/
fof(a5472,axiom,s_instance(s_Mendelevium, s_SetOrClass)).

/*
(subclass Mendelevium ElementalSubstance)
*/
fof(a5473,axiom,s_subclass(s_Mendelevium, s_ElementalSubstance)).

/*
(names Mendelevium Mendelevium)
*/
fof(a5474,axiom,s_names(s_Mendelevium, 'Mendelevium')).

/*
(atomicNumber Mendelevium 101)
*/
fof(a5475,axiom,s_atomicNumber(s_Mendelevium, 101)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Mendelevium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 256 Amu))))
*/
fof(a5476,axiom,! [ATOM] : (((s_instance(ATOM, s_Mendelevium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(256, s_Amu))))).

/*
(instance Nobelium SetOrClass)
*/
fof(a5477,axiom,s_instance(s_Nobelium, s_SetOrClass)).

/*
(subclass Nobelium ElementalSubstance)
*/
fof(a5478,axiom,s_subclass(s_Nobelium, s_ElementalSubstance)).

/*
(names Nobelium Nobelium)
*/
fof(a5479,axiom,s_names(s_Nobelium, 'Nobelium')).

/*
(atomicNumber Nobelium 102)
*/
fof(a5480,axiom,s_atomicNumber(s_Nobelium, 102)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Nobelium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 254 Amu))))
*/
fof(a5481,axiom,! [ATOM] : (((s_instance(ATOM, s_Nobelium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(254, s_Amu))))).

/*
(instance Lawrencium SetOrClass)
*/
fof(a5482,axiom,s_instance(s_Lawrencium, s_SetOrClass)).

/*
(subclass Lawrencium ElementalSubstance)
*/
fof(a5483,axiom,s_subclass(s_Lawrencium, s_ElementalSubstance)).

/*
(names Lawrencium Lawrencium)
*/
fof(a5484,axiom,s_names(s_Lawrencium, 'Lawrencium')).

/*
(atomicNumber Lawrencium 103)
*/
fof(a5485,axiom,s_atomicNumber(s_Lawrencium, 103)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Lawrencium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 262 Amu))))
*/
fof(a5486,axiom,! [ATOM] : (((s_instance(ATOM, s_Lawrencium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(262, s_Amu))))).

/*
(instance Unnilquadium SetOrClass)
*/
fof(a5487,axiom,s_instance(s_Unnilquadium, s_SetOrClass)).

/*
(subclass Unnilquadium ElementalSubstance)
*/
fof(a5488,axiom,s_subclass(s_Unnilquadium, s_ElementalSubstance)).

/*
(names Unnilquadium Unnilquadium)
*/
fof(a5489,axiom,s_names(s_Unnilquadium, 'Unnilquadium')).

/*
(atomicNumber Unnilquadium 104)
*/
fof(a5490,axiom,s_atomicNumber(s_Unnilquadium, 104)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Unnilquadium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 261 Amu))))
*/
fof(a5491,axiom,! [ATOM] : (((s_instance(ATOM, s_Unnilquadium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(261, s_Amu))))).

/*
(instance Unnilpentium SetOrClass)
*/
fof(a5492,axiom,s_instance(s_Unnilpentium, s_SetOrClass)).

/*
(subclass Unnilpentium ElementalSubstance)
*/
fof(a5493,axiom,s_subclass(s_Unnilpentium, s_ElementalSubstance)).

/*
(names Unnilpentium Unnilpentium)
*/
fof(a5494,axiom,s_names(s_Unnilpentium, 'Unnilpentium')).

/*
(atomicNumber Unnilpentium 105)
*/
fof(a5495,axiom,s_atomicNumber(s_Unnilpentium, 105)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Unnilpentium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 262 Amu))))
*/
fof(a5496,axiom,! [ATOM] : (((s_instance(ATOM, s_Unnilpentium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(262, s_Amu))))).

/*
(instance Unnilhexium SetOrClass)
*/
fof(a5497,axiom,s_instance(s_Unnilhexium, s_SetOrClass)).

/*
(subclass Unnilhexium ElementalSubstance)
*/
fof(a5498,axiom,s_subclass(s_Unnilhexium, s_ElementalSubstance)).

/*
(names Unnilhexium Unnilhexium)
*/
fof(a5499,axiom,s_names(s_Unnilhexium, 'Unnilhexium')).

/*
(atomicNumber Unnilhexium 106)
*/
fof(a5500,axiom,s_atomicNumber(s_Unnilhexium, 106)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Unnilhexium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 263 Amu))))
*/
fof(a5501,axiom,! [ATOM] : (((s_instance(ATOM, s_Unnilhexium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(263, s_Amu))))).

/*
(instance Unnilseptium SetOrClass)
*/
fof(a5502,axiom,s_instance(s_Unnilseptium, s_SetOrClass)).

/*
(subclass Unnilseptium ElementalSubstance)
*/
fof(a5503,axiom,s_subclass(s_Unnilseptium, s_ElementalSubstance)).

/*
(names Unnilseptium Unnilseptium)
*/
fof(a5504,axiom,s_names(s_Unnilseptium, 'Unnilseptium')).

/*
(atomicNumber Unnilseptium 107)
*/
fof(a5505,axiom,s_atomicNumber(s_Unnilseptium, 107)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Unnilseptium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 262 Amu))))
*/
fof(a5506,axiom,! [ATOM] : (((s_instance(ATOM, s_Unnilseptium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(262, s_Amu))))).

/*
(instance Unniloctium SetOrClass)
*/
fof(a5507,axiom,s_instance(s_Unniloctium, s_SetOrClass)).

/*
(subclass Unniloctium ElementalSubstance)
*/
fof(a5508,axiom,s_subclass(s_Unniloctium, s_ElementalSubstance)).

/*
(names Unniloctium Unniloctium)
*/
fof(a5509,axiom,s_names(s_Unniloctium, 'Unniloctium')).

/*
(atomicNumber Unniloctium 108)
*/
fof(a5510,axiom,s_atomicNumber(s_Unniloctium, 108)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Unniloctium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 265 Amu))))
*/
fof(a5511,axiom,! [ATOM] : (((s_instance(ATOM, s_Unniloctium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(265, s_Amu))))).

/*
(instance Meitnerium SetOrClass)
*/
fof(a5512,axiom,s_instance(s_Meitnerium, s_SetOrClass)).

/*
(subclass Meitnerium ElementalSubstance)
*/
fof(a5513,axiom,s_subclass(s_Meitnerium, s_ElementalSubstance)).

/*
(names Meitnerium Meitnerium)
*/
fof(a5514,axiom,s_names(s_Meitnerium, 'Meitnerium')).

/*
(atomicNumber Meitnerium 109)
*/
fof(a5515,axiom,s_atomicNumber(s_Meitnerium, 109)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Meitnerium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 266 Amu))))
*/
fof(a5516,axiom,! [ATOM] : (((s_instance(ATOM, s_Meitnerium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(266, s_Amu))))).

/*
(instance Unnildecium SetOrClass)
*/
fof(a5517,axiom,s_instance(s_Unnildecium, s_SetOrClass)).

/*
(subclass Unnildecium ElementalSubstance)
*/
fof(a5518,axiom,s_subclass(s_Unnildecium, s_ElementalSubstance)).

/*
(names Unnildecium Unnildecium)
*/
fof(a5519,axiom,s_names(s_Unnildecium, 'Unnildecium')).

/*
(atomicNumber Unnildecium 110)
*/
fof(a5520,axiom,s_atomicNumber(s_Unnildecium, 110)).

/*
(forall (?ATOM)
 (=> (and (instance ?ATOM Unnildecium) (instance ?ATOM Atom))
  (measure ?ATOM (MeasureFn 272 Amu))))
*/
fof(a5521,axiom,! [ATOM] : (((s_instance(ATOM, s_Unnildecium) & s_instance(ATOM, s_Atom)) => s_measure(ATOM, s_MeasureFn(272, s_Amu))))).

/*
(meltingPoint Hydrogen (MeasureFn 14.01 KelvinDegree))
*/
fof(a5522,axiom,s_meltingPoint(s_Hydrogen, s_MeasureFn(14.01, s_KelvinDegree))).

/*
(boilingPoint Hydrogen (MeasureFn 20.28 KelvinDegree))
*/
fof(a5523,axiom,s_boilingPoint(s_Hydrogen, s_MeasureFn(20.28, s_KelvinDegree))).

/*
(meltingPoint Helium (MeasureFn 0.95 KelvinDegree))
*/
fof(a5524,axiom,s_meltingPoint(s_Helium, s_MeasureFn(0.95, s_KelvinDegree))).

/*
(boilingPoint Helium (MeasureFn 4.216 KelvinDegree))
*/
fof(a5525,axiom,s_boilingPoint(s_Helium, s_MeasureFn(4.216, s_KelvinDegree))).

/*
(meltingPoint Lithium (MeasureFn 453.69 KelvinDegree))
*/
fof(a5526,axiom,s_meltingPoint(s_Lithium, s_MeasureFn(453.69, s_KelvinDegree))).

/*
(boilingPoint Lithium (MeasureFn 1590 KelvinDegree))
*/
fof(a5527,axiom,s_boilingPoint(s_Lithium, s_MeasureFn(1590, s_KelvinDegree))).

/*
(meltingPoint Beryllium (MeasureFn 1551 KelvinDegree))
*/
fof(a5528,axiom,s_meltingPoint(s_Beryllium, s_MeasureFn(1551, s_KelvinDegree))).

/*
(boilingPoint Beryllium (MeasureFn 3243 KelvinDegree))
*/
fof(a5529,axiom,s_boilingPoint(s_Beryllium, s_MeasureFn(3243, s_KelvinDegree))).

/*
(meltingPoint Boron (MeasureFn 2573 KelvinDegree))
*/
fof(a5530,axiom,s_meltingPoint(s_Boron, s_MeasureFn(2573, s_KelvinDegree))).

/*
(boilingPoint Boron (MeasureFn 2823 KelvinDegree))
*/
fof(a5531,axiom,s_boilingPoint(s_Boron, s_MeasureFn(2823, s_KelvinDegree))).

/*
(meltingPoint Carbon (MeasureFn 3823 KelvinDegree))
*/
fof(a5532,axiom,s_meltingPoint(s_Carbon, s_MeasureFn(3823, s_KelvinDegree))).

/*
(boilingPoint Carbon (MeasureFn 5100 KelvinDegree))
*/
fof(a5533,axiom,s_boilingPoint(s_Carbon, s_MeasureFn(5100, s_KelvinDegree))).

/*
(meltingPoint Nitrogen (MeasureFn 63.29 KelvinDegree))
*/
fof(a5534,axiom,s_meltingPoint(s_Nitrogen, s_MeasureFn(63.29, s_KelvinDegree))).

/*
(boilingPoint Nitrogen (MeasureFn 77.4 KelvinDegree))
*/
fof(a5535,axiom,s_boilingPoint(s_Nitrogen, s_MeasureFn(77.4, s_KelvinDegree))).

/*
(meltingPoint Oxygen (MeasureFn 54.75 KelvinDegree))
*/
fof(a5536,axiom,s_meltingPoint(s_Oxygen, s_MeasureFn(54.75, s_KelvinDegree))).

/*
(boilingPoint Oxygen (MeasureFn 90.188 KelvinDegree))
*/
fof(a5537,axiom,s_boilingPoint(s_Oxygen, s_MeasureFn(90.188, s_KelvinDegree))).

/*
(meltingPoint Fluorine (MeasureFn 53.53 KelvinDegree))
*/
fof(a5538,axiom,s_meltingPoint(s_Fluorine, s_MeasureFn(53.53, s_KelvinDegree))).

/*
(boilingPoint Fluorine (MeasureFn 85.01 KelvinDegree))
*/
fof(a5539,axiom,s_boilingPoint(s_Fluorine, s_MeasureFn(85.01, s_KelvinDegree))).

/*
(meltingPoint Neon (MeasureFn 24.48 KelvinDegree))
*/
fof(a5540,axiom,s_meltingPoint(s_Neon, s_MeasureFn(24.48, s_KelvinDegree))).

/*
(boilingPoint Neon (MeasureFn 27.1 KelvinDegree))
*/
fof(a5541,axiom,s_boilingPoint(s_Neon, s_MeasureFn(27.1, s_KelvinDegree))).

/*
(meltingPoint Sodium (MeasureFn 370.95 KelvinDegree))
*/
fof(a5542,axiom,s_meltingPoint(s_Sodium, s_MeasureFn(370.95, s_KelvinDegree))).

/*
(boilingPoint Sodium (MeasureFn 1165 KelvinDegree))
*/
fof(a5543,axiom,s_boilingPoint(s_Sodium, s_MeasureFn(1165, s_KelvinDegree))).

/*
(meltingPoint Magnesium (MeasureFn 921.95 KelvinDegree))
*/
fof(a5544,axiom,s_meltingPoint(s_Magnesium, s_MeasureFn(921.95, s_KelvinDegree))).

/*
(boilingPoint Magnesium (MeasureFn 1380 KelvinDegree))
*/
fof(a5545,axiom,s_boilingPoint(s_Magnesium, s_MeasureFn(1380, s_KelvinDegree))).

/*
(meltingPoint Aluminum (MeasureFn 933.52 KelvinDegree))
*/
fof(a5546,axiom,s_meltingPoint(s_Aluminum, s_MeasureFn(933.52, s_KelvinDegree))).

/*
(boilingPoint Aluminum (MeasureFn 2740 KelvinDegree))
*/
fof(a5547,axiom,s_boilingPoint(s_Aluminum, s_MeasureFn(2740, s_KelvinDegree))).

/*
(meltingPoint Silicon (MeasureFn 1683 KelvinDegree))
*/
fof(a5548,axiom,s_meltingPoint(s_Silicon, s_MeasureFn(1683, s_KelvinDegree))).

/*
(boilingPoint Silicon (MeasureFn 2628 KelvinDegree))
*/
fof(a5549,axiom,s_boilingPoint(s_Silicon, s_MeasureFn(2628, s_KelvinDegree))).

/*
(meltingPoint Phosphorus (MeasureFn 317.3 KelvinDegree))
*/
fof(a5550,axiom,s_meltingPoint(s_Phosphorus, s_MeasureFn(317.3, s_KelvinDegree))).

/*
(boilingPoint Phosphorus (MeasureFn 553 KelvinDegree))
*/
fof(a5551,axiom,s_boilingPoint(s_Phosphorus, s_MeasureFn(553, s_KelvinDegree))).

/*
(meltingPoint Sulphur (MeasureFn 386 KelvinDegree))
*/
fof(a5552,axiom,s_meltingPoint(s_Sulphur, s_MeasureFn(386, s_KelvinDegree))).

/*
(boilingPoint Sulphur (MeasureFn 717.824 KelvinDegree))
*/
fof(a5553,axiom,s_boilingPoint(s_Sulphur, s_MeasureFn(717.824, s_KelvinDegree))).

/*
(meltingPoint Chlorine (MeasureFn 172.17 KelvinDegree))
*/
fof(a5554,axiom,s_meltingPoint(s_Chlorine, s_MeasureFn(172.17, s_KelvinDegree))).

/*
(boilingPoint Chlorine (MeasureFn 238.55 KelvinDegree))
*/
fof(a5555,axiom,s_boilingPoint(s_Chlorine, s_MeasureFn(238.55, s_KelvinDegree))).

/*
(meltingPoint Argon (MeasureFn 83.78 KelvinDegree))
*/
fof(a5556,axiom,s_meltingPoint(s_Argon, s_MeasureFn(83.78, s_KelvinDegree))).

/*
(boilingPoint Argon (MeasureFn 87.29 KelvinDegree))
*/
fof(a5557,axiom,s_boilingPoint(s_Argon, s_MeasureFn(87.29, s_KelvinDegree))).

/*
(meltingPoint Potassium (MeasureFn 336.8 KelvinDegree))
*/
fof(a5558,axiom,s_meltingPoint(s_Potassium, s_MeasureFn(336.8, s_KelvinDegree))).

/*
(boilingPoint Potassium (MeasureFn 1047 KelvinDegree))
*/
fof(a5559,axiom,s_boilingPoint(s_Potassium, s_MeasureFn(1047, s_KelvinDegree))).

/*
(meltingPoint Calcium (MeasureFn 1112 KelvinDegree))
*/
fof(a5560,axiom,s_meltingPoint(s_Calcium, s_MeasureFn(1112, s_KelvinDegree))).

/*
(boilingPoint Calcium (MeasureFn 1760 KelvinDegree))
*/
fof(a5561,axiom,s_boilingPoint(s_Calcium, s_MeasureFn(1760, s_KelvinDegree))).

/*
(meltingPoint Scandium (MeasureFn 1812 KelvinDegree))
*/
fof(a5562,axiom,s_meltingPoint(s_Scandium, s_MeasureFn(1812, s_KelvinDegree))).

/*
(boilingPoint Scandium (MeasureFn 3105 KelvinDegree))
*/
fof(a5563,axiom,s_boilingPoint(s_Scandium, s_MeasureFn(3105, s_KelvinDegree))).

/*
(meltingPoint Titanium (MeasureFn 1933 KelvinDegree))
*/
fof(a5564,axiom,s_meltingPoint(s_Titanium, s_MeasureFn(1933, s_KelvinDegree))).

/*
(boilingPoint Titanium (MeasureFn 3533 KelvinDegree))
*/
fof(a5565,axiom,s_boilingPoint(s_Titanium, s_MeasureFn(3533, s_KelvinDegree))).

/*
(meltingPoint Vanadium (MeasureFn 2163 KelvinDegree))
*/
fof(a5566,axiom,s_meltingPoint(s_Vanadium, s_MeasureFn(2163, s_KelvinDegree))).

/*
(boilingPoint Vanadium (MeasureFn 3653 KelvinDegree))
*/
fof(a5567,axiom,s_boilingPoint(s_Vanadium, s_MeasureFn(3653, s_KelvinDegree))).

/*
(meltingPoint Chromium (MeasureFn 2130 KelvinDegree))
*/
fof(a5568,axiom,s_meltingPoint(s_Chromium, s_MeasureFn(2130, s_KelvinDegree))).

/*
(boilingPoint Chromium (MeasureFn 2755 KelvinDegree))
*/
fof(a5569,axiom,s_boilingPoint(s_Chromium, s_MeasureFn(2755, s_KelvinDegree))).

/*
(meltingPoint Manganese (MeasureFn 1517 KelvinDegree))
*/
fof(a5570,axiom,s_meltingPoint(s_Manganese, s_MeasureFn(1517, s_KelvinDegree))).

/*
(boilingPoint Manganese (MeasureFn 2370 KelvinDegree))
*/
fof(a5571,axiom,s_boilingPoint(s_Manganese, s_MeasureFn(2370, s_KelvinDegree))).

/*
(meltingPoint Iron (MeasureFn 1808 KelvinDegree))
*/
fof(a5572,axiom,s_meltingPoint(s_Iron, s_MeasureFn(1808, s_KelvinDegree))).

/*
(boilingPoint Iron (MeasureFn 3023 KelvinDegree))
*/
fof(a5573,axiom,s_boilingPoint(s_Iron, s_MeasureFn(3023, s_KelvinDegree))).

/*
(meltingPoint Cobalt (MeasureFn 1768 KelvinDegree))
*/
fof(a5574,axiom,s_meltingPoint(s_Cobalt, s_MeasureFn(1768, s_KelvinDegree))).

/*
(boilingPoint Cobalt (MeasureFn 3143 KelvinDegree))
*/
fof(a5575,axiom,s_boilingPoint(s_Cobalt, s_MeasureFn(3143, s_KelvinDegree))).

/*
(meltingPoint Nickel (MeasureFn 1726 KelvinDegree))
*/
fof(a5576,axiom,s_meltingPoint(s_Nickel, s_MeasureFn(1726, s_KelvinDegree))).

/*
(boilingPoint Nickel (MeasureFn 3005 KelvinDegree))
*/
fof(a5577,axiom,s_boilingPoint(s_Nickel, s_MeasureFn(3005, s_KelvinDegree))).

/*
(meltingPoint Copper (MeasureFn 1356.6 KelvinDegree))
*/
fof(a5578,axiom,s_meltingPoint(s_Copper, s_MeasureFn(1356.6, s_KelvinDegree))).

/*
(boilingPoint Copper (MeasureFn 2868 KelvinDegree))
*/
fof(a5579,axiom,s_boilingPoint(s_Copper, s_MeasureFn(2868, s_KelvinDegree))).

/*
(meltingPoint Zinc (MeasureFn 692.73 KelvinDegree))
*/
fof(a5580,axiom,s_meltingPoint(s_Zinc, s_MeasureFn(692.73, s_KelvinDegree))).

/*
(boilingPoint Zinc (MeasureFn 1180 KelvinDegree))
*/
fof(a5581,axiom,s_boilingPoint(s_Zinc, s_MeasureFn(1180, s_KelvinDegree))).

/*
(meltingPoint Gallium (MeasureFn 302.93 KelvinDegree))
*/
fof(a5582,axiom,s_meltingPoint(s_Gallium, s_MeasureFn(302.93, s_KelvinDegree))).

/*
(boilingPoint Gallium (MeasureFn 2676 KelvinDegree))
*/
fof(a5583,axiom,s_boilingPoint(s_Gallium, s_MeasureFn(2676, s_KelvinDegree))).

/*
(meltingPoint Germanium (MeasureFn 1210.55 KelvinDegree))
*/
fof(a5584,axiom,s_meltingPoint(s_Germanium, s_MeasureFn(1210.55, s_KelvinDegree))).

/*
(boilingPoint Germanium (MeasureFn 3103 KelvinDegree))
*/
fof(a5585,axiom,s_boilingPoint(s_Germanium, s_MeasureFn(3103, s_KelvinDegree))).

/*
(meltingPoint Arsenic (MeasureFn 886 KelvinDegree))
*/
fof(a5586,axiom,s_meltingPoint(s_Arsenic, s_MeasureFn(886, s_KelvinDegree))).

/*
(boilingPoint Arsenic (MeasureFn 886 KelvinDegree))
*/
fof(a5587,axiom,s_boilingPoint(s_Arsenic, s_MeasureFn(886, s_KelvinDegree))).

/*
(meltingPoint Selenium (MeasureFn 490 KelvinDegree))
*/
fof(a5588,axiom,s_meltingPoint(s_Selenium, s_MeasureFn(490, s_KelvinDegree))).

/*
(boilingPoint Selenium (MeasureFn 958.1 KelvinDegree))
*/
fof(a5589,axiom,s_boilingPoint(s_Selenium, s_MeasureFn(958.1, s_KelvinDegree))).

/*
(meltingPoint Bromine (MeasureFn 265.9 KelvinDegree))
*/
fof(a5590,axiom,s_meltingPoint(s_Bromine, s_MeasureFn(265.9, s_KelvinDegree))).

/*
(boilingPoint Bromine (MeasureFn 331.93 KelvinDegree))
*/
fof(a5591,axiom,s_boilingPoint(s_Bromine, s_MeasureFn(331.93, s_KelvinDegree))).

/*
(meltingPoint Krypton (MeasureFn 116.55 KelvinDegree))
*/
fof(a5592,axiom,s_meltingPoint(s_Krypton, s_MeasureFn(116.55, s_KelvinDegree))).

/*
(boilingPoint Krypton (MeasureFn 120.85 KelvinDegree))
*/
fof(a5593,axiom,s_boilingPoint(s_Krypton, s_MeasureFn(120.85, s_KelvinDegree))).

/*
(meltingPoint Rubidium (MeasureFn 312.2 KelvinDegree))
*/
fof(a5594,axiom,s_meltingPoint(s_Rubidium, s_MeasureFn(312.2, s_KelvinDegree))).

/*
(boilingPoint Rubidium (MeasureFn 961 KelvinDegree))
*/
fof(a5595,axiom,s_boilingPoint(s_Rubidium, s_MeasureFn(961, s_KelvinDegree))).

/*
(meltingPoint Strontium (MeasureFn 1042 KelvinDegree))
*/
fof(a5596,axiom,s_meltingPoint(s_Strontium, s_MeasureFn(1042, s_KelvinDegree))).

/*
(boilingPoint Strontium (MeasureFn 1657 KelvinDegree))
*/
fof(a5597,axiom,s_boilingPoint(s_Strontium, s_MeasureFn(1657, s_KelvinDegree))).

/*
(meltingPoint Yttrium (MeasureFn 1796 KelvinDegree))
*/
fof(a5598,axiom,s_meltingPoint(s_Yttrium, s_MeasureFn(1796, s_KelvinDegree))).

/*
(boilingPoint Yttrium (MeasureFn 3610 KelvinDegree))
*/
fof(a5599,axiom,s_boilingPoint(s_Yttrium, s_MeasureFn(3610, s_KelvinDegree))).

/*
(meltingPoint Zirconium (MeasureFn 2125 KelvinDegree))
*/
fof(a5600,axiom,s_meltingPoint(s_Zirconium, s_MeasureFn(2125, s_KelvinDegree))).

/*
(boilingPoint Zirconium (MeasureFn 4650 KelvinDegree))
*/
fof(a5601,axiom,s_boilingPoint(s_Zirconium, s_MeasureFn(4650, s_KelvinDegree))).

/*
(meltingPoint Niobium (MeasureFn 2741 KelvinDegree))
*/
fof(a5602,axiom,s_meltingPoint(s_Niobium, s_MeasureFn(2741, s_KelvinDegree))).

/*
(boilingPoint Niobium (MeasureFn 5200 KelvinDegree))
*/
fof(a5603,axiom,s_boilingPoint(s_Niobium, s_MeasureFn(5200, s_KelvinDegree))).

/*
(meltingPoint Molybdenum (MeasureFn 2890 KelvinDegree))
*/
fof(a5604,axiom,s_meltingPoint(s_Molybdenum, s_MeasureFn(2890, s_KelvinDegree))).

/*
(boilingPoint Molybdenum (MeasureFn 5833 KelvinDegree))
*/
fof(a5605,axiom,s_boilingPoint(s_Molybdenum, s_MeasureFn(5833, s_KelvinDegree))).

/*
(meltingPoint Technetium (MeasureFn 2445 KelvinDegree))
*/
fof(a5606,axiom,s_meltingPoint(s_Technetium, s_MeasureFn(2445, s_KelvinDegree))).

/*
(boilingPoint Technetium (MeasureFn 5303 KelvinDegree))
*/
fof(a5607,axiom,s_boilingPoint(s_Technetium, s_MeasureFn(5303, s_KelvinDegree))).

/*
(meltingPoint Ruthenium (MeasureFn 2583 KelvinDegree))
*/
fof(a5608,axiom,s_meltingPoint(s_Ruthenium, s_MeasureFn(2583, s_KelvinDegree))).

/*
(boilingPoint Ruthenium (MeasureFn 4173 KelvinDegree))
*/
fof(a5609,axiom,s_boilingPoint(s_Ruthenium, s_MeasureFn(4173, s_KelvinDegree))).

/*
(meltingPoint Rhodium (MeasureFn 2239 KelvinDegree))
*/
fof(a5610,axiom,s_meltingPoint(s_Rhodium, s_MeasureFn(2239, s_KelvinDegree))).

/*
(boilingPoint Rhodium (MeasureFn 4000 KelvinDegree))
*/
fof(a5611,axiom,s_boilingPoint(s_Rhodium, s_MeasureFn(4000, s_KelvinDegree))).

/*
(meltingPoint Palladium (MeasureFn 1825 KelvinDegree))
*/
fof(a5612,axiom,s_meltingPoint(s_Palladium, s_MeasureFn(1825, s_KelvinDegree))).

/*
(boilingPoint Palladium (MeasureFn 3413 KelvinDegree))
*/
fof(a5613,axiom,s_boilingPoint(s_Palladium, s_MeasureFn(3413, s_KelvinDegree))).

/*
(meltingPoint Silver (MeasureFn 1235.08 KelvinDegree))
*/
fof(a5614,axiom,s_meltingPoint(s_Silver, s_MeasureFn(1235.08, s_KelvinDegree))).

/*
(boilingPoint Silver (MeasureFn 2485 KelvinDegree))
*/
fof(a5615,axiom,s_boilingPoint(s_Silver, s_MeasureFn(2485, s_KelvinDegree))).

/*
(meltingPoint Cadmium (MeasureFn 594.1 KelvinDegree))
*/
fof(a5616,axiom,s_meltingPoint(s_Cadmium, s_MeasureFn(594.1, s_KelvinDegree))).

/*
(boilingPoint Cadmium (MeasureFn 1038 KelvinDegree))
*/
fof(a5617,axiom,s_boilingPoint(s_Cadmium, s_MeasureFn(1038, s_KelvinDegree))).

/*
(meltingPoint Indium (MeasureFn 429.32 KelvinDegree))
*/
fof(a5618,axiom,s_meltingPoint(s_Indium, s_MeasureFn(429.32, s_KelvinDegree))).

/*
(boilingPoint Indium (MeasureFn 2353 KelvinDegree))
*/
fof(a5619,axiom,s_boilingPoint(s_Indium, s_MeasureFn(2353, s_KelvinDegree))).

/*
(meltingPoint Tin (MeasureFn 505.118 KelvinDegree))
*/
fof(a5620,axiom,s_meltingPoint(s_Tin, s_MeasureFn(505.118, s_KelvinDegree))).

/*
(boilingPoint Tin (MeasureFn 2543 KelvinDegree))
*/
fof(a5621,axiom,s_boilingPoint(s_Tin, s_MeasureFn(2543, s_KelvinDegree))).

/*
(meltingPoint Antimony (MeasureFn 903.89 KelvinDegree))
*/
fof(a5622,axiom,s_meltingPoint(s_Antimony, s_MeasureFn(903.89, s_KelvinDegree))).

/*
(boilingPoint Antimony (MeasureFn 2023 KelvinDegree))
*/
fof(a5623,axiom,s_boilingPoint(s_Antimony, s_MeasureFn(2023, s_KelvinDegree))).

/*
(meltingPoint Tellurium (MeasureFn 722.7 KelvinDegree))
*/
fof(a5624,axiom,s_meltingPoint(s_Tellurium, s_MeasureFn(722.7, s_KelvinDegree))).

/*
(boilingPoint Tellurium (MeasureFn 1263 KelvinDegree))
*/
fof(a5625,axiom,s_boilingPoint(s_Tellurium, s_MeasureFn(1263, s_KelvinDegree))).

/*
(meltingPoint Iodine (MeasureFn 386.65 KelvinDegree))
*/
fof(a5626,axiom,s_meltingPoint(s_Iodine, s_MeasureFn(386.65, s_KelvinDegree))).

/*
(boilingPoint Iodine (MeasureFn 457.55 KelvinDegree))
*/
fof(a5627,axiom,s_boilingPoint(s_Iodine, s_MeasureFn(457.55, s_KelvinDegree))).

/*
(meltingPoint Xenon (MeasureFn 161.3 KelvinDegree))
*/
fof(a5628,axiom,s_meltingPoint(s_Xenon, s_MeasureFn(161.3, s_KelvinDegree))).

/*
(boilingPoint Xenon (MeasureFn 166.1 KelvinDegree))
*/
fof(a5629,axiom,s_boilingPoint(s_Xenon, s_MeasureFn(166.1, s_KelvinDegree))).

/*
(meltingPoint Caesium (MeasureFn 301.55 KelvinDegree))
*/
fof(a5630,axiom,s_meltingPoint(s_Caesium, s_MeasureFn(301.55, s_KelvinDegree))).

/*
(boilingPoint Caesium (MeasureFn 963 KelvinDegree))
*/
fof(a5631,axiom,s_boilingPoint(s_Caesium, s_MeasureFn(963, s_KelvinDegree))).

/*
(meltingPoint Barium (MeasureFn 998 KelvinDegree))
*/
fof(a5632,axiom,s_meltingPoint(s_Barium, s_MeasureFn(998, s_KelvinDegree))).

/*
(boilingPoint Barium (MeasureFn 1913 KelvinDegree))
*/
fof(a5633,axiom,s_boilingPoint(s_Barium, s_MeasureFn(1913, s_KelvinDegree))).

/*
(meltingPoint Lanthanum (MeasureFn 1193 KelvinDegree))
*/
fof(a5634,axiom,s_meltingPoint(s_Lanthanum, s_MeasureFn(1193, s_KelvinDegree))).

/*
(boilingPoint Lanthanum (MeasureFn 3727 KelvinDegree))
*/
fof(a5635,axiom,s_boilingPoint(s_Lanthanum, s_MeasureFn(3727, s_KelvinDegree))).

/*
(meltingPoint Cerium (MeasureFn 1071 KelvinDegree))
*/
fof(a5636,axiom,s_meltingPoint(s_Cerium, s_MeasureFn(1071, s_KelvinDegree))).

/*
(boilingPoint Cerium (MeasureFn 3530 KelvinDegree))
*/
fof(a5637,axiom,s_boilingPoint(s_Cerium, s_MeasureFn(3530, s_KelvinDegree))).

/*
(meltingPoint Praseodymium (MeasureFn 1204 KelvinDegree))
*/
fof(a5638,axiom,s_meltingPoint(s_Praseodymium, s_MeasureFn(1204, s_KelvinDegree))).

/*
(boilingPoint Praseodymium (MeasureFn 3485 KelvinDegree))
*/
fof(a5639,axiom,s_boilingPoint(s_Praseodymium, s_MeasureFn(3485, s_KelvinDegree))).

/*
(meltingPoint Neodymium (MeasureFn 1283 KelvinDegree))
*/
fof(a5640,axiom,s_meltingPoint(s_Neodymium, s_MeasureFn(1283, s_KelvinDegree))).

/*
(boilingPoint Neodymium (MeasureFn 3400 KelvinDegree))
*/
fof(a5641,axiom,s_boilingPoint(s_Neodymium, s_MeasureFn(3400, s_KelvinDegree))).

/*
(meltingPoint Promethium (MeasureFn 1353 KelvinDegree))
*/
fof(a5642,axiom,s_meltingPoint(s_Promethium, s_MeasureFn(1353, s_KelvinDegree))).

/*
(boilingPoint Promethium (MeasureFn 3000 KelvinDegree))
*/
fof(a5643,axiom,s_boilingPoint(s_Promethium, s_MeasureFn(3000, s_KelvinDegree))).

/*
(meltingPoint Samarium (MeasureFn 1345 KelvinDegree))
*/
fof(a5644,axiom,s_meltingPoint(s_Samarium, s_MeasureFn(1345, s_KelvinDegree))).

/*
(boilingPoint Samarium (MeasureFn 2051 KelvinDegree))
*/
fof(a5645,axiom,s_boilingPoint(s_Samarium, s_MeasureFn(2051, s_KelvinDegree))).

/*
(meltingPoint Europium (MeasureFn 1095 KelvinDegree))
*/
fof(a5646,axiom,s_meltingPoint(s_Europium, s_MeasureFn(1095, s_KelvinDegree))).

/*
(boilingPoint Europium (MeasureFn 1870 KelvinDegree))
*/
fof(a5647,axiom,s_boilingPoint(s_Europium, s_MeasureFn(1870, s_KelvinDegree))).

/*
(meltingPoint Gadolinium (MeasureFn 1584 KelvinDegree))
*/
fof(a5648,axiom,s_meltingPoint(s_Gadolinium, s_MeasureFn(1584, s_KelvinDegree))).

/*
(boilingPoint Gadolinium (MeasureFn 3506 KelvinDegree))
*/
fof(a5649,axiom,s_boilingPoint(s_Gadolinium, s_MeasureFn(3506, s_KelvinDegree))).

/*
(meltingPoint Terbium (MeasureFn 1633 KelvinDegree))
*/
fof(a5650,axiom,s_meltingPoint(s_Terbium, s_MeasureFn(1633, s_KelvinDegree))).

/*
(boilingPoint Terbium (MeasureFn 3314 KelvinDegree))
*/
fof(a5651,axiom,s_boilingPoint(s_Terbium, s_MeasureFn(3314, s_KelvinDegree))).

/*
(meltingPoint Dysprosium (MeasureFn 1682 KelvinDegree))
*/
fof(a5652,axiom,s_meltingPoint(s_Dysprosium, s_MeasureFn(1682, s_KelvinDegree))).

/*
(boilingPoint Dysprosium (MeasureFn 2608 KelvinDegree))
*/
fof(a5653,axiom,s_boilingPoint(s_Dysprosium, s_MeasureFn(2608, s_KelvinDegree))).

/*
(meltingPoint Holmium (MeasureFn 1743 KelvinDegree))
*/
fof(a5654,axiom,s_meltingPoint(s_Holmium, s_MeasureFn(1743, s_KelvinDegree))).

/*
(boilingPoint Holmium (MeasureFn 2993 KelvinDegree))
*/
fof(a5655,axiom,s_boilingPoint(s_Holmium, s_MeasureFn(2993, s_KelvinDegree))).

/*
(meltingPoint Erbium (MeasureFn 1795 KelvinDegree))
*/
fof(a5656,axiom,s_meltingPoint(s_Erbium, s_MeasureFn(1795, s_KelvinDegree))).

/*
(boilingPoint Erbium (MeasureFn 2783 KelvinDegree))
*/
fof(a5657,axiom,s_boilingPoint(s_Erbium, s_MeasureFn(2783, s_KelvinDegree))).

/*
(meltingPoint Thulium (MeasureFn 1818 KelvinDegree))
*/
fof(a5658,axiom,s_meltingPoint(s_Thulium, s_MeasureFn(1818, s_KelvinDegree))).

/*
(boilingPoint Thulium (MeasureFn 2000 KelvinDegree))
*/
fof(a5659,axiom,s_boilingPoint(s_Thulium, s_MeasureFn(2000, s_KelvinDegree))).

/*
(meltingPoint Ytterbium (MeasureFn 1097 KelvinDegree))
*/
fof(a5660,axiom,s_meltingPoint(s_Ytterbium, s_MeasureFn(1097, s_KelvinDegree))).

/*
(boilingPoint Ytterbium (MeasureFn 1466 KelvinDegree))
*/
fof(a5661,axiom,s_boilingPoint(s_Ytterbium, s_MeasureFn(1466, s_KelvinDegree))).

/*
(meltingPoint Lutetium (MeasureFn 1929 KelvinDegree))
*/
fof(a5662,axiom,s_meltingPoint(s_Lutetium, s_MeasureFn(1929, s_KelvinDegree))).

/*
(boilingPoint Lutetium (MeasureFn 3588 KelvinDegree))
*/
fof(a5663,axiom,s_boilingPoint(s_Lutetium, s_MeasureFn(3588, s_KelvinDegree))).

/*
(meltingPoint Hafnium (MeasureFn 2423 KelvinDegree))
*/
fof(a5664,axiom,s_meltingPoint(s_Hafnium, s_MeasureFn(2423, s_KelvinDegree))).

/*
(boilingPoint Hafnium (MeasureFn 5673 KelvinDegree))
*/
fof(a5665,axiom,s_boilingPoint(s_Hafnium, s_MeasureFn(5673, s_KelvinDegree))).

/*
(meltingPoint Tantalum (MeasureFn 3269 KelvinDegree))
*/
fof(a5666,axiom,s_meltingPoint(s_Tantalum, s_MeasureFn(3269, s_KelvinDegree))).

/*
(boilingPoint Tantalum (MeasureFn 5698 KelvinDegree))
*/
fof(a5667,axiom,s_boilingPoint(s_Tantalum, s_MeasureFn(5698, s_KelvinDegree))).

/*
(meltingPoint Tungsten (MeasureFn 3680 KelvinDegree))
*/
fof(a5668,axiom,s_meltingPoint(s_Tungsten, s_MeasureFn(3680, s_KelvinDegree))).

/*
(boilingPoint Tungsten (MeasureFn 6200 KelvinDegree))
*/
fof(a5669,axiom,s_boilingPoint(s_Tungsten, s_MeasureFn(6200, s_KelvinDegree))).

/*
(meltingPoint Rhenium (MeasureFn 3453 KelvinDegree))
*/
fof(a5670,axiom,s_meltingPoint(s_Rhenium, s_MeasureFn(3453, s_KelvinDegree))).

/*
(boilingPoint Rhenium (MeasureFn 5900 KelvinDegree))
*/
fof(a5671,axiom,s_boilingPoint(s_Rhenium, s_MeasureFn(5900, s_KelvinDegree))).

/*
(meltingPoint Osmium (MeasureFn 3318 KelvinDegree))
*/
fof(a5672,axiom,s_meltingPoint(s_Osmium, s_MeasureFn(3318, s_KelvinDegree))).

/*
(boilingPoint Osmium (MeasureFn 5300 KelvinDegree))
*/
fof(a5673,axiom,s_boilingPoint(s_Osmium, s_MeasureFn(5300, s_KelvinDegree))).

/*
(meltingPoint Iridium (MeasureFn 2683 KelvinDegree))
*/
fof(a5674,axiom,s_meltingPoint(s_Iridium, s_MeasureFn(2683, s_KelvinDegree))).

/*
(boilingPoint Iridium (MeasureFn 4403 KelvinDegree))
*/
fof(a5675,axiom,s_boilingPoint(s_Iridium, s_MeasureFn(4403, s_KelvinDegree))).

/*
(meltingPoint Platinum (MeasureFn 2045 KelvinDegree))
*/
fof(a5676,axiom,s_meltingPoint(s_Platinum, s_MeasureFn(2045, s_KelvinDegree))).

/*
(boilingPoint Platinum (MeasureFn 4100 KelvinDegree))
*/
fof(a5677,axiom,s_boilingPoint(s_Platinum, s_MeasureFn(4100, s_KelvinDegree))).

/*
(meltingPoint Gold (MeasureFn 1337.58 KelvinDegree))
*/
fof(a5678,axiom,s_meltingPoint(s_Gold, s_MeasureFn(1337.58, s_KelvinDegree))).

/*
(boilingPoint Gold (MeasureFn 3213 KelvinDegree))
*/
fof(a5679,axiom,s_boilingPoint(s_Gold, s_MeasureFn(3213, s_KelvinDegree))).

/*
(meltingPoint Mercury (MeasureFn 234.28 KelvinDegree))
*/
fof(a5680,axiom,s_meltingPoint(s_Mercury, s_MeasureFn(234.28, s_KelvinDegree))).

/*
(boilingPoint Mercury (MeasureFn 629.73 KelvinDegree))
*/
fof(a5681,axiom,s_boilingPoint(s_Mercury, s_MeasureFn(629.73, s_KelvinDegree))).

/*
(meltingPoint Thallium (MeasureFn 576.7 KelvinDegree))
*/
fof(a5682,axiom,s_meltingPoint(s_Thallium, s_MeasureFn(576.7, s_KelvinDegree))).

/*
(boilingPoint Thallium (MeasureFn 1730 KelvinDegree))
*/
fof(a5683,axiom,s_boilingPoint(s_Thallium, s_MeasureFn(1730, s_KelvinDegree))).

/*
(meltingPoint Lead (MeasureFn 600.65 KelvinDegree))
*/
fof(a5684,axiom,s_meltingPoint(s_Lead, s_MeasureFn(600.65, s_KelvinDegree))).

/*
(boilingPoint Lead (MeasureFn 2013 KelvinDegree))
*/
fof(a5685,axiom,s_boilingPoint(s_Lead, s_MeasureFn(2013, s_KelvinDegree))).

/*
(meltingPoint Bismuth (MeasureFn 544.5 KelvinDegree))
*/
fof(a5686,axiom,s_meltingPoint(s_Bismuth, s_MeasureFn(544.5, s_KelvinDegree))).

/*
(boilingPoint Bismuth (MeasureFn 1833 KelvinDegree))
*/
fof(a5687,axiom,s_boilingPoint(s_Bismuth, s_MeasureFn(1833, s_KelvinDegree))).

/*
(meltingPoint Polonium (MeasureFn 527 KelvinDegree))
*/
fof(a5688,axiom,s_meltingPoint(s_Polonium, s_MeasureFn(527, s_KelvinDegree))).

/*
(boilingPoint Polonium (MeasureFn 1235 KelvinDegree))
*/
fof(a5689,axiom,s_boilingPoint(s_Polonium, s_MeasureFn(1235, s_KelvinDegree))).

/*
(meltingPoint Astatine (MeasureFn 575 KelvinDegree))
*/
fof(a5690,axiom,s_meltingPoint(s_Astatine, s_MeasureFn(575, s_KelvinDegree))).

/*
(boilingPoint Astatine (MeasureFn 610 KelvinDegree))
*/
fof(a5691,axiom,s_boilingPoint(s_Astatine, s_MeasureFn(610, s_KelvinDegree))).

/*
(meltingPoint Radon (MeasureFn 202 KelvinDegree))
*/
fof(a5692,axiom,s_meltingPoint(s_Radon, s_MeasureFn(202, s_KelvinDegree))).

/*
(boilingPoint Radon (MeasureFn 211.4 KelvinDegree))
*/
fof(a5693,axiom,s_boilingPoint(s_Radon, s_MeasureFn(211.4, s_KelvinDegree))).

/*
(meltingPoint Francium (MeasureFn 300 KelvinDegree))
*/
fof(a5694,axiom,s_meltingPoint(s_Francium, s_MeasureFn(300, s_KelvinDegree))).

/*
(boilingPoint Francium (MeasureFn 950 KelvinDegree))
*/
fof(a5695,axiom,s_boilingPoint(s_Francium, s_MeasureFn(950, s_KelvinDegree))).

/*
(meltingPoint Radium (MeasureFn 973 KelvinDegree))
*/
fof(a5696,axiom,s_meltingPoint(s_Radium, s_MeasureFn(973, s_KelvinDegree))).

/*
(boilingPoint Radium (MeasureFn 1413 KelvinDegree))
*/
fof(a5697,axiom,s_boilingPoint(s_Radium, s_MeasureFn(1413, s_KelvinDegree))).

/*
(meltingPoint Actinium (MeasureFn 1320 KelvinDegree))
*/
fof(a5698,axiom,s_meltingPoint(s_Actinium, s_MeasureFn(1320, s_KelvinDegree))).

/*
(boilingPoint Actinium (MeasureFn 3470 KelvinDegree))
*/
fof(a5699,axiom,s_boilingPoint(s_Actinium, s_MeasureFn(3470, s_KelvinDegree))).

/*
(meltingPoint Thorium (MeasureFn 2023 KelvinDegree))
*/
fof(a5700,axiom,s_meltingPoint(s_Thorium, s_MeasureFn(2023, s_KelvinDegree))).

/*
(boilingPoint Thorium (MeasureFn 5060 KelvinDegree))
*/
fof(a5701,axiom,s_boilingPoint(s_Thorium, s_MeasureFn(5060, s_KelvinDegree))).

/*
(meltingPoint Protactinium (MeasureFn 1827 KelvinDegree))
*/
fof(a5702,axiom,s_meltingPoint(s_Protactinium, s_MeasureFn(1827, s_KelvinDegree))).

/*
(boilingPoint Protactinium (MeasureFn 4300 KelvinDegree))
*/
fof(a5703,axiom,s_boilingPoint(s_Protactinium, s_MeasureFn(4300, s_KelvinDegree))).

/*
(meltingPoint Uranium (MeasureFn 1405.5 KelvinDegree))
*/
fof(a5704,axiom,s_meltingPoint(s_Uranium, s_MeasureFn(1405.5, s_KelvinDegree))).

/*
(boilingPoint Uranium (MeasureFn 4091 KelvinDegree))
*/
fof(a5705,axiom,s_boilingPoint(s_Uranium, s_MeasureFn(4091, s_KelvinDegree))).

/*
(meltingPoint Neptunium (MeasureFn 913 KelvinDegree))
*/
fof(a5706,axiom,s_meltingPoint(s_Neptunium, s_MeasureFn(913, s_KelvinDegree))).

/*
(boilingPoint Neptunium (MeasureFn 4175 KelvinDegree))
*/
fof(a5707,axiom,s_boilingPoint(s_Neptunium, s_MeasureFn(4175, s_KelvinDegree))).

/*
(meltingPoint Plutonium (MeasureFn 914 KelvinDegree))
*/
fof(a5708,axiom,s_meltingPoint(s_Plutonium, s_MeasureFn(914, s_KelvinDegree))).

/*
(boilingPoint Plutonium (MeasureFn 3600 KelvinDegree))
*/
fof(a5709,axiom,s_boilingPoint(s_Plutonium, s_MeasureFn(3600, s_KelvinDegree))).

/*
(meltingPoint Americium (MeasureFn 1267 KelvinDegree))
*/
fof(a5710,axiom,s_meltingPoint(s_Americium, s_MeasureFn(1267, s_KelvinDegree))).

/*
(boilingPoint Americium (MeasureFn 2880 KelvinDegree))
*/
fof(a5711,axiom,s_boilingPoint(s_Americium, s_MeasureFn(2880, s_KelvinDegree))).

/*
(meltingPoint Curium (MeasureFn 1613 KelvinDegree))
*/
fof(a5712,axiom,s_meltingPoint(s_Curium, s_MeasureFn(1613, s_KelvinDegree))).

/*
(meltingPoint Berkelium (MeasureFn 1259 KelvinDegree))
*/
fof(a5713,axiom,s_meltingPoint(s_Berkelium, s_MeasureFn(1259, s_KelvinDegree))).

/*
(meltingPoint Californium (MeasureFn 1173 KelvinDegree))
*/
fof(a5714,axiom,s_meltingPoint(s_Californium, s_MeasureFn(1173, s_KelvinDegree))).

/*
(meltingPoint Einsteinium (MeasureFn 1133 KelvinDegree))
*/
fof(a5715,axiom,s_meltingPoint(s_Einsteinium, s_MeasureFn(1133, s_KelvinDegree))).

/*
(instance VehicleDoor SetOrClass)
*/
fof(a5716,axiom,s_instance(s_VehicleDoor, s_SetOrClass)).

/*
(subclass VehicleDoor Device)
*/
fof(a5717,axiom,s_subclass(s_VehicleDoor, s_Device)).

/*
(forall (?VD)
 (=> (instance ?VD VehicleDoor)
  (hasPurpose ?VD
   (exists (?O) (and (instance ?O Opening) (patient ?O ?VD))))))
*/
%% no translation to TPTP available.

/*
(forall (?VD)
 (=> (instance ?VD VehicleDoor)
  (hasPurpose ?VD
   (exists (?C) (and (instance ?C Closing) (patient ?C ?VD))))))
*/
%% no translation to TPTP available.

/*
(forall (?VD)
 (=> (and (instance ?VD VehicleDoor) (attribute ?VD DeviceNormal))
  (and (capability patient Opening ?VD)
       (capability patient Closing ?VD))))
*/
fof(a5718,axiom,! [VD] : (((s_instance(VD, s_VehicleDoor) & s_attribute(VD, s_DeviceNormal)) => (s_capability(s_patient_m, s_Opening, VD) & s_capability(s_patient_m, s_Closing, VD))))).

/*
(typicalPart VehicleDoor Automobile)
*/
fof(a5719,axiom,s_typicalPart(s_VehicleDoor, s_Automobile)).

/*
(instance DeviceNormal InternalAttribute)
*/
fof(a5720,axiom,s_instance(s_DeviceNormal, s_InternalAttribute)).

/*
(forall (?D)
 (forall (?DAM)
  (=> (instance ?DAM Process)
   (=> (and (instance ?D Object) (instance ?D TimeInterval))
    (=> (attribute ?D DeviceNormal)
     (not (and (instance ?DAM Damaging)
               (and (patient ?DAM ?D)
                    (not (exists (?R)
                          (and (instance ?R Repairing)
                               (and
                                (patient ?R ?D)
                                (earlier ?D ?R)))))))))))))
*/
fof(a5721,axiom,! [D] : (! [DAM] : ((s_instance(DAM, s_Process) => ((s_instance(D, s_Object) & s_instance(D, s_TimeInterval)) => (s_attribute(D, s_DeviceNormal) => (~ (s_instance(DAM, s_Damaging) & (s_patient(DAM, D) & (~ ? [R] : ((s_instance(R, s_Repairing) & (s_patient(R, D) & s_earlier(D, R)))))))))))))).

/*
(forall (?F ?D)
 (=> (and (instance ?D Object) (instance ?F Formula))
  (=> (and (attribute ?D DeviceNormal) (hasPurpose ?D ?F))
   (modalAttribute ?F Possibility))))
*/
fof(a5722,axiom,! [F,D] : (((s_instance(D, s_Object) & s_instance(F, s_Formula)) => ((s_attribute(D, s_DeviceNormal) & s_hasPurpose(D, F)) => s_modalAttribute(F, s_Possibility))))).

/*
(instance DeviceDamaged InternalAttribute)
*/
fof(a5723,axiom,s_instance(s_DeviceDamaged, s_InternalAttribute)).

/*
(contraryAttribute2 DeviceDamaged DeviceNormal)
*/
fof(a5724,axiom,s_contraryAttribute2(s_DeviceDamaged, s_DeviceNormal)).

/*
(forall (?D)
 (exists (?DAM)
  (forall (?R)
   (=> (and (instance ?R Process) (instance ?R TimeInterval))
    (and (instance ?DAM Process)
         (=> (and (instance ?D Object) (instance ?D TimeInterval))
          (=> (attribute ?D DeviceDamaged)
           (and (instance ?DAM Damaging)
                (and (patient ?DAM ?D)
                     (not (and (instance ?R Repairing)
                               (and
                                (patient ?R ?D)
                                (earlier ?D ?R)))))))))))))
*/
fof(a5725,axiom,! [D] : (? [DAM] : (! [R] : (((s_instance(R, s_Process) & s_instance(R, s_TimeInterval)) => (s_instance(DAM, s_Process) & ((s_instance(D, s_Object) & s_instance(D, s_TimeInterval)) => (s_attribute(D, s_DeviceDamaged) => (s_instance(DAM, s_Damaging) & (s_patient(DAM, D) & (~ (s_instance(R, s_Repairing) & (s_patient(R, D) & s_earlier(D, R)))))))))))))).

/*
(forall (?F ?D)
 (=> (and (instance ?D Object) (instance ?F Formula))
  (=> (and (attribute ?D DeviceDamaged) (hasPurpose ?D ?F))
   (not (modalAttribute ?F Possibility)))))
*/
fof(a5726,axiom,! [F,D] : (((s_instance(D, s_Object) & s_instance(F, s_Formula)) => ((s_attribute(D, s_DeviceDamaged) & s_hasPurpose(D, F)) => (~ s_modalAttribute(F, s_Possibility)))))).

/*
(instance Vending SetOrClass)
*/
fof(a5727,axiom,s_instance(s_Vending, s_SetOrClass)).

/*
(subclass Vending FinancialTransaction)
*/
fof(a5728,axiom,s_subclass(s_Vending, s_FinancialTransaction)).

/*
(forall (?V)
 (exists (?VM)
  (and (instance ?VM Object)
       (=> (instance ?V Vending)
        (and (instance ?VM VendingMachine) (origin ?V ?VM))))))
*/
fof(a5729,axiom,! [V] : (? [VM] : ((s_instance(VM, s_Object) & (s_instance(V, s_Vending) => (s_instance(VM, s_VendingMachine) & s_origin(V, VM))))))).

/*
(instance VendingMachine SetOrClass)
*/
fof(a5730,axiom,s_instance(s_VendingMachine, s_SetOrClass)).

/*
(subclass VendingMachine Machine)
*/
fof(a5731,axiom,s_subclass(s_VendingMachine, s_Machine)).

/*
(forall (?VM ?V)
 (=> (instance ?V Process)
  (=> (instance ?VM VendingMachine)
   (hasPurpose ?VM
    (exists (?H ?O)
     (and (instance ?V Vending)
          (and (instance ?H Human)
               (and (instance ?O Object)
                    (and (objectTransferred ?V ?O)
                         (and (instrument ?V ?VM)
                              (and (origin ?V ?VM)
                                   (and
                                    (not (instance ?O Currency))
                                    (destination ?V ?H)))))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?O ?V)
 (=> (instance ?O Entity)
  (=>
   (and (instance ?V Vending)
        (and (objectTransferred ?V ?O) (not (instance ?O Currency))))
   (modalAttribute
    (or (instance ?O (FoodForFn Human)) (instance ?O Beverage))
    Likely))))
*/
%% no translation to TPTP available.

/*
(instance CoinOperated RelationalAttribute)
*/
fof(a5732,axiom,s_instance(s_CoinOperated, s_RelationalAttribute)).

/*
(forall (?M)
 (=> (instance ?M Object)
  (=> (attribute ?M CoinOperated) (instance ?M Machine))))
*/
fof(a5733,axiom,! [M] : ((s_instance(M, s_Object) => (s_attribute(M, s_CoinOperated) => s_instance(M, s_Machine))))).

/*
(forall (?M)
 (=> (instance ?M Object)
  (=> (attribute ?M CoinOperated)
   (hasPurpose ?M
    (exists (?C ?FT ?A ?ACT)
     (and (instance ?C CurrencyCoin)
          (and (instance ?FT FinancialTransaction)
               (and (destination ?FT ?M)
                    (and (patient ?FT ?C)
                         (and (origin ?FT ?A)
                              (and (causes ?FT ?ACT)
                                   (wants ?A ?ACT))))))))))))
*/
%% no translation to TPTP available.

/*
(instance FishTank SetOrClass)
*/
fof(a5734,axiom,s_instance(s_FishTank, s_SetOrClass)).

/*
(instance FluidContainer SetOrClass)
*/
fof(a5735,axiom,s_instance(s_FluidContainer, s_SetOrClass)).

/*
(subclass FishTank FluidContainer)
*/
fof(a5736,axiom,s_subclass(s_FishTank, s_FluidContainer)).

/*
(forall (?FT)
 (=> (instance ?FT FishTank)
  (hasPurpose ?FT
   (exists (?W ?F)
    (and (instance ?W Water)
         (and (instance ?F Fish)
              (and (contains ?FT ?W) (contains ?FT ?F))))))))
*/
%% no translation to TPTP available.

/*
(instance Collectible RelationalAttribute)
*/
fof(a5737,axiom,s_instance(s_Collectible, s_RelationalAttribute)).

/*
(forall (?P ?C ?P2)
 (exists (?H)
  (and (instance ?H CognitiveAgent)
       (=>
        (and (instance ?P2 Formula) (instance ?C Object)
             (instance ?P Formula))
        (=> (and (attribute ?C Collectible) (hasPurpose ?C ?P))
         (and (instance ?H Human)
              (and (wants ?H ?C)
                   (and (desires ?H ?P2)
                        (and (entails ?P2 (possesses ?H ?C))
                             (not (equal ?P ?P2)))))))))))
*/
%% no translation to TPTP available.

/*
(instance TradingCard SetOrClass)
*/
fof(a5738,axiom,s_instance(s_TradingCard, s_SetOrClass)).

/*
(subclass TradingCard Icon)
*/
fof(a5739,axiom,s_subclass(s_TradingCard, s_Icon)).

/*
(forall (?TC)
 (=> (instance ?TC TradingCard) (attribute ?TC Collectible)))
*/
fof(a5740,axiom,! [TC] : ((s_instance(TC, s_TradingCard) => s_attribute(TC, s_Collectible)))).

/*
(instance Computer SetOrClass)
*/
fof(a5741,axiom,s_instance(s_Computer, s_SetOrClass)).

/*
(subclass PortableComputer Computer)
*/
fof(a5742,axiom,s_subclass(s_PortableComputer, s_Computer)).

/*
(forall (?C ?PC)
 (=> (instance ?C Process)
  (=> (instance ?PC PortableComputer)
   (hasPurpose ?PC
    (exists (?T ?H)
     (and (instance ?T Carrying)
          (and (patient ?T ?PC) (agent ?C ?H))))))))
*/
%% no translation to TPTP available.

/*
(instance Laptop SetOrClass)
*/
fof(a5743,axiom,s_instance(s_Laptop, s_SetOrClass)).

/*
(subclass Laptop PortableComputer)
*/
fof(a5744,axiom,s_subclass(s_Laptop, s_PortableComputer)).

/*
(initiallyContainsPart ComputerKeyboard Laptop)
*/
fof(a5745,axiom,s_initiallyContainsPart(s_ComputerKeyboard, s_Laptop)).

/*
(initiallyContainsPart ComputerScreen Laptop)
*/
fof(a5746,axiom,s_initiallyContainsPart(s_ComputerScreen, s_Laptop)).

/*
(instance TabletComputer SetOrClass)
*/
fof(a5747,axiom,s_instance(s_TabletComputer, s_SetOrClass)).

/*
(subclass TabletComputer PortableComputer)
*/
fof(a5748,axiom,s_subclass(s_TabletComputer, s_PortableComputer)).

/*
(forall (?T)
 (forall (?K)
  (=> (instance ?K Object)
   (=> (instance ?T TabletComputer)
    (not (and (instance ?K ComputerKeyboard) (part ?K ?T)))))))
*/
fof(a5749,axiom,! [T] : (! [K] : ((s_instance(K, s_Object) => (s_instance(T, s_TabletComputer) => (~ (s_instance(K, s_ComputerKeyboard) & s_part(K, T)))))))).

/*
(forall (?T)
 (exists (?K)
  (and (instance ?K Object)
       (=> (instance ?T TabletComputer)
        (and (instance ?K ComputerTouchscreen) (part ?K ?T))))))
*/
fof(a5750,axiom,! [T] : (? [K] : ((s_instance(K, s_Object) & (s_instance(T, s_TabletComputer) => (s_instance(K, s_ComputerTouchscreen) & s_part(K, T))))))).

/*
(instance MobileCellPhone SetOrClass)
*/
fof(a5751,axiom,s_instance(s_MobileCellPhone, s_SetOrClass)).

/*
(subclass SmartPhone MobileCellPhone)
*/
fof(a5752,axiom,s_subclass(s_SmartPhone, s_MobileCellPhone)).

/*
(instance SmartPhone SetOrClass)
*/
fof(a5753,axiom,s_instance(s_SmartPhone, s_SetOrClass)).

/*
(instance PortableComputer SetOrClass)
*/
fof(a5754,axiom,s_instance(s_PortableComputer, s_SetOrClass)).

/*
(subclass SmartPhone PortableComputer)
*/
fof(a5755,axiom,s_subclass(s_SmartPhone, s_PortableComputer)).

/*
(instance suffers CaseRole)
*/
fof(a5756,axiom,s_instance(s_suffers_m, s_CaseRole)).

/*
(instance suffers BinaryRelation)
*/
fof(a5757,axiom,s_instance(s_suffers_m, s_BinaryRelation)).

/*
(instance suffers PartialValuedRelation)
*/
fof(a5758,axiom,s_instance(s_suffers_m, s_PartialValuedRelation)).

/*
(forall (?B ?A)
 (=> (and (instance ?A Process) (instance ?B Agent))
  (=> (suffers ?A ?B) (not (benefits ?A ?B)))))
*/
fof(a5759,axiom,! [B,A] : (((s_instance(A, s_Process) & s_instance(B, s_Agent)) => (s_suffers(A, B) => (~ s_benefits(A, B)))))).

/*
(forall (?B ?A)
 (=> (and (instance ?A Process) (instance ?B Agent))
  (=> (benefits ?A ?B) (not (suffers ?A ?B)))))
*/
fof(a5760,axiom,! [B,A] : (((s_instance(A, s_Process) & s_instance(B, s_Agent)) => (s_benefits(A, B) => (~ s_suffers(A, B)))))).

/*
(forall (?PROCESS-START ?PROCESS ?AGENT ?AGENT-END)
 (=>
  (and (instance ?AGENT-END TimePoint) (instance ?AGENT Agent)
       (instance ?PROCESS Process) (instance ?PROCESS-START TimePoint))
  (=>
   (and (equal ?PROCESS-START (BeginFn (WhenFn ?PROCESS)))
        (and (equal ?AGENT-END (EndFn (WhenFn ?AGENT)))
             (suffers ?PROCESS ?AGENT)))
   (before ?PROCESS-START ?AGENT-END))))
*/
fof(a5761,axiom,! [PROCESS_START,PROCESS,AGENT,AGENT_END] : (((s_instance(AGENT_END, s_TimePoint) & s_instance(AGENT, s_Agent) & s_instance(PROCESS, s_Process) & s_instance(PROCESS_START, s_TimePoint)) => (((PROCESS_START = s_BeginFn(s_WhenFn(PROCESS))) & ((AGENT_END = s_EndFn(s_WhenFn(AGENT))) & s_suffers(PROCESS, AGENT))) => s_before(PROCESS_START, AGENT_END))))).

/*
(forall (?B ?A)
 (=> (and (instance ?A Process) (instance ?B CognitiveAgent))
  (=> (benefits ?A ?B) (wants ?B ?A))))
*/
fof(a5762,axiom,! [B,A] : (((s_instance(A, s_Process) & s_instance(B, s_CognitiveAgent)) => (s_benefits(A, B) => s_wants(B, A))))).

/*
(forall (?B ?A)
 (=> (and (instance ?A Process) (instance ?B CognitiveAgent))
  (=> (suffers ?A ?B) (not (wants ?B ?A)))))
*/
fof(a5763,axiom,! [B,A] : (((s_instance(A, s_Process) & s_instance(B, s_CognitiveAgent)) => (s_suffers(A, B) => (~ s_wants(B, A)))))).

/*
(instance Apologizing SetOrClass)
*/
fof(a5764,axiom,s_instance(s_Apologizing, s_SetOrClass)).

/*
(subclass Apologizing Stating)
*/
fof(a5765,axiom,s_subclass(s_Apologizing, s_Stating)).

/*
(forall (?P ?AG ?A)
 (exists (?ACT)
  (and (instance ?ACT Process)
       (=> (and (instance ?P Agent) (instance ?AG CognitiveAgent))
        (=>
         (and (instance ?A Apologizing)
              (and (agent ?A ?AG) (destination ?A ?P)))
         (and (suffers ?ACT ?P)
              (and (agent ?ACT ?AG)
                   (holdsDuring (WhenFn ?A)
                    (not (wants ?AG ?ACT))))))))))
*/
%% no translation to TPTP available.

/*
(instance Confirming SetOrClass)
*/
fof(a5766,axiom,s_instance(s_Confirming, s_SetOrClass)).

/*
(subclass Confirming Stating)
*/
fof(a5767,axiom,s_subclass(s_Confirming, s_Stating)).

/*
(forall (?P ?A ?C)
 (exists (?S ?RA ?A2)
  (and (and (instance ?A2 Agreement) (instance ?A2 Agent)
            (instance ?RA CognitiveAgent)
            (instance ?RA ContentBearingPhysical)
            (instance ?S TimeInterval) (instance ?S Process)
            (instance ?S ContentBearingPhysical))
       (=>
        (and (instance ?P Proposition) (instance ?A Agent)
             (instance ?A Agreement))
        (=>
         (and (instance ?C Confirming)
              (and (agent ?C ?A) (containsInformation ?C ?P)))
         (and (instance ?S Stating)
              (and (earlier ?S ?C)
                   (and (instance ?RA ReachingAgreement)
                        (and (agent ?S ?A2)
                             (and (containsInformation ?RA ?P)
                                  (and
                                   (containsInformation ?S ?P)
                                   (and
                                    (partyToAgreement ?RA ?A)
                                    (partyToAgreement
                                     ?RA
                                     ?A2)))))))))))))
*/
fof(a5768,axiom,! [P,A,C] : (? [S,RA,A2] : (((s_instance(A2, s_Agreement) & s_instance(A2, s_Agent) & s_instance(RA, s_CognitiveAgent) & s_instance(RA, s_ContentBearingPhysical) & s_instance(S, s_TimeInterval) & s_instance(S, s_Process) & s_instance(S, s_ContentBearingPhysical)) & ((s_instance(P, s_Proposition) & s_instance(A, s_Agent) & s_instance(A, s_Agreement)) => ((s_instance(C, s_Confirming) & (s_agent(C, A) & s_containsInformation(C, P))) => (s_instance(S, s_Stating) & (s_earlier(S, C) & (s_instance(RA, s_ReachingAgreement) & (s_agent(S, A2) & (s_containsInformation(RA, P) & (s_containsInformation(S, P) & (s_partyToAgreement(RA, A) & s_partyToAgreement(RA, A2)))))))))))))).

/*
(instance Elaborating SetOrClass)
*/
fof(a5769,axiom,s_instance(s_Elaborating, s_SetOrClass)).

/*
(subclass Elaborating LinguisticCommunication)
*/
fof(a5770,axiom,s_subclass(s_Elaborating, s_LinguisticCommunication)).

/*
(forall (?E)
 (exists (?L ?EP ?LP)
  (and (and (instance ?LP ContentBearingPhysical)
            (instance ?LP Proposition)
            (instance ?EP ContentBearingPhysical)
            (instance ?EP Proposition) (instance ?L TimeInterval)
            (instance ?L ContentBearingPhysical))
       (=> (instance ?E Elaborating)
        (and (instance ?L LinguisticCommunication)
             (and (earlier ?L ?E)
                  (and (containsInformation ?E ?EP)
                       (and (containsInformation ?L ?LP)
                            (subsumesContentInstance ?EP ?LP)))))))))
*/
fof(a5771,axiom,! [E] : (? [L,EP,LP] : (((s_instance(LP, s_ContentBearingPhysical) & s_instance(LP, s_Proposition) & s_instance(EP, s_ContentBearingPhysical) & s_instance(EP, s_Proposition) & s_instance(L, s_TimeInterval) & s_instance(L, s_ContentBearingPhysical)) & (s_instance(E, s_Elaborating) => (s_instance(L, s_LinguisticCommunication) & (s_earlier(L, E) & (s_containsInformation(E, EP) & (s_containsInformation(L, LP) & s_subsumesContentInstance(EP, LP)))))))))).

/*
(instance Restating SetOrClass)
*/
fof(a5772,axiom,s_instance(s_Restating, s_SetOrClass)).

/*
(subclass Restating LinguisticCommunication)
*/
fof(a5773,axiom,s_subclass(s_Restating, s_LinguisticCommunication)).

/*
(forall (?R ?LP ?RP ?E)
 (exists (?L)
  (and (and (instance ?L TimeInterval)
            (instance ?L ContentBearingPhysical))
       (=>
        (and (instance ?LP ContentBearingPhysical)
             (instance ?LP Proposition)
             (instance ?E ContentBearingPhysical)
             (instance ?RP Proposition)
             (instance ?RP ContentBearingPhysical))
        (=> (instance ?R Restating)
         (and (instance ?L LinguisticCommunication)
              (and (earlier ?L ?R)
                   (and (containsInformation ?E ?RP)
                        (and (containsInformation ?L ?LP)
                             (equivalentContentInstance ?RP
                              ?LP))))))))))
*/
fof(a5774,axiom,! [R,LP,RP,E] : (? [L] : (((s_instance(L, s_TimeInterval) & s_instance(L, s_ContentBearingPhysical)) & ((s_instance(LP, s_ContentBearingPhysical) & s_instance(LP, s_Proposition) & s_instance(E, s_ContentBearingPhysical) & s_instance(RP, s_Proposition) & s_instance(RP, s_ContentBearingPhysical)) => (s_instance(R, s_Restating) => (s_instance(L, s_LinguisticCommunication) & (s_earlier(L, R) & (s_containsInformation(E, RP) & (s_containsInformation(L, LP) & s_equivalentContentInstance(RP, LP))))))))))).

/*
(instance Correcting SetOrClass)
*/
fof(a5775,axiom,s_instance(s_Correcting, s_SetOrClass)).

/*
(subclass Correcting Stating)
*/
fof(a5776,axiom,s_subclass(s_Correcting, s_Stating)).

/*
(forall (?CS ?C)
 (exists (?D ?S ?SP ?CP)
  (and (and (instance ?CP Proposition) (instance ?SP Proposition)
            (instance ?D Process) (instance ?S Process)
            (instance ?S ContentBearingPhysical))
       (=> (instance ?CS Proposition)
        (=> (instance ?C Correcting)
         (and (instance ?D Disagreeing)
              (and (subProcess ?C ?D)
                   (and (instance ?S Stating)
                        (and (subProcess ?S ?D)
                             (and (containsInformation ?S ?SP)
                                  (and
                                   (containsInformation ?C ?CP)
                                   (and
                                    (refers ?CP ?SP)
                                    (not
                                     (consistent ?CS ?SP))))))))))))))
*/
fof(a5777,axiom,! [CS,C] : (? [D,S,SP,CP] : (((s_instance(CP, s_Proposition) & s_instance(SP, s_Proposition) & s_instance(D, s_Process) & s_instance(S, s_Process) & s_instance(S, s_ContentBearingPhysical)) & (s_instance(CS, s_Proposition) => (s_instance(C, s_Correcting) => (s_instance(D, s_Disagreeing) & (s_subProcess(C, D) & (s_instance(S, s_Stating) & (s_subProcess(S, D) & (s_containsInformation(S, SP) & (s_containsInformation(C, CP) & (s_refers(CP, SP) & (~ s_consistent(CS, SP))))))))))))))).

/*
(instance Prompting SetOrClass)
*/
fof(a5778,axiom,s_instance(s_Prompting, s_SetOrClass)).

/*
(subclass Prompting Requesting)
*/
fof(a5779,axiom,s_subclass(s_Prompting, s_Requesting)).

/*
(forall (?P)
 (exists (?H ?A)
  (and (and (instance ?A CognitiveAgent) (instance ?H Agent))
       (=> (instance ?P Prompting)
        (and (destination ?P ?H)
             (and (agent ?P ?A)
                  (desires ?A
                   (exists (?LC)
                    (and (instance ?LC LinguisticCommunication)
                         (and (agent ?LC ?H)
                              (and (earlier ?P ?LC)
                                   (subsumesContentInstance
                                    ?LC
                                    ?P))))))))))))
*/
%% no translation to TPTP available.

/*
(instance CoveringFn UnaryFunction)
*/
fof(a5780,axiom,s_instance(s_CoveringFn_m, s_UnaryFunction)).

/*
(domainSubclass CoveringFn 1 BodyPart)
*/
fof(a5781,axiom,s_domainSubclass(s_CoveringFn_m, 1, s_BodyPart)).

/*
(rangeSubclass CoveringFn WearableItem)
*/
fof(a5782,axiom,s_rangeSubclass(s_CoveringFn_m, s_WearableItem)).

/*
(forall (?B ?C)
 (=>
  (and (instance ?C Physical) (instance ?C SetOrClass)
       (subclass ?B BodyPart) (instance ?B SetOrClass))
  (=> (subclass ?C (CoveringFn ?B))
   (hasPurpose ?C
    (exists (?P ?BI ?CI)
     (and (instance ?P Covering)
          (and (instance ?BI ?B)
               (and (instance ?CI ?C)
                    (and (destination ?P ?BI) (patient ?P ?CI))))))))))
*/
%% no translation to TPTP available.

/*
(instance covers BinaryPredicate)
*/
fof(a5783,axiom,s_instance(s_covers_m, s_BinaryPredicate)).

/*
(instance covers TransitiveRelation)
*/
fof(a5784,axiom,s_instance(s_covers_m, s_TransitiveRelation)).

/*
(instance covers SpatialRelation)
*/
fof(a5785,axiom,s_instance(s_covers_m, s_SpatialRelation)).

/*
(forall (?S ?B ?A)
 (=>
  (and (instance ?A Object) (instance ?B Object) (instance ?S Object))
  (=> (and (covers ?A ?B) (superficialPart ?S ?B))
   (meetsSpatially ?A ?S))))
*/
fof(a5786,axiom,! [S,B,A] : (((s_instance(A, s_Object) & s_instance(B, s_Object) & s_instance(S, s_Object)) => ((s_covers(A, B) & s_superficialPart(S, B)) => s_meetsSpatially(A, S))))).

/*
(forall (?I ?P ?C)
 (=> (and (instance ?I Object) (instance ?P Object))
  (=>
   (and (instance ?C Covering)
        (and (patient ?C ?P) (instrument ?C ?I)))
   (holdsDuring (ImmediateFutureFn (WhenFn ?C)) (covers ?I ?P)))))
*/
%% no translation to TPTP available.

/*
(instance beforeOnPath QuaternaryPredicate)
*/
fof(a5787,axiom,s_instance(s_beforeOnPath_m, s_QuaternaryPredicate)).

/*
(instance beforeOnPath SpatialRelation)
*/
fof(a5788,axiom,s_instance(s_beforeOnPath_m, s_SpatialRelation)).

/*
(forall (?T ?O1 ?O2 ?PATH ?O3)
 (=>
  (and (instance ?O1 Object) (instance ?O2 Object)
       (instance ?PATH Object) (instance ?O3 Object))
  (=>
   (and (betweenOnPath ?O1 ?O2 ?O3 ?PATH)
        (and (instance ?T Transfer)
             (and (path ?T ?PATH)
                  (and (origin ?T ?O1) (destination ?T ?O3)))))
   (and (beforeOnPath ?O1 ?O2 ?PATH ?T)
        (beforeOnPath ?O2 ?O3 ?PATH ?T)))))
*/
fof(a5789,axiom,! [T,O1,O2,PATH,O3] : (((s_instance(O1, s_Object) & s_instance(O2, s_Object) & s_instance(PATH, s_Object) & s_instance(O3, s_Object)) => ((s_betweenOnPath(O1, O2, O3, PATH) & (s_instance(T, s_Transfer) & (s_path(T, PATH) & (s_origin(T, O1) & s_destination(T, O3))))) => (s_beforeOnPath(O1, O2, PATH, T) & s_beforeOnPath(O2, O3, PATH, T)))))).

/*
(forall (?O2 ?O1)
 (exists (?T ?L ?P)
  (and (and (instance ?P Object) (instance ?L Object)
            (instance ?T Transfer))
       (=> (and (instance ?O1 Object) (instance ?O2 Object))
        (=> (orientation ?O1 ?O2 Upstream)
         (and (instance ?T Transfer)
              (and (attribute ?L Liquid)
                   (and (path ?T ?P)
                        (and (origin ?T ?O1)
                             (and (beforeOnPath ?O1 ?O2 ?P ?T)
                                  (destination ?T ?O2)))))))))))
*/
fof(a5790,axiom,! [O2,O1] : (? [T,L,P] : (((s_instance(P, s_Object) & s_instance(L, s_Object) & s_instance(T, s_Transfer)) & ((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => (s_orientation(O1, O2, s_Upstream) => (s_instance(T, s_Transfer) & (s_attribute(L, s_Liquid) & (s_path(T, P) & (s_origin(T, O1) & (s_beforeOnPath(O1, O2, P, T) & s_destination(T, O2)))))))))))).

/*
(forall (?O2 ?O1)
 (exists (?T ?L ?P)
  (and (and (instance ?P Object) (instance ?L Object)
            (instance ?T Transfer))
       (=> (and (instance ?O1 Object) (instance ?O2 Object))
        (=> (orientation ?O1 ?O2 Downstream)
         (and (instance ?T Transfer)
              (and (attribute ?L Liquid)
                   (and (path ?T ?P)
                        (and (origin ?T ?O2)
                             (and (beforeOnPath ?O2 ?O1 ?P ?T)
                                  (destination ?T ?O1)))))))))))
*/
fof(a5791,axiom,! [O2,O1] : (? [T,L,P] : (((s_instance(P, s_Object) & s_instance(L, s_Object) & s_instance(T, s_Transfer)) & ((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => (s_orientation(O1, O2, s_Downstream) => (s_instance(T, s_Transfer) & (s_attribute(L, s_Liquid) & (s_path(T, P) & (s_origin(T, O2) & (s_beforeOnPath(O2, O1, P, T) & s_destination(T, O1)))))))))))).

/*
(forall (?O2 ?O1)
 (exists (?T ?L ?P)
  (and (and (instance ?P Object) (instance ?L Object)
            (instance ?T Transfer))
       (=> (and (instance ?O1 Object) (instance ?O2 Object))
        (=> (orientation ?O1 ?O2 Upwind)
         (and (instance ?T Transfer)
              (and (attribute ?L Liquid)
                   (and (path ?T ?P)
                        (and (origin ?T ?O1)
                             (and (beforeOnPath ?O1 ?O2 ?P ?T)
                                  (destination ?T ?O2)))))))))))
*/
fof(a5792,axiom,! [O2,O1] : (? [T,L,P] : (((s_instance(P, s_Object) & s_instance(L, s_Object) & s_instance(T, s_Transfer)) & ((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => (s_orientation(O1, O2, s_Upwind) => (s_instance(T, s_Transfer) & (s_attribute(L, s_Liquid) & (s_path(T, P) & (s_origin(T, O1) & (s_beforeOnPath(O1, O2, P, T) & s_destination(T, O2)))))))))))).

/*
(forall (?O2 ?O1)
 (exists (?T ?L ?P)
  (and (and (instance ?P Object) (instance ?L Object)
            (instance ?T Transfer))
       (=> (and (instance ?O1 Object) (instance ?O2 Object))
        (=> (orientation ?O1 ?O2 Downwind)
         (and (instance ?T Transfer)
              (and (attribute ?L Liquid)
                   (and (path ?T ?P)
                        (and (origin ?T ?O2)
                             (and (beforeOnPath ?O2 ?O1 ?P ?T)
                                  (destination ?T ?O1)))))))))))
*/
fof(a5793,axiom,! [O2,O1] : (? [T,L,P] : (((s_instance(P, s_Object) & s_instance(L, s_Object) & s_instance(T, s_Transfer)) & ((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => (s_orientation(O1, O2, s_Downwind) => (s_instance(T, s_Transfer) & (s_attribute(L, s_Liquid) & (s_path(T, P) & (s_origin(T, O2) & (s_beforeOnPath(O2, O1, P, T) & s_destination(T, O1)))))))))))).

/*
(instance approximateValue BinaryPredicate)
*/
fof(a5794,axiom,s_instance(s_approximateValue_m, s_BinaryPredicate)).

/*
(forall (?N2 ?N1)
 (=> (and (instance ?N1 RealNumber) (instance ?N2 RealNumber))
  (=> (approximateValue ?N1 ?N2)
   (modalAttribute (equal ?N1 ?N2) Likely))))
*/
%% no translation to TPTP available.

/*
(forall (?N2 ?N1)
 (=> (and (instance ?N1 RealNumber) (instance ?N2 RealNumber))
  (=> (approximateValue ?N1 ?N2)
   (modalAttribute (greaterThan 0.9 (DivisionFn ?N1 ?N2)) Unlikely))))
*/
%% no translation to TPTP available.

/*
(forall (?N2 ?N1)
 (=> (and (instance ?N1 RealNumber) (instance ?N2 RealNumber))
  (=> (approximateValue ?N1 ?N2)
   (modalAttribute (greaterThan 0.9 (DivisionFn ?N2 ?N1)) Unlikely))))
*/
%% no translation to TPTP available.

/*
(instance Invoice SetOrClass)
*/
fof(a5795,axiom,s_instance(s_Invoice, s_SetOrClass)).

/*
(subclass Invoice FinancialText)
*/
fof(a5796,axiom,s_subclass(s_Invoice, s_FinancialText)).

/*
(instance PurchaseOrder SetOrClass)
*/
fof(a5797,axiom,s_instance(s_PurchaseOrder, s_SetOrClass)).

/*
(instance FinancialText SetOrClass)
*/
fof(a5798,axiom,s_instance(s_FinancialText, s_SetOrClass)).

/*
(subclass PurchaseOrder FinancialText)
*/
fof(a5799,axiom,s_subclass(s_PurchaseOrder, s_FinancialText)).

/*
(instance uniqueIdWithRespectTo TernaryPredicate)
*/
fof(a5800,axiom,s_instance(s_uniqueIdWithRespectTo_m, s_TernaryPredicate)).

/*
(instance AccountNumber SetOrClass)
*/
fof(a5801,axiom,s_instance(s_AccountNumber, s_SetOrClass)).

/*
(subclass AccountNumber SymbolicString)
*/
fof(a5802,axiom,s_subclass(s_AccountNumber, s_SymbolicString)).

/*
(forall (?HUMAN ?AN)
 (exists (?CORPORATION ?AGENT ?NUMBER)
  (and (and (instance ?NUMBER SymbolicString) (instance ?AGENT Entity)
            (instance ?CORPORATION Physical))
       (=> (instance ?HUMAN Physical)
        (=> (instance ?AN AccountNumber)
         (and (instance ?CORPORATION Corporation)
              (and (instance ?AGENT Agent)
                   (and (instance ?NUMBER SymbolicString)
                        (uniqueIdWithRespectTo ?CORPORATION ?HUMAN
                         ?NUMBER)))))))))
*/
fof(a5803,axiom,! [HUMAN,AN] : (? [CORPORATION,AGENT,NUMBER] : (((s_instance(NUMBER, s_SymbolicString) & s_instance(AGENT, s_Entity) & s_instance(CORPORATION, s_Physical)) & (s_instance(HUMAN, s_Physical) => (s_instance(AN, s_AccountNumber) => (s_instance(CORPORATION, s_Corporation) & (s_instance(AGENT, s_Agent) & (s_instance(NUMBER, s_SymbolicString) & s_uniqueIdWithRespectTo(CORPORATION, HUMAN, NUMBER)))))))))).

/*
(instance InvoiceNumber SetOrClass)
*/
fof(a5804,axiom,s_instance(s_InvoiceNumber, s_SetOrClass)).

/*
(subclass InvoiceNumber SymbolicString)
*/
fof(a5805,axiom,s_subclass(s_InvoiceNumber, s_SymbolicString)).

/*
(forall (?AN)
 (exists (?INVOICE ?SELLER ?NUMBER)
  (and (and (instance ?NUMBER SymbolicString)
            (instance ?SELLER Physical) (instance ?INVOICE Physical))
       (=> (instance ?AN InvoiceNumber)
        (and (instance ?INVOICE Invoice)
             (and (instance ?SELLER Seller)
                  (and (instance ?NUMBER SymbolicString)
                       (uniqueIdWithRespectTo ?INVOICE ?SELLER
                        ?NUMBER))))))))
*/
fof(a5806,axiom,! [AN] : (? [INVOICE,SELLER,NUMBER] : (((s_instance(NUMBER, s_SymbolicString) & s_instance(SELLER, s_Physical) & s_instance(INVOICE, s_Physical)) & (s_instance(AN, s_InvoiceNumber) => (s_instance(INVOICE, s_Invoice) & (s_instance(SELLER, s_Seller) & (s_instance(NUMBER, s_SymbolicString) & s_uniqueIdWithRespectTo(INVOICE, SELLER, NUMBER))))))))).

/*
(instance PurchaseOrderNumber SetOrClass)
*/
fof(a5807,axiom,s_instance(s_PurchaseOrderNumber, s_SetOrClass)).

/*
(subclass PurchaseOrderNumber SymbolicString)
*/
fof(a5808,axiom,s_subclass(s_PurchaseOrderNumber, s_SymbolicString)).

/*
(forall (?AN)
 (exists (?PO ?BUYER ?NUMBER)
  (and (and (instance ?NUMBER SymbolicString)
            (instance ?BUYER Physical) (instance ?PO Physical))
       (=> (instance ?AN PurchaseOrderNumber)
        (and (instance ?PO PurchaseOrder)
             (and (instance ?BUYER Buyer)
                  (and (instance ?NUMBER SymbolicString)
                       (uniqueIdWithRespectTo ?PO ?BUYER ?NUMBER))))))))
*/
fof(a5809,axiom,! [AN] : (? [PO,BUYER,NUMBER] : (((s_instance(NUMBER, s_SymbolicString) & s_instance(BUYER, s_Physical) & s_instance(PO, s_Physical)) & (s_instance(AN, s_PurchaseOrderNumber) => (s_instance(PO, s_PurchaseOrder) & (s_instance(BUYER, s_Buyer) & (s_instance(NUMBER, s_SymbolicString) & s_uniqueIdWithRespectTo(PO, BUYER, NUMBER))))))))).

/*
(instance BreakingRecord SetOrClass)
*/
fof(a5810,axiom,s_instance(s_BreakingRecord, s_SetOrClass)).

/*
(subclass BreakingRecord Process)
*/
fof(a5811,axiom,s_subclass(s_BreakingRecord, s_Process)).

/*
(forall (?A1 ?X)
 (exists (?AC ?PC ?P1 ?TP ?ROLE ?L ?Q)
  (forall (?A2 ?P2)
   (=> (and (instance ?P2 Process) (instance ?A2 Object))
    (and (and (instance ?Q Entity) (instance ?L Object)
              (instance ?L SetOrClass) (instance ?ROLE CaseRole)
              (instance ?TP TimePoint) (instance ?P1 Process)
              (instance ?PC SetOrClass) (instance ?AC SetOrClass))
         (=> (instance ?A1 Agent)
          (=> (and (instance ?X BreakingRecord) (agent ?X ?A1))
           (and (instance ?AC Set)
                (and (instance ?A1 ?AC)
                     (and (subclass ?PC Process)
                          (and (subclass ?L Region)
                               (and
                                (instance ?TP TimePoint)
                                (and
                                 (instance ?Q Quantity)
                                 (and
                                  (refers ?X ?Q)
                                  (and
                                   (refers ?Q ?PC)
                                   (and
                                    (playsRoleInEvent ?A1 ?ROLE ?P1)
                                    (and
                                     (eventLocated ?P1 ?L)
                                     (not
                                      (and
                                       (instance ?A2 ?AC)
                                       (and
                                        (not (equal ?A2 ?A1))
                                        (and
                                         (instance ?P2 ?PC)
                                         (holdsDuring
                                          (TimeIntervalFn
                                           ?TP
                                           (EndFn (WhenFn ?X)))
                                          (and
                                           (playsRoleInEvent
                                            ?A2
                                            ?ROLE
                                            ?P2)
                                           (eventLocated
                                            ?P2
                                            ?L))))))))))))))))))))))))
*/
%% no translation to TPTP available.

/*
(instance Freighter SetOrClass)
*/
fof(a5812,axiom,s_instance(s_Freighter, s_SetOrClass)).

/*
(instance WaterVehicle SetOrClass)
*/
fof(a5813,axiom,s_instance(s_WaterVehicle, s_SetOrClass)).

/*
(subclass Freighter WaterVehicle)
*/
fof(a5814,axiom,s_subclass(s_Freighter, s_WaterVehicle)).

/*
(forall (?F)
 (exists (?T ?OBJ)
  (and (and (instance ?OBJ Entity) (instance ?T Process))
       (=> (instance ?F Freighter)
        (and (instance ?T Transportation)
             (and (instance ?OBJ Object)
                  (hasPurpose ?F
                   (and (agent ?T ?F) (patient ?T ?OBJ)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?DAM)
 (=>
  (and (instance ?DAM Damaging)
       (and (instance ?OBJ Device) (patient ?DAM ?OBJ)))
  (holdsDuring (ImmediateFutureFn (WhenFn ?DAM))
   (attribute ?OBJ DeviceDamaged))))
*/
%% no translation to TPTP available.

/*
(instance DamagedVehicle SetOrClass)
*/
fof(a5815,axiom,s_instance(s_DamagedVehicle, s_SetOrClass)).

/*
(subclass DamagedVehicle Vehicle)
*/
fof(a5816,axiom,s_subclass(s_DamagedVehicle, s_Vehicle)).

/*
(forall (?DV)
 (<=> (instance ?DV DamagedVehicle)
  (and (instance ?DV Vehicle) (attribute ?DV DeviceDamaged))))
*/
fof(a5817,axiom,! [DV] : ((s_instance(DV, s_DamagedVehicle) <=> (s_instance(DV, s_Vehicle) & s_attribute(DV, s_DeviceDamaged))))).

/*
(instance Uninhabited RelationalAttribute)
*/
fof(a5818,axiom,s_instance(s_Uninhabited, s_RelationalAttribute)).

/*
(forall (?U)
 (forall (?H)
  (=> (instance ?H Organism)
   (=> (and (attribute ?U Uninhabited) (instance ?U Region))
    (not (and (instance ?H Human) (inhabits ?H ?U)))))))
*/
fof(a5819,axiom,! [U] : (! [H] : ((s_instance(H, s_Organism) => ((s_attribute(U, s_Uninhabited) & s_instance(U, s_Region)) => (~ (s_instance(H, s_Human) & s_inhabits(H, U)))))))).

/*
(instance instance BinaryPredicate)
*/
fof(a5820,axiom,s_instance(s_instance_m, s_BinaryPredicate)).

/*
(subrelation immediateInstance instance)
*/
fof(a5821,axiom,s_subrelation(s_immediateInstance_m, s_instance_m)).

/*
(instance immediateInstance AsymmetricRelation)
*/
fof(a5822,axiom,s_instance(s_immediateInstance_m, s_AsymmetricRelation)).

/*
(instance immediateInstance IntransitiveRelation)
*/
fof(a5823,axiom,s_instance(s_immediateInstance_m, s_IntransitiveRelation)).

/*
(instance immediateInstance TotalValuedRelation)
*/
fof(a5824,axiom,s_instance(s_immediateInstance_m, s_TotalValuedRelation)).

/*
(forall (?CLASS ?ENTITY)
 (forall (?SUBCLASS)
  (=> (instance ?SUBCLASS SetOrClass)
   (=> (and (instance ?ENTITY Entity) (instance ?CLASS SetOrClass))
    (=> (immediateInstance ?ENTITY ?CLASS)
     (not (and (subclass ?SUBCLASS ?CLASS)
               (and (not (equal ?SUBCLASS ?CLASS))
                    (instance ?ENTITY ?SUBCLASS)))))))))
*/
fof(a5825,axiom,! [CLASS,ENTITY] : (! [SUBCLASS] : ((s_instance(SUBCLASS, s_SetOrClass) => ((s_instance(ENTITY, s_Entity) & s_instance(CLASS, s_SetOrClass)) => (s_immediateInstance(ENTITY, CLASS) => (~ (s_subclass(SUBCLASS, CLASS) & ((~ (SUBCLASS = CLASS)) & s_instance(ENTITY, SUBCLASS)))))))))).

/*
(instance inverse BinaryPredicate)
*/
fof(a5826,axiom,s_instance(s_inverse_m, s_BinaryPredicate)).

/*
(instance inverse IrreflexiveRelation)
*/
fof(a5827,axiom,s_instance(s_inverse_m, s_IrreflexiveRelation)).

/*
(instance inverse IntransitiveRelation)
*/
fof(a5828,axiom,s_instance(s_inverse_m, s_IntransitiveRelation)).

/*
(instance inverse SymmetricRelation)
*/
fof(a5829,axiom,s_instance(s_inverse_m, s_SymmetricRelation)).

/*
(instance inverse PartialValuedRelation)
*/
fof(a5830,axiom,s_instance(s_inverse_m, s_PartialValuedRelation)).

/*
(instance subclass BinaryPredicate)
*/
fof(a5831,axiom,s_instance(s_subclass_m, s_BinaryPredicate)).

/*
(instance subclass PartialOrderingRelation)
*/
fof(a5832,axiom,s_instance(s_subclass_m, s_PartialOrderingRelation)).

/*
(forall (?Y ?X)
 (=> (and (instance ?X SetOrClass) (instance ?Y SetOrClass))
  (=> (subclass ?X ?Y)
   (and (instance ?X SetOrClass) (instance ?Y SetOrClass)))))
*/
fof(a5833,axiom,! [Y,X] : (((s_instance(X, s_SetOrClass) & s_instance(Y, s_SetOrClass)) => (s_subclass(X, Y) => (s_instance(X, s_SetOrClass) & s_instance(Y, s_SetOrClass)))))).

/*
(forall (?Z ?Y ?X)
 (=> (and (instance ?Y SetOrClass) (instance ?X SetOrClass))
  (=> (and (subclass ?X ?Y) (instance ?Z ?X)) (instance ?Z ?Y))))
*/
fof(a5834,axiom,! [Z,Y,X] : (((s_instance(Y, s_SetOrClass) & s_instance(X, s_SetOrClass)) => ((s_subclass(X, Y) & s_instance(Z, X)) => s_instance(Z, Y))))).

/*
(subrelation immediateSubclass subclass)
*/
fof(a5835,axiom,s_subrelation(s_immediateSubclass_m, s_subclass_m)).

/*
(instance immediateSubclass AsymmetricRelation)
*/
fof(a5836,axiom,s_instance(s_immediateSubclass_m, s_AsymmetricRelation)).

/*
(instance immediateSubclass IntransitiveRelation)
*/
fof(a5837,axiom,s_instance(s_immediateSubclass_m, s_IntransitiveRelation)).

/*
(forall (?CLASS2 ?CLASS1)
 (forall (?CLASS3)
  (=> (instance ?CLASS3 SetOrClass)
   (=>
    (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass))
    (=> (immediateSubclass ?CLASS1 ?CLASS2)
     (not (and (subclass ?CLASS3 ?CLASS2)
               (and (subclass ?CLASS1 ?CLASS3)
                    (and (not (equal ?CLASS2 ?CLASS3))
                         (not (equal ?CLASS1 ?CLASS3)))))))))))
*/
fof(a5838,axiom,! [CLASS2,CLASS1] : (! [CLASS3] : ((s_instance(CLASS3, s_SetOrClass) => ((s_instance(CLASS1, s_SetOrClass) & s_instance(CLASS2, s_SetOrClass)) => (s_immediateSubclass(CLASS1, CLASS2) => (~ (s_subclass(CLASS3, CLASS2) & (s_subclass(CLASS1, CLASS3) & ((~ (CLASS2 = CLASS3)) & (~ (CLASS1 = CLASS3)))))))))))).

/*
(instance subrelation BinaryPredicate)
*/
fof(a5839,axiom,s_instance(s_subrelation_m, s_BinaryPredicate)).

/*
(instance subrelation PartialOrderingRelation)
*/
fof(a5840,axiom,s_instance(s_subrelation_m, s_PartialOrderingRelation)).

/*
(forall (?NUMBER ?PRED2 ?PRED1)
 (=>
  (and (instance ?PRED1 Relation) (instance ?PRED2 Relation)
       (instance ?NUMBER PositiveInteger))
  (=> (and (subrelation ?PRED1 ?PRED2) (valence ?PRED1 ?NUMBER))
   (valence ?PRED2 ?NUMBER))))
*/
fof(a5841,axiom,! [NUMBER,PRED2,PRED1] : (((s_instance(PRED1, s_Relation) & s_instance(PRED2, s_Relation) & s_instance(NUMBER, s_PositiveInteger)) => ((s_subrelation(PRED1, PRED2) & s_valence(PRED1, NUMBER)) => s_valence(PRED2, NUMBER))))).

/*
(forall (?PRED1 ?PRED2 ?CLASS1 ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass)
       (instance ?PRED2 Relation) (instance ?PRED1 Relation))
  (=> (and (subrelation ?PRED1 ?PRED2) (domain ?PRED2 ?NUMBER ?CLASS1))
   (domain ?PRED1 ?NUMBER ?CLASS1))))
*/
fof(a5842,axiom,! [PRED1,PRED2,CLASS1,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS1, s_SetOrClass) & s_instance(PRED2, s_Relation) & s_instance(PRED1, s_Relation)) => ((s_subrelation(PRED1, PRED2) & s_domain(PRED2, NUMBER, CLASS1)) => s_domain(PRED1, NUMBER, CLASS1))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation partition partition)
       (and (instance partition Predicate)
            (and (instance partition Predicate)
                 (partition2 ?ROW0 ?ROW1))))
  (partition2 ?ROW0 ?ROW1)))
*/
fof(a5843,axiom,! [ROW1,ROW0] : (((s_subrelation(s_partition_m, s_partition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_partition2(ROW0, ROW1)))) => s_partition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition partition)
        (and (instance partition Predicate)
             (and (instance partition Predicate)
                  (partition3 ?ROW0 ?ROW1 ?ROW2))))
   (partition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5844,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_partition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2)))) => s_partition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation partition partition)
        (and (instance partition Predicate)
             (and (instance partition Predicate)
                  (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5845,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_partition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3)))) => s_partition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition partition)
        (and (instance partition Predicate)
             (and (instance partition Predicate)
                  (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5846,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_partition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation partition partition)
        (and (instance partition Predicate)
             (and (instance partition Predicate)
                  (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
   (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5847,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_partition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition partition)
        (and (instance partition Predicate)
             (and (instance partition Predicate)
                  (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                   ?ROW6))))
   (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5848,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_partition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveDecomposition partition)
       (and (instance exhaustiveDecomposition Predicate)
            (and (instance partition Predicate)
                 (exhaustiveDecomposition2 ?ROW0 ?ROW1))))
  (partition2 ?ROW0 ?ROW1)))
*/
fof(a5849,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveDecomposition_m, s_partition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1)))) => s_partition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition partition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance partition Predicate)
                  (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (partition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5850,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_partition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2)))) => s_partition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition partition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance partition Predicate)
                  (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5851,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_partition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_partition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition partition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance partition Predicate)
                  (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5852,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_partition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition partition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance partition Predicate)
                  (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5))))
   (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5853,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_partition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition partition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance partition Predicate)
                  (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5 ?ROW6))))
   (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5854,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_partition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation contraryAttribute partition)
        (and (instance contraryAttribute Predicate)
             (and (instance partition Predicate)
                  (contraryAttribute2 ?ROW0 ?ROW1))))
   (partition2 ?ROW0 ?ROW1))))
*/
fof(a5855,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_partition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1)))) => s_partition2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute partition)
        (and (instance contraryAttribute Predicate)
             (and (instance partition Predicate)
                  (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (partition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5856,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_partition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2)))) => s_partition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute partition)
        (and (instance contraryAttribute Predicate)
             (and (instance partition Predicate)
                  (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5857,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_partition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_partition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute partition)
        (and (instance contraryAttribute Predicate)
             (and (instance partition Predicate)
                  (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5858,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_partition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute partition)
        (and (instance contraryAttribute Predicate)
             (and (instance partition Predicate)
                  (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5859,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_partition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW6 Class) (instance ?ROW6 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute partition)
        (and (instance contraryAttribute Predicate)
             (and (instance partition Predicate)
                  (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5860,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_partition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation disjointDecomposition partition)
       (and (instance disjointDecomposition Predicate)
            (and (instance partition Predicate)
                 (disjointDecomposition2 ?ROW0 ?ROW1))))
  (partition2 ?ROW0 ?ROW1)))
*/
fof(a5861,axiom,! [ROW1,ROW0] : (((s_subrelation(s_disjointDecomposition_m, s_partition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1)))) => s_partition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition partition)
        (and (instance disjointDecomposition Predicate)
             (and (instance partition Predicate)
                  (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (partition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5862,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_partition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2)))) => s_partition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition partition)
        (and (instance disjointDecomposition Predicate)
             (and (instance partition Predicate)
                  (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5863,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_partition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_partition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition partition)
        (and (instance disjointDecomposition Predicate)
             (and (instance partition Predicate)
                  (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5864,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_partition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition partition)
        (and (instance disjointDecomposition Predicate)
             (and (instance partition Predicate)
                  (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5865,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_partition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition partition)
        (and (instance disjointDecomposition Predicate)
             (and (instance partition Predicate)
                  (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5866,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_partition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveAttribute partition)
       (and (instance exhaustiveAttribute Predicate)
            (and (instance partition Predicate)
                 (exhaustiveAttribute2 ?ROW0 ?ROW1))))
  (partition2 ?ROW0 ?ROW1)))
*/
fof(a5867,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveAttribute_m, s_partition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1)))) => s_partition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute partition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance partition Predicate)
                  (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (partition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5868,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_partition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2)))) => s_partition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute partition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance partition Predicate)
                  (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5869,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_partition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_partition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute partition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance partition Predicate)
                  (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5870,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_partition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute partition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance partition Predicate)
                  (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5871,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_partition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW6 Class) (instance ?ROW6 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute partition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance partition Predicate)
                  (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5872,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_partition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation partition exhaustiveDecomposition)
       (and (instance partition Predicate)
            (and (instance exhaustiveDecomposition Predicate)
                 (partition2 ?ROW0 ?ROW1))))
  (exhaustiveDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5873,axiom,! [ROW1,ROW0] : (((s_subrelation(s_partition_m, s_exhaustiveDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_partition2(ROW0, ROW1)))) => s_exhaustiveDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition exhaustiveDecomposition)
        (and (instance partition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (partition3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5874,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_exhaustiveDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2)))) => s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation partition exhaustiveDecomposition)
        (and (instance partition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5875,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_exhaustiveDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition exhaustiveDecomposition)
        (and (instance partition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5876,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_exhaustiveDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation partition exhaustiveDecomposition)
        (and (instance partition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
   (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5877,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_exhaustiveDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition exhaustiveDecomposition)
        (and (instance partition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                   ?ROW6))))
   (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
    ?ROW6))))
*/
fof(a5878,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_exhaustiveDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveDecomposition exhaustiveDecomposition)
       (and (instance exhaustiveDecomposition Predicate)
            (and (instance exhaustiveDecomposition Predicate)
                 (exhaustiveDecomposition2 ?ROW0 ?ROW1))))
  (exhaustiveDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5879,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1)))) => s_exhaustiveDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5880,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2)))) => s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5881,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5882,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5))))
   (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5883,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5 ?ROW6))))
   (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
    ?ROW6))))
*/
fof(a5884,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (contraryAttribute2 ?ROW0 ?ROW1))))
   (exhaustiveDecomposition2 ?ROW0 ?ROW1))))
*/
fof(a5885,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1)))) => s_exhaustiveDecomposition2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute exhaustiveDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5886,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2)))) => s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute exhaustiveDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5887,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute exhaustiveDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5888,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute exhaustiveDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5889,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW6 Class) (instance ?ROW6 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute exhaustiveDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
    ?ROW6))))
*/
fof(a5890,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation disjointDecomposition exhaustiveDecomposition)
       (and (instance disjointDecomposition Predicate)
            (and (instance exhaustiveDecomposition Predicate)
                 (disjointDecomposition2 ?ROW0 ?ROW1))))
  (exhaustiveDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5891,axiom,! [ROW1,ROW0] : (((s_subrelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1)))) => s_exhaustiveDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition exhaustiveDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5892,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2)))) => s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition exhaustiveDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5893,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition exhaustiveDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5894,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition exhaustiveDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5895,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition exhaustiveDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
    ?ROW6))))
*/
fof(a5896,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveAttribute exhaustiveDecomposition)
       (and (instance exhaustiveAttribute Predicate)
            (and (instance exhaustiveDecomposition Predicate)
                 (exhaustiveAttribute2 ?ROW0 ?ROW1))))
  (exhaustiveDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5897,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1)))) => s_exhaustiveDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5898,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2)))) => s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5899,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5900,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5901,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW6 Class) (instance ?ROW6 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveDecomposition Predicate)
                  (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
    ?ROW6))))
*/
fof(a5902,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation partition contraryAttribute)
        (and (instance partition Predicate)
             (and (instance contraryAttribute Predicate)
                  (partition2 ?ROW0 ?ROW1))))
   (contraryAttribute2 ?ROW0 ?ROW1))))
*/
fof(a5903,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_partition_m, s_contraryAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_partition2(ROW0, ROW1)))) => s_contraryAttribute2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation partition contraryAttribute)
        (and (instance partition Predicate)
             (and (instance contraryAttribute Predicate)
                  (partition3 ?ROW0 ?ROW1 ?ROW2))))
   (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5904,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_contraryAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2)))) => s_contraryAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation partition contraryAttribute)
        (and (instance partition Predicate)
             (and (instance contraryAttribute Predicate)
                  (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5905,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_contraryAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3)))) => s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation partition contraryAttribute)
        (and (instance partition Predicate)
             (and (instance contraryAttribute Predicate)
                  (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5906,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_contraryAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation partition contraryAttribute)
        (and (instance partition Predicate)
             (and (instance contraryAttribute Predicate)
                  (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
   (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5907,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_contraryAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW6 Attribute) (instance ?ROW6 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation partition contraryAttribute)
        (and (instance partition Predicate)
             (and (instance contraryAttribute Predicate)
                  (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                   ?ROW6))))
   (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5908,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_contraryAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition contraryAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveDecomposition2 ?ROW0 ?ROW1))))
   (contraryAttribute2 ?ROW0 ?ROW1))))
*/
fof(a5909,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1)))) => s_contraryAttribute2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition contraryAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5910,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2)))) => s_contraryAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition contraryAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5911,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition contraryAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5912,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition contraryAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5))))
   (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5913,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW6 Attribute) (instance ?ROW6 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition contraryAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5 ?ROW6))))
   (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5914,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW0)
 (=>
  (and (subrelation contraryAttribute contraryAttribute)
       (and (instance contraryAttribute Predicate)
            (and (instance contraryAttribute Predicate)
                 (contraryAttribute1 ?ROW0))))
  (contraryAttribute1 ?ROW0)))
*/
fof(a5915,axiom,! [ROW0] : (((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute1(ROW0)))) => s_contraryAttribute1(ROW0)))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation contraryAttribute contraryAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (contraryAttribute2 ?ROW0 ?ROW1))))
   (contraryAttribute2 ?ROW0 ?ROW1))))
*/
fof(a5916,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1)))) => s_contraryAttribute2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute contraryAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5917,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2)))) => s_contraryAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute contraryAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5918,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute contraryAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5919,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute contraryAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5920,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute contraryAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5921,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_contraryAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation disjointDecomposition contraryAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (disjointDecomposition2 ?ROW0 ?ROW1))))
   (contraryAttribute2 ?ROW0 ?ROW1))))
*/
fof(a5922,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_contraryAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1)))) => s_contraryAttribute2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition contraryAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5923,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_contraryAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2)))) => s_contraryAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition contraryAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5924,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_contraryAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition contraryAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5925,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_contraryAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition contraryAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5926,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_contraryAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW6 Attribute) (instance ?ROW6 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition contraryAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance contraryAttribute Predicate)
                  (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5927,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_contraryAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute contraryAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveAttribute2 ?ROW0 ?ROW1))))
   (contraryAttribute2 ?ROW0 ?ROW1))))
*/
fof(a5928,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1)))) => s_contraryAttribute2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute contraryAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5929,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2)))) => s_contraryAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute)
       (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute contraryAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5930,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute contraryAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5931,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute)
       (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute contraryAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5932,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute contraryAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance contraryAttribute Predicate)
                  (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5933,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation partition disjointDecomposition)
       (and (instance partition Predicate)
            (and (instance disjointDecomposition Predicate)
                 (partition2 ?ROW0 ?ROW1))))
  (disjointDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5934,axiom,! [ROW1,ROW0] : (((s_subrelation(s_partition_m, s_disjointDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_partition2(ROW0, ROW1)))) => s_disjointDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition disjointDecomposition)
        (and (instance partition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (partition3 ?ROW0 ?ROW1 ?ROW2))))
   (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5935,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_disjointDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2)))) => s_disjointDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation partition disjointDecomposition)
        (and (instance partition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5936,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_disjointDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3)))) => s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition disjointDecomposition)
        (and (instance partition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5937,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_disjointDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation partition disjointDecomposition)
        (and (instance partition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
   (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5938,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_disjointDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation partition disjointDecomposition)
        (and (instance partition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                   ?ROW6))))
   (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5939,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_partition_m, s_disjointDecomposition_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveDecomposition disjointDecomposition)
       (and (instance exhaustiveDecomposition Predicate)
            (and (instance disjointDecomposition Predicate)
                 (exhaustiveDecomposition2 ?ROW0 ?ROW1))))
  (disjointDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5940,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1)))) => s_disjointDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition disjointDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5941,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2)))) => s_disjointDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition disjointDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5942,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition disjointDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5943,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition disjointDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5))))
   (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5944,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveDecomposition disjointDecomposition)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5 ?ROW6))))
   (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5945,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation contraryAttribute disjointDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (contraryAttribute2 ?ROW0 ?ROW1))))
   (disjointDecomposition2 ?ROW0 ?ROW1))))
*/
fof(a5946,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_disjointDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1)))) => s_disjointDecomposition2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute disjointDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5947,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_disjointDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2)))) => s_disjointDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute disjointDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5948,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_disjointDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute disjointDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5949,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_disjointDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute disjointDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5950,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_disjointDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW6 Class) (instance ?ROW6 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation contraryAttribute disjointDecomposition)
        (and (instance contraryAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5951,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_contraryAttribute_m, s_disjointDecomposition_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation disjointDecomposition disjointDecomposition)
       (and (instance disjointDecomposition Predicate)
            (and (instance disjointDecomposition Predicate)
                 (disjointDecomposition2 ?ROW0 ?ROW1))))
  (disjointDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5952,axiom,! [ROW1,ROW0] : (((s_subrelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1)))) => s_disjointDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition disjointDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5953,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2)))) => s_disjointDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition disjointDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5954,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition disjointDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5955,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition disjointDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5956,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (=>
   (and (subrelation disjointDecomposition disjointDecomposition)
        (and (instance disjointDecomposition Predicate)
             (and (instance disjointDecomposition Predicate)
                  (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5957,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveAttribute disjointDecomposition)
       (and (instance exhaustiveAttribute Predicate)
            (and (instance disjointDecomposition Predicate)
                 (exhaustiveAttribute2 ?ROW0 ?ROW1))))
  (disjointDecomposition2 ?ROW0 ?ROW1)))
*/
fof(a5958,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1)))) => s_disjointDecomposition2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute disjointDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5959,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2)))) => s_disjointDecomposition3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute disjointDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5960,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute disjointDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5961,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute disjointDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5962,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW5 Attribute)
       (instance ?ROW6 Class) (instance ?ROW6 Attribute)
       (instance ?ROW4 Class) (instance ?ROW4 Attribute)
       (instance ?ROW3 Class) (instance ?ROW3 Attribute)
       (instance ?ROW2 Class) (instance ?ROW2 Attribute)
       (instance ?ROW1 Class) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?ROW0 Class))
  (=>
   (and (subrelation exhaustiveAttribute disjointDecomposition)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance disjointDecomposition Predicate)
                  (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5963,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(ROW0, s_Class)) => ((s_subrelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation partition exhaustiveAttribute)
       (and (instance partition Predicate)
            (and (instance exhaustiveAttribute Predicate)
                 (partition2 ?ROW0 ?ROW1))))
  (exhaustiveAttribute2 ?ROW0 ?ROW1)))
*/
fof(a5964,axiom,! [ROW1,ROW0] : (((s_subrelation(s_partition_m, s_exhaustiveAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_partition2(ROW0, ROW1)))) => s_exhaustiveAttribute2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation partition exhaustiveAttribute)
        (and (instance partition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (partition3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5965,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_exhaustiveAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2)))) => s_exhaustiveAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation partition exhaustiveAttribute)
        (and (instance partition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5966,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_exhaustiveAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation partition exhaustiveAttribute)
        (and (instance partition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5967,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_exhaustiveAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation partition exhaustiveAttribute)
        (and (instance partition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
   (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5968,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_exhaustiveAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW6 Attribute) (instance ?ROW6 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation partition exhaustiveAttribute)
        (and (instance partition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                   ?ROW6))))
   (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5969,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_partition_m, s_exhaustiveAttribute_m) & (s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveDecomposition exhaustiveAttribute)
       (and (instance exhaustiveDecomposition Predicate)
            (and (instance exhaustiveAttribute Predicate)
                 (exhaustiveDecomposition2 ?ROW0 ?ROW1))))
  (exhaustiveAttribute2 ?ROW0 ?ROW1)))
*/
fof(a5970,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1)))) => s_exhaustiveAttribute2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5971,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2)))) => s_exhaustiveAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5972,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5973,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5))))
   (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5974,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW6 Attribute) (instance ?ROW6 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveDecomposition exhaustiveAttribute)
        (and (instance exhaustiveDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4 ?ROW5 ?ROW6))))
   (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5975,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=> (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (contraryAttribute2 ?ROW0 ?ROW1))))
   (exhaustiveAttribute2 ?ROW0 ?ROW1))))
*/
fof(a5976,axiom,! [ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1)))) => s_exhaustiveAttribute2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5977,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2)))) => s_exhaustiveAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5978,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
   (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5979,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5980,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation contraryAttribute exhaustiveAttribute)
        (and (instance contraryAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5981,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation disjointDecomposition exhaustiveAttribute)
       (and (instance disjointDecomposition Predicate)
            (and (instance exhaustiveAttribute Predicate)
                 (disjointDecomposition2 ?ROW0 ?ROW1))))
  (exhaustiveAttribute2 ?ROW0 ?ROW1)))
*/
fof(a5982,axiom,! [ROW1,ROW0] : (((s_subrelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1)))) => s_exhaustiveAttribute2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition exhaustiveAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5983,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2)))) => s_exhaustiveAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition exhaustiveAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5984,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition exhaustiveAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5985,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition exhaustiveAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5986,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW5 Class)
       (instance ?ROW6 Attribute) (instance ?ROW6 Class)
       (instance ?ROW4 Attribute) (instance ?ROW4 Class)
       (instance ?ROW3 Attribute) (instance ?ROW3 Class)
       (instance ?ROW2 Attribute) (instance ?ROW2 Class)
       (instance ?ROW1 Attribute) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation disjointDecomposition exhaustiveAttribute)
        (and (instance disjointDecomposition Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5987,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW5, s_Class) & s_instance(ROW6, s_Attribute) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Attribute) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Attribute) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Attribute) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Attribute) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?ROW1 ?ROW0)
 (=>
  (and (subrelation exhaustiveAttribute exhaustiveAttribute)
       (and (instance exhaustiveAttribute Predicate)
            (and (instance exhaustiveAttribute Predicate)
                 (exhaustiveAttribute2 ?ROW0 ?ROW1))))
  (exhaustiveAttribute2 ?ROW0 ?ROW1)))
*/
fof(a5988,axiom,! [ROW1,ROW0] : (((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1)))) => s_exhaustiveAttribute2(ROW0, ROW1)))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
   (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2))))
*/
fof(a5989,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2)))) => s_exhaustiveAttribute3(ROW0, ROW1, ROW2))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
   (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))))
*/
fof(a5990,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3)))) => s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3
                   ?ROW4))))
   (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))))
*/
fof(a5991,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4)))) => s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5))))
   (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))))
*/
fof(a5992,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))) => s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute))
  (=>
   (and (subrelation exhaustiveAttribute exhaustiveAttribute)
        (and (instance exhaustiveAttribute Predicate)
             (and (instance exhaustiveAttribute Predicate)
                  (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                   ?ROW5 ?ROW6))))
   (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))))
*/
fof(a5993,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => ((s_subrelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))) => s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))))).

/*
(forall (?CLASS ?PRED2 ?PRED1)
 (=> (and (instance ?CLASS SetOrClass) (instance ?PRED1 Relation))
  (=>
   (and (subrelation ?PRED1 ?PRED2)
        (and (instance ?PRED2 ?CLASS)
             (subclass ?CLASS InheritableRelation)))
   (instance ?PRED1 ?CLASS))))
*/
fof(a5994,axiom,! [CLASS,PRED2,PRED1] : (((s_instance(CLASS, s_SetOrClass) & s_instance(PRED1, s_Relation)) => ((s_subrelation(PRED1, PRED2) & (s_instance(PRED2, CLASS) & s_subclass(CLASS, s_InheritableRelation))) => s_instance(PRED1, CLASS))))).

/*
(instance domain TernaryPredicate)
*/
fof(a5995,axiom,s_instance(s_domain_m, s_TernaryPredicate)).

/*
(forall (?CLASS2 ?REL ?CLASS1 ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass)
       (instance ?REL Relation) (instance ?CLASS2 SetOrClass))
  (=> (and (domain ?REL ?NUMBER ?CLASS1) (domain ?REL ?NUMBER ?CLASS2))
   (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))
*/
fof(a5996,axiom,! [CLASS2,REL,CLASS1,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS1, s_SetOrClass) & s_instance(REL, s_Relation) & s_instance(CLASS2, s_SetOrClass)) => ((s_domain(REL, NUMBER, CLASS1) & s_domain(REL, NUMBER, CLASS2)) => (s_subclass(CLASS1, CLASS2) | s_subclass(CLASS2, CLASS1)))))).

/*
(instance domainSubclass TernaryPredicate)
*/
fof(a5997,axiom,s_instance(s_domainSubclass_m, s_TernaryPredicate)).

/*
(forall (?REL1 ?REL2 ?CLASS1 ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass)
       (instance ?REL2 Relation) (instance ?REL1 Relation))
  (=>
   (and (subrelation ?REL1 ?REL2)
        (domainSubclass ?REL2 ?NUMBER ?CLASS1))
   (domainSubclass ?REL1 ?NUMBER ?CLASS1))))
*/
fof(a5998,axiom,! [REL1,REL2,CLASS1,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS1, s_SetOrClass) & s_instance(REL2, s_Relation) & s_instance(REL1, s_Relation)) => ((s_subrelation(REL1, REL2) & s_domainSubclass(REL2, NUMBER, CLASS1)) => s_domainSubclass(REL1, NUMBER, CLASS1))))).

/*
(forall (?CLASS2 ?REL ?CLASS1 ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass)
       (instance ?REL Relation) (instance ?CLASS2 SetOrClass))
  (=>
   (and (domainSubclass ?REL ?NUMBER ?CLASS1)
        (domainSubclass ?REL ?NUMBER ?CLASS2))
   (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))
*/
fof(a5999,axiom,! [CLASS2,REL,CLASS1,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS1, s_SetOrClass) & s_instance(REL, s_Relation) & s_instance(CLASS2, s_SetOrClass)) => ((s_domainSubclass(REL, NUMBER, CLASS1) & s_domainSubclass(REL, NUMBER, CLASS2)) => (s_subclass(CLASS1, CLASS2) | s_subclass(CLASS2, CLASS1)))))).

/*
(instance equal BinaryPredicate)
*/
fof(a6000,axiom,s_instance(s_equal_m, s_BinaryPredicate)).

/*
(instance equal EquivalenceRelation)
*/
fof(a6001,axiom,s_instance(s_equal_m, s_EquivalenceRelation)).

/*
(instance equal RelationExtendedToQuantities)
*/
fof(a6002,axiom,s_instance(s_equal_m, s_RelationExtendedToQuantities)).

/*
(forall (?THING2 ?THING1)
 (forall (?ATTR)
  (=> (instance ?ATTR Attribute)
   (=> (and (instance ?THING1 Entity) (instance ?THING2 Entity))
    (=> (equal ?THING1 ?THING2)
     (<=> (property ?THING1 ?ATTR) (property ?THING2 ?ATTR)))))))
*/
fof(a6003,axiom,! [THING2,THING1] : (! [ATTR] : ((s_instance(ATTR, s_Attribute) => ((s_instance(THING1, s_Entity) & s_instance(THING2, s_Entity)) => ((THING1 = THING2) => (s_property(THING1, ATTR) <=> s_property(THING2, ATTR)))))))).

/*
(forall (?ATTR2 ?ATTR1)
 (forall (?THING)
  (=> (instance ?THING Entity)
   (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute))
    (=> (equal ?ATTR1 ?ATTR2)
     (<=> (property ?THING ?ATTR1) (property ?THING ?ATTR2)))))))
*/
fof(a6004,axiom,! [ATTR2,ATTR1] : (! [THING] : ((s_instance(THING, s_Entity) => ((s_instance(ATTR1, s_Attribute) & s_instance(ATTR2, s_Attribute)) => ((ATTR1 = ATTR2) => (s_property(THING, ATTR1) <=> s_property(THING, ATTR2)))))))).

/*
(forall (?THING2 ?THING1)
 (forall (?CLASS)
  (=> (instance ?CLASS SetOrClass)
   (=> (and (instance ?THING1 Entity) (instance ?THING2 Entity))
    (=> (equal ?THING1 ?THING2)
     (<=> (instance ?THING1 ?CLASS) (instance ?THING2 ?CLASS)))))))
*/
fof(a6005,axiom,! [THING2,THING1] : (! [CLASS] : ((s_instance(CLASS, s_SetOrClass) => ((s_instance(THING1, s_Entity) & s_instance(THING2, s_Entity)) => ((THING1 = THING2) => (s_instance(THING1, CLASS) <=> s_instance(THING2, CLASS)))))))).

/*
(forall (?CLASS2 ?CLASS1)
 (forall (?THING)
  (=> (instance ?THING Entity)
   (=>
    (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass))
    (=> (equal ?CLASS1 ?CLASS2)
     (<=> (instance ?THING ?CLASS1) (instance ?THING ?CLASS2)))))))
*/
fof(a6006,axiom,! [CLASS2,CLASS1] : (! [THING] : ((s_instance(THING, s_Entity) => ((s_instance(CLASS1, s_SetOrClass) & s_instance(CLASS2, s_SetOrClass)) => ((CLASS1 = CLASS2) => (s_instance(THING, CLASS1) <=> s_instance(THING, CLASS2)))))))).

/*
(forall (?LIST2 ?ROW20 ?ROW10 ?LIST1)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6007,axiom,! [LIST2,ROW20,ROW10,LIST1] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall (?LIST2 ?ROW20 ?LIST1 ?ROW11 ?ROW10)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6008,axiom,! [LIST2,ROW20,LIST1,ROW11,ROW10] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall (?LIST2 ?ROW20 ?LIST1 ?ROW10 ?ROW12 ?ROW11)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6009,axiom,! [LIST2,ROW20,LIST1,ROW10,ROW12,ROW11] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall (?LIST2 ?ROW20 ?LIST1 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6010,axiom,! [LIST2,ROW20,LIST1,ROW10,ROW11,ROW13,ROW12] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall (?LIST2 ?ROW20 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW14 ?ROW13)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6011,axiom,! [LIST2,ROW20,LIST1,ROW10,ROW11,ROW12,ROW14,ROW13] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall
 (?LIST2 ?ROW20 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15 ?ROW14)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6012,axiom,! [LIST2,ROW20,LIST1,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall
 (?LIST2 ?ROW20 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16
  ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2 (ListFn1 ?ROW20)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn (ListFn1 ?ROW20) ?NUMBER))))))))
*/
fof(a6013,axiom,! [LIST2,ROW20,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn1(ROW20))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn1(ROW20), NUMBER))))))))).

/*
(forall (?LIST1 ?ROW10 ?LIST2 ?ROW21 ?ROW20)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6014,axiom,! [LIST1,ROW10,LIST2,ROW21,ROW20] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall (?ROW20 ?ROW21 ?LIST2 ?LIST1 ?ROW11 ?ROW10)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6015,axiom,! [ROW20,ROW21,LIST2,LIST1,ROW11,ROW10] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall (?ROW20 ?ROW21 ?LIST2 ?LIST1 ?ROW10 ?ROW12 ?ROW11)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6016,axiom,! [ROW20,ROW21,LIST2,LIST1,ROW10,ROW12,ROW11] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall (?ROW20 ?ROW21 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6017,axiom,! [ROW20,ROW21,LIST2,LIST1,ROW10,ROW11,ROW13,ROW12] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall
 (?ROW20 ?ROW21 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW14 ?ROW13)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6018,axiom,! [ROW20,ROW21,LIST2,LIST1,ROW10,ROW11,ROW12,ROW14,ROW13] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall
 (?ROW20 ?ROW21 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15
  ?ROW14)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6019,axiom,! [ROW20,ROW21,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall
 (?ROW20 ?ROW21 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16
  ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2 (ListFn2 ?ROW20 ?ROW21)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn (ListFn2 ?ROW20 ?ROW21) ?NUMBER))))))))
*/
fof(a6020,axiom,! [ROW20,ROW21,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn2(ROW20, ROW21))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn2(ROW20, ROW21), NUMBER))))))))).

/*
(forall (?LIST1 ?ROW10 ?LIST2 ?ROW20 ?ROW22 ?ROW21)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6021,axiom,! [LIST1,ROW10,LIST2,ROW20,ROW22,ROW21] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall (?ROW10 ?ROW11 ?LIST1 ?LIST2 ?ROW20 ?ROW22 ?ROW21)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6022,axiom,! [ROW10,ROW11,LIST1,LIST2,ROW20,ROW22,ROW21] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall (?ROW21 ?ROW22 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW12 ?ROW11)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6023,axiom,! [ROW21,ROW22,ROW20,LIST2,LIST1,ROW10,ROW12,ROW11] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall
 (?ROW21 ?ROW22 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6024,axiom,! [ROW21,ROW22,ROW20,LIST2,LIST1,ROW10,ROW11,ROW13,ROW12] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall
 (?ROW21 ?ROW22 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW14
  ?ROW13)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6025,axiom,! [ROW21,ROW22,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW14,ROW13] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall
 (?ROW21 ?ROW22 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15
  ?ROW14)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6026,axiom,! [ROW21,ROW22,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall
 (?ROW21 ?ROW22 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14
  ?ROW16 ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2 (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn (ListFn3 ?ROW20 ?ROW21 ?ROW22) ?NUMBER))))))))
*/
fof(a6027,axiom,! [ROW21,ROW22,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn3(ROW20, ROW21, ROW22))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn3(ROW20, ROW21, ROW22), NUMBER))))))))).

/*
(forall (?LIST1 ?ROW10 ?LIST2 ?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6028,axiom,! [LIST1,ROW10,LIST2,ROW20,ROW21,ROW23,ROW22] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall (?ROW10 ?ROW11 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6029,axiom,! [ROW10,ROW11,LIST1,LIST2,ROW20,ROW21,ROW23,ROW22] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall
 (?ROW11 ?ROW12 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6030,axiom,! [ROW11,ROW12,ROW10,LIST1,LIST2,ROW20,ROW21,ROW23,ROW22] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW13
  ?ROW12)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6031,axiom,! [ROW22,ROW23,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW13,ROW12] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW14
  ?ROW13)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6032,axiom,! [ROW22,ROW23,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW14,ROW13] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13
  ?ROW15 ?ROW14)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6033,axiom,! [ROW22,ROW23,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12 ?ROW13
  ?ROW14 ?ROW16 ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2 (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)
              ?NUMBER))))))))
*/
fof(a6034,axiom,! [ROW22,ROW23,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn4(ROW20, ROW21, ROW22, ROW23), NUMBER))))))))).

/*
(forall (?LIST1 ?ROW10 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6035,axiom,! [LIST1,ROW10,LIST2,ROW20,ROW21,ROW22,ROW24,ROW23] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?ROW10 ?ROW11 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6036,axiom,! [ROW10,ROW11,LIST1,LIST2,ROW20,ROW21,ROW22,ROW24,ROW23] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?ROW11 ?ROW12 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW24
  ?ROW23)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6037,axiom,! [ROW11,ROW12,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW24,ROW23] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?ROW12 ?ROW13 ?ROW11 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW24
  ?ROW23)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6038,axiom,! [ROW12,ROW13,ROW11,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW24,ROW23] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?ROW23 ?ROW24 ?ROW22 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12
  ?ROW14 ?ROW13)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6039,axiom,! [ROW23,ROW24,ROW22,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW14,ROW13] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?ROW23 ?ROW24 ?ROW22 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12
  ?ROW13 ?ROW15 ?ROW14)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6040,axiom,! [ROW23,ROW24,ROW22,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?ROW23 ?ROW24 ?ROW22 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11 ?ROW12
  ?ROW13 ?ROW14 ?ROW16 ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2 (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)
              ?NUMBER))))))))
*/
fof(a6041,axiom,! [ROW23,ROW24,ROW22,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24), NUMBER))))))))).

/*
(forall
 (?LIST1 ?ROW10 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6042,axiom,! [LIST1,ROW10,LIST2,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?ROW10 ?ROW11 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25
  ?ROW24)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6043,axiom,! [ROW10,ROW11,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?ROW11 ?ROW12 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25
  ?ROW24)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6044,axiom,! [ROW11,ROW12,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?ROW12 ?ROW13 ?ROW11 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23
  ?ROW25 ?ROW24)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6045,axiom,! [ROW12,ROW13,ROW11,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?ROW13 ?ROW14 ?ROW12 ?ROW11 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22
  ?ROW23 ?ROW25 ?ROW24)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6046,axiom,! [ROW13,ROW14,ROW12,ROW11,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?ROW24 ?ROW25 ?ROW23 ?ROW22 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11
  ?ROW12 ?ROW13 ?ROW15 ?ROW14)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6047,axiom,! [ROW24,ROW25,ROW23,ROW22,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?ROW24 ?ROW25 ?ROW23 ?ROW22 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10 ?ROW11
  ?ROW12 ?ROW13 ?ROW14 ?ROW16 ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2
                  (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn
              (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)
              ?NUMBER))))))))
*/
fof(a6048,axiom,! [ROW24,ROW25,ROW23,ROW22,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25), NUMBER))))))))).

/*
(forall
 (?LIST1 ?ROW10 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26
  ?ROW25)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn1 ?ROW10))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn (ListFn1 ?ROW10) ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6049,axiom,! [LIST1,ROW10,LIST2,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn1(ROW10)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn1(ROW10), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(forall
 (?ROW10 ?ROW11 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26
  ?ROW25)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn2 ?ROW10 ?ROW11))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn (ListFn2 ?ROW10 ?ROW11) ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6050,axiom,! [ROW10,ROW11,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn2(ROW10, ROW11)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn2(ROW10, ROW11), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(forall
 (?ROW11 ?ROW12 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
  ?ROW26 ?ROW25)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn3 ?ROW10 ?ROW11 ?ROW12))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn (ListFn3 ?ROW10 ?ROW11 ?ROW12) ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6051,axiom,! [ROW11,ROW12,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn3(ROW10, ROW11, ROW12)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn3(ROW10, ROW11, ROW12), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(forall
 (?ROW12 ?ROW13 ?ROW11 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22 ?ROW23
  ?ROW24 ?ROW26 ?ROW25)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
              ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6052,axiom,! [ROW12,ROW13,ROW11,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn4(ROW10, ROW11, ROW12, ROW13)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn4(ROW10, ROW11, ROW12, ROW13), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(forall
 (?ROW13 ?ROW14 ?ROW12 ?ROW11 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21 ?ROW22
  ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1 (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
              ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6053,axiom,! [ROW13,ROW14,ROW12,ROW11,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(forall
 (?ROW14 ?ROW15 ?ROW13 ?ROW12 ?ROW11 ?ROW10 ?LIST1 ?LIST2 ?ROW20 ?ROW21
  ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST2 Entity) (instance ?LIST1 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn
              (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
              ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6054,axiom,! [ROW14,ROW15,ROW13,ROW12,ROW11,ROW10,LIST1,LIST2,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST2, s_Entity) & s_instance(LIST1, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(forall
 (?ROW25 ?ROW26 ?ROW24 ?ROW23 ?ROW22 ?ROW21 ?ROW20 ?LIST2 ?LIST1 ?ROW10
  ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16 ?ROW15)
 (forall (?NUMBER)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (instance ?LIST1 Entity) (instance ?LIST2 Entity))
    (=> (equal ?LIST1 ?LIST2)
     (=>
      (and (equal ?LIST1
                  (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
                   ?ROW16))
           (equal ?LIST2
                  (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
                   ?ROW26)))
      (equal (ListOrderFn
              (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
               ?ROW16)
              ?NUMBER)
             (ListOrderFn
              (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
               ?ROW26)
              ?NUMBER))))))))
*/
fof(a6055,axiom,! [ROW25,ROW26,ROW24,ROW23,ROW22,ROW21,ROW20,LIST2,LIST1,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (! [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_instance(LIST1, s_Entity) & s_instance(LIST2, s_Entity)) => ((LIST1 = LIST2) => (((LIST1 = s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16)) & (LIST2 = s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => (s_ListOrderFn(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), NUMBER) = s_ListOrderFn(s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26), NUMBER))))))))).

/*
(instance range BinaryPredicate)
*/
fof(a6056,axiom,s_instance(s_range_m, s_BinaryPredicate)).

/*
(instance range AsymmetricRelation)
*/
fof(a6057,axiom,s_instance(s_range_m, s_AsymmetricRelation)).

/*
(forall (?CLASS ?VALUE ?ROW0 ?FUNCTION)
 (=>
  (and (instance ?FUNCTION Function) (instance ?ROW0 Function)
       (instance ?VALUE Entity) (instance ?CLASS SetOrClass))
  (=>
   (and (range ?FUNCTION ?CLASS)
        (equal (AssignmentFn2 ?FUNCTION ?ROW0) ?VALUE))
   (instance ?VALUE ?CLASS))))
*/
fof(a6058,axiom,! [CLASS,VALUE,ROW0,FUNCTION] : (((s_instance(FUNCTION, s_Function) & s_instance(ROW0, s_Function) & s_instance(VALUE, s_Entity) & s_instance(CLASS, s_SetOrClass)) => ((s_range(FUNCTION, CLASS) & (s_AssignmentFn2(FUNCTION, ROW0) = VALUE)) => s_instance(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Function) (instance ?ROW1 Function)
       (instance ?FUNCTION Function) (instance ?VALUE Entity)
       (instance ?CLASS SetOrClass))
  (=>
   (and (range ?FUNCTION ?CLASS)
        (equal (AssignmentFn3 ?FUNCTION ?ROW0 ?ROW1) ?VALUE))
   (instance ?VALUE ?CLASS))))
*/
fof(a6059,axiom,! [CLASS,VALUE,FUNCTION,ROW1,ROW0] : (((s_instance(ROW0, s_Function) & s_instance(ROW1, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_Entity) & s_instance(CLASS, s_SetOrClass)) => ((s_range(FUNCTION, CLASS) & (s_AssignmentFn3(FUNCTION, ROW0, ROW1) = VALUE)) => s_instance(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Function) (instance ?ROW2 Function)
       (instance ?ROW0 Function) (instance ?FUNCTION Function)
       (instance ?VALUE Entity) (instance ?CLASS SetOrClass))
  (=>
   (and (range ?FUNCTION ?CLASS)
        (equal (AssignmentFn4 ?FUNCTION ?ROW0 ?ROW1 ?ROW2) ?VALUE))
   (instance ?VALUE ?CLASS))))
*/
fof(a6060,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Function) & s_instance(ROW2, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_Entity) & s_instance(CLASS, s_SetOrClass)) => ((s_range(FUNCTION, CLASS) & (s_AssignmentFn4(FUNCTION, ROW0, ROW1, ROW2) = VALUE)) => s_instance(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Function) (instance ?ROW3 Function)
       (instance ?ROW1 Function) (instance ?ROW0 Function)
       (instance ?FUNCTION Function) (instance ?VALUE Entity)
       (instance ?CLASS SetOrClass))
  (=>
   (and (range ?FUNCTION ?CLASS)
        (equal (AssignmentFn5 ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3)
               ?VALUE))
   (instance ?VALUE ?CLASS))))
*/
fof(a6061,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Function) & s_instance(ROW3, s_Function) & s_instance(ROW1, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_Entity) & s_instance(CLASS, s_SetOrClass)) => ((s_range(FUNCTION, CLASS) & (s_AssignmentFn5(FUNCTION, ROW0, ROW1, ROW2, ROW3) = VALUE)) => s_instance(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Function) (instance ?ROW4 Function)
       (instance ?ROW2 Function) (instance ?ROW1 Function)
       (instance ?ROW0 Function) (instance ?FUNCTION Function)
       (instance ?VALUE Entity) (instance ?CLASS SetOrClass))
  (=>
   (and (range ?FUNCTION ?CLASS)
        (equal (AssignmentFn6 ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
               ?VALUE))
   (instance ?VALUE ?CLASS))))
*/
fof(a6062,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Function) & s_instance(ROW4, s_Function) & s_instance(ROW2, s_Function) & s_instance(ROW1, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_Entity) & s_instance(CLASS, s_SetOrClass)) => ((s_range(FUNCTION, CLASS) & (s_AssignmentFn6(FUNCTION, ROW0, ROW1, ROW2, ROW3, ROW4) = VALUE)) => s_instance(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Function) (instance ?ROW5 Function)
       (instance ?ROW3 Function) (instance ?ROW2 Function)
       (instance ?ROW1 Function) (instance ?ROW0 Function)
       (instance ?FUNCTION Function) (instance ?VALUE Entity)
       (instance ?CLASS SetOrClass))
  (=>
   (and (range ?FUNCTION ?CLASS)
        (equal (AssignmentFn7 ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                ?ROW5)
               ?VALUE))
   (instance ?VALUE ?CLASS))))
*/
fof(a6063,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Function) & s_instance(ROW5, s_Function) & s_instance(ROW3, s_Function) & s_instance(ROW2, s_Function) & s_instance(ROW1, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_Entity) & s_instance(CLASS, s_SetOrClass)) => ((s_range(FUNCTION, CLASS) & (s_AssignmentFn7(FUNCTION, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) = VALUE)) => s_instance(VALUE, CLASS))))).

/*
(forall (?CLASS1 ?REL2 ?REL1)
 (=>
  (and (instance ?REL1 Function) (instance ?REL2 Function)
       (instance ?CLASS1 SetOrClass))
  (=> (and (subrelation ?REL1 ?REL2) (range ?REL2 ?CLASS1))
   (range ?REL1 ?CLASS1))))
*/
fof(a6064,axiom,! [CLASS1,REL2,REL1] : (((s_instance(REL1, s_Function) & s_instance(REL2, s_Function) & s_instance(CLASS1, s_SetOrClass)) => ((s_subrelation(REL1, REL2) & s_range(REL2, CLASS1)) => s_range(REL1, CLASS1))))).

/*
(forall (?CLASS2 ?CLASS1 ?REL)
 (=>
  (and (instance ?REL Function) (instance ?CLASS1 SetOrClass)
       (instance ?CLASS2 SetOrClass))
  (=> (and (range ?REL ?CLASS1) (range ?REL ?CLASS2))
   (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))
*/
fof(a6065,axiom,! [CLASS2,CLASS1,REL] : (((s_instance(REL, s_Function) & s_instance(CLASS1, s_SetOrClass) & s_instance(CLASS2, s_SetOrClass)) => ((s_range(REL, CLASS1) & s_range(REL, CLASS2)) => (s_subclass(CLASS1, CLASS2) | s_subclass(CLASS2, CLASS1)))))).

/*
(instance rangeSubclass BinaryPredicate)
*/
fof(a6066,axiom,s_instance(s_rangeSubclass_m, s_BinaryPredicate)).

/*
(instance rangeSubclass AsymmetricRelation)
*/
fof(a6067,axiom,s_instance(s_rangeSubclass_m, s_AsymmetricRelation)).

/*
(domainSubclass rangeSubclass 2 SetOrClass)
*/
fof(a6068,axiom,s_domainSubclass(s_rangeSubclass_m, 2, s_SetOrClass)).

/*
(forall (?CLASS ?VALUE ?ROW0 ?FUNCTION)
 (=>
  (and (instance ?FUNCTION Function) (instance ?ROW0 Function)
       (instance ?VALUE SetOrClass) (subclass ?CLASS SetOrClass)
       (instance ?CLASS SetOrClass))
  (=>
   (and (rangeSubclass ?FUNCTION ?CLASS)
        (equal (AssignmentFn2 ?FUNCTION ?ROW0) ?VALUE))
   (subclass ?VALUE ?CLASS))))
*/
fof(a6069,axiom,! [CLASS,VALUE,ROW0,FUNCTION] : (((s_instance(FUNCTION, s_Function) & s_instance(ROW0, s_Function) & s_instance(VALUE, s_SetOrClass) & s_subclass(CLASS, s_SetOrClass) & s_instance(CLASS, s_SetOrClass)) => ((s_rangeSubclass(FUNCTION, CLASS) & (s_AssignmentFn2(FUNCTION, ROW0) = VALUE)) => s_subclass(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Function) (instance ?ROW1 Function)
       (instance ?FUNCTION Function) (instance ?VALUE SetOrClass)
       (subclass ?CLASS SetOrClass) (instance ?CLASS SetOrClass))
  (=>
   (and (rangeSubclass ?FUNCTION ?CLASS)
        (equal (AssignmentFn3 ?FUNCTION ?ROW0 ?ROW1) ?VALUE))
   (subclass ?VALUE ?CLASS))))
*/
fof(a6070,axiom,! [CLASS,VALUE,FUNCTION,ROW1,ROW0] : (((s_instance(ROW0, s_Function) & s_instance(ROW1, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_SetOrClass) & s_subclass(CLASS, s_SetOrClass) & s_instance(CLASS, s_SetOrClass)) => ((s_rangeSubclass(FUNCTION, CLASS) & (s_AssignmentFn3(FUNCTION, ROW0, ROW1) = VALUE)) => s_subclass(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Function) (instance ?ROW2 Function)
       (instance ?ROW0 Function) (instance ?FUNCTION Function)
       (instance ?VALUE SetOrClass) (subclass ?CLASS SetOrClass)
       (instance ?CLASS SetOrClass))
  (=>
   (and (rangeSubclass ?FUNCTION ?CLASS)
        (equal (AssignmentFn4 ?FUNCTION ?ROW0 ?ROW1 ?ROW2) ?VALUE))
   (subclass ?VALUE ?CLASS))))
*/
fof(a6071,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Function) & s_instance(ROW2, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_SetOrClass) & s_subclass(CLASS, s_SetOrClass) & s_instance(CLASS, s_SetOrClass)) => ((s_rangeSubclass(FUNCTION, CLASS) & (s_AssignmentFn4(FUNCTION, ROW0, ROW1, ROW2) = VALUE)) => s_subclass(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Function) (instance ?ROW3 Function)
       (instance ?ROW1 Function) (instance ?ROW0 Function)
       (instance ?FUNCTION Function) (instance ?VALUE SetOrClass)
       (subclass ?CLASS SetOrClass) (instance ?CLASS SetOrClass))
  (=>
   (and (rangeSubclass ?FUNCTION ?CLASS)
        (equal (AssignmentFn5 ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3)
               ?VALUE))
   (subclass ?VALUE ?CLASS))))
*/
fof(a6072,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Function) & s_instance(ROW3, s_Function) & s_instance(ROW1, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_SetOrClass) & s_subclass(CLASS, s_SetOrClass) & s_instance(CLASS, s_SetOrClass)) => ((s_rangeSubclass(FUNCTION, CLASS) & (s_AssignmentFn5(FUNCTION, ROW0, ROW1, ROW2, ROW3) = VALUE)) => s_subclass(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Function) (instance ?ROW4 Function)
       (instance ?ROW2 Function) (instance ?ROW1 Function)
       (instance ?ROW0 Function) (instance ?FUNCTION Function)
       (instance ?VALUE SetOrClass) (subclass ?CLASS SetOrClass)
       (instance ?CLASS SetOrClass))
  (=>
   (and (rangeSubclass ?FUNCTION ?CLASS)
        (equal (AssignmentFn6 ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
               ?VALUE))
   (subclass ?VALUE ?CLASS))))
*/
fof(a6073,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Function) & s_instance(ROW4, s_Function) & s_instance(ROW2, s_Function) & s_instance(ROW1, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_SetOrClass) & s_subclass(CLASS, s_SetOrClass) & s_instance(CLASS, s_SetOrClass)) => ((s_rangeSubclass(FUNCTION, CLASS) & (s_AssignmentFn6(FUNCTION, ROW0, ROW1, ROW2, ROW3, ROW4) = VALUE)) => s_subclass(VALUE, CLASS))))).

/*
(forall (?CLASS ?VALUE ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Function) (instance ?ROW5 Function)
       (instance ?ROW3 Function) (instance ?ROW2 Function)
       (instance ?ROW1 Function) (instance ?ROW0 Function)
       (instance ?FUNCTION Function) (instance ?VALUE SetOrClass)
       (subclass ?CLASS SetOrClass) (instance ?CLASS SetOrClass))
  (=>
   (and (rangeSubclass ?FUNCTION ?CLASS)
        (equal (AssignmentFn7 ?FUNCTION ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
                ?ROW5)
               ?VALUE))
   (subclass ?VALUE ?CLASS))))
*/
fof(a6074,axiom,! [CLASS,VALUE,FUNCTION,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Function) & s_instance(ROW5, s_Function) & s_instance(ROW3, s_Function) & s_instance(ROW2, s_Function) & s_instance(ROW1, s_Function) & s_instance(ROW0, s_Function) & s_instance(FUNCTION, s_Function) & s_instance(VALUE, s_SetOrClass) & s_subclass(CLASS, s_SetOrClass) & s_instance(CLASS, s_SetOrClass)) => ((s_rangeSubclass(FUNCTION, CLASS) & (s_AssignmentFn7(FUNCTION, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) = VALUE)) => s_subclass(VALUE, CLASS))))).

/*
(forall (?CLASS1 ?REL2 ?REL1)
 (=>
  (and (instance ?REL1 Function) (instance ?REL2 Function)
       (subclass ?CLASS1 SetOrClass))
  (=> (and (subrelation ?REL1 ?REL2) (rangeSubclass ?REL2 ?CLASS1))
   (rangeSubclass ?REL1 ?CLASS1))))
*/
fof(a6075,axiom,! [CLASS1,REL2,REL1] : (((s_instance(REL1, s_Function) & s_instance(REL2, s_Function) & s_subclass(CLASS1, s_SetOrClass)) => ((s_subrelation(REL1, REL2) & s_rangeSubclass(REL2, CLASS1)) => s_rangeSubclass(REL1, CLASS1))))).

/*
(forall (?CLASS2 ?CLASS1 ?REL)
 (=>
  (and (instance ?REL Function) (instance ?CLASS1 SetOrClass)
       (subclass ?CLASS1 SetOrClass) (subclass ?CLASS2 SetOrClass)
       (instance ?CLASS2 SetOrClass))
  (=> (and (rangeSubclass ?REL ?CLASS1) (rangeSubclass ?REL ?CLASS2))
   (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))
*/
fof(a6076,axiom,! [CLASS2,CLASS1,REL] : (((s_instance(REL, s_Function) & s_instance(CLASS1, s_SetOrClass) & s_subclass(CLASS1, s_SetOrClass) & s_subclass(CLASS2, s_SetOrClass) & s_instance(CLASS2, s_SetOrClass)) => ((s_rangeSubclass(REL, CLASS1) & s_rangeSubclass(REL, CLASS2)) => (s_subclass(CLASS1, CLASS2) | s_subclass(CLASS2, CLASS1)))))).

/*
(instance valence BinaryPredicate)
*/
fof(a6077,axiom,s_instance(s_valence_m, s_BinaryPredicate)).

/*
(instance valence AsymmetricRelation)
*/
fof(a6078,axiom,s_instance(s_valence_m, s_AsymmetricRelation)).

/*
(instance valence SingleValuedRelation)
*/
fof(a6079,axiom,s_instance(s_valence_m, s_SingleValuedRelation)).

/*
(instance documentation TernaryPredicate)
*/
fof(a6080,axiom,s_instance(s_documentation_m, s_TernaryPredicate)).

/*
(instance format TernaryPredicate)
*/
fof(a6081,axiom,s_instance(s_format_m, s_TernaryPredicate)).

/*
(instance termFormat TernaryPredicate)
*/
fof(a6082,axiom,s_instance(s_termFormat_m, s_TernaryPredicate)).

/*
(instance disjoint BinaryPredicate)
*/
fof(a6083,axiom,s_instance(s_disjoint_m, s_BinaryPredicate)).

/*
(instance disjoint SymmetricRelation)
*/
fof(a6084,axiom,s_instance(s_disjoint_m, s_SymmetricRelation)).

/*
(forall (?CLASS2 ?CLASS1)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=>
    (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass))
    (=> (disjoint ?CLASS1 ?CLASS2)
     (not (and (instance ?INST ?CLASS1) (instance ?INST ?CLASS2))))))))
*/
fof(a6085,axiom,! [CLASS2,CLASS1] : (! [INST] : ((s_instance(INST, s_Entity) => ((s_instance(CLASS1, s_SetOrClass) & s_instance(CLASS2, s_SetOrClass)) => (s_disjoint(CLASS1, CLASS2) => (~ (s_instance(INST, CLASS1) & s_instance(INST, CLASS2))))))))).

/*
(instance disjointRelation BinaryPredicate)
*/
fof(a6086,axiom,s_instance(s_disjointRelation_m, s_BinaryPredicate)).

/*
(instance disjointRelation IrreflexiveRelation)
*/
fof(a6087,axiom,s_instance(s_disjointRelation_m, s_IrreflexiveRelation)).

/*
(instance disjointRelation PartialValuedRelation)
*/
fof(a6088,axiom,s_instance(s_disjointRelation_m, s_PartialValuedRelation)).

/*
(forall (?REL1 ?CLASS1 ?REL2 ?CLASS2 ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS2 SetOrClass)
       (instance ?REL2 Relation) (instance ?CLASS1 SetOrClass)
       (instance ?REL1 Relation))
  (=>
   (and (domain ?REL1 ?NUMBER ?CLASS1)
        (and (domain ?REL2 ?NUMBER ?CLASS2)
             (disjoint ?CLASS1 ?CLASS2)))
   (disjointRelation ?REL1 ?REL2))))
*/
fof(a6089,axiom,! [REL1,CLASS1,REL2,CLASS2,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS2, s_SetOrClass) & s_instance(REL2, s_Relation) & s_instance(CLASS1, s_SetOrClass) & s_instance(REL1, s_Relation)) => ((s_domain(REL1, NUMBER, CLASS1) & (s_domain(REL2, NUMBER, CLASS2) & s_disjoint(CLASS1, CLASS2))) => s_disjointRelation(REL1, REL2))))).

/*
(forall (?REL1 ?CLASS1 ?REL2 ?CLASS2 ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS2 SetOrClass)
       (instance ?REL2 Relation) (instance ?CLASS1 SetOrClass)
       (instance ?REL1 Relation))
  (=>
   (and (domainSubclass ?REL1 ?NUMBER ?CLASS1)
        (and (domainSubclass ?REL2 ?NUMBER ?CLASS2)
             (disjoint ?CLASS1 ?CLASS2)))
   (disjointRelation ?REL1 ?REL2))))
*/
fof(a6090,axiom,! [REL1,CLASS1,REL2,CLASS2,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS2, s_SetOrClass) & s_instance(REL2, s_Relation) & s_instance(CLASS1, s_SetOrClass) & s_instance(REL1, s_Relation)) => ((s_domainSubclass(REL1, NUMBER, CLASS1) & (s_domainSubclass(REL2, NUMBER, CLASS2) & s_disjoint(CLASS1, CLASS2))) => s_disjointRelation(REL1, REL2))))).

/*
(forall (?REL1 ?CLASS1 ?CLASS2 ?REL2)
 (=>
  (and (instance ?REL2 Function) (instance ?CLASS2 SetOrClass)
       (instance ?CLASS1 SetOrClass) (instance ?REL1 Function))
  (=>
   (and (range ?REL1 ?CLASS1)
        (and (range ?REL2 ?CLASS2) (disjoint ?CLASS1 ?CLASS2)))
   (disjointRelation ?REL1 ?REL2))))
*/
fof(a6091,axiom,! [REL1,CLASS1,CLASS2,REL2] : (((s_instance(REL2, s_Function) & s_instance(CLASS2, s_SetOrClass) & s_instance(CLASS1, s_SetOrClass) & s_instance(REL1, s_Function)) => ((s_range(REL1, CLASS1) & (s_range(REL2, CLASS2) & s_disjoint(CLASS1, CLASS2))) => s_disjointRelation(REL1, REL2))))).

/*
(forall (?REL1 ?CLASS1 ?CLASS2 ?REL2)
 (=>
  (and (instance ?REL2 Function) (instance ?CLASS2 SetOrClass)
       (subclass ?CLASS2 SetOrClass) (instance ?REL1 Function)
       (subclass ?CLASS1 SetOrClass) (instance ?CLASS1 SetOrClass))
  (=>
   (and (rangeSubclass ?REL1 ?CLASS1)
        (and (rangeSubclass ?REL2 ?CLASS2) (disjoint ?CLASS1 ?CLASS2)))
   (disjointRelation ?REL1 ?REL2))))
*/
fof(a6092,axiom,! [REL1,CLASS1,CLASS2,REL2] : (((s_instance(REL2, s_Function) & s_instance(CLASS2, s_SetOrClass) & s_subclass(CLASS2, s_SetOrClass) & s_instance(REL1, s_Function) & s_subclass(CLASS1, s_SetOrClass) & s_instance(CLASS1, s_SetOrClass)) => ((s_rangeSubclass(REL1, CLASS1) & (s_rangeSubclass(REL2, CLASS2) & s_disjoint(CLASS1, CLASS2))) => s_disjointRelation(REL1, REL2))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance partition Predicate)
       (and (instance partition Predicate)
            (and (disjointRelation partition partition)
                 (and (not (equal partition partition))
                      (partition2 ?ROW20 ?ROW21)))))
  (not (partition2 ?ROW20 ?ROW21))))
*/
fof(a6093,axiom,! [ROW21,ROW20] : (((s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_partition_m) & ((~ (s_partition_m = s_partition_m)) & s_partition2(ROW20, ROW21))))) => (~ s_partition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation partition partition)
                  (and (not (equal partition partition))
                       (partition3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (partition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6094,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_partition_m) & ((~ (s_partition_m = s_partition_m)) & s_partition3(ROW20, ROW21, ROW22))))) => (~ s_partition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation partition partition)
                  (and (not (equal partition partition))
                       (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
   (not (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6095,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_partition_m) & ((~ (s_partition_m = s_partition_m)) & s_partition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_partition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation partition partition)
                  (and (not (equal partition partition))
                       (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6096,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_partition_m) & ((~ (s_partition_m = s_partition_m)) & s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation partition partition)
                  (and (not (equal partition partition))
                       (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25)))))
   (not (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))))
*/
fof(a6097,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_partition_m) & ((~ (s_partition_m = s_partition_m)) & s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation partition partition)
                  (and (not (equal partition partition))
                       (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25 ?ROW26)))))
   (not (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6098,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_partition_m) & ((~ (s_partition_m = s_partition_m)) & s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveDecomposition Predicate)
       (and (instance partition Predicate)
            (and (disjointRelation exhaustiveDecomposition partition)
                 (and (not (equal exhaustiveDecomposition partition))
                      (exhaustiveDecomposition2 ?ROW20 ?ROW21)))))
  (not (partition2 ?ROW20 ?ROW21))))
*/
fof(a6099,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_partition_m) & ((~ (s_exhaustiveDecomposition_m = s_partition_m)) & s_exhaustiveDecomposition2(ROW20, ROW21))))) => (~ s_partition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveDecomposition partition)
                  (and (not (equal exhaustiveDecomposition partition))
                       (exhaustiveDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (partition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6100,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_partition_m) & ((~ (s_exhaustiveDecomposition_m = s_partition_m)) & s_exhaustiveDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_partition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveDecomposition partition)
                  (and (not (equal exhaustiveDecomposition partition))
                       (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6101,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_partition_m) & ((~ (s_exhaustiveDecomposition_m = s_partition_m)) & s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_partition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveDecomposition partition)
                  (and (not (equal exhaustiveDecomposition partition))
                       (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6102,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_partition_m) & ((~ (s_exhaustiveDecomposition_m = s_partition_m)) & s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveDecomposition partition)
                  (and (not (equal exhaustiveDecomposition partition))
                       (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))))
*/
fof(a6103,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_partition_m) & ((~ (s_exhaustiveDecomposition_m = s_partition_m)) & s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveDecomposition partition)
                  (and (not (equal exhaustiveDecomposition partition))
                       (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6104,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_partition_m) & ((~ (s_exhaustiveDecomposition_m = s_partition_m)) & s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation contraryAttribute partition)
                  (and (not (equal contraryAttribute partition))
                       (contraryAttribute2 ?ROW20 ?ROW21)))))
   (not (partition2 ?ROW20 ?ROW21)))))
*/
fof(a6105,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_partition_m) & ((~ (s_contraryAttribute_m = s_partition_m)) & s_contraryAttribute2(ROW20, ROW21))))) => (~ s_partition2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation contraryAttribute partition)
                  (and (not (equal contraryAttribute partition))
                       (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (partition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6106,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_partition_m) & ((~ (s_contraryAttribute_m = s_partition_m)) & s_contraryAttribute3(ROW20, ROW21, ROW22))))) => (~ s_partition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation contraryAttribute partition)
                  (and (not (equal contraryAttribute partition))
                       (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6107,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_partition_m) & ((~ (s_contraryAttribute_m = s_partition_m)) & s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_partition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation contraryAttribute partition)
                  (and (not (equal contraryAttribute partition))
                       (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6108,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_partition_m) & ((~ (s_contraryAttribute_m = s_partition_m)) & s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation contraryAttribute partition)
                  (and (not (equal contraryAttribute partition))
                       (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25)))))
   (not (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))))
*/
fof(a6109,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_partition_m) & ((~ (s_contraryAttribute_m = s_partition_m)) & s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW26 Class) (instance ?ROW26 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation contraryAttribute partition)
                  (and (not (equal contraryAttribute partition))
                       (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25 ?ROW26)))))
   (not (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6110,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_partition_m) & ((~ (s_contraryAttribute_m = s_partition_m)) & s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance disjointDecomposition Predicate)
       (and (instance partition Predicate)
            (and (disjointRelation disjointDecomposition partition)
                 (and (not (equal disjointDecomposition partition))
                      (disjointDecomposition2 ?ROW20 ?ROW21)))))
  (not (partition2 ?ROW20 ?ROW21))))
*/
fof(a6111,axiom,! [ROW21,ROW20] : (((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_partition_m) & ((~ (s_disjointDecomposition_m = s_partition_m)) & s_disjointDecomposition2(ROW20, ROW21))))) => (~ s_partition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation disjointDecomposition partition)
                  (and (not (equal disjointDecomposition partition))
                       (disjointDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (partition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6112,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_partition_m) & ((~ (s_disjointDecomposition_m = s_partition_m)) & s_disjointDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_partition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation disjointDecomposition partition)
                  (and (not (equal disjointDecomposition partition))
                       (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6113,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_partition_m) & ((~ (s_disjointDecomposition_m = s_partition_m)) & s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_partition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation disjointDecomposition partition)
                  (and (not (equal disjointDecomposition partition))
                       (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6114,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_partition_m) & ((~ (s_disjointDecomposition_m = s_partition_m)) & s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation disjointDecomposition partition)
                  (and (not (equal disjointDecomposition partition))
                       (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))))
*/
fof(a6115,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_partition_m) & ((~ (s_disjointDecomposition_m = s_partition_m)) & s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation disjointDecomposition partition)
                  (and (not (equal disjointDecomposition partition))
                       (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6116,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_partition_m) & ((~ (s_disjointDecomposition_m = s_partition_m)) & s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveAttribute Predicate)
       (and (instance partition Predicate)
            (and (disjointRelation exhaustiveAttribute partition)
                 (and (not (equal exhaustiveAttribute partition))
                      (exhaustiveAttribute2 ?ROW20 ?ROW21)))))
  (not (partition2 ?ROW20 ?ROW21))))
*/
fof(a6117,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_partition_m) & ((~ (s_exhaustiveAttribute_m = s_partition_m)) & s_exhaustiveAttribute2(ROW20, ROW21))))) => (~ s_partition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveAttribute partition)
                  (and (not (equal exhaustiveAttribute partition))
                       (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (partition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6118,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_partition_m) & ((~ (s_exhaustiveAttribute_m = s_partition_m)) & s_exhaustiveAttribute3(ROW20, ROW21, ROW22))))) => (~ s_partition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveAttribute partition)
                  (and (not (equal exhaustiveAttribute partition))
                       (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6119,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_partition_m) & ((~ (s_exhaustiveAttribute_m = s_partition_m)) & s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_partition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveAttribute partition)
                  (and (not (equal exhaustiveAttribute partition))
                       (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6120,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_partition_m) & ((~ (s_exhaustiveAttribute_m = s_partition_m)) & s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveAttribute partition)
                  (and (not (equal exhaustiveAttribute partition))
                       (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))))
*/
fof(a6121,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_partition_m) & ((~ (s_exhaustiveAttribute_m = s_partition_m)) & s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW26 Class) (instance ?ROW26 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance partition Predicate)
             (and (disjointRelation exhaustiveAttribute partition)
                  (and (not (equal exhaustiveAttribute partition))
                       (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6122,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_partition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_partition_m) & ((~ (s_exhaustiveAttribute_m = s_partition_m)) & s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance partition Predicate)
       (and (instance exhaustiveDecomposition Predicate)
            (and (disjointRelation partition exhaustiveDecomposition)
                 (and (not (equal partition exhaustiveDecomposition))
                      (partition2 ?ROW20 ?ROW21)))))
  (not (exhaustiveDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6123,axiom,! [ROW21,ROW20] : (((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveDecomposition_m) & ((~ (s_partition_m = s_exhaustiveDecomposition_m)) & s_partition2(ROW20, ROW21))))) => (~ s_exhaustiveDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation partition exhaustiveDecomposition)
                  (and (not (equal partition exhaustiveDecomposition))
                       (partition3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (exhaustiveDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6124,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveDecomposition_m) & ((~ (s_partition_m = s_exhaustiveDecomposition_m)) & s_partition3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation partition exhaustiveDecomposition)
                  (and (not (equal partition exhaustiveDecomposition))
                       (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
   (not (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6125,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveDecomposition_m) & ((~ (s_partition_m = s_exhaustiveDecomposition_m)) & s_partition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation partition exhaustiveDecomposition)
                  (and (not (equal partition exhaustiveDecomposition))
                       (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
         ?ROW24)))))
*/
fof(a6126,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveDecomposition_m) & ((~ (s_partition_m = s_exhaustiveDecomposition_m)) & s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation partition exhaustiveDecomposition)
                  (and (not (equal partition exhaustiveDecomposition))
                       (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25)))))
   (not (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6127,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveDecomposition_m) & ((~ (s_partition_m = s_exhaustiveDecomposition_m)) & s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation partition exhaustiveDecomposition)
                  (and (not (equal partition exhaustiveDecomposition))
                       (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25 ?ROW26)))))
   (not (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6128,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveDecomposition_m) & ((~ (s_partition_m = s_exhaustiveDecomposition_m)) & s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveDecomposition Predicate)
       (and (instance exhaustiveDecomposition Predicate)
            (and (disjointRelation exhaustiveDecomposition
                  exhaustiveDecomposition)
                 (and (not (equal exhaustiveDecomposition
                                  exhaustiveDecomposition))
                      (exhaustiveDecomposition2 ?ROW20 ?ROW21)))))
  (not (exhaustiveDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6129,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveDecomposition_m)) & s_exhaustiveDecomposition2(ROW20, ROW21))))) => (~ s_exhaustiveDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveDecomposition))
                       (exhaustiveDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (exhaustiveDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6130,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveDecomposition_m)) & s_exhaustiveDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveDecomposition))
                       (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6131,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveDecomposition_m)) & s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveDecomposition))
                       (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
         ?ROW24)))))
*/
fof(a6132,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveDecomposition_m)) & s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveDecomposition))
                       (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6133,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveDecomposition_m)) & s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveDecomposition))
                       (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6134,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveDecomposition_m)) & s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveDecomposition)
                  (and (not (equal contraryAttribute
                                   exhaustiveDecomposition))
                       (contraryAttribute2 ?ROW20 ?ROW21)))))
   (not (exhaustiveDecomposition2 ?ROW20 ?ROW21)))))
*/
fof(a6135,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_contraryAttribute_m = s_exhaustiveDecomposition_m)) & s_contraryAttribute2(ROW20, ROW21))))) => (~ s_exhaustiveDecomposition2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveDecomposition)
                  (and (not (equal contraryAttribute
                                   exhaustiveDecomposition))
                       (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (exhaustiveDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6136,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_contraryAttribute_m = s_exhaustiveDecomposition_m)) & s_contraryAttribute3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveDecomposition)
                  (and (not (equal contraryAttribute
                                   exhaustiveDecomposition))
                       (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6137,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_contraryAttribute_m = s_exhaustiveDecomposition_m)) & s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveDecomposition)
                  (and (not (equal contraryAttribute
                                   exhaustiveDecomposition))
                       (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
         ?ROW24)))))
*/
fof(a6138,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_contraryAttribute_m = s_exhaustiveDecomposition_m)) & s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveDecomposition)
                  (and (not (equal contraryAttribute
                                   exhaustiveDecomposition))
                       (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25)))))
   (not (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6139,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_contraryAttribute_m = s_exhaustiveDecomposition_m)) & s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW26 Class) (instance ?ROW26 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveDecomposition)
                  (and (not (equal contraryAttribute
                                   exhaustiveDecomposition))
                       (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6140,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_contraryAttribute_m = s_exhaustiveDecomposition_m)) & s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance disjointDecomposition Predicate)
       (and (instance exhaustiveDecomposition Predicate)
            (and (disjointRelation disjointDecomposition
                  exhaustiveDecomposition)
                 (and (not (equal disjointDecomposition
                                  exhaustiveDecomposition))
                      (disjointDecomposition2 ?ROW20 ?ROW21)))))
  (not (exhaustiveDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6141,axiom,! [ROW21,ROW20] : (((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveDecomposition_m)) & s_disjointDecomposition2(ROW20, ROW21))))) => (~ s_exhaustiveDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal disjointDecomposition
                                   exhaustiveDecomposition))
                       (disjointDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (exhaustiveDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6142,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveDecomposition_m)) & s_disjointDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal disjointDecomposition
                                   exhaustiveDecomposition))
                       (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6143,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveDecomposition_m)) & s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal disjointDecomposition
                                   exhaustiveDecomposition))
                       (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
         ?ROW24)))))
*/
fof(a6144,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveDecomposition_m)) & s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal disjointDecomposition
                                   exhaustiveDecomposition))
                       (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6145,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveDecomposition_m)) & s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveDecomposition)
                  (and (not (equal disjointDecomposition
                                   exhaustiveDecomposition))
                       (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6146,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveDecomposition_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveDecomposition_m)) & s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveAttribute Predicate)
       (and (instance exhaustiveDecomposition Predicate)
            (and (disjointRelation exhaustiveAttribute
                  exhaustiveDecomposition)
                 (and (not (equal exhaustiveAttribute
                                  exhaustiveDecomposition))
                      (exhaustiveAttribute2 ?ROW20 ?ROW21)))))
  (not (exhaustiveDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6147,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveDecomposition_m)) & s_exhaustiveAttribute2(ROW20, ROW21))))) => (~ s_exhaustiveDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveDecomposition))
                       (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (exhaustiveDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6148,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveDecomposition_m)) & s_exhaustiveAttribute3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveDecomposition))
                       (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6149,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveDecomposition_m)) & s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveDecomposition))
                       (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
         ?ROW24)))))
*/
fof(a6150,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveDecomposition_m)) & s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveDecomposition))
                       (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6151,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveDecomposition_m)) & s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW26 Class) (instance ?ROW26 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveDecomposition))
                       (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6152,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveDecomposition_m)) & s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation partition contraryAttribute)
                  (and (not (equal partition contraryAttribute))
                       (partition2 ?ROW20 ?ROW21)))))
   (not (contraryAttribute2 ?ROW20 ?ROW21)))))
*/
fof(a6153,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_contraryAttribute_m) & ((~ (s_partition_m = s_contraryAttribute_m)) & s_partition2(ROW20, ROW21))))) => (~ s_contraryAttribute2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation partition contraryAttribute)
                  (and (not (equal partition contraryAttribute))
                       (partition3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6154,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_contraryAttribute_m) & ((~ (s_partition_m = s_contraryAttribute_m)) & s_partition3(ROW20, ROW21, ROW22))))) => (~ s_contraryAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation partition contraryAttribute)
                  (and (not (equal partition contraryAttribute))
                       (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
   (not (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6155,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_contraryAttribute_m) & ((~ (s_partition_m = s_contraryAttribute_m)) & s_partition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation partition contraryAttribute)
                  (and (not (equal partition contraryAttribute))
                       (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6156,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_contraryAttribute_m) & ((~ (s_partition_m = s_contraryAttribute_m)) & s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation partition contraryAttribute)
                  (and (not (equal partition contraryAttribute))
                       (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25)))))
   (not (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6157,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_contraryAttribute_m) & ((~ (s_partition_m = s_contraryAttribute_m)) & s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW26 Attribute) (instance ?ROW26 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation partition contraryAttribute)
                  (and (not (equal partition contraryAttribute))
                       (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25 ?ROW26)))))
   (not (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6158,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_contraryAttribute_m) & ((~ (s_partition_m = s_contraryAttribute_m)) & s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   contraryAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   contraryAttribute))
                       (exhaustiveDecomposition2 ?ROW20 ?ROW21)))))
   (not (contraryAttribute2 ?ROW20 ?ROW21)))))
*/
fof(a6159,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_contraryAttribute_m)) & s_exhaustiveDecomposition2(ROW20, ROW21))))) => (~ s_contraryAttribute2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   contraryAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   contraryAttribute))
                       (exhaustiveDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6160,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_contraryAttribute_m)) & s_exhaustiveDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_contraryAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   contraryAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   contraryAttribute))
                       (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6161,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_contraryAttribute_m)) & s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   contraryAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   contraryAttribute))
                       (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6162,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_contraryAttribute_m)) & s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   contraryAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   contraryAttribute))
                       (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6163,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_contraryAttribute_m)) & s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW26 Attribute) (instance ?ROW26 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   contraryAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   contraryAttribute))
                       (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6164,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_contraryAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_contraryAttribute_m)) & s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW20)
 (=>
  (and (instance contraryAttribute Predicate)
       (and (instance contraryAttribute Predicate)
            (and (disjointRelation contraryAttribute contraryAttribute)
                 (and (not (equal contraryAttribute contraryAttribute))
                      (contraryAttribute1 ?ROW20)))))
  (not (contraryAttribute1 ?ROW20))))
*/
fof(a6165,axiom,! [ROW20] : (((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute1(ROW20))))) => (~ s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   contraryAttribute)
                  (and (not (equal contraryAttribute
                                   contraryAttribute))
                       (contraryAttribute2 ?ROW20 ?ROW21)))))
   (not (contraryAttribute2 ?ROW20 ?ROW21)))))
*/
fof(a6166,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute2(ROW20, ROW21))))) => (~ s_contraryAttribute2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   contraryAttribute)
                  (and (not (equal contraryAttribute
                                   contraryAttribute))
                       (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6167,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute3(ROW20, ROW21, ROW22))))) => (~ s_contraryAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   contraryAttribute)
                  (and (not (equal contraryAttribute
                                   contraryAttribute))
                       (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6168,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   contraryAttribute)
                  (and (not (equal contraryAttribute
                                   contraryAttribute))
                       (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6169,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   contraryAttribute)
                  (and (not (equal contraryAttribute
                                   contraryAttribute))
                       (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25)))))
   (not (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6170,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   contraryAttribute)
                  (and (not (equal contraryAttribute
                                   contraryAttribute))
                       (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25 ?ROW26)))))
   (not (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6171,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_contraryAttribute_m) & ((~ (s_contraryAttribute_m = s_contraryAttribute_m)) & s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   contraryAttribute)
                  (and (not (equal disjointDecomposition
                                   contraryAttribute))
                       (disjointDecomposition2 ?ROW20 ?ROW21)))))
   (not (contraryAttribute2 ?ROW20 ?ROW21)))))
*/
fof(a6172,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_contraryAttribute_m) & ((~ (s_disjointDecomposition_m = s_contraryAttribute_m)) & s_disjointDecomposition2(ROW20, ROW21))))) => (~ s_contraryAttribute2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   contraryAttribute)
                  (and (not (equal disjointDecomposition
                                   contraryAttribute))
                       (disjointDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6173,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_contraryAttribute_m) & ((~ (s_disjointDecomposition_m = s_contraryAttribute_m)) & s_disjointDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_contraryAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   contraryAttribute)
                  (and (not (equal disjointDecomposition
                                   contraryAttribute))
                       (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6174,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_contraryAttribute_m) & ((~ (s_disjointDecomposition_m = s_contraryAttribute_m)) & s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   contraryAttribute)
                  (and (not (equal disjointDecomposition
                                   contraryAttribute))
                       (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6175,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_contraryAttribute_m) & ((~ (s_disjointDecomposition_m = s_contraryAttribute_m)) & s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   contraryAttribute)
                  (and (not (equal disjointDecomposition
                                   contraryAttribute))
                       (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6176,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_contraryAttribute_m) & ((~ (s_disjointDecomposition_m = s_contraryAttribute_m)) & s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW26 Attribute) (instance ?ROW26 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (instance ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   contraryAttribute)
                  (and (not (equal disjointDecomposition
                                   contraryAttribute))
                       (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6177,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_contraryAttribute_m) & ((~ (s_disjointDecomposition_m = s_contraryAttribute_m)) & s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   contraryAttribute)
                  (and (not (equal exhaustiveAttribute
                                   contraryAttribute))
                       (exhaustiveAttribute2 ?ROW20 ?ROW21)))))
   (not (contraryAttribute2 ?ROW20 ?ROW21)))))
*/
fof(a6178,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_contraryAttribute_m)) & s_exhaustiveAttribute2(ROW20, ROW21))))) => (~ s_contraryAttribute2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   contraryAttribute)
                  (and (not (equal exhaustiveAttribute
                                   contraryAttribute))
                       (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6179,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_contraryAttribute_m)) & s_exhaustiveAttribute3(ROW20, ROW21, ROW22))))) => (~ s_contraryAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (subclass ?ROW20 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   contraryAttribute)
                  (and (not (equal exhaustiveAttribute
                                   contraryAttribute))
                       (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6180,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_contraryAttribute_m)) & s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   contraryAttribute)
                  (and (not (equal exhaustiveAttribute
                                   contraryAttribute))
                       (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6181,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_contraryAttribute_m)) & s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (subclass ?ROW20 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   contraryAttribute)
                  (and (not (equal exhaustiveAttribute
                                   contraryAttribute))
                       (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6182,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_contraryAttribute_m)) & s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance contraryAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   contraryAttribute)
                  (and (not (equal exhaustiveAttribute
                                   contraryAttribute))
                       (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6183,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_contraryAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_contraryAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_contraryAttribute_m)) & s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance partition Predicate)
       (and (instance disjointDecomposition Predicate)
            (and (disjointRelation partition disjointDecomposition)
                 (and (not (equal partition disjointDecomposition))
                      (partition2 ?ROW20 ?ROW21)))))
  (not (disjointDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6184,axiom,! [ROW21,ROW20] : (((s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_disjointDecomposition_m) & ((~ (s_partition_m = s_disjointDecomposition_m)) & s_partition2(ROW20, ROW21))))) => (~ s_disjointDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation partition disjointDecomposition)
                  (and (not (equal partition disjointDecomposition))
                       (partition3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (disjointDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6185,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_disjointDecomposition_m) & ((~ (s_partition_m = s_disjointDecomposition_m)) & s_partition3(ROW20, ROW21, ROW22))))) => (~ s_disjointDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation partition disjointDecomposition)
                  (and (not (equal partition disjointDecomposition))
                       (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
   (not (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6186,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_disjointDecomposition_m) & ((~ (s_partition_m = s_disjointDecomposition_m)) & s_partition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation partition disjointDecomposition)
                  (and (not (equal partition disjointDecomposition))
                       (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6187,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_disjointDecomposition_m) & ((~ (s_partition_m = s_disjointDecomposition_m)) & s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation partition disjointDecomposition)
                  (and (not (equal partition disjointDecomposition))
                       (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25)))))
   (not (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6188,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_disjointDecomposition_m) & ((~ (s_partition_m = s_disjointDecomposition_m)) & s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance partition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation partition disjointDecomposition)
                  (and (not (equal partition disjointDecomposition))
                       (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25 ?ROW26)))))
   (not (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6189,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_disjointDecomposition_m) & ((~ (s_partition_m = s_disjointDecomposition_m)) & s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveDecomposition Predicate)
       (and (instance disjointDecomposition Predicate)
            (and (disjointRelation exhaustiveDecomposition
                  disjointDecomposition)
                 (and (not (equal exhaustiveDecomposition
                                  disjointDecomposition))
                      (exhaustiveDecomposition2 ?ROW20 ?ROW21)))))
  (not (disjointDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6190,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_disjointDecomposition_m)) & s_exhaustiveDecomposition2(ROW20, ROW21))))) => (~ s_disjointDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   disjointDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   disjointDecomposition))
                       (exhaustiveDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (disjointDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6191,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_disjointDecomposition_m)) & s_exhaustiveDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_disjointDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   disjointDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   disjointDecomposition))
                       (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6192,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_disjointDecomposition_m)) & s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   disjointDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   disjointDecomposition))
                       (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6193,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_disjointDecomposition_m)) & s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   disjointDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   disjointDecomposition))
                       (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6194,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_disjointDecomposition_m)) & s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   disjointDecomposition)
                  (and (not (equal exhaustiveDecomposition
                                   disjointDecomposition))
                       (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6195,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveDecomposition_m = s_disjointDecomposition_m)) & s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   disjointDecomposition)
                  (and (not (equal contraryAttribute
                                   disjointDecomposition))
                       (contraryAttribute2 ?ROW20 ?ROW21)))))
   (not (disjointDecomposition2 ?ROW20 ?ROW21)))))
*/
fof(a6196,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_disjointDecomposition_m) & ((~ (s_contraryAttribute_m = s_disjointDecomposition_m)) & s_contraryAttribute2(ROW20, ROW21))))) => (~ s_disjointDecomposition2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   disjointDecomposition)
                  (and (not (equal contraryAttribute
                                   disjointDecomposition))
                       (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (disjointDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6197,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_disjointDecomposition_m) & ((~ (s_contraryAttribute_m = s_disjointDecomposition_m)) & s_contraryAttribute3(ROW20, ROW21, ROW22))))) => (~ s_disjointDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   disjointDecomposition)
                  (and (not (equal contraryAttribute
                                   disjointDecomposition))
                       (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6198,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_disjointDecomposition_m) & ((~ (s_contraryAttribute_m = s_disjointDecomposition_m)) & s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   disjointDecomposition)
                  (and (not (equal contraryAttribute
                                   disjointDecomposition))
                       (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6199,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_disjointDecomposition_m) & ((~ (s_contraryAttribute_m = s_disjointDecomposition_m)) & s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   disjointDecomposition)
                  (and (not (equal contraryAttribute
                                   disjointDecomposition))
                       (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25)))))
   (not (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6200,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_disjointDecomposition_m) & ((~ (s_contraryAttribute_m = s_disjointDecomposition_m)) & s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW26 Class) (instance ?ROW26 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation contraryAttribute
                   disjointDecomposition)
                  (and (not (equal contraryAttribute
                                   disjointDecomposition))
                       (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25 ?ROW26)))))
   (not (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6201,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_disjointDecomposition_m) & ((~ (s_contraryAttribute_m = s_disjointDecomposition_m)) & s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance disjointDecomposition Predicate)
       (and (instance disjointDecomposition Predicate)
            (and (disjointRelation disjointDecomposition
                  disjointDecomposition)
                 (and (not (equal disjointDecomposition
                                  disjointDecomposition))
                      (disjointDecomposition2 ?ROW20 ?ROW21)))))
  (not (disjointDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6202,axiom,! [ROW21,ROW20] : (((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & ((~ (s_disjointDecomposition_m = s_disjointDecomposition_m)) & s_disjointDecomposition2(ROW20, ROW21))))) => (~ s_disjointDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW22 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   disjointDecomposition)
                  (and (not (equal disjointDecomposition
                                   disjointDecomposition))
                       (disjointDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (disjointDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6203,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & ((~ (s_disjointDecomposition_m = s_disjointDecomposition_m)) & s_disjointDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_disjointDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW23 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   disjointDecomposition)
                  (and (not (equal disjointDecomposition
                                   disjointDecomposition))
                       (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6204,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & ((~ (s_disjointDecomposition_m = s_disjointDecomposition_m)) & s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW24 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   disjointDecomposition)
                  (and (not (equal disjointDecomposition
                                   disjointDecomposition))
                       (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6205,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & ((~ (s_disjointDecomposition_m = s_disjointDecomposition_m)) & s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW25 Class)
       (instance ?ROW23 Class) (instance ?ROW22 Class)
       (instance ?ROW21 Class) (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   disjointDecomposition)
                  (and (not (equal disjointDecomposition
                                   disjointDecomposition))
                       (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6206,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & ((~ (s_disjointDecomposition_m = s_disjointDecomposition_m)) & s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW26 Class)
       (instance ?ROW24 Class) (instance ?ROW23 Class)
       (instance ?ROW22 Class) (instance ?ROW21 Class)
       (instance ?ROW20 Class))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation disjointDecomposition
                   disjointDecomposition)
                  (and (not (equal disjointDecomposition
                                   disjointDecomposition))
                       (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6207,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_disjointDecomposition_m) & ((~ (s_disjointDecomposition_m = s_disjointDecomposition_m)) & s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveAttribute Predicate)
       (and (instance disjointDecomposition Predicate)
            (and (disjointRelation exhaustiveAttribute
                  disjointDecomposition)
                 (and (not (equal exhaustiveAttribute
                                  disjointDecomposition))
                      (exhaustiveAttribute2 ?ROW20 ?ROW21)))))
  (not (disjointDecomposition2 ?ROW20 ?ROW21))))
*/
fof(a6208,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_disjointDecomposition_m)) & s_exhaustiveAttribute2(ROW20, ROW21))))) => (~ s_disjointDecomposition2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   disjointDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   disjointDecomposition))
                       (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (disjointDecomposition3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6209,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_disjointDecomposition_m)) & s_exhaustiveAttribute3(ROW20, ROW21, ROW22))))) => (~ s_disjointDecomposition3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   disjointDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   disjointDecomposition))
                       (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6210,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_disjointDecomposition_m)) & s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   disjointDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   disjointDecomposition))
                       (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6211,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_disjointDecomposition_m)) & s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   disjointDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   disjointDecomposition))
                       (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6212,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_disjointDecomposition_m)) & s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Class) (instance ?ROW25 Attribute)
       (instance ?ROW26 Class) (instance ?ROW26 Attribute)
       (instance ?ROW24 Class) (instance ?ROW24 Attribute)
       (instance ?ROW23 Class) (instance ?ROW23 Attribute)
       (instance ?ROW22 Class) (instance ?ROW22 Attribute)
       (instance ?ROW21 Class) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute) (instance ?ROW20 Class))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance disjointDecomposition Predicate)
             (and (disjointRelation exhaustiveAttribute
                   disjointDecomposition)
                  (and (not (equal exhaustiveAttribute
                                   disjointDecomposition))
                       (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25 ?ROW26)))))
*/
fof(a6213,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute) & s_instance(ROW20, s_Class)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_disjointDecomposition_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_disjointDecomposition_m) & ((~ (s_exhaustiveAttribute_m = s_disjointDecomposition_m)) & s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance partition Predicate)
       (and (instance exhaustiveAttribute Predicate)
            (and (disjointRelation partition exhaustiveAttribute)
                 (and (not (equal partition exhaustiveAttribute))
                      (partition2 ?ROW20 ?ROW21)))))
  (not (exhaustiveAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6214,axiom,! [ROW21,ROW20] : (((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveAttribute_m) & ((~ (s_partition_m = s_exhaustiveAttribute_m)) & s_partition2(ROW20, ROW21))))) => (~ s_exhaustiveAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation partition exhaustiveAttribute)
                  (and (not (equal partition exhaustiveAttribute))
                       (partition3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6215,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveAttribute_m) & ((~ (s_partition_m = s_exhaustiveAttribute_m)) & s_partition3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation partition exhaustiveAttribute)
                  (and (not (equal partition exhaustiveAttribute))
                       (partition4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
   (not (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6216,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveAttribute_m) & ((~ (s_partition_m = s_exhaustiveAttribute_m)) & s_partition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation partition exhaustiveAttribute)
                  (and (not (equal partition exhaustiveAttribute))
                       (partition5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6217,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveAttribute_m) & ((~ (s_partition_m = s_exhaustiveAttribute_m)) & s_partition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation partition exhaustiveAttribute)
                  (and (not (equal partition exhaustiveAttribute))
                       (partition6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25)))))
   (not (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6218,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveAttribute_m) & ((~ (s_partition_m = s_exhaustiveAttribute_m)) & s_partition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW26 Attribute) (instance ?ROW26 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance partition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation partition exhaustiveAttribute)
                  (and (not (equal partition exhaustiveAttribute))
                       (partition7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
                        ?ROW25 ?ROW26)))))
   (not (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6219,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_partition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_partition_m, s_exhaustiveAttribute_m) & ((~ (s_partition_m = s_exhaustiveAttribute_m)) & s_partition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveDecomposition Predicate)
       (and (instance exhaustiveAttribute Predicate)
            (and (disjointRelation exhaustiveDecomposition
                  exhaustiveAttribute)
                 (and (not (equal exhaustiveDecomposition
                                  exhaustiveAttribute))
                      (exhaustiveDecomposition2 ?ROW20 ?ROW21)))))
  (not (exhaustiveAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6220,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveAttribute_m)) & s_exhaustiveDecomposition2(ROW20, ROW21))))) => (~ s_exhaustiveAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveAttribute))
                       (exhaustiveDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6221,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveAttribute_m)) & s_exhaustiveDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveAttribute))
                       (exhaustiveDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6222,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveAttribute_m)) & s_exhaustiveDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveAttribute))
                       (exhaustiveDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6223,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveAttribute_m)) & s_exhaustiveDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveAttribute))
                       (exhaustiveDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6224,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveAttribute_m)) & s_exhaustiveDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW26 Attribute) (instance ?ROW26 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveDecomposition
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveDecomposition
                                   exhaustiveAttribute))
                       (exhaustiveDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6225,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveDecomposition_m = s_exhaustiveAttribute_m)) & s_exhaustiveDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveAttribute)
                  (and (not (equal contraryAttribute
                                   exhaustiveAttribute))
                       (contraryAttribute2 ?ROW20 ?ROW21)))))
   (not (exhaustiveAttribute2 ?ROW20 ?ROW21)))))
*/
fof(a6226,axiom,! [ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_contraryAttribute_m = s_exhaustiveAttribute_m)) & s_contraryAttribute2(ROW20, ROW21))))) => (~ s_exhaustiveAttribute2(ROW20, ROW21)))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute) (subclass ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveAttribute)
                  (and (not (equal contraryAttribute
                                   exhaustiveAttribute))
                       (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6227,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_contraryAttribute_m = s_exhaustiveAttribute_m)) & s_contraryAttribute3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (subclass ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveAttribute)
                  (and (not (equal contraryAttribute
                                   exhaustiveAttribute))
                       (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6228,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_contraryAttribute_m = s_exhaustiveAttribute_m)) & s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (subclass ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveAttribute)
                  (and (not (equal contraryAttribute
                                   exhaustiveAttribute))
                       (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24)))))
   (not (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6229,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_contraryAttribute_m = s_exhaustiveAttribute_m)) & s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (subclass ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveAttribute)
                  (and (not (equal contraryAttribute
                                   exhaustiveAttribute))
                       (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25)))))
   (not (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6230,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_contraryAttribute_m = s_exhaustiveAttribute_m)) & s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (subclass ?ROW20 Attribute))
  (=>
   (and (instance contraryAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation contraryAttribute
                   exhaustiveAttribute)
                  (and (not (equal contraryAttribute
                                   exhaustiveAttribute))
                       (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23
                        ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6231,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_contraryAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_contraryAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_contraryAttribute_m = s_exhaustiveAttribute_m)) & s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance disjointDecomposition Predicate)
       (and (instance exhaustiveAttribute Predicate)
            (and (disjointRelation disjointDecomposition
                  exhaustiveAttribute)
                 (and (not (equal disjointDecomposition
                                  exhaustiveAttribute))
                      (disjointDecomposition2 ?ROW20 ?ROW21)))))
  (not (exhaustiveAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6232,axiom,! [ROW21,ROW20] : (((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveAttribute_m)) & s_disjointDecomposition2(ROW20, ROW21))))) => (~ s_exhaustiveAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveAttribute)
                  (and (not (equal disjointDecomposition
                                   exhaustiveAttribute))
                       (disjointDecomposition3 ?ROW20 ?ROW21
                        ?ROW22)))))
   (not (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6233,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveAttribute_m)) & s_disjointDecomposition3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveAttribute)
                  (and (not (equal disjointDecomposition
                                   exhaustiveAttribute))
                       (disjointDecomposition4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6234,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveAttribute_m)) & s_disjointDecomposition4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveAttribute)
                  (and (not (equal disjointDecomposition
                                   exhaustiveAttribute))
                       (disjointDecomposition5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6235,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveAttribute_m)) & s_disjointDecomposition5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveAttribute)
                  (and (not (equal disjointDecomposition
                                   exhaustiveAttribute))
                       (disjointDecomposition6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6236,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveAttribute_m)) & s_disjointDecomposition6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW25 Class)
       (instance ?ROW26 Attribute) (instance ?ROW26 Class)
       (instance ?ROW24 Attribute) (instance ?ROW24 Class)
       (instance ?ROW23 Attribute) (instance ?ROW23 Class)
       (instance ?ROW22 Attribute) (instance ?ROW22 Class)
       (instance ?ROW21 Attribute) (instance ?ROW21 Class)
       (instance ?ROW20 Class) (subclass ?ROW20 Attribute))
  (=>
   (and (instance disjointDecomposition Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation disjointDecomposition
                   exhaustiveAttribute)
                  (and (not (equal disjointDecomposition
                                   exhaustiveAttribute))
                       (disjointDecomposition7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6237,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW25, s_Class) & s_instance(ROW26, s_Attribute) & s_instance(ROW26, s_Class) & s_instance(ROW24, s_Attribute) & s_instance(ROW24, s_Class) & s_instance(ROW23, s_Attribute) & s_instance(ROW23, s_Class) & s_instance(ROW22, s_Attribute) & s_instance(ROW22, s_Class) & s_instance(ROW21, s_Attribute) & s_instance(ROW21, s_Class) & s_instance(ROW20, s_Class) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_disjointDecomposition_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_disjointDecomposition_m, s_exhaustiveAttribute_m) & ((~ (s_disjointDecomposition_m = s_exhaustiveAttribute_m)) & s_disjointDecomposition7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(forall (?ROW21 ?ROW20)
 (=>
  (and (instance exhaustiveAttribute Predicate)
       (and (instance exhaustiveAttribute Predicate)
            (and (disjointRelation exhaustiveAttribute
                  exhaustiveAttribute)
                 (and (not (equal exhaustiveAttribute
                                  exhaustiveAttribute))
                      (exhaustiveAttribute2 ?ROW20 ?ROW21)))))
  (not (exhaustiveAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6238,axiom,! [ROW21,ROW20] : (((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveAttribute_m)) & s_exhaustiveAttribute2(ROW20, ROW21))))) => (~ s_exhaustiveAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveAttribute))
                       (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
   (not (exhaustiveAttribute3 ?ROW20 ?ROW21 ?ROW22)))))
*/
fof(a6239,axiom,! [ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveAttribute_m)) & s_exhaustiveAttribute3(ROW20, ROW21, ROW22))))) => (~ s_exhaustiveAttribute3(ROW20, ROW21, ROW22)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveAttribute))
                       (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23)))))
   (not (exhaustiveAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))))
*/
fof(a6240,axiom,! [ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveAttribute_m)) & s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23))))) => (~ s_exhaustiveAttribute4(ROW20, ROW21, ROW22, ROW23)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveAttribute))
                       (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24)))))
   (not (exhaustiveAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))))
*/
fof(a6241,axiom,! [ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveAttribute_m)) & s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))) => (~ s_exhaustiveAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveAttribute))
                       (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25)))))
   (not (exhaustiveAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
         ?ROW25)))))
*/
fof(a6242,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveAttribute_m)) & s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))) => (~ s_exhaustiveAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25)))))).

/*
(forall (?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (subclass ?ROW20 Attribute))
  (=>
   (and (instance exhaustiveAttribute Predicate)
        (and (instance exhaustiveAttribute Predicate)
             (and (disjointRelation exhaustiveAttribute
                   exhaustiveAttribute)
                  (and (not (equal exhaustiveAttribute
                                   exhaustiveAttribute))
                       (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22
                        ?ROW23 ?ROW24 ?ROW25 ?ROW26)))))
   (not (exhaustiveAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
         ?ROW26)))))
*/
fof(a6243,axiom,! [ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_subclass(ROW20, s_Attribute)) => ((s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & (s_disjointRelation(s_exhaustiveAttribute_m, s_exhaustiveAttribute_m) & ((~ (s_exhaustiveAttribute_m = s_exhaustiveAttribute_m)) & s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))) => (~ s_exhaustiveAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26)))))).

/*
(instance contraryAttribute Predicate)
*/
fof(a6244,axiom,s_instance(s_contraryAttribute_m, s_Predicate)).

/*
(instance contraryAttribute VariableArityRelation)
*/
fof(a6245,axiom,s_instance(s_contraryAttribute_m, s_VariableArityRelation)).

/*
(forall (?ROW0 ?ELEMENT)
 (=> (instance ?ELEMENT Entity)
  (=> (contraryAttribute1 ?ROW0)
   (=> (inList ?ELEMENT (ListFn1 ?ROW0))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6246,axiom,! [ROW0,ELEMENT] : ((s_instance(ELEMENT, s_Entity) => (s_contraryAttribute1(ROW0) => (s_inList(ELEMENT, s_ListFn1(ROW0)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ELEMENT ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute)
       (instance ?ELEMENT Entity))
  (=> (contraryAttribute2 ?ROW0 ?ROW1)
   (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6247,axiom,! [ELEMENT,ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ELEMENT, s_Entity)) => (s_contraryAttribute2(ROW0, ROW1) => (s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?ELEMENT Entity))
  (=> (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2)
   (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6248,axiom,! [ELEMENT,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ELEMENT, s_Entity)) => (s_contraryAttribute3(ROW0, ROW1, ROW2) => (s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ELEMENT Entity))
  (=> (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6249,axiom,! [ELEMENT,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ELEMENT, s_Entity)) => (s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3) => (s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ELEMENT Entity))
  (=> (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6250,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ELEMENT, s_Entity)) => (s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ELEMENT Entity))
  (=> (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (=> (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6251,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ELEMENT, s_Entity)) => (s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ELEMENT Entity))
  (=> (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
   (=>
    (inList ?ELEMENT
     (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
    (instance ?ELEMENT Attribute)))))
*/
fof(a6252,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ELEMENT, s_Entity)) => (s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => s_instance(ELEMENT, s_Attribute)))))).

/*
(forall (?ROW20 ?ROW10)
 (=>
  (and (contraryAttribute1 ?ROW10)
       (identicalListItems (ListFn1 ?ROW10) (ListFn1 ?ROW20)))
  (contraryAttribute1 ?ROW20)))
*/
fof(a6253,axiom,! [ROW20,ROW10] : (((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20)))).

/*
(forall (?ROW20 ?ROW11 ?ROW10)
 (=> (and (instance ?ROW10 Attribute) (instance ?ROW11 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11) (ListFn1 ?ROW20)))
   (contraryAttribute1 ?ROW20))))
*/
fof(a6254,axiom,! [ROW20,ROW11,ROW10] : (((s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW20 ?ROW10 ?ROW12 ?ROW11)
 (=>
  (and (instance ?ROW11 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn1 ?ROW20)))
   (contraryAttribute1 ?ROW20))))
*/
fof(a6255,axiom,! [ROW20,ROW10,ROW12,ROW11] : (((s_instance(ROW11, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW20 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (=>
  (and (instance ?ROW12 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn1 ?ROW20)))
   (contraryAttribute1 ?ROW20))))
*/
fof(a6256,axiom,! [ROW20,ROW10,ROW11,ROW13,ROW12] : (((s_instance(ROW12, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW14 ?ROW13)
 (=>
  (and (instance ?ROW13 Attribute) (instance ?ROW14 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn1 ?ROW20)))
   (contraryAttribute1 ?ROW20))))
*/
fof(a6257,axiom,! [ROW20,ROW10,ROW11,ROW12,ROW14,ROW13] : (((s_instance(ROW13, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15 ?ROW14)
 (=>
  (and (instance ?ROW14 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn1 ?ROW20)))
   (contraryAttribute1 ?ROW20))))
*/
fof(a6258,axiom,! [ROW20,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (((s_instance(ROW14, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16 ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn1 ?ROW20)))
   (contraryAttribute1 ?ROW20))))
*/
fof(a6259,axiom,! [ROW20,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn1(ROW20))) => s_contraryAttribute1(ROW20))))).

/*
(forall (?ROW10 ?ROW21 ?ROW20)
 (=> (and (instance ?ROW20 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (contraryAttribute1 ?ROW10)
        (identicalListItems (ListFn1 ?ROW10) (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6260,axiom,! [ROW10,ROW21,ROW20] : (((s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW21 ?ROW11 ?ROW10)
 (=>
  (and (instance ?ROW10 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11)
         (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6261,axiom,! [ROW20,ROW21,ROW11,ROW10] : (((s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW21 ?ROW10 ?ROW12 ?ROW11)
 (=>
  (and (instance ?ROW11 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6262,axiom,! [ROW20,ROW21,ROW10,ROW12,ROW11] : (((s_instance(ROW11, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW21 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (=>
  (and (instance ?ROW12 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6263,axiom,! [ROW20,ROW21,ROW10,ROW11,ROW13,ROW12] : (((s_instance(ROW12, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW21 ?ROW10 ?ROW11 ?ROW12 ?ROW14 ?ROW13)
 (=>
  (and (instance ?ROW13 Attribute) (instance ?ROW14 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6264,axiom,! [ROW20,ROW21,ROW10,ROW11,ROW12,ROW14,ROW13] : (((s_instance(ROW13, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW20 ?ROW21 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15 ?ROW14)
 (=>
  (and (instance ?ROW14 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6265,axiom,! [ROW20,ROW21,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (((s_instance(ROW14, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall
 (?ROW20 ?ROW21 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16 ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn2 ?ROW20 ?ROW21)))
   (contraryAttribute2 ?ROW20 ?ROW21))))
*/
fof(a6266,axiom,! [ROW20,ROW21,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn2(ROW20, ROW21))) => s_contraryAttribute2(ROW20, ROW21))))).

/*
(forall (?ROW10 ?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute1 ?ROW10)
        (identicalListItems (ListFn1 ?ROW10)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6267,axiom,! [ROW10,ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall (?ROW10 ?ROW11 ?ROW20 ?ROW22 ?ROW21)
 (=>
  (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6268,axiom,! [ROW10,ROW11,ROW20,ROW22,ROW21] : (((s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall (?ROW21 ?ROW22 ?ROW20 ?ROW10 ?ROW12 ?ROW11)
 (=>
  (and (instance ?ROW11 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6269,axiom,! [ROW21,ROW22,ROW20,ROW10,ROW12,ROW11] : (((s_instance(ROW11, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall (?ROW21 ?ROW22 ?ROW20 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (=>
  (and (instance ?ROW12 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6270,axiom,! [ROW21,ROW22,ROW20,ROW10,ROW11,ROW13,ROW12] : (((s_instance(ROW12, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall (?ROW21 ?ROW22 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW14 ?ROW13)
 (=>
  (and (instance ?ROW13 Attribute) (instance ?ROW14 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6271,axiom,! [ROW21,ROW22,ROW20,ROW10,ROW11,ROW12,ROW14,ROW13] : (((s_instance(ROW13, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall
 (?ROW21 ?ROW22 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15 ?ROW14)
 (=>
  (and (instance ?ROW14 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6272,axiom,! [ROW21,ROW22,ROW20,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (((s_instance(ROW14, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall
 (?ROW21 ?ROW22 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16
  ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn3 ?ROW20 ?ROW21 ?ROW22)))
   (contraryAttribute3 ?ROW20 ?ROW21 ?ROW22))))
*/
fof(a6273,axiom,! [ROW21,ROW22,ROW20,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn3(ROW20, ROW21, ROW22))) => s_contraryAttribute3(ROW20, ROW21, ROW22))))).

/*
(forall (?ROW10 ?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute1 ?ROW10)
        (identicalListItems (ListFn1 ?ROW10)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6274,axiom,! [ROW10,ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall (?ROW10 ?ROW11 ?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6275,axiom,! [ROW10,ROW11,ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall (?ROW11 ?ROW12 ?ROW10 ?ROW20 ?ROW21 ?ROW23 ?ROW22)
 (=>
  (and (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6276,axiom,! [ROW11,ROW12,ROW10,ROW20,ROW21,ROW23,ROW22] : (((s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW13 ?ROW12)
 (=>
  (and (instance ?ROW12 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6277,axiom,! [ROW22,ROW23,ROW21,ROW20,ROW10,ROW11,ROW13,ROW12] : (((s_instance(ROW12, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW14 ?ROW13)
 (=>
  (and (instance ?ROW13 Attribute) (instance ?ROW14 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6278,axiom,! [ROW22,ROW23,ROW21,ROW20,ROW10,ROW11,ROW12,ROW14,ROW13] : (((s_instance(ROW13, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15
  ?ROW14)
 (=>
  (and (instance ?ROW14 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6279,axiom,! [ROW22,ROW23,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (((s_instance(ROW14, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall
 (?ROW22 ?ROW23 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW16
  ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn4 ?ROW20 ?ROW21 ?ROW22 ?ROW23)))
   (contraryAttribute4 ?ROW20 ?ROW21 ?ROW22 ?ROW23))))
*/
fof(a6280,axiom,! [ROW22,ROW23,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn4(ROW20, ROW21, ROW22, ROW23))) => s_contraryAttribute4(ROW20, ROW21, ROW22, ROW23))))).

/*
(forall (?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute1 ?ROW10)
        (identicalListItems (ListFn1 ?ROW10)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6281,axiom,! [ROW10,ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall (?ROW10 ?ROW11 ?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6282,axiom,! [ROW10,ROW11,ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall (?ROW11 ?ROW12 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6283,axiom,! [ROW11,ROW12,ROW10,ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall
 (?ROW12 ?ROW13 ?ROW11 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW24 ?ROW23)
 (=>
  (and (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6284,axiom,! [ROW12,ROW13,ROW11,ROW10,ROW20,ROW21,ROW22,ROW24,ROW23] : (((s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall
 (?ROW23 ?ROW24 ?ROW22 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW14
  ?ROW13)
 (=>
  (and (instance ?ROW13 Attribute) (instance ?ROW14 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6285,axiom,! [ROW23,ROW24,ROW22,ROW21,ROW20,ROW10,ROW11,ROW12,ROW14,ROW13] : (((s_instance(ROW13, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall
 (?ROW23 ?ROW24 ?ROW22 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW15
  ?ROW14)
 (=>
  (and (instance ?ROW14 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW23 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6286,axiom,! [ROW23,ROW24,ROW22,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (((s_instance(ROW14, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall
 (?ROW23 ?ROW24 ?ROW22 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14
  ?ROW16 ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24)))
   (contraryAttribute5 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24))))
*/
fof(a6287,axiom,! [ROW23,ROW24,ROW22,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn5(ROW20, ROW21, ROW22, ROW23, ROW24))) => s_contraryAttribute5(ROW20, ROW21, ROW22, ROW23, ROW24))))).

/*
(forall (?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute1 ?ROW10)
        (identicalListItems (ListFn1 ?ROW10)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6288,axiom,! [ROW10,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall (?ROW10 ?ROW11 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6289,axiom,! [ROW10,ROW11,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall
 (?ROW11 ?ROW12 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25 ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6290,axiom,! [ROW11,ROW12,ROW10,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall
 (?ROW12 ?ROW13 ?ROW11 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25
  ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6291,axiom,! [ROW12,ROW13,ROW11,ROW10,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall
 (?ROW13 ?ROW14 ?ROW12 ?ROW11 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW25
  ?ROW24)
 (=>
  (and (instance ?ROW24 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW14 Attribute)
       (instance ?ROW13 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6292,axiom,! [ROW13,ROW14,ROW12,ROW11,ROW10,ROW20,ROW21,ROW22,ROW23,ROW25,ROW24] : (((s_instance(ROW24, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall
 (?ROW24 ?ROW25 ?ROW23 ?ROW22 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13
  ?ROW15 ?ROW14)
 (=>
  (and (instance ?ROW14 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW25 Attribute) (instance ?ROW24 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6293,axiom,! [ROW24,ROW25,ROW23,ROW22,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW15,ROW14] : (((s_instance(ROW14, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW24, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall
 (?ROW24 ?ROW25 ?ROW23 ?ROW22 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12 ?ROW13
  ?ROW14 ?ROW16 ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW25 Attribute)
       (instance ?ROW24 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))
   (contraryAttribute6 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))))
*/
fof(a6294,axiom,! [ROW24,ROW25,ROW23,ROW22,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW25, s_Attribute) & s_instance(ROW24, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))) => s_contraryAttribute6(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25))))).

/*
(forall (?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute))
  (=>
   (and (contraryAttribute1 ?ROW10)
        (identicalListItems (ListFn1 ?ROW10)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6295,axiom,! [ROW10,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute)) => ((s_contraryAttribute1(ROW10) & s_identicalListItems(s_ListFn1(ROW10), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall
 (?ROW10 ?ROW11 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute))
  (=>
   (and (contraryAttribute2 ?ROW10 ?ROW11)
        (identicalListItems (ListFn2 ?ROW10 ?ROW11)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6296,axiom,! [ROW10,ROW11,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute)) => ((s_contraryAttribute2(ROW10, ROW11) & s_identicalListItems(s_ListFn2(ROW10, ROW11), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall
 (?ROW11 ?ROW12 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26
  ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute))
  (=>
   (and (contraryAttribute3 ?ROW10 ?ROW11 ?ROW12)
        (identicalListItems (ListFn3 ?ROW10 ?ROW11 ?ROW12)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6297,axiom,! [ROW11,ROW12,ROW10,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute)) => ((s_contraryAttribute3(ROW10, ROW11, ROW12) & s_identicalListItems(s_ListFn3(ROW10, ROW11, ROW12), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall
 (?ROW12 ?ROW13 ?ROW11 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW26
  ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute))
  (=>
   (and (contraryAttribute4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
        (identicalListItems (ListFn4 ?ROW10 ?ROW11 ?ROW12 ?ROW13)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6298,axiom,! [ROW12,ROW13,ROW11,ROW10,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute)) => ((s_contraryAttribute4(ROW10, ROW11, ROW12, ROW13) & s_identicalListItems(s_ListFn4(ROW10, ROW11, ROW12, ROW13), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall
 (?ROW13 ?ROW14 ?ROW12 ?ROW11 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24
  ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute))
  (=>
   (and (contraryAttribute5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
        (identicalListItems
         (ListFn5 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6299,axiom,! [ROW13,ROW14,ROW12,ROW11,ROW10,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute)) => ((s_contraryAttribute5(ROW10, ROW11, ROW12, ROW13, ROW14) & s_identicalListItems(s_ListFn5(ROW10, ROW11, ROW12, ROW13, ROW14), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall
 (?ROW14 ?ROW15 ?ROW13 ?ROW12 ?ROW11 ?ROW10 ?ROW20 ?ROW21 ?ROW22 ?ROW23
  ?ROW24 ?ROW26 ?ROW25)
 (=>
  (and (instance ?ROW25 Attribute) (instance ?ROW26 Attribute)
       (instance ?ROW24 Attribute) (instance ?ROW23 Attribute)
       (instance ?ROW22 Attribute) (instance ?ROW21 Attribute)
       (instance ?ROW20 Attribute) (instance ?ROW10 Attribute)
       (instance ?ROW11 Attribute) (instance ?ROW12 Attribute)
       (instance ?ROW13 Attribute) (instance ?ROW15 Attribute)
       (instance ?ROW14 Attribute))
  (=>
   (and (contraryAttribute6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
        (identicalListItems
         (ListFn6 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6300,axiom,! [ROW14,ROW15,ROW13,ROW12,ROW11,ROW10,ROW20,ROW21,ROW22,ROW23,ROW24,ROW26,ROW25] : (((s_instance(ROW25, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW15, s_Attribute) & s_instance(ROW14, s_Attribute)) => ((s_contraryAttribute6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15) & s_identicalListItems(s_ListFn6(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall
 (?ROW25 ?ROW26 ?ROW24 ?ROW23 ?ROW22 ?ROW21 ?ROW20 ?ROW10 ?ROW11 ?ROW12
  ?ROW13 ?ROW14 ?ROW16 ?ROW15)
 (=>
  (and (instance ?ROW15 Attribute) (instance ?ROW16 Attribute)
       (instance ?ROW14 Attribute) (instance ?ROW13 Attribute)
       (instance ?ROW12 Attribute) (instance ?ROW11 Attribute)
       (instance ?ROW10 Attribute) (instance ?ROW20 Attribute)
       (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)
       (instance ?ROW23 Attribute) (instance ?ROW24 Attribute)
       (instance ?ROW26 Attribute) (instance ?ROW25 Attribute))
  (=>
   (and (contraryAttribute7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15
         ?ROW16)
        (identicalListItems
         (ListFn7 ?ROW10 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)
         (ListFn7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))
   (contraryAttribute7 ?ROW20 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25
    ?ROW26))))
*/
fof(a6301,axiom,! [ROW25,ROW26,ROW24,ROW23,ROW22,ROW21,ROW20,ROW10,ROW11,ROW12,ROW13,ROW14,ROW16,ROW15] : (((s_instance(ROW15, s_Attribute) & s_instance(ROW16, s_Attribute) & s_instance(ROW14, s_Attribute) & s_instance(ROW13, s_Attribute) & s_instance(ROW12, s_Attribute) & s_instance(ROW11, s_Attribute) & s_instance(ROW10, s_Attribute) & s_instance(ROW20, s_Attribute) & s_instance(ROW21, s_Attribute) & s_instance(ROW22, s_Attribute) & s_instance(ROW23, s_Attribute) & s_instance(ROW24, s_Attribute) & s_instance(ROW26, s_Attribute) & s_instance(ROW25, s_Attribute)) => ((s_contraryAttribute7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16) & s_identicalListItems(s_ListFn7(ROW10, ROW11, ROW12, ROW13, ROW14, ROW15, ROW16), s_ListFn7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))) => s_contraryAttribute7(ROW20, ROW21, ROW22, ROW23, ROW24, ROW25, ROW26))))).

/*
(forall (?OBJ ?NUMBER1 ?NUMBER2 ?ROW0)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute1 ?ROW0)
     (=>
      (and (equal ?ATTR1 (ListOrderFn (ListFn1 ?ROW0) ?NUMBER1))
           (and (equal ?ATTR2 (ListOrderFn (ListFn1 ?ROW0) ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6302,axiom,! [OBJ,NUMBER1,NUMBER2,ROW0] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute1(ROW0) => (((ATTR1 = s_ListOrderFn(s_ListFn1(ROW0), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn1(ROW0), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(forall (?OBJ ?NUMBER1 ?NUMBER2 ?ROW1 ?ROW0)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute)
         (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute2 ?ROW0 ?ROW1)
     (=>
      (and (equal ?ATTR1 (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER1))
           (and (equal ?ATTR2
                       (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6303,axiom,! [OBJ,NUMBER1,NUMBER2,ROW1,ROW0] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute2(ROW0, ROW1) => (((ATTR1 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(forall (?OBJ ?NUMBER1 ?NUMBER2 ?ROW0 ?ROW2 ?ROW1)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
         (instance ?ROW0 Attribute) (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2)
     (=>
      (and (equal ?ATTR1
                  (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER1))
           (and (equal ?ATTR2
                       (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)
                        ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6304,axiom,! [OBJ,NUMBER1,NUMBER2,ROW0,ROW2,ROW1] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute3(ROW0, ROW1, ROW2) => (((ATTR1 = s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(forall (?OBJ ?NUMBER1 ?NUMBER2 ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
         (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
         (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
     (=>
      (and (equal ?ATTR1
                  (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
                   ?NUMBER1))
           (and (equal ?ATTR2
                       (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
                        ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6305,axiom,! [OBJ,NUMBER1,NUMBER2,ROW0,ROW1,ROW3,ROW2] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3) => (((ATTR1 = s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(forall (?OBJ ?NUMBER1 ?NUMBER2 ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
         (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
         (instance ?ROW0 Attribute) (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
     (=>
      (and (equal ?ATTR1
                  (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
                   ?NUMBER1))
           (and (equal ?ATTR2
                       (ListOrderFn
                        (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
                        ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6306,axiom,! [OBJ,NUMBER1,NUMBER2,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4) => (((ATTR1 = s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(forall (?OBJ ?NUMBER1 ?NUMBER2 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
         (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
         (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
         (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
     (=>
      (and (equal ?ATTR1
                  (ListOrderFn
                   (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
                   ?NUMBER1))
           (and (equal ?ATTR2
                       (ListOrderFn
                        (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
                        ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6307,axiom,! [OBJ,NUMBER1,NUMBER2,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (((ATTR1 = s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(forall
 (?OBJ ?NUMBER1 ?NUMBER2 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?ATTR1 ?ATTR2)
  (=> (and (instance ?ATTR2 Attribute) (instance ?ATTR1 Attribute))
   (=>
    (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
         (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
         (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
         (instance ?ROW0 Attribute) (instance ?NUMBER2 PositiveInteger)
         (instance ?NUMBER1 PositiveInteger) (instance ?OBJ Entity))
    (=> (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     (=>
      (and (equal ?ATTR1
                  (ListOrderFn
                   (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
                   ?NUMBER1))
           (and (equal ?ATTR2
                       (ListOrderFn
                        (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                         ?ROW6)
                        ?NUMBER2))
                (not (equal ?NUMBER1 ?NUMBER2))))
      (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))
*/
fof(a6308,axiom,! [OBJ,NUMBER1,NUMBER2,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [ATTR1,ATTR2] : (((s_instance(ATTR2, s_Attribute) & s_instance(ATTR1, s_Attribute)) => ((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(OBJ, s_Entity)) => (s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (((ATTR1 = s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER1)) & ((ATTR2 = s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER2)) & (~ (NUMBER1 = NUMBER2)))) => (s_property(OBJ, ATTR1) => (~ s_property(OBJ, ATTR2)))))))))).

/*
(instance exhaustiveAttribute Predicate)
*/
fof(a6309,axiom,s_instance(s_exhaustiveAttribute_m, s_Predicate)).

/*
(instance exhaustiveAttribute VariableArityRelation)
*/
fof(a6310,axiom,s_instance(s_exhaustiveAttribute_m, s_VariableArityRelation)).

/*
(domainSubclass exhaustiveAttribute 1 Attribute)
*/
fof(a6311,axiom,s_domainSubclass(s_exhaustiveAttribute_m, 1, s_Attribute)).

/*
(forall (?CLASS ?ATTR ?ROW1 ?ROW0)
 (=> (instance ?ATTR Entity)
  (=> (exhaustiveAttribute2 ?CLASS ?ROW0)
   (=> (inList ?ATTR (ListFn2 ?ROW0 ?ROW1))
    (instance ?ATTR Attribute)))))
*/
fof(a6312,axiom,! [CLASS,ATTR,ROW1,ROW0] : ((s_instance(ATTR, s_Entity) => (s_exhaustiveAttribute2(CLASS, ROW0) => (s_inList(ATTR, s_ListFn2(ROW0, ROW1)) => s_instance(ATTR, s_Attribute)))))).

/*
(forall (?CLASS ?ATTR ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ATTR Entity) (subclass ?CLASS Attribute))
  (=> (exhaustiveAttribute3 ?CLASS ?ROW0 ?ROW1)
   (=> (inList ?ATTR (ListFn3 ?ROW0 ?ROW1 ?ROW2))
    (instance ?ATTR Attribute)))))
*/
fof(a6313,axiom,! [CLASS,ATTR,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR, s_Entity) & s_subclass(CLASS, s_Attribute)) => (s_exhaustiveAttribute3(CLASS, ROW0, ROW1) => (s_inList(ATTR, s_ListFn3(ROW0, ROW1, ROW2)) => s_instance(ATTR, s_Attribute)))))).

/*
(forall (?CLASS ?ATTR ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ATTR Entity)
       (subclass ?CLASS Attribute))
  (=> (exhaustiveAttribute4 ?CLASS ?ROW0 ?ROW1 ?ROW2)
   (=> (inList ?ATTR (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
    (instance ?ATTR Attribute)))))
*/
fof(a6314,axiom,! [CLASS,ATTR,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR, s_Entity) & s_subclass(CLASS, s_Attribute)) => (s_exhaustiveAttribute4(CLASS, ROW0, ROW1, ROW2) => (s_inList(ATTR, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => s_instance(ATTR, s_Attribute)))))).

/*
(forall (?CLASS ?ATTR ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ATTR Entity) (subclass ?CLASS Attribute))
  (=> (exhaustiveAttribute5 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (=> (inList ?ATTR (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
    (instance ?ATTR Attribute)))))
*/
fof(a6315,axiom,! [CLASS,ATTR,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR, s_Entity) & s_subclass(CLASS, s_Attribute)) => (s_exhaustiveAttribute5(CLASS, ROW0, ROW1, ROW2, ROW3) => (s_inList(ATTR, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => s_instance(ATTR, s_Attribute)))))).

/*
(forall (?CLASS ?ATTR ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ATTR Entity)
       (subclass ?CLASS Attribute))
  (=> (exhaustiveAttribute6 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (=> (inList ?ATTR (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
    (instance ?ATTR Attribute)))))
*/
fof(a6316,axiom,! [CLASS,ATTR,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR, s_Entity) & s_subclass(CLASS, s_Attribute)) => (s_exhaustiveAttribute6(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4) => (s_inList(ATTR, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => s_instance(ATTR, s_Attribute)))))).

/*
(forall (?CLASS ?ATTR ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ATTR Entity) (subclass ?CLASS Attribute))
  (=> (exhaustiveAttribute7 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (=>
    (inList ?ATTR (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
    (instance ?ATTR Attribute)))))
*/
fof(a6317,axiom,! [CLASS,ATTR,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR, s_Entity) & s_subclass(CLASS, s_Attribute)) => (s_exhaustiveAttribute7(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_inList(ATTR, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => s_instance(ATTR, s_Attribute)))))).

/*
(forall (?CLASS ?ROW1 ?ROW0)
 (forall (?ATTR1)
  (exists (?ATTR2)
   (and (instance ?ATTR2 Entity)
        (=> (instance ?ATTR1 Entity)
         (=> (instance ?CLASS SetOrClass)
          (=> (exhaustiveAttribute2 ?CLASS ?ROW0)
           (=> (instance ?ATTR1 ?CLASS)
            (and (inList ?ATTR2 (ListFn2 ?ROW0 ?ROW1))
                 (equal ?ATTR1 ?ATTR2))))))))))
*/
fof(a6318,axiom,! [CLASS,ROW1,ROW0] : (! [ATTR1] : (? [ATTR2] : ((s_instance(ATTR2, s_Entity) & (s_instance(ATTR1, s_Entity) => (s_instance(CLASS, s_SetOrClass) => (s_exhaustiveAttribute2(CLASS, ROW0) => (s_instance(ATTR1, CLASS) => (s_inList(ATTR2, s_ListFn2(ROW0, ROW1)) & (ATTR1 = ATTR2))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW2 ?ROW1)
 (forall (?ATTR1)
  (exists (?ATTR2)
   (and (instance ?ATTR2 Entity)
        (=> (instance ?ATTR1 Entity)
         (=>
          (and (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
               (subclass ?CLASS Attribute)
               (instance ?CLASS SetOrClass))
          (=> (exhaustiveAttribute3 ?CLASS ?ROW0 ?ROW1)
           (=> (instance ?ATTR1 ?CLASS)
            (and (inList ?ATTR2 (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                 (equal ?ATTR1 ?ATTR2))))))))))
*/
fof(a6319,axiom,! [CLASS,ROW0,ROW2,ROW1] : (! [ATTR1] : (? [ATTR2] : ((s_instance(ATTR2, s_Entity) & (s_instance(ATTR1, s_Entity) => ((s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(CLASS, s_Attribute) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveAttribute3(CLASS, ROW0, ROW1) => (s_instance(ATTR1, CLASS) => (s_inList(ATTR2, s_ListFn3(ROW0, ROW1, ROW2)) & (ATTR1 = ATTR2))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?ATTR1)
  (exists (?ATTR2)
   (and (instance ?ATTR2 Entity)
        (=> (instance ?ATTR1 Entity)
         (=>
          (and (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
               (instance ?ROW0 Attribute) (subclass ?CLASS Attribute)
               (instance ?CLASS SetOrClass))
          (=> (exhaustiveAttribute4 ?CLASS ?ROW0 ?ROW1 ?ROW2)
           (=> (instance ?ATTR1 ?CLASS)
            (and (inList ?ATTR2 (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                 (equal ?ATTR1 ?ATTR2))))))))))
*/
fof(a6320,axiom,! [CLASS,ROW0,ROW1,ROW3,ROW2] : (! [ATTR1] : (? [ATTR2] : ((s_instance(ATTR2, s_Entity) & (s_instance(ATTR1, s_Entity) => ((s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(CLASS, s_Attribute) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveAttribute4(CLASS, ROW0, ROW1, ROW2) => (s_instance(ATTR1, CLASS) => (s_inList(ATTR2, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) & (ATTR1 = ATTR2))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?ATTR1)
  (exists (?ATTR2)
   (and (instance ?ATTR2 Entity)
        (=> (instance ?ATTR1 Entity)
         (=>
          (and (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
               (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
               (subclass ?CLASS Attribute)
               (instance ?CLASS SetOrClass))
          (=> (exhaustiveAttribute5 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3)
           (=> (instance ?ATTR1 ?CLASS)
            (and (inList ?ATTR2
                  (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                 (equal ?ATTR1 ?ATTR2))))))))))
*/
fof(a6321,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [ATTR1] : (? [ATTR2] : ((s_instance(ATTR2, s_Entity) & (s_instance(ATTR1, s_Entity) => ((s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(CLASS, s_Attribute) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveAttribute5(CLASS, ROW0, ROW1, ROW2, ROW3) => (s_instance(ATTR1, CLASS) => (s_inList(ATTR2, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) & (ATTR1 = ATTR2))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?ATTR1)
  (exists (?ATTR2)
   (and (instance ?ATTR2 Entity)
        (=> (instance ?ATTR1 Entity)
         (=>
          (and (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
               (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
               (instance ?ROW0 Attribute) (subclass ?CLASS Attribute)
               (instance ?CLASS SetOrClass))
          (=>
           (exhaustiveAttribute6 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
           (=> (instance ?ATTR1 ?CLASS)
            (and (inList ?ATTR2
                  (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                 (equal ?ATTR1 ?ATTR2))))))))))
*/
fof(a6322,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [ATTR1] : (? [ATTR2] : ((s_instance(ATTR2, s_Entity) & (s_instance(ATTR1, s_Entity) => ((s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(CLASS, s_Attribute) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveAttribute6(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4) => (s_instance(ATTR1, CLASS) => (s_inList(ATTR2, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) & (ATTR1 = ATTR2))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?ATTR1)
  (exists (?ATTR2)
   (and (instance ?ATTR2 Entity)
        (=> (instance ?ATTR1 Entity)
         (=>
          (and (instance ?ROW5 Attribute) (instance ?ROW4 Attribute)
               (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
               (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
               (subclass ?CLASS Attribute)
               (instance ?CLASS SetOrClass))
          (=>
           (exhaustiveAttribute7 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
            ?ROW5)
           (=> (instance ?ATTR1 ?CLASS)
            (and (inList ?ATTR2
                  (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
                 (equal ?ATTR1 ?ATTR2))))))))))
*/
fof(a6323,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [ATTR1] : (? [ATTR2] : ((s_instance(ATTR2, s_Entity) & (s_instance(ATTR1, s_Entity) => ((s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(CLASS, s_Attribute) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveAttribute7(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_instance(ATTR1, CLASS) => (s_inList(ATTR2, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) & (ATTR1 = ATTR2))))))))))).

/*
(forall (?ATTRCLASS ?ROW1 ?ROW0)
 (forall (?EL)
  (=> (instance ?EL Entity)
   (=> (instance ?ATTRCLASS SetOrClass)
    (=> (exhaustiveAttribute2 ?ATTRCLASS ?ROW0)
     (not (and (instance ?EL ?ATTRCLASS)
               (not (exists (?ATTR ?NUMBER)
                     (and (equal ?EL ?ATTR)
                          (equal ?ATTR
                                 (ListOrderFn
                                  (ListFn2 ?ROW0 ?ROW1)
                                  ?NUMBER))))))))))))
*/
fof(a6324,axiom,! [ATTRCLASS,ROW1,ROW0] : (! [EL] : ((s_instance(EL, s_Entity) => (s_instance(ATTRCLASS, s_SetOrClass) => (s_exhaustiveAttribute2(ATTRCLASS, ROW0) => (~ (s_instance(EL, ATTRCLASS) & (~ ? [ATTR,NUMBER] : (((EL = ATTR) & (ATTR = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER))))))))))))).

/*
(forall (?ATTRCLASS ?ROW0 ?ROW2 ?ROW1)
 (forall (?EL)
  (=> (instance ?EL Entity)
   (=>
    (and (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
         (subclass ?ATTRCLASS Attribute)
         (instance ?ATTRCLASS SetOrClass))
    (=> (exhaustiveAttribute3 ?ATTRCLASS ?ROW0 ?ROW1)
     (not (and (instance ?EL ?ATTRCLASS)
               (not (exists (?ATTR ?NUMBER)
                     (and (equal ?EL ?ATTR)
                          (equal ?ATTR
                                 (ListOrderFn
                                  (ListFn3 ?ROW0 ?ROW1 ?ROW2)
                                  ?NUMBER))))))))))))
*/
fof(a6325,axiom,! [ATTRCLASS,ROW0,ROW2,ROW1] : (! [EL] : ((s_instance(EL, s_Entity) => ((s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ATTRCLASS, s_Attribute) & s_instance(ATTRCLASS, s_SetOrClass)) => (s_exhaustiveAttribute3(ATTRCLASS, ROW0, ROW1) => (~ (s_instance(EL, ATTRCLASS) & (~ ? [ATTR,NUMBER] : (((EL = ATTR) & (ATTR = s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER))))))))))))).

/*
(forall (?ATTRCLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?EL)
  (=> (instance ?EL Entity)
   (=>
    (and (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
         (instance ?ROW0 Attribute) (subclass ?ATTRCLASS Attribute)
         (instance ?ATTRCLASS SetOrClass))
    (=> (exhaustiveAttribute4 ?ATTRCLASS ?ROW0 ?ROW1 ?ROW2)
     (not (and (instance ?EL ?ATTRCLASS)
               (not (exists (?ATTR ?NUMBER)
                     (and (equal ?EL ?ATTR)
                          (equal ?ATTR
                                 (ListOrderFn
                                  (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
                                  ?NUMBER))))))))))))
*/
fof(a6326,axiom,! [ATTRCLASS,ROW0,ROW1,ROW3,ROW2] : (! [EL] : ((s_instance(EL, s_Entity) => ((s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ATTRCLASS, s_Attribute) & s_instance(ATTRCLASS, s_SetOrClass)) => (s_exhaustiveAttribute4(ATTRCLASS, ROW0, ROW1, ROW2) => (~ (s_instance(EL, ATTRCLASS) & (~ ? [ATTR,NUMBER] : (((EL = ATTR) & (ATTR = s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER))))))))))))).

/*
(forall (?ATTRCLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?EL)
  (=> (instance ?EL Entity)
   (=>
    (and (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
         (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
         (subclass ?ATTRCLASS Attribute)
         (instance ?ATTRCLASS SetOrClass))
    (=> (exhaustiveAttribute5 ?ATTRCLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3)
     (not (and (instance ?EL ?ATTRCLASS)
               (not (exists (?ATTR ?NUMBER)
                     (and (equal ?EL ?ATTR)
                          (equal ?ATTR
                                 (ListOrderFn
                                  (ListFn5
                                   ?ROW0
                                   ?ROW1
                                   ?ROW2
                                   ?ROW3
                                   ?ROW4)
                                  ?NUMBER))))))))))))
*/
fof(a6327,axiom,! [ATTRCLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [EL] : ((s_instance(EL, s_Entity) => ((s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ATTRCLASS, s_Attribute) & s_instance(ATTRCLASS, s_SetOrClass)) => (s_exhaustiveAttribute5(ATTRCLASS, ROW0, ROW1, ROW2, ROW3) => (~ (s_instance(EL, ATTRCLASS) & (~ ? [ATTR,NUMBER] : (((EL = ATTR) & (ATTR = s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER))))))))))))).

/*
(forall (?ATTRCLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?EL)
  (=> (instance ?EL Entity)
   (=>
    (and (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
         (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
         (instance ?ROW0 Attribute) (subclass ?ATTRCLASS Attribute)
         (instance ?ATTRCLASS SetOrClass))
    (=> (exhaustiveAttribute6 ?ATTRCLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
     (not (and (instance ?EL ?ATTRCLASS)
               (not (exists (?ATTR ?NUMBER)
                     (and (equal ?EL ?ATTR)
                          (equal ?ATTR
                                 (ListOrderFn
                                  (ListFn6
                                   ?ROW0
                                   ?ROW1
                                   ?ROW2
                                   ?ROW3
                                   ?ROW4
                                   ?ROW5)
                                  ?NUMBER))))))))))))
*/
fof(a6328,axiom,! [ATTRCLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [EL] : ((s_instance(EL, s_Entity) => ((s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ATTRCLASS, s_Attribute) & s_instance(ATTRCLASS, s_SetOrClass)) => (s_exhaustiveAttribute6(ATTRCLASS, ROW0, ROW1, ROW2, ROW3, ROW4) => (~ (s_instance(EL, ATTRCLASS) & (~ ? [ATTR,NUMBER] : (((EL = ATTR) & (ATTR = s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER))))))))))))).

/*
(forall (?ATTRCLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?EL)
  (=> (instance ?EL Entity)
   (=>
    (and (instance ?ROW5 Attribute) (instance ?ROW4 Attribute)
         (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
         (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
         (subclass ?ATTRCLASS Attribute)
         (instance ?ATTRCLASS SetOrClass))
    (=>
     (exhaustiveAttribute7 ?ATTRCLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
      ?ROW5)
     (not (and (instance ?EL ?ATTRCLASS)
               (not (exists (?ATTR ?NUMBER)
                     (and (equal ?EL ?ATTR)
                          (equal ?ATTR
                                 (ListOrderFn
                                  (ListFn7
                                   ?ROW0
                                   ?ROW1
                                   ?ROW2
                                   ?ROW3
                                   ?ROW4
                                   ?ROW5
                                   ?ROW6)
                                  ?NUMBER))))))))))))
*/
fof(a6329,axiom,! [ATTRCLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [EL] : ((s_instance(EL, s_Entity) => ((s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_subclass(ATTRCLASS, s_Attribute) & s_instance(ATTRCLASS, s_SetOrClass)) => (s_exhaustiveAttribute7(ATTRCLASS, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (~ (s_instance(EL, ATTRCLASS) & (~ ? [ATTR,NUMBER] : (((EL = ATTR) & (ATTR = s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER))))))))))))).

/*
(instance exhaustiveDecomposition Predicate)
*/
fof(a6330,axiom,s_instance(s_exhaustiveDecomposition_m, s_Predicate)).

/*
(instance exhaustiveDecomposition VariableArityRelation)
*/
fof(a6331,axiom,s_instance(s_exhaustiveDecomposition_m, s_VariableArityRelation)).

/*
(forall (?ELEMENT ?ROW1 ?ROW0)
 (=> (instance ?ELEMENT Entity)
  (=> (exhaustiveDecomposition2 ?ROW0 ?ROW1)
   (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
    (instance ?ELEMENT Class)))))
*/
fof(a6332,axiom,! [ELEMENT,ROW1,ROW0] : ((s_instance(ELEMENT, s_Entity) => (s_exhaustiveDecomposition2(ROW0, ROW1) => (s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?ELEMENT Entity))
  (=> (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2)
   (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
    (instance ?ELEMENT Class)))))
*/
fof(a6333,axiom,! [ELEMENT,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_exhaustiveDecomposition3(ROW0, ROW1, ROW2) => (s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?ELEMENT Entity))
  (=> (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
    (instance ?ELEMENT Class)))))
*/
fof(a6334,axiom,! [ELEMENT,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3) => (s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ELEMENT Entity))
  (=> (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
    (instance ?ELEMENT Class)))))
*/
fof(a6335,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?ELEMENT Entity))
  (=> (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (=> (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
    (instance ?ELEMENT Class)))))
*/
fof(a6336,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ELEMENT Entity))
  (=>
   (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
   (=>
    (inList ?ELEMENT
     (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
    (instance ?ELEMENT Class)))))
*/
fof(a6337,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => s_instance(ELEMENT, s_Class)))))).

/*
(instance disjointDecomposition Predicate)
*/
fof(a6338,axiom,s_instance(s_disjointDecomposition_m, s_Predicate)).

/*
(instance disjointDecomposition VariableArityRelation)
*/
fof(a6339,axiom,s_instance(s_disjointDecomposition_m, s_VariableArityRelation)).

/*
(forall (?ELEMENT ?ROW1 ?ROW0)
 (=> (instance ?ELEMENT Entity)
  (=> (disjointDecomposition2 ?ROW0 ?ROW1)
   (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
    (instance ?ELEMENT Class)))))
*/
fof(a6340,axiom,! [ELEMENT,ROW1,ROW0] : ((s_instance(ELEMENT, s_Entity) => (s_disjointDecomposition2(ROW0, ROW1) => (s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?ELEMENT Entity))
  (=> (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2)
   (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
    (instance ?ELEMENT Class)))))
*/
fof(a6341,axiom,! [ELEMENT,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_disjointDecomposition3(ROW0, ROW1, ROW2) => (s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?ELEMENT Entity))
  (=> (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
    (instance ?ELEMENT Class)))))
*/
fof(a6342,axiom,! [ELEMENT,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3) => (s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ELEMENT Entity))
  (=> (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
    (instance ?ELEMENT Class)))))
*/
fof(a6343,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?ELEMENT Entity))
  (=> (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (=> (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
    (instance ?ELEMENT Class)))))
*/
fof(a6344,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => s_instance(ELEMENT, s_Class)))))).

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?ELEMENT Entity))
  (=>
   (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
   (=>
    (inList ?ELEMENT
     (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
    (instance ?ELEMENT Class)))))
*/
fof(a6345,axiom,! [ELEMENT,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(ELEMENT, s_Entity)) => (s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => s_instance(ELEMENT, s_Class)))))).

/*
(instance partition Predicate)
*/
fof(a6346,axiom,s_instance(s_partition_m, s_Predicate)).

/*
(instance partition VariableArityRelation)
*/
fof(a6347,axiom,s_instance(s_partition_m, s_VariableArityRelation)).

/*
(forall (?ROW1 ?ROW0)
 (<=> (partition2 ?ROW0 ?ROW1)
  (and (exhaustiveDecomposition2 ?ROW0 ?ROW1)
       (disjointDecomposition2 ?ROW0 ?ROW1))))
*/
fof(a6348,axiom,! [ROW1,ROW0] : ((s_partition2(ROW0, ROW1) <=> (s_exhaustiveDecomposition2(ROW0, ROW1) & s_disjointDecomposition2(ROW0, ROW1))))).

/*
(forall (?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class))
  (<=> (partition3 ?ROW0 ?ROW1 ?ROW2)
   (and (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2)
        (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2)))))
*/
fof(a6349,axiom,! [ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class)) => (s_partition3(ROW0, ROW1, ROW2) <=> (s_exhaustiveDecomposition3(ROW0, ROW1, ROW2) & s_disjointDecomposition3(ROW0, ROW1, ROW2)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (<=> (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (and (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
        (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))))
*/
fof(a6350,axiom,! [ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_partition4(ROW0, ROW1, ROW2, ROW3) <=> (s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (<=> (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (and (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
        (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))))
*/
fof(a6351,axiom,! [ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4) <=> (s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class))
  (<=> (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (and (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
        (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))))
*/
fof(a6352,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) <=> (s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class))
  (<=> (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
   (and (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
         ?ROW6)
        (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
         ?ROW6)))))
*/
fof(a6353,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) <=> (s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))))).

/*
(instance relatedInternalConcept BinaryPredicate)
*/
fof(a6354,axiom,s_instance(s_relatedInternalConcept_m, s_BinaryPredicate)).

/*
(instance relatedInternalConcept EquivalenceRelation)
*/
fof(a6355,axiom,s_instance(s_relatedInternalConcept_m, s_EquivalenceRelation)).

/*
(instance relatedExternalConcept TernaryPredicate)
*/
fof(a6356,axiom,s_instance(s_relatedExternalConcept_m, s_TernaryPredicate)).

/*
(subrelation synonymousExternalConcept relatedExternalConcept)
*/
fof(a6357,axiom,s_subrelation(s_synonymousExternalConcept_m, s_relatedExternalConcept_m)).

/*
(disjointRelation synonymousExternalConcept subsumedExternalConcept)
*/
fof(a6358,axiom,s_disjointRelation(s_synonymousExternalConcept_m, s_subsumedExternalConcept_m)).

/*
(disjointRelation synonymousExternalConcept subsumingExternalConcept)
*/
fof(a6359,axiom,s_disjointRelation(s_synonymousExternalConcept_m, s_subsumingExternalConcept_m)).

/*
(disjointRelation subsumedExternalConcept subsumingExternalConcept)
*/
fof(a6360,axiom,s_disjointRelation(s_subsumedExternalConcept_m, s_subsumingExternalConcept_m)).

/*
(subrelation subsumingExternalConcept relatedExternalConcept)
*/
fof(a6361,axiom,s_subrelation(s_subsumingExternalConcept_m, s_relatedExternalConcept_m)).

/*
(subrelation subsumedExternalConcept relatedExternalConcept)
*/
fof(a6362,axiom,s_subrelation(s_subsumedExternalConcept_m, s_relatedExternalConcept_m)).

/*
(instance externalImage BinaryPredicate)
*/
fof(a6363,axiom,s_instance(s_externalImage_m, s_BinaryPredicate)).

/*
(instance subAttribute BinaryPredicate)
*/
fof(a6364,axiom,s_instance(s_subAttribute_m, s_BinaryPredicate)).

/*
(instance subAttribute PartialOrderingRelation)
*/
fof(a6365,axiom,s_instance(s_subAttribute_m, s_PartialOrderingRelation)).

/*
(disjointRelation subAttribute successorAttribute)
*/
fof(a6366,axiom,s_disjointRelation(s_subAttribute_m, s_successorAttribute_m)).

/*
(forall (?ATTR2 ?ATTR1)
 (forall (?OBJ)
  (=> (instance ?OBJ Entity)
   (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute))
    (=> (subAttribute ?ATTR1 ?ATTR2)
     (=> (property ?OBJ ?ATTR1) (property ?OBJ ?ATTR2)))))))
*/
fof(a6367,axiom,! [ATTR2,ATTR1] : (! [OBJ] : ((s_instance(OBJ, s_Entity) => ((s_instance(ATTR1, s_Attribute) & s_instance(ATTR2, s_Attribute)) => (s_subAttribute(ATTR1, ATTR2) => (s_property(OBJ, ATTR1) => s_property(OBJ, ATTR2)))))))).

/*
(forall (?CLASS ?ATTR2 ?ATTR1)
 (=> (and (instance ?CLASS SetOrClass) (instance ?ATTR1 Attribute))
  (=> (and (subAttribute ?ATTR1 ?ATTR2) (instance ?ATTR2 ?CLASS))
   (instance ?ATTR1 ?CLASS))))
*/
fof(a6368,axiom,! [CLASS,ATTR2,ATTR1] : (((s_instance(CLASS, s_SetOrClass) & s_instance(ATTR1, s_Attribute)) => ((s_subAttribute(ATTR1, ATTR2) & s_instance(ATTR2, CLASS)) => s_instance(ATTR1, CLASS))))).

/*
(instance successorAttribute BinaryPredicate)
*/
fof(a6369,axiom,s_instance(s_successorAttribute_m, s_BinaryPredicate)).

/*
(instance successorAttribute AsymmetricRelation)
*/
fof(a6370,axiom,s_instance(s_successorAttribute_m, s_AsymmetricRelation)).

/*
(forall (?ATTR1 ?TIME1 ?ATTR2 ?ENTITY)
 (exists (?TIME2)
  (and (instance ?TIME2 TimePosition)
       (=>
        (and (instance ?ENTITY Entity) (instance ?ATTR2 Attribute)
             (instance ?TIME1 TimePosition)
             (instance ?ATTR1 Attribute))
        (=>
         (and (successorAttribute ?ATTR1 ?ATTR2)
              (holdsDuring ?TIME1 (property ?ENTITY ?ATTR2)))
         (and (temporalPart ?TIME2 (PastFn ?TIME1))
              (holdsDuring ?TIME2 (property ?ENTITY ?ATTR1))))))))
*/
%% no translation to TPTP available.

/*
(instance successorAttributeClosure BinaryPredicate)
*/
fof(a6371,axiom,s_instance(s_successorAttributeClosure_m, s_BinaryPredicate)).

/*
(instance successorAttributeClosure TransitiveRelation)
*/
fof(a6372,axiom,s_instance(s_successorAttributeClosure_m, s_TransitiveRelation)).

/*
(instance successorAttributeClosure IrreflexiveRelation)
*/
fof(a6373,axiom,s_instance(s_successorAttributeClosure_m, s_IrreflexiveRelation)).

/*
(instance successorAttributeClosure PartialValuedRelation)
*/
fof(a6374,axiom,s_instance(s_successorAttributeClosure_m, s_PartialValuedRelation)).

/*
(forall (?ATTR2 ?ATTR1)
 (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute))
  (=> (successorAttribute ?ATTR1 ?ATTR2)
   (successorAttributeClosure ?ATTR1 ?ATTR2))))
*/
fof(a6375,axiom,! [ATTR2,ATTR1] : (((s_instance(ATTR1, s_Attribute) & s_instance(ATTR2, s_Attribute)) => (s_successorAttribute(ATTR1, ATTR2) => s_successorAttributeClosure(ATTR1, ATTR2))))).

/*
(instance greaterThanByQuality TernaryPredicate)
*/
fof(a6376,axiom,s_instance(s_greaterThanByQuality_m, s_TernaryPredicate)).

/*
(forall (?E3 ?E1 ?ATT ?E2)
 (=>
  (and (instance ?E2 Entity) (instance ?ATT Attribute)
       (instance ?E1 Entity) (instance ?E3 Entity))
  (=>
   (and (greaterThanByQuality ?E1 ?E2 ?ATT)
        (greaterThanByQuality ?E2 ?E3 ?ATT))
   (greaterThanByQuality ?E1 ?E3 ?ATT))))
*/
fof(a6377,axiom,! [E3,E1,ATT,E2] : (((s_instance(E2, s_Entity) & s_instance(ATT, s_Attribute) & s_instance(E1, s_Entity) & s_instance(E3, s_Entity)) => ((s_greaterThanByQuality(E1, E2, ATT) & s_greaterThanByQuality(E2, E3, ATT)) => s_greaterThanByQuality(E1, E3, ATT))))).

/*
(forall (?E1 ?ATT ?E2)
 (=>
  (and (instance ?E2 Entity) (instance ?ATT Attribute)
       (instance ?E1 Entity))
  (=> (greaterThanByQuality ?E1 ?E2 ?ATT)
   (not (greaterThanByQuality ?E2 ?E1 ?ATT)))))
*/
fof(a6378,axiom,! [E1,ATT,E2] : (((s_instance(E2, s_Entity) & s_instance(ATT, s_Attribute) & s_instance(E1, s_Entity)) => (s_greaterThanByQuality(E1, E2, ATT) => (~ s_greaterThanByQuality(E2, E1, ATT)))))).

/*
(forall (?E1 ?ATT ?E2)
 (=>
  (and (instance ?E2 Entity) (instance ?ATT Attribute)
       (instance ?E1 Entity))
  (=> (greaterThanByQuality ?E1 ?E2 ?ATT) (not (equal ?E2 ?E1)))))
*/
fof(a6379,axiom,! [E1,ATT,E2] : (((s_instance(E2, s_Entity) & s_instance(ATT, s_Attribute) & s_instance(E1, s_Entity)) => (s_greaterThanByQuality(E1, E2, ATT) => (~ (E2 = E1)))))).

/*
(instance entails BinaryPredicate)
*/
fof(a6380,axiom,s_instance(s_entails_m, s_BinaryPredicate)).

/*
(instance AssignmentFn Function)
*/
fof(a6381,axiom,s_instance(s_AssignmentFn_m, s_Function)).

/*
(instance AssignmentFn VariableArityRelation)
*/
fof(a6382,axiom,s_instance(s_AssignmentFn_m, s_VariableArityRelation)).

/*
(range AssignmentFn Entity)
*/
fof(a6383,axiom,s_range(s_AssignmentFn_m, s_Entity)).

/*
(instance PowerSetFn UnaryFunction)
*/
fof(a6384,axiom,s_instance(s_PowerSetFn_m, s_UnaryFunction)).

/*
(instance PowerSetFn TotalValuedRelation)
*/
fof(a6385,axiom,s_instance(s_PowerSetFn_m, s_TotalValuedRelation)).

/*
(rangeSubclass PowerSetFn SetOrClass)
*/
fof(a6386,axiom,s_rangeSubclass(s_PowerSetFn_m, s_SetOrClass)).

/*
(partition3 Entity Physical Abstract)
*/
fof(a6387,axiom,s_partition3(s_Entity, s_Physical, s_Abstract)).

/*
(exists (?THING) (instance ?THING Entity))
*/
fof(a6388,axiom,? [THING] : (s_instance(THING, s_Entity))).

/*
(forall (?CLASS) (<=> (instance ?CLASS Class) (subclass ?CLASS Entity)))
*/
fof(a6389,axiom,! [CLASS] : ((s_instance(CLASS, s_Class) <=> s_subclass(CLASS, s_Entity)))).

/*
(subclass Physical Entity)
*/
fof(a6390,axiom,s_subclass(s_Physical, s_Entity)).

/*
(partition3 Physical Object Process)
*/
fof(a6391,axiom,s_partition3(s_Physical, s_Object, s_Process)).

/*
(forall (?PHYS)
 (exists (?LOC ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?LOC Object))
       (=> (instance ?PHYS Physical)
        (and (located ?PHYS ?LOC) (time ?PHYS ?TIME))))))
*/
fof(a6392,axiom,! [PHYS] : (? [LOC,TIME] : (((s_instance(TIME, s_TimePosition) & s_instance(LOC, s_Object)) & (s_instance(PHYS, s_Physical) => (s_located(PHYS, LOC) & s_time(PHYS, TIME))))))).

/*
(subclass Object Physical)
*/
fof(a6393,axiom,s_subclass(s_Object, s_Physical)).

/*
(subclass SelfConnectedObject Object)
*/
fof(a6394,axiom,s_subclass(s_SelfConnectedObject, s_Object)).

/*
(subclass OrganicThing SelfConnectedObject)
*/
fof(a6395,axiom,s_subclass(s_OrganicThing, s_SelfConnectedObject)).

/*
(instance FrontFn SpatialRelation)
*/
fof(a6396,axiom,s_instance(s_FrontFn_m, s_SpatialRelation)).

/*
(instance FrontFn PartialValuedRelation)
*/
fof(a6397,axiom,s_instance(s_FrontFn_m, s_PartialValuedRelation)).

/*
(instance FrontFn UnaryFunction)
*/
fof(a6398,axiom,s_instance(s_FrontFn_m, s_UnaryFunction)).

/*
(instance FrontFn AsymmetricRelation)
*/
fof(a6399,axiom,s_instance(s_FrontFn_m, s_AsymmetricRelation)).

/*
(instance FrontFn IrreflexiveRelation)
*/
fof(a6400,axiom,s_instance(s_FrontFn_m, s_IrreflexiveRelation)).

/*
(range FrontFn SelfConnectedObject)
*/
fof(a6401,axiom,s_range(s_FrontFn_m, s_SelfConnectedObject)).

/*
(forall (?OBJ)
 (=> (instance ?OBJ SelfConnectedObject) (side (FrontFn ?OBJ) ?OBJ)))
*/
fof(a6402,axiom,! [OBJ] : ((s_instance(OBJ, s_SelfConnectedObject) => s_side(s_FrontFn(OBJ), OBJ)))).

/*
(instance BackFn SpatialRelation)
*/
fof(a6403,axiom,s_instance(s_BackFn_m, s_SpatialRelation)).

/*
(instance BackFn PartialValuedRelation)
*/
fof(a6404,axiom,s_instance(s_BackFn_m, s_PartialValuedRelation)).

/*
(instance BackFn UnaryFunction)
*/
fof(a6405,axiom,s_instance(s_BackFn_m, s_UnaryFunction)).

/*
(instance BackFn AsymmetricRelation)
*/
fof(a6406,axiom,s_instance(s_BackFn_m, s_AsymmetricRelation)).

/*
(instance BackFn IrreflexiveRelation)
*/
fof(a6407,axiom,s_instance(s_BackFn_m, s_IrreflexiveRelation)).

/*
(range BackFn SelfConnectedObject)
*/
fof(a6408,axiom,s_range(s_BackFn_m, s_SelfConnectedObject)).

/*
(forall (?OBJ)
 (=> (instance ?OBJ SelfConnectedObject) (side (BackFn ?OBJ) ?OBJ)))
*/
fof(a6409,axiom,! [OBJ] : ((s_instance(OBJ, s_SelfConnectedObject) => s_side(s_BackFn(OBJ), OBJ)))).

/*
(instance part SpatialRelation)
*/
fof(a6410,axiom,s_instance(s_part_m, s_SpatialRelation)).

/*
(instance part PartialOrderingRelation)
*/
fof(a6411,axiom,s_instance(s_part_m, s_PartialOrderingRelation)).

/*
(instance properPart AsymmetricRelation)
*/
fof(a6412,axiom,s_instance(s_properPart_m, s_AsymmetricRelation)).

/*
(instance properPart TransitiveRelation)
*/
fof(a6413,axiom,s_instance(s_properPart_m, s_TransitiveRelation)).

/*
(subrelation properPart part)
*/
fof(a6414,axiom,s_subrelation(s_properPart_m, s_part_m)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (properPart ?OBJ1 ?OBJ2)
   (and (part ?OBJ1 ?OBJ2) (not (part ?OBJ2 ?OBJ1))))))
*/
fof(a6415,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_properPart(OBJ1, OBJ2) <=> (s_part(OBJ1, OBJ2) & (~ s_part(OBJ2, OBJ1))))))).

/*
(subrelation piece part)
*/
fof(a6416,axiom,s_subrelation(s_piece_m, s_part_m)).

/*
(forall (?SUBSTANCE2 ?SUBSTANCE1)
 (forall (?CLASS)
  (=> (instance ?CLASS SetOrClass)
   (=>
    (and (instance ?SUBSTANCE1 Substance)
         (instance ?SUBSTANCE2 Substance))
    (=> (piece ?SUBSTANCE1 ?SUBSTANCE2)
     (=> (instance ?SUBSTANCE1 ?CLASS)
      (instance ?SUBSTANCE2 ?CLASS)))))))
*/
fof(a6417,axiom,! [SUBSTANCE2,SUBSTANCE1] : (! [CLASS] : ((s_instance(CLASS, s_SetOrClass) => ((s_instance(SUBSTANCE1, s_Substance) & s_instance(SUBSTANCE2, s_Substance)) => (s_piece(SUBSTANCE1, SUBSTANCE2) => (s_instance(SUBSTANCE1, CLASS) => s_instance(SUBSTANCE2, CLASS)))))))).

/*
(subrelation component part)
*/
fof(a6418,axiom,s_subrelation(s_component_m, s_part_m)).

/*
(instance material BinaryPredicate)
*/
fof(a6419,axiom,s_instance(s_material_m, s_BinaryPredicate)).

/*
(domainSubclass material 1 Substance)
*/
fof(a6420,axiom,s_domainSubclass(s_material_m, 1, s_Substance)).

/*
(subrelation contains partlyLocated)
*/
fof(a6421,axiom,s_subrelation(s_contains_m, s_partlyLocated_m)).

/*
(instance contains SpatialRelation)
*/
fof(a6422,axiom,s_instance(s_contains_m, s_SpatialRelation)).

/*
(instance contains AsymmetricRelation)
*/
fof(a6423,axiom,s_instance(s_contains_m, s_AsymmetricRelation)).

/*
(instance contains PartialValuedRelation)
*/
fof(a6424,axiom,s_instance(s_contains_m, s_PartialValuedRelation)).

/*
(disjointRelation contains part)
*/
fof(a6425,axiom,s_disjointRelation(s_contains_m, s_part_m)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?HOLE)
  (exists (?g2556)
   (and (instance ?g2556 Hole)
        (=> (instance ?HOLE Hole)
         (=>
          (and (instance ?OBJ1 SelfConnectedObject)
               (instance ?OBJ2 Object))
          (and (=> (contains ?OBJ1 ?OBJ2)
                (and (hole ?g2556 ?OBJ1) (properlyFills ?OBJ2 ?g2556)))
               (=> (and (hole ?HOLE ?OBJ1) (properlyFills ?OBJ2 ?HOLE))
                (contains ?OBJ1 ?OBJ2)))))))))
*/
fof(a6426,axiom,! [OBJ2,OBJ1] : (! [HOLE] : (? [G2556] : ((s_instance(G2556, s_Hole) & (s_instance(HOLE, s_Hole) => ((s_instance(OBJ1, s_SelfConnectedObject) & s_instance(OBJ2, s_Object)) => ((s_contains(OBJ1, OBJ2) => (s_hole(G2556, OBJ1) & s_properlyFills(OBJ2, G2556))) & ((s_hole(HOLE, OBJ1) & s_properlyFills(OBJ2, HOLE)) => s_contains(OBJ1, OBJ2)))))))))).

/*
(subclass Substance SelfConnectedObject)
*/
fof(a6427,axiom,s_subclass(s_Substance, s_SelfConnectedObject)).

/*
(partition3 Substance PureSubstance Mixture)
*/
fof(a6428,axiom,s_partition3(s_Substance, s_PureSubstance, s_Mixture)).

/*
(partition3 Substance SyntheticSubstance NaturalSubstance)
*/
fof(a6429,axiom,s_partition3(s_Substance, s_SyntheticSubstance, s_NaturalSubstance)).

/*
(forall (?PART ?OBJECTTYPE ?OBJECT)
 (=> (and (instance ?PART Object) (instance ?OBJECTTYPE SetOrClass))
  (=>
   (and (subclass ?OBJECTTYPE Substance)
        (and (instance ?OBJECT ?OBJECTTYPE) (part ?PART ?OBJECT)))
   (instance ?PART ?OBJECTTYPE))))
*/
fof(a6430,axiom,! [PART,OBJECTTYPE,OBJECT] : (((s_instance(PART, s_Object) & s_instance(OBJECTTYPE, s_SetOrClass)) => ((s_subclass(OBJECTTYPE, s_Substance) & (s_instance(OBJECT, OBJECTTYPE) & s_part(PART, OBJECT))) => s_instance(PART, OBJECTTYPE))))).

/*
(forall (?PART ?ATTR ?OBJ)
 (=> (and (instance ?PART Object) (instance ?ATTR Attribute))
  (=>
   (and (instance ?OBJ Substance)
        (and (attribute ?OBJ ?ATTR) (part ?PART ?OBJ)))
   (attribute ?PART ?ATTR))))
*/
fof(a6431,axiom,! [PART,ATTR,OBJ] : (((s_instance(PART, s_Object) & s_instance(ATTR, s_Attribute)) => ((s_instance(OBJ, s_Substance) & (s_attribute(OBJ, ATTR) & s_part(PART, OBJ))) => s_attribute(PART, ATTR))))).

/*
(instance SyntheticSubstance SetOrClass)
*/
fof(a6432,axiom,s_instance(s_SyntheticSubstance, s_SetOrClass)).

/*
(subclass SyntheticSubstance Substance)
*/
fof(a6433,axiom,s_subclass(s_SyntheticSubstance, s_Substance)).

/*
(forall (?SUBSTANCE)
 (forall (?PROCESS)
  (exists (?g2560)
   (and (=> (instance ?SUBSTANCE SyntheticSubstance)
         (and (instance ?g2560 IntentionalProcess)
              (and (result ?g2560 ?SUBSTANCE)
                   (instance ?SUBSTANCE Substance))))
        (=>
         (and (instance ?PROCESS IntentionalProcess)
              (and (result ?PROCESS ?SUBSTANCE)
                   (instance ?SUBSTANCE Substance)))
         (instance ?SUBSTANCE SyntheticSubstance))))))
*/
fof(a6434,axiom,! [SUBSTANCE] : (! [PROCESS] : (? [G2560] : (((s_instance(SUBSTANCE, s_SyntheticSubstance) => (s_instance(G2560, s_IntentionalProcess) & (s_result(G2560, SUBSTANCE) & s_instance(SUBSTANCE, s_Substance)))) & ((s_instance(PROCESS, s_IntentionalProcess) & (s_result(PROCESS, SUBSTANCE) & s_instance(SUBSTANCE, s_Substance))) => s_instance(SUBSTANCE, s_SyntheticSubstance))))))).

/*
(instance NaturalSubstance SetOrClass)
*/
fof(a6435,axiom,s_instance(s_NaturalSubstance, s_SetOrClass)).

/*
(subclass NaturalSubstance Substance)
*/
fof(a6436,axiom,s_subclass(s_NaturalSubstance, s_Substance)).

/*
(subclass PureSubstance Substance)
*/
fof(a6437,axiom,s_subclass(s_PureSubstance, s_Substance)).

/*
(partition3 PureSubstance CompoundSubstance ElementalSubstance)
*/
fof(a6438,axiom,s_partition3(s_PureSubstance, s_CompoundSubstance, s_ElementalSubstance)).

/*
(subclass ElementalSubstance PureSubstance)
*/
fof(a6439,axiom,s_subclass(s_ElementalSubstance, s_PureSubstance)).

/*
(instance Metal SetOrClass)
*/
fof(a6440,axiom,s_instance(s_Metal, s_SetOrClass)).

/*
(subclass Metal ElementalSubstance)
*/
fof(a6441,axiom,s_subclass(s_Metal, s_ElementalSubstance)).

/*
(instance Atom SetOrClass)
*/
fof(a6442,axiom,s_instance(s_Atom, s_SetOrClass)).

/*
(subclass Atom ElementalSubstance)
*/
fof(a6443,axiom,s_subclass(s_Atom, s_ElementalSubstance)).

/*
(forall (?ATOM)
 (exists (?PROTON ?ELECTRON)
  (and (and (instance ?ELECTRON CorpuscularObject)
            (instance ?PROTON CorpuscularObject))
       (=> (instance ?ATOM Atom)
        (and (component ?PROTON ?ATOM)
             (and (component ?ELECTRON ?ATOM)
                  (and (instance ?PROTON Proton)
                       (instance ?ELECTRON Electron))))))))
*/
fof(a6444,axiom,! [ATOM] : (? [PROTON,ELECTRON] : (((s_instance(ELECTRON, s_CorpuscularObject) & s_instance(PROTON, s_CorpuscularObject)) & (s_instance(ATOM, s_Atom) => (s_component(PROTON, ATOM) & (s_component(ELECTRON, ATOM) & (s_instance(PROTON, s_Proton) & s_instance(ELECTRON, s_Electron))))))))).

/*
(forall (?ATOM)
 (forall (?NUCLEUS1 ?NUCLEUS2)
  (=>
   (and (instance ?NUCLEUS2 CorpuscularObject)
        (instance ?NUCLEUS1 CorpuscularObject))
   (=> (instance ?ATOM Atom)
    (=>
     (and (component ?NUCLEUS1 ?ATOM)
          (and (component ?NUCLEUS2 ?ATOM)
               (and (instance ?NUCLEUS1 AtomicNucleus)
                    (instance ?NUCLEUS2 AtomicNucleus))))
     (equal ?NUCLEUS1 ?NUCLEUS2))))))
*/
fof(a6445,axiom,! [ATOM] : (! [NUCLEUS1,NUCLEUS2] : (((s_instance(NUCLEUS2, s_CorpuscularObject) & s_instance(NUCLEUS1, s_CorpuscularObject)) => (s_instance(ATOM, s_Atom) => ((s_component(NUCLEUS1, ATOM) & (s_component(NUCLEUS2, ATOM) & (s_instance(NUCLEUS1, s_AtomicNucleus) & s_instance(NUCLEUS2, s_AtomicNucleus)))) => (NUCLEUS1 = NUCLEUS2))))))).

/*
(instance ElementalSubstance SetOrClass)
*/
fof(a6446,axiom,s_instance(s_ElementalSubstance, s_SetOrClass)).

/*
(subclass SubatomicParticle ElementalSubstance)
*/
fof(a6447,axiom,s_subclass(s_SubatomicParticle, s_ElementalSubstance)).

/*
(forall (?PARTICLE)
 (exists (?ATOM)
  (and (instance ?ATOM Object)
       (=> (instance ?PARTICLE SubatomicParticle)
        (and (instance ?ATOM Atom) (part ?PARTICLE ?ATOM))))))
*/
fof(a6448,axiom,! [PARTICLE] : (? [ATOM] : ((s_instance(ATOM, s_Object) & (s_instance(PARTICLE, s_SubatomicParticle) => (s_instance(ATOM, s_Atom) & s_part(PARTICLE, ATOM))))))).

/*
(instance AtomicNucleus SetOrClass)
*/
fof(a6449,axiom,s_instance(s_AtomicNucleus, s_SetOrClass)).

/*
(subclass AtomicNucleus SubatomicParticle)
*/
fof(a6450,axiom,s_subclass(s_AtomicNucleus, s_SubatomicParticle)).

/*
(forall (?NUCLEUS)
 (exists (?NEUTRON ?PROTON)
  (and (and (instance ?PROTON CorpuscularObject)
            (instance ?NEUTRON CorpuscularObject))
       (=> (instance ?NUCLEUS AtomicNucleus)
        (and (component ?NEUTRON ?NUCLEUS)
             (and (component ?PROTON ?NUCLEUS)
                  (and (instance ?NEUTRON Neutron)
                       (instance ?PROTON Proton))))))))
*/
fof(a6451,axiom,! [NUCLEUS] : (? [NEUTRON,PROTON] : (((s_instance(PROTON, s_CorpuscularObject) & s_instance(NEUTRON, s_CorpuscularObject)) & (s_instance(NUCLEUS, s_AtomicNucleus) => (s_component(NEUTRON, NUCLEUS) & (s_component(PROTON, NUCLEUS) & (s_instance(NEUTRON, s_Neutron) & s_instance(PROTON, s_Proton))))))))).

/*
(instance Electron SetOrClass)
*/
fof(a6452,axiom,s_instance(s_Electron, s_SetOrClass)).

/*
(subclass Electron SubatomicParticle)
*/
fof(a6453,axiom,s_subclass(s_Electron, s_SubatomicParticle)).

/*
(instance Proton SetOrClass)
*/
fof(a6454,axiom,s_instance(s_Proton, s_SetOrClass)).

/*
(subclass Proton SubatomicParticle)
*/
fof(a6455,axiom,s_subclass(s_Proton, s_SubatomicParticle)).

/*
(instance Neutron SetOrClass)
*/
fof(a6456,axiom,s_instance(s_Neutron, s_SetOrClass)).

/*
(instance SubatomicParticle SetOrClass)
*/
fof(a6457,axiom,s_instance(s_SubatomicParticle, s_SetOrClass)).

/*
(subclass Neutron SubatomicParticle)
*/
fof(a6458,axiom,s_subclass(s_Neutron, s_SubatomicParticle)).

/*
(instance PureSubstance SetOrClass)
*/
fof(a6459,axiom,s_instance(s_PureSubstance, s_SetOrClass)).

/*
(subclass CompoundSubstance PureSubstance)
*/
fof(a6460,axiom,s_subclass(s_CompoundSubstance, s_PureSubstance)).

/*
(subclass Mixture Substance)
*/
fof(a6461,axiom,s_subclass(s_Mixture, s_Substance)).

/*
(forall (?MIXTURE)
 (exists (?PURE1 ?PURE2)
  (and (and (instance ?PURE2 Object) (instance ?PURE1 Object))
       (=> (instance ?MIXTURE Mixture)
        (and (instance ?PURE1 PureSubstance)
             (and (instance ?PURE2 PureSubstance)
                  (and (not (equal ?PURE1 ?PURE2))
                       (and (part ?PURE1 ?MIXTURE)
                            (part ?PURE2 ?MIXTURE)))))))))
*/
fof(a6462,axiom,! [MIXTURE] : (? [PURE1,PURE2] : (((s_instance(PURE2, s_Object) & s_instance(PURE1, s_Object)) & (s_instance(MIXTURE, s_Mixture) => (s_instance(PURE1, s_PureSubstance) & (s_instance(PURE2, s_PureSubstance) & ((~ (PURE1 = PURE2)) & (s_part(PURE1, MIXTURE) & s_part(PURE2, MIXTURE)))))))))).

/*
(forall (?MIXTURE ?SUBSTANCE)
 (=> (instance ?SUBSTANCE Object)
  (=>
   (and (instance ?MIXTURE Mixture)
        (and (part ?SUBSTANCE ?MIXTURE)
             (not (instance ?SUBSTANCE Mixture))))
   (instance ?SUBSTANCE PureSubstance))))
*/
fof(a6463,axiom,! [MIXTURE,SUBSTANCE] : ((s_instance(SUBSTANCE, s_Object) => ((s_instance(MIXTURE, s_Mixture) & (s_part(SUBSTANCE, MIXTURE) & (~ s_instance(SUBSTANCE, s_Mixture)))) => s_instance(SUBSTANCE, s_PureSubstance))))).

/*
(subclass CorpuscularObject SelfConnectedObject)
*/
fof(a6464,axiom,s_subclass(s_CorpuscularObject, s_SelfConnectedObject)).

/*
(disjoint CorpuscularObject Substance)
*/
fof(a6465,axiom,s_disjoint(s_CorpuscularObject, s_Substance)).

/*
(forall (?OBJ)
 (exists (?SUBSTANCE1 ?SUBSTANCE2)
  (and (and (subclass ?SUBSTANCE2 Substance)
            (instance ?SUBSTANCE2 SetOrClass)
            (instance ?SUBSTANCE1 SetOrClass)
            (subclass ?SUBSTANCE1 Substance))
       (=> (instance ?OBJ CorpuscularObject)
        (and (subclass ?SUBSTANCE1 Substance)
             (and (subclass ?SUBSTANCE2 Substance)
                  (and (material ?SUBSTANCE1 ?OBJ)
                       (and (material ?SUBSTANCE2 ?OBJ)
                            (not (equal
                                  ?SUBSTANCE1
                                  ?SUBSTANCE2))))))))))
*/
fof(a6466,axiom,! [OBJ] : (? [SUBSTANCE1,SUBSTANCE2] : (((s_subclass(SUBSTANCE2, s_Substance) & s_instance(SUBSTANCE2, s_SetOrClass) & s_instance(SUBSTANCE1, s_SetOrClass) & s_subclass(SUBSTANCE1, s_Substance)) & (s_instance(OBJ, s_CorpuscularObject) => (s_subclass(SUBSTANCE1, s_Substance) & (s_subclass(SUBSTANCE2, s_Substance) & (s_material(SUBSTANCE1, OBJ) & (s_material(SUBSTANCE2, OBJ) & (~ (SUBSTANCE1 = SUBSTANCE2))))))))))).

/*
(subclass Region Object)
*/
fof(a6467,axiom,s_subclass(s_Region, s_Object)).

/*
(forall (?REGION)
 (exists (?PHYS)
  (and (instance ?PHYS Physical)
       (=> (instance ?REGION Region) (located ?PHYS ?REGION)))))
*/
fof(a6468,axiom,! [REGION] : (? [PHYS] : ((s_instance(PHYS, s_Physical) & (s_instance(REGION, s_Region) => s_located(PHYS, REGION)))))).

/*
(subclass Collection Object)
*/
fof(a6469,axiom,s_subclass(s_Collection, s_Object)).

/*
(disjoint Collection SelfConnectedObject)
*/
fof(a6470,axiom,s_disjoint(s_Collection, s_SelfConnectedObject)).

/*
(forall (?COLL)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?COLL Collection) (member ?OBJ ?COLL)))))
*/
fof(a6471,axiom,! [COLL] : (? [OBJ] : ((s_instance(OBJ, s_Object) & (s_instance(COLL, s_Collection) => s_member(OBJ, COLL)))))).

/*
(subrelation member part)
*/
fof(a6472,axiom,s_subrelation(s_member_m, s_part_m)).

/*
(instance member AsymmetricRelation)
*/
fof(a6473,axiom,s_instance(s_member_m, s_AsymmetricRelation)).

/*
(instance member IntransitiveRelation)
*/
fof(a6474,axiom,s_instance(s_member_m, s_IntransitiveRelation)).

/*
(instance subCollection BinaryPredicate)
*/
fof(a6475,axiom,s_instance(s_subCollection_m, s_BinaryPredicate)).

/*
(instance subCollection PartialOrderingRelation)
*/
fof(a6476,axiom,s_instance(s_subCollection_m, s_PartialOrderingRelation)).

/*
(subrelation subCollection part)
*/
fof(a6477,axiom,s_subrelation(s_subCollection_m, s_part_m)).

/*
(forall (?COLL2 ?COLL1)
 (forall (?MEMBER)
  (exists (?g2577)
   (and (instance ?g2577 Object)
        (=> (instance ?MEMBER Object)
         (=>
          (and (instance ?COLL1 Collection)
               (instance ?COLL2 Collection))
          (and (=> (subCollection ?COLL1 ?COLL2)
                (=> (member ?MEMBER ?COLL1) (member ?MEMBER ?COLL2)))
               (=> (=> (member ?g2577 ?COLL1) (member ?g2577 ?COLL2))
                (subCollection ?COLL1 ?COLL2)))))))))
*/
fof(a6478,axiom,! [COLL2,COLL1] : (! [MEMBER] : (? [G2577] : ((s_instance(G2577, s_Object) & (s_instance(MEMBER, s_Object) => ((s_instance(COLL1, s_Collection) & s_instance(COLL2, s_Collection)) => ((s_subCollection(COLL1, COLL2) => (s_member(MEMBER, COLL1) => s_member(MEMBER, COLL2))) & ((s_member(G2577, COLL1) => s_member(G2577, COLL2)) => s_subCollection(COLL1, COLL2)))))))))).

/*
(subclass ContentBearingPhysical Physical)
*/
fof(a6479,axiom,s_subclass(s_ContentBearingPhysical, s_Physical)).

/*
(forall (?OBJ)
 (exists (?THING)
  (and (instance ?THING Entity)
       (=> (instance ?OBJ ContentBearingPhysical)
        (represents ?OBJ ?THING)))))
*/
fof(a6480,axiom,! [OBJ] : (? [THING] : ((s_instance(THING, s_Entity) & (s_instance(OBJ, s_ContentBearingPhysical) => s_represents(OBJ, THING)))))).

/*
(subclass ContentBearingProcess ContentBearingPhysical)
*/
fof(a6481,axiom,s_subclass(s_ContentBearingProcess, s_ContentBearingPhysical)).

/*
(subclass ContentBearingProcess Process)
*/
fof(a6482,axiom,s_subclass(s_ContentBearingProcess, s_Process)).

/*
(subclass ContentBearingObject CorpuscularObject)
*/
fof(a6483,axiom,s_subclass(s_ContentBearingObject, s_CorpuscularObject)).

/*
(subclass ContentBearingObject ContentBearingPhysical)
*/
fof(a6484,axiom,s_subclass(s_ContentBearingObject, s_ContentBearingPhysical)).

/*
(subclass SymbolicString ContentBearingObject)
*/
fof(a6485,axiom,s_subclass(s_SymbolicString, s_ContentBearingObject)).

/*
(instance Character SetOrClass)
*/
fof(a6486,axiom,s_instance(s_Character, s_SetOrClass)).

/*
(instance SymbolicString SetOrClass)
*/
fof(a6487,axiom,s_instance(s_SymbolicString, s_SetOrClass)).

/*
(subclass Character SymbolicString)
*/
fof(a6488,axiom,s_subclass(s_Character, s_SymbolicString)).

/*
(forall (?STRING)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?STRING SymbolicString)
        (and (part ?PART ?STRING) (instance ?PART Character))))))
*/
fof(a6489,axiom,! [STRING] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(STRING, s_SymbolicString) => (s_part(PART, STRING) & s_instance(PART, s_Character))))))).

/*
(instance containsInformation BinaryPredicate)
*/
fof(a6490,axiom,s_instance(s_containsInformation_m, s_BinaryPredicate)).

/*
(instance containsInformation AsymmetricRelation)
*/
fof(a6491,axiom,s_instance(s_containsInformation_m, s_AsymmetricRelation)).

/*
(subrelation containsInformation represents)
*/
fof(a6492,axiom,s_subrelation(s_containsInformation_m, s_represents_m)).

/*
(subclass Icon ContentBearingPhysical)
*/
fof(a6493,axiom,s_subclass(s_Icon, s_ContentBearingPhysical)).

/*
(instance MotionPicture SetOrClass)
*/
fof(a6494,axiom,s_instance(s_MotionPicture, s_SetOrClass)).

/*
(subclass MotionPicture Text)
*/
fof(a6495,axiom,s_subclass(s_MotionPicture, s_Text)).

/*
(instance ContentBearingPhysical SetOrClass)
*/
fof(a6496,axiom,s_instance(s_ContentBearingPhysical, s_SetOrClass)).

/*
(subclass LinguisticExpression ContentBearingPhysical)
*/
fof(a6497,axiom,s_subclass(s_LinguisticExpression, s_ContentBearingPhysical)).

/*
(disjoint LinguisticExpression Icon)
*/
fof(a6498,axiom,s_disjoint(s_LinguisticExpression, s_Icon)).

/*
(subclass Language LinguisticExpression)
*/
fof(a6499,axiom,s_subclass(s_Language, s_LinguisticExpression)).

/*
(disjointDecomposition4 Language AnimalLanguage HumanLanguage
 ComputerLanguage)
*/
fof(a6500,axiom,s_disjointDecomposition4(s_Language, s_AnimalLanguage, s_HumanLanguage, s_ComputerLanguage)).

/*
(instance AnimalLanguage SetOrClass)
*/
fof(a6501,axiom,s_instance(s_AnimalLanguage, s_SetOrClass)).

/*
(subclass AnimalLanguage Language)
*/
fof(a6502,axiom,s_subclass(s_AnimalLanguage, s_Language)).

/*
(forall (?LANG ?AGENT ?PROC)
 (=> (and (instance ?AGENT Agent) (instance ?PROC Process))
  (=>
   (and (instance ?LANG AnimalLanguage)
        (and (agent ?PROC ?AGENT) (instrument ?PROC ?LANG)))
   (and (instance ?AGENT Animal) (not (instance ?AGENT Human))))))
*/
fof(a6503,axiom,! [LANG,AGENT,PROC] : (((s_instance(AGENT, s_Agent) & s_instance(PROC, s_Process)) => ((s_instance(LANG, s_AnimalLanguage) & (s_agent(PROC, AGENT) & s_instrument(PROC, LANG))) => (s_instance(AGENT, s_Animal) & (~ s_instance(AGENT, s_Human))))))).

/*
(subclass ArtificialLanguage Language)
*/
fof(a6504,axiom,s_subclass(s_ArtificialLanguage, s_Language)).

/*
(instance ComputerLanguage SetOrClass)
*/
fof(a6505,axiom,s_instance(s_ComputerLanguage, s_SetOrClass)).

/*
(subclass ComputerLanguage ArtificialLanguage)
*/
fof(a6506,axiom,s_subclass(s_ComputerLanguage, s_ArtificialLanguage)).

/*
(forall (?LANG ?AGENT ?PROC)
 (=> (and (instance ?AGENT Agent) (instance ?PROC Process))
  (=>
   (and (instance ?LANG ComputerLanguage)
        (and (agent ?PROC ?AGENT) (instrument ?PROC ?LANG)))
   (instance ?AGENT Machine))))
*/
fof(a6507,axiom,! [LANG,AGENT,PROC] : (((s_instance(AGENT, s_Agent) & s_instance(PROC, s_Process)) => ((s_instance(LANG, s_ComputerLanguage) & (s_agent(PROC, AGENT) & s_instrument(PROC, LANG))) => s_instance(AGENT, s_Machine))))).

/*
(instance Language SetOrClass)
*/
fof(a6508,axiom,s_instance(s_Language, s_SetOrClass)).

/*
(subclass HumanLanguage Language)
*/
fof(a6509,axiom,s_subclass(s_HumanLanguage, s_Language)).

/*
(partition3 HumanLanguage NaturalLanguage ConstructedLanguage)
*/
fof(a6510,axiom,s_partition3(s_HumanLanguage, s_NaturalLanguage, s_ConstructedLanguage)).

/*
(partition3 HumanLanguage SpokenHumanLanguage ManualHumanLanguage)
*/
fof(a6511,axiom,s_partition3(s_HumanLanguage, s_SpokenHumanLanguage, s_ManualHumanLanguage)).

/*
(forall (?LANG ?AGENT ?PROC)
 (=> (and (instance ?AGENT Agent) (instance ?PROC Process))
  (=>
   (and (instance ?LANG HumanLanguage)
        (and (agent ?PROC ?AGENT) (instrument ?PROC ?LANG)))
   (instance ?AGENT Human))))
*/
fof(a6512,axiom,! [LANG,AGENT,PROC] : (((s_instance(AGENT, s_Agent) & s_instance(PROC, s_Process)) => ((s_instance(LANG, s_HumanLanguage) & (s_agent(PROC, AGENT) & s_instrument(PROC, LANG))) => s_instance(AGENT, s_Human))))).

/*
(subclass ConstructedLanguage HumanLanguage)
*/
fof(a6513,axiom,s_subclass(s_ConstructedLanguage, s_HumanLanguage)).

/*
(instance ConstructedLanguage SetOrClass)
*/
fof(a6514,axiom,s_instance(s_ConstructedLanguage, s_SetOrClass)).

/*
(instance ArtificialLanguage SetOrClass)
*/
fof(a6515,axiom,s_instance(s_ArtificialLanguage, s_SetOrClass)).

/*
(subclass ConstructedLanguage ArtificialLanguage)
*/
fof(a6516,axiom,s_subclass(s_ConstructedLanguage, s_ArtificialLanguage)).

/*
(forall (?LANG)
 (exists (?PLAN)
  (and (instance ?PLAN Process)
       (=> (instance ?LANG ConstructedLanguage)
        (and (instance ?PLAN Planning) (result ?PLAN ?LANG))))))
*/
fof(a6517,axiom,! [LANG] : (? [PLAN] : ((s_instance(PLAN, s_Process) & (s_instance(LANG, s_ConstructedLanguage) => (s_instance(PLAN, s_Planning) & s_result(PLAN, LANG))))))).

/*
(subclass NaturalLanguage HumanLanguage)
*/
fof(a6518,axiom,s_subclass(s_NaturalLanguage, s_HumanLanguage)).

/*
(instance ManualHumanLanguage SetOrClass)
*/
fof(a6519,axiom,s_instance(s_ManualHumanLanguage, s_SetOrClass)).

/*
(subclass ManualHumanLanguage HumanLanguage)
*/
fof(a6520,axiom,s_subclass(s_ManualHumanLanguage, s_HumanLanguage)).

/*
(instance HumanLanguage SetOrClass)
*/
fof(a6521,axiom,s_instance(s_HumanLanguage, s_SetOrClass)).

/*
(subclass SpokenHumanLanguage HumanLanguage)
*/
fof(a6522,axiom,s_subclass(s_SpokenHumanLanguage, s_HumanLanguage)).

/*
(instance NaturalLanguage SetOrClass)
*/
fof(a6523,axiom,s_instance(s_NaturalLanguage, s_SetOrClass)).

/*
(instance EnglishLanguage NaturalLanguage)
*/
fof(a6524,axiom,s_instance(s_EnglishLanguage, s_NaturalLanguage)).

/*
(instance SpokenHumanLanguage SetOrClass)
*/
fof(a6525,axiom,s_instance(s_SpokenHumanLanguage, s_SetOrClass)).

/*
(instance EnglishLanguage SpokenHumanLanguage)
*/
fof(a6526,axiom,s_instance(s_EnglishLanguage, s_SpokenHumanLanguage)).

/*
(subclass Word LinguisticExpression)
*/
fof(a6527,axiom,s_subclass(s_Word, s_LinguisticExpression)).

/*
(instance Formula SetOrClass)
*/
fof(a6528,axiom,s_instance(s_Formula, s_SetOrClass)).

/*
(subclass Formula Sentence)
*/
fof(a6529,axiom,s_subclass(s_Formula, s_Sentence)).

/*
(subclass Agent Object)
*/
fof(a6530,axiom,s_subclass(s_Agent, s_Object)).

/*
(forall (?AGENT)
 (exists (?PROC)
  (and (subclass ?PROC Process)
       (=> (instance ?AGENT Agent) (capability ?PROC agent ?AGENT)))))
*/
fof(a6531,axiom,! [AGENT] : (? [PROC] : ((s_subclass(PROC, s_Process) & (s_instance(AGENT, s_Agent) => s_capability(PROC, s_agent_m, AGENT)))))).

/*
(subclass SentientAgent Agent)
*/
fof(a6532,axiom,s_subclass(s_SentientAgent, s_Agent)).

/*
(instance SentientAgent SetOrClass)
*/
fof(a6533,axiom,s_instance(s_SentientAgent, s_SetOrClass)).

/*
(subclass CognitiveAgent SentientAgent)
*/
fof(a6534,axiom,s_subclass(s_CognitiveAgent, s_SentientAgent)).

/*
(subclass LegalAgent Agent)
*/
fof(a6535,axiom,s_subclass(s_LegalAgent, s_Agent)).

/*
(forall (?AGENT ?TIME)
 (=> (and (instance ?TIME TimePosition) (instance ?AGENT Object))
  (<=> (holdsDuring ?TIME (instance ?AGENT LegalAgent))
   (holdsDuring ?TIME
    (or (capability LegalAction agent ?AGENT)
        (capability LegalAction patient ?AGENT))))))
*/
%% no translation to TPTP available.

/*
(instance leader BinaryPredicate)
*/
fof(a6536,axiom,s_instance(s_leader_m, s_BinaryPredicate)).

/*
(instance leader AsymmetricRelation)
*/
fof(a6537,axiom,s_instance(s_leader_m, s_AsymmetricRelation)).

/*
(instance leader SingleValuedRelation)
*/
fof(a6538,axiom,s_instance(s_leader_m, s_SingleValuedRelation)).

/*
(forall (?TIME ?Y ?X)
 (=>
  (and (instance ?X Agent) (instance ?Y Human)
       (instance ?TIME TimePosition))
  (=> (holdsDuring ?TIME (leader ?X ?Y))
   (holdsDuring ?TIME (attribute ?Y Living)))))
*/
%% no translation to TPTP available.

/*
(subclass Process Physical)
*/
fof(a6539,axiom,s_subclass(s_Process, s_Physical)).

/*
(subclass DualObjectProcess Process)
*/
fof(a6540,axiom,s_subclass(s_DualObjectProcess, s_Process)).

/*
(forall (?PROCESS)
 (exists (?OBJ1 ?OBJ2)
  (and (and (instance ?OBJ2 Entity) (instance ?OBJ1 Entity))
       (=> (instance ?PROCESS DualObjectProcess)
        (and (patient ?PROCESS ?OBJ1)
             (and (patient ?PROCESS ?OBJ2)
                  (not (equal ?OBJ1 ?OBJ2))))))))
*/
fof(a6541,axiom,! [PROCESS] : (? [OBJ1,OBJ2] : (((s_instance(OBJ2, s_Entity) & s_instance(OBJ1, s_Entity)) & (s_instance(PROCESS, s_DualObjectProcess) => (s_patient(PROCESS, OBJ1) & (s_patient(PROCESS, OBJ2) & (~ (OBJ1 = OBJ2))))))))).

/*
(instance SingleAgentProcess SetOrClass)
*/
fof(a6542,axiom,s_instance(s_SingleAgentProcess, s_SetOrClass)).

/*
(subclass SingleAgentProcess Process)
*/
fof(a6543,axiom,s_subclass(s_SingleAgentProcess, s_Process)).

/*
(forall (?PROC)
 (exists (?AGENT)
  (and (instance ?AGENT Agent)
       (=> (instance ?PROC SingleAgentProcess) (agent ?PROC ?AGENT)))))
*/
fof(a6544,axiom,! [PROC] : (? [AGENT] : ((s_instance(AGENT, s_Agent) & (s_instance(PROC, s_SingleAgentProcess) => s_agent(PROC, AGENT)))))).

/*
(forall (?AGENT_2 ?AGENT_1 ?PROC)
 (forall (?AGENT_3)
  (=> (instance ?AGENT_3 Agent)
   (=> (and (instance ?AGENT_2 Agent) (instance ?AGENT_1 Agent))
    (=>
     (and (instance ?PROC SingleAgentProcess)
          (and (agent ?PROC ?AGENT_1) (agent ?PROC ?AGENT_2)))
     (and (equal ?AGENT_1 ?AGENT_2)
          (not (and (agent ?PROC ?AGENT_3)
                    (not (equal ?AGENT_3 ?AGENT_1))))))))))
*/
fof(a6545,axiom,! [AGENT_2,AGENT_1,PROC] : (! [AGENT_3] : ((s_instance(AGENT_3, s_Agent) => ((s_instance(AGENT_2, s_Agent) & s_instance(AGENT_1, s_Agent)) => ((s_instance(PROC, s_SingleAgentProcess) & (s_agent(PROC, AGENT_1) & s_agent(PROC, AGENT_2))) => ((AGENT_1 = AGENT_2) & (~ (s_agent(PROC, AGENT_3) & (~ (AGENT_3 = AGENT_1))))))))))).

/*
(instance Entity SetOrClass)
*/
fof(a6546,axiom,s_instance(s_Entity, s_SetOrClass)).

/*
(subclass Abstract Entity)
*/
fof(a6547,axiom,s_subclass(s_Abstract, s_Entity)).

/*
(disjointDecomposition6 Abstract Quantity Attribute SetOrClass Relation
 Proposition)
*/
fof(a6548,axiom,s_disjointDecomposition6(s_Abstract, s_Quantity, s_Attribute, s_SetOrClass, s_Relation, s_Proposition)).

/*
(forall (?ABS)
 (forall (?POINT)
  (=> (and (instance ?POINT Object) (instance ?POINT TimePosition))
   (=> (instance ?ABS Abstract)
    (not (or (located ?ABS ?POINT) (time ?ABS ?POINT)))))))
*/
fof(a6549,axiom,! [ABS] : (! [POINT] : (((s_instance(POINT, s_Object) & s_instance(POINT, s_TimePosition)) => (s_instance(ABS, s_Abstract) => (~ (s_located(ABS, POINT) | s_time(ABS, POINT)))))))).

/*
(subclass Quantity Abstract)
*/
fof(a6550,axiom,s_subclass(s_Quantity, s_Abstract)).

/*
(subclass Attribute Abstract)
*/
fof(a6551,axiom,s_subclass(s_Attribute, s_Abstract)).

/*
(partition3 Attribute InternalAttribute RelationalAttribute)
*/
fof(a6552,axiom,s_partition3(s_Attribute, s_InternalAttribute, s_RelationalAttribute)).

/*
(instance property BinaryPredicate)
*/
fof(a6553,axiom,s_instance(s_property_m, s_BinaryPredicate)).

/*
(instance attribute AsymmetricRelation)
*/
fof(a6554,axiom,s_instance(s_attribute_m, s_AsymmetricRelation)).

/*
(instance attribute IrreflexiveRelation)
*/
fof(a6555,axiom,s_instance(s_attribute_m, s_IrreflexiveRelation)).

/*
(instance attribute TotalValuedRelation)
*/
fof(a6556,axiom,s_instance(s_attribute_m, s_TotalValuedRelation)).

/*
(subrelation attribute property)
*/
fof(a6557,axiom,s_subrelation(s_attribute_m, s_property_m)).

/*
(instance manner AsymmetricRelation)
*/
fof(a6558,axiom,s_instance(s_manner_m, s_AsymmetricRelation)).

/*
(instance manner IrreflexiveRelation)
*/
fof(a6559,axiom,s_instance(s_manner_m, s_IrreflexiveRelation)).

/*
(instance manner TotalValuedRelation)
*/
fof(a6560,axiom,s_instance(s_manner_m, s_TotalValuedRelation)).

/*
(subrelation manner property)
*/
fof(a6561,axiom,s_subrelation(s_manner_m, s_property_m)).

/*
(disjointRelation manner attribute)
*/
fof(a6562,axiom,s_disjointRelation(s_manner_m, s_attribute_m)).

/*
(instance ExtensionFn UnaryFunction)
*/
fof(a6563,axiom,s_instance(s_ExtensionFn_m, s_UnaryFunction)).

/*
(instance ExtensionFn PartialValuedRelation)
*/
fof(a6564,axiom,s_instance(s_ExtensionFn_m, s_PartialValuedRelation)).

/*
(range ExtensionFn Class)
*/
fof(a6565,axiom,s_range(s_ExtensionFn_m, s_Class)).

/*
(subclass InternalAttribute Attribute)
*/
fof(a6566,axiom,s_subclass(s_InternalAttribute, s_Attribute)).

/*
(subclass PhysicalAttribute InternalAttribute)
*/
fof(a6567,axiom,s_subclass(s_PhysicalAttribute, s_InternalAttribute)).

/*
(instance Attribute SetOrClass)
*/
fof(a6568,axiom,s_instance(s_Attribute, s_SetOrClass)).

/*
(subclass RelationalAttribute Attribute)
*/
fof(a6569,axiom,s_subclass(s_RelationalAttribute, s_Attribute)).

/*
(subclass Number Quantity)
*/
fof(a6570,axiom,s_subclass(s_Number, s_Quantity)).

/*
(partition4 Number RealNumber ImaginaryNumber ComplexNumber)
*/
fof(a6571,axiom,s_partition4(s_Number, s_RealNumber, s_ImaginaryNumber, s_ComplexNumber)).

/*
(instance lessThan BinaryPredicate)
*/
fof(a6572,axiom,s_instance(s_lessThan_m, s_BinaryPredicate)).

/*
(instance lessThan TransitiveRelation)
*/
fof(a6573,axiom,s_instance(s_lessThan_m, s_TransitiveRelation)).

/*
(instance lessThan IrreflexiveRelation)
*/
fof(a6574,axiom,s_instance(s_lessThan_m, s_IrreflexiveRelation)).

/*
(instance lessThan RelationExtendedToQuantities)
*/
fof(a6575,axiom,s_instance(s_lessThan_m, s_RelationExtendedToQuantities)).

/*
(trichotomizingOn lessThan RealNumber)
*/
fof(a6576,axiom,s_trichotomizingOn(s_lessThan_m, s_RealNumber)).

/*
(instance greaterThan BinaryPredicate)
*/
fof(a6577,axiom,s_instance(s_greaterThan_m, s_BinaryPredicate)).

/*
(instance greaterThan TotalValuedRelation)
*/
fof(a6578,axiom,s_instance(s_greaterThan_m, s_TotalValuedRelation)).

/*
(instance greaterThan TransitiveRelation)
*/
fof(a6579,axiom,s_instance(s_greaterThan_m, s_TransitiveRelation)).

/*
(instance greaterThan IrreflexiveRelation)
*/
fof(a6580,axiom,s_instance(s_greaterThan_m, s_IrreflexiveRelation)).

/*
(instance greaterThan RelationExtendedToQuantities)
*/
fof(a6581,axiom,s_instance(s_greaterThan_m, s_RelationExtendedToQuantities)).

/*
(trichotomizingOn greaterThan RealNumber)
*/
fof(a6582,axiom,s_trichotomizingOn(s_greaterThan_m, s_RealNumber)).

/*
(inverse greaterThan lessThan)
*/
fof(a6583,axiom,s_inverse(s_greaterThan_m, s_lessThan_m)).

/*
(instance lessThanOrEqualTo BinaryPredicate)
*/
fof(a6584,axiom,s_instance(s_lessThanOrEqualTo_m, s_BinaryPredicate)).

/*
(instance lessThanOrEqualTo PartialOrderingRelation)
*/
fof(a6585,axiom,s_instance(s_lessThanOrEqualTo_m, s_PartialOrderingRelation)).

/*
(instance lessThanOrEqualTo RelationExtendedToQuantities)
*/
fof(a6586,axiom,s_instance(s_lessThanOrEqualTo_m, s_RelationExtendedToQuantities)).

/*
(trichotomizingOn lessThanOrEqualTo RealNumber)
*/
fof(a6587,axiom,s_trichotomizingOn(s_lessThanOrEqualTo_m, s_RealNumber)).

/*
(forall (?NUMBER2 ?NUMBER1)
 (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity))
  (<=> (lessThanOrEqualTo ?NUMBER1 ?NUMBER2)
   (or (equal ?NUMBER1 ?NUMBER2) (lessThan ?NUMBER1 ?NUMBER2)))))
*/
fof(a6588,axiom,! [NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity)) => (lesseq(NUMBER1, NUMBER2) <=> ((NUMBER1 = NUMBER2) | less(NUMBER1, NUMBER2)))))).

/*
(instance greaterThanOrEqualTo BinaryPredicate)
*/
fof(a6589,axiom,s_instance(s_greaterThanOrEqualTo_m, s_BinaryPredicate)).

/*
(instance greaterThanOrEqualTo PartialOrderingRelation)
*/
fof(a6590,axiom,s_instance(s_greaterThanOrEqualTo_m, s_PartialOrderingRelation)).

/*
(instance greaterThanOrEqualTo RelationExtendedToQuantities)
*/
fof(a6591,axiom,s_instance(s_greaterThanOrEqualTo_m, s_RelationExtendedToQuantities)).

/*
(trichotomizingOn greaterThanOrEqualTo RealNumber)
*/
fof(a6592,axiom,s_trichotomizingOn(s_greaterThanOrEqualTo_m, s_RealNumber)).

/*
(inverse greaterThanOrEqualTo lessThanOrEqualTo)
*/
fof(a6593,axiom,s_inverse(s_greaterThanOrEqualTo_m, s_lessThanOrEqualTo_m)).

/*
(forall (?NUMBER2 ?NUMBER1)
 (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity))
  (<=> (greaterThanOrEqualTo ?NUMBER1 ?NUMBER2)
   (or (equal ?NUMBER1 ?NUMBER2) (greaterThan ?NUMBER1 ?NUMBER2)))))
*/
fof(a6594,axiom,! [NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity)) => (s_greaterThanOrEqualTo(NUMBER1, NUMBER2) <=> ((NUMBER1 = NUMBER2) | greater(NUMBER1, NUMBER2)))))).

/*
(subclass RealNumber Number)
*/
fof(a6595,axiom,s_subclass(s_RealNumber, s_Number)).

/*
(partition3 RealNumber NegativeRealNumber NonnegativeRealNumber)
*/
fof(a6596,axiom,s_partition3(s_RealNumber, s_NegativeRealNumber, s_NonnegativeRealNumber)).

/*
(partition3 RealNumber RationalNumber IrrationalNumber)
*/
fof(a6597,axiom,s_partition3(s_RealNumber, s_RationalNumber, s_IrrationalNumber)).

/*
(instance ImaginaryNumber SetOrClass)
*/
fof(a6598,axiom,s_instance(s_ImaginaryNumber, s_SetOrClass)).

/*
(subclass ImaginaryNumber Number)
*/
fof(a6599,axiom,s_subclass(s_ImaginaryNumber, s_Number)).

/*
(forall (?NUMBER)
 (exists (?REAL)
  (and (instance ?REAL Quantity)
       (=> (instance ?NUMBER ImaginaryNumber)
        (and (instance ?REAL RealNumber)
             (equal ?NUMBER
                    (MultiplicationFn ?REAL (SquareRootFn -1))))))))
*/
fof(a6600,axiom,! [NUMBER] : (? [REAL] : ((s_instance(REAL, s_Quantity) & (s_instance(NUMBER, s_ImaginaryNumber) => (s_instance(REAL, s_RealNumber) & (NUMBER = times(REAL, s_SquareRootFn(-1))))))))).

/*
(subclass RationalNumber RealNumber)
*/
fof(a6601,axiom,s_subclass(s_RationalNumber, s_RealNumber)).

/*
(instance IrrationalNumber SetOrClass)
*/
fof(a6602,axiom,s_instance(s_IrrationalNumber, s_SetOrClass)).

/*
(subclass IrrationalNumber RealNumber)
*/
fof(a6603,axiom,s_subclass(s_IrrationalNumber, s_RealNumber)).

/*
(subclass NonnegativeRealNumber RealNumber)
*/
fof(a6604,axiom,s_subclass(s_NonnegativeRealNumber, s_RealNumber)).

/*
(forall (?NUMBER)
 (<=> (instance ?NUMBER NonnegativeRealNumber)
  (and (greaterThanOrEqualTo ?NUMBER 0) (instance ?NUMBER RealNumber))))
*/
fof(a6605,axiom,! [NUMBER] : ((s_instance(NUMBER, s_NonnegativeRealNumber) <=> (s_greaterThanOrEqualTo(NUMBER, 0) & s_instance(NUMBER, s_RealNumber))))).

/*
(subclass PositiveRealNumber NonnegativeRealNumber)
*/
fof(a6606,axiom,s_subclass(s_PositiveRealNumber, s_NonnegativeRealNumber)).

/*
(forall (?NUMBER)
 (<=> (instance ?NUMBER PositiveRealNumber)
  (and (greaterThan ?NUMBER 0) (instance ?NUMBER RealNumber))))
*/
fof(a6607,axiom,! [NUMBER] : ((s_instance(NUMBER, s_PositiveRealNumber) <=> (greater(NUMBER, 0) & s_instance(NUMBER, s_RealNumber))))).

/*
(subclass NegativeRealNumber RealNumber)
*/
fof(a6608,axiom,s_subclass(s_NegativeRealNumber, s_RealNumber)).

/*
(forall (?NUMBER)
 (<=> (instance ?NUMBER NegativeRealNumber)
  (and (lessThan ?NUMBER 0) (instance ?NUMBER RealNumber))))
*/
fof(a6609,axiom,! [NUMBER] : ((s_instance(NUMBER, s_NegativeRealNumber) <=> (less(NUMBER, 0) & s_instance(NUMBER, s_RealNumber))))).

/*
(instance RationalNumber SetOrClass)
*/
fof(a6610,axiom,s_instance(s_RationalNumber, s_SetOrClass)).

/*
(subclass Integer RationalNumber)
*/
fof(a6611,axiom,s_subclass(s_Integer, s_RationalNumber)).

/*
(partition3 Integer OddInteger EvenInteger)
*/
fof(a6612,axiom,s_partition3(s_Integer, s_OddInteger, s_EvenInteger)).

/*
(partition3 Integer NegativeInteger NonnegativeInteger)
*/
fof(a6613,axiom,s_partition3(s_Integer, s_NegativeInteger, s_NonnegativeInteger)).

/*
(instance EvenInteger SetOrClass)
*/
fof(a6614,axiom,s_instance(s_EvenInteger, s_SetOrClass)).

/*
(subclass EvenInteger Integer)
*/
fof(a6615,axiom,s_subclass(s_EvenInteger, s_Integer)).

/*
(instance OddInteger SetOrClass)
*/
fof(a6616,axiom,s_instance(s_OddInteger, s_SetOrClass)).

/*
(subclass OddInteger Integer)
*/
fof(a6617,axiom,s_subclass(s_OddInteger, s_Integer)).

/*
(instance PrimeNumber SetOrClass)
*/
fof(a6618,axiom,s_instance(s_PrimeNumber, s_SetOrClass)).

/*
(subclass PrimeNumber Integer)
*/
fof(a6619,axiom,s_subclass(s_PrimeNumber, s_Integer)).

/*
(subclass NonnegativeInteger Integer)
*/
fof(a6620,axiom,s_subclass(s_NonnegativeInteger, s_Integer)).

/*
(instance NonnegativeRealNumber SetOrClass)
*/
fof(a6621,axiom,s_instance(s_NonnegativeRealNumber, s_SetOrClass)).

/*
(subclass NonnegativeInteger NonnegativeRealNumber)
*/
fof(a6622,axiom,s_subclass(s_NonnegativeInteger, s_NonnegativeRealNumber)).

/*
(forall (?X) (=> (instance ?X NonnegativeInteger) (greaterThan ?X -1)))
*/
fof(a6623,axiom,! [X] : ((s_instance(X, s_NonnegativeInteger) => greater(X, -1)))).

/*
(instance Integer SetOrClass)
*/
fof(a6624,axiom,s_instance(s_Integer, s_SetOrClass)).

/*
(subclass NegativeInteger Integer)
*/
fof(a6625,axiom,s_subclass(s_NegativeInteger, s_Integer)).

/*
(instance NegativeInteger SetOrClass)
*/
fof(a6626,axiom,s_instance(s_NegativeInteger, s_SetOrClass)).

/*
(instance NegativeRealNumber SetOrClass)
*/
fof(a6627,axiom,s_instance(s_NegativeRealNumber, s_SetOrClass)).

/*
(subclass NegativeInteger NegativeRealNumber)
*/
fof(a6628,axiom,s_subclass(s_NegativeInteger, s_NegativeRealNumber)).

/*
(forall (?X) (=> (instance ?X NegativeInteger) (greaterThan 0 ?X)))
*/
fof(a6629,axiom,! [X] : ((s_instance(X, s_NegativeInteger) => greater(0, X)))).

/*
(instance NonnegativeInteger SetOrClass)
*/
fof(a6630,axiom,s_instance(s_NonnegativeInteger, s_SetOrClass)).

/*
(subclass PositiveInteger NonnegativeInteger)
*/
fof(a6631,axiom,s_subclass(s_PositiveInteger, s_NonnegativeInteger)).

/*
(instance PositiveInteger SetOrClass)
*/
fof(a6632,axiom,s_instance(s_PositiveInteger, s_SetOrClass)).

/*
(subclass PositiveInteger PositiveRealNumber)
*/
fof(a6633,axiom,s_subclass(s_PositiveInteger, s_PositiveRealNumber)).

/*
(forall (?X) (=> (instance ?X PositiveInteger) (greaterThan ?X 0)))
*/
fof(a6634,axiom,! [X] : ((s_instance(X, s_PositiveInteger) => greater(X, 0)))).

/*
(instance BinaryNumber SetOrClass)
*/
fof(a6635,axiom,s_instance(s_BinaryNumber, s_SetOrClass)).

/*
(instance RealNumber SetOrClass)
*/
fof(a6636,axiom,s_instance(s_RealNumber, s_SetOrClass)).

/*
(subclass BinaryNumber RealNumber)
*/
fof(a6637,axiom,s_subclass(s_BinaryNumber, s_RealNumber)).

/*
(instance ComplexNumber SetOrClass)
*/
fof(a6638,axiom,s_instance(s_ComplexNumber, s_SetOrClass)).

/*
(instance Number SetOrClass)
*/
fof(a6639,axiom,s_instance(s_Number, s_SetOrClass)).

/*
(subclass ComplexNumber Number)
*/
fof(a6640,axiom,s_subclass(s_ComplexNumber, s_Number)).

/*
(disjoint ComplexNumber RealNumber)
*/
fof(a6641,axiom,s_disjoint(s_ComplexNumber, s_RealNumber)).

/*
(forall (?NUMBER)
 (exists (?REAL1 ?REAL2)
  (and (and (instance ?REAL2 Quantity) (instance ?REAL1 Quantity))
       (=> (instance ?NUMBER ComplexNumber)
        (and (instance ?REAL1 RealNumber)
             (and (instance ?REAL2 RealNumber)
                  (equal ?NUMBER
                         (AdditionFn ?REAL1
                          (MultiplicationFn ?REAL2
                           (SquareRootFn -1))))))))))
*/
fof(a6642,axiom,! [NUMBER] : (? [REAL1,REAL2] : (((s_instance(REAL2, s_Quantity) & s_instance(REAL1, s_Quantity)) & (s_instance(NUMBER, s_ComplexNumber) => (s_instance(REAL1, s_RealNumber) & (s_instance(REAL2, s_RealNumber) & (NUMBER = plus(REAL1, times(REAL2, s_SquareRootFn(-1))))))))))).

/*
(instance Quantity SetOrClass)
*/
fof(a6643,axiom,s_instance(s_Quantity, s_SetOrClass)).

/*
(subclass PhysicalQuantity Quantity)
*/
fof(a6644,axiom,s_subclass(s_PhysicalQuantity, s_Quantity)).

/*
(partition3 PhysicalQuantity ConstantQuantity FunctionQuantity)
*/
fof(a6645,axiom,s_partition3(s_PhysicalQuantity, s_ConstantQuantity, s_FunctionQuantity)).

/*
(subclass ConstantQuantity PhysicalQuantity)
*/
fof(a6646,axiom,s_subclass(s_ConstantQuantity, s_PhysicalQuantity)).

/*
(subclass TimeMeasure ConstantQuantity)
*/
fof(a6647,axiom,s_subclass(s_TimeMeasure, s_ConstantQuantity)).

/*
(instance TimeDuration SetOrClass)
*/
fof(a6648,axiom,s_instance(s_TimeDuration, s_SetOrClass)).

/*
(subclass TimeDuration TimeMeasure)
*/
fof(a6649,axiom,s_subclass(s_TimeDuration, s_TimeMeasure)).

/*
(instance TimeMeasure SetOrClass)
*/
fof(a6650,axiom,s_instance(s_TimeMeasure, s_SetOrClass)).

/*
(subclass TimePosition TimeMeasure)
*/
fof(a6651,axiom,s_subclass(s_TimePosition, s_TimeMeasure)).

/*
(partition3 TimePosition TimeInterval TimePoint)
*/
fof(a6652,axiom,s_partition3(s_TimePosition, s_TimeInterval, s_TimePoint)).

/*
(subclass TimeInterval TimePosition)
*/
fof(a6653,axiom,s_subclass(s_TimeInterval, s_TimePosition)).

/*
(instance TimePosition SetOrClass)
*/
fof(a6654,axiom,s_instance(s_TimePosition, s_SetOrClass)).

/*
(subclass TimePoint TimePosition)
*/
fof(a6655,axiom,s_subclass(s_TimePoint, s_TimePosition)).

/*
(subclass FunctionQuantity PhysicalQuantity)
*/
fof(a6656,axiom,s_subclass(s_FunctionQuantity, s_PhysicalQuantity)).

/*
(subclass UnaryConstantFunctionQuantity FunctionQuantity)
*/
fof(a6657,axiom,s_subclass(s_UnaryConstantFunctionQuantity, s_FunctionQuantity)).

/*
(instance UnaryConstantFunctionQuantity SetOrClass)
*/
fof(a6658,axiom,s_instance(s_UnaryConstantFunctionQuantity, s_SetOrClass)).

/*
(subclass TimeDependentQuantity UnaryConstantFunctionQuantity)
*/
fof(a6659,axiom,s_subclass(s_TimeDependentQuantity, s_UnaryConstantFunctionQuantity)).

/*
(subclass SetOrClass Abstract)
*/
fof(a6660,axiom,s_subclass(s_SetOrClass, s_Abstract)).

/*
(partition3 SetOrClass Set Class)
*/
fof(a6661,axiom,s_partition3(s_SetOrClass, s_Set, s_Class)).

/*
(instance SetOrClass SetOrClass)
*/
fof(a6662,axiom,s_instance(s_SetOrClass, s_SetOrClass)).

/*
(subclass Set SetOrClass)
*/
fof(a6663,axiom,s_subclass(s_Set, s_SetOrClass)).

/*
(subclass Relation Abstract)
*/
fof(a6664,axiom,s_subclass(s_Relation, s_Abstract)).

/*
(disjointDecomposition6 Relation BinaryRelation TernaryRelation
 QuaternaryRelation QuintaryRelation VariableArityRelation)
*/
fof(a6665,axiom,s_disjointDecomposition6(s_Relation, s_BinaryRelation, s_TernaryRelation, s_QuaternaryRelation, s_QuintaryRelation, s_VariableArityRelation)).

/*
(partition4 Relation Predicate Function List)
*/
fof(a6666,axiom,s_partition4(s_Relation, s_Predicate, s_Function, s_List)).

/*
(partition3 Relation TotalValuedRelation PartialValuedRelation)
*/
fof(a6667,axiom,s_partition3(s_Relation, s_TotalValuedRelation, s_PartialValuedRelation)).

/*
(subclass SingleValuedRelation Relation)
*/
fof(a6668,axiom,s_subclass(s_SingleValuedRelation, s_Relation)).

/*
(subclass SingleValuedRelation InheritableRelation)
*/
fof(a6669,axiom,s_subclass(s_SingleValuedRelation, s_InheritableRelation)).

/*
(subclass TotalValuedRelation Relation)
*/
fof(a6670,axiom,s_subclass(s_TotalValuedRelation, s_Relation)).

/*
(subclass TotalValuedRelation InheritableRelation)
*/
fof(a6671,axiom,s_subclass(s_TotalValuedRelation, s_InheritableRelation)).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2600)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2626 ?g2627 ?g2628)
      (exists (?g2631)
       (and (instance ?g2631 Graph)
            (and (and (instance ?g2626 PositiveInteger)
                      (instance ?g2628 SetOrClass))
                 (=> (instance ?ITEM Graph)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2600 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 GraphElement)
                          (and (=>
                                (and
                                 (instance
                                  graphPart
                                  TotalValuedRelation)
                                 (instance graphPart Predicate))
                                (and
                                 (instance graphPart Relation)
                                 (and
                                  (valence graphPart ?g2600)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2626 ?g2600)
                                     (and
                                      (domain graphPart ?g2626 ?g2628)
                                      (equal
                                       ?g2627
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2626))))
                                    (instance ?g2627 ?g2628))
                                   (graphPart ?ROW0 ?g2631)))))
                               (=>
                                (and
                                 (instance graphPart Relation)
                                 (and
                                  (valence graphPart ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain graphPart ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (graphPart ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  graphPart
                                  TotalValuedRelation)
                                 (instance
                                  graphPart
                                  Predicate))))))))))))))))))
*/
fof(a6672,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2600] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2626,G2627,G2628] : (? [G2631] : ((s_instance(G2631, s_Graph) & ((s_instance(G2626, s_PositiveInteger) & s_instance(G2628, s_SetOrClass)) & (s_instance(ITEM, s_Graph) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2600, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_GraphElement) => (((s_instance(s_graphPart_m, s_TotalValuedRelation) & s_instance(s_graphPart_m, s_Predicate)) => (s_instance(s_graphPart_m, s_Relation) & (s_valence(s_graphPart_m, G2600) & (((less(G2626, G2600) & (s_domain(s_graphPart_m, G2626, G2628) & (G2627 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2626)))) => s_instance(G2627, G2628)) => s_graphPart(ROW0, G2631))))) & ((s_instance(s_graphPart_m, s_Relation) & (s_valence(s_graphPart_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_graphPart_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_graphPart(ROW0, ITEM)))) => (s_instance(s_graphPart_m, s_TotalValuedRelation) & s_instance(s_graphPart_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2644)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2670 ?g2671 ?g2672)
      (exists (?g2675)
       (and (instance ?g2675 Object)
            (and (and (instance ?g2670 PositiveInteger)
                      (instance ?g2672 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2644 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Object)
                          (and (=>
                                (and
                                 (instance smaller TotalValuedRelation)
                                 (instance smaller Predicate))
                                (and
                                 (instance smaller Relation)
                                 (and
                                  (valence smaller ?g2644)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2670 ?g2644)
                                     (and
                                      (domain smaller ?g2670 ?g2672)
                                      (equal
                                       ?g2671
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2670))))
                                    (instance ?g2671 ?g2672))
                                   (smaller ?ROW0 ?g2675)))))
                               (=>
                                (and
                                 (instance smaller Relation)
                                 (and
                                  (valence smaller ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain smaller ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (smaller ?ROW0 ?ITEM))))
                                (and
                                 (instance smaller TotalValuedRelation)
                                 (instance
                                  smaller
                                  Predicate))))))))))))))))))
*/
fof(a6673,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2644] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2670,G2671,G2672] : (? [G2675] : ((s_instance(G2675, s_Object) & ((s_instance(G2670, s_PositiveInteger) & s_instance(G2672, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2644, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Object) => (((s_instance(s_smaller_m, s_TotalValuedRelation) & s_instance(s_smaller_m, s_Predicate)) => (s_instance(s_smaller_m, s_Relation) & (s_valence(s_smaller_m, G2644) & (((less(G2670, G2644) & (s_domain(s_smaller_m, G2670, G2672) & (G2671 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2670)))) => s_instance(G2671, G2672)) => s_smaller(ROW0, G2675))))) & ((s_instance(s_smaller_m, s_Relation) & (s_valence(s_smaller_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_smaller_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_smaller(ROW0, ITEM)))) => (s_instance(s_smaller_m, s_TotalValuedRelation) & s_instance(s_smaller_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2688)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2714 ?g2715 ?g2716)
      (exists (?g2719)
       (and (instance ?g2719 Proposition)
            (and (and (instance ?g2714 PositiveInteger)
                      (instance ?g2716 SetOrClass))
                 (=> (instance ?ITEM Proposition)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2688 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Argument)
                          (and (=>
                                (and
                                 (instance premise TotalValuedRelation)
                                 (instance premise Predicate))
                                (and
                                 (instance premise Relation)
                                 (and
                                  (valence premise ?g2688)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2714 ?g2688)
                                     (and
                                      (domain premise ?g2714 ?g2716)
                                      (equal
                                       ?g2715
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2714))))
                                    (instance ?g2715 ?g2716))
                                   (premise ?ROW0 ?g2719)))))
                               (=>
                                (and
                                 (instance premise Relation)
                                 (and
                                  (valence premise ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain premise ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (premise ?ROW0 ?ITEM))))
                                (and
                                 (instance premise TotalValuedRelation)
                                 (instance
                                  premise
                                  Predicate))))))))))))))))))
*/
fof(a6674,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2688] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2714,G2715,G2716] : (? [G2719] : ((s_instance(G2719, s_Proposition) & ((s_instance(G2714, s_PositiveInteger) & s_instance(G2716, s_SetOrClass)) & (s_instance(ITEM, s_Proposition) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2688, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Argument) => (((s_instance(s_premise_m, s_TotalValuedRelation) & s_instance(s_premise_m, s_Predicate)) => (s_instance(s_premise_m, s_Relation) & (s_valence(s_premise_m, G2688) & (((less(G2714, G2688) & (s_domain(s_premise_m, G2714, G2716) & (G2715 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2714)))) => s_instance(G2715, G2716)) => s_premise(ROW0, G2719))))) & ((s_instance(s_premise_m, s_Relation) & (s_valence(s_premise_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_premise_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_premise(ROW0, ITEM)))) => (s_instance(s_premise_m, s_TotalValuedRelation) & s_instance(s_premise_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2732)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2758 ?g2759 ?g2760)
      (exists (?g2763)
       (and (instance ?g2763 TimeInterval)
            (and (and (instance ?g2758 PositiveInteger)
                      (instance ?g2760 SetOrClass))
                 (=> (instance ?ITEM TimeInterval)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2732 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 TimeInterval)
                          (and (=>
                                (and
                                 (instance
                                  meetsTemporally
                                  TotalValuedRelation)
                                 (instance meetsTemporally Predicate))
                                (and
                                 (instance meetsTemporally Relation)
                                 (and
                                  (valence meetsTemporally ?g2732)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2758 ?g2732)
                                     (and
                                      (domain
                                       meetsTemporally
                                       ?g2758
                                       ?g2760)
                                      (equal
                                       ?g2759
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2758))))
                                    (instance ?g2759 ?g2760))
                                   (meetsTemporally ?ROW0 ?g2763)))))
                               (=>
                                (and
                                 (instance meetsTemporally Relation)
                                 (and
                                  (valence meetsTemporally ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       meetsTemporally
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (meetsTemporally ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  meetsTemporally
                                  TotalValuedRelation)
                                 (instance
                                  meetsTemporally
                                  Predicate))))))))))))))))))
*/
fof(a6675,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2732] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2758,G2759,G2760] : (? [G2763] : ((s_instance(G2763, s_TimeInterval) & ((s_instance(G2758, s_PositiveInteger) & s_instance(G2760, s_SetOrClass)) & (s_instance(ITEM, s_TimeInterval) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2732, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_TimeInterval) => (((s_instance(s_meetsTemporally_m, s_TotalValuedRelation) & s_instance(s_meetsTemporally_m, s_Predicate)) => (s_instance(s_meetsTemporally_m, s_Relation) & (s_valence(s_meetsTemporally_m, G2732) & (((less(G2758, G2732) & (s_domain(s_meetsTemporally_m, G2758, G2760) & (G2759 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2758)))) => s_instance(G2759, G2760)) => s_meetsTemporally(ROW0, G2763))))) & ((s_instance(s_meetsTemporally_m, s_Relation) & (s_valence(s_meetsTemporally_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_meetsTemporally_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_meetsTemporally(ROW0, ITEM)))) => (s_instance(s_meetsTemporally_m, s_TotalValuedRelation) & s_instance(s_meetsTemporally_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2776)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2802 ?g2803 ?g2804)
      (exists (?g2807)
       (and (instance ?g2807 Proposition)
            (and (and (instance ?g2802 PositiveInteger)
                      (instance ?g2804 SetOrClass))
                 (=> (instance ?ITEM Proposition)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2776 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Argument)
                          (and (=>
                                (and
                                 (instance
                                  conclusion
                                  TotalValuedRelation)
                                 (instance conclusion Predicate))
                                (and
                                 (instance conclusion Relation)
                                 (and
                                  (valence conclusion ?g2776)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2802 ?g2776)
                                     (and
                                      (domain conclusion ?g2802 ?g2804)
                                      (equal
                                       ?g2803
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2802))))
                                    (instance ?g2803 ?g2804))
                                   (conclusion ?ROW0 ?g2807)))))
                               (=>
                                (and
                                 (instance conclusion Relation)
                                 (and
                                  (valence conclusion ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       conclusion
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (conclusion ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  conclusion
                                  TotalValuedRelation)
                                 (instance
                                  conclusion
                                  Predicate))))))))))))))))))
*/
fof(a6676,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2776] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2802,G2803,G2804] : (? [G2807] : ((s_instance(G2807, s_Proposition) & ((s_instance(G2802, s_PositiveInteger) & s_instance(G2804, s_SetOrClass)) & (s_instance(ITEM, s_Proposition) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2776, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Argument) => (((s_instance(s_conclusion_m, s_TotalValuedRelation) & s_instance(s_conclusion_m, s_Predicate)) => (s_instance(s_conclusion_m, s_Relation) & (s_valence(s_conclusion_m, G2776) & (((less(G2802, G2776) & (s_domain(s_conclusion_m, G2802, G2804) & (G2803 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2802)))) => s_instance(G2803, G2804)) => s_conclusion(ROW0, G2807))))) & ((s_instance(s_conclusion_m, s_Relation) & (s_valence(s_conclusion_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_conclusion_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_conclusion(ROW0, ITEM)))) => (s_instance(s_conclusion_m, s_TotalValuedRelation) & s_instance(s_conclusion_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2820)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2846 ?g2847 ?g2848)
      (exists (?g2851)
       (and (instance ?g2851 LengthMeasure)
            (and (and (instance ?g2846 PositiveInteger)
                      (instance ?g2848 SetOrClass))
                 (=> (instance ?ITEM LengthMeasure)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2820 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 OneDimensionalFigure)
                          (and (=>
                                (and
                                 (instance
                                  lineMeasure
                                  TotalValuedRelation)
                                 (instance lineMeasure Predicate))
                                (and
                                 (instance lineMeasure Relation)
                                 (and
                                  (valence lineMeasure ?g2820)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2846 ?g2820)
                                     (and
                                      (domain
                                       lineMeasure
                                       ?g2846
                                       ?g2848)
                                      (equal
                                       ?g2847
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2846))))
                                    (instance ?g2847 ?g2848))
                                   (lineMeasure ?ROW0 ?g2851)))))
                               (=>
                                (and
                                 (instance lineMeasure Relation)
                                 (and
                                  (valence lineMeasure ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       lineMeasure
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (lineMeasure ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  lineMeasure
                                  TotalValuedRelation)
                                 (instance
                                  lineMeasure
                                  Predicate))))))))))))))))))
*/
fof(a6677,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2820] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2846,G2847,G2848] : (? [G2851] : ((s_instance(G2851, s_LengthMeasure) & ((s_instance(G2846, s_PositiveInteger) & s_instance(G2848, s_SetOrClass)) & (s_instance(ITEM, s_LengthMeasure) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2820, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_OneDimensionalFigure) => (((s_instance(s_lineMeasure_m, s_TotalValuedRelation) & s_instance(s_lineMeasure_m, s_Predicate)) => (s_instance(s_lineMeasure_m, s_Relation) & (s_valence(s_lineMeasure_m, G2820) & (((less(G2846, G2820) & (s_domain(s_lineMeasure_m, G2846, G2848) & (G2847 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2846)))) => s_instance(G2847, G2848)) => s_lineMeasure(ROW0, G2851))))) & ((s_instance(s_lineMeasure_m, s_Relation) & (s_valence(s_lineMeasure_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_lineMeasure_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_lineMeasure(ROW0, ITEM)))) => (s_instance(s_lineMeasure_m, s_TotalValuedRelation) & s_instance(s_lineMeasure_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2864)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2890 ?g2891 ?g2892)
      (exists (?g2895)
       (and (instance ?g2895 PlaneAngleMeasure)
            (and (and (instance ?g2890 PositiveInteger)
                      (instance ?g2892 SetOrClass))
                 (=> (instance ?ITEM PlaneAngleMeasure)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2864 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 TwoDimensionalAngle)
                          (and (=>
                                (and
                                 (instance
                                  angularMeasure
                                  TotalValuedRelation)
                                 (instance angularMeasure Predicate))
                                (and
                                 (instance angularMeasure Relation)
                                 (and
                                  (valence angularMeasure ?g2864)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2890 ?g2864)
                                     (and
                                      (domain
                                       angularMeasure
                                       ?g2890
                                       ?g2892)
                                      (equal
                                       ?g2891
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2890))))
                                    (instance ?g2891 ?g2892))
                                   (angularMeasure ?ROW0 ?g2895)))))
                               (=>
                                (and
                                 (instance angularMeasure Relation)
                                 (and
                                  (valence angularMeasure ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       angularMeasure
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (angularMeasure ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  angularMeasure
                                  TotalValuedRelation)
                                 (instance
                                  angularMeasure
                                  Predicate))))))))))))))))))
*/
fof(a6678,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2864] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2890,G2891,G2892] : (? [G2895] : ((s_instance(G2895, s_PlaneAngleMeasure) & ((s_instance(G2890, s_PositiveInteger) & s_instance(G2892, s_SetOrClass)) & (s_instance(ITEM, s_PlaneAngleMeasure) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2864, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_TwoDimensionalAngle) => (((s_instance(s_angularMeasure_m, s_TotalValuedRelation) & s_instance(s_angularMeasure_m, s_Predicate)) => (s_instance(s_angularMeasure_m, s_Relation) & (s_valence(s_angularMeasure_m, G2864) & (((less(G2890, G2864) & (s_domain(s_angularMeasure_m, G2890, G2892) & (G2891 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2890)))) => s_instance(G2891, G2892)) => s_angularMeasure(ROW0, G2895))))) & ((s_instance(s_angularMeasure_m, s_Relation) & (s_valence(s_angularMeasure_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_angularMeasure_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_angularMeasure(ROW0, ITEM)))) => (s_instance(s_angularMeasure_m, s_TotalValuedRelation) & s_instance(s_angularMeasure_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2908)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2934 ?g2935 ?g2936)
      (exists (?g2939)
       (and (instance ?g2939 Attribute)
            (and (and (instance ?g2934 PositiveInteger)
                      (instance ?g2936 SetOrClass))
                 (=> (instance ?ITEM Attribute)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2908 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Attribute)
                          (and (=>
                                (and
                                 (instance
                                  subAttribute
                                  TotalValuedRelation)
                                 (instance subAttribute Predicate))
                                (and
                                 (instance subAttribute Relation)
                                 (and
                                  (valence subAttribute ?g2908)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2934 ?g2908)
                                     (and
                                      (domain
                                       subAttribute
                                       ?g2934
                                       ?g2936)
                                      (equal
                                       ?g2935
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2934))))
                                    (instance ?g2935 ?g2936))
                                   (subAttribute ?ROW0 ?g2939)))))
                               (=>
                                (and
                                 (instance subAttribute Relation)
                                 (and
                                  (valence subAttribute ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       subAttribute
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subAttribute ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  subAttribute
                                  TotalValuedRelation)
                                 (instance
                                  subAttribute
                                  Predicate))))))))))))))))))
*/
fof(a6679,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2908] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2934,G2935,G2936] : (? [G2939] : ((s_instance(G2939, s_Attribute) & ((s_instance(G2934, s_PositiveInteger) & s_instance(G2936, s_SetOrClass)) & (s_instance(ITEM, s_Attribute) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2908, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Attribute) => (((s_instance(s_subAttribute_m, s_TotalValuedRelation) & s_instance(s_subAttribute_m, s_Predicate)) => (s_instance(s_subAttribute_m, s_Relation) & (s_valence(s_subAttribute_m, G2908) & (((less(G2934, G2908) & (s_domain(s_subAttribute_m, G2934, G2936) & (G2935 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2934)))) => s_instance(G2935, G2936)) => s_subAttribute(ROW0, G2939))))) & ((s_instance(s_subAttribute_m, s_Relation) & (s_valence(s_subAttribute_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subAttribute_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subAttribute(ROW0, ITEM)))) => (s_instance(s_subAttribute_m, s_TotalValuedRelation) & s_instance(s_subAttribute_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2952)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g2978 ?g2979 ?g2980)
      (exists (?g2983)
       (and (instance ?g2983 Object)
            (and (and (instance ?g2978 PositiveInteger)
                      (instance ?g2980 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2952 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Motion)
                          (and (=>
                                (and
                                 (instance path TotalValuedRelation)
                                 (instance path Predicate))
                                (and
                                 (instance path Relation)
                                 (and
                                  (valence path ?g2952)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g2978 ?g2952)
                                     (and
                                      (domain path ?g2978 ?g2980)
                                      (equal
                                       ?g2979
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g2978))))
                                    (instance ?g2979 ?g2980))
                                   (path ?ROW0 ?g2983)))))
                               (=>
                                (and
                                 (instance path Relation)
                                 (and
                                  (valence path ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain path ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (path ?ROW0 ?ITEM))))
                                (and
                                 (instance path TotalValuedRelation)
                                 (instance
                                  path
                                  Predicate))))))))))))))))))
*/
fof(a6680,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2952] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G2978,G2979,G2980] : (? [G2983] : ((s_instance(G2983, s_Object) & ((s_instance(G2978, s_PositiveInteger) & s_instance(G2980, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2952, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Motion) => (((s_instance(s_path_m, s_TotalValuedRelation) & s_instance(s_path_m, s_Predicate)) => (s_instance(s_path_m, s_Relation) & (s_valence(s_path_m, G2952) & (((less(G2978, G2952) & (s_domain(s_path_m, G2978, G2980) & (G2979 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G2978)))) => s_instance(G2979, G2980)) => s_path(ROW0, G2983))))) & ((s_instance(s_path_m, s_Relation) & (s_valence(s_path_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_path_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_path(ROW0, ITEM)))) => (s_instance(s_path_m, s_TotalValuedRelation) & s_instance(s_path_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g2996)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3022 ?g3023 ?g3024)
      (exists (?g3027)
       (and (instance ?g3027 PositiveInteger)
            (and (and (instance ?g3022 PositiveInteger)
                      (instance ?g3024 SetOrClass))
                 (=> (instance ?ITEM PositiveInteger)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g2996 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 PureSubstance)
                          (and (=>
                                (and
                                 (instance
                                  protonNumber
                                  TotalValuedRelation)
                                 (instance protonNumber Predicate))
                                (and
                                 (instance protonNumber Relation)
                                 (and
                                  (valence protonNumber ?g2996)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3022 ?g2996)
                                     (and
                                      (domain
                                       protonNumber
                                       ?g3022
                                       ?g3024)
                                      (equal
                                       ?g3023
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3022))))
                                    (instance ?g3023 ?g3024))
                                   (protonNumber ?ROW0 ?g3027)))))
                               (=>
                                (and
                                 (instance protonNumber Relation)
                                 (and
                                  (valence protonNumber ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       protonNumber
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (protonNumber ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  protonNumber
                                  TotalValuedRelation)
                                 (instance
                                  protonNumber
                                  Predicate))))))))))))))))))
*/
fof(a6681,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G2996] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3022,G3023,G3024] : (? [G3027] : ((s_instance(G3027, s_PositiveInteger) & ((s_instance(G3022, s_PositiveInteger) & s_instance(G3024, s_SetOrClass)) & (s_instance(ITEM, s_PositiveInteger) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G2996, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_PureSubstance) => (((s_instance(s_protonNumber_m, s_TotalValuedRelation) & s_instance(s_protonNumber_m, s_Predicate)) => (s_instance(s_protonNumber_m, s_Relation) & (s_valence(s_protonNumber_m, G2996) & (((less(G3022, G2996) & (s_domain(s_protonNumber_m, G3022, G3024) & (G3023 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3022)))) => s_instance(G3023, G3024)) => s_protonNumber(ROW0, G3027))))) & ((s_instance(s_protonNumber_m, s_Relation) & (s_valence(s_protonNumber_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_protonNumber_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_protonNumber(ROW0, ITEM)))) => (s_instance(s_protonNumber_m, s_TotalValuedRelation) & s_instance(s_protonNumber_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3040)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3066 ?g3067 ?g3068)
      (exists (?g3071)
       (and (instance ?g3071 List)
            (and (and (instance ?g3066 PositiveInteger)
                      (instance ?g3068 SetOrClass))
                 (=> (instance ?ITEM List)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3040 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 List)
                          (and (=>
                                (and
                                 (instance
                                  initialList
                                  TotalValuedRelation)
                                 (instance initialList Predicate))
                                (and
                                 (instance initialList Relation)
                                 (and
                                  (valence initialList ?g3040)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3066 ?g3040)
                                     (and
                                      (domain
                                       initialList
                                       ?g3066
                                       ?g3068)
                                      (equal
                                       ?g3067
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3066))))
                                    (instance ?g3067 ?g3068))
                                   (initialList ?ROW0 ?g3071)))))
                               (=>
                                (and
                                 (instance initialList Relation)
                                 (and
                                  (valence initialList ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       initialList
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (initialList ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  initialList
                                  TotalValuedRelation)
                                 (instance
                                  initialList
                                  Predicate))))))))))))))))))
*/
fof(a6682,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3040] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3066,G3067,G3068] : (? [G3071] : ((s_instance(G3071, s_List) & ((s_instance(G3066, s_PositiveInteger) & s_instance(G3068, s_SetOrClass)) & (s_instance(ITEM, s_List) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3040, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_List) => (((s_instance(s_initialList_m, s_TotalValuedRelation) & s_instance(s_initialList_m, s_Predicate)) => (s_instance(s_initialList_m, s_Relation) & (s_valence(s_initialList_m, G3040) & (((less(G3066, G3040) & (s_domain(s_initialList_m, G3066, G3068) & (G3067 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3066)))) => s_instance(G3067, G3068)) => s_initialList(ROW0, G3071))))) & ((s_instance(s_initialList_m, s_Relation) & (s_valence(s_initialList_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_initialList_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_initialList(ROW0, ITEM)))) => (s_instance(s_initialList_m, s_TotalValuedRelation) & s_instance(s_initialList_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3084)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3110 ?g3111 ?g3112)
      (exists (?g3115)
       (and (instance ?g3115 PositiveInteger)
            (and (and (instance ?g3110 PositiveInteger)
                      (instance ?g3112 SetOrClass))
                 (=> (instance ?ITEM PositiveInteger)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3084 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 PureSubstance)
                          (and (=>
                                (and
                                 (instance
                                  electronNumber
                                  TotalValuedRelation)
                                 (instance electronNumber Predicate))
                                (and
                                 (instance electronNumber Relation)
                                 (and
                                  (valence electronNumber ?g3084)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3110 ?g3084)
                                     (and
                                      (domain
                                       electronNumber
                                       ?g3110
                                       ?g3112)
                                      (equal
                                       ?g3111
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3110))))
                                    (instance ?g3111 ?g3112))
                                   (electronNumber ?ROW0 ?g3115)))))
                               (=>
                                (and
                                 (instance electronNumber Relation)
                                 (and
                                  (valence electronNumber ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       electronNumber
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (electronNumber ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  electronNumber
                                  TotalValuedRelation)
                                 (instance
                                  electronNumber
                                  Predicate))))))))))))))))))
*/
fof(a6683,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3084] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3110,G3111,G3112] : (? [G3115] : ((s_instance(G3115, s_PositiveInteger) & ((s_instance(G3110, s_PositiveInteger) & s_instance(G3112, s_SetOrClass)) & (s_instance(ITEM, s_PositiveInteger) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3084, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_PureSubstance) => (((s_instance(s_electronNumber_m, s_TotalValuedRelation) & s_instance(s_electronNumber_m, s_Predicate)) => (s_instance(s_electronNumber_m, s_Relation) & (s_valence(s_electronNumber_m, G3084) & (((less(G3110, G3084) & (s_domain(s_electronNumber_m, G3110, G3112) & (G3111 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3110)))) => s_instance(G3111, G3112)) => s_electronNumber(ROW0, G3115))))) & ((s_instance(s_electronNumber_m, s_Relation) & (s_valence(s_electronNumber_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_electronNumber_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_electronNumber(ROW0, ITEM)))) => (s_instance(s_electronNumber_m, s_TotalValuedRelation) & s_instance(s_electronNumber_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3128)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3154 ?g3155 ?g3156)
      (exists (?g3159)
       (and (instance ?g3159 TimePosition)
            (and (and (instance ?g3154 PositiveInteger)
                      (instance ?g3156 SetOrClass))
                 (=> (instance ?ITEM TimePosition)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3128 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Physical)
                          (and (=>
                                (and
                                 (instance time TotalValuedRelation)
                                 (instance time Predicate))
                                (and
                                 (instance time Relation)
                                 (and
                                  (valence time ?g3128)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3154 ?g3128)
                                     (and
                                      (domain time ?g3154 ?g3156)
                                      (equal
                                       ?g3155
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3154))))
                                    (instance ?g3155 ?g3156))
                                   (time ?ROW0 ?g3159)))))
                               (=>
                                (and
                                 (instance time Relation)
                                 (and
                                  (valence time ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain time ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (time ?ROW0 ?ITEM))))
                                (and
                                 (instance time TotalValuedRelation)
                                 (instance
                                  time
                                  Predicate))))))))))))))))))
*/
fof(a6684,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3128] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3154,G3155,G3156] : (? [G3159] : ((s_instance(G3159, s_TimePosition) & ((s_instance(G3154, s_PositiveInteger) & s_instance(G3156, s_SetOrClass)) & (s_instance(ITEM, s_TimePosition) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3128, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Physical) => (((s_instance(s_time_m, s_TotalValuedRelation) & s_instance(s_time_m, s_Predicate)) => (s_instance(s_time_m, s_Relation) & (s_valence(s_time_m, G3128) & (((less(G3154, G3128) & (s_domain(s_time_m, G3154, G3156) & (G3155 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3154)))) => s_instance(G3155, G3156)) => s_time(ROW0, G3159))))) & ((s_instance(s_time_m, s_Relation) & (s_valence(s_time_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_time_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_time(ROW0, ITEM)))) => (s_instance(s_time_m, s_TotalValuedRelation) & s_instance(s_time_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3172)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3198 ?g3199 ?g3200)
      (exists (?g3203)
       (and (instance ?g3203 Object)
            (and (and (instance ?g3198 PositiveInteger)
                      (instance ?g3200 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3172 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Motion)
                          (and (=>
                                (and
                                 (instance moves TotalValuedRelation)
                                 (instance moves Predicate))
                                (and
                                 (instance moves Relation)
                                 (and
                                  (valence moves ?g3172)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3198 ?g3172)
                                     (and
                                      (domain moves ?g3198 ?g3200)
                                      (equal
                                       ?g3199
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3198))))
                                    (instance ?g3199 ?g3200))
                                   (moves ?ROW0 ?g3203)))))
                               (=>
                                (and
                                 (instance moves Relation)
                                 (and
                                  (valence moves ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain moves ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (moves ?ROW0 ?ITEM))))
                                (and
                                 (instance moves TotalValuedRelation)
                                 (instance
                                  moves
                                  Predicate))))))))))))))))))
*/
fof(a6685,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3172] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3198,G3199,G3200] : (? [G3203] : ((s_instance(G3203, s_Object) & ((s_instance(G3198, s_PositiveInteger) & s_instance(G3200, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3172, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Motion) => (((s_instance(s_moves_m, s_TotalValuedRelation) & s_instance(s_moves_m, s_Predicate)) => (s_instance(s_moves_m, s_Relation) & (s_valence(s_moves_m, G3172) & (((less(G3198, G3172) & (s_domain(s_moves_m, G3198, G3200) & (G3199 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3198)))) => s_instance(G3199, G3200)) => s_moves(ROW0, G3203))))) & ((s_instance(s_moves_m, s_Relation) & (s_valence(s_moves_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_moves_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_moves(ROW0, ITEM)))) => (s_instance(s_moves_m, s_TotalValuedRelation) & s_instance(s_moves_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3216)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3242 ?g3243 ?g3244)
      (exists (?g3247)
       (and (instance ?g3247 Abstract)
            (and (and (instance ?g3242 PositiveInteger)
                      (instance ?g3244 SetOrClass))
                 (=> (instance ?ITEM Abstract)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3216 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Abstract)
                          (and (=>
                                (and
                                 (instance
                                  abstractPart
                                  TotalValuedRelation)
                                 (instance abstractPart Predicate))
                                (and
                                 (instance abstractPart Relation)
                                 (and
                                  (valence abstractPart ?g3216)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3242 ?g3216)
                                     (and
                                      (domain
                                       abstractPart
                                       ?g3242
                                       ?g3244)
                                      (equal
                                       ?g3243
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3242))))
                                    (instance ?g3243 ?g3244))
                                   (abstractPart ?ROW0 ?g3247)))))
                               (=>
                                (and
                                 (instance abstractPart Relation)
                                 (and
                                  (valence abstractPart ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       abstractPart
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (abstractPart ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  abstractPart
                                  TotalValuedRelation)
                                 (instance
                                  abstractPart
                                  Predicate))))))))))))))))))
*/
fof(a6686,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3216] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3242,G3243,G3244] : (? [G3247] : ((s_instance(G3247, s_Abstract) & ((s_instance(G3242, s_PositiveInteger) & s_instance(G3244, s_SetOrClass)) & (s_instance(ITEM, s_Abstract) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3216, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Abstract) => (((s_instance(s_abstractPart_m, s_TotalValuedRelation) & s_instance(s_abstractPart_m, s_Predicate)) => (s_instance(s_abstractPart_m, s_Relation) & (s_valence(s_abstractPart_m, G3216) & (((less(G3242, G3216) & (s_domain(s_abstractPart_m, G3242, G3244) & (G3243 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3242)))) => s_instance(G3243, G3244)) => s_abstractPart(ROW0, G3247))))) & ((s_instance(s_abstractPart_m, s_Relation) & (s_valence(s_abstractPart_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_abstractPart_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_abstractPart(ROW0, ITEM)))) => (s_instance(s_abstractPart_m, s_TotalValuedRelation) & s_instance(s_abstractPart_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3260)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3286 ?g3287 ?g3288)
      (exists (?g3291)
       (and (instance ?g3291 Collection)
            (and (and (instance ?g3286 PositiveInteger)
                      (instance ?g3288 SetOrClass))
                 (=> (instance ?ITEM Collection)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3260 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Collection)
                          (and (=>
                                (and
                                 (instance
                                  subCollection
                                  TotalValuedRelation)
                                 (instance subCollection Predicate))
                                (and
                                 (instance subCollection Relation)
                                 (and
                                  (valence subCollection ?g3260)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3286 ?g3260)
                                     (and
                                      (domain
                                       subCollection
                                       ?g3286
                                       ?g3288)
                                      (equal
                                       ?g3287
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3286))))
                                    (instance ?g3287 ?g3288))
                                   (subCollection ?ROW0 ?g3291)))))
                               (=>
                                (and
                                 (instance subCollection Relation)
                                 (and
                                  (valence subCollection ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       subCollection
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subCollection ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  subCollection
                                  TotalValuedRelation)
                                 (instance
                                  subCollection
                                  Predicate))))))))))))))))))
*/
fof(a6687,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3260] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3286,G3287,G3288] : (? [G3291] : ((s_instance(G3291, s_Collection) & ((s_instance(G3286, s_PositiveInteger) & s_instance(G3288, s_SetOrClass)) & (s_instance(ITEM, s_Collection) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3260, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Collection) => (((s_instance(s_subCollection_m, s_TotalValuedRelation) & s_instance(s_subCollection_m, s_Predicate)) => (s_instance(s_subCollection_m, s_Relation) & (s_valence(s_subCollection_m, G3260) & (((less(G3286, G3260) & (s_domain(s_subCollection_m, G3286, G3288) & (G3287 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3286)))) => s_instance(G3287, G3288)) => s_subCollection(ROW0, G3291))))) & ((s_instance(s_subCollection_m, s_Relation) & (s_valence(s_subCollection_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subCollection_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subCollection(ROW0, ITEM)))) => (s_instance(s_subCollection_m, s_TotalValuedRelation) & s_instance(s_subCollection_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3304)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3330 ?g3331 ?g3332)
      (exists (?g3335)
       (and (instance ?g3335 GeometricFigure)
            (and (and (instance ?g3330 PositiveInteger)
                      (instance ?g3332 SetOrClass))
                 (=> (instance ?ITEM GeometricFigure)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3304 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 GeometricFigure)
                          (and (=>
                                (and
                                 (instance
                                  geometricPart
                                  TotalValuedRelation)
                                 (instance geometricPart Predicate))
                                (and
                                 (instance geometricPart Relation)
                                 (and
                                  (valence geometricPart ?g3304)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3330 ?g3304)
                                     (and
                                      (domain
                                       geometricPart
                                       ?g3330
                                       ?g3332)
                                      (equal
                                       ?g3331
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3330))))
                                    (instance ?g3331 ?g3332))
                                   (geometricPart ?ROW0 ?g3335)))))
                               (=>
                                (and
                                 (instance geometricPart Relation)
                                 (and
                                  (valence geometricPart ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       geometricPart
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (geometricPart ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  geometricPart
                                  TotalValuedRelation)
                                 (instance
                                  geometricPart
                                  Predicate))))))))))))))))))
*/
fof(a6688,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3304] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3330,G3331,G3332] : (? [G3335] : ((s_instance(G3335, s_GeometricFigure) & ((s_instance(G3330, s_PositiveInteger) & s_instance(G3332, s_SetOrClass)) & (s_instance(ITEM, s_GeometricFigure) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3304, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_GeometricFigure) => (((s_instance(s_geometricPart_m, s_TotalValuedRelation) & s_instance(s_geometricPart_m, s_Predicate)) => (s_instance(s_geometricPart_m, s_Relation) & (s_valence(s_geometricPart_m, G3304) & (((less(G3330, G3304) & (s_domain(s_geometricPart_m, G3330, G3332) & (G3331 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3330)))) => s_instance(G3331, G3332)) => s_geometricPart(ROW0, G3335))))) & ((s_instance(s_geometricPart_m, s_Relation) & (s_valence(s_geometricPart_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_geometricPart_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_geometricPart(ROW0, ITEM)))) => (s_instance(s_geometricPart_m, s_TotalValuedRelation) & s_instance(s_geometricPart_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3348)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3374 ?g3375 ?g3376)
      (exists (?g3379)
       (and (instance ?g3379 TimePoint)
            (and (and (instance ?g3374 PositiveInteger)
                      (instance ?g3376 SetOrClass))
                 (=> (instance ?ITEM TimePoint)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3348 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 TimePoint)
                          (and (=>
                                (and
                                 (instance
                                  beforeOrEqual
                                  TotalValuedRelation)
                                 (instance beforeOrEqual Predicate))
                                (and
                                 (instance beforeOrEqual Relation)
                                 (and
                                  (valence beforeOrEqual ?g3348)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3374 ?g3348)
                                     (and
                                      (domain
                                       beforeOrEqual
                                       ?g3374
                                       ?g3376)
                                      (equal
                                       ?g3375
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3374))))
                                    (instance ?g3375 ?g3376))
                                   (beforeOrEqual ?ROW0 ?g3379)))))
                               (=>
                                (and
                                 (instance beforeOrEqual Relation)
                                 (and
                                  (valence beforeOrEqual ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       beforeOrEqual
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (beforeOrEqual ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  beforeOrEqual
                                  TotalValuedRelation)
                                 (instance
                                  beforeOrEqual
                                  Predicate))))))))))))))))))
*/
fof(a6689,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3348] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3374,G3375,G3376] : (? [G3379] : ((s_instance(G3379, s_TimePoint) & ((s_instance(G3374, s_PositiveInteger) & s_instance(G3376, s_SetOrClass)) & (s_instance(ITEM, s_TimePoint) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3348, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_TimePoint) => (((s_instance(s_beforeOrEqual_m, s_TotalValuedRelation) & s_instance(s_beforeOrEqual_m, s_Predicate)) => (s_instance(s_beforeOrEqual_m, s_Relation) & (s_valence(s_beforeOrEqual_m, G3348) & (((less(G3374, G3348) & (s_domain(s_beforeOrEqual_m, G3374, G3376) & (G3375 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3374)))) => s_instance(G3375, G3376)) => s_beforeOrEqual(ROW0, G3379))))) & ((s_instance(s_beforeOrEqual_m, s_Relation) & (s_valence(s_beforeOrEqual_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_beforeOrEqual_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_beforeOrEqual(ROW0, ITEM)))) => (s_instance(s_beforeOrEqual_m, s_TotalValuedRelation) & s_instance(s_beforeOrEqual_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3392)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3418 ?g3419 ?g3420)
      (exists (?g3423)
       (and (instance ?g3423 TimeDuration)
            (and (and (instance ?g3418 PositiveInteger)
                      (instance ?g3420 SetOrClass))
                 (=> (instance ?ITEM TimeDuration)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3392 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 TimeInterval)
                          (and (=>
                                (and
                                 (instance
                                  duration
                                  TotalValuedRelation)
                                 (instance duration Predicate))
                                (and
                                 (instance duration Relation)
                                 (and
                                  (valence duration ?g3392)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3418 ?g3392)
                                     (and
                                      (domain duration ?g3418 ?g3420)
                                      (equal
                                       ?g3419
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3418))))
                                    (instance ?g3419 ?g3420))
                                   (duration ?ROW0 ?g3423)))))
                               (=>
                                (and
                                 (instance duration Relation)
                                 (and
                                  (valence duration ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain duration ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (duration ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  duration
                                  TotalValuedRelation)
                                 (instance
                                  duration
                                  Predicate))))))))))))))))))
*/
fof(a6690,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3392] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3418,G3419,G3420] : (? [G3423] : ((s_instance(G3423, s_TimeDuration) & ((s_instance(G3418, s_PositiveInteger) & s_instance(G3420, s_SetOrClass)) & (s_instance(ITEM, s_TimeDuration) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3392, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_TimeInterval) => (((s_instance(s_duration_m, s_TotalValuedRelation) & s_instance(s_duration_m, s_Predicate)) => (s_instance(s_duration_m, s_Relation) & (s_valence(s_duration_m, G3392) & (((less(G3418, G3392) & (s_domain(s_duration_m, G3418, G3420) & (G3419 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3418)))) => s_instance(G3419, G3420)) => s_duration(ROW0, G3423))))) & ((s_instance(s_duration_m, s_Relation) & (s_valence(s_duration_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_duration_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_duration(ROW0, ITEM)))) => (s_instance(s_duration_m, s_TotalValuedRelation) & s_instance(s_duration_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3436)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3462 ?g3463 ?g3464)
      (exists (?g3467)
       (and (instance ?g3467 Agent)
            (and (and (instance ?g3462 PositiveInteger)
                      (instance ?g3464 SetOrClass))
                 (=> (instance ?ITEM Agent)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3436 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Contest)
                          (and (=>
                                (and
                                 (instance
                                  contestParticipant
                                  TotalValuedRelation)
                                 (instance
                                  contestParticipant
                                  Predicate))
                                (and
                                 (instance contestParticipant Relation)
                                 (and
                                  (valence contestParticipant ?g3436)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3462 ?g3436)
                                     (and
                                      (domain
                                       contestParticipant
                                       ?g3462
                                       ?g3464)
                                      (equal
                                       ?g3463
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3462))))
                                    (instance ?g3463 ?g3464))
                                   (contestParticipant
                                    ?ROW0
                                    ?g3467)))))
                               (=>
                                (and
                                 (instance contestParticipant Relation)
                                 (and
                                  (valence contestParticipant ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       contestParticipant
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (contestParticipant ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  contestParticipant
                                  TotalValuedRelation)
                                 (instance
                                  contestParticipant
                                  Predicate))))))))))))))))))
*/
fof(a6691,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3436] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3462,G3463,G3464] : (? [G3467] : ((s_instance(G3467, s_Agent) & ((s_instance(G3462, s_PositiveInteger) & s_instance(G3464, s_SetOrClass)) & (s_instance(ITEM, s_Agent) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3436, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Contest) => (((s_instance(s_contestParticipant_m, s_TotalValuedRelation) & s_instance(s_contestParticipant_m, s_Predicate)) => (s_instance(s_contestParticipant_m, s_Relation) & (s_valence(s_contestParticipant_m, G3436) & (((less(G3462, G3436) & (s_domain(s_contestParticipant_m, G3462, G3464) & (G3463 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3462)))) => s_instance(G3463, G3464)) => s_contestParticipant(ROW0, G3467))))) & ((s_instance(s_contestParticipant_m, s_Relation) & (s_valence(s_contestParticipant_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_contestParticipant_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_contestParticipant(ROW0, ITEM)))) => (s_instance(s_contestParticipant_m, s_TotalValuedRelation) & s_instance(s_contestParticipant_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3480)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3506 ?g3507 ?g3508)
      (exists (?g3511)
       (and (instance ?g3511 TimePosition)
            (and (and (instance ?g3506 PositiveInteger)
                      (instance ?g3508 SetOrClass))
                 (=> (instance ?ITEM TimePosition)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3480 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 TimePosition)
                          (and (=>
                                (and
                                 (instance
                                  temporalPart
                                  TotalValuedRelation)
                                 (instance temporalPart Predicate))
                                (and
                                 (instance temporalPart Relation)
                                 (and
                                  (valence temporalPart ?g3480)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3506 ?g3480)
                                     (and
                                      (domain
                                       temporalPart
                                       ?g3506
                                       ?g3508)
                                      (equal
                                       ?g3507
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3506))))
                                    (instance ?g3507 ?g3508))
                                   (temporalPart ?ROW0 ?g3511)))))
                               (=>
                                (and
                                 (instance temporalPart Relation)
                                 (and
                                  (valence temporalPart ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       temporalPart
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (temporalPart ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  temporalPart
                                  TotalValuedRelation)
                                 (instance
                                  temporalPart
                                  Predicate))))))))))))))))))
*/
fof(a6692,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3480] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3506,G3507,G3508] : (? [G3511] : ((s_instance(G3511, s_TimePosition) & ((s_instance(G3506, s_PositiveInteger) & s_instance(G3508, s_SetOrClass)) & (s_instance(ITEM, s_TimePosition) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3480, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_TimePosition) => (((s_instance(s_temporalPart_m, s_TotalValuedRelation) & s_instance(s_temporalPart_m, s_Predicate)) => (s_instance(s_temporalPart_m, s_Relation) & (s_valence(s_temporalPart_m, G3480) & (((less(G3506, G3480) & (s_domain(s_temporalPart_m, G3506, G3508) & (G3507 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3506)))) => s_instance(G3507, G3508)) => s_temporalPart(ROW0, G3511))))) & ((s_instance(s_temporalPart_m, s_Relation) & (s_valence(s_temporalPart_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_temporalPart_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_temporalPart(ROW0, ITEM)))) => (s_instance(s_temporalPart_m, s_TotalValuedRelation) & s_instance(s_temporalPart_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3524)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3550 ?g3551 ?g3552)
      (exists (?g3555)
       (and (instance ?g3555 Object)
            (and (and (instance ?g3550 PositiveInteger)
                      (instance ?g3552 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3524 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Object)
                          (and (=>
                                (and
                                 (instance larger TotalValuedRelation)
                                 (instance larger Predicate))
                                (and
                                 (instance larger Relation)
                                 (and
                                  (valence larger ?g3524)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3550 ?g3524)
                                     (and
                                      (domain larger ?g3550 ?g3552)
                                      (equal
                                       ?g3551
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3550))))
                                    (instance ?g3551 ?g3552))
                                   (larger ?ROW0 ?g3555)))))
                               (=>
                                (and
                                 (instance larger Relation)
                                 (and
                                  (valence larger ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain larger ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (larger ?ROW0 ?ITEM))))
                                (and
                                 (instance larger TotalValuedRelation)
                                 (instance
                                  larger
                                  Predicate))))))))))))))))))
*/
fof(a6693,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3524] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3550,G3551,G3552] : (? [G3555] : ((s_instance(G3555, s_Object) & ((s_instance(G3550, s_PositiveInteger) & s_instance(G3552, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3524, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Object) => (((s_instance(s_larger_m, s_TotalValuedRelation) & s_instance(s_larger_m, s_Predicate)) => (s_instance(s_larger_m, s_Relation) & (s_valence(s_larger_m, G3524) & (((less(G3550, G3524) & (s_domain(s_larger_m, G3550, G3552) & (G3551 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3550)))) => s_instance(G3551, G3552)) => s_larger(ROW0, G3555))))) & ((s_instance(s_larger_m, s_Relation) & (s_valence(s_larger_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_larger_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_larger(ROW0, ITEM)))) => (s_instance(s_larger_m, s_TotalValuedRelation) & s_instance(s_larger_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3568)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3594 ?g3595 ?g3596)
      (exists (?g3599)
       (and (subclass ?g3599 ContentBearingPhysical)
            (and (and (instance ?g3594 PositiveInteger)
                      (instance ?g3596 SetOrClass))
                 (=> (subclass ?ITEM ContentBearingPhysical)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3568 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (subclass ?ROW0 ContentBearingPhysical)
                          (and (=>
                                (and
                                 (instance
                                  subsumesContentClass
                                  TotalValuedRelation)
                                 (instance
                                  subsumesContentClass
                                  Predicate))
                                (and
                                 (instance
                                  subsumesContentClass
                                  Relation)
                                 (and
                                  (valence subsumesContentClass ?g3568)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3594 ?g3568)
                                     (and
                                      (domain
                                       subsumesContentClass
                                       ?g3594
                                       ?g3596)
                                      (equal
                                       ?g3595
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3594))))
                                    (instance ?g3595 ?g3596))
                                   (subsumesContentClass
                                    ?ROW0
                                    ?g3599)))))
                               (=>
                                (and
                                 (instance
                                  subsumesContentClass
                                  Relation)
                                 (and
                                  (valence
                                   subsumesContentClass
                                   ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       subsumesContentClass
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subsumesContentClass
                                    ?ROW0
                                    ?ITEM))))
                                (and
                                 (instance
                                  subsumesContentClass
                                  TotalValuedRelation)
                                 (instance
                                  subsumesContentClass
                                  Predicate))))))))))))))))))
*/
fof(a6694,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3568] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3594,G3595,G3596] : (? [G3599] : ((s_subclass(G3599, s_ContentBearingPhysical) & ((s_instance(G3594, s_PositiveInteger) & s_instance(G3596, s_SetOrClass)) & (s_subclass(ITEM, s_ContentBearingPhysical) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3568, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_subclass(ROW0, s_ContentBearingPhysical) => (((s_instance(s_subsumesContentClass_m, s_TotalValuedRelation) & s_instance(s_subsumesContentClass_m, s_Predicate)) => (s_instance(s_subsumesContentClass_m, s_Relation) & (s_valence(s_subsumesContentClass_m, G3568) & (((less(G3594, G3568) & (s_domain(s_subsumesContentClass_m, G3594, G3596) & (G3595 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3594)))) => s_instance(G3595, G3596)) => s_subsumesContentClass(ROW0, G3599))))) & ((s_instance(s_subsumesContentClass_m, s_Relation) & (s_valence(s_subsumesContentClass_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subsumesContentClass_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subsumesContentClass(ROW0, ITEM)))) => (s_instance(s_subsumesContentClass_m, s_TotalValuedRelation) & s_instance(s_subsumesContentClass_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3612)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3638 ?g3639 ?g3640)
      (exists (?g3643)
       (and (instance ?g3643 Process)
            (and (and (instance ?g3638 PositiveInteger)
                      (instance ?g3640 SetOrClass))
                 (=> (instance ?ITEM Process)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3612 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Process)
                          (and (=>
                                (and
                                 (instance
                                  subProcess
                                  TotalValuedRelation)
                                 (instance subProcess Predicate))
                                (and
                                 (instance subProcess Relation)
                                 (and
                                  (valence subProcess ?g3612)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3638 ?g3612)
                                     (and
                                      (domain subProcess ?g3638 ?g3640)
                                      (equal
                                       ?g3639
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3638))))
                                    (instance ?g3639 ?g3640))
                                   (subProcess ?ROW0 ?g3643)))))
                               (=>
                                (and
                                 (instance subProcess Relation)
                                 (and
                                  (valence subProcess ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       subProcess
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subProcess ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  subProcess
                                  TotalValuedRelation)
                                 (instance
                                  subProcess
                                  Predicate))))))))))))))))))
*/
fof(a6695,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3612] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3638,G3639,G3640] : (? [G3643] : ((s_instance(G3643, s_Process) & ((s_instance(G3638, s_PositiveInteger) & s_instance(G3640, s_SetOrClass)) & (s_instance(ITEM, s_Process) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3612, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Process) => (((s_instance(s_subProcess_m, s_TotalValuedRelation) & s_instance(s_subProcess_m, s_Predicate)) => (s_instance(s_subProcess_m, s_Relation) & (s_valence(s_subProcess_m, G3612) & (((less(G3638, G3612) & (s_domain(s_subProcess_m, G3638, G3640) & (G3639 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3638)))) => s_instance(G3639, G3640)) => s_subProcess(ROW0, G3643))))) & ((s_instance(s_subProcess_m, s_Relation) & (s_valence(s_subProcess_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subProcess_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subProcess(ROW0, ITEM)))) => (s_instance(s_subProcess_m, s_TotalValuedRelation) & s_instance(s_subProcess_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3656)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3682 ?g3683 ?g3684)
      (exists (?g3687)
       (and (instance ?g3687 Organism)
            (and (and (instance ?g3682 PositiveInteger)
                      (instance ?g3684 SetOrClass))
                 (=> (instance ?ITEM Organism)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3656 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Organism)
                          (and (=>
                                (and
                                 (instance parent TotalValuedRelation)
                                 (instance parent Predicate))
                                (and
                                 (instance parent Relation)
                                 (and
                                  (valence parent ?g3656)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3682 ?g3656)
                                     (and
                                      (domain parent ?g3682 ?g3684)
                                      (equal
                                       ?g3683
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3682))))
                                    (instance ?g3683 ?g3684))
                                   (parent ?ROW0 ?g3687)))))
                               (=>
                                (and
                                 (instance parent Relation)
                                 (and
                                  (valence parent ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain parent ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (parent ?ROW0 ?ITEM))))
                                (and
                                 (instance parent TotalValuedRelation)
                                 (instance
                                  parent
                                  Predicate))))))))))))))))))
*/
fof(a6696,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3656] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3682,G3683,G3684] : (? [G3687] : ((s_instance(G3687, s_Organism) & ((s_instance(G3682, s_PositiveInteger) & s_instance(G3684, s_SetOrClass)) & (s_instance(ITEM, s_Organism) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3656, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Organism) => (((s_instance(s_parent_m, s_TotalValuedRelation) & s_instance(s_parent_m, s_Predicate)) => (s_instance(s_parent_m, s_Relation) & (s_valence(s_parent_m, G3656) & (((less(G3682, G3656) & (s_domain(s_parent_m, G3682, G3684) & (G3683 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3682)))) => s_instance(G3683, G3684)) => s_parent(ROW0, G3687))))) & ((s_instance(s_parent_m, s_Relation) & (s_valence(s_parent_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_parent_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_parent(ROW0, ITEM)))) => (s_instance(s_parent_m, s_TotalValuedRelation) & s_instance(s_parent_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3700)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3726 ?g3727 ?g3728)
      (exists (?g3731)
       (and (instance ?g3731 Object)
            (and (and (instance ?g3726 PositiveInteger)
                      (instance ?g3728 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3700 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Translocation)
                          (and (=>
                                (and
                                 (instance
                                  changesLocation
                                  TotalValuedRelation)
                                 (instance changesLocation Predicate))
                                (and
                                 (instance changesLocation Relation)
                                 (and
                                  (valence changesLocation ?g3700)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3726 ?g3700)
                                     (and
                                      (domain
                                       changesLocation
                                       ?g3726
                                       ?g3728)
                                      (equal
                                       ?g3727
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3726))))
                                    (instance ?g3727 ?g3728))
                                   (changesLocation ?ROW0 ?g3731)))))
                               (=>
                                (and
                                 (instance changesLocation Relation)
                                 (and
                                  (valence changesLocation ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       changesLocation
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (changesLocation ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  changesLocation
                                  TotalValuedRelation)
                                 (instance
                                  changesLocation
                                  Predicate))))))))))))))))))
*/
fof(a6697,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3700] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3726,G3727,G3728] : (? [G3731] : ((s_instance(G3731, s_Object) & ((s_instance(G3726, s_PositiveInteger) & s_instance(G3728, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3700, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Translocation) => (((s_instance(s_changesLocation_m, s_TotalValuedRelation) & s_instance(s_changesLocation_m, s_Predicate)) => (s_instance(s_changesLocation_m, s_Relation) & (s_valence(s_changesLocation_m, G3700) & (((less(G3726, G3700) & (s_domain(s_changesLocation_m, G3726, G3728) & (G3727 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3726)))) => s_instance(G3727, G3728)) => s_changesLocation(ROW0, G3731))))) & ((s_instance(s_changesLocation_m, s_Relation) & (s_valence(s_changesLocation_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_changesLocation_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_changesLocation(ROW0, ITEM)))) => (s_instance(s_changesLocation_m, s_TotalValuedRelation) & s_instance(s_changesLocation_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3744)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3770 ?g3771 ?g3772)
      (exists (?g3775)
       (and (instance ?g3775 CurrencyMeasure)
            (and (and (instance ?g3770 PositiveInteger)
                      (instance ?g3772 SetOrClass))
                 (=> (instance ?ITEM CurrencyMeasure)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3744 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 FinancialTransaction)
                          (and (=>
                                (and
                                 (instance
                                  transactionAmount
                                  TotalValuedRelation)
                                 (instance
                                  transactionAmount
                                  Predicate))
                                (and
                                 (instance transactionAmount Relation)
                                 (and
                                  (valence transactionAmount ?g3744)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3770 ?g3744)
                                     (and
                                      (domain
                                       transactionAmount
                                       ?g3770
                                       ?g3772)
                                      (equal
                                       ?g3771
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3770))))
                                    (instance ?g3771 ?g3772))
                                   (transactionAmount ?ROW0 ?g3775)))))
                               (=>
                                (and
                                 (instance transactionAmount Relation)
                                 (and
                                  (valence transactionAmount ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       transactionAmount
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (transactionAmount ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  transactionAmount
                                  TotalValuedRelation)
                                 (instance
                                  transactionAmount
                                  Predicate))))))))))))))))))
*/
fof(a6698,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3744] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3770,G3771,G3772] : (? [G3775] : ((s_instance(G3775, s_CurrencyMeasure) & ((s_instance(G3770, s_PositiveInteger) & s_instance(G3772, s_SetOrClass)) & (s_instance(ITEM, s_CurrencyMeasure) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3744, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_FinancialTransaction) => (((s_instance(s_transactionAmount_m, s_TotalValuedRelation) & s_instance(s_transactionAmount_m, s_Predicate)) => (s_instance(s_transactionAmount_m, s_Relation) & (s_valence(s_transactionAmount_m, G3744) & (((less(G3770, G3744) & (s_domain(s_transactionAmount_m, G3770, G3772) & (G3771 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3770)))) => s_instance(G3771, G3772)) => s_transactionAmount(ROW0, G3775))))) & ((s_instance(s_transactionAmount_m, s_Relation) & (s_valence(s_transactionAmount_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_transactionAmount_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_transactionAmount(ROW0, ITEM)))) => (s_instance(s_transactionAmount_m, s_TotalValuedRelation) & s_instance(s_transactionAmount_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3788)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3814 ?g3815 ?g3816)
      (exists (?g3819)
       (and (instance ?g3819 LengthMeasure)
            (and (and (instance ?g3814 PositiveInteger)
                      (instance ?g3816 SetOrClass))
                 (=> (instance ?ITEM LengthMeasure)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3788 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Circle)
                          (and (=>
                                (and
                                 (instance radius TotalValuedRelation)
                                 (instance radius Predicate))
                                (and
                                 (instance radius Relation)
                                 (and
                                  (valence radius ?g3788)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3814 ?g3788)
                                     (and
                                      (domain radius ?g3814 ?g3816)
                                      (equal
                                       ?g3815
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3814))))
                                    (instance ?g3815 ?g3816))
                                   (radius ?ROW0 ?g3819)))))
                               (=>
                                (and
                                 (instance radius Relation)
                                 (and
                                  (valence radius ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain radius ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (radius ?ROW0 ?ITEM))))
                                (and
                                 (instance radius TotalValuedRelation)
                                 (instance
                                  radius
                                  Predicate))))))))))))))))))
*/
fof(a6699,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3788] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3814,G3815,G3816] : (? [G3819] : ((s_instance(G3819, s_LengthMeasure) & ((s_instance(G3814, s_PositiveInteger) & s_instance(G3816, s_SetOrClass)) & (s_instance(ITEM, s_LengthMeasure) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3788, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Circle) => (((s_instance(s_radius_m, s_TotalValuedRelation) & s_instance(s_radius_m, s_Predicate)) => (s_instance(s_radius_m, s_Relation) & (s_valence(s_radius_m, G3788) & (((less(G3814, G3788) & (s_domain(s_radius_m, G3814, G3816) & (G3815 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3814)))) => s_instance(G3815, G3816)) => s_radius(ROW0, G3819))))) & ((s_instance(s_radius_m, s_Relation) & (s_valence(s_radius_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_radius_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_radius(ROW0, ITEM)))) => (s_instance(s_radius_m, s_TotalValuedRelation) & s_instance(s_radius_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3832)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3858 ?g3859 ?g3860)
      (exists (?g3863)
       (and (instance ?g3863 SymbolicString)
            (and (and (instance ?g3858 PositiveInteger)
                      (instance ?g3860 SetOrClass))
                 (=> (instance ?ITEM SymbolicString)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3832 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 SymbolicString)
                          (and (=>
                                (and
                                 (instance
                                  subString
                                  TotalValuedRelation)
                                 (instance subString Predicate))
                                (and
                                 (instance subString Relation)
                                 (and
                                  (valence subString ?g3832)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3858 ?g3832)
                                     (and
                                      (domain subString ?g3858 ?g3860)
                                      (equal
                                       ?g3859
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3858))))
                                    (instance ?g3859 ?g3860))
                                   (subString ?ROW0 ?g3863)))))
                               (=>
                                (and
                                 (instance subString Relation)
                                 (and
                                  (valence subString ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain subString ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subString ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  subString
                                  TotalValuedRelation)
                                 (instance
                                  subString
                                  Predicate))))))))))))))))))
*/
fof(a6700,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3832] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3858,G3859,G3860] : (? [G3863] : ((s_instance(G3863, s_SymbolicString) & ((s_instance(G3858, s_PositiveInteger) & s_instance(G3860, s_SetOrClass)) & (s_instance(ITEM, s_SymbolicString) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3832, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_SymbolicString) => (((s_instance(s_subString_m, s_TotalValuedRelation) & s_instance(s_subString_m, s_Predicate)) => (s_instance(s_subString_m, s_Relation) & (s_valence(s_subString_m, G3832) & (((less(G3858, G3832) & (s_domain(s_subString_m, G3858, G3860) & (G3859 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3858)))) => s_instance(G3859, G3860)) => s_subString(ROW0, G3863))))) & ((s_instance(s_subString_m, s_Relation) & (s_valence(s_subString_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subString_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subString(ROW0, ITEM)))) => (s_instance(s_subString_m, s_TotalValuedRelation) & s_instance(s_subString_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3876)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3902 ?g3903 ?g3904)
      (exists (?g3907)
       (and (instance ?g3907 Quantity)
            (and (and (instance ?g3902 PositiveInteger)
                      (instance ?g3904 SetOrClass))
                 (=> (instance ?ITEM Quantity)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3876 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Quantity)
                          (and (=>
                                (and
                                 (instance
                                  greaterThan
                                  TotalValuedRelation)
                                 (instance greaterThan Predicate))
                                (and
                                 (instance greaterThan Relation)
                                 (and
                                  (valence greaterThan ?g3876)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3902 ?g3876)
                                     (and
                                      (domain
                                       greaterThan
                                       ?g3902
                                       ?g3904)
                                      (equal
                                       ?g3903
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3902))))
                                    (instance ?g3903 ?g3904))
                                   (greaterThan ?ROW0 ?g3907)))))
                               (=>
                                (and
                                 (instance greaterThan Relation)
                                 (and
                                  (valence greaterThan ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       greaterThan
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (greaterThan ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  greaterThan
                                  TotalValuedRelation)
                                 (instance
                                  greaterThan
                                  Predicate))))))))))))))))))
*/
fof(a6701,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3876] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3902,G3903,G3904] : (? [G3907] : ((s_instance(G3907, s_Quantity) & ((s_instance(G3902, s_PositiveInteger) & s_instance(G3904, s_SetOrClass)) & (s_instance(ITEM, s_Quantity) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3876, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Quantity) => (((s_instance(s_greaterThan_m, s_TotalValuedRelation) & s_instance(s_greaterThan_m, s_Predicate)) => (s_instance(s_greaterThan_m, s_Relation) & (s_valence(s_greaterThan_m, G3876) & (((less(G3902, G3876) & (s_domain(s_greaterThan_m, G3902, G3904) & (G3903 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3902)))) => s_instance(G3903, G3904)) => greater(ROW0, G3907))))) & ((s_instance(s_greaterThan_m, s_Relation) & (s_valence(s_greaterThan_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_greaterThan_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => greater(ROW0, ITEM)))) => (s_instance(s_greaterThan_m, s_TotalValuedRelation) & s_instance(s_greaterThan_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3920)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3946 ?g3947 ?g3948)
      (exists (?g3951)
       (and (instance ?g3951 Quantity)
            (and (and (instance ?g3946 PositiveInteger)
                      (instance ?g3948 SetOrClass))
                 (=> (instance ?ITEM Quantity)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3920 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Quantity)
                          (and (=>
                                (and
                                 (instance
                                  greaterThanOrEqualTo
                                  TotalValuedRelation)
                                 (instance
                                  greaterThanOrEqualTo
                                  Predicate))
                                (and
                                 (instance
                                  greaterThanOrEqualTo
                                  Relation)
                                 (and
                                  (valence greaterThanOrEqualTo ?g3920)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3946 ?g3920)
                                     (and
                                      (domain
                                       greaterThanOrEqualTo
                                       ?g3946
                                       ?g3948)
                                      (equal
                                       ?g3947
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3946))))
                                    (instance ?g3947 ?g3948))
                                   (greaterThanOrEqualTo
                                    ?ROW0
                                    ?g3951)))))
                               (=>
                                (and
                                 (instance
                                  greaterThanOrEqualTo
                                  Relation)
                                 (and
                                  (valence
                                   greaterThanOrEqualTo
                                   ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       greaterThanOrEqualTo
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (greaterThanOrEqualTo
                                    ?ROW0
                                    ?ITEM))))
                                (and
                                 (instance
                                  greaterThanOrEqualTo
                                  TotalValuedRelation)
                                 (instance
                                  greaterThanOrEqualTo
                                  Predicate))))))))))))))))))
*/
fof(a6702,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3920] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3946,G3947,G3948] : (? [G3951] : ((s_instance(G3951, s_Quantity) & ((s_instance(G3946, s_PositiveInteger) & s_instance(G3948, s_SetOrClass)) & (s_instance(ITEM, s_Quantity) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3920, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Quantity) => (((s_instance(s_greaterThanOrEqualTo_m, s_TotalValuedRelation) & s_instance(s_greaterThanOrEqualTo_m, s_Predicate)) => (s_instance(s_greaterThanOrEqualTo_m, s_Relation) & (s_valence(s_greaterThanOrEqualTo_m, G3920) & (((less(G3946, G3920) & (s_domain(s_greaterThanOrEqualTo_m, G3946, G3948) & (G3947 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3946)))) => s_instance(G3947, G3948)) => s_greaterThanOrEqualTo(ROW0, G3951))))) & ((s_instance(s_greaterThanOrEqualTo_m, s_Relation) & (s_valence(s_greaterThanOrEqualTo_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_greaterThanOrEqualTo_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_greaterThanOrEqualTo(ROW0, ITEM)))) => (s_instance(s_greaterThanOrEqualTo_m, s_TotalValuedRelation) & s_instance(s_greaterThanOrEqualTo_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g3964)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g3990 ?g3991 ?g3992)
      (exists (?g3995)
       (and (instance ?g3995 ContentBearingPhysical)
            (and (and (instance ?g3990 PositiveInteger)
                      (instance ?g3992 SetOrClass))
                 (=> (instance ?ITEM ContentBearingPhysical)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g3964 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 ContentBearingPhysical)
                          (and (=>
                                (and
                                 (instance
                                  subsumesContentInstance
                                  TotalValuedRelation)
                                 (instance
                                  subsumesContentInstance
                                  Predicate))
                                (and
                                 (instance
                                  subsumesContentInstance
                                  Relation)
                                 (and
                                  (valence
                                   subsumesContentInstance
                                   ?g3964)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g3990 ?g3964)
                                     (and
                                      (domain
                                       subsumesContentInstance
                                       ?g3990
                                       ?g3992)
                                      (equal
                                       ?g3991
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g3990))))
                                    (instance ?g3991 ?g3992))
                                   (subsumesContentInstance
                                    ?ROW0
                                    ?g3995)))))
                               (=>
                                (and
                                 (instance
                                  subsumesContentInstance
                                  Relation)
                                 (and
                                  (valence
                                   subsumesContentInstance
                                   ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       subsumesContentInstance
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subsumesContentInstance
                                    ?ROW0
                                    ?ITEM))))
                                (and
                                 (instance
                                  subsumesContentInstance
                                  TotalValuedRelation)
                                 (instance
                                  subsumesContentInstance
                                  Predicate))))))))))))))))))
*/
fof(a6703,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G3964] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G3990,G3991,G3992] : (? [G3995] : ((s_instance(G3995, s_ContentBearingPhysical) & ((s_instance(G3990, s_PositiveInteger) & s_instance(G3992, s_SetOrClass)) & (s_instance(ITEM, s_ContentBearingPhysical) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G3964, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_ContentBearingPhysical) => (((s_instance(s_subsumesContentInstance_m, s_TotalValuedRelation) & s_instance(s_subsumesContentInstance_m, s_Predicate)) => (s_instance(s_subsumesContentInstance_m, s_Relation) & (s_valence(s_subsumesContentInstance_m, G3964) & (((less(G3990, G3964) & (s_domain(s_subsumesContentInstance_m, G3990, G3992) & (G3991 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G3990)))) => s_instance(G3991, G3992)) => s_subsumesContentInstance(ROW0, G3995))))) & ((s_instance(s_subsumesContentInstance_m, s_Relation) & (s_valence(s_subsumesContentInstance_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subsumesContentInstance_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subsumesContentInstance(ROW0, ITEM)))) => (s_instance(s_subsumesContentInstance_m, s_TotalValuedRelation) & s_instance(s_subsumesContentInstance_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4008)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4034 ?g4035 ?g4036)
      (exists (?g4039)
       (and (instance ?g4039 Object)
            (and (and (instance ?g4034 PositiveInteger)
                      (instance ?g4036 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4008 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Physical)
                          (and (=>
                                (and
                                 (instance
                                  partlyLocated
                                  TotalValuedRelation)
                                 (instance partlyLocated Predicate))
                                (and
                                 (instance partlyLocated Relation)
                                 (and
                                  (valence partlyLocated ?g4008)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4034 ?g4008)
                                     (and
                                      (domain
                                       partlyLocated
                                       ?g4034
                                       ?g4036)
                                      (equal
                                       ?g4035
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4034))))
                                    (instance ?g4035 ?g4036))
                                   (partlyLocated ?ROW0 ?g4039)))))
                               (=>
                                (and
                                 (instance partlyLocated Relation)
                                 (and
                                  (valence partlyLocated ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       partlyLocated
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (partlyLocated ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  partlyLocated
                                  TotalValuedRelation)
                                 (instance
                                  partlyLocated
                                  Predicate))))))))))))))))))
*/
fof(a6704,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4008] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4034,G4035,G4036] : (? [G4039] : ((s_instance(G4039, s_Object) & ((s_instance(G4034, s_PositiveInteger) & s_instance(G4036, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4008, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Physical) => (((s_instance(s_partlyLocated_m, s_TotalValuedRelation) & s_instance(s_partlyLocated_m, s_Predicate)) => (s_instance(s_partlyLocated_m, s_Relation) & (s_valence(s_partlyLocated_m, G4008) & (((less(G4034, G4008) & (s_domain(s_partlyLocated_m, G4034, G4036) & (G4035 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4034)))) => s_instance(G4035, G4036)) => s_partlyLocated(ROW0, G4039))))) & ((s_instance(s_partlyLocated_m, s_Relation) & (s_valence(s_partlyLocated_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_partlyLocated_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_partlyLocated(ROW0, ITEM)))) => (s_instance(s_partlyLocated_m, s_TotalValuedRelation) & s_instance(s_partlyLocated_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4052)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4078 ?g4079 ?g4080)
      (exists (?g4083)
       (and (instance ?g4083 LengthMeasure)
            (and (and (instance ?g4078 PositiveInteger)
                      (instance ?g4080 SetOrClass))
                 (=> (instance ?ITEM LengthMeasure)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4052 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Circle)
                          (and (=>
                                (and
                                 (instance
                                  diameter
                                  TotalValuedRelation)
                                 (instance diameter Predicate))
                                (and
                                 (instance diameter Relation)
                                 (and
                                  (valence diameter ?g4052)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4078 ?g4052)
                                     (and
                                      (domain diameter ?g4078 ?g4080)
                                      (equal
                                       ?g4079
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4078))))
                                    (instance ?g4079 ?g4080))
                                   (diameter ?ROW0 ?g4083)))))
                               (=>
                                (and
                                 (instance diameter Relation)
                                 (and
                                  (valence diameter ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain diameter ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (diameter ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  diameter
                                  TotalValuedRelation)
                                 (instance
                                  diameter
                                  Predicate))))))))))))))))))
*/
fof(a6705,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4052] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4078,G4079,G4080] : (? [G4083] : ((s_instance(G4083, s_LengthMeasure) & ((s_instance(G4078, s_PositiveInteger) & s_instance(G4080, s_SetOrClass)) & (s_instance(ITEM, s_LengthMeasure) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4052, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Circle) => (((s_instance(s_diameter_m, s_TotalValuedRelation) & s_instance(s_diameter_m, s_Predicate)) => (s_instance(s_diameter_m, s_Relation) & (s_valence(s_diameter_m, G4052) & (((less(G4078, G4052) & (s_domain(s_diameter_m, G4078, G4080) & (G4079 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4078)))) => s_instance(G4079, G4080)) => s_diameter(ROW0, G4083))))) & ((s_instance(s_diameter_m, s_Relation) & (s_valence(s_diameter_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_diameter_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_diameter(ROW0, ITEM)))) => (s_instance(s_diameter_m, s_TotalValuedRelation) & s_instance(s_diameter_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4096)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4122 ?g4123 ?g4124)
      (exists (?g4127)
       (and (instance ?g4127 Relation)
            (and (and (instance ?g4122 PositiveInteger)
                      (instance ?g4124 SetOrClass))
                 (=> (instance ?ITEM Relation)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4096 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Relation)
                          (and (=>
                                (and
                                 (instance
                                  subrelation
                                  TotalValuedRelation)
                                 (instance subrelation Predicate))
                                (and
                                 (instance subrelation Relation)
                                 (and
                                  (valence subrelation ?g4096)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4122 ?g4096)
                                     (and
                                      (domain
                                       subrelation
                                       ?g4122
                                       ?g4124)
                                      (equal
                                       ?g4123
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4122))))
                                    (instance ?g4123 ?g4124))
                                   (subrelation ?ROW0 ?g4127)))))
                               (=>
                                (and
                                 (instance subrelation Relation)
                                 (and
                                  (valence subrelation ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       subrelation
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subrelation ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  subrelation
                                  TotalValuedRelation)
                                 (instance
                                  subrelation
                                  Predicate))))))))))))))))))
*/
fof(a6706,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4096] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4122,G4123,G4124] : (? [G4127] : ((s_instance(G4127, s_Relation) & ((s_instance(G4122, s_PositiveInteger) & s_instance(G4124, s_SetOrClass)) & (s_instance(ITEM, s_Relation) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4096, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Relation) => (((s_instance(s_subrelation_m, s_TotalValuedRelation) & s_instance(s_subrelation_m, s_Predicate)) => (s_instance(s_subrelation_m, s_Relation) & (s_valence(s_subrelation_m, G4096) & (((less(G4122, G4096) & (s_domain(s_subrelation_m, G4122, G4124) & (G4123 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4122)))) => s_instance(G4123, G4124)) => s_subrelation(ROW0, G4127))))) & ((s_instance(s_subrelation_m, s_Relation) & (s_valence(s_subrelation_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subrelation_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subrelation(ROW0, ITEM)))) => (s_instance(s_subrelation_m, s_TotalValuedRelation) & s_instance(s_subrelation_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4140)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4166 ?g4167 ?g4168)
      (exists (?g4171)
       (and (instance ?g4171 SymbolicString)
            (and (and (instance ?g4166 PositiveInteger)
                      (instance ?g4168 SetOrClass))
                 (=> (instance ?ITEM SymbolicString)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4140 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 NonnegativeInteger)
                          (and (=>
                                (and
                                 (instance
                                  stringLength
                                  TotalValuedRelation)
                                 (instance stringLength Predicate))
                                (and
                                 (instance stringLength Relation)
                                 (and
                                  (valence stringLength ?g4140)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4166 ?g4140)
                                     (and
                                      (domain
                                       stringLength
                                       ?g4166
                                       ?g4168)
                                      (equal
                                       ?g4167
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4166))))
                                    (instance ?g4167 ?g4168))
                                   (stringLength ?ROW0 ?g4171)))))
                               (=>
                                (and
                                 (instance stringLength Relation)
                                 (and
                                  (valence stringLength ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       stringLength
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (stringLength ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  stringLength
                                  TotalValuedRelation)
                                 (instance
                                  stringLength
                                  Predicate))))))))))))))))))
*/
fof(a6707,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4140] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4166,G4167,G4168] : (? [G4171] : ((s_instance(G4171, s_SymbolicString) & ((s_instance(G4166, s_PositiveInteger) & s_instance(G4168, s_SetOrClass)) & (s_instance(ITEM, s_SymbolicString) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4140, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_NonnegativeInteger) => (((s_instance(s_stringLength_m, s_TotalValuedRelation) & s_instance(s_stringLength_m, s_Predicate)) => (s_instance(s_stringLength_m, s_Relation) & (s_valence(s_stringLength_m, G4140) & (((less(G4166, G4140) & (s_domain(s_stringLength_m, G4166, G4168) & (G4167 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4166)))) => s_instance(G4167, G4168)) => s_stringLength(ROW0, G4171))))) & ((s_instance(s_stringLength_m, s_Relation) & (s_valence(s_stringLength_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_stringLength_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_stringLength(ROW0, ITEM)))) => (s_instance(s_stringLength_m, s_TotalValuedRelation) & s_instance(s_stringLength_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4184)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4210 ?g4211 ?g4212)
      (exists (?g4215)
       (and (instance ?g4215 Quantity)
            (and (and (instance ?g4210 PositiveInteger)
                      (instance ?g4212 SetOrClass))
                 (=> (instance ?ITEM Quantity)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4184 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Quantity)
                          (and (=>
                                (and
                                 (instance
                                  lessThanOrEqualTo
                                  TotalValuedRelation)
                                 (instance
                                  lessThanOrEqualTo
                                  Predicate))
                                (and
                                 (instance lessThanOrEqualTo Relation)
                                 (and
                                  (valence lessThanOrEqualTo ?g4184)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4210 ?g4184)
                                     (and
                                      (domain
                                       lessThanOrEqualTo
                                       ?g4210
                                       ?g4212)
                                      (equal
                                       ?g4211
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4210))))
                                    (instance ?g4211 ?g4212))
                                   (lessThanOrEqualTo ?ROW0 ?g4215)))))
                               (=>
                                (and
                                 (instance lessThanOrEqualTo Relation)
                                 (and
                                  (valence lessThanOrEqualTo ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       lessThanOrEqualTo
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (lessThanOrEqualTo ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  lessThanOrEqualTo
                                  TotalValuedRelation)
                                 (instance
                                  lessThanOrEqualTo
                                  Predicate))))))))))))))))))
*/
fof(a6708,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4184] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4210,G4211,G4212] : (? [G4215] : ((s_instance(G4215, s_Quantity) & ((s_instance(G4210, s_PositiveInteger) & s_instance(G4212, s_SetOrClass)) & (s_instance(ITEM, s_Quantity) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4184, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Quantity) => (((s_instance(s_lessThanOrEqualTo_m, s_TotalValuedRelation) & s_instance(s_lessThanOrEqualTo_m, s_Predicate)) => (s_instance(s_lessThanOrEqualTo_m, s_Relation) & (s_valence(s_lessThanOrEqualTo_m, G4184) & (((less(G4210, G4184) & (s_domain(s_lessThanOrEqualTo_m, G4210, G4212) & (G4211 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4210)))) => s_instance(G4211, G4212)) => lesseq(ROW0, G4215))))) & ((s_instance(s_lessThanOrEqualTo_m, s_Relation) & (s_valence(s_lessThanOrEqualTo_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_lessThanOrEqualTo_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => lesseq(ROW0, ITEM)))) => (s_instance(s_lessThanOrEqualTo_m, s_TotalValuedRelation) & s_instance(s_lessThanOrEqualTo_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4228)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4254 ?g4255 ?g4256)
      (exists (?g4259)
       (and (instance ?g4259 TimeInterval)
            (and (and (instance ?g4254 PositiveInteger)
                      (instance ?g4256 SetOrClass))
                 (=> (instance ?ITEM TimeInterval)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4228 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 TimeInterval)
                          (and (=>
                                (and
                                 (instance earlier TotalValuedRelation)
                                 (instance earlier Predicate))
                                (and
                                 (instance earlier Relation)
                                 (and
                                  (valence earlier ?g4228)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4254 ?g4228)
                                     (and
                                      (domain earlier ?g4254 ?g4256)
                                      (equal
                                       ?g4255
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4254))))
                                    (instance ?g4255 ?g4256))
                                   (earlier ?ROW0 ?g4259)))))
                               (=>
                                (and
                                 (instance earlier Relation)
                                 (and
                                  (valence earlier ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain earlier ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (earlier ?ROW0 ?ITEM))))
                                (and
                                 (instance earlier TotalValuedRelation)
                                 (instance
                                  earlier
                                  Predicate))))))))))))))))))
*/
fof(a6709,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4228] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4254,G4255,G4256] : (? [G4259] : ((s_instance(G4259, s_TimeInterval) & ((s_instance(G4254, s_PositiveInteger) & s_instance(G4256, s_SetOrClass)) & (s_instance(ITEM, s_TimeInterval) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4228, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_TimeInterval) => (((s_instance(s_earlier_m, s_TotalValuedRelation) & s_instance(s_earlier_m, s_Predicate)) => (s_instance(s_earlier_m, s_Relation) & (s_valence(s_earlier_m, G4228) & (((less(G4254, G4228) & (s_domain(s_earlier_m, G4254, G4256) & (G4255 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4254)))) => s_instance(G4255, G4256)) => s_earlier(ROW0, G4259))))) & ((s_instance(s_earlier_m, s_Relation) & (s_valence(s_earlier_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_earlier_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_earlier(ROW0, ITEM)))) => (s_instance(s_earlier_m, s_TotalValuedRelation) & s_instance(s_earlier_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4272)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4298 ?g4299 ?g4300)
      (exists (?g4303)
       (and (instance ?g4303 SetOrClass)
            (and (and (instance ?g4298 PositiveInteger)
                      (instance ?g4300 SetOrClass))
                 (=> (instance ?ITEM SetOrClass)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4272 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 SetOrClass)
                          (and (=>
                                (and
                                 (instance
                                  subclass
                                  TotalValuedRelation)
                                 (instance subclass Predicate))
                                (and
                                 (instance subclass Relation)
                                 (and
                                  (valence subclass ?g4272)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4298 ?g4272)
                                     (and
                                      (domain subclass ?g4298 ?g4300)
                                      (equal
                                       ?g4299
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4298))))
                                    (instance ?g4299 ?g4300))
                                   (subclass ?ROW0 ?g4303)))))
                               (=>
                                (and
                                 (instance subclass Relation)
                                 (and
                                  (valence subclass ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain subclass ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subclass ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  subclass
                                  TotalValuedRelation)
                                 (instance
                                  subclass
                                  Predicate))))))))))))))))))
*/
fof(a6710,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4272] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4298,G4299,G4300] : (? [G4303] : ((s_instance(G4303, s_SetOrClass) & ((s_instance(G4298, s_PositiveInteger) & s_instance(G4300, s_SetOrClass)) & (s_instance(ITEM, s_SetOrClass) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4272, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_SetOrClass) => (((s_instance(s_subclass_m, s_TotalValuedRelation) & s_instance(s_subclass_m, s_Predicate)) => (s_instance(s_subclass_m, s_Relation) & (s_valence(s_subclass_m, G4272) & (((less(G4298, G4272) & (s_domain(s_subclass_m, G4298, G4300) & (G4299 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4298)))) => s_instance(G4299, G4300)) => s_subclass(ROW0, G4303))))) & ((s_instance(s_subclass_m, s_Relation) & (s_valence(s_subclass_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subclass_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subclass(ROW0, ITEM)))) => (s_instance(s_subclass_m, s_TotalValuedRelation) & s_instance(s_subclass_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4316)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4342 ?g4343 ?g4344)
      (exists (?g4347)
       (and (instance ?g4347 Object)
            (and (and (instance ?g4342 PositiveInteger)
                      (instance ?g4344 SetOrClass))
                 (=> (instance ?ITEM Object)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4316 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 Process)
                          (and (=>
                                (and
                                 (instance
                                  eventLocated
                                  TotalValuedRelation)
                                 (instance eventLocated Predicate))
                                (and
                                 (instance eventLocated Relation)
                                 (and
                                  (valence eventLocated ?g4316)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4342 ?g4316)
                                     (and
                                      (domain
                                       eventLocated
                                       ?g4342
                                       ?g4344)
                                      (equal
                                       ?g4343
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4342))))
                                    (instance ?g4343 ?g4344))
                                   (eventLocated ?ROW0 ?g4347)))))
                               (=>
                                (and
                                 (instance eventLocated Relation)
                                 (and
                                  (valence eventLocated ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain
                                       eventLocated
                                       ?NUMBER
                                       ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (eventLocated ?ROW0 ?ITEM))))
                                (and
                                 (instance
                                  eventLocated
                                  TotalValuedRelation)
                                 (instance
                                  eventLocated
                                  Predicate))))))))))))))))))
*/
fof(a6711,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4316] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4342,G4343,G4344] : (? [G4347] : ((s_instance(G4347, s_Object) & ((s_instance(G4342, s_PositiveInteger) & s_instance(G4344, s_SetOrClass)) & (s_instance(ITEM, s_Object) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4316, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_Process) => (((s_instance(s_eventLocated_m, s_TotalValuedRelation) & s_instance(s_eventLocated_m, s_Predicate)) => (s_instance(s_eventLocated_m, s_Relation) & (s_valence(s_eventLocated_m, G4316) & (((less(G4342, G4316) & (s_domain(s_eventLocated_m, G4342, G4344) & (G4343 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4342)))) => s_instance(G4343, G4344)) => s_eventLocated(ROW0, G4347))))) & ((s_instance(s_eventLocated_m, s_Relation) & (s_valence(s_eventLocated_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_eventLocated_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_eventLocated(ROW0, ITEM)))) => (s_instance(s_eventLocated_m, s_TotalValuedRelation) & s_instance(s_eventLocated_m, s_Predicate))))))))))))))))))).

/*
(forall (?ROW1 ?ROW0)
 (forall (?VALENCE)
  (exists (?g4360)
   (forall (?NUMBER ?ELEMENT ?CLASS)
    (forall (?ITEM)
     (exists (?g4386 ?g4387 ?g4388)
      (exists (?g4391)
       (and (instance ?g4391 List)
            (and (and (instance ?g4386 PositiveInteger)
                      (instance ?g4388 SetOrClass))
                 (=> (instance ?ITEM List)
                  (=>
                   (and (instance ?NUMBER PositiveInteger)
                        (instance ?CLASS SetOrClass))
                   (and (instance ?g4360 PositiveInteger)
                        (=> (instance ?VALENCE PositiveInteger)
                         (=> (instance ?ROW0 List)
                          (and (=>
                                (and
                                 (instance subList TotalValuedRelation)
                                 (instance subList Predicate))
                                (and
                                 (instance subList Relation)
                                 (and
                                  (valence subList ?g4360)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?g4386 ?g4360)
                                     (and
                                      (domain subList ?g4386 ?g4388)
                                      (equal
                                       ?g4387
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?g4386))))
                                    (instance ?g4387 ?g4388))
                                   (subList ?ROW0 ?g4391)))))
                               (=>
                                (and
                                 (instance subList Relation)
                                 (and
                                  (valence subList ?VALENCE)
                                  (=>
                                   (=>
                                    (and
                                     (lessThan ?NUMBER ?VALENCE)
                                     (and
                                      (domain subList ?NUMBER ?CLASS)
                                      (equal
                                       ?ELEMENT
                                       (ListOrderFn
                                        (ListFn2 ?ROW0 ?ROW1)
                                        ?NUMBER))))
                                    (instance ?ELEMENT ?CLASS))
                                   (subList ?ROW0 ?ITEM))))
                                (and
                                 (instance subList TotalValuedRelation)
                                 (instance
                                  subList
                                  Predicate))))))))))))))))))
*/
fof(a6712,axiom,! [ROW1,ROW0] : (! [VALENCE] : (? [G4360] : (! [NUMBER,ELEMENT,CLASS] : (! [ITEM] : (? [G4386,G4387,G4388] : (? [G4391] : ((s_instance(G4391, s_List) & ((s_instance(G4386, s_PositiveInteger) & s_instance(G4388, s_SetOrClass)) & (s_instance(ITEM, s_List) => ((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => (s_instance(G4360, s_PositiveInteger) & (s_instance(VALENCE, s_PositiveInteger) => (s_instance(ROW0, s_List) => (((s_instance(s_subList_m, s_TotalValuedRelation) & s_instance(s_subList_m, s_Predicate)) => (s_instance(s_subList_m, s_Relation) & (s_valence(s_subList_m, G4360) & (((less(G4386, G4360) & (s_domain(s_subList_m, G4386, G4388) & (G4387 = s_ListOrderFn(s_ListFn2(ROW0, ROW1), G4386)))) => s_instance(G4387, G4388)) => s_subList(ROW0, G4391))))) & ((s_instance(s_subList_m, s_Relation) & (s_valence(s_subList_m, VALENCE) & (((less(NUMBER, VALENCE) & (s_domain(s_subList_m, NUMBER, CLASS) & (ELEMENT = s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER)))) => s_instance(ELEMENT, CLASS)) => s_subList(ROW0, ITEM)))) => (s_instance(s_subList_m, s_TotalValuedRelation) & s_instance(s_subList_m, s_Predicate))))))))))))))))))).

/*
(subclass PartialValuedRelation Relation)
*/
fof(a6713,axiom,s_subclass(s_PartialValuedRelation, s_Relation)).

/*
(subclass BinaryRelation Relation)
*/
fof(a6714,axiom,s_subclass(s_BinaryRelation, s_Relation)).

/*
(subclass BinaryRelation InheritableRelation)
*/
fof(a6715,axiom,s_subclass(s_BinaryRelation, s_InheritableRelation)).

/*
(subclass ReflexiveRelation BinaryRelation)
*/
fof(a6716,axiom,s_subclass(s_ReflexiveRelation, s_BinaryRelation)).

/*
(subclass IrreflexiveRelation BinaryRelation)
*/
fof(a6717,axiom,s_subclass(s_IrreflexiveRelation, s_BinaryRelation)).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance partialOrderingOn IrreflexiveRelation)
   (not (partialOrderingOn ?INST ?INST)))))
*/
fof(a6718,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_partialOrderingOn_m, s_IrreflexiveRelation) => (~ s_partialOrderingOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimePoint)
  (=> (instance before IrreflexiveRelation)
   (not (before ?INST ?INST)))))
*/
fof(a6719,axiom,! [INST] : ((s_instance(INST, s_TimePoint) => (s_instance(s_before_m, s_IrreflexiveRelation) => (~ s_before(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance realization IrreflexiveRelation)
   (not (realization ?INST ?INST)))))
*/
fof(a6720,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_realization_m, s_IrreflexiveRelation) => (~ s_realization(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance properlyFills IrreflexiveRelation)
   (not (properlyFills ?INST ?INST)))))
*/
fof(a6721,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_properlyFills_m, s_IrreflexiveRelation) => (~ s_properlyFills(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance knows IrreflexiveRelation) (not (knows ?INST ?INST)))))
*/
fof(a6722,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_knows_m, s_IrreflexiveRelation) => (~ s_knows(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Artifact)
  (=> (instance version IrreflexiveRelation)
   (not (version ?INST ?INST)))))
*/
fof(a6723,axiom,! [INST] : ((s_subclass(INST, s_Artifact) => (s_instance(s_version_m, s_IrreflexiveRelation) => (~ s_version(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance instrument IrreflexiveRelation)
   (not (instrument ?INST ?INST)))))
*/
fof(a6724,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_instrument_m, s_IrreflexiveRelation) => (~ s_instrument(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Entity)
  (=> (instance inList IrreflexiveRelation)
   (not (inList ?INST ?INST)))))
*/
fof(a6725,axiom,! [INST] : ((s_instance(INST, s_Entity) => (s_instance(s_inList_m, s_IrreflexiveRelation) => (~ s_inList(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance suffers IrreflexiveRelation)
   (not (suffers ?INST ?INST)))))
*/
fof(a6726,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_suffers_m, s_IrreflexiveRelation) => (~ s_suffers(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Relation)
  (=> (instance valence IrreflexiveRelation)
   (not (valence ?INST ?INST)))))
*/
fof(a6727,axiom,! [INST] : ((s_instance(INST, s_Relation) => (s_instance(s_valence_m, s_IrreflexiveRelation) => (~ s_valence(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance doubts IrreflexiveRelation)
   (not (doubts ?INST ?INST)))))
*/
fof(a6728,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_doubts_m, s_IrreflexiveRelation) => (~ s_doubts(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CorpuscularObject)
  (=> (instance powerComponent IrreflexiveRelation)
   (not (powerComponent ?INST ?INST)))))
*/
fof(a6729,axiom,! [INST] : ((s_instance(INST, s_CorpuscularObject) => (s_instance(s_powerComponent_m, s_IrreflexiveRelation) => (~ s_powerComponent(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance destination IrreflexiveRelation)
   (not (destination ?INST ?INST)))))
*/
fof(a6730,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_destination_m, s_IrreflexiveRelation) => (~ s_destination(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postStreet IrreflexiveRelation)
   (not (postStreet ?INST ?INST)))))
*/
fof(a6731,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postStreet_m, s_IrreflexiveRelation) => (~ s_postStreet(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Process)
  (=> (instance hasSkill IrreflexiveRelation)
   (not (hasSkill ?INST ?INST)))))
*/
fof(a6732,axiom,! [INST] : ((s_subclass(INST, s_Process) => (s_instance(s_hasSkill_m, s_IrreflexiveRelation) => (~ s_hasSkill(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST GeographicArea)
  (=> (instance geographicSubregion IrreflexiveRelation)
   (not (geographicSubregion ?INST ?INST)))))
*/
fof(a6733,axiom,! [INST] : ((s_instance(INST, s_GeographicArea) => (s_instance(s_geographicSubregion_m, s_IrreflexiveRelation) => (~ s_geographicSubregion(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Proposition)
  (=> (instance insured IrreflexiveRelation)
   (not (insured ?INST ?INST)))))
*/
fof(a6734,axiom,! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(s_insured_m, s_IrreflexiveRelation) => (~ s_insured(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance alias IrreflexiveRelation) (not (alias ?INST ?INST)))))
*/
fof(a6735,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_alias_m, s_IrreflexiveRelation) => (~ s_alias(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ChemicalProcess)
  (=> (instance reactant IrreflexiveRelation)
   (not (reactant ?INST ?INST)))))
*/
fof(a6736,axiom,! [INST] : ((s_instance(INST, s_ChemicalProcess) => (s_instance(s_reactant_m, s_IrreflexiveRelation) => (~ s_reactant(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Agent)
  (=> (instance authors IrreflexiveRelation)
   (not (authors ?INST ?INST)))))
*/
fof(a6737,axiom,! [INST] : ((s_instance(INST, s_Agent) => (s_instance(s_authors_m, s_IrreflexiveRelation) => (~ s_authors(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance patient IrreflexiveRelation)
   (not (patient ?INST ?INST)))))
*/
fof(a6738,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_patient_m, s_IrreflexiveRelation) => (~ s_patient(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance eventLocated IrreflexiveRelation)
   (not (eventLocated ?INST ?INST)))))
*/
fof(a6739,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_eventLocated_m, s_IrreflexiveRelation) => (~ s_eventLocated(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance member IrreflexiveRelation)
   (not (member ?INST ?INST)))))
*/
fof(a6740,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_member_m, s_IrreflexiveRelation) => (~ s_member(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Agent)
  (=> (instance leader IrreflexiveRelation)
   (not (leader ?INST ?INST)))))
*/
fof(a6741,axiom,! [INST] : ((s_instance(INST, s_Agent) => (s_instance(s_leader_m, s_IrreflexiveRelation) => (~ s_leader(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ServiceProcess)
  (=> (instance serviceRecipient IrreflexiveRelation)
   (not (serviceRecipient ?INST ?INST)))))
*/
fof(a6742,axiom,! [INST] : ((s_instance(INST, s_ServiceProcess) => (s_instance(s_serviceRecipient_m, s_IrreflexiveRelation) => (~ s_serviceRecipient(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Experimenting)
  (=> (instance experimentalControl IrreflexiveRelation)
   (not (experimentalControl ?INST ?INST)))))
*/
fof(a6743,axiom,! [INST] : ((s_instance(INST, s_Experimenting) => (s_instance(s_experimentalControl_m, s_IrreflexiveRelation) => (~ s_experimentalControl(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance crosses IrreflexiveRelation)
   (not (crosses ?INST ?INST)))))
*/
fof(a6744,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_crosses_m, s_IrreflexiveRelation) => (~ s_crosses(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postContactSite IrreflexiveRelation)
   (not (postContactSite ?INST ?INST)))))
*/
fof(a6745,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postContactSite_m, s_IrreflexiveRelation) => (~ s_postContactSite(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance telecomExtension IrreflexiveRelation)
   (not (telecomExtension ?INST ?INST)))))
*/
fof(a6746,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_telecomExtension_m, s_IrreflexiveRelation) => (~ s_telecomExtension(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimeInterval)
  (=> (instance earlier IrreflexiveRelation)
   (not (earlier ?INST ?INST)))))
*/
fof(a6747,axiom,! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(s_earlier_m, s_IrreflexiveRelation) => (~ s_earlier(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance resource IrreflexiveRelation)
   (not (resource ?INST ?INST)))))
*/
fof(a6748,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_resource_m, s_IrreflexiveRelation) => (~ s_resource(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Physical)
  (=> (instance hasPurpose IrreflexiveRelation)
   (not (hasPurpose ?INST ?INST)))))
*/
fof(a6749,axiom,! [INST] : ((s_instance(INST, s_Physical) => (s_instance(s_hasPurpose_m, s_IrreflexiveRelation) => (~ s_hasPurpose(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance customer IrreflexiveRelation)
   (not (customer ?INST ?INST)))))
*/
fof(a6750,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_customer_m, s_IrreflexiveRelation) => (~ s_customer(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST NonnegativeInteger)
  (=> (instance stringLength IrreflexiveRelation)
   (not (stringLength ?INST ?INST)))))
*/
fof(a6751,axiom,! [INST] : ((s_instance(INST, s_NonnegativeInteger) => (s_instance(s_stringLength_m, s_IrreflexiveRelation) => (~ s_stringLength(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance trichotomizingOn IrreflexiveRelation)
   (not (trichotomizingOn ?INST ?INST)))))
*/
fof(a6752,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_trichotomizingOn_m, s_IrreflexiveRelation) => (~ s_trichotomizingOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Process)
  (=> (instance causesSubclass IrreflexiveRelation)
   (not (causesSubclass ?INST ?INST)))))
*/
fof(a6753,axiom,! [INST] : ((s_subclass(INST, s_Process) => (s_instance(s_causesSubclass_m, s_IrreflexiveRelation) => (~ s_causesSubclass(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance superficialPart IrreflexiveRelation)
   (not (superficialPart ?INST ?INST)))))
*/
fof(a6754,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_superficialPart_m, s_IrreflexiveRelation) => (~ s_superficialPart(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Relation)
  (=> (instance disjointRelation IrreflexiveRelation)
   (not (disjointRelation ?INST ?INST)))))
*/
fof(a6755,axiom,! [INST] : ((s_instance(INST, s_Relation) => (s_instance(s_disjointRelation_m, s_IrreflexiveRelation) => (~ s_disjointRelation(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance disapproves IrreflexiveRelation)
   (not (disapproves ?INST ?INST)))))
*/
fof(a6756,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_disapproves_m, s_IrreflexiveRelation) => (~ s_disapproves(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST FinancialTransaction)
  (=> (instance profit IrreflexiveRelation)
   (not (profit ?INST ?INST)))))
*/
fof(a6757,axiom,! [INST] : ((s_instance(INST, s_FinancialTransaction) => (s_instance(s_profit_m, s_IrreflexiveRelation) => (~ s_profit(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST OrganicObject)
  (=> (instance developmentalForm IrreflexiveRelation)
   (not (developmentalForm ?INST ?INST)))))
*/
fof(a6758,axiom,! [INST] : ((s_instance(INST, s_OrganicObject) => (s_instance(s_developmentalForm_m, s_IrreflexiveRelation) => (~ s_developmentalForm(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance operator IrreflexiveRelation)
   (not (operator ?INST ?INST)))))
*/
fof(a6759,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_operator_m, s_IrreflexiveRelation) => (~ s_operator(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance hinders IrreflexiveRelation)
   (not (hinders ?INST ?INST)))))
*/
fof(a6760,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_hinders_m, s_IrreflexiveRelation) => (~ s_hinders(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST GeopoliticalArea)
  (=> (instance geopoliticalSubdivision IrreflexiveRelation)
   (not (geopoliticalSubdivision ?INST ?INST)))))
*/
fof(a6761,axiom,! [INST] : ((s_instance(INST, s_GeopoliticalArea) => (s_instance(s_geopoliticalSubdivision_m, s_IrreflexiveRelation) => (~ s_geopoliticalSubdivision(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance exploits IrreflexiveRelation)
   (not (exploits ?INST ?INST)))))
*/
fof(a6762,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_exploits_m, s_IrreflexiveRelation) => (~ s_exploits(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance benefits IrreflexiveRelation)
   (not (benefits ?INST ?INST)))))
*/
fof(a6763,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_benefits_m, s_IrreflexiveRelation) => (~ s_benefits(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Process)
  (=> (instance hindersSubclass IrreflexiveRelation)
   (not (hindersSubclass ?INST ?INST)))))
*/
fof(a6764,axiom,! [INST] : ((s_subclass(INST, s_Process) => (s_instance(s_hindersSubclass_m, s_IrreflexiveRelation) => (~ s_hindersSubclass(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Agent)
  (=> (instance editor IrreflexiveRelation)
   (not (editor ?INST ?INST)))))
*/
fof(a6765,axiom,! [INST] : ((s_instance(INST, s_Agent) => (s_instance(s_editor_m, s_IrreflexiveRelation) => (~ s_editor(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Human)
  (=> (instance citizen IrreflexiveRelation)
   (not (citizen ?INST ?INST)))))
*/
fof(a6766,axiom,! [INST] : ((s_instance(INST, s_Human) => (s_instance(s_citizen_m, s_IrreflexiveRelation) => (~ s_citizen(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Plan)
  (=> (instance subPlan IrreflexiveRelation)
   (not (subPlan ?INST ?INST)))))
*/
fof(a6767,axiom,! [INST] : ((s_instance(INST, s_Plan) => (s_instance(s_subPlan_m, s_IrreflexiveRelation) => (~ s_subPlan(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Human)
  (=> (instance spouse IrreflexiveRelation)
   (not (spouse ?INST ?INST)))))
*/
fof(a6768,axiom,! [INST] : ((s_instance(INST, s_Human) => (s_instance(s_spouse_m, s_IrreflexiveRelation) => (~ s_spouse(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Quantity)
  (=> (instance lessThan IrreflexiveRelation)
   (not (lessThan ?INST ?INST)))))
*/
fof(a6769,axiom,! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(s_lessThan_m, s_IrreflexiveRelation) => (~ less(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance considers IrreflexiveRelation)
   (not (considers ?INST ?INST)))))
*/
fof(a6770,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_considers_m, s_IrreflexiveRelation) => (~ s_considers(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organization)
  (=> (instance publishes IrreflexiveRelation)
   (not (publishes ?INST ?INST)))))
*/
fof(a6771,axiom,! [INST] : ((s_instance(INST, s_Organization) => (s_instance(s_publishes_m, s_IrreflexiveRelation) => (~ s_publishes(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Man)
  (=> (instance husband IrreflexiveRelation)
   (not (husband ?INST ?INST)))))
*/
fof(a6772,axiom,! [INST] : ((s_instance(INST, s_Man) => (s_instance(s_husband_m, s_IrreflexiveRelation) => (~ s_husband(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Function)
  (=> (instance range IrreflexiveRelation) (not (range ?INST ?INST)))))
*/
fof(a6773,axiom,! [INST] : ((s_instance(INST, s_Function) => (s_instance(s_range_m, s_IrreflexiveRelation) => (~ s_range(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Transportation)
  (=> (instance conveyance IrreflexiveRelation)
   (not (conveyance ?INST ?INST)))))
*/
fof(a6774,axiom,! [INST] : ((s_instance(INST, s_Transportation) => (s_instance(s_conveyance_m, s_IrreflexiveRelation) => (~ s_conveyance(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance attribute IrreflexiveRelation)
   (not (attribute ?INST ?INST)))))
*/
fof(a6775,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_attribute_m, s_IrreflexiveRelation) => (~ s_attribute(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ContentBearingPhysical)
  (=> (instance containsInformation IrreflexiveRelation)
   (not (containsInformation ?INST ?INST)))))
*/
fof(a6776,axiom,! [INST] : ((s_instance(INST, s_ContentBearingPhysical) => (s_instance(s_containsInformation_m, s_IrreflexiveRelation) => (~ s_containsInformation(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST FieldOfStudy)
  (=> (instance subField IrreflexiveRelation)
   (not (subField ?INST ?INST)))))
*/
fof(a6777,axiom,! [INST] : ((s_instance(INST, s_FieldOfStudy) => (s_instance(s_subField_m, s_IrreflexiveRelation) => (~ s_subField(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryFunction)
  (=> (instance identityElement IrreflexiveRelation)
   (not (identityElement ?INST ?INST)))))
*/
fof(a6778,axiom,! [INST] : ((s_instance(INST, s_BinaryFunction) => (s_instance(s_identityElement_m, s_IrreflexiveRelation) => (~ s_identityElement(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimeInterval)
  (=> (instance starts IrreflexiveRelation)
   (not (starts ?INST ?INST)))))
*/
fof(a6779,axiom,! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(s_starts_m, s_IrreflexiveRelation) => (~ s_starts(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Formula)
  (=> (instance modalAttribute IrreflexiveRelation)
   (not (modalAttribute ?INST ?INST)))))
*/
fof(a6780,axiom,! [INST] : ((s_instance(INST, s_Formula) => (s_instance(s_modalAttribute_m, s_IrreflexiveRelation) => (~ s_modalAttribute(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CompoundSubstance)
  (=> (instance conjugate IrreflexiveRelation)
   (not (conjugate ?INST ?INST)))))
*/
fof(a6781,axiom,! [INST] : ((s_instance(INST, s_CompoundSubstance) => (s_instance(s_conjugate_m, s_IrreflexiveRelation) => (~ s_conjugate(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance deviceTelecomNumber IrreflexiveRelation)
   (not (deviceTelecomNumber ?INST ?INST)))))
*/
fof(a6782,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_deviceTelecomNumber_m, s_IrreflexiveRelation) => (~ s_deviceTelecomNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance telecomCountryCode IrreflexiveRelation)
   (not (telecomCountryCode ?INST ?INST)))))
*/
fof(a6783,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_telecomCountryCode_m, s_IrreflexiveRelation) => (~ s_telecomCountryCode(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Formula)
  (=> (instance causesProposition IrreflexiveRelation)
   (not (causesProposition ?INST ?INST)))))
*/
fof(a6784,axiom,! [INST] : ((s_instance(INST, s_Formula) => (s_instance(s_causesProposition_m, s_IrreflexiveRelation) => (~ s_causesProposition(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimePosition)
  (=> (instance holdsDuring IrreflexiveRelation)
   (not (holdsDuring ?INST ?INST)))))
*/
fof(a6785,axiom,! [INST] : ((s_instance(INST, s_TimePosition) => (s_instance(s_holdsDuring_m, s_IrreflexiveRelation) => (~ s_holdsDuring(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance telecomCode2 IrreflexiveRelation)
   (not (telecomCode2 ?INST ?INST)))))
*/
fof(a6786,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_telecomCode2_m, s_IrreflexiveRelation) => (~ s_telecomCode2(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Formula)
  (=> (instance holdsRight IrreflexiveRelation)
   (not (holdsRight ?INST ?INST)))))
*/
fof(a6787,axiom,! [INST] : ((s_instance(INST, s_Formula) => (s_instance(s_holdsRight_m, s_IrreflexiveRelation) => (~ s_holdsRight(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance measure IrreflexiveRelation)
   (not (measure ?INST ?INST)))))
*/
fof(a6788,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_measure_m, s_IrreflexiveRelation) => (~ s_measure(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Radiating)
  (=> (instance wavelength IrreflexiveRelation)
   (not (wavelength ?INST ?INST)))))
*/
fof(a6789,axiom,! [INST] : ((s_instance(INST, s_Radiating) => (s_instance(s_wavelength_m, s_IrreflexiveRelation) => (~ s_wavelength(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST MilitaryUnit)
  (=> (instance hostileForces IrreflexiveRelation)
   (not (hostileForces ?INST ?INST)))))
*/
fof(a6790,axiom,! [INST] : ((s_instance(INST, s_MilitaryUnit) => (s_instance(s_hostileForces_m, s_IrreflexiveRelation) => (~ s_hostileForces(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postPostcodeArea IrreflexiveRelation)
   (not (postPostcodeArea ?INST ?INST)))))
*/
fof(a6791,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postPostcodeArea_m, s_IrreflexiveRelation) => (~ s_postPostcodeArea(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Agent)
  (=> (instance possesses IrreflexiveRelation)
   (not (possesses ?INST ?INST)))))
*/
fof(a6792,axiom,! [INST] : ((s_instance(INST, s_Agent) => (s_instance(s_possesses_m, s_IrreflexiveRelation) => (~ s_possesses(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance penetrates IrreflexiveRelation)
   (not (penetrates ?INST ?INST)))))
*/
fof(a6793,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_penetrates_m, s_IrreflexiveRelation) => (~ s_penetrates(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organism)
  (=> (instance inhabits IrreflexiveRelation)
   (not (inhabits ?INST ?INST)))))
*/
fof(a6794,axiom,! [INST] : ((s_instance(INST, s_Organism) => (s_instance(s_inhabits_m, s_IrreflexiveRelation) => (~ s_inhabits(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Quantity)
  (=> (instance greaterThan IrreflexiveRelation)
   (not (greaterThan ?INST ?INST)))))
*/
fof(a6795,axiom,! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(s_greaterThan_m, s_IrreflexiveRelation) => (~ greater(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance workPhoneNumber IrreflexiveRelation)
   (not (workPhoneNumber ?INST ?INST)))))
*/
fof(a6796,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_workPhoneNumber_m, s_IrreflexiveRelation) => (~ s_workPhoneNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Woman)
  (=> (instance sister IrreflexiveRelation)
   (not (sister ?INST ?INST)))))
*/
fof(a6797,axiom,! [INST] : ((s_instance(INST, s_Woman) => (s_instance(s_sister_m, s_IrreflexiveRelation) => (~ s_sister(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance familyName IrreflexiveRelation)
   (not (familyName ?INST ?INST)))))
*/
fof(a6798,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_familyName_m, s_IrreflexiveRelation) => (~ s_familyName(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST LegalAction)
  (=> (instance defendant IrreflexiveRelation)
   (not (defendant ?INST ?INST)))))
*/
fof(a6799,axiom,! [INST] : ((s_instance(INST, s_LegalAction) => (s_instance(s_defendant_m, s_IrreflexiveRelation) => (~ s_defendant(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Formula)
  (=> (instance decreasesLikelihood IrreflexiveRelation)
   (not (decreasesLikelihood ?INST ?INST)))))
*/
fof(a6800,axiom,! [INST] : ((s_instance(INST, s_Formula) => (s_instance(s_decreasesLikelihood_m, s_IrreflexiveRelation) => (~ s_decreasesLikelihood(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST ElementalSubstance)
  (=> (instance atomicNumber IrreflexiveRelation)
   (not (atomicNumber ?INST ?INST)))))
*/
fof(a6801,axiom,! [INST] : ((s_subclass(INST, s_ElementalSubstance) => (s_instance(s_atomicNumber_m, s_IrreflexiveRelation) => (~ s_atomicNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance completelyFills IrreflexiveRelation)
   (not (completelyFills ?INST ?INST)))))
*/
fof(a6802,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_completelyFills_m, s_IrreflexiveRelation) => (~ s_completelyFills(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalAddressText)
  (=> (instance postAddressText IrreflexiveRelation)
   (not (postAddressText ?INST ?INST)))))
*/
fof(a6803,axiom,! [INST] : ((s_instance(INST, s_PostalAddressText) => (s_instance(s_postAddressText_m, s_IrreflexiveRelation) => (~ s_postAddressText(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Man)
  (=> (instance brother IrreflexiveRelation)
   (not (brother ?INST ?INST)))))
*/
fof(a6804,axiom,! [INST] : ((s_instance(INST, s_Man) => (s_instance(s_brother_m, s_IrreflexiveRelation) => (~ s_brother(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organism)
  (=> (instance sibling IrreflexiveRelation)
   (not (sibling ?INST ?INST)))))
*/
fof(a6805,axiom,! [INST] : ((s_instance(INST, s_Organism) => (s_instance(s_sibling_m, s_IrreflexiveRelation) => (~ s_sibling(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Physical)
  (=> (instance monetaryValue IrreflexiveRelation)
   (not (monetaryValue ?INST ?INST)))))
*/
fof(a6806,axiom,! [INST] : ((s_instance(INST, s_Physical) => (s_instance(s_monetaryValue_m, s_IrreflexiveRelation) => (~ s_monetaryValue(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance direction IrreflexiveRelation)
   (not (direction ?INST ?INST)))))
*/
fof(a6807,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_direction_m, s_IrreflexiveRelation) => (~ s_direction(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance manner IrreflexiveRelation)
   (not (manner ?INST ?INST)))))
*/
fof(a6808,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_manner_m, s_IrreflexiveRelation) => (~ s_manner(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Attribute)
  (=> (instance successorAttributeClosure IrreflexiveRelation)
   (not (successorAttributeClosure ?INST ?INST)))))
*/
fof(a6809,axiom,! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(s_successorAttributeClosure_m, s_IrreflexiveRelation) => (~ s_successorAttributeClosure(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organization)
  (=> (instance yearOfFounding IrreflexiveRelation)
   (not (yearOfFounding ?INST ?INST)))))
*/
fof(a6810,axiom,! [INST] : ((s_instance(INST, s_Organization) => (s_instance(s_yearOfFounding_m, s_IrreflexiveRelation) => (~ s_yearOfFounding(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PermanentResidence)
  (=> (instance homeAddress IrreflexiveRelation)
   (not (homeAddress ?INST ?INST)))))
*/
fof(a6811,axiom,! [INST] : ((s_instance(INST, s_PermanentResidence) => (s_instance(s_homeAddress_m, s_IrreflexiveRelation) => (~ s_homeAddress(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Function)
  (=> (instance closedOn IrreflexiveRelation)
   (not (closedOn ?INST ?INST)))))
*/
fof(a6812,axiom,! [INST] : ((s_instance(INST, s_Function) => (s_instance(s_closedOn_m, s_IrreflexiveRelation) => (~ s_closedOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Process)
  (=> (instance frequency IrreflexiveRelation)
   (not (frequency ?INST ?INST)))))
*/
fof(a6813,axiom,! [INST] : ((s_subclass(INST, s_Process) => (s_instance(s_frequency_m, s_IrreflexiveRelation) => (~ s_frequency(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Demonstrating)
  (=> (instance attends IrreflexiveRelation)
   (not (attends ?INST ?INST)))))
*/
fof(a6814,axiom,! [INST] : ((s_instance(INST, s_Demonstrating) => (s_instance(s_attends_m, s_IrreflexiveRelation) => (~ s_attends(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SetOrClass)
  (=> (instance immediateSubclass IrreflexiveRelation)
   (not (immediateSubclass ?INST ?INST)))))
*/
fof(a6815,axiom,! [INST] : ((s_instance(INST, s_SetOrClass) => (s_instance(s_immediateSubclass_m, s_IrreflexiveRelation) => (~ s_immediateSubclass(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Function)
  (=> (instance rangeSubclass IrreflexiveRelation)
   (not (rangeSubclass ?INST ?INST)))))
*/
fof(a6816,axiom,! [INST] : ((s_instance(INST, s_Function) => (s_instance(s_rangeSubclass_m, s_IrreflexiveRelation) => (~ s_rangeSubclass(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Translocation)
  (=> (instance changesLocation IrreflexiveRelation)
   (not (changesLocation ?INST ?INST)))))
*/
fof(a6817,axiom,! [INST] : ((s_instance(INST, s_Translocation) => (s_instance(s_changesLocation_m, s_IrreflexiveRelation) => (~ s_changesLocation(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance postPostOfficeBox IrreflexiveRelation)
   (not (postPostOfficeBox ?INST ?INST)))))
*/
fof(a6818,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_postPostOfficeBox_m, s_IrreflexiveRelation) => (~ s_postPostOfficeBox(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance uses IrreflexiveRelation) (not (uses ?INST ?INST)))))
*/
fof(a6819,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_uses_m, s_IrreflexiveRelation) => (~ s_uses(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ChangeOfControl)
  (=> (instance losesControl IrreflexiveRelation)
   (not (losesControl ?INST ?INST)))))
*/
fof(a6820,axiom,! [INST] : ((s_instance(INST, s_ChangeOfControl) => (s_instance(s_losesControl_m, s_IrreflexiveRelation) => (~ s_losesControl(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Proposition)
  (=> (instance subProposition IrreflexiveRelation)
   (not (subProposition ?INST ?INST)))))
*/
fof(a6821,axiom,! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(s_subProposition_m, s_IrreflexiveRelation) => (~ s_subProposition(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Human)
  (=> (instance grandparent IrreflexiveRelation)
   (not (grandparent ?INST ?INST)))))
*/
fof(a6822,axiom,! [INST] : ((s_instance(INST, s_Human) => (s_instance(s_grandparent_m, s_IrreflexiveRelation) => (~ s_grandparent(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance barometricPressure IrreflexiveRelation)
   (not (barometricPressure ?INST ?INST)))))
*/
fof(a6823,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_barometricPressure_m, s_IrreflexiveRelation) => (~ s_barometricPressure(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance involvedInEvent IrreflexiveRelation)
   (not (involvedInEvent ?INST ?INST)))))
*/
fof(a6824,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_involvedInEvent_m, s_IrreflexiveRelation) => (~ s_involvedInEvent(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST LinguisticExpression)
  (=> (instance expressedInLanguage IrreflexiveRelation)
   (not (expressedInLanguage ?INST ?INST)))))
*/
fof(a6825,axiom,! [INST] : ((s_instance(INST, s_LinguisticExpression) => (s_instance(s_expressedInLanguage_m, s_IrreflexiveRelation) => (~ s_expressedInLanguage(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organism)
  (=> (instance parent IrreflexiveRelation)
   (not (parent ?INST ?INST)))))
*/
fof(a6826,axiom,! [INST] : ((s_instance(INST, s_Organism) => (s_instance(s_parent_m, s_IrreflexiveRelation) => (~ s_parent(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Entity)
  (=> (instance immediateInstance IrreflexiveRelation)
   (not (immediateInstance ?INST ?INST)))))
*/
fof(a6827,axiom,! [INST] : ((s_instance(INST, s_Entity) => (s_instance(s_immediateInstance_m, s_IrreflexiveRelation) => (~ s_immediateInstance(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance partiallyFills IrreflexiveRelation)
   (not (partiallyFills ?INST ?INST)))))
*/
fof(a6828,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_partiallyFills_m, s_IrreflexiveRelation) => (~ s_partiallyFills(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST GraphPath)
  (=> (instance pathLength IrreflexiveRelation)
   (not (pathLength ?INST ?INST)))))
*/
fof(a6829,axiom,! [INST] : ((s_instance(INST, s_GraphPath) => (s_instance(s_pathLength_m, s_IrreflexiveRelation) => (~ s_pathLength(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST LegalAction)
  (=> (instance plaintiff IrreflexiveRelation)
   (not (plaintiff ?INST ?INST)))))
*/
fof(a6830,axiom,! [INST] : ((s_instance(INST, s_LegalAction) => (s_instance(s_plaintiff_m, s_IrreflexiveRelation) => (~ s_plaintiff(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance fills IrreflexiveRelation) (not (fills ?INST ?INST)))))
*/
fof(a6831,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_fills_m, s_IrreflexiveRelation) => (~ s_fills(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Human)
  (=> (instance neighbor IrreflexiveRelation)
   (not (neighbor ?INST ?INST)))))
*/
fof(a6832,axiom,! [INST] : ((s_instance(INST, s_Human) => (s_instance(s_neighbor_m, s_IrreflexiveRelation) => (~ s_neighbor(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Formula)
  (=> (instance holdsObligation IrreflexiveRelation)
   (not (holdsObligation ?INST ?INST)))))
*/
fof(a6833,axiom,! [INST] : ((s_instance(INST, s_Formula) => (s_instance(s_holdsObligation_m, s_IrreflexiveRelation) => (~ s_holdsObligation(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postCountry IrreflexiveRelation)
   (not (postCountry ?INST ?INST)))))
*/
fof(a6834,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postCountry_m, s_IrreflexiveRelation) => (~ s_postCountry(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance larger IrreflexiveRelation)
   (not (larger ?INST ?INST)))))
*/
fof(a6835,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_larger_m, s_IrreflexiveRelation) => (~ s_larger(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Confining)
  (=> (instance detainee IrreflexiveRelation)
   (not (detainee ?INST ?INST)))))
*/
fof(a6836,axiom,! [INST] : ((s_instance(INST, s_Confining) => (s_instance(s_detainee_m, s_IrreflexiveRelation) => (~ s_detainee(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance reflexiveOn IrreflexiveRelation)
   (not (reflexiveOn ?INST ?INST)))))
*/
fof(a6837,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_reflexiveOn_m, s_IrreflexiveRelation) => (~ s_reflexiveOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Contest)
  (=> (instance contestParticipant IrreflexiveRelation)
   (not (contestParticipant ?INST ?INST)))))
*/
fof(a6838,axiom,! [INST] : ((s_instance(INST, s_Contest) => (s_instance(s_contestParticipant_m, s_IrreflexiveRelation) => (~ s_contestParticipant(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ChemicalProcess)
  (=> (instance reagent IrreflexiveRelation)
   (not (reagent ?INST ?INST)))))
*/
fof(a6839,axiom,! [INST] : ((s_instance(INST, s_ChemicalProcess) => (s_instance(s_reagent_m, s_IrreflexiveRelation) => (~ s_reagent(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Transportation)
  (=> (instance transported IrreflexiveRelation)
   (not (transported ?INST ?INST)))))
*/
fof(a6840,axiom,! [INST] : ((s_instance(INST, s_Transportation) => (s_instance(s_transported_m, s_IrreflexiveRelation) => (~ s_transported(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance overlapsPartially IrreflexiveRelation)
   (not (overlapsPartially ?INST ?INST)))))
*/
fof(a6841,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_overlapsPartially_m, s_IrreflexiveRelation) => (~ s_overlapsPartially(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Shipping)
  (=> (instance cargo IrreflexiveRelation) (not (cargo ?INST ?INST)))))
*/
fof(a6842,axiom,! [INST] : ((s_instance(INST, s_Shipping) => (s_instance(s_cargo_m, s_IrreflexiveRelation) => (~ s_cargo(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SelfConnectedObject)
  (=> (instance contains IrreflexiveRelation)
   (not (contains ?INST ?INST)))))
*/
fof(a6843,axiom,! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(s_contains_m, s_IrreflexiveRelation) => (~ s_contains(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance prevents IrreflexiveRelation)
   (not (prevents ?INST ?INST)))))
*/
fof(a6844,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_prevents_m, s_IrreflexiveRelation) => (~ s_prevents(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance homePhoneNumber IrreflexiveRelation)
   (not (homePhoneNumber ?INST ?INST)))))
*/
fof(a6845,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_homePhoneNumber_m, s_IrreflexiveRelation) => (~ s_homePhoneNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organization)
  (=> (instance ancestorOrganization IrreflexiveRelation)
   (not (ancestorOrganization ?INST ?INST)))))
*/
fof(a6846,axiom,! [INST] : ((s_instance(INST, s_Organization) => (s_instance(s_ancestorOrganization_m, s_IrreflexiveRelation) => (~ s_ancestorOrganization(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance properPart IrreflexiveRelation)
   (not (properPart ?INST ?INST)))))
*/
fof(a6847,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_properPart_m, s_IrreflexiveRelation) => (~ s_properPart(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimeInterval)
  (=> (instance duration IrreflexiveRelation)
   (not (duration ?INST ?INST)))))
*/
fof(a6848,axiom,! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(s_duration_m, s_IrreflexiveRelation) => (~ s_duration(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance telecomAreaCode IrreflexiveRelation)
   (not (telecomAreaCode ?INST ?INST)))))
*/
fof(a6849,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_telecomAreaCode_m, s_IrreflexiveRelation) => (~ s_telecomAreaCode(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance experiencer IrreflexiveRelation)
   (not (experiencer ?INST ?INST)))))
*/
fof(a6850,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_experiencer_m, s_IrreflexiveRelation) => (~ s_experiencer(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance result IrreflexiveRelation)
   (not (result ?INST ?INST)))))
*/
fof(a6851,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_result_m, s_IrreflexiveRelation) => (~ s_result(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance targetInAttack IrreflexiveRelation)
   (not (targetInAttack ?INST ?INST)))))
*/
fof(a6852,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_targetInAttack_m, s_IrreflexiveRelation) => (~ s_targetInAttack(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance irreflexiveOn IrreflexiveRelation)
   (not (irreflexiveOn ?INST ?INST)))))
*/
fof(a6853,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_irreflexiveOn_m, s_IrreflexiveRelation) => (~ s_irreflexiveOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Process)
  (=> (instance precondition IrreflexiveRelation)
   (not (precondition ?INST ?INST)))))
*/
fof(a6854,axiom,! [INST] : ((s_subclass(INST, s_Process) => (s_instance(s_precondition_m, s_IrreflexiveRelation) => (~ s_precondition(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance origin IrreflexiveRelation)
   (not (origin ?INST ?INST)))))
*/
fof(a6855,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_origin_m, s_IrreflexiveRelation) => (~ s_origin(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Physical)
  (=> (instance date IrreflexiveRelation) (not (date ?INST ?INST)))))
*/
fof(a6856,axiom,! [INST] : ((s_instance(INST, s_Physical) => (s_instance(s_date_m, s_IrreflexiveRelation) => (~ s_date(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance mobilePhoneNumber IrreflexiveRelation)
   (not (mobilePhoneNumber ?INST ?INST)))))
*/
fof(a6857,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_mobilePhoneNumber_m, s_IrreflexiveRelation) => (~ s_mobilePhoneNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance workAddress IrreflexiveRelation)
   (not (workAddress ?INST ?INST)))))
*/
fof(a6858,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_workAddress_m, s_IrreflexiveRelation) => (~ s_workAddress(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Attribute)
  (=> (instance successorAttribute IrreflexiveRelation)
   (not (successorAttribute ?INST ?INST)))))
*/
fof(a6859,axiom,! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(s_successorAttribute_m, s_IrreflexiveRelation) => (~ s_successorAttribute(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance desires IrreflexiveRelation)
   (not (desires ?INST ?INST)))))
*/
fof(a6860,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_desires_m, s_IrreflexiveRelation) => (~ s_desires(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance causes IrreflexiveRelation)
   (not (causes ?INST ?INST)))))
*/
fof(a6861,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_causes_m, s_IrreflexiveRelation) => (~ s_causes(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Motion)
  (=> (instance moves IrreflexiveRelation) (not (moves ?INST ?INST)))))
*/
fof(a6862,axiom,! [INST] : ((s_instance(INST, s_Motion) => (s_instance(s_moves_m, s_IrreflexiveRelation) => (~ s_moves(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postDistrict IrreflexiveRelation)
   (not (postDistrict ?INST ?INST)))))
*/
fof(a6863,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postDistrict_m, s_IrreflexiveRelation) => (~ s_postDistrict(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Physical)
  (=> (instance time IrreflexiveRelation) (not (time ?INST ?INST)))))
*/
fof(a6864,axiom,! [INST] : ((s_instance(INST, s_Physical) => (s_instance(s_time_m, s_IrreflexiveRelation) => (~ s_time(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance structure IrreflexiveRelation)
   (not (structure ?INST ?INST)))))
*/
fof(a6865,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_structure_m, s_IrreflexiveRelation) => (~ s_structure(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST AchievingControl)
  (=> (instance controlled IrreflexiveRelation)
   (not (controlled ?INST ?INST)))))
*/
fof(a6866,axiom,! [INST] : ((s_instance(INST, s_AchievingControl) => (s_instance(s_controlled_m, s_IrreflexiveRelation) => (~ s_controlled(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ServiceProcess)
  (=> (instance serviceProvider IrreflexiveRelation)
   (not (serviceProvider ?INST ?INST)))))
*/
fof(a6867,axiom,! [INST] : ((s_instance(INST, s_ServiceProcess) => (s_instance(s_serviceProvider_m, s_IrreflexiveRelation) => (~ s_serviceProvider(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ContactSite)
  (=> (instance siteForContact IrreflexiveRelation)
   (not (siteForContact ?INST ?INST)))))
*/
fof(a6868,axiom,! [INST] : ((s_instance(INST, s_ContactSite) => (s_instance(s_siteForContact_m, s_IrreflexiveRelation) => (~ s_siteForContact(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance equivalenceRelationOn IrreflexiveRelation)
   (not (equivalenceRelationOn ?INST ?INST)))))
*/
fof(a6869,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_equivalenceRelationOn_m, s_IrreflexiveRelation) => (~ s_equivalenceRelationOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance agent IrreflexiveRelation) (not (agent ?INST ?INST)))))
*/
fof(a6870,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_agent_m, s_IrreflexiveRelation) => (~ s_agent(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance personalPhoneNumber IrreflexiveRelation)
   (not (personalPhoneNumber ?INST ?INST)))))
*/
fof(a6871,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_personalPhoneNumber_m, s_IrreflexiveRelation) => (~ s_personalPhoneNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Woman)
  (=> (instance wife IrreflexiveRelation) (not (wife ?INST ?INST)))))
*/
fof(a6872,axiom,! [INST] : ((s_instance(INST, s_Woman) => (s_instance(s_wife_m, s_IrreflexiveRelation) => (~ s_wife(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance middleName IrreflexiveRelation)
   (not (middleName ?INST ?INST)))))
*/
fof(a6873,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_middleName_m, s_IrreflexiveRelation) => (~ s_middleName(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance postStreetNumber IrreflexiveRelation)
   (not (postStreetNumber ?INST ?INST)))))
*/
fof(a6874,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_postStreetNumber_m, s_IrreflexiveRelation) => (~ s_postStreetNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST FinancialTransaction)
  (=> (instance loss IrreflexiveRelation) (not (loss ?INST ?INST)))))
*/
fof(a6875,axiom,! [INST] : ((s_instance(INST, s_FinancialTransaction) => (s_instance(s_loss_m, s_IrreflexiveRelation) => (~ s_loss(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Motion)
  (=> (instance path IrreflexiveRelation) (not (path ?INST ?INST)))))
*/
fof(a6876,axiom,! [INST] : ((s_instance(INST, s_Motion) => (s_instance(s_path_m, s_IrreflexiveRelation) => (~ s_path(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PlacingUnderArrest)
  (=> (instance arrested IrreflexiveRelation)
   (not (arrested ?INST ?INST)))))
*/
fof(a6877,axiom,! [INST] : ((s_instance(INST, s_PlacingUnderArrest) => (s_instance(s_arrested_m, s_IrreflexiveRelation) => (~ s_arrested(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance givenName IrreflexiveRelation)
   (not (givenName ?INST ?INST)))))
*/
fof(a6878,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_givenName_m, s_IrreflexiveRelation) => (~ s_givenName(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Organism)
  (=> (instance ancestor IrreflexiveRelation)
   (not (ancestor ?INST ?INST)))))
*/
fof(a6879,axiom,! [INST] : ((s_instance(INST, s_Organism) => (s_instance(s_ancestor_m, s_IrreflexiveRelation) => (~ s_ancestor(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Formula)
  (=> (instance increasesLikelihood IrreflexiveRelation)
   (not (increasesLikelihood ?INST ?INST)))))
*/
fof(a6880,axiom,! [INST] : ((s_instance(INST, s_Formula) => (s_instance(s_increasesLikelihood_m, s_IrreflexiveRelation) => (~ s_increasesLikelihood(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance eventPartlyLocated IrreflexiveRelation)
   (not (eventPartlyLocated ?INST ?INST)))))
*/
fof(a6881,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_eventPartlyLocated_m, s_IrreflexiveRelation) => (~ s_eventPartlyLocated(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST CognitiveAgent)
  (=> (instance believes IrreflexiveRelation)
   (not (believes ?INST ?INST)))))
*/
fof(a6882,axiom,! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(s_believes_m, s_IrreflexiveRelation) => (~ s_believes(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Process)
  (=> (instance resourceExhausted IrreflexiveRelation)
   (not (resourceExhausted ?INST ?INST)))))
*/
fof(a6883,axiom,! [INST] : ((s_instance(INST, s_Process) => (s_instance(s_resourceExhausted_m, s_IrreflexiveRelation) => (~ s_resourceExhausted(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance totalOrderingOn IrreflexiveRelation)
   (not (totalOrderingOn ?INST ?INST)))))
*/
fof(a6884,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_totalOrderingOn_m, s_IrreflexiveRelation) => (~ s_totalOrderingOn(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST EngineeringComponent)
  (=> (instance connectedEngineeringComponents IrreflexiveRelation)
   (not (connectedEngineeringComponents ?INST ?INST)))))
*/
fof(a6885,axiom,! [INST] : ((s_instance(INST, s_EngineeringComponent) => (s_instance(s_connectedEngineeringComponents_m, s_IrreflexiveRelation) => (~ s_connectedEngineeringComponents(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SelfConnectedObject)
  (=> (instance surface IrreflexiveRelation)
   (not (surface ?INST ?INST)))))
*/
fof(a6886,axiom,! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(s_surface_m, s_IrreflexiveRelation) => (~ s_surface(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postCity IrreflexiveRelation)
   (not (postCity ?INST ?INST)))))
*/
fof(a6887,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postCity_m, s_IrreflexiveRelation) => (~ s_postCity(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance telephoneNumber IrreflexiveRelation)
   (not (telephoneNumber ?INST ?INST)))))
*/
fof(a6888,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_telephoneNumber_m, s_IrreflexiveRelation) => (~ s_telephoneNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimeInterval)
  (=> (instance finishes IrreflexiveRelation)
   (not (finishes ?INST ?INST)))))
*/
fof(a6889,axiom,! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(s_finishes_m, s_IrreflexiveRelation) => (~ s_finishes(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Hole)
  (=> (instance hole IrreflexiveRelation) (not (hole ?INST ?INST)))))
*/
fof(a6890,axiom,! [INST] : ((s_instance(INST, s_Hole) => (s_instance(s_hole_m, s_IrreflexiveRelation) => (~ s_hole(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST AchievingControl)
  (=> (instance gainsControl IrreflexiveRelation)
   (not (gainsControl ?INST ?INST)))))
*/
fof(a6891,axiom,! [INST] : ((s_instance(INST, s_AchievingControl) => (s_instance(s_gainsControl_m, s_IrreflexiveRelation) => (~ s_gainsControl(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimeInterval)
  (=> (instance during IrreflexiveRelation)
   (not (during ?INST ?INST)))))
*/
fof(a6892,axiom,! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(s_during_m, s_IrreflexiveRelation) => (~ s_during(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TimeInterval)
  (=> (instance meetsTemporally IrreflexiveRelation)
   (not (meetsTemporally ?INST ?INST)))))
*/
fof(a6893,axiom,! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(s_meetsTemporally_m, s_IrreflexiveRelation) => (~ s_meetsTemporally(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST SymbolicString)
  (=> (instance telecomCoreNumber IrreflexiveRelation)
   (not (telecomCoreNumber ?INST ?INST)))))
*/
fof(a6894,axiom,! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(s_telecomCoreNumber_m, s_IrreflexiveRelation) => (~ s_telecomCoreNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST PostalPlace)
  (=> (instance postNeighborhood IrreflexiveRelation)
   (not (postNeighborhood ?INST ?INST)))))
*/
fof(a6895,axiom,! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(s_postNeighborhood_m, s_IrreflexiveRelation) => (~ s_postNeighborhood(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST BinaryRelation)
  (=> (instance inverse IrreflexiveRelation)
   (not (inverse ?INST ?INST)))))
*/
fof(a6896,axiom,! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(s_inverse_m, s_IrreflexiveRelation) => (~ s_inverse(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance smaller IrreflexiveRelation)
   (not (smaller ?INST ?INST)))))
*/
fof(a6897,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_smaller_m, s_IrreflexiveRelation) => (~ s_smaller(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Entity)
  (=> (instance element IrreflexiveRelation)
   (not (element ?INST ?INST)))))
*/
fof(a6898,axiom,! [INST] : ((s_instance(INST, s_Entity) => (s_instance(s_element_m, s_IrreflexiveRelation) => (~ s_element(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST Object)
  (=> (instance interiorPart IrreflexiveRelation)
   (not (interiorPart ?INST ?INST)))))
*/
fof(a6899,axiom,! [INST] : ((s_instance(INST, s_Object) => (s_instance(s_interiorPart_m, s_IrreflexiveRelation) => (~ s_interiorPart(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST GraphElement)
  (=> (instance graphPart IrreflexiveRelation)
   (not (graphPart ?INST ?INST)))))
*/
fof(a6900,axiom,! [INST] : ((s_instance(INST, s_GraphElement) => (s_instance(s_graphPart_m, s_IrreflexiveRelation) => (~ s_graphPart(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelecomNumber)
  (=> (instance faxNumber IrreflexiveRelation)
   (not (faxNumber ?INST ?INST)))))
*/
fof(a6901,axiom,! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(s_faxNumber_m, s_IrreflexiveRelation) => (~ s_faxNumber(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST ContentBearingObject)
  (=> (instance deceptiveIdentifier IrreflexiveRelation)
   (not (deceptiveIdentifier ?INST ?INST)))))
*/
fof(a6902,axiom,! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(s_deceptiveIdentifier_m, s_IrreflexiveRelation) => (~ s_deceptiveIdentifier(INST, INST)))))).

/*
(forall (?INST)
 (=> (instance ?INST TelephonyDevice)
  (=> (instance telecomContactDevice IrreflexiveRelation)
   (not (telecomContactDevice ?INST ?INST)))))
*/
fof(a6903,axiom,! [INST] : ((s_instance(INST, s_TelephonyDevice) => (s_instance(s_telecomContactDevice_m, s_IrreflexiveRelation) => (~ s_telecomContactDevice(INST, INST)))))).

/*
(forall (?INST)
 (=> (subclass ?INST Process)
  (=> (instance preventsSubclass IrreflexiveRelation)
   (not (preventsSubclass ?INST ?INST)))))
*/
fof(a6904,axiom,! [INST] : ((s_subclass(INST, s_Process) => (s_instance(s_preventsSubclass_m, s_IrreflexiveRelation) => (~ s_preventsSubclass(INST, INST)))))).

/*
(subclass SymmetricRelation BinaryRelation)
*/
fof(a6905,axiom,s_subclass(s_SymmetricRelation, s_BinaryRelation)).

/*
(disjoint SymmetricRelation AntisymmetricRelation)
*/
fof(a6906,axiom,s_disjoint(s_SymmetricRelation, s_AntisymmetricRelation)).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 List) (instance ?INST1 List))
  (=> (instance identicalListItems SymmetricRelation)
   (=> (identicalListItems ?INST1 ?INST2)
    (identicalListItems ?INST2 ?INST1)))))
*/
fof(a6907,axiom,! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_identicalListItems_m, s_SymmetricRelation) => (s_identicalListItems(INST1, INST2) => s_identicalListItems(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance cohabitant SymmetricRelation)
   (=> (cohabitant ?INST1 ?INST2) (cohabitant ?INST2 ?INST1)))))
*/
fof(a6908,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_cohabitant_m, s_SymmetricRelation) => (s_cohabitant(INST1, INST2) => s_cohabitant(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
  (=> (instance relative SymmetricRelation)
   (=> (relative ?INST1 ?INST2) (relative ?INST2 ?INST1)))))
*/
fof(a6909,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(s_relative_m, s_SymmetricRelation) => (s_relative(INST1, INST2) => s_relative(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ContentBearingPhysical)
       (instance ?INST1 ContentBearingPhysical))
  (=> (instance equivalentContentInstance SymmetricRelation)
   (=> (equivalentContentInstance ?INST1 ?INST2)
    (equivalentContentInstance ?INST2 ?INST1)))))
*/
fof(a6910,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST1, s_ContentBearingPhysical)) => (s_instance(s_equivalentContentInstance_m, s_SymmetricRelation) => (s_equivalentContentInstance(INST1, INST2) => s_equivalentContentInstance(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance domesticPartner SymmetricRelation)
   (=> (domesticPartner ?INST1 ?INST2)
    (domesticPartner ?INST2 ?INST1)))))
*/
fof(a6911,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_domesticPartner_m, s_SymmetricRelation) => (s_domesticPartner(INST1, INST2) => s_domesticPartner(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance friend SymmetricRelation)
   (=> (friend ?INST1 ?INST2) (friend ?INST2 ?INST1)))))
*/
fof(a6912,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_friend_m, s_SymmetricRelation) => (s_friend(INST1, INST2) => s_friend(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TimeInterval) (instance ?INST1 TimeInterval))
  (=> (instance overlapsTemporally SymmetricRelation)
   (=> (overlapsTemporally ?INST1 ?INST2)
    (overlapsTemporally ?INST2 ?INST1)))))
*/
fof(a6913,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_overlapsTemporally_m, s_SymmetricRelation) => (s_overlapsTemporally(INST1, INST2) => s_overlapsTemporally(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance mutualAcquaintance SymmetricRelation)
   (=> (mutualAcquaintance ?INST1 ?INST2)
    (mutualAcquaintance ?INST2 ?INST1)))))
*/
fof(a6914,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_mutualAcquaintance_m, s_SymmetricRelation) => (s_mutualAcquaintance(INST1, INST2) => s_mutualAcquaintance(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance spouse SymmetricRelation)
   (=> (spouse ?INST1 ?INST2) (spouse ?INST2 ?INST1)))))
*/
fof(a6915,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_spouse_m, s_SymmetricRelation) => (s_spouse(INST1, INST2) => s_spouse(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance overlapsSpatially SymmetricRelation)
   (=> (overlapsSpatially ?INST1 ?INST2)
    (overlapsSpatially ?INST2 ?INST1)))))
*/
fof(a6916,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_overlapsSpatially_m, s_SymmetricRelation) => (s_overlapsSpatially(INST1, INST2) => s_overlapsSpatially(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CompoundSubstance)
       (instance ?INST1 CompoundSubstance))
  (=> (instance conjugate SymmetricRelation)
   (=> (conjugate ?INST1 ?INST2) (conjugate ?INST2 ?INST1)))))
*/
fof(a6917,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CompoundSubstance) & s_instance(INST1, s_CompoundSubstance)) => (s_instance(s_conjugate_m, s_SymmetricRelation) => (s_conjugate(INST1, INST2) => s_conjugate(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Proposition) (instance ?INST1 Proposition))
  (=> (instance consistent SymmetricRelation)
   (=> (consistent ?INST1 ?INST2) (consistent ?INST2 ?INST1)))))
*/
fof(a6918,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Proposition) & s_instance(INST1, s_Proposition)) => (s_instance(s_consistent_m, s_SymmetricRelation) => (s_consistent(INST1, INST2) => s_consistent(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
  (=> (instance independentProbability SymmetricRelation)
   (=> (independentProbability ?INST1 ?INST2)
    (independentProbability ?INST2 ?INST1)))))
*/
fof(a6919,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(s_independentProbability_m, s_SymmetricRelation) => (s_independentProbability(INST1, INST2) => s_independentProbability(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
  (=> (instance disjoint SymmetricRelation)
   (=> (disjoint ?INST1 ?INST2) (disjoint ?INST2 ?INST1)))))
*/
fof(a6920,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_disjoint_m, s_SymmetricRelation) => (s_disjoint(INST1, INST2) => s_disjoint(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
  (=> (instance sibling SymmetricRelation)
   (=> (sibling ?INST1 ?INST2) (sibling ?INST2 ?INST1)))))
*/
fof(a6921,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(s_sibling_m, s_SymmetricRelation) => (s_sibling(INST1, INST2) => s_sibling(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance copy SymmetricRelation)
   (=> (copy ?INST1 ?INST2) (copy ?INST2 ?INST1)))))
*/
fof(a6922,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_copy_m, s_SymmetricRelation) => (s_copy(INST1, INST2) => s_copy(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (subclass ?INST2 ContentBearingPhysical)
       (subclass ?INST1 ContentBearingPhysical))
  (=> (instance equivalentContentClass SymmetricRelation)
   (=> (equivalentContentClass ?INST1 ?INST2)
    (equivalentContentClass ?INST2 ?INST1)))))
*/
fof(a6923,axiom,! [INST1,INST2] : (((s_subclass(INST2, s_ContentBearingPhysical) & s_subclass(INST1, s_ContentBearingPhysical)) => (s_instance(s_equivalentContentClass_m, s_SymmetricRelation) => (s_equivalentContentClass(INST1, INST2) => s_equivalentContentClass(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance neighbor SymmetricRelation)
   (=> (neighbor ?INST1 ?INST2) (neighbor ?INST2 ?INST1)))))
*/
fof(a6924,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_neighbor_m, s_SymmetricRelation) => (s_neighbor(INST1, INST2) => s_neighbor(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance overlapsPartially SymmetricRelation)
   (=> (overlapsPartially ?INST1 ?INST2)
    (overlapsPartially ?INST2 ?INST1)))))
*/
fof(a6925,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_overlapsPartially_m, s_SymmetricRelation) => (s_overlapsPartially(INST1, INST2) => s_overlapsPartially(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Entity) (instance ?INST1 Entity))
  (=> (instance equal SymmetricRelation)
   (=> (equal ?INST1 ?INST2) (equal ?INST2 ?INST1)))))
*/
fof(a6926,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(s_equal_m, s_SymmetricRelation) => ((INST1 = INST2) => (INST2 = INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance legalRelation SymmetricRelation)
   (=> (legalRelation ?INST1 ?INST2) (legalRelation ?INST2 ?INST1)))))
*/
fof(a6927,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_legalRelation_m, s_SymmetricRelation) => (s_legalRelation(INST1, INST2) => s_legalRelation(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance coworker SymmetricRelation)
   (=> (coworker ?INST1 ?INST2) (coworker ?INST2 ?INST1)))))
*/
fof(a6928,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_coworker_m, s_SymmetricRelation) => (s_coworker(INST1, INST2) => s_coworker(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Physical) (instance ?INST1 Physical))
  (=> (instance cooccur SymmetricRelation)
   (=> (cooccur ?INST1 ?INST2) (cooccur ?INST2 ?INST1)))))
*/
fof(a6929,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST1, s_Physical)) => (s_instance(s_cooccur_m, s_SymmetricRelation) => (s_cooccur(INST1, INST2) => s_cooccur(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance mutualStranger SymmetricRelation)
   (=> (mutualStranger ?INST1 ?INST2) (mutualStranger ?INST2 ?INST1)))))
*/
fof(a6930,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_mutualStranger_m, s_SymmetricRelation) => (s_mutualStranger(INST1, INST2) => s_mutualStranger(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 EngineeringComponent)
       (instance ?INST1 EngineeringComponent))
  (=> (instance connectedEngineeringComponents SymmetricRelation)
   (=> (connectedEngineeringComponents ?INST1 ?INST2)
    (connectedEngineeringComponents ?INST2 ?INST1)))))
*/
fof(a6931,axiom,! [INST1,INST2] : (((s_instance(INST2, s_EngineeringComponent) & s_instance(INST1, s_EngineeringComponent)) => (s_instance(s_connectedEngineeringComponents_m, s_SymmetricRelation) => (s_connectedEngineeringComponents(INST1, INST2) => s_connectedEngineeringComponents(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance relatedEvent SymmetricRelation)
   (=> (relatedEvent ?INST1 ?INST2) (relatedEvent ?INST2 ?INST1)))))
*/
fof(a6932,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_relatedEvent_m, s_SymmetricRelation) => (s_relatedEvent(INST1, INST2) => s_relatedEvent(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Entity) (instance ?INST1 Entity))
  (=> (instance relatedInternalConcept SymmetricRelation)
   (=> (relatedInternalConcept ?INST1 ?INST2)
    (relatedInternalConcept ?INST2 ?INST1)))))
*/
fof(a6933,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(s_relatedInternalConcept_m, s_SymmetricRelation) => (s_relatedInternalConcept(INST1, INST2) => s_relatedInternalConcept(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation)
       (instance ?INST1 BinaryRelation))
  (=> (instance inverse SymmetricRelation)
   (=> (inverse ?INST1 ?INST2) (inverse ?INST2 ?INST1)))))
*/
fof(a6934,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST1, s_BinaryRelation)) => (s_instance(s_inverse_m, s_SymmetricRelation) => (s_inverse(INST1, INST2) => s_inverse(INST2, INST1)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance connected SymmetricRelation)
   (=> (connected ?INST1 ?INST2) (connected ?INST2 ?INST1)))))
*/
fof(a6935,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_connected_m, s_SymmetricRelation) => (s_connected(INST1, INST2) => s_connected(INST2, INST1)))))).

/*
(subclass AsymmetricRelation IrreflexiveRelation)
*/
fof(a6936,axiom,s_subclass(s_AsymmetricRelation, s_IrreflexiveRelation)).

/*
(subclass AsymmetricRelation AntisymmetricRelation)
*/
fof(a6937,axiom,s_subclass(s_AsymmetricRelation, s_AntisymmetricRelation)).

/*
(forall (?REL)
 (<=> (instance ?REL AsymmetricRelation)
  (and (instance ?REL AntisymmetricRelation)
       (instance ?REL IrreflexiveRelation))))
*/
fof(a6938,axiom,! [REL] : ((s_instance(REL, s_AsymmetricRelation) <=> (s_instance(REL, s_AntisymmetricRelation) & s_instance(REL, s_IrreflexiveRelation))))).

/*
(subclass AntisymmetricRelation BinaryRelation)
*/
fof(a6939,axiom,s_subclass(s_AntisymmetricRelation, s_BinaryRelation)).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
       (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
  (=> (instance partialOrderingOn AntisymmetricRelation)
   (=>
    (and (partialOrderingOn ?INST1 ?INST2)
         (partialOrderingOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6940,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_partialOrderingOn_m, s_AntisymmetricRelation) => ((s_partialOrderingOn(INST1, INST2) & s_partialOrderingOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Proposition)
       (instance ?INST1 Process) (instance ?INST1 Proposition))
  (=> (instance realization AntisymmetricRelation)
   (=> (and (realization ?INST1 ?INST2) (realization ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6941,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Proposition) & s_instance(INST1, s_Process) & s_instance(INST1, s_Proposition)) => (s_instance(s_realization_m, s_AntisymmetricRelation) => ((s_realization(INST1, INST2) & s_realization(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Hole) (instance ?INST1 Hole))
  (=> (instance properlyFills AntisymmetricRelation)
   (=>
    (and (properlyFills ?INST1 ?INST2) (properlyFills ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6942,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Hole) & s_instance(INST1, s_Hole)) => (s_instance(s_properlyFills_m, s_AntisymmetricRelation) => ((s_properlyFills(INST1, INST2) & s_properlyFills(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
       (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
  (=> (instance knows AntisymmetricRelation)
   (=> (and (knows ?INST1 ?INST2) (knows ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6943,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(s_knows_m, s_AntisymmetricRelation) => ((s_knows(INST1, INST2) & s_knows(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Entity) (subclass ?INST2 Artifact)
       (subclass ?INST1 Artifact) (instance ?INST1 Entity))
  (=> (instance version AntisymmetricRelation)
   (=> (and (version ?INST1 ?INST2) (version ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6944,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Artifact) & s_subclass(INST1, s_Artifact) & s_instance(INST1, s_Entity)) => (s_instance(s_version_m, s_AntisymmetricRelation) => ((s_version(INST1, INST2) & s_version(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance instrument AntisymmetricRelation)
   (=> (and (instrument ?INST1 ?INST2) (instrument ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6945,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_instrument_m, s_AntisymmetricRelation) => ((s_instrument(INST1, INST2) & s_instrument(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 List) (instance ?INST1 List))
  (=> (instance inList AntisymmetricRelation)
   (=> (and (inList ?INST1 ?INST2) (inList ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6946,axiom,! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_inList_m, s_AntisymmetricRelation) => ((s_inList(INST1, INST2) & s_inList(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Agent)
       (instance ?INST1 Process) (instance ?INST1 Agent))
  (=> (instance suffers AntisymmetricRelation)
   (=> (and (suffers ?INST1 ?INST2) (suffers ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6947,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(s_suffers_m, s_AntisymmetricRelation) => ((s_suffers(INST1, INST2) & s_suffers(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Relation) (instance ?INST2 PositiveInteger)
       (instance ?INST1 Relation) (instance ?INST1 PositiveInteger))
  (=> (instance valence AntisymmetricRelation)
   (=> (and (valence ?INST1 ?INST2) (valence ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6948,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Relation) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_Relation) & s_instance(INST1, s_PositiveInteger)) => (s_instance(s_valence_m, s_AntisymmetricRelation) => ((s_valence(INST1, INST2) & s_valence(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
       (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
  (=> (instance doubts AntisymmetricRelation)
   (=> (and (doubts ?INST1 ?INST2) (doubts ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6949,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(s_doubts_m, s_AntisymmetricRelation) => ((s_doubts(INST1, INST2) & s_doubts(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CorpuscularObject)
       (instance ?INST1 CorpuscularObject))
  (=> (instance powerComponent AntisymmetricRelation)
   (=>
    (and (powerComponent ?INST1 ?INST2) (powerComponent ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6950,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CorpuscularObject) & s_instance(INST1, s_CorpuscularObject)) => (s_instance(s_powerComponent_m, s_AntisymmetricRelation) => ((s_powerComponent(INST1, INST2) & s_powerComponent(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance destination AntisymmetricRelation)
   (=> (and (destination ?INST1 ?INST2) (destination ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6951,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_destination_m, s_AntisymmetricRelation) => ((s_destination(INST1, INST2) & s_destination(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 Roadway)
       (instance ?INST1 PostalPlace) (instance ?INST1 Roadway))
  (=> (instance postStreet AntisymmetricRelation)
   (=> (and (postStreet ?INST1 ?INST2) (postStreet ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6952,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_Roadway) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_Roadway)) => (s_instance(s_postStreet_m, s_AntisymmetricRelation) => ((s_postStreet(INST1, INST2) & s_postStreet(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (subclass ?INST2 Process) (instance ?INST2 Agent)
       (subclass ?INST1 Process) (instance ?INST1 Agent))
  (=> (instance hasSkill AntisymmetricRelation)
   (=> (and (hasSkill ?INST1 ?INST2) (hasSkill ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6953,axiom,! [INST1,INST2] : (((s_subclass(INST2, s_Process) & s_instance(INST2, s_Agent) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(s_hasSkill_m, s_AntisymmetricRelation) => ((s_hasSkill(INST1, INST2) & s_hasSkill(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 List) (instance ?INST1 List))
  (=> (instance subList AntisymmetricRelation)
   (=> (and (subList ?INST1 ?INST2) (subList ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6954,axiom,! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_subList_m, s_AntisymmetricRelation) => ((s_subList(INST1, INST2) & s_subList(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 GeographicArea)
       (instance ?INST1 GeographicArea))
  (=> (instance geographicSubregion AntisymmetricRelation)
   (=>
    (and (geographicSubregion ?INST1 ?INST2)
         (geographicSubregion ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6955,axiom,! [INST1,INST2] : (((s_instance(INST2, s_GeographicArea) & s_instance(INST1, s_GeographicArea)) => (s_instance(s_geographicSubregion_m, s_AntisymmetricRelation) => ((s_geographicSubregion(INST1, INST2) & s_geographicSubregion(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Proposition) (instance ?INST2 Organization)
       (instance ?INST1 Proposition) (instance ?INST1 Organization))
  (=> (instance insured AntisymmetricRelation)
   (=> (and (insured ?INST1 ?INST2) (insured ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6956,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Proposition) & s_instance(INST2, s_Organization) & s_instance(INST1, s_Proposition) & s_instance(INST1, s_Organization)) => (s_instance(s_insured_m, s_AntisymmetricRelation) => ((s_insured(INST1, INST2) & s_insured(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString) (instance ?INST2 Agent)
       (instance ?INST1 SymbolicString) (instance ?INST1 Agent))
  (=> (instance alias AntisymmetricRelation)
   (=> (and (alias ?INST1 ?INST2) (alias ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6957,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Agent) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Agent)) => (s_instance(s_alias_m, s_AntisymmetricRelation) => ((s_alias(INST1, INST2) & s_alias(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ChemicalProcess) (instance ?INST2 Substance)
       (instance ?INST1 ChemicalProcess) (instance ?INST1 Substance))
  (=> (instance reactant AntisymmetricRelation)
   (=> (and (reactant ?INST1 ?INST2) (reactant ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6958,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ChemicalProcess) & s_instance(INST2, s_Substance) & s_instance(INST1, s_ChemicalProcess) & s_instance(INST1, s_Substance)) => (s_instance(s_reactant_m, s_AntisymmetricRelation) => ((s_reactant(INST1, INST2) & s_reactant(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Agent) (subclass ?INST2 ContentBearingObject)
       (instance ?INST1 Agent) (subclass ?INST1 ContentBearingObject))
  (=> (instance authors AntisymmetricRelation)
   (=> (and (authors ?INST1 ?INST2) (authors ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6959,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_subclass(INST2, s_ContentBearingObject) & s_instance(INST1, s_Agent) & s_subclass(INST1, s_ContentBearingObject)) => (s_instance(s_authors_m, s_AntisymmetricRelation) => ((s_authors(INST1, INST2) & s_authors(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance patient AntisymmetricRelation)
   (=> (and (patient ?INST1 ?INST2) (patient ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6960,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_patient_m, s_AntisymmetricRelation) => ((s_patient(INST1, INST2) & s_patient(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance eventLocated AntisymmetricRelation)
   (=> (and (eventLocated ?INST1 ?INST2) (eventLocated ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6961,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_eventLocated_m, s_AntisymmetricRelation) => ((s_eventLocated(INST1, INST2) & s_eventLocated(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
  (=> (instance subclass AntisymmetricRelation)
   (=> (and (subclass ?INST1 ?INST2) (subclass ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6962,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_subclass_m, s_AntisymmetricRelation) => ((s_subclass(INST1, INST2) & s_subclass(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Collection) (instance ?INST1 Collection))
  (=> (instance member AntisymmetricRelation)
   (=> (and (member ?INST1 ?INST2) (member ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6963,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Collection) & s_instance(INST1, s_Collection)) => (s_instance(s_member_m, s_AntisymmetricRelation) => ((s_member(INST1, INST2) & s_member(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance leader AntisymmetricRelation)
   (=> (and (leader ?INST1 ?INST2) (leader ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6964,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_leader_m, s_AntisymmetricRelation) => ((s_leader(INST1, INST2) & s_leader(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ServiceProcess)
       (instance ?INST2 CognitiveAgent)
       (instance ?INST1 ServiceProcess)
       (instance ?INST1 CognitiveAgent))
  (=> (instance serviceRecipient AntisymmetricRelation)
   (=>
    (and (serviceRecipient ?INST1 ?INST2)
         (serviceRecipient ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6965,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ServiceProcess) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_ServiceProcess) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_serviceRecipient_m, s_AntisymmetricRelation) => ((s_serviceRecipient(INST1, INST2) & s_serviceRecipient(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Experimenting) (instance ?INST2 Object)
       (instance ?INST1 Experimenting) (instance ?INST1 Object))
  (=> (instance experimentalControl AntisymmetricRelation)
   (=>
    (and (experimentalControl ?INST1 ?INST2)
         (experimentalControl ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6966,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Experimenting) & s_instance(INST2, s_Object) & s_instance(INST1, s_Experimenting) & s_instance(INST1, s_Object)) => (s_instance(s_experimentalControl_m, s_AntisymmetricRelation) => ((s_experimentalControl(INST1, INST2) & s_experimentalControl(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance crosses AntisymmetricRelation)
   (=> (and (crosses ?INST1 ?INST2) (crosses ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6967,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_crosses_m, s_AntisymmetricRelation) => ((s_crosses(INST1, INST2) & s_crosses(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 Agent)
       (instance ?INST1 PostalPlace) (instance ?INST1 Agent))
  (=> (instance postContactSite AntisymmetricRelation)
   (=>
    (and (postContactSite ?INST1 ?INST2)
         (postContactSite ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6968,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_Agent) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_Agent)) => (s_instance(s_postContactSite_m, s_AntisymmetricRelation) => ((s_postContactSite(INST1, INST2) & s_postContactSite(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST1 TelecomNumber))
  (=> (instance telecomExtension AntisymmetricRelation)
   (=>
    (and (telecomExtension ?INST1 ?INST2)
         (telecomExtension ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6969,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(s_telecomExtension_m, s_AntisymmetricRelation) => ((s_telecomExtension(INST1, INST2) & s_telecomExtension(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance resource AntisymmetricRelation)
   (=> (and (resource ?INST1 ?INST2) (resource ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6970,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_resource_m, s_AntisymmetricRelation) => ((s_resource(INST1, INST2) & s_resource(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
  (=> (instance hasPurpose AntisymmetricRelation)
   (=> (and (hasPurpose ?INST1 ?INST2) (hasPurpose ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6971,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(s_hasPurpose_m, s_AntisymmetricRelation) => ((s_hasPurpose(INST1, INST2) & s_hasPurpose(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Organization) (instance ?INST1 Organization))
  (=> (instance subOrganization AntisymmetricRelation)
   (=>
    (and (subOrganization ?INST1 ?INST2)
         (subOrganization ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6972,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST1, s_Organization)) => (s_instance(s_subOrganization_m, s_AntisymmetricRelation) => ((s_subOrganization(INST1, INST2) & s_subOrganization(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Quantity) (instance ?INST1 Quantity))
  (=> (instance lessThanOrEqualTo AntisymmetricRelation)
   (=>
    (and (lessThanOrEqualTo ?INST1 ?INST2)
         (lessThanOrEqualTo ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6973,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(s_lessThanOrEqualTo_m, s_AntisymmetricRelation) => ((lesseq(INST1, INST2) & lesseq(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent)
       (instance ?INST1 CognitiveAgent))
  (=> (instance customer AntisymmetricRelation)
   (=> (and (customer ?INST1 ?INST2) (customer ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6974,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_customer_m, s_AntisymmetricRelation) => ((s_customer(INST1, INST2) & s_customer(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 NonnegativeInteger)
       (instance ?INST2 SymbolicString)
       (instance ?INST1 NonnegativeInteger)
       (instance ?INST1 SymbolicString))
  (=> (instance stringLength AntisymmetricRelation)
   (=> (and (stringLength ?INST1 ?INST2) (stringLength ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6975,axiom,! [INST1,INST2] : (((s_instance(INST2, s_NonnegativeInteger) & s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_NonnegativeInteger) & s_instance(INST1, s_SymbolicString)) => (s_instance(s_stringLength_m, s_AntisymmetricRelation) => ((s_stringLength(INST1, INST2) & s_stringLength(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
       (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
  (=> (instance trichotomizingOn AntisymmetricRelation)
   (=>
    (and (trichotomizingOn ?INST1 ?INST2)
         (trichotomizingOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6976,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_trichotomizingOn_m, s_AntisymmetricRelation) => ((s_trichotomizingOn(INST1, INST2) & s_trichotomizingOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Entity) (subclass ?INST2 Process)
       (subclass ?INST1 Process) (instance ?INST1 Entity))
  (=> (instance causesSubclass AntisymmetricRelation)
   (=>
    (and (causesSubclass ?INST1 ?INST2) (causesSubclass ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6977,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Entity)) => (s_instance(s_causesSubclass_m, s_AntisymmetricRelation) => ((s_causesSubclass(INST1, INST2) & s_causesSubclass(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
       (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
  (=> (instance disapproves AntisymmetricRelation)
   (=> (and (disapproves ?INST1 ?INST2) (disapproves ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6978,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(s_disapproves_m, s_AntisymmetricRelation) => ((s_disapproves(INST1, INST2) & s_disapproves(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 FinancialTransaction)
       (instance ?INST2 CurrencyMeasure)
       (instance ?INST1 FinancialTransaction)
       (instance ?INST1 CurrencyMeasure))
  (=> (instance profit AntisymmetricRelation)
   (=> (and (profit ?INST1 ?INST2) (profit ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6979,axiom,! [INST1,INST2] : (((s_instance(INST2, s_FinancialTransaction) & s_instance(INST2, s_CurrencyMeasure) & s_instance(INST1, s_FinancialTransaction) & s_instance(INST1, s_CurrencyMeasure)) => (s_instance(s_profit_m, s_AntisymmetricRelation) => ((s_profit(INST1, INST2) & s_profit(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 OrganicObject)
       (instance ?INST2 DevelopmentalAttribute)
       (instance ?INST1 OrganicObject)
       (instance ?INST1 DevelopmentalAttribute))
  (=> (instance developmentalForm AntisymmetricRelation)
   (=>
    (and (developmentalForm ?INST1 ?INST2)
         (developmentalForm ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6980,axiom,! [INST1,INST2] : (((s_instance(INST2, s_OrganicObject) & s_instance(INST2, s_DevelopmentalAttribute) & s_instance(INST1, s_OrganicObject) & s_instance(INST1, s_DevelopmentalAttribute)) => (s_instance(s_developmentalForm_m, s_AntisymmetricRelation) => ((s_developmentalForm(INST1, INST2) & s_developmentalForm(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
  (=> (instance operator AntisymmetricRelation)
   (=> (and (operator ?INST1 ?INST2) (operator ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6981,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(s_operator_m, s_AntisymmetricRelation) => ((s_operator(INST1, INST2) & s_operator(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 GeopoliticalArea)
       (instance ?INST1 GeopoliticalArea))
  (=> (instance geopoliticalSubdivision AntisymmetricRelation)
   (=>
    (and (geopoliticalSubdivision ?INST1 ?INST2)
         (geopoliticalSubdivision ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6982,axiom,! [INST1,INST2] : (((s_instance(INST2, s_GeopoliticalArea) & s_instance(INST1, s_GeopoliticalArea)) => (s_instance(s_geopoliticalSubdivision_m, s_AntisymmetricRelation) => ((s_geopoliticalSubdivision(INST1, INST2) & s_geopoliticalSubdivision(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
  (=> (instance exploits AntisymmetricRelation)
   (=> (and (exploits ?INST1 ?INST2) (exploits ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6983,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(s_exploits_m, s_AntisymmetricRelation) => ((s_exploits(INST1, INST2) & s_exploits(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Agent)
       (instance ?INST1 Process) (instance ?INST1 Agent))
  (=> (instance benefits AntisymmetricRelation)
   (=> (and (benefits ?INST1 ?INST2) (benefits ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6984,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(s_benefits_m, s_AntisymmetricRelation) => ((s_benefits(INST1, INST2) & s_benefits(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Agent) (subclass ?INST2 Text)
       (instance ?INST1 Agent) (subclass ?INST1 Text))
  (=> (instance editor AntisymmetricRelation)
   (=> (and (editor ?INST1 ?INST2) (editor ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6985,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_subclass(INST2, s_Text) & s_instance(INST1, s_Agent) & s_subclass(INST1, s_Text)) => (s_instance(s_editor_m, s_AntisymmetricRelation) => ((s_editor(INST1, INST2) & s_editor(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance located AntisymmetricRelation)
   (=> (and (located ?INST1 ?INST2) (located ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6986,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_located_m, s_AntisymmetricRelation) => ((s_located(INST1, INST2) & s_located(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Human) (instance ?INST2 Nation)
       (instance ?INST1 Human) (instance ?INST1 Nation))
  (=> (instance citizen AntisymmetricRelation)
   (=> (and (citizen ?INST1 ?INST2) (citizen ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6987,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_Nation) & s_instance(INST1, s_Human) & s_instance(INST1, s_Nation)) => (s_instance(s_citizen_m, s_AntisymmetricRelation) => ((s_citizen(INST1, INST2) & s_citizen(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Relation) (instance ?INST1 Relation))
  (=> (instance subrelation AntisymmetricRelation)
   (=> (and (subrelation ?INST1 ?INST2) (subrelation ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6988,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Relation) & s_instance(INST1, s_Relation)) => (s_instance(s_subrelation_m, s_AntisymmetricRelation) => ((s_subrelation(INST1, INST2) & s_subrelation(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
       (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
  (=> (instance considers AntisymmetricRelation)
   (=> (and (considers ?INST1 ?INST2) (considers ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6989,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(s_considers_m, s_AntisymmetricRelation) => ((s_considers(INST1, INST2) & s_considers(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Organization) (subclass ?INST2 Text)
       (instance ?INST1 Organization) (subclass ?INST1 Text))
  (=> (instance publishes AntisymmetricRelation)
   (=> (and (publishes ?INST1 ?INST2) (publishes ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6990,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_subclass(INST2, s_Text) & s_instance(INST1, s_Organization) & s_subclass(INST1, s_Text)) => (s_instance(s_publishes_m, s_AntisymmetricRelation) => ((s_publishes(INST1, INST2) & s_publishes(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Man) (instance ?INST2 Woman)
       (instance ?INST1 Man) (instance ?INST1 Woman))
  (=> (instance husband AntisymmetricRelation)
   (=> (and (husband ?INST1 ?INST2) (husband ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6991,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Man) & s_instance(INST2, s_Woman) & s_instance(INST1, s_Man) & s_instance(INST1, s_Woman)) => (s_instance(s_husband_m, s_AntisymmetricRelation) => ((s_husband(INST1, INST2) & s_husband(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Function) (instance ?INST2 SetOrClass)
       (instance ?INST1 Function) (instance ?INST1 SetOrClass))
  (=> (instance range AntisymmetricRelation)
   (=> (and (range ?INST1 ?INST2) (range ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6992,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_Function) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_range_m, s_AntisymmetricRelation) => ((s_range(INST1, INST2) & s_range(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Transportation)
       (instance ?INST2 TransportationDevice)
       (instance ?INST1 Transportation)
       (instance ?INST1 TransportationDevice))
  (=> (instance conveyance AntisymmetricRelation)
   (=> (and (conveyance ?INST1 ?INST2) (conveyance ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6993,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Transportation) & s_instance(INST2, s_TransportationDevice) & s_instance(INST1, s_Transportation) & s_instance(INST1, s_TransportationDevice)) => (s_instance(s_conveyance_m, s_AntisymmetricRelation) => ((s_conveyance(INST1, INST2) & s_conveyance(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Object) (instance ?INST2 Attribute)
       (instance ?INST1 Object) (instance ?INST1 Attribute))
  (=> (instance attribute AntisymmetricRelation)
   (=> (and (attribute ?INST1 ?INST2) (attribute ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6994,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_Attribute) & s_instance(INST1, s_Object) & s_instance(INST1, s_Attribute)) => (s_instance(s_attribute_m, s_AntisymmetricRelation) => ((s_attribute(INST1, INST2) & s_attribute(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ContentBearingPhysical)
       (instance ?INST2 Proposition)
       (instance ?INST1 ContentBearingPhysical)
       (instance ?INST1 Proposition))
  (=> (instance containsInformation AntisymmetricRelation)
   (=>
    (and (containsInformation ?INST1 ?INST2)
         (containsInformation ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6995,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST2, s_Proposition) & s_instance(INST1, s_ContentBearingPhysical) & s_instance(INST1, s_Proposition)) => (s_instance(s_containsInformation_m, s_AntisymmetricRelation) => ((s_containsInformation(INST1, INST2) & s_containsInformation(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance part AntisymmetricRelation)
   (=> (and (part ?INST1 ?INST2) (part ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6996,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_part_m, s_AntisymmetricRelation) => ((s_part(INST1, INST2) & s_part(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryFunction)
       (instance ?INST1 BinaryFunction))
  (=> (instance identityElement AntisymmetricRelation)
   (=>
    (and (identityElement ?INST1 ?INST2)
         (identityElement ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6997,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryFunction) & s_instance(INST1, s_BinaryFunction)) => (s_instance(s_identityElement_m, s_AntisymmetricRelation) => ((s_identityElement(INST1, INST2) & s_identityElement(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Formula) (instance ?INST2 NormativeAttribute)
       (instance ?INST1 Formula) (instance ?INST1 NormativeAttribute))
  (=> (instance modalAttribute AntisymmetricRelation)
   (=>
    (and (modalAttribute ?INST1 ?INST2) (modalAttribute ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6998,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_NormativeAttribute) & s_instance(INST1, s_Formula) & s_instance(INST1, s_NormativeAttribute)) => (s_instance(s_modalAttribute_m, s_AntisymmetricRelation) => ((s_modalAttribute(INST1, INST2) & s_modalAttribute(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber)
       (instance ?INST2 TelephonyDevice)
       (instance ?INST1 TelecomNumber)
       (instance ?INST1 TelephonyDevice))
  (=> (instance deviceTelecomNumber AntisymmetricRelation)
   (=>
    (and (deviceTelecomNumber ?INST1 ?INST2)
         (deviceTelecomNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a6999,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_TelephonyDevice) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_TelephonyDevice)) => (s_instance(s_deviceTelecomNumber_m, s_AntisymmetricRelation) => ((s_deviceTelecomNumber(INST1, INST2) & s_deviceTelecomNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST1 TelecomNumber))
  (=> (instance telecomCountryCode AntisymmetricRelation)
   (=>
    (and (telecomCountryCode ?INST1 ?INST2)
         (telecomCountryCode ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7000,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(s_telecomCountryCode_m, s_AntisymmetricRelation) => ((s_telecomCountryCode(INST1, INST2) & s_telecomCountryCode(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
  (=> (instance causesProposition AntisymmetricRelation)
   (=>
    (and (causesProposition ?INST1 ?INST2)
         (causesProposition ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7001,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(s_causesProposition_m, s_AntisymmetricRelation) => ((s_causesProposition(INST1, INST2) & s_causesProposition(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TimePosition) (instance ?INST2 Formula)
       (instance ?INST1 TimePosition) (instance ?INST1 Formula))
  (=> (instance holdsDuring AntisymmetricRelation)
   (=> (and (holdsDuring ?INST1 ?INST2) (holdsDuring ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7002,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TimePosition) & s_instance(INST2, s_Formula) & s_instance(INST1, s_TimePosition) & s_instance(INST1, s_Formula)) => (s_instance(s_holdsDuring_m, s_AntisymmetricRelation) => ((s_holdsDuring(INST1, INST2) & s_holdsDuring(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST1 TelecomNumber))
  (=> (instance telecomCode2 AntisymmetricRelation)
   (=> (and (telecomCode2 ?INST1 ?INST2) (telecomCode2 ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7003,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(s_telecomCode2_m, s_AntisymmetricRelation) => ((s_telecomCode2(INST1, INST2) & s_telecomCode2(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)
       (instance ?INST1 Formula) (instance ?INST1 CognitiveAgent))
  (=> (instance holdsRight AntisymmetricRelation)
   (=> (and (holdsRight ?INST1 ?INST2) (holdsRight ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7004,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_Formula) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_holdsRight_m, s_AntisymmetricRelation) => ((s_holdsRight(INST1, INST2) & s_holdsRight(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Object) (instance ?INST2 PhysicalQuantity)
       (instance ?INST1 Object) (instance ?INST1 PhysicalQuantity))
  (=> (instance measure AntisymmetricRelation)
   (=> (and (measure ?INST1 ?INST2) (measure ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7005,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_PhysicalQuantity) & s_instance(INST1, s_Object) & s_instance(INST1, s_PhysicalQuantity)) => (s_instance(s_measure_m, s_AntisymmetricRelation) => ((s_measure(INST1, INST2) & s_measure(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ContentBearingObject)
       (instance ?INST2 DataStorageDevice)
       (instance ?INST1 ContentBearingObject)
       (instance ?INST1 DataStorageDevice))
  (=> (instance stored AntisymmetricRelation)
   (=> (and (stored ?INST1 ?INST2) (stored ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7006,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingObject) & s_instance(INST2, s_DataStorageDevice) & s_instance(INST1, s_ContentBearingObject) & s_instance(INST1, s_DataStorageDevice)) => (s_instance(s_stored_m, s_AntisymmetricRelation) => ((s_stored(INST1, INST2) & s_stored(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Radiating) (instance ?INST2 LengthMeasure)
       (instance ?INST1 Radiating) (instance ?INST1 LengthMeasure))
  (=> (instance wavelength AntisymmetricRelation)
   (=> (and (wavelength ?INST1 ?INST2) (wavelength ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7007,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Radiating) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_Radiating) & s_instance(INST1, s_LengthMeasure)) => (s_instance(s_wavelength_m, s_AntisymmetricRelation) => ((s_wavelength(INST1, INST2) & s_wavelength(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 PostcodeArea)
       (instance ?INST1 PostalPlace) (instance ?INST1 PostcodeArea))
  (=> (instance postPostcodeArea AntisymmetricRelation)
   (=>
    (and (postPostcodeArea ?INST1 ?INST2)
         (postPostcodeArea ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7008,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_PostcodeArea) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_PostcodeArea)) => (s_instance(s_postPostcodeArea_m, s_AntisymmetricRelation) => ((s_postPostcodeArea(INST1, INST2) & s_postPostcodeArea(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ContentBearingPhysical)
       (instance ?INST1 ContentBearingPhysical))
  (=> (instance subsumesContentInstance AntisymmetricRelation)
   (=>
    (and (subsumesContentInstance ?INST1 ?INST2)
         (subsumesContentInstance ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7009,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST1, s_ContentBearingPhysical)) => (s_instance(s_subsumesContentInstance_m, s_AntisymmetricRelation) => ((s_subsumesContentInstance(INST1, INST2) & s_subsumesContentInstance(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Quantity) (instance ?INST1 Quantity))
  (=> (instance greaterThanOrEqualTo AntisymmetricRelation)
   (=>
    (and (greaterThanOrEqualTo ?INST1 ?INST2)
         (greaterThanOrEqualTo ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7010,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(s_greaterThanOrEqualTo_m, s_AntisymmetricRelation) => ((s_greaterThanOrEqualTo(INST1, INST2) & s_greaterThanOrEqualTo(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
  (=> (instance possesses AntisymmetricRelation)
   (=> (and (possesses ?INST1 ?INST2) (possesses ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7011,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(s_possesses_m, s_AntisymmetricRelation) => ((s_possesses(INST1, INST2) & s_possesses(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance penetrates AntisymmetricRelation)
   (=> (and (penetrates ?INST1 ?INST2) (penetrates ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7012,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_penetrates_m, s_AntisymmetricRelation) => ((s_penetrates(INST1, INST2) & s_penetrates(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
  (=> (instance inhabits AntisymmetricRelation)
   (=> (and (inhabits ?INST1 ?INST2) (inhabits ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7013,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(s_inhabits_m, s_AntisymmetricRelation) => ((s_inhabits(INST1, INST2) & s_inhabits(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
       (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
  (=> (instance workPhoneNumber AntisymmetricRelation)
   (=>
    (and (workPhoneNumber ?INST1 ?INST2)
         (workPhoneNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7014,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(s_workPhoneNumber_m, s_AntisymmetricRelation) => ((s_workPhoneNumber(INST1, INST2) & s_workPhoneNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance legalGuardian AntisymmetricRelation)
   (=>
    (and (legalGuardian ?INST1 ?INST2) (legalGuardian ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7015,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_legalGuardian_m, s_AntisymmetricRelation) => ((s_legalGuardian(INST1, INST2) & s_legalGuardian(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString) (instance ?INST2 Human)
       (instance ?INST1 SymbolicString) (instance ?INST1 Human))
  (=> (instance familyName AntisymmetricRelation)
   (=> (and (familyName ?INST1 ?INST2) (familyName ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7016,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Human) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Human)) => (s_instance(s_familyName_m, s_AntisymmetricRelation) => ((s_familyName(INST1, INST2) & s_familyName(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 LegalAction) (instance ?INST2 CognitiveAgent)
       (instance ?INST1 LegalAction) (instance ?INST1 CognitiveAgent))
  (=> (instance defendant AntisymmetricRelation)
   (=> (and (defendant ?INST1 ?INST2) (defendant ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7017,axiom,! [INST1,INST2] : (((s_instance(INST2, s_LegalAction) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_LegalAction) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_defendant_m, s_AntisymmetricRelation) => ((s_defendant(INST1, INST2) & s_defendant(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString)
       (instance ?INST1 SymbolicString))
  (=> (instance subString AntisymmetricRelation)
   (=> (and (subString ?INST1 ?INST2) (subString ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7018,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_SymbolicString)) => (s_instance(s_subString_m, s_AntisymmetricRelation) => ((s_subString(INST1, INST2) & s_subString(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (subclass ?INST2 ElementalSubstance)
       (instance ?INST2 PositiveInteger)
       (subclass ?INST1 ElementalSubstance)
       (instance ?INST1 PositiveInteger))
  (=> (instance atomicNumber AntisymmetricRelation)
   (=> (and (atomicNumber ?INST1 ?INST2) (atomicNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7019,axiom,! [INST1,INST2] : (((s_subclass(INST2, s_ElementalSubstance) & s_instance(INST2, s_PositiveInteger) & s_subclass(INST1, s_ElementalSubstance) & s_instance(INST1, s_PositiveInteger)) => (s_instance(s_atomicNumber_m, s_AntisymmetricRelation) => ((s_atomicNumber(INST1, INST2) & s_atomicNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Hole) (instance ?INST1 Hole))
  (=> (instance completelyFills AntisymmetricRelation)
   (=>
    (and (completelyFills ?INST1 ?INST2)
         (completelyFills ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7020,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Hole) & s_instance(INST1, s_Hole)) => (s_instance(s_completelyFills_m, s_AntisymmetricRelation) => ((s_completelyFills(INST1, INST2) & s_completelyFills(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalAddressText)
       (instance ?INST2 PostalPlace)
       (instance ?INST1 PostalAddressText)
       (instance ?INST1 PostalPlace))
  (=> (instance postAddressText AntisymmetricRelation)
   (=>
    (and (postAddressText ?INST1 ?INST2)
         (postAddressText ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7021,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalAddressText) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_PostalAddressText) & s_instance(INST1, s_PostalPlace)) => (s_instance(s_postAddressText_m, s_AntisymmetricRelation) => ((s_postAddressText(INST1, INST2) & s_postAddressText(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Physical) (instance ?INST2 CurrencyMeasure)
       (instance ?INST1 Physical) (instance ?INST1 CurrencyMeasure))
  (=> (instance monetaryValue AntisymmetricRelation)
   (=>
    (and (monetaryValue ?INST1 ?INST2) (monetaryValue ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7022,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_CurrencyMeasure) & s_instance(INST1, s_Physical) & s_instance(INST1, s_CurrencyMeasure)) => (s_instance(s_monetaryValue_m, s_AntisymmetricRelation) => ((s_monetaryValue(INST1, INST2) & s_monetaryValue(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 PositionalAttribute)
       (instance ?INST1 Process) (instance ?INST1 PositionalAttribute))
  (=> (instance direction AntisymmetricRelation)
   (=> (and (direction ?INST1 ?INST2) (direction ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7023,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_PositionalAttribute) & s_instance(INST1, s_Process) & s_instance(INST1, s_PositionalAttribute)) => (s_instance(s_direction_m, s_AntisymmetricRelation) => ((s_direction(INST1, INST2) & s_direction(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Attribute)
       (instance ?INST1 Process) (instance ?INST1 Attribute))
  (=> (instance manner AntisymmetricRelation)
   (=> (and (manner ?INST1 ?INST2) (manner ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7024,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Attribute) & s_instance(INST1, s_Process) & s_instance(INST1, s_Attribute)) => (s_instance(s_manner_m, s_AntisymmetricRelation) => ((s_manner(INST1, INST2) & s_manner(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Organization) (instance ?INST2 Integer)
       (instance ?INST1 Organization) (instance ?INST1 Integer))
  (=> (instance yearOfFounding AntisymmetricRelation)
   (=>
    (and (yearOfFounding ?INST1 ?INST2) (yearOfFounding ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7025,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST2, s_Integer) & s_instance(INST1, s_Organization) & s_instance(INST1, s_Integer)) => (s_instance(s_yearOfFounding_m, s_AntisymmetricRelation) => ((s_yearOfFounding(INST1, INST2) & s_yearOfFounding(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PermanentResidence) (instance ?INST2 Human)
       (instance ?INST1 PermanentResidence) (instance ?INST1 Human))
  (=> (instance homeAddress AntisymmetricRelation)
   (=> (and (homeAddress ?INST1 ?INST2) (homeAddress ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7026,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PermanentResidence) & s_instance(INST2, s_Human) & s_instance(INST1, s_PermanentResidence) & s_instance(INST1, s_Human)) => (s_instance(s_homeAddress_m, s_AntisymmetricRelation) => ((s_homeAddress(INST1, INST2) & s_homeAddress(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Function) (instance ?INST2 SetOrClass)
       (instance ?INST1 Function) (instance ?INST1 SetOrClass))
  (=> (instance closedOn AntisymmetricRelation)
   (=> (and (closedOn ?INST1 ?INST2) (closedOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7027,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_Function) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_closedOn_m, s_AntisymmetricRelation) => ((s_closedOn(INST1, INST2) & s_closedOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (subclass ?INST2 Process) (instance ?INST2 TimeDuration)
       (subclass ?INST1 Process) (instance ?INST1 TimeDuration))
  (=> (instance frequency AntisymmetricRelation)
   (=> (and (frequency ?INST1 ?INST2) (frequency ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7028,axiom,! [INST1,INST2] : (((s_subclass(INST2, s_Process) & s_instance(INST2, s_TimeDuration) & s_subclass(INST1, s_Process) & s_instance(INST1, s_TimeDuration)) => (s_instance(s_frequency_m, s_AntisymmetricRelation) => ((s_frequency(INST1, INST2) & s_frequency(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Demonstrating) (instance ?INST2 Human)
       (instance ?INST1 Demonstrating) (instance ?INST1 Human))
  (=> (instance attends AntisymmetricRelation)
   (=> (and (attends ?INST1 ?INST2) (attends ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7029,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Demonstrating) & s_instance(INST2, s_Human) & s_instance(INST1, s_Demonstrating) & s_instance(INST1, s_Human)) => (s_instance(s_attends_m, s_AntisymmetricRelation) => ((s_attends(INST1, INST2) & s_attends(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
  (=> (instance immediateSubclass AntisymmetricRelation)
   (=>
    (and (immediateSubclass ?INST1 ?INST2)
         (immediateSubclass ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7030,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_immediateSubclass_m, s_AntisymmetricRelation) => ((s_immediateSubclass(INST1, INST2) & s_immediateSubclass(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Function) (subclass ?INST2 SetOrClass)
       (instance ?INST1 Function) (subclass ?INST1 SetOrClass))
  (=> (instance rangeSubclass AntisymmetricRelation)
   (=>
    (and (rangeSubclass ?INST1 ?INST2) (rangeSubclass ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7031,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_subclass(INST2, s_SetOrClass) & s_instance(INST1, s_Function) & s_subclass(INST1, s_SetOrClass)) => (s_instance(s_rangeSubclass_m, s_AntisymmetricRelation) => ((s_rangeSubclass(INST1, INST2) & s_rangeSubclass(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Translocation) (instance ?INST2 Object)
       (instance ?INST1 Translocation) (instance ?INST1 Object))
  (=> (instance changesLocation AntisymmetricRelation)
   (=>
    (and (changesLocation ?INST1 ?INST2)
         (changesLocation ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7032,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Translocation) & s_instance(INST2, s_Object) & s_instance(INST1, s_Translocation) & s_instance(INST1, s_Object)) => (s_instance(s_changesLocation_m, s_AntisymmetricRelation) => ((s_changesLocation(INST1, INST2) & s_changesLocation(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString) (instance ?INST2 PostalPlace)
       (instance ?INST1 SymbolicString) (instance ?INST1 PostalPlace))
  (=> (instance postPostOfficeBox AntisymmetricRelation)
   (=>
    (and (postPostOfficeBox ?INST1 ?INST2)
         (postPostOfficeBox ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7033,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_PostalPlace)) => (s_instance(s_postPostOfficeBox_m, s_AntisymmetricRelation) => ((s_postPostOfficeBox(INST1, INST2) & s_postPostOfficeBox(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
  (=> (instance uses AntisymmetricRelation)
   (=> (and (uses ?INST1 ?INST2) (uses ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7034,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(s_uses_m, s_AntisymmetricRelation) => ((s_uses(INST1, INST2) & s_uses(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ChangeOfControl) (instance ?INST2 Agent)
       (instance ?INST1 ChangeOfControl) (instance ?INST1 Agent))
  (=> (instance losesControl AntisymmetricRelation)
   (=> (and (losesControl ?INST1 ?INST2) (losesControl ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7035,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ChangeOfControl) & s_instance(INST2, s_Agent) & s_instance(INST1, s_ChangeOfControl) & s_instance(INST1, s_Agent)) => (s_instance(s_losesControl_m, s_AntisymmetricRelation) => ((s_losesControl(INST1, INST2) & s_losesControl(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
  (=> (instance grandparent AntisymmetricRelation)
   (=> (and (grandparent ?INST1 ?INST2) (grandparent ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7036,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(s_grandparent_m, s_AntisymmetricRelation) => ((s_grandparent(INST1, INST2) & s_grandparent(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Object)
       (instance ?INST2 UnitOfAtmosphericPressure)
       (instance ?INST1 Object)
       (instance ?INST1 UnitOfAtmosphericPressure))
  (=> (instance barometricPressure AntisymmetricRelation)
   (=>
    (and (barometricPressure ?INST1 ?INST2)
         (barometricPressure ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7037,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_UnitOfAtmosphericPressure) & s_instance(INST1, s_Object) & s_instance(INST1, s_UnitOfAtmosphericPressure)) => (s_instance(s_barometricPressure_m, s_AntisymmetricRelation) => ((s_barometricPressure(INST1, INST2) & s_barometricPressure(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance involvedInEvent AntisymmetricRelation)
   (=>
    (and (involvedInEvent ?INST1 ?INST2)
         (involvedInEvent ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7038,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_involvedInEvent_m, s_AntisymmetricRelation) => ((s_involvedInEvent(INST1, INST2) & s_involvedInEvent(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Language) (instance ?INST1 Language))
  (=> (instance expressedInLanguage AntisymmetricRelation)
   (=>
    (and (expressedInLanguage ?INST1 ?INST2)
         (expressedInLanguage ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7039,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Language) & s_instance(INST1, s_Language)) => (s_instance(s_expressedInLanguage_m, s_AntisymmetricRelation) => ((s_expressedInLanguage(INST1, INST2) & s_expressedInLanguage(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
  (=> (instance parent AntisymmetricRelation)
   (=> (and (parent ?INST1 ?INST2) (parent ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7040,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(s_parent_m, s_AntisymmetricRelation) => ((s_parent(INST1, INST2) & s_parent(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
  (=> (instance immediateInstance AntisymmetricRelation)
   (=>
    (and (immediateInstance ?INST1 ?INST2)
         (immediateInstance ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7041,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_immediateInstance_m, s_AntisymmetricRelation) => ((s_immediateInstance(INST1, INST2) & s_immediateInstance(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Hole) (instance ?INST1 Hole))
  (=> (instance partiallyFills AntisymmetricRelation)
   (=>
    (and (partiallyFills ?INST1 ?INST2) (partiallyFills ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7042,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Hole) & s_instance(INST1, s_Hole)) => (s_instance(s_partiallyFills_m, s_AntisymmetricRelation) => ((s_partiallyFills(INST1, INST2) & s_partiallyFills(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance subProcess AntisymmetricRelation)
   (=> (and (subProcess ?INST1 ?INST2) (subProcess ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7043,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_subProcess_m, s_AntisymmetricRelation) => ((s_subProcess(INST1, INST2) & s_subProcess(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 GraphPath) (instance ?INST2 PositiveInteger)
       (instance ?INST1 GraphPath) (instance ?INST1 PositiveInteger))
  (=> (instance pathLength AntisymmetricRelation)
   (=> (and (pathLength ?INST1 ?INST2) (pathLength ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7044,axiom,! [INST1,INST2] : (((s_instance(INST2, s_GraphPath) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_GraphPath) & s_instance(INST1, s_PositiveInteger)) => (s_instance(s_pathLength_m, s_AntisymmetricRelation) => ((s_pathLength(INST1, INST2) & s_pathLength(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 LegalAction) (instance ?INST2 CognitiveAgent)
       (instance ?INST1 LegalAction) (instance ?INST1 CognitiveAgent))
  (=> (instance plaintiff AntisymmetricRelation)
   (=> (and (plaintiff ?INST1 ?INST2) (plaintiff ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7045,axiom,! [INST1,INST2] : (((s_instance(INST2, s_LegalAction) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_LegalAction) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_plaintiff_m, s_AntisymmetricRelation) => ((s_plaintiff(INST1, INST2) & s_plaintiff(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Entity)
       (subclass ?INST2 ContentBearingPhysical)
       (subclass ?INST1 ContentBearingPhysical)
       (instance ?INST1 Entity))
  (=> (instance subsumesContentClass AntisymmetricRelation)
   (=>
    (and (subsumesContentClass ?INST1 ?INST2)
         (subsumesContentClass ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7046,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_ContentBearingPhysical) & s_subclass(INST1, s_ContentBearingPhysical) & s_instance(INST1, s_Entity)) => (s_instance(s_subsumesContentClass_m, s_AntisymmetricRelation) => ((s_subsumesContentClass(INST1, INST2) & s_subsumesContentClass(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Hole) (instance ?INST1 Hole))
  (=> (instance fills AntisymmetricRelation)
   (=> (and (fills ?INST1 ?INST2) (fills ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7047,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Hole) & s_instance(INST1, s_Hole)) => (s_instance(s_fills_m, s_AntisymmetricRelation) => ((s_fills(INST1, INST2) & s_fills(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)
       (instance ?INST1 Formula) (instance ?INST1 CognitiveAgent))
  (=> (instance holdsObligation AntisymmetricRelation)
   (=>
    (and (holdsObligation ?INST1 ?INST2)
         (holdsObligation ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7048,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_Formula) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_holdsObligation_m, s_AntisymmetricRelation) => ((s_holdsObligation(INST1, INST2) & s_holdsObligation(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 GeopoliticalArea)
       (instance ?INST1 PostalPlace)
       (instance ?INST1 GeopoliticalArea))
  (=> (instance postCountry AntisymmetricRelation)
   (=> (and (postCountry ?INST1 ?INST2) (postCountry ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7049,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_GeopoliticalArea) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_GeopoliticalArea)) => (s_instance(s_postCountry_m, s_AntisymmetricRelation) => ((s_postCountry(INST1, INST2) & s_postCountry(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TimePosition) (instance ?INST1 TimePosition))
  (=> (instance temporalPart AntisymmetricRelation)
   (=> (and (temporalPart ?INST1 ?INST2) (temporalPart ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7050,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TimePosition) & s_instance(INST1, s_TimePosition)) => (s_instance(s_temporalPart_m, s_AntisymmetricRelation) => ((s_temporalPart(INST1, INST2) & s_temporalPart(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Confining) (instance ?INST2 Animal)
       (instance ?INST1 Confining) (instance ?INST1 Animal))
  (=> (instance detainee AntisymmetricRelation)
   (=> (and (detainee ?INST1 ?INST2) (detainee ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7051,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Confining) & s_instance(INST2, s_Animal) & s_instance(INST1, s_Confining) & s_instance(INST1, s_Animal)) => (s_instance(s_detainee_m, s_AntisymmetricRelation) => ((s_detainee(INST1, INST2) & s_detainee(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
       (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
  (=> (instance reflexiveOn AntisymmetricRelation)
   (=> (and (reflexiveOn ?INST1 ?INST2) (reflexiveOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7052,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_reflexiveOn_m, s_AntisymmetricRelation) => ((s_reflexiveOn(INST1, INST2) & s_reflexiveOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Contest) (instance ?INST2 Agent)
       (instance ?INST1 Contest) (instance ?INST1 Agent))
  (=> (instance contestParticipant AntisymmetricRelation)
   (=>
    (and (contestParticipant ?INST1 ?INST2)
         (contestParticipant ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7053,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Contest) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Contest) & s_instance(INST1, s_Agent)) => (s_instance(s_contestParticipant_m, s_AntisymmetricRelation) => ((s_contestParticipant(INST1, INST2) & s_contestParticipant(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ChemicalProcess) (instance ?INST2 Substance)
       (instance ?INST1 ChemicalProcess) (instance ?INST1 Substance))
  (=> (instance reagent AntisymmetricRelation)
   (=> (and (reagent ?INST1 ?INST2) (reagent ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7054,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ChemicalProcess) & s_instance(INST2, s_Substance) & s_instance(INST1, s_ChemicalProcess) & s_instance(INST1, s_Substance)) => (s_instance(s_reagent_m, s_AntisymmetricRelation) => ((s_reagent(INST1, INST2) & s_reagent(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Transportation) (instance ?INST2 Object)
       (instance ?INST1 Transportation) (instance ?INST1 Object))
  (=> (instance transported AntisymmetricRelation)
   (=> (and (transported ?INST1 ?INST2) (transported ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7055,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Transportation) & s_instance(INST2, s_Object) & s_instance(INST1, s_Transportation) & s_instance(INST1, s_Object)) => (s_instance(s_transported_m, s_AntisymmetricRelation) => ((s_transported(INST1, INST2) & s_transported(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Shipping) (instance ?INST2 Object)
       (instance ?INST1 Shipping) (instance ?INST1 Object))
  (=> (instance cargo AntisymmetricRelation)
   (=> (and (cargo ?INST1 ?INST2) (cargo ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7056,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Shipping) & s_instance(INST2, s_Object) & s_instance(INST1, s_Shipping) & s_instance(INST1, s_Object)) => (s_instance(s_cargo_m, s_AntisymmetricRelation) => ((s_cargo(INST1, INST2) & s_cargo(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SelfConnectedObject)
       (instance ?INST1 SelfConnectedObject))
  (=> (instance contains AntisymmetricRelation)
   (=> (and (contains ?INST1 ?INST2) (contains ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7057,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(s_contains_m, s_AntisymmetricRelation) => ((s_contains(INST1, INST2) & s_contains(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST2 Human)
       (instance ?INST1 TelecomNumber) (instance ?INST1 Human))
  (=> (instance homePhoneNumber AntisymmetricRelation)
   (=>
    (and (homePhoneNumber ?INST1 ?INST2)
         (homePhoneNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7058,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Human) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Human)) => (s_instance(s_homePhoneNumber_m, s_AntisymmetricRelation) => ((s_homePhoneNumber(INST1, INST2) & s_homePhoneNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance properPart AntisymmetricRelation)
   (=> (and (properPart ?INST1 ?INST2) (properPart ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7059,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_properPart_m, s_AntisymmetricRelation) => ((s_properPart(INST1, INST2) & s_properPart(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TimeInterval) (instance ?INST2 TimeDuration)
       (instance ?INST1 TimeInterval) (instance ?INST1 TimeDuration))
  (=> (instance duration AntisymmetricRelation)
   (=> (and (duration ?INST1 ?INST2) (duration ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7060,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST2, s_TimeDuration) & s_instance(INST1, s_TimeInterval) & s_instance(INST1, s_TimeDuration)) => (s_instance(s_duration_m, s_AntisymmetricRelation) => ((s_duration(INST1, INST2) & s_duration(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST1 TelecomNumber))
  (=> (instance telecomAreaCode AntisymmetricRelation)
   (=>
    (and (telecomAreaCode ?INST1 ?INST2)
         (telecomAreaCode ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7061,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(s_telecomAreaCode_m, s_AntisymmetricRelation) => ((s_telecomAreaCode(INST1, INST2) & s_telecomAreaCode(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Agent)
       (instance ?INST1 Process) (instance ?INST1 Agent))
  (=> (instance experiencer AntisymmetricRelation)
   (=> (and (experiencer ?INST1 ?INST2) (experiencer ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7062,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(s_experiencer_m, s_AntisymmetricRelation) => ((s_experiencer(INST1, INST2) & s_experiencer(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance result AntisymmetricRelation)
   (=> (and (result ?INST1 ?INST2) (result ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7063,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_result_m, s_AntisymmetricRelation) => ((s_result(INST1, INST2) & s_result(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 TimePoint) (instance ?INST1 TimePoint))
  (=> (instance beforeOrEqual AntisymmetricRelation)
   (=>
    (and (beforeOrEqual ?INST1 ?INST2) (beforeOrEqual ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7064,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TimePoint) & s_instance(INST1, s_TimePoint)) => (s_instance(s_beforeOrEqual_m, s_AntisymmetricRelation) => ((s_beforeOrEqual(INST1, INST2) & s_beforeOrEqual(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance targetInAttack AntisymmetricRelation)
   (=>
    (and (targetInAttack ?INST1 ?INST2) (targetInAttack ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7065,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_targetInAttack_m, s_AntisymmetricRelation) => ((s_targetInAttack(INST1, INST2) & s_targetInAttack(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
       (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
  (=> (instance irreflexiveOn AntisymmetricRelation)
   (=>
    (and (irreflexiveOn ?INST1 ?INST2) (irreflexiveOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7066,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_irreflexiveOn_m, s_AntisymmetricRelation) => ((s_irreflexiveOn(INST1, INST2) & s_irreflexiveOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Entity) (subclass ?INST2 Process)
       (subclass ?INST1 Process) (instance ?INST1 Entity))
  (=> (instance precondition AntisymmetricRelation)
   (=> (and (precondition ?INST1 ?INST2) (precondition ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7067,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Entity)) => (s_instance(s_precondition_m, s_AntisymmetricRelation) => ((s_precondition(INST1, INST2) & s_precondition(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance origin AntisymmetricRelation)
   (=> (and (origin ?INST1 ?INST2) (origin ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7068,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_origin_m, s_AntisymmetricRelation) => ((s_origin(INST1, INST2) & s_origin(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Physical) (instance ?INST2 Day)
       (instance ?INST1 Physical) (instance ?INST1 Day))
  (=> (instance date AntisymmetricRelation)
   (=> (and (date ?INST1 ?INST2) (date ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7069,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_Day) & s_instance(INST1, s_Physical) & s_instance(INST1, s_Day)) => (s_instance(s_date_m, s_AntisymmetricRelation) => ((s_date(INST1, INST2) & s_date(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 GeometricFigure)
       (instance ?INST1 GeometricFigure))
  (=> (instance geometricPart AntisymmetricRelation)
   (=>
    (and (geometricPart ?INST1 ?INST2) (geometricPart ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7070,axiom,! [INST1,INST2] : (((s_instance(INST2, s_GeometricFigure) & s_instance(INST1, s_GeometricFigure)) => (s_instance(s_geometricPart_m, s_AntisymmetricRelation) => ((s_geometricPart(INST1, INST2) & s_geometricPart(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Collection) (instance ?INST1 Collection))
  (=> (instance subCollection AntisymmetricRelation)
   (=>
    (and (subCollection ?INST1 ?INST2) (subCollection ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7071,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Collection) & s_instance(INST1, s_Collection)) => (s_instance(s_subCollection_m, s_AntisymmetricRelation) => ((s_subCollection(INST1, INST2) & s_subCollection(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
       (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
  (=> (instance mobilePhoneNumber AntisymmetricRelation)
   (=>
    (and (mobilePhoneNumber ?INST1 ?INST2)
         (mobilePhoneNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7072,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(s_mobilePhoneNumber_m, s_AntisymmetricRelation) => ((s_mobilePhoneNumber(INST1, INST2) & s_mobilePhoneNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 CognitiveAgent)
       (instance ?INST1 PostalPlace) (instance ?INST1 CognitiveAgent))
  (=> (instance workAddress AntisymmetricRelation)
   (=> (and (workAddress ?INST1 ?INST2) (workAddress ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7073,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_workAddress_m, s_AntisymmetricRelation) => ((s_workAddress(INST1, INST2) & s_workAddress(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Attribute) (instance ?INST1 Attribute))
  (=> (instance successorAttribute AntisymmetricRelation)
   (=>
    (and (successorAttribute ?INST1 ?INST2)
         (successorAttribute ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7074,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(s_successorAttribute_m, s_AntisymmetricRelation) => ((s_successorAttribute(INST1, INST2) & s_successorAttribute(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
       (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
  (=> (instance desires AntisymmetricRelation)
   (=> (and (desires ?INST1 ?INST2) (desires ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7075,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(s_desires_m, s_AntisymmetricRelation) => ((s_desires(INST1, INST2) & s_desires(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Abstract) (instance ?INST1 Abstract))
  (=> (instance abstractPart AntisymmetricRelation)
   (=> (and (abstractPart ?INST1 ?INST2) (abstractPart ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7076,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Abstract) & s_instance(INST1, s_Abstract)) => (s_instance(s_abstractPart_m, s_AntisymmetricRelation) => ((s_abstractPart(INST1, INST2) & s_abstractPart(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
  (=> (instance causes AntisymmetricRelation)
   (=> (and (causes ?INST1 ?INST2) (causes ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7077,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_causes_m, s_AntisymmetricRelation) => ((s_causes(INST1, INST2) & s_causes(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Motion) (instance ?INST2 Object)
       (instance ?INST1 Motion) (instance ?INST1 Object))
  (=> (instance moves AntisymmetricRelation)
   (=> (and (moves ?INST1 ?INST2) (moves ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7078,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Motion) & s_instance(INST2, s_Object) & s_instance(INST1, s_Motion) & s_instance(INST1, s_Object)) => (s_instance(s_moves_m, s_AntisymmetricRelation) => ((s_moves(INST1, INST2) & s_moves(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 StateOrProvince)
       (instance ?INST1 PostalPlace) (instance ?INST1 StateOrProvince))
  (=> (instance postDistrict AntisymmetricRelation)
   (=> (and (postDistrict ?INST1 ?INST2) (postDistrict ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7079,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_StateOrProvince) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_StateOrProvince)) => (s_instance(s_postDistrict_m, s_AntisymmetricRelation) => ((s_postDistrict(INST1, INST2) & s_postDistrict(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Physical) (instance ?INST2 TimePosition)
       (instance ?INST1 Physical) (instance ?INST1 TimePosition))
  (=> (instance time AntisymmetricRelation)
   (=> (and (time ?INST1 ?INST2) (time ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7080,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_TimePosition) & s_instance(INST1, s_Physical) & s_instance(INST1, s_TimePosition)) => (s_instance(s_time_m, s_AntisymmetricRelation) => ((s_time(INST1, INST2) & s_time(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Object) (instance ?INST2 StructureAttribute)
       (instance ?INST1 Object) (instance ?INST1 StructureAttribute))
  (=> (instance structure AntisymmetricRelation)
   (=> (and (structure ?INST1 ?INST2) (structure ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7081,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_StructureAttribute) & s_instance(INST1, s_Object) & s_instance(INST1, s_StructureAttribute)) => (s_instance(s_structure_m, s_AntisymmetricRelation) => ((s_structure(INST1, INST2) & s_structure(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 AchievingControl) (instance ?INST2 Object)
       (instance ?INST1 AchievingControl) (instance ?INST1 Object))
  (=> (instance controlled AntisymmetricRelation)
   (=> (and (controlled ?INST1 ?INST2) (controlled ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7082,axiom,! [INST1,INST2] : (((s_instance(INST2, s_AchievingControl) & s_instance(INST2, s_Object) & s_instance(INST1, s_AchievingControl) & s_instance(INST1, s_Object)) => (s_instance(s_controlled_m, s_AntisymmetricRelation) => ((s_controlled(INST1, INST2) & s_controlled(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ServiceProcess)
       (instance ?INST2 CognitiveAgent)
       (instance ?INST1 ServiceProcess)
       (instance ?INST1 CognitiveAgent))
  (=> (instance serviceProvider AntisymmetricRelation)
   (=>
    (and (serviceProvider ?INST1 ?INST2)
         (serviceProvider ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7083,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ServiceProcess) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_ServiceProcess) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(s_serviceProvider_m, s_AntisymmetricRelation) => ((s_serviceProvider(INST1, INST2) & s_serviceProvider(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ContactSite) (instance ?INST2 Agent)
       (instance ?INST1 ContactSite) (instance ?INST1 Agent))
  (=> (instance siteForContact AntisymmetricRelation)
   (=>
    (and (siteForContact ?INST1 ?INST2) (siteForContact ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7084,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ContactSite) & s_instance(INST2, s_Agent) & s_instance(INST1, s_ContactSite) & s_instance(INST1, s_Agent)) => (s_instance(s_siteForContact_m, s_AntisymmetricRelation) => ((s_siteForContact(INST1, INST2) & s_siteForContact(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
       (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
  (=> (instance equivalenceRelationOn AntisymmetricRelation)
   (=>
    (and (equivalenceRelationOn ?INST1 ?INST2)
         (equivalenceRelationOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7085,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_equivalenceRelationOn_m, s_AntisymmetricRelation) => ((s_equivalenceRelationOn(INST1, INST2) & s_equivalenceRelationOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Agent)
       (instance ?INST1 Process) (instance ?INST1 Agent))
  (=> (instance agent AntisymmetricRelation)
   (=> (and (agent ?INST1 ?INST2) (agent ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7086,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(s_agent_m, s_AntisymmetricRelation) => ((s_agent(INST1, INST2) & s_agent(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 List) (instance ?INST1 List))
  (=> (instance initialList AntisymmetricRelation)
   (=> (and (initialList ?INST1 ?INST2) (initialList ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7087,axiom,! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_initialList_m, s_AntisymmetricRelation) => ((s_initialList(INST1, INST2) & s_initialList(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST2 Human)
       (instance ?INST1 TelecomNumber) (instance ?INST1 Human))
  (=> (instance personalPhoneNumber AntisymmetricRelation)
   (=>
    (and (personalPhoneNumber ?INST1 ?INST2)
         (personalPhoneNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7088,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Human) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Human)) => (s_instance(s_personalPhoneNumber_m, s_AntisymmetricRelation) => ((s_personalPhoneNumber(INST1, INST2) & s_personalPhoneNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Woman) (instance ?INST2 Man)
       (instance ?INST1 Woman) (instance ?INST1 Man))
  (=> (instance wife AntisymmetricRelation)
   (=> (and (wife ?INST1 ?INST2) (wife ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7089,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Woman) & s_instance(INST2, s_Man) & s_instance(INST1, s_Woman) & s_instance(INST1, s_Man)) => (s_instance(s_wife_m, s_AntisymmetricRelation) => ((s_wife(INST1, INST2) & s_wife(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString) (instance ?INST2 Human)
       (instance ?INST1 SymbolicString) (instance ?INST1 Human))
  (=> (instance middleName AntisymmetricRelation)
   (=> (and (middleName ?INST1 ?INST2) (middleName ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7090,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Human) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Human)) => (s_instance(s_middleName_m, s_AntisymmetricRelation) => ((s_middleName(INST1, INST2) & s_middleName(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString) (instance ?INST2 PostalPlace)
       (instance ?INST1 SymbolicString) (instance ?INST1 PostalPlace))
  (=> (instance postStreetNumber AntisymmetricRelation)
   (=>
    (and (postStreetNumber ?INST1 ?INST2)
         (postStreetNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7091,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_PostalPlace)) => (s_instance(s_postStreetNumber_m, s_AntisymmetricRelation) => ((s_postStreetNumber(INST1, INST2) & s_postStreetNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 FinancialTransaction)
       (instance ?INST2 CurrencyMeasure)
       (instance ?INST1 FinancialTransaction)
       (instance ?INST1 CurrencyMeasure))
  (=> (instance loss AntisymmetricRelation)
   (=> (and (loss ?INST1 ?INST2) (loss ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7092,axiom,! [INST1,INST2] : (((s_instance(INST2, s_FinancialTransaction) & s_instance(INST2, s_CurrencyMeasure) & s_instance(INST1, s_FinancialTransaction) & s_instance(INST1, s_CurrencyMeasure)) => (s_instance(s_loss_m, s_AntisymmetricRelation) => ((s_loss(INST1, INST2) & s_loss(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Motion) (instance ?INST2 Object)
       (instance ?INST1 Motion) (instance ?INST1 Object))
  (=> (instance path AntisymmetricRelation)
   (=> (and (path ?INST1 ?INST2) (path ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7093,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Motion) & s_instance(INST2, s_Object) & s_instance(INST1, s_Motion) & s_instance(INST1, s_Object)) => (s_instance(s_path_m, s_AntisymmetricRelation) => ((s_path(INST1, INST2) & s_path(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PlacingUnderArrest) (instance ?INST2 Agent)
       (instance ?INST1 PlacingUnderArrest) (instance ?INST1 Agent))
  (=> (instance arrested AntisymmetricRelation)
   (=> (and (arrested ?INST1 ?INST2) (arrested ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7094,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PlacingUnderArrest) & s_instance(INST2, s_Agent) & s_instance(INST1, s_PlacingUnderArrest) & s_instance(INST1, s_Agent)) => (s_instance(s_arrested_m, s_AntisymmetricRelation) => ((s_arrested(INST1, INST2) & s_arrested(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SymbolicString) (instance ?INST2 Human)
       (instance ?INST1 SymbolicString) (instance ?INST1 Human))
  (=> (instance givenName AntisymmetricRelation)
   (=> (and (givenName ?INST1 ?INST2) (givenName ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7095,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Human) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Human)) => (s_instance(s_givenName_m, s_AntisymmetricRelation) => ((s_givenName(INST1, INST2) & s_givenName(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance eventPartlyLocated AntisymmetricRelation)
   (=>
    (and (eventPartlyLocated ?INST1 ?INST2)
         (eventPartlyLocated ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7096,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_eventPartlyLocated_m, s_AntisymmetricRelation) => ((s_eventPartlyLocated(INST1, INST2) & s_eventPartlyLocated(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
       (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
  (=> (instance believes AntisymmetricRelation)
   (=> (and (believes ?INST1 ?INST2) (believes ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7097,axiom,! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(s_believes_m, s_AntisymmetricRelation) => ((s_believes(INST1, INST2) & s_believes(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Process) (instance ?INST2 Object)
       (instance ?INST1 Process) (instance ?INST1 Object))
  (=> (instance resourceExhausted AntisymmetricRelation)
   (=>
    (and (resourceExhausted ?INST1 ?INST2)
         (resourceExhausted ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7098,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(s_resourceExhausted_m, s_AntisymmetricRelation) => ((s_resourceExhausted(INST1, INST2) & s_resourceExhausted(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
       (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
  (=> (instance totalOrderingOn AntisymmetricRelation)
   (=>
    (and (totalOrderingOn ?INST1 ?INST2)
         (totalOrderingOn ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7099,axiom,! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_totalOrderingOn_m, s_AntisymmetricRelation) => ((s_totalOrderingOn(INST1, INST2) & s_totalOrderingOn(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Attribute) (instance ?INST1 Attribute))
  (=> (instance subAttribute AntisymmetricRelation)
   (=> (and (subAttribute ?INST1 ?INST2) (subAttribute ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7100,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(s_subAttribute_m, s_AntisymmetricRelation) => ((s_subAttribute(INST1, INST2) & s_subAttribute(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 SelfConnectedObject)
       (instance ?INST1 SelfConnectedObject))
  (=> (instance surface AntisymmetricRelation)
   (=> (and (surface ?INST1 ?INST2) (surface ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7101,axiom,! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(s_surface_m, s_AntisymmetricRelation) => ((s_surface(INST1, INST2) & s_surface(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 City)
       (instance ?INST1 PostalPlace) (instance ?INST1 City))
  (=> (instance postCity AntisymmetricRelation)
   (=> (and (postCity ?INST1 ?INST2) (postCity ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7102,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_City) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_City)) => (s_instance(s_postCity_m, s_AntisymmetricRelation) => ((s_postCity(INST1, INST2) & s_postCity(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
       (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
  (=> (instance telephoneNumber AntisymmetricRelation)
   (=>
    (and (telephoneNumber ?INST1 ?INST2)
         (telephoneNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7103,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(s_telephoneNumber_m, s_AntisymmetricRelation) => ((s_telephoneNumber(INST1, INST2) & s_telephoneNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 Hole) (instance ?INST2 SelfConnectedObject)
       (instance ?INST1 Hole) (instance ?INST1 SelfConnectedObject))
  (=> (instance hole AntisymmetricRelation)
   (=> (and (hole ?INST1 ?INST2) (hole ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7104,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Hole) & s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_Hole) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(s_hole_m, s_AntisymmetricRelation) => ((s_hole(INST1, INST2) & s_hole(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 AchievingControl) (instance ?INST2 Agent)
       (instance ?INST1 AchievingControl) (instance ?INST1 Agent))
  (=> (instance gainsControl AntisymmetricRelation)
   (=> (and (gainsControl ?INST1 ?INST2) (gainsControl ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7105,axiom,! [INST1,INST2] : (((s_instance(INST2, s_AchievingControl) & s_instance(INST2, s_Agent) & s_instance(INST1, s_AchievingControl) & s_instance(INST1, s_Agent)) => (s_instance(s_gainsControl_m, s_AntisymmetricRelation) => ((s_gainsControl(INST1, INST2) & s_gainsControl(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TimeInterval) (instance ?INST1 TimeInterval))
  (=> (instance meetsTemporally AntisymmetricRelation)
   (=>
    (and (meetsTemporally ?INST1 ?INST2)
         (meetsTemporally ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7106,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_meetsTemporally_m, s_AntisymmetricRelation) => ((s_meetsTemporally(INST1, INST2) & s_meetsTemporally(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST1 TelecomNumber))
  (=> (instance telecomCoreNumber AntisymmetricRelation)
   (=>
    (and (telecomCoreNumber ?INST1 ?INST2)
         (telecomCoreNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7107,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(s_telecomCoreNumber_m, s_AntisymmetricRelation) => ((s_telecomCoreNumber(INST1, INST2) & s_telecomCoreNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 PostalPlace) (instance ?INST2 Neighborhood)
       (instance ?INST1 PostalPlace) (instance ?INST1 Neighborhood))
  (=> (instance postNeighborhood AntisymmetricRelation)
   (=>
    (and (postNeighborhood ?INST1 ?INST2)
         (postNeighborhood ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7108,axiom,! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_Neighborhood) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_Neighborhood)) => (s_instance(s_postNeighborhood_m, s_AntisymmetricRelation) => ((s_postNeighborhood(INST1, INST2) & s_postNeighborhood(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Set) (instance ?INST1 Set))
  (=> (instance element AntisymmetricRelation)
   (=> (and (element ?INST1 ?INST2) (element ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7109,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Set) & s_instance(INST1, s_Set)) => (s_instance(s_element_m, s_AntisymmetricRelation) => ((s_element(INST1, INST2) & s_element(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
  (=> (instance interiorPart AntisymmetricRelation)
   (=> (and (interiorPart ?INST1 ?INST2) (interiorPart ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7110,axiom,! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_interiorPart_m, s_AntisymmetricRelation) => ((s_interiorPart(INST1, INST2) & s_interiorPart(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 GraphElement) (instance ?INST2 Graph)
       (instance ?INST1 GraphElement) (instance ?INST1 Graph))
  (=> (instance graphPart AntisymmetricRelation)
   (=> (and (graphPart ?INST1 ?INST2) (graphPart ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7111,axiom,! [INST1,INST2] : (((s_instance(INST2, s_GraphElement) & s_instance(INST2, s_Graph) & s_instance(INST1, s_GraphElement) & s_instance(INST1, s_Graph)) => (s_instance(s_graphPart_m, s_AntisymmetricRelation) => ((s_graphPart(INST1, INST2) & s_graphPart(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
       (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
  (=> (instance faxNumber AntisymmetricRelation)
   (=> (and (faxNumber ?INST1 ?INST2) (faxNumber ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7112,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(s_faxNumber_m, s_AntisymmetricRelation) => ((s_faxNumber(INST1, INST2) & s_faxNumber(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 ContentBearingObject) (instance ?INST2 Agent)
       (instance ?INST1 ContentBearingObject) (instance ?INST1 Agent))
  (=> (instance deceptiveIdentifier AntisymmetricRelation)
   (=>
    (and (deceptiveIdentifier ?INST1 ?INST2)
         (deceptiveIdentifier ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7113,axiom,! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingObject) & s_instance(INST2, s_Agent) & s_instance(INST1, s_ContentBearingObject) & s_instance(INST1, s_Agent)) => (s_instance(s_deceptiveIdentifier_m, s_AntisymmetricRelation) => ((s_deceptiveIdentifier(INST1, INST2) & s_deceptiveIdentifier(INST2, INST1)) => (INST1 = INST2)))))).

/*
(forall (?INST1 ?INST2)
 (=>
  (and (instance ?INST2 TelephonyDevice) (instance ?INST2 Agent)
       (instance ?INST1 TelephonyDevice) (instance ?INST1 Agent))
  (=> (instance telecomContactDevice AntisymmetricRelation)
   (=>
    (and (telecomContactDevice ?INST1 ?INST2)
         (telecomContactDevice ?INST2 ?INST1))
    (equal ?INST1 ?INST2)))))
*/
fof(a7114,axiom,! [INST1,INST2] : (((s_instance(INST2, s_TelephonyDevice) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelephonyDevice) & s_instance(INST1, s_Agent)) => (s_instance(s_telecomContactDevice_m, s_AntisymmetricRelation) => ((s_telecomContactDevice(INST1, INST2) & s_telecomContactDevice(INST2, INST1)) => (INST1 = INST2)))))).

/*
(subclass TrichotomizingRelation BinaryRelation)
*/
fof(a7115,axiom,s_subclass(s_TrichotomizingRelation, s_BinaryRelation)).

/*
(subclass TransitiveRelation BinaryRelation)
*/
fof(a7116,axiom,s_subclass(s_TransitiveRelation, s_BinaryRelation)).

/*
(disjoint TransitiveRelation IntransitiveRelation)
*/
fof(a7117,axiom,s_disjoint(s_TransitiveRelation, s_IntransitiveRelation)).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimePoint) (instance ?INST2 TimePoint)
       (instance ?INST1 TimePoint))
  (=> (instance before TransitiveRelation)
   (=> (and (before ?INST1 ?INST2) (before ?INST2 ?INST3))
    (before ?INST1 ?INST3)))))
*/
fof(a7118,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimePoint) & s_instance(INST2, s_TimePoint) & s_instance(INST1, s_TimePoint)) => (s_instance(s_before_m, s_TransitiveRelation) => ((s_before(INST1, INST2) & s_before(INST2, INST3)) => s_before(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 List) (instance ?INST2 List)
       (instance ?INST1 List))
  (=> (instance identicalListItems TransitiveRelation)
   (=>
    (and (identicalListItems ?INST1 ?INST2)
         (identicalListItems ?INST2 ?INST3))
    (identicalListItems ?INST1 ?INST3)))))
*/
fof(a7119,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_List) & s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_identicalListItems_m, s_TransitiveRelation) => ((s_identicalListItems(INST1, INST2) & s_identicalListItems(INST2, INST3)) => s_identicalListItems(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (subclass ?INST3 Artifact) (subclass ?INST2 Artifact)
       (subclass ?INST1 Artifact))
  (=> (instance version TransitiveRelation)
   (=> (and (version ?INST1 ?INST2) (version ?INST2 ?INST3))
    (version ?INST1 ?INST3)))))
*/
fof(a7120,axiom,! [INST1,INST2,INST3] : (((s_subclass(INST3, s_Artifact) & s_subclass(INST2, s_Artifact) & s_subclass(INST1, s_Artifact)) => (s_instance(s_version_m, s_TransitiveRelation) => ((s_version(INST1, INST2) & s_version(INST2, INST3)) => s_version(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 ContentBearingPhysical)
       (instance ?INST2 ContentBearingPhysical)
       (instance ?INST1 ContentBearingPhysical))
  (=> (instance equivalentContentInstance TransitiveRelation)
   (=>
    (and (equivalentContentInstance ?INST1 ?INST2)
         (equivalentContentInstance ?INST2 ?INST3))
    (equivalentContentInstance ?INST1 ?INST3)))))
*/
fof(a7121,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_ContentBearingPhysical) & s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST1, s_ContentBearingPhysical)) => (s_instance(s_equivalentContentInstance_m, s_TransitiveRelation) => ((s_equivalentContentInstance(INST1, INST2) & s_equivalentContentInstance(INST2, INST3)) => s_equivalentContentInstance(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 List) (instance ?INST2 List)
       (instance ?INST1 List))
  (=> (instance subList TransitiveRelation)
   (=> (and (subList ?INST1 ?INST2) (subList ?INST2 ?INST3))
    (subList ?INST1 ?INST3)))))
*/
fof(a7122,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_List) & s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_subList_m, s_TransitiveRelation) => ((s_subList(INST1, INST2) & s_subList(INST2, INST3)) => s_subList(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 GeographicArea)
       (instance ?INST2 GeographicArea)
       (instance ?INST1 GeographicArea))
  (=> (instance geographicSubregion TransitiveRelation)
   (=>
    (and (geographicSubregion ?INST1 ?INST2)
         (geographicSubregion ?INST2 ?INST3))
    (geographicSubregion ?INST1 ?INST3)))))
*/
fof(a7123,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_GeographicArea) & s_instance(INST2, s_GeographicArea) & s_instance(INST1, s_GeographicArea)) => (s_instance(s_geographicSubregion_m, s_TransitiveRelation) => ((s_geographicSubregion(INST1, INST2) & s_geographicSubregion(INST2, INST3)) => s_geographicSubregion(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 SetOrClass) (instance ?INST2 SetOrClass)
       (instance ?INST1 SetOrClass))
  (=> (instance subclass TransitiveRelation)
   (=> (and (subclass ?INST1 ?INST2) (subclass ?INST2 ?INST3))
    (subclass ?INST1 ?INST3)))))
*/
fof(a7124,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_SetOrClass) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_subclass_m, s_TransitiveRelation) => ((s_subclass(INST1, INST2) & s_subclass(INST2, INST3)) => s_subclass(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance crosses TransitiveRelation)
   (=> (and (crosses ?INST1 ?INST2) (crosses ?INST2 ?INST3))
    (crosses ?INST1 ?INST3)))))
*/
fof(a7125,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_crosses_m, s_TransitiveRelation) => ((s_crosses(INST1, INST2) & s_crosses(INST2, INST3)) => s_crosses(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimeInterval) (instance ?INST2 TimeInterval)
       (instance ?INST1 TimeInterval))
  (=> (instance earlier TransitiveRelation)
   (=> (and (earlier ?INST1 ?INST2) (earlier ?INST2 ?INST3))
    (earlier ?INST1 ?INST3)))))
*/
fof(a7126,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimeInterval) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_earlier_m, s_TransitiveRelation) => ((s_earlier(INST1, INST2) & s_earlier(INST2, INST3)) => s_earlier(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Organization) (instance ?INST2 Organization)
       (instance ?INST1 Organization))
  (=> (instance subOrganization TransitiveRelation)
   (=>
    (and (subOrganization ?INST1 ?INST2)
         (subOrganization ?INST2 ?INST3))
    (subOrganization ?INST1 ?INST3)))))
*/
fof(a7127,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Organization) & s_instance(INST2, s_Organization) & s_instance(INST1, s_Organization)) => (s_instance(s_subOrganization_m, s_TransitiveRelation) => ((s_subOrganization(INST1, INST2) & s_subOrganization(INST2, INST3)) => s_subOrganization(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Quantity) (instance ?INST2 Quantity)
       (instance ?INST1 Quantity))
  (=> (instance lessThanOrEqualTo TransitiveRelation)
   (=>
    (and (lessThanOrEqualTo ?INST1 ?INST2)
         (lessThanOrEqualTo ?INST2 ?INST3))
    (lessThanOrEqualTo ?INST1 ?INST3)))))
*/
fof(a7128,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Quantity) & s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(s_lessThanOrEqualTo_m, s_TransitiveRelation) => ((lesseq(INST1, INST2) & lesseq(INST2, INST3)) => lesseq(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance superficialPart TransitiveRelation)
   (=>
    (and (superficialPart ?INST1 ?INST2)
         (superficialPart ?INST2 ?INST3))
    (superficialPart ?INST1 ?INST3)))))
*/
fof(a7129,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_superficialPart_m, s_TransitiveRelation) => ((s_superficialPart(INST1, INST2) & s_superficialPart(INST2, INST3)) => s_superficialPart(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 DevelopmentalAttribute)
       (instance ?INST1 OrganicObject)
       (instance ?INST2 DevelopmentalAttribute)
       (instance ?INST2 OrganicObject))
  (=> (instance developmentalForm TransitiveRelation)
   (=>
    (and (developmentalForm ?INST1 ?INST2)
         (developmentalForm ?INST2 ?INST3))
    (developmentalForm ?INST1 ?INST3)))))
*/
fof(a7130,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_DevelopmentalAttribute) & s_instance(INST1, s_OrganicObject) & s_instance(INST2, s_DevelopmentalAttribute) & s_instance(INST2, s_OrganicObject)) => (s_instance(s_developmentalForm_m, s_TransitiveRelation) => ((s_developmentalForm(INST1, INST2) & s_developmentalForm(INST2, INST3)) => s_developmentalForm(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 GeopoliticalArea)
       (instance ?INST2 GeopoliticalArea)
       (instance ?INST1 GeopoliticalArea))
  (=> (instance geopoliticalSubdivision TransitiveRelation)
   (=>
    (and (geopoliticalSubdivision ?INST1 ?INST2)
         (geopoliticalSubdivision ?INST2 ?INST3))
    (geopoliticalSubdivision ?INST1 ?INST3)))))
*/
fof(a7131,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_GeopoliticalArea) & s_instance(INST2, s_GeopoliticalArea) & s_instance(INST1, s_GeopoliticalArea)) => (s_instance(s_geopoliticalSubdivision_m, s_TransitiveRelation) => ((s_geopoliticalSubdivision(INST1, INST2) & s_geopoliticalSubdivision(INST2, INST3)) => s_geopoliticalSubdivision(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Physical))
  (=> (instance located TransitiveRelation)
   (=> (and (located ?INST1 ?INST2) (located ?INST2 ?INST3))
    (located ?INST1 ?INST3)))))
*/
fof(a7132,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Physical)) => (s_instance(s_located_m, s_TransitiveRelation) => ((s_located(INST1, INST2) & s_located(INST2, INST3)) => s_located(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Plan) (instance ?INST2 Plan)
       (instance ?INST1 Plan))
  (=> (instance subPlan TransitiveRelation)
   (=> (and (subPlan ?INST1 ?INST2) (subPlan ?INST2 ?INST3))
    (subPlan ?INST1 ?INST3)))))
*/
fof(a7133,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Plan) & s_instance(INST2, s_Plan) & s_instance(INST1, s_Plan)) => (s_instance(s_subPlan_m, s_TransitiveRelation) => ((s_subPlan(INST1, INST2) & s_subPlan(INST2, INST3)) => s_subPlan(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Relation) (instance ?INST2 Relation)
       (instance ?INST1 Relation))
  (=> (instance subrelation TransitiveRelation)
   (=> (and (subrelation ?INST1 ?INST2) (subrelation ?INST2 ?INST3))
    (subrelation ?INST1 ?INST3)))))
*/
fof(a7134,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Relation) & s_instance(INST2, s_Relation) & s_instance(INST1, s_Relation)) => (s_instance(s_subrelation_m, s_TransitiveRelation) => ((s_subrelation(INST1, INST2) & s_subrelation(INST2, INST3)) => s_subrelation(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Quantity) (instance ?INST2 Quantity)
       (instance ?INST1 Quantity))
  (=> (instance lessThan TransitiveRelation)
   (=> (and (lessThan ?INST1 ?INST2) (lessThan ?INST2 ?INST3))
    (lessThan ?INST1 ?INST3)))))
*/
fof(a7135,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Quantity) & s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(s_lessThan_m, s_TransitiveRelation) => ((less(INST1, INST2) & less(INST2, INST3)) => less(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance part TransitiveRelation)
   (=> (and (part ?INST1 ?INST2) (part ?INST2 ?INST3))
    (part ?INST1 ?INST3)))))
*/
fof(a7136,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_part_m, s_TransitiveRelation) => ((s_part(INST1, INST2) & s_part(INST2, INST3)) => s_part(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 FieldOfStudy) (instance ?INST2 FieldOfStudy)
       (instance ?INST1 FieldOfStudy))
  (=> (instance subField TransitiveRelation)
   (=> (and (subField ?INST1 ?INST2) (subField ?INST2 ?INST3))
    (subField ?INST1 ?INST3)))))
*/
fof(a7137,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_FieldOfStudy) & s_instance(INST2, s_FieldOfStudy) & s_instance(INST1, s_FieldOfStudy)) => (s_instance(s_subField_m, s_TransitiveRelation) => ((s_subField(INST1, INST2) & s_subField(INST2, INST3)) => s_subField(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimeInterval) (instance ?INST2 TimeInterval)
       (instance ?INST1 TimeInterval))
  (=> (instance starts TransitiveRelation)
   (=> (and (starts ?INST1 ?INST2) (starts ?INST2 ?INST3))
    (starts ?INST1 ?INST3)))))
*/
fof(a7138,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimeInterval) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_starts_m, s_TransitiveRelation) => ((s_starts(INST1, INST2) & s_starts(INST2, INST3)) => s_starts(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 CompoundSubstance)
       (instance ?INST2 CompoundSubstance)
       (instance ?INST1 CompoundSubstance))
  (=> (instance conjugate TransitiveRelation)
   (=> (and (conjugate ?INST1 ?INST2) (conjugate ?INST2 ?INST3))
    (conjugate ?INST1 ?INST3)))))
*/
fof(a7139,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_CompoundSubstance) & s_instance(INST2, s_CompoundSubstance) & s_instance(INST1, s_CompoundSubstance)) => (s_instance(s_conjugate_m, s_TransitiveRelation) => ((s_conjugate(INST1, INST2) & s_conjugate(INST2, INST3)) => s_conjugate(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 DataStorageDevice)
       (instance ?INST1 ContentBearingObject)
       (instance ?INST2 DataStorageDevice)
       (instance ?INST2 ContentBearingObject))
  (=> (instance stored TransitiveRelation)
   (=> (and (stored ?INST1 ?INST2) (stored ?INST2 ?INST3))
    (stored ?INST1 ?INST3)))))
*/
fof(a7140,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_DataStorageDevice) & s_instance(INST1, s_ContentBearingObject) & s_instance(INST2, s_DataStorageDevice) & s_instance(INST2, s_ContentBearingObject)) => (s_instance(s_stored_m, s_TransitiveRelation) => ((s_stored(INST1, INST2) & s_stored(INST2, INST3)) => s_stored(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 ContentBearingPhysical)
       (instance ?INST2 ContentBearingPhysical)
       (instance ?INST1 ContentBearingPhysical))
  (=> (instance subsumesContentInstance TransitiveRelation)
   (=>
    (and (subsumesContentInstance ?INST1 ?INST2)
         (subsumesContentInstance ?INST2 ?INST3))
    (subsumesContentInstance ?INST1 ?INST3)))))
*/
fof(a7141,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_ContentBearingPhysical) & s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST1, s_ContentBearingPhysical)) => (s_instance(s_subsumesContentInstance_m, s_TransitiveRelation) => ((s_subsumesContentInstance(INST1, INST2) & s_subsumesContentInstance(INST2, INST3)) => s_subsumesContentInstance(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Quantity) (instance ?INST2 Quantity)
       (instance ?INST1 Quantity))
  (=> (instance greaterThanOrEqualTo TransitiveRelation)
   (=>
    (and (greaterThanOrEqualTo ?INST1 ?INST2)
         (greaterThanOrEqualTo ?INST2 ?INST3))
    (greaterThanOrEqualTo ?INST1 ?INST3)))))
*/
fof(a7142,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Quantity) & s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(s_greaterThanOrEqualTo_m, s_TransitiveRelation) => ((s_greaterThanOrEqualTo(INST1, INST2) & s_greaterThanOrEqualTo(INST2, INST3)) => s_greaterThanOrEqualTo(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Quantity) (instance ?INST2 Quantity)
       (instance ?INST1 Quantity))
  (=> (instance greaterThan TransitiveRelation)
   (=> (and (greaterThan ?INST1 ?INST2) (greaterThan ?INST2 ?INST3))
    (greaterThan ?INST1 ?INST3)))))
*/
fof(a7143,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Quantity) & s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(s_greaterThan_m, s_TransitiveRelation) => ((greater(INST1, INST2) & greater(INST2, INST3)) => greater(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Graph) (instance ?INST2 Graph)
       (instance ?INST1 Graph))
  (=> (instance subGraph TransitiveRelation)
   (=> (and (subGraph ?INST1 ?INST2) (subGraph ?INST2 ?INST3))
    (subGraph ?INST1 ?INST3)))))
*/
fof(a7144,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Graph) & s_instance(INST2, s_Graph) & s_instance(INST1, s_Graph)) => (s_instance(s_subGraph_m, s_TransitiveRelation) => ((s_subGraph(INST1, INST2) & s_subGraph(INST2, INST3)) => s_subGraph(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Human) (instance ?INST2 Woman)
       (instance ?INST1 Woman))
  (=> (instance sister TransitiveRelation)
   (=> (and (sister ?INST1 ?INST2) (sister ?INST2 ?INST3))
    (sister ?INST1 ?INST3)))))
*/
fof(a7145,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Human) & s_instance(INST2, s_Woman) & s_instance(INST1, s_Woman)) => (s_instance(s_sister_m, s_TransitiveRelation) => ((s_sister(INST1, INST2) & s_sister(INST2, INST3)) => s_sister(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Integer) (instance ?INST2 Integer)
       (instance ?INST1 Integer))
  (=> (instance multiplicativeFactor TransitiveRelation)
   (=>
    (and (multiplicativeFactor ?INST1 ?INST2)
         (multiplicativeFactor ?INST2 ?INST3))
    (multiplicativeFactor ?INST1 ?INST3)))))
*/
fof(a7146,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Integer) & s_instance(INST2, s_Integer) & s_instance(INST1, s_Integer)) => (s_instance(s_multiplicativeFactor_m, s_TransitiveRelation) => ((s_multiplicativeFactor(INST1, INST2) & s_multiplicativeFactor(INST2, INST3)) => s_multiplicativeFactor(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance covers TransitiveRelation)
   (=> (and (covers ?INST1 ?INST2) (covers ?INST2 ?INST3))
    (covers ?INST1 ?INST3)))))
*/
fof(a7147,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_covers_m, s_TransitiveRelation) => ((s_covers(INST1, INST2) & s_covers(INST2, INST3)) => s_covers(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Human) (instance ?INST2 Man)
       (instance ?INST1 Man))
  (=> (instance brother TransitiveRelation)
   (=> (and (brother ?INST1 ?INST2) (brother ?INST2 ?INST3))
    (brother ?INST1 ?INST3)))))
*/
fof(a7148,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Human) & s_instance(INST2, s_Man) & s_instance(INST1, s_Man)) => (s_instance(s_brother_m, s_TransitiveRelation) => ((s_brother(INST1, INST2) & s_brother(INST2, INST3)) => s_brother(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Attribute) (instance ?INST2 Attribute)
       (instance ?INST1 Attribute))
  (=> (instance successorAttributeClosure TransitiveRelation)
   (=>
    (and (successorAttributeClosure ?INST1 ?INST2)
         (successorAttributeClosure ?INST2 ?INST3))
    (successorAttributeClosure ?INST1 ?INST3)))))
*/
fof(a7149,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Attribute) & s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(s_successorAttributeClosure_m, s_TransitiveRelation) => ((s_successorAttributeClosure(INST1, INST2) & s_successorAttributeClosure(INST2, INST3)) => s_successorAttributeClosure(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Proposition) (instance ?INST2 Proposition)
       (instance ?INST1 Proposition))
  (=> (instance subProposition TransitiveRelation)
   (=>
    (and (subProposition ?INST1 ?INST2) (subProposition ?INST2 ?INST3))
    (subProposition ?INST1 ?INST3)))))
*/
fof(a7150,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Proposition) & s_instance(INST2, s_Proposition) & s_instance(INST1, s_Proposition)) => (s_instance(s_subProposition_m, s_TransitiveRelation) => ((s_subProposition(INST1, INST2) & s_subProposition(INST2, INST3)) => s_subProposition(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Process) (instance ?INST2 Process)
       (instance ?INST1 Process))
  (=> (instance subProcess TransitiveRelation)
   (=> (and (subProcess ?INST1 ?INST2) (subProcess ?INST2 ?INST3))
    (subProcess ?INST1 ?INST3)))))
*/
fof(a7151,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Process) & s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(s_subProcess_m, s_TransitiveRelation) => ((s_subProcess(INST1, INST2) & s_subProcess(INST2, INST3)) => s_subProcess(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance copy TransitiveRelation)
   (=> (and (copy ?INST1 ?INST2) (copy ?INST2 ?INST3))
    (copy ?INST1 ?INST3)))))
*/
fof(a7152,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_copy_m, s_TransitiveRelation) => ((s_copy(INST1, INST2) & s_copy(INST2, INST3)) => s_copy(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (subclass ?INST3 ContentBearingPhysical)
       (subclass ?INST2 ContentBearingPhysical)
       (subclass ?INST1 ContentBearingPhysical))
  (=> (instance equivalentContentClass TransitiveRelation)
   (=>
    (and (equivalentContentClass ?INST1 ?INST2)
         (equivalentContentClass ?INST2 ?INST3))
    (equivalentContentClass ?INST1 ?INST3)))))
*/
fof(a7153,axiom,! [INST1,INST2,INST3] : (((s_subclass(INST3, s_ContentBearingPhysical) & s_subclass(INST2, s_ContentBearingPhysical) & s_subclass(INST1, s_ContentBearingPhysical)) => (s_instance(s_equivalentContentClass_m, s_TransitiveRelation) => ((s_equivalentContentClass(INST1, INST2) & s_equivalentContentClass(INST2, INST3)) => s_equivalentContentClass(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (subclass ?INST3 ContentBearingPhysical)
       (subclass ?INST2 ContentBearingPhysical)
       (subclass ?INST1 ContentBearingPhysical))
  (=> (instance subsumesContentClass TransitiveRelation)
   (=>
    (and (subsumesContentClass ?INST1 ?INST2)
         (subsumesContentClass ?INST2 ?INST3))
    (subsumesContentClass ?INST1 ?INST3)))))
*/
fof(a7154,axiom,! [INST1,INST2,INST3] : (((s_subclass(INST3, s_ContentBearingPhysical) & s_subclass(INST2, s_ContentBearingPhysical) & s_subclass(INST1, s_ContentBearingPhysical)) => (s_instance(s_subsumesContentClass_m, s_TransitiveRelation) => ((s_subsumesContentClass(INST1, INST2) & s_subsumesContentClass(INST2, INST3)) => s_subsumesContentClass(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance larger TransitiveRelation)
   (=> (and (larger ?INST1 ?INST2) (larger ?INST2 ?INST3))
    (larger ?INST1 ?INST3)))))
*/
fof(a7155,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_larger_m, s_TransitiveRelation) => ((s_larger(INST1, INST2) & s_larger(INST2, INST3)) => s_larger(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimePosition) (instance ?INST2 TimePosition)
       (instance ?INST1 TimePosition))
  (=> (instance temporalPart TransitiveRelation)
   (=> (and (temporalPart ?INST1 ?INST2) (temporalPart ?INST2 ?INST3))
    (temporalPart ?INST1 ?INST3)))))
*/
fof(a7156,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimePosition) & s_instance(INST2, s_TimePosition) & s_instance(INST1, s_TimePosition)) => (s_instance(s_temporalPart_m, s_TransitiveRelation) => ((s_temporalPart(INST1, INST2) & s_temporalPart(INST2, INST3)) => s_temporalPart(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Entity) (instance ?INST2 Entity)
       (instance ?INST1 Entity))
  (=> (instance equal TransitiveRelation)
   (=> (and (equal ?INST1 ?INST2) (equal ?INST2 ?INST3))
    (equal ?INST1 ?INST3)))))
*/
fof(a7157,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Entity) & s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(s_equal_m, s_TransitiveRelation) => (((INST1 = INST2) & (INST2 = INST3)) => (INST1 = INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Organization) (instance ?INST2 Organization)
       (instance ?INST1 Organization))
  (=> (instance ancestorOrganization TransitiveRelation)
   (=>
    (and (ancestorOrganization ?INST1 ?INST2)
         (ancestorOrganization ?INST2 ?INST3))
    (ancestorOrganization ?INST1 ?INST3)))))
*/
fof(a7158,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Organization) & s_instance(INST2, s_Organization) & s_instance(INST1, s_Organization)) => (s_instance(s_ancestorOrganization_m, s_TransitiveRelation) => ((s_ancestorOrganization(INST1, INST2) & s_ancestorOrganization(INST2, INST3)) => s_ancestorOrganization(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance properPart TransitiveRelation)
   (=> (and (properPart ?INST1 ?INST2) (properPart ?INST2 ?INST3))
    (properPart ?INST1 ?INST3)))))
*/
fof(a7159,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_properPart_m, s_TransitiveRelation) => ((s_properPart(INST1, INST2) & s_properPart(INST2, INST3)) => s_properPart(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimePoint) (instance ?INST2 TimePoint)
       (instance ?INST1 TimePoint))
  (=> (instance beforeOrEqual TransitiveRelation)
   (=>
    (and (beforeOrEqual ?INST1 ?INST2) (beforeOrEqual ?INST2 ?INST3))
    (beforeOrEqual ?INST1 ?INST3)))))
*/
fof(a7160,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimePoint) & s_instance(INST2, s_TimePoint) & s_instance(INST1, s_TimePoint)) => (s_instance(s_beforeOrEqual_m, s_TransitiveRelation) => ((s_beforeOrEqual(INST1, INST2) & s_beforeOrEqual(INST2, INST3)) => s_beforeOrEqual(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (subclass ?INST3 Process) (subclass ?INST2 Process)
       (subclass ?INST1 Process))
  (=> (instance precondition TransitiveRelation)
   (=> (and (precondition ?INST1 ?INST2) (precondition ?INST2 ?INST3))
    (precondition ?INST1 ?INST3)))))
*/
fof(a7161,axiom,! [INST1,INST2,INST3] : (((s_subclass(INST3, s_Process) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process)) => (s_instance(s_precondition_m, s_TransitiveRelation) => ((s_precondition(INST1, INST2) & s_precondition(INST2, INST3)) => s_precondition(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 GeometricFigure)
       (instance ?INST2 GeometricFigure)
       (instance ?INST1 GeometricFigure))
  (=> (instance geometricPart TransitiveRelation)
   (=>
    (and (geometricPart ?INST1 ?INST2) (geometricPart ?INST2 ?INST3))
    (geometricPart ?INST1 ?INST3)))))
*/
fof(a7162,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_GeometricFigure) & s_instance(INST2, s_GeometricFigure) & s_instance(INST1, s_GeometricFigure)) => (s_instance(s_geometricPart_m, s_TransitiveRelation) => ((s_geometricPart(INST1, INST2) & s_geometricPart(INST2, INST3)) => s_geometricPart(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Collection) (instance ?INST2 Collection)
       (instance ?INST1 Collection))
  (=> (instance subCollection TransitiveRelation)
   (=>
    (and (subCollection ?INST1 ?INST2) (subCollection ?INST2 ?INST3))
    (subCollection ?INST1 ?INST3)))))
*/
fof(a7163,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Collection) & s_instance(INST2, s_Collection) & s_instance(INST1, s_Collection)) => (s_instance(s_subCollection_m, s_TransitiveRelation) => ((s_subCollection(INST1, INST2) & s_subCollection(INST2, INST3)) => s_subCollection(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Abstract) (instance ?INST2 Abstract)
       (instance ?INST1 Abstract))
  (=> (instance abstractPart TransitiveRelation)
   (=> (and (abstractPart ?INST1 ?INST2) (abstractPart ?INST2 ?INST3))
    (abstractPart ?INST1 ?INST3)))))
*/
fof(a7164,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Abstract) & s_instance(INST2, s_Abstract) & s_instance(INST1, s_Abstract)) => (s_instance(s_abstractPart_m, s_TransitiveRelation) => ((s_abstractPart(INST1, INST2) & s_abstractPart(INST2, INST3)) => s_abstractPart(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 List) (instance ?INST2 List)
       (instance ?INST1 List))
  (=> (instance initialList TransitiveRelation)
   (=> (and (initialList ?INST1 ?INST2) (initialList ?INST2 ?INST3))
    (initialList ?INST1 ?INST3)))))
*/
fof(a7165,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_List) & s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(s_initialList_m, s_TransitiveRelation) => ((s_initialList(INST1, INST2) & s_initialList(INST2, INST3)) => s_initialList(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Physical) (instance ?INST2 Physical)
       (instance ?INST1 Physical))
  (=> (instance cooccur TransitiveRelation)
   (=> (and (cooccur ?INST1 ?INST2) (cooccur ?INST2 ?INST3))
    (cooccur ?INST1 ?INST3)))))
*/
fof(a7166,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Physical) & s_instance(INST2, s_Physical) & s_instance(INST1, s_Physical)) => (s_instance(s_cooccur_m, s_TransitiveRelation) => ((s_cooccur(INST1, INST2) & s_cooccur(INST2, INST3)) => s_cooccur(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Organism) (instance ?INST2 Organism)
       (instance ?INST1 Organism))
  (=> (instance ancestor TransitiveRelation)
   (=> (and (ancestor ?INST1 ?INST2) (ancestor ?INST2 ?INST3))
    (ancestor ?INST1 ?INST3)))))
*/
fof(a7167,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Organism) & s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(s_ancestor_m, s_TransitiveRelation) => ((s_ancestor(INST1, INST2) & s_ancestor(INST2, INST3)) => s_ancestor(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Attribute) (instance ?INST2 Attribute)
       (instance ?INST1 Attribute))
  (=> (instance subAttribute TransitiveRelation)
   (=> (and (subAttribute ?INST1 ?INST2) (subAttribute ?INST2 ?INST3))
    (subAttribute ?INST1 ?INST3)))))
*/
fof(a7168,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Attribute) & s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(s_subAttribute_m, s_TransitiveRelation) => ((s_subAttribute(INST1, INST2) & s_subAttribute(INST2, INST3)) => s_subAttribute(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimeInterval) (instance ?INST2 TimeInterval)
       (instance ?INST1 TimeInterval))
  (=> (instance finishes TransitiveRelation)
   (=> (and (finishes ?INST1 ?INST2) (finishes ?INST2 ?INST3))
    (finishes ?INST1 ?INST3)))))
*/
fof(a7169,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimeInterval) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_finishes_m, s_TransitiveRelation) => ((s_finishes(INST1, INST2) & s_finishes(INST2, INST3)) => s_finishes(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimeInterval) (instance ?INST2 TimeInterval)
       (instance ?INST1 TimeInterval))
  (=> (instance during TransitiveRelation)
   (=> (and (during ?INST1 ?INST2) (during ?INST2 ?INST3))
    (during ?INST1 ?INST3)))))
*/
fof(a7170,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimeInterval) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_during_m, s_TransitiveRelation) => ((s_during(INST1, INST2) & s_during(INST2, INST3)) => s_during(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Entity) (instance ?INST2 Entity)
       (instance ?INST1 Entity))
  (=> (instance relatedInternalConcept TransitiveRelation)
   (=>
    (and (relatedInternalConcept ?INST1 ?INST2)
         (relatedInternalConcept ?INST2 ?INST3))
    (relatedInternalConcept ?INST1 ?INST3)))))
*/
fof(a7171,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Entity) & s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(s_relatedInternalConcept_m, s_TransitiveRelation) => ((s_relatedInternalConcept(INST1, INST2) & s_relatedInternalConcept(INST2, INST3)) => s_relatedInternalConcept(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance smaller TransitiveRelation)
   (=> (and (smaller ?INST1 ?INST2) (smaller ?INST2 ?INST3))
    (smaller ?INST1 ?INST3)))))
*/
fof(a7172,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_smaller_m, s_TransitiveRelation) => ((s_smaller(INST1, INST2) & s_smaller(INST2, INST3)) => s_smaller(INST1, INST3)))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance interiorPart TransitiveRelation)
   (=> (and (interiorPart ?INST1 ?INST2) (interiorPart ?INST2 ?INST3))
    (interiorPart ?INST1 ?INST3)))))
*/
fof(a7173,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_interiorPart_m, s_TransitiveRelation) => ((s_interiorPart(INST1, INST2) & s_interiorPart(INST2, INST3)) => s_interiorPart(INST1, INST3)))))).

/*
(subclass IntransitiveRelation BinaryRelation)
*/
fof(a7174,axiom,s_subclass(s_IntransitiveRelation, s_BinaryRelation)).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Collection) (instance ?INST2 Collection)
       (instance ?INST1 Object))
  (=> (instance member IntransitiveRelation)
   (=> (and (member ?INST1 ?INST2) (member ?INST2 ?INST3))
    (not (member ?INST1 ?INST3))))))
*/
fof(a7175,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Collection) & s_instance(INST2, s_Collection) & s_instance(INST1, s_Object)) => (s_instance(s_member_m, s_IntransitiveRelation) => ((s_member(INST1, INST2) & s_member(INST2, INST3)) => (~ s_member(INST1, INST3))))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Object) (instance ?INST2 Object)
       (instance ?INST1 Object))
  (=> (instance penetrates IntransitiveRelation)
   (=> (and (penetrates ?INST1 ?INST2) (penetrates ?INST2 ?INST3))
    (not (penetrates ?INST1 ?INST3))))))
*/
fof(a7176,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Object) & s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(s_penetrates_m, s_IntransitiveRelation) => ((s_penetrates(INST1, INST2) & s_penetrates(INST2, INST3)) => (~ s_penetrates(INST1, INST3))))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 SetOrClass) (instance ?INST2 SetOrClass)
       (instance ?INST1 SetOrClass))
  (=> (instance immediateSubclass IntransitiveRelation)
   (=>
    (and (immediateSubclass ?INST1 ?INST2)
         (immediateSubclass ?INST2 ?INST3))
    (not (immediateSubclass ?INST1 ?INST3))))))
*/
fof(a7177,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_SetOrClass) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(s_immediateSubclass_m, s_IntransitiveRelation) => ((s_immediateSubclass(INST1, INST2) & s_immediateSubclass(INST2, INST3)) => (~ s_immediateSubclass(INST1, INST3))))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 Organism) (instance ?INST2 Organism)
       (instance ?INST1 Organism))
  (=> (instance parent IntransitiveRelation)
   (=> (and (parent ?INST1 ?INST2) (parent ?INST2 ?INST3))
    (not (parent ?INST1 ?INST3))))))
*/
fof(a7178,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_Organism) & s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(s_parent_m, s_IntransitiveRelation) => ((s_parent(INST1, INST2) & s_parent(INST2, INST3)) => (~ s_parent(INST1, INST3))))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 SetOrClass) (instance ?INST2 SetOrClass)
       (instance ?INST1 Entity))
  (=> (instance immediateInstance IntransitiveRelation)
   (=>
    (and (immediateInstance ?INST1 ?INST2)
         (immediateInstance ?INST2 ?INST3))
    (not (immediateInstance ?INST1 ?INST3))))))
*/
fof(a7179,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_SetOrClass) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_Entity)) => (s_instance(s_immediateInstance_m, s_IntransitiveRelation) => ((s_immediateInstance(INST1, INST2) & s_immediateInstance(INST2, INST3)) => (~ s_immediateInstance(INST1, INST3))))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 TimeInterval) (instance ?INST2 TimeInterval)
       (instance ?INST1 TimeInterval))
  (=> (instance meetsTemporally IntransitiveRelation)
   (=>
    (and (meetsTemporally ?INST1 ?INST2)
         (meetsTemporally ?INST2 ?INST3))
    (not (meetsTemporally ?INST1 ?INST3))))))
*/
fof(a7180,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_TimeInterval) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(s_meetsTemporally_m, s_IntransitiveRelation) => ((s_meetsTemporally(INST1, INST2) & s_meetsTemporally(INST2, INST3)) => (~ s_meetsTemporally(INST1, INST3))))))).

/*
(forall (?INST1 ?INST2 ?INST3)
 (=>
  (and (instance ?INST3 BinaryRelation)
       (instance ?INST2 BinaryRelation)
       (instance ?INST1 BinaryRelation))
  (=> (instance inverse IntransitiveRelation)
   (=> (and (inverse ?INST1 ?INST2) (inverse ?INST2 ?INST3))
    (not (inverse ?INST1 ?INST3))))))
*/
fof(a7181,axiom,! [INST1,INST2,INST3] : (((s_instance(INST3, s_BinaryRelation) & s_instance(INST2, s_BinaryRelation) & s_instance(INST1, s_BinaryRelation)) => (s_instance(s_inverse_m, s_IntransitiveRelation) => ((s_inverse(INST1, INST2) & s_inverse(INST2, INST3)) => (~ s_inverse(INST1, INST3))))))).

/*
(subclass PartialOrderingRelation TransitiveRelation)
*/
fof(a7182,axiom,s_subclass(s_PartialOrderingRelation, s_TransitiveRelation)).

/*
(subclass PartialOrderingRelation AntisymmetricRelation)
*/
fof(a7183,axiom,s_subclass(s_PartialOrderingRelation, s_AntisymmetricRelation)).

/*
(subclass PartialOrderingRelation ReflexiveRelation)
*/
fof(a7184,axiom,s_subclass(s_PartialOrderingRelation, s_ReflexiveRelation)).

/*
(subclass PartialOrderingRelation TotalValuedRelation)
*/
fof(a7185,axiom,s_subclass(s_PartialOrderingRelation, s_TotalValuedRelation)).

/*
(subclass TotalOrderingRelation PartialOrderingRelation)
*/
fof(a7186,axiom,s_subclass(s_TotalOrderingRelation, s_PartialOrderingRelation)).

/*
(instance TotalOrderingRelation SetOrClass)
*/
fof(a7187,axiom,s_instance(s_TotalOrderingRelation, s_SetOrClass)).

/*
(instance TrichotomizingRelation SetOrClass)
*/
fof(a7188,axiom,s_instance(s_TrichotomizingRelation, s_SetOrClass)).

/*
(subclass TotalOrderingRelation TrichotomizingRelation)
*/
fof(a7189,axiom,s_subclass(s_TotalOrderingRelation, s_TrichotomizingRelation)).

/*
(subclass EquivalenceRelation TransitiveRelation)
*/
fof(a7190,axiom,s_subclass(s_EquivalenceRelation, s_TransitiveRelation)).

/*
(subclass EquivalenceRelation SymmetricRelation)
*/
fof(a7191,axiom,s_subclass(s_EquivalenceRelation, s_SymmetricRelation)).

/*
(subclass EquivalenceRelation ReflexiveRelation)
*/
fof(a7192,axiom,s_subclass(s_EquivalenceRelation, s_ReflexiveRelation)).

/*
(subclass CaseRole BinaryPredicate)
*/
fof(a7193,axiom,s_subclass(s_CaseRole, s_BinaryPredicate)).

/*
(subclass CaseRole InheritableRelation)
*/
fof(a7194,axiom,s_subclass(s_CaseRole, s_InheritableRelation)).

/*
(subclass CaseRole AsymmetricRelation)
*/
fof(a7195,axiom,s_subclass(s_CaseRole, s_AsymmetricRelation)).

/*
(instance involvedInEvent BinaryPredicate)
*/
fof(a7196,axiom,s_instance(s_involvedInEvent_m, s_BinaryPredicate)).

/*
(instance involvedInEvent AsymmetricRelation)
*/
fof(a7197,axiom,s_instance(s_involvedInEvent_m, s_AsymmetricRelation)).

/*
(forall (?R)
 (=> (instance ?R CaseRole) (subrelation ?R involvedInEvent)))
*/
fof(a7198,axiom,! [R] : ((s_instance(R, s_CaseRole) => s_subrelation(R, s_involvedInEvent_m)))).

/*
(instance agent CaseRole)
*/
fof(a7199,axiom,s_instance(s_agent_m, s_CaseRole)).

/*
(instance agent PartialValuedRelation)
*/
fof(a7200,axiom,s_instance(s_agent_m, s_PartialValuedRelation)).

/*
(subrelation agent involvedInEvent)
*/
fof(a7201,axiom,s_subrelation(s_agent_m, s_involvedInEvent_m)).

/*
(instance destination CaseRole)
*/
fof(a7202,axiom,s_instance(s_destination_m, s_CaseRole)).

/*
(instance destination PartialValuedRelation)
*/
fof(a7203,axiom,s_instance(s_destination_m, s_PartialValuedRelation)).

/*
(subrelation destination involvedInEvent)
*/
fof(a7204,axiom,s_subrelation(s_destination_m, s_involvedInEvent_m)).

/*
(instance experiencer CaseRole)
*/
fof(a7205,axiom,s_instance(s_experiencer_m, s_CaseRole)).

/*
(instance experiencer PartialValuedRelation)
*/
fof(a7206,axiom,s_instance(s_experiencer_m, s_PartialValuedRelation)).

/*
(subrelation experiencer involvedInEvent)
*/
fof(a7207,axiom,s_subrelation(s_experiencer_m, s_involvedInEvent_m)).

/*
(subrelation instrument patient)
*/
fof(a7208,axiom,s_subrelation(s_instrument_m, s_patient_m)).

/*
(instance instrument CaseRole)
*/
fof(a7209,axiom,s_instance(s_instrument_m, s_CaseRole)).

/*
(instance instrument PartialValuedRelation)
*/
fof(a7210,axiom,s_instance(s_instrument_m, s_PartialValuedRelation)).

/*
(instance origin CaseRole)
*/
fof(a7211,axiom,s_instance(s_origin_m, s_CaseRole)).

/*
(instance origin PartialValuedRelation)
*/
fof(a7212,axiom,s_instance(s_origin_m, s_PartialValuedRelation)).

/*
(subrelation origin involvedInEvent)
*/
fof(a7213,axiom,s_subrelation(s_origin_m, s_involvedInEvent_m)).

/*
(instance patient CaseRole)
*/
fof(a7214,axiom,s_instance(s_patient_m, s_CaseRole)).

/*
(instance patient PartialValuedRelation)
*/
fof(a7215,axiom,s_instance(s_patient_m, s_PartialValuedRelation)).

/*
(subrelation patient involvedInEvent)
*/
fof(a7216,axiom,s_subrelation(s_patient_m, s_involvedInEvent_m)).

/*
(subrelation resource patient)
*/
fof(a7217,axiom,s_subrelation(s_resource_m, s_patient_m)).

/*
(instance resource CaseRole)
*/
fof(a7218,axiom,s_instance(s_resource_m, s_CaseRole)).

/*
(instance resource PartialValuedRelation)
*/
fof(a7219,axiom,s_instance(s_resource_m, s_PartialValuedRelation)).

/*
(disjointRelation resource result)
*/
fof(a7220,axiom,s_disjointRelation(s_resource_m, s_result_m)).

/*
(disjointRelation resource instrument)
*/
fof(a7221,axiom,s_disjointRelation(s_resource_m, s_instrument_m)).

/*
(disjointRelation result instrument)
*/
fof(a7222,axiom,s_disjointRelation(s_result_m, s_instrument_m)).

/*
(instance resourceExhausted CaseRole)
*/
fof(a7223,axiom,s_instance(s_resourceExhausted_m, s_CaseRole)).

/*
(instance resourceExhausted AsymmetricRelation)
*/
fof(a7224,axiom,s_instance(s_resourceExhausted_m, s_AsymmetricRelation)).

/*
(instance resourceExhausted BinaryPredicate)
*/
fof(a7225,axiom,s_instance(s_resourceExhausted_m, s_BinaryPredicate)).

/*
(instance resourceExhausted PartialValuedRelation)
*/
fof(a7226,axiom,s_instance(s_resourceExhausted_m, s_PartialValuedRelation)).

/*
(forall (?C ?R ?P)
 (=> (and (instance ?C SetOrClass) (instance ?P Process))
  (=> (and (resourceExhausted ?P ?R) (instance ?R ?C))
   (holdsDuring (ImmediateFutureFn (WhenFn ?P))
    (not (exists (?OBJ1) (and (part ?OBJ1 ?R) (instance ?OBJ1 ?C))))))))
*/
%% no translation to TPTP available.

/*
(subrelation result patient)
*/
fof(a7227,axiom,s_subrelation(s_result_m, s_patient_m)).

/*
(instance result CaseRole)
*/
fof(a7228,axiom,s_instance(s_result_m, s_CaseRole)).

/*
(instance result PartialValuedRelation)
*/
fof(a7229,axiom,s_instance(s_result_m, s_PartialValuedRelation)).

/*
(subclass InheritableRelation Relation)
*/
fof(a7230,axiom,s_subclass(s_InheritableRelation, s_Relation)).

/*
(subclass ProbabilityRelation Relation)
*/
fof(a7231,axiom,s_subclass(s_ProbabilityRelation, s_Relation)).

/*
(subclass ProbabilityRelation InheritableRelation)
*/
fof(a7232,axiom,s_subclass(s_ProbabilityRelation, s_InheritableRelation)).

/*
(instance ProbabilityFn ProbabilityRelation)
*/
fof(a7233,axiom,s_instance(s_ProbabilityFn_m, s_ProbabilityRelation)).

/*
(instance ProbabilityFn TotalValuedRelation)
*/
fof(a7234,axiom,s_instance(s_ProbabilityFn_m, s_TotalValuedRelation)).

/*
(instance ProbabilityFn UnaryFunction)
*/
fof(a7235,axiom,s_instance(s_ProbabilityFn_m, s_UnaryFunction)).

/*
(range ProbabilityFn RealNumber)
*/
fof(a7236,axiom,s_range(s_ProbabilityFn_m, s_RealNumber)).

/*
(instance ProbabilityFn AsymmetricRelation)
*/
fof(a7237,axiom,s_instance(s_ProbabilityFn_m, s_AsymmetricRelation)).

/*
(instance conditionalProbability ProbabilityRelation)
*/
fof(a7238,axiom,s_instance(s_conditionalProbability_m, s_ProbabilityRelation)).

/*
(instance conditionalProbability TernaryPredicate)
*/
fof(a7239,axiom,s_instance(s_conditionalProbability_m, s_TernaryPredicate)).

/*
(instance increasesLikelihood ProbabilityRelation)
*/
fof(a7240,axiom,s_instance(s_increasesLikelihood_m, s_ProbabilityRelation)).

/*
(instance increasesLikelihood BinaryPredicate)
*/
fof(a7241,axiom,s_instance(s_increasesLikelihood_m, s_BinaryPredicate)).

/*
(instance increasesLikelihood IrreflexiveRelation)
*/
fof(a7242,axiom,s_instance(s_increasesLikelihood_m, s_IrreflexiveRelation)).

/*
(disjointRelation increasesLikelihood decreasesLikelihood)
*/
fof(a7243,axiom,s_disjointRelation(s_increasesLikelihood_m, s_decreasesLikelihood_m)).

/*
(disjointRelation increasesLikelihood independentProbability)
*/
fof(a7244,axiom,s_disjointRelation(s_increasesLikelihood_m, s_independentProbability_m)).

/*
(disjointRelation decreasesLikelihood independentProbability)
*/
fof(a7245,axiom,s_disjointRelation(s_decreasesLikelihood_m, s_independentProbability_m)).

/*
(forall (?NUMBER1 ?FORMULA1 ?NUMBER2 ?FORMULA2)
 (=>
  (and (instance ?FORMULA2 Formula) (instance ?NUMBER2 RealNumber)
       (instance ?FORMULA1 Formula) (instance ?NUMBER1 Quantity))
  (=>
   (and (increasesLikelihood ?FORMULA1 ?FORMULA2)
        (and (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
             (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)))
   (greaterThan ?NUMBER2 ?NUMBER1))))
*/
fof(a7246,axiom,! [NUMBER1,FORMULA1,NUMBER2,FORMULA2] : (((s_instance(FORMULA2, s_Formula) & s_instance(NUMBER2, s_RealNumber) & s_instance(FORMULA1, s_Formula) & s_instance(NUMBER1, s_Quantity)) => ((s_increasesLikelihood(FORMULA1, FORMULA2) & ((s_ProbabilityFn(FORMULA2) = NUMBER1) & s_conditionalProbability(FORMULA1, FORMULA2, NUMBER2))) => greater(NUMBER2, NUMBER1))))).

/*
(instance decreasesLikelihood ProbabilityRelation)
*/
fof(a7247,axiom,s_instance(s_decreasesLikelihood_m, s_ProbabilityRelation)).

/*
(instance decreasesLikelihood BinaryPredicate)
*/
fof(a7248,axiom,s_instance(s_decreasesLikelihood_m, s_BinaryPredicate)).

/*
(instance decreasesLikelihood IrreflexiveRelation)
*/
fof(a7249,axiom,s_instance(s_decreasesLikelihood_m, s_IrreflexiveRelation)).

/*
(forall (?NUMBER1 ?FORMULA1 ?NUMBER2 ?FORMULA2)
 (=>
  (and (instance ?FORMULA2 Formula) (instance ?NUMBER2 RealNumber)
       (instance ?FORMULA1 Formula) (instance ?NUMBER1 Quantity))
  (=>
   (and (decreasesLikelihood ?FORMULA1 ?FORMULA2)
        (and (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
             (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)))
   (lessThan ?NUMBER2 ?NUMBER1))))
*/
fof(a7250,axiom,! [NUMBER1,FORMULA1,NUMBER2,FORMULA2] : (((s_instance(FORMULA2, s_Formula) & s_instance(NUMBER2, s_RealNumber) & s_instance(FORMULA1, s_Formula) & s_instance(NUMBER1, s_Quantity)) => ((s_decreasesLikelihood(FORMULA1, FORMULA2) & ((s_ProbabilityFn(FORMULA2) = NUMBER1) & s_conditionalProbability(FORMULA1, FORMULA2, NUMBER2))) => less(NUMBER2, NUMBER1))))).

/*
(instance ProbabilityRelation SetOrClass)
*/
fof(a7251,axiom,s_instance(s_ProbabilityRelation, s_SetOrClass)).

/*
(instance independentProbability ProbabilityRelation)
*/
fof(a7252,axiom,s_instance(s_independentProbability_m, s_ProbabilityRelation)).

/*
(instance independentProbability BinaryPredicate)
*/
fof(a7253,axiom,s_instance(s_independentProbability_m, s_BinaryPredicate)).

/*
(instance independentProbability SymmetricRelation)
*/
fof(a7254,axiom,s_instance(s_independentProbability_m, s_SymmetricRelation)).

/*
(forall (?NUMBER1 ?FORMULA1 ?NUMBER2 ?FORMULA2)
 (=>
  (and (instance ?FORMULA2 Formula) (instance ?NUMBER2 RealNumber)
       (instance ?FORMULA1 Formula) (instance ?NUMBER1 Entity))
  (=>
   (and (independentProbability ?FORMULA1 ?FORMULA2)
        (and (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
             (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)))
   (equal ?NUMBER2 ?NUMBER1))))
*/
fof(a7255,axiom,! [NUMBER1,FORMULA1,NUMBER2,FORMULA2] : (((s_instance(FORMULA2, s_Formula) & s_instance(NUMBER2, s_RealNumber) & s_instance(FORMULA1, s_Formula) & s_instance(NUMBER1, s_Entity)) => ((s_independentProbability(FORMULA1, FORMULA2) & ((s_ProbabilityFn(FORMULA2) = NUMBER1) & s_conditionalProbability(FORMULA1, FORMULA2, NUMBER2))) => (NUMBER2 = NUMBER1))))).

/*
(forall (?FORMULA2 ?FORMULA1)
 (=> (and (instance ?FORMULA1 Formula) (instance ?FORMULA2 Formula))
  (or (increasesLikelihood ?FORMULA1 ?FORMULA2)
      (or (decreasesLikelihood ?FORMULA1 ?FORMULA2)
          (independentProbability ?FORMULA1 ?FORMULA2)))))
*/
fof(a7256,axiom,! [FORMULA2,FORMULA1] : (((s_instance(FORMULA1, s_Formula) & s_instance(FORMULA2, s_Formula)) => (s_increasesLikelihood(FORMULA1, FORMULA2) | (s_decreasesLikelihood(FORMULA1, FORMULA2) | s_independentProbability(FORMULA1, FORMULA2)))))).

/*
(subclass SpatialRelation Relation)
*/
fof(a7257,axiom,s_subclass(s_SpatialRelation, s_Relation)).

/*
(subclass SpatialRelation InheritableRelation)
*/
fof(a7258,axiom,s_subclass(s_SpatialRelation, s_InheritableRelation)).

/*
(subclass TemporalRelation Relation)
*/
fof(a7259,axiom,s_subclass(s_TemporalRelation, s_Relation)).

/*
(subclass TemporalRelation InheritableRelation)
*/
fof(a7260,axiom,s_subclass(s_TemporalRelation, s_InheritableRelation)).

/*
(subclass IntentionalRelation InheritableRelation)
*/
fof(a7261,axiom,s_subclass(s_IntentionalRelation, s_InheritableRelation)).

/*
(subclass IntentionalRelation Relation)
*/
fof(a7262,axiom,s_subclass(s_IntentionalRelation, s_Relation)).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Formula) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance knows IntentionalRelation)
        (and (knows ?AGENT ?ROW0) (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7263,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Formula) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_knows_m, s_IntentionalRelation) & (s_knows(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Human) (instance ?OBJ Entity)
       (instance ?AGENT Human))
  (=>
   (and (instance cohabitant IntentionalRelation)
        (and (cohabitant ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7264,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Human) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_Human)) => ((s_instance(s_cohabitant_m, s_IntentionalRelation) & (s_cohabitant(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Formula) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance doubts IntentionalRelation)
        (and (doubts ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7265,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Formula) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_doubts_m, s_IntentionalRelation) & (s_doubts(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 CognitiveAgent) (instance ?OBJ Entity)
       (instance ?AGENT ServiceProcess)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance serviceRecipient IntentionalRelation)
        (and (serviceRecipient ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7266,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_CognitiveAgent) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_ServiceProcess) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_serviceRecipient_m, s_IntentionalRelation) & (s_serviceRecipient(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Human) (instance ?OBJ Entity)
       (instance ?AGENT Human))
  (=>
   (and (instance domesticPartner IntentionalRelation)
        (and (domesticPartner ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7267,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Human) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_Human)) => ((s_instance(s_domesticPartner_m, s_IntentionalRelation) & (s_domesticPartner(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Human) (instance ?OBJ Entity)
       (instance ?AGENT Human))
  (=>
   (and (instance friend IntentionalRelation)
        (and (friend ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7268,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Human) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_Human)) => ((s_instance(s_friend_m, s_IntentionalRelation) & (s_friend(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Formula) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance disapproves IntentionalRelation)
        (and (disapproves ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7269,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Formula) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_disapproves_m, s_IntentionalRelation) & (s_disapproves(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Physical) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance needs IntentionalRelation)
        (and (needs ?AGENT ?ROW0) (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7270,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Physical) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_needs_m, s_IntentionalRelation) & (s_needs(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Formula) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance considers IntentionalRelation)
        (and (considers ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7271,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Formula) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_considers_m, s_IntentionalRelation) & (s_considers(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Entity) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance inScopeOfInterest IntentionalRelation)
        (and (inScopeOfInterest ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7272,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Entity) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_inScopeOfInterest_m, s_IntentionalRelation) & (s_inScopeOfInterest(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Physical) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance wants IntentionalRelation)
        (and (wants ?AGENT ?ROW0) (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7273,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Physical) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_wants_m, s_IntentionalRelation) & (s_wants(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Object) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance dislikes IntentionalRelation)
        (and (dislikes ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7274,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Object) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_dislikes_m, s_IntentionalRelation) & (s_dislikes(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Formula) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance desires IntentionalRelation)
        (and (desires ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7275,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Formula) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_desires_m, s_IntentionalRelation) & (s_desires(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 CognitiveAgent) (instance ?OBJ Entity)
       (instance ?AGENT ServiceProcess)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance serviceProvider IntentionalRelation)
        (and (serviceProvider ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7276,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_CognitiveAgent) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_ServiceProcess) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_serviceProvider_m, s_IntentionalRelation) & (s_serviceProvider(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(forall (?AGENT ?OBJ ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Formula) (instance ?OBJ Entity)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance believes IntentionalRelation)
        (and (believes ?AGENT ?ROW0)
             (inList ?OBJ (ListFn2 ?ROW0 ?ROW1))))
   (inScopeOfInterest ?AGENT ?OBJ))))
*/
fof(a7277,axiom,! [AGENT,OBJ,ROW1,ROW0] : (((s_instance(ROW0, s_Formula) & s_instance(OBJ, s_Entity) & s_instance(AGENT, s_CognitiveAgent)) => ((s_instance(s_believes_m, s_IntentionalRelation) & (s_believes(AGENT, ROW0) & s_inList(OBJ, s_ListFn2(ROW0, ROW1)))) => s_inScopeOfInterest(AGENT, OBJ))))).

/*
(instance prefers TernaryPredicate)
*/
fof(a7278,axiom,s_instance(s_prefers_m, s_TernaryPredicate)).

/*
(instance prefers IntentionalRelation)
*/
fof(a7279,axiom,s_instance(s_prefers_m, s_IntentionalRelation)).

/*
(subclass PropositionalAttitude IntentionalRelation)
*/
fof(a7280,axiom,s_subclass(s_PropositionalAttitude, s_IntentionalRelation)).

/*
(subclass PropositionalAttitude AsymmetricRelation)
*/
fof(a7281,axiom,s_subclass(s_PropositionalAttitude, s_AsymmetricRelation)).

/*
(subclass PropositionalAttitude InheritableRelation)
*/
fof(a7282,axiom,s_subclass(s_PropositionalAttitude, s_InheritableRelation)).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=>
   (and (instance knows PropositionalAttitude) (knows ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))))
*/
fof(a7283,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => ((s_instance(s_knows_m, s_PropositionalAttitude) & s_knows(AGENT, FORMULA)) => s_instance(FORMULA, s_Formula))))).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=>
   (and (instance doubts PropositionalAttitude)
        (doubts ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))))
*/
fof(a7284,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => ((s_instance(s_doubts_m, s_PropositionalAttitude) & s_doubts(AGENT, FORMULA)) => s_instance(FORMULA, s_Formula))))).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=>
   (and (instance disapproves PropositionalAttitude)
        (disapproves ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))))
*/
fof(a7285,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => ((s_instance(s_disapproves_m, s_PropositionalAttitude) & s_disapproves(AGENT, FORMULA)) => s_instance(FORMULA, s_Formula))))).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=>
   (and (instance considers PropositionalAttitude)
        (considers ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))))
*/
fof(a7286,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => ((s_instance(s_considers_m, s_PropositionalAttitude) & s_considers(AGENT, FORMULA)) => s_instance(FORMULA, s_Formula))))).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=>
   (and (instance desires PropositionalAttitude)
        (desires ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))))
*/
fof(a7287,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => ((s_instance(s_desires_m, s_PropositionalAttitude) & s_desires(AGENT, FORMULA)) => s_instance(FORMULA, s_Formula))))).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=>
   (and (instance believes PropositionalAttitude)
        (believes ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))))
*/
fof(a7288,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => ((s_instance(s_believes_m, s_PropositionalAttitude) & s_believes(AGENT, FORMULA)) => s_instance(FORMULA, s_Formula))))).

/*
(subclass ObjectAttitude IntentionalRelation)
*/
fof(a7289,axiom,s_subclass(s_ObjectAttitude, s_IntentionalRelation)).

/*
(subclass ObjectAttitude InheritableRelation)
*/
fof(a7290,axiom,s_subclass(s_ObjectAttitude, s_InheritableRelation)).

/*
(disjoint ObjectAttitude PropositionalAttitude)
*/
fof(a7291,axiom,s_disjoint(s_ObjectAttitude, s_PropositionalAttitude)).

/*
(forall (?THING ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?THING Physical))
  (=> (and (instance needs ObjectAttitude) (needs ?AGENT ?THING))
   (instance ?THING Physical))))
*/
fof(a7292,axiom,! [THING,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(THING, s_Physical)) => ((s_instance(s_needs_m, s_ObjectAttitude) & s_needs(AGENT, THING)) => s_instance(THING, s_Physical))))).

/*
(forall (?THING ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?THING Physical))
  (=> (and (instance wants ObjectAttitude) (wants ?AGENT ?THING))
   (instance ?THING Physical))))
*/
fof(a7293,axiom,! [THING,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(THING, s_Physical)) => ((s_instance(s_wants_m, s_ObjectAttitude) & s_wants(AGENT, THING)) => s_instance(THING, s_Physical))))).

/*
(forall (?THING ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?THING Object))
  (=> (and (instance dislikes ObjectAttitude) (dislikes ?AGENT ?THING))
   (instance ?THING Physical))))
*/
fof(a7294,axiom,! [THING,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(THING, s_Object)) => ((s_instance(s_dislikes_m, s_ObjectAttitude) & s_dislikes(AGENT, THING)) => s_instance(THING, s_Physical))))).

/*
(instance inScopeOfInterest BinaryPredicate)
*/
fof(a7295,axiom,s_instance(s_inScopeOfInterest_m, s_BinaryPredicate)).

/*
(instance IntentionalRelation SetOrClass)
*/
fof(a7296,axiom,s_instance(s_IntentionalRelation, s_SetOrClass)).

/*
(instance inScopeOfInterest IntentionalRelation)
*/
fof(a7297,axiom,s_instance(s_inScopeOfInterest_m, s_IntentionalRelation)).

/*
(forall (?OBJECT ?AGENT)
 (forall (?PROCESS)
  (exists (?g5182)
   (=> (instance ?OBJECT Entity)
    (and (=>
          (and (instance ?PROCESS IntentionalProcess)
               (and (agent ?PROCESS ?AGENT)
                    (and (instance ?AGENT CognitiveAgent)
                         (patient ?PROCESS ?OBJECT))))
          (inScopeOfInterest ?AGENT ?OBJECT))
         (=> (inScopeOfInterest ?AGENT ?OBJECT)
          (and (instance ?g5182 IntentionalProcess)
               (and (agent ?g5182 ?AGENT)
                    (and (instance ?AGENT CognitiveAgent)
                         (patient ?g5182 ?OBJECT))))))))))
*/
fof(a7298,axiom,! [OBJECT,AGENT] : (! [PROCESS] : (? [G5182] : ((s_instance(OBJECT, s_Entity) => (((s_instance(PROCESS, s_IntentionalProcess) & (s_agent(PROCESS, AGENT) & (s_instance(AGENT, s_CognitiveAgent) & s_patient(PROCESS, OBJECT)))) => s_inScopeOfInterest(AGENT, OBJECT)) & (s_inScopeOfInterest(AGENT, OBJECT) => (s_instance(G5182, s_IntentionalProcess) & (s_agent(G5182, AGENT) & (s_instance(AGENT, s_CognitiveAgent) & s_patient(G5182, OBJECT))))))))))).

/*
(instance needs ObjectAttitude)
*/
fof(a7299,axiom,s_instance(s_needs_m, s_ObjectAttitude)).

/*
(instance needs BinaryPredicate)
*/
fof(a7300,axiom,s_instance(s_needs_m, s_BinaryPredicate)).

/*
(subrelation needs inScopeOfInterest)
*/
fof(a7301,axiom,s_subrelation(s_needs_m, s_inScopeOfInterest_m)).

/*
(forall (?OBJECT ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?OBJECT Physical))
  (=> (needs ?AGENT ?OBJECT) (wants ?AGENT ?OBJECT))))
*/
fof(a7302,axiom,! [OBJECT,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(OBJECT, s_Physical)) => (s_needs(AGENT, OBJECT) => s_wants(AGENT, OBJECT))))).

/*
(instance ObjectAttitude SetOrClass)
*/
fof(a7303,axiom,s_instance(s_ObjectAttitude, s_SetOrClass)).

/*
(instance wants ObjectAttitude)
*/
fof(a7304,axiom,s_instance(s_wants_m, s_ObjectAttitude)).

/*
(instance wants BinaryPredicate)
*/
fof(a7305,axiom,s_instance(s_wants_m, s_BinaryPredicate)).

/*
(subrelation wants inScopeOfInterest)
*/
fof(a7306,axiom,s_subrelation(s_wants_m, s_inScopeOfInterest_m)).

/*
(forall (?OBJ ?AGENT)
 (exists (?PURP)
  (and (instance ?PURP Formula)
       (=>
        (and (instance ?AGENT CognitiveAgent) (instance ?OBJ Physical))
        (=> (wants ?AGENT ?OBJ)
         (hasPurposeForAgent ?OBJ ?PURP ?AGENT))))))
*/
fof(a7307,axiom,! [OBJ,AGENT] : (? [PURP] : ((s_instance(PURP, s_Formula) & ((s_instance(AGENT, s_CognitiveAgent) & s_instance(OBJ, s_Physical)) => (s_wants(AGENT, OBJ) => s_hasPurposeForAgent(OBJ, PURP, AGENT))))))).

/*
(forall (?OBJ ?AGENT)
 (=> (instance ?AGENT CognitiveAgent)
  (=> (and (wants ?AGENT ?OBJ) (instance ?OBJ Object))
   (desires ?AGENT (possesses ?AGENT ?OBJ)))))
*/
%% no translation to TPTP available.

/*
(instance desires PropositionalAttitude)
*/
fof(a7308,axiom,s_instance(s_desires_m, s_PropositionalAttitude)).

/*
(instance desires BinaryPredicate)
*/
fof(a7309,axiom,s_instance(s_desires_m, s_BinaryPredicate)).

/*
(subrelation desires inScopeOfInterest)
*/
fof(a7310,axiom,s_subrelation(s_desires_m, s_inScopeOfInterest_m)).

/*
(instance considers PropositionalAttitude)
*/
fof(a7311,axiom,s_instance(s_considers_m, s_PropositionalAttitude)).

/*
(instance considers BinaryPredicate)
*/
fof(a7312,axiom,s_instance(s_considers_m, s_BinaryPredicate)).

/*
(subrelation considers inScopeOfInterest)
*/
fof(a7313,axiom,s_subrelation(s_considers_m, s_inScopeOfInterest_m)).

/*
(instance believes PropositionalAttitude)
*/
fof(a7314,axiom,s_instance(s_believes_m, s_PropositionalAttitude)).

/*
(instance believes BinaryPredicate)
*/
fof(a7315,axiom,s_instance(s_believes_m, s_BinaryPredicate)).

/*
(subrelation believes inScopeOfInterest)
*/
fof(a7316,axiom,s_subrelation(s_believes_m, s_inScopeOfInterest_m)).

/*
(forall (?FORMULA ?AGENT)
 (exists (?TIME)
  (and (instance ?TIME TimePosition)
       (=>
        (and (instance ?AGENT CognitiveAgent)
             (instance ?FORMULA Formula))
        (=> (believes ?AGENT ?FORMULA)
         (holdsDuring ?TIME (considers ?AGENT ?FORMULA)))))))
*/
%% no translation to TPTP available.

/*
(instance PropositionalAttitude SetOrClass)
*/
fof(a7317,axiom,s_instance(s_PropositionalAttitude, s_SetOrClass)).

/*
(instance knows PropositionalAttitude)
*/
fof(a7318,axiom,s_instance(s_knows_m, s_PropositionalAttitude)).

/*
(instance knows BinaryPredicate)
*/
fof(a7319,axiom,s_instance(s_knows_m, s_BinaryPredicate)).

/*
(subrelation knows inScopeOfInterest)
*/
fof(a7320,axiom,s_subrelation(s_knows_m, s_inScopeOfInterest_m)).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=> (knows ?AGENT ?FORMULA) (believes ?AGENT ?FORMULA))))
*/
fof(a7321,axiom,! [FORMULA,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => (s_knows(AGENT, FORMULA) => s_believes(AGENT, FORMULA))))).

/*
(forall (?FORMULA ?AGENT)
 (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula))
  (=> (knows ?AGENT ?FORMULA) (truth ?FORMULA True))))
*/
%% no translation to TPTP available.

/*
(subclass TernaryRelation Relation)
*/
fof(a7322,axiom,s_subclass(s_TernaryRelation, s_Relation)).

/*
(subclass TernaryRelation InheritableRelation)
*/
fof(a7323,axiom,s_subclass(s_TernaryRelation, s_InheritableRelation)).

/*
(subclass QuaternaryRelation Relation)
*/
fof(a7324,axiom,s_subclass(s_QuaternaryRelation, s_Relation)).

/*
(subclass QuaternaryRelation InheritableRelation)
*/
fof(a7325,axiom,s_subclass(s_QuaternaryRelation, s_InheritableRelation)).

/*
(subclass QuintaryRelation Relation)
*/
fof(a7326,axiom,s_subclass(s_QuintaryRelation, s_Relation)).

/*
(subclass QuintaryRelation InheritableRelation)
*/
fof(a7327,axiom,s_subclass(s_QuintaryRelation, s_InheritableRelation)).

/*
(subclass List Relation)
*/
fof(a7328,axiom,s_subclass(s_List, s_Relation)).

/*
(instance UniqueList SetOrClass)
*/
fof(a7329,axiom,s_instance(s_UniqueList, s_SetOrClass)).

/*
(subclass UniqueList List)
*/
fof(a7330,axiom,s_subclass(s_UniqueList, s_List)).

/*
(forall (?LIST)
 (forall (?NUMBER1 ?NUMBER2)
  (=>
   (and (instance ?NUMBER2 PositiveInteger)
        (instance ?NUMBER1 PositiveInteger))
   (=> (instance ?LIST UniqueList)
    (=>
     (equal (ListOrderFn ?LIST ?NUMBER1) (ListOrderFn ?LIST ?NUMBER2))
     (equal ?NUMBER1 ?NUMBER2))))))
*/
fof(a7331,axiom,! [LIST] : (! [NUMBER1,NUMBER2] : (((s_instance(NUMBER2, s_PositiveInteger) & s_instance(NUMBER1, s_PositiveInteger)) => (s_instance(LIST, s_UniqueList) => ((s_ListOrderFn(LIST, NUMBER1) = s_ListOrderFn(LIST, NUMBER2)) => (NUMBER1 = NUMBER2))))))).

/*
(instance List SetOrClass)
*/
fof(a7332,axiom,s_instance(s_List, s_SetOrClass)).

/*
(instance NullList List)
*/
fof(a7333,axiom,s_instance(s_NullList_m, s_List)).

/*
(instance ListFn Function)
*/
fof(a7334,axiom,s_instance(s_ListFn_m, s_Function)).

/*
(instance ListFn VariableArityRelation)
*/
fof(a7335,axiom,s_instance(s_ListFn_m, s_VariableArityRelation)).

/*
(range ListFn List)
*/
fof(a7336,axiom,s_range(s_ListFn_m, s_List)).

/*
(forall (?CLASS ?ROW1 ?ROW0)
 (forall (?OBJ)
  (exists (?ITEM)
   (and (instance ?ITEM SetOrClass)
        (=> (instance ?OBJ Entity)
         (=> (instance ?CLASS SetOrClass)
          (=> (exhaustiveDecomposition2 ?CLASS ?ROW0)
           (=> (instance ?OBJ ?CLASS)
            (and (inList ?ITEM (ListFn2 ?ROW0 ?ROW1))
                 (instance ?OBJ ?ITEM))))))))))
*/
fof(a7337,axiom,! [CLASS,ROW1,ROW0] : (! [OBJ] : (? [ITEM] : ((s_instance(ITEM, s_SetOrClass) & (s_instance(OBJ, s_Entity) => (s_instance(CLASS, s_SetOrClass) => (s_exhaustiveDecomposition2(CLASS, ROW0) => (s_instance(OBJ, CLASS) => (s_inList(ITEM, s_ListFn2(ROW0, ROW1)) & s_instance(OBJ, ITEM))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW2 ?ROW1)
 (forall (?OBJ)
  (exists (?ITEM)
   (and (instance ?ITEM SetOrClass)
        (=> (instance ?OBJ Entity)
         (=>
          (and (instance ?ROW1 Class) (instance ?ROW0 Class)
               (instance ?CLASS Class) (instance ?CLASS SetOrClass))
          (=> (exhaustiveDecomposition3 ?CLASS ?ROW0 ?ROW1)
           (=> (instance ?OBJ ?CLASS)
            (and (inList ?ITEM (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                 (instance ?OBJ ?ITEM))))))))))
*/
fof(a7338,axiom,! [CLASS,ROW0,ROW2,ROW1] : (! [OBJ] : (? [ITEM] : ((s_instance(ITEM, s_SetOrClass) & (s_instance(OBJ, s_Entity) => ((s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveDecomposition3(CLASS, ROW0, ROW1) => (s_instance(OBJ, CLASS) => (s_inList(ITEM, s_ListFn3(ROW0, ROW1, ROW2)) & s_instance(OBJ, ITEM))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?OBJ)
  (exists (?ITEM)
   (and (instance ?ITEM SetOrClass)
        (=> (instance ?OBJ Entity)
         (=>
          (and (instance ?ROW2 Class) (instance ?ROW1 Class)
               (instance ?ROW0 Class) (instance ?CLASS Class)
               (instance ?CLASS SetOrClass))
          (=> (exhaustiveDecomposition4 ?CLASS ?ROW0 ?ROW1 ?ROW2)
           (=> (instance ?OBJ ?CLASS)
            (and (inList ?ITEM (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                 (instance ?OBJ ?ITEM))))))))))
*/
fof(a7339,axiom,! [CLASS,ROW0,ROW1,ROW3,ROW2] : (! [OBJ] : (? [ITEM] : ((s_instance(ITEM, s_SetOrClass) & (s_instance(OBJ, s_Entity) => ((s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveDecomposition4(CLASS, ROW0, ROW1, ROW2) => (s_instance(OBJ, CLASS) => (s_inList(ITEM, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) & s_instance(OBJ, ITEM))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?OBJ)
  (exists (?ITEM)
   (and (instance ?ITEM SetOrClass)
        (=> (instance ?OBJ Entity)
         (=>
          (and (instance ?ROW3 Class) (instance ?ROW2 Class)
               (instance ?ROW1 Class) (instance ?ROW0 Class)
               (instance ?CLASS Class) (instance ?CLASS SetOrClass))
          (=> (exhaustiveDecomposition5 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3)
           (=> (instance ?OBJ ?CLASS)
            (and (inList ?ITEM (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                 (instance ?OBJ ?ITEM))))))))))
*/
fof(a7340,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [OBJ] : (? [ITEM] : ((s_instance(ITEM, s_SetOrClass) & (s_instance(OBJ, s_Entity) => ((s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveDecomposition5(CLASS, ROW0, ROW1, ROW2, ROW3) => (s_instance(OBJ, CLASS) => (s_inList(ITEM, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) & s_instance(OBJ, ITEM))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?OBJ)
  (exists (?ITEM)
   (and (instance ?ITEM SetOrClass)
        (=> (instance ?OBJ Entity)
         (=>
          (and (instance ?ROW4 Class) (instance ?ROW3 Class)
               (instance ?ROW2 Class) (instance ?ROW1 Class)
               (instance ?ROW0 Class) (instance ?CLASS Class)
               (instance ?CLASS SetOrClass))
          (=>
           (exhaustiveDecomposition6 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3
            ?ROW4)
           (=> (instance ?OBJ ?CLASS)
            (and (inList ?ITEM
                  (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                 (instance ?OBJ ?ITEM))))))))))
*/
fof(a7341,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [OBJ] : (? [ITEM] : ((s_instance(ITEM, s_SetOrClass) & (s_instance(OBJ, s_Entity) => ((s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveDecomposition6(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4) => (s_instance(OBJ, CLASS) => (s_inList(ITEM, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) & s_instance(OBJ, ITEM))))))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?OBJ)
  (exists (?ITEM)
   (and (instance ?ITEM SetOrClass)
        (=> (instance ?OBJ Entity)
         (=>
          (and (instance ?ROW5 Class) (instance ?ROW4 Class)
               (instance ?ROW3 Class) (instance ?ROW2 Class)
               (instance ?ROW1 Class) (instance ?ROW0 Class)
               (instance ?CLASS Class) (instance ?CLASS SetOrClass))
          (=>
           (exhaustiveDecomposition7 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3
            ?ROW4 ?ROW5)
           (=> (instance ?OBJ ?CLASS)
            (and (inList ?ITEM
                  (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
                 (instance ?OBJ ?ITEM))))))))))
*/
fof(a7342,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [OBJ] : (? [ITEM] : ((s_instance(ITEM, s_SetOrClass) & (s_instance(OBJ, s_Entity) => ((s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_exhaustiveDecomposition7(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_instance(OBJ, CLASS) => (s_inList(ITEM, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) & s_instance(OBJ, ITEM))))))))))).

/*
(forall (?CLASS ?ROW1 ?ROW0)
 (forall (?ITEM)
  (=> (instance ?ITEM SetOrClass)
   (=> (instance ?CLASS SetOrClass)
    (=> (disjointDecomposition2 ?CLASS ?ROW0)
     (=> (inList ?ITEM (ListFn2 ?ROW0 ?ROW1))
      (subclass ?ITEM ?CLASS)))))))
*/
fof(a7343,axiom,! [CLASS,ROW1,ROW0] : (! [ITEM] : ((s_instance(ITEM, s_SetOrClass) => (s_instance(CLASS, s_SetOrClass) => (s_disjointDecomposition2(CLASS, ROW0) => (s_inList(ITEM, s_ListFn2(ROW0, ROW1)) => s_subclass(ITEM, CLASS)))))))).

/*
(forall (?CLASS ?ROW0 ?ROW2 ?ROW1)
 (forall (?ITEM)
  (=> (instance ?ITEM SetOrClass)
   (=>
    (and (instance ?ROW1 Class) (instance ?ROW0 Class)
         (instance ?CLASS Class) (instance ?CLASS SetOrClass))
    (=> (disjointDecomposition3 ?CLASS ?ROW0 ?ROW1)
     (=> (inList ?ITEM (ListFn3 ?ROW0 ?ROW1 ?ROW2))
      (subclass ?ITEM ?CLASS)))))))
*/
fof(a7344,axiom,! [CLASS,ROW0,ROW2,ROW1] : (! [ITEM] : ((s_instance(ITEM, s_SetOrClass) => ((s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_disjointDecomposition3(CLASS, ROW0, ROW1) => (s_inList(ITEM, s_ListFn3(ROW0, ROW1, ROW2)) => s_subclass(ITEM, CLASS)))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?ITEM)
  (=> (instance ?ITEM SetOrClass)
   (=>
    (and (instance ?ROW2 Class) (instance ?ROW1 Class)
         (instance ?ROW0 Class) (instance ?CLASS Class)
         (instance ?CLASS SetOrClass))
    (=> (disjointDecomposition4 ?CLASS ?ROW0 ?ROW1 ?ROW2)
     (=> (inList ?ITEM (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
      (subclass ?ITEM ?CLASS)))))))
*/
fof(a7345,axiom,! [CLASS,ROW0,ROW1,ROW3,ROW2] : (! [ITEM] : ((s_instance(ITEM, s_SetOrClass) => ((s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_disjointDecomposition4(CLASS, ROW0, ROW1, ROW2) => (s_inList(ITEM, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => s_subclass(ITEM, CLASS)))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?ITEM)
  (=> (instance ?ITEM SetOrClass)
   (=>
    (and (instance ?ROW3 Class) (instance ?ROW2 Class)
         (instance ?ROW1 Class) (instance ?ROW0 Class)
         (instance ?CLASS Class) (instance ?CLASS SetOrClass))
    (=> (disjointDecomposition5 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3)
     (=> (inList ?ITEM (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
      (subclass ?ITEM ?CLASS)))))))
*/
fof(a7346,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [ITEM] : ((s_instance(ITEM, s_SetOrClass) => ((s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_disjointDecomposition5(CLASS, ROW0, ROW1, ROW2, ROW3) => (s_inList(ITEM, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => s_subclass(ITEM, CLASS)))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?ITEM)
  (=> (instance ?ITEM SetOrClass)
   (=>
    (and (instance ?ROW4 Class) (instance ?ROW3 Class)
         (instance ?ROW2 Class) (instance ?ROW1 Class)
         (instance ?ROW0 Class) (instance ?CLASS Class)
         (instance ?CLASS SetOrClass))
    (=> (disjointDecomposition6 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
     (=> (inList ?ITEM (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
      (subclass ?ITEM ?CLASS)))))))
*/
fof(a7347,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [ITEM] : ((s_instance(ITEM, s_SetOrClass) => ((s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_disjointDecomposition6(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4) => (s_inList(ITEM, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => s_subclass(ITEM, CLASS)))))))).

/*
(forall (?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?ITEM)
  (=> (instance ?ITEM SetOrClass)
   (=>
    (and (instance ?ROW5 Class) (instance ?ROW4 Class)
         (instance ?ROW3 Class) (instance ?ROW2 Class)
         (instance ?ROW1 Class) (instance ?ROW0 Class)
         (instance ?CLASS Class) (instance ?CLASS SetOrClass))
    (=>
     (disjointDecomposition7 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
      ?ROW5)
     (=>
      (inList ?ITEM
       (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
      (subclass ?ITEM ?CLASS)))))))
*/
fof(a7348,axiom,! [CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [ITEM] : ((s_instance(ITEM, s_SetOrClass) => ((s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class) & s_instance(CLASS, s_SetOrClass)) => (s_disjointDecomposition7(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_inList(ITEM, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => s_subclass(ITEM, CLASS)))))))).

/*
(forall (?ROW1 ?ROW0 ?CLASS)
 (forall (?ITEM1 ?ITEM2)
  (=> (and (instance ?ITEM2 SetOrClass) (instance ?ITEM1 SetOrClass))
   (=> (disjointDecomposition2 ?CLASS ?ROW0)
    (=>
     (and (inList ?ITEM1 (ListFn2 ?ROW0 ?ROW1))
          (and (inList ?ITEM2 (ListFn2 ?ROW0 ?ROW1))
               (not (equal ?ITEM1 ?ITEM2))))
     (disjoint ?ITEM1 ?ITEM2))))))
*/
fof(a7349,axiom,! [ROW1,ROW0,CLASS] : (! [ITEM1,ITEM2] : (((s_instance(ITEM2, s_SetOrClass) & s_instance(ITEM1, s_SetOrClass)) => (s_disjointDecomposition2(CLASS, ROW0) => ((s_inList(ITEM1, s_ListFn2(ROW0, ROW1)) & (s_inList(ITEM2, s_ListFn2(ROW0, ROW1)) & (~ (ITEM1 = ITEM2)))) => s_disjoint(ITEM1, ITEM2))))))).

/*
(forall (?ROW2 ?CLASS ?ROW1 ?ROW0)
 (forall (?ITEM1 ?ITEM2)
  (=> (and (instance ?ITEM2 SetOrClass) (instance ?ITEM1 SetOrClass))
   (=>
    (and (instance ?ROW0 Class) (instance ?ROW1 Class)
         (instance ?CLASS Class))
    (=> (disjointDecomposition3 ?CLASS ?ROW0 ?ROW1)
     (=>
      (and (inList ?ITEM1 (ListFn3 ?ROW0 ?ROW1 ?ROW2))
           (and (inList ?ITEM2 (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                (not (equal ?ITEM1 ?ITEM2))))
      (disjoint ?ITEM1 ?ITEM2)))))))
*/
fof(a7350,axiom,! [ROW2,CLASS,ROW1,ROW0] : (! [ITEM1,ITEM2] : (((s_instance(ITEM2, s_SetOrClass) & s_instance(ITEM1, s_SetOrClass)) => ((s_instance(ROW0, s_Class) & s_instance(ROW1, s_Class) & s_instance(CLASS, s_Class)) => (s_disjointDecomposition3(CLASS, ROW0, ROW1) => ((s_inList(ITEM1, s_ListFn3(ROW0, ROW1, ROW2)) & (s_inList(ITEM2, s_ListFn3(ROW0, ROW1, ROW2)) & (~ (ITEM1 = ITEM2)))) => s_disjoint(ITEM1, ITEM2)))))))).

/*
(forall (?ROW3 ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (forall (?ITEM1 ?ITEM2)
  (=> (and (instance ?ITEM2 SetOrClass) (instance ?ITEM1 SetOrClass))
   (=>
    (and (instance ?ROW1 Class) (instance ?ROW2 Class)
         (instance ?ROW0 Class) (instance ?CLASS Class))
    (=> (disjointDecomposition4 ?CLASS ?ROW0 ?ROW1 ?ROW2)
     (=>
      (and (inList ?ITEM1 (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
           (and (inList ?ITEM2 (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                (not (equal ?ITEM1 ?ITEM2))))
      (disjoint ?ITEM1 ?ITEM2)))))))
*/
fof(a7351,axiom,! [ROW3,CLASS,ROW0,ROW2,ROW1] : (! [ITEM1,ITEM2] : (((s_instance(ITEM2, s_SetOrClass) & s_instance(ITEM1, s_SetOrClass)) => ((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class)) => (s_disjointDecomposition4(CLASS, ROW0, ROW1, ROW2) => ((s_inList(ITEM1, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) & (s_inList(ITEM2, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) & (~ (ITEM1 = ITEM2)))) => s_disjoint(ITEM1, ITEM2)))))))).

/*
(forall (?ROW4 ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?ITEM1 ?ITEM2)
  (=> (and (instance ?ITEM2 SetOrClass) (instance ?ITEM1 SetOrClass))
   (=>
    (and (instance ?ROW2 Class) (instance ?ROW3 Class)
         (instance ?ROW1 Class) (instance ?ROW0 Class)
         (instance ?CLASS Class))
    (=> (disjointDecomposition5 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3)
     (=>
      (and (inList ?ITEM1 (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
           (and (inList ?ITEM2 (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                (not (equal ?ITEM1 ?ITEM2))))
      (disjoint ?ITEM1 ?ITEM2)))))))
*/
fof(a7352,axiom,! [ROW4,CLASS,ROW0,ROW1,ROW3,ROW2] : (! [ITEM1,ITEM2] : (((s_instance(ITEM2, s_SetOrClass) & s_instance(ITEM1, s_SetOrClass)) => ((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class)) => (s_disjointDecomposition5(CLASS, ROW0, ROW1, ROW2, ROW3) => ((s_inList(ITEM1, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) & (s_inList(ITEM2, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) & (~ (ITEM1 = ITEM2)))) => s_disjoint(ITEM1, ITEM2)))))))).

/*
(forall (?ROW5 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?ITEM1 ?ITEM2)
  (=> (and (instance ?ITEM2 SetOrClass) (instance ?ITEM1 SetOrClass))
   (=>
    (and (instance ?ROW3 Class) (instance ?ROW4 Class)
         (instance ?ROW2 Class) (instance ?ROW1 Class)
         (instance ?ROW0 Class) (instance ?CLASS Class))
    (=> (disjointDecomposition6 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
     (=>
      (and (inList ?ITEM1
            (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
           (and (inList ?ITEM2
                 (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                (not (equal ?ITEM1 ?ITEM2))))
      (disjoint ?ITEM1 ?ITEM2)))))))
*/
fof(a7353,axiom,! [ROW5,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [ITEM1,ITEM2] : (((s_instance(ITEM2, s_SetOrClass) & s_instance(ITEM1, s_SetOrClass)) => ((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class)) => (s_disjointDecomposition6(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4) => ((s_inList(ITEM1, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) & (s_inList(ITEM2, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) & (~ (ITEM1 = ITEM2)))) => s_disjoint(ITEM1, ITEM2)))))))).

/*
(forall (?ROW6 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?ITEM1 ?ITEM2)
  (=> (and (instance ?ITEM2 SetOrClass) (instance ?ITEM1 SetOrClass))
   (=>
    (and (instance ?ROW4 Class) (instance ?ROW5 Class)
         (instance ?ROW3 Class) (instance ?ROW2 Class)
         (instance ?ROW1 Class) (instance ?ROW0 Class)
         (instance ?CLASS Class))
    (=>
     (disjointDecomposition7 ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
      ?ROW5)
     (=>
      (and (inList ?ITEM1
            (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
           (and (inList ?ITEM2
                 (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
                (not (equal ?ITEM1 ?ITEM2))))
      (disjoint ?ITEM1 ?ITEM2)))))))
*/
fof(a7354,axiom,! [ROW6,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [ITEM1,ITEM2] : (((s_instance(ITEM2, s_SetOrClass) & s_instance(ITEM1, s_SetOrClass)) => ((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_Class)) => (s_disjointDecomposition7(CLASS, ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => ((s_inList(ITEM1, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) & (s_inList(ITEM2, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) & (~ (ITEM1 = ITEM2)))) => s_disjoint(ITEM1, ITEM2)))))))).

/*
(forall (?CLASS ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 SetOrClass) (instance ?ROW2 Class)
       (instance ?ROW3 SetOrClass) (instance ?ROW3 Class)
       (instance ?CLASS Class) (instance ?ROW1 Class)
       (instance ?ROW1 SetOrClass))
  (<=> (disjointDecomposition4 ?CLASS ?ROW1 ?ROW2 ?ROW3)
   (and (disjoint ?ROW1 ?ROW2)
        (and (disjoint ?ROW2 ?ROW3) (disjoint ?ROW3 ?ROW1))))))
*/
fof(a7355,axiom,! [CLASS,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_SetOrClass) & s_instance(ROW2, s_Class) & s_instance(ROW3, s_SetOrClass) & s_instance(ROW3, s_Class) & s_instance(CLASS, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW1, s_SetOrClass)) => (s_disjointDecomposition4(CLASS, ROW1, ROW2, ROW3) <=> (s_disjoint(ROW1, ROW2) & (s_disjoint(ROW2, ROW3) & s_disjoint(ROW3, ROW1))))))).

/*
(instance ListOrderFn BinaryFunction)
*/
fof(a7356,axiom,s_instance(s_ListOrderFn_m, s_BinaryFunction)).

/*
(instance ListOrderFn PartialValuedRelation)
*/
fof(a7357,axiom,s_instance(s_ListOrderFn_m, s_PartialValuedRelation)).

/*
(range ListOrderFn Entity)
*/
fof(a7358,axiom,s_range(s_ListOrderFn_m, s_Entity)).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domain partition ?NUMBER ?CLASS)
        (and (instance partition Predicate) (partition2 ?ROW0 ?ROW1)))
   (instance (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7359,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domain(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition2(ROW0, ROW1))) => s_instance(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition3 ?ROW0 ?ROW1 ?ROW2)))
   (instance (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7360,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2))) => s_instance(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (instance (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7361,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3))) => s_instance(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (instance
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7362,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_instance(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))
   (instance
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7363,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_instance(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)))
   (instance
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7364,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_instance(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domain exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition2 ?ROW0 ?ROW1)))
   (instance (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7365,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domain(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1))) => s_instance(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2)))
   (instance (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7366,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))) => s_instance(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (instance (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7367,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))) => s_instance(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (instance
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7368,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_instance(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5)))
   (instance
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7369,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_instance(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5 ?ROW6)))
   (instance
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7370,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_instance(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute1 ?ROW0)))
   (instance (ListOrderFn (ListFn1 ?ROW0) ?NUMBER) ?CLASS))))
*/
fof(a7371,axiom,! [ROW0,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute1(ROW0))) => s_instance(s_ListOrderFn(s_ListFn1(ROW0), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute2 ?ROW0 ?ROW1)))
   (instance (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7372,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1))) => s_instance(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2)))
   (instance (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7373,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2))) => s_instance(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (instance (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7374,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))) => s_instance(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (instance
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7375,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_instance(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))
   (instance
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7376,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_instance(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
              ?ROW6)))
   (instance
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7377,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_instance(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domain disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition2 ?ROW0 ?ROW1)))
   (instance (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7378,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domain(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1))) => s_instance(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2)))
   (instance (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7379,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2))) => s_instance(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (instance (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7380,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))) => s_instance(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (instance
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7381,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_instance(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5)))
   (instance
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7382,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_instance(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5 ?ROW6)))
   (instance
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7383,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_instance(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domain exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute2 ?ROW0 ?ROW1)))
   (instance (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7384,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domain(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1))) => s_instance(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2)))
   (instance (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7385,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2))) => s_instance(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (instance (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7386,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))) => s_instance(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (instance
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7387,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_instance(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5)))
   (instance
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7388,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_instance(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domain exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
              ?ROW6)))
   (instance
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7389,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domain(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_instance(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domainSubclass partition ?NUMBER ?CLASS)
        (and (instance partition Predicate) (partition2 ?ROW0 ?ROW1)))
   (subclass (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7390,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domainSubclass(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition2(ROW0, ROW1))) => s_subclass(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition3 ?ROW0 ?ROW1 ?ROW2)))
   (subclass (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7391,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition3(ROW0, ROW1, ROW2))) => s_subclass(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (subclass (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7392,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition4(ROW0, ROW1, ROW2, ROW3))) => s_subclass(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (subclass
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7393,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_subclass(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))
   (subclass
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7394,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_subclass(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass partition ?NUMBER ?CLASS)
        (and (instance partition Predicate)
             (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)))
   (subclass
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7395,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_partition_m, NUMBER, CLASS) & (s_instance(s_partition_m, s_Predicate) & s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_subclass(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domainSubclass exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition2 ?ROW0 ?ROW1)))
   (subclass (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7396,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domainSubclass(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition2(ROW0, ROW1))) => s_subclass(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2)))
   (subclass (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7397,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition3(ROW0, ROW1, ROW2))) => s_subclass(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (subclass (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7398,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3))) => s_subclass(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (subclass
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7399,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_subclass(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5)))
   (subclass
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7400,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_subclass(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveDecomposition ?NUMBER ?CLASS)
        (and (instance exhaustiveDecomposition Predicate)
             (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5 ?ROW6)))
   (subclass
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7401,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveDecomposition_m, NUMBER, CLASS) & (s_instance(s_exhaustiveDecomposition_m, s_Predicate) & s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_subclass(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute1 ?ROW0)))
   (subclass (ListOrderFn (ListFn1 ?ROW0) ?NUMBER) ?CLASS))))
*/
fof(a7402,axiom,! [ROW0,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute1(ROW0))) => s_subclass(s_ListOrderFn(s_ListFn1(ROW0), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute2 ?ROW0 ?ROW1)))
   (subclass (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7403,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute2(ROW0, ROW1))) => s_subclass(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2)))
   (subclass (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7404,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute3(ROW0, ROW1, ROW2))) => s_subclass(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (subclass (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7405,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3))) => s_subclass(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (subclass
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7406,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_subclass(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))
   (subclass
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7407,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_subclass(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass contraryAttribute ?NUMBER ?CLASS)
        (and (instance contraryAttribute Predicate)
             (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
              ?ROW6)))
   (subclass
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7408,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_contraryAttribute_m, NUMBER, CLASS) & (s_instance(s_contraryAttribute_m, s_Predicate) & s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_subclass(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domainSubclass disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition2 ?ROW0 ?ROW1)))
   (subclass (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7409,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domainSubclass(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition2(ROW0, ROW1))) => s_subclass(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Class) (instance ?ROW2 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2)))
   (subclass (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7410,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition3(ROW0, ROW1, ROW2))) => s_subclass(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Class) (instance ?ROW3 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (subclass (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7411,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3))) => s_subclass(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Class) (instance ?ROW4 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (subclass
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7412,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_subclass(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Class) (instance ?ROW5 Class)
       (instance ?ROW3 Class) (instance ?ROW2 Class)
       (instance ?ROW1 Class) (instance ?ROW0 Class)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5)))
   (subclass
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7413,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_subclass(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Class) (instance ?ROW6 Class)
       (instance ?ROW4 Class) (instance ?ROW3 Class)
       (instance ?ROW2 Class) (instance ?ROW1 Class)
       (instance ?ROW0 Class) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass disjointDecomposition ?NUMBER ?CLASS)
        (and (instance disjointDecomposition Predicate)
             (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5 ?ROW6)))
   (subclass
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7414,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW6, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_disjointDecomposition_m, NUMBER, CLASS) & (s_instance(s_disjointDecomposition_m, s_Predicate) & s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_subclass(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(forall (?ROW0 ?ROW1 ?CLASS ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass))
  (=>
   (and (domainSubclass exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute2 ?ROW0 ?ROW1)))
   (subclass (ListOrderFn (ListFn2 ?ROW0 ?ROW1) ?NUMBER) ?CLASS))))
*/
fof(a7415,axiom,! [ROW0,ROW1,CLASS,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_instance(CLASS, s_SetOrClass)) => ((s_domainSubclass(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute2(ROW0, ROW1))) => s_subclass(s_ListOrderFn(s_ListFn2(ROW0, ROW1), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (subclass ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2)))
   (subclass (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
    ?CLASS))))
*/
fof(a7416,axiom,! [NUMBER,CLASS,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute3(ROW0, ROW1, ROW2))) => s_subclass(s_ListOrderFn(s_ListFn3(ROW0, ROW1, ROW2), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))
   (subclass (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
    ?CLASS))))
*/
fof(a7417,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3))) => s_subclass(s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))
   (subclass
    (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER)
    ?CLASS))))
*/
fof(a7418,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4))) => s_subclass(s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute)
       (instance ?CLASS SetOrClass) (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
              ?ROW5)))
   (subclass
    (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER)
    ?CLASS))))
*/
fof(a7419,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5))) => s_subclass(s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), NUMBER), CLASS))))).

/*
(forall (?NUMBER ?CLASS ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (subclass ?ROW0 Attribute) (instance ?CLASS SetOrClass)
       (instance ?NUMBER PositiveInteger))
  (=>
   (and (domainSubclass exhaustiveAttribute ?NUMBER ?CLASS)
        (and (instance exhaustiveAttribute Predicate)
             (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
              ?ROW6)))
   (subclass
    (ListOrderFn (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
     ?NUMBER)
    ?CLASS))))
*/
fof(a7420,axiom,! [NUMBER,CLASS,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute) & s_instance(CLASS, s_SetOrClass) & s_instance(NUMBER, s_PositiveInteger)) => ((s_domainSubclass(s_exhaustiveAttribute_m, NUMBER, CLASS) & (s_instance(s_exhaustiveAttribute_m, s_Predicate) & s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6))) => s_subclass(s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6), NUMBER), CLASS))))).

/*
(instance ListLengthFn UnaryFunction)
*/
fof(a7421,axiom,s_instance(s_ListLengthFn_m, s_UnaryFunction)).

/*
(instance ListLengthFn TotalValuedRelation)
*/
fof(a7422,axiom,s_instance(s_ListLengthFn_m, s_TotalValuedRelation)).

/*
(range ListLengthFn NonnegativeInteger)
*/
fof(a7423,axiom,s_range(s_ListLengthFn_m, s_NonnegativeInteger)).

/*
(forall (?ROW0 ?ROW1 ?ITEM)
 (equal (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ITEM))
        (SuccessorFn (ListLengthFn (ListFn2 ?ROW0 ?ROW1)))))
*/
fof(a7424,axiom,! [ROW0,ROW1,ITEM] : ((s_ListLengthFn(s_ListFn3(ROW0, ROW1, ITEM)) = s_SuccessorFn(s_ListLengthFn(s_ListFn2(ROW0, ROW1)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ITEM)
 (equal (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ITEM))
        (SuccessorFn (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)))))
*/
fof(a7425,axiom,! [ROW0,ROW1,ROW2,ITEM] : ((s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ITEM)) = s_SuccessorFn(s_ListLengthFn(s_ListFn3(ROW0, ROW1, ROW2)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM)
 (equal (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM))
        (SuccessorFn (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)))))
*/
fof(a7426,axiom,! [ROW0,ROW1,ROW2,ROW3,ITEM] : ((s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ITEM)) = s_SuccessorFn(s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)
 (equal (ListLengthFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM))
        (SuccessorFn
         (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)))))
*/
fof(a7427,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ITEM] : ((s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ITEM)) = s_SuccessorFn(s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)
 (equal (ListLengthFn
         (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM))
        (SuccessorFn
         (ListLengthFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))))
*/
fof(a7428,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ITEM] : ((s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ITEM)) = s_SuccessorFn(s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)))))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM)
 (equal (ListLengthFn
         (ListFn8 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM))
        (SuccessorFn
         (ListLengthFn
          (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)))))
*/
fof(a7429,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6,ITEM] : ((s_ListLengthFn(s_ListFn8(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6, ITEM)) = s_SuccessorFn(s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)))))).

/*
(forall (?ROW0 ?ITEM)
 (=> (instance ?ITEM Entity)
  (equal (ListOrderFn (ListFn2 ?ROW0 ?ITEM)
          (ListLengthFn (ListFn2 ?ROW0 ?ITEM)))
         ?ITEM)))
*/
fof(a7430,axiom,! [ROW0,ITEM] : ((s_instance(ITEM, s_Entity) => (s_ListOrderFn(s_ListFn2(ROW0, ITEM), s_ListLengthFn(s_ListFn2(ROW0, ITEM))) = ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ITEM)
 (=> (instance ?ITEM Entity)
  (equal (ListOrderFn (ListFn3 ?ROW0 ?ROW1 ?ITEM)
          (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ITEM)))
         ?ITEM)))
*/
fof(a7431,axiom,! [ROW0,ROW1,ITEM] : ((s_instance(ITEM, s_Entity) => (s_ListOrderFn(s_ListFn3(ROW0, ROW1, ITEM), s_ListLengthFn(s_ListFn3(ROW0, ROW1, ITEM))) = ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ITEM)
 (=> (instance ?ITEM Entity)
  (equal (ListOrderFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ITEM)
          (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ITEM)))
         ?ITEM)))
*/
fof(a7432,axiom,! [ROW0,ROW1,ROW2,ITEM] : ((s_instance(ITEM, s_Entity) => (s_ListOrderFn(s_ListFn4(ROW0, ROW1, ROW2, ITEM), s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ITEM))) = ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM)
 (=> (instance ?ITEM Entity)
  (equal (ListOrderFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM)
          (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM)))
         ?ITEM)))
*/
fof(a7433,axiom,! [ROW0,ROW1,ROW2,ROW3,ITEM] : ((s_instance(ITEM, s_Entity) => (s_ListOrderFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ITEM), s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ITEM))) = ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)
 (=> (instance ?ITEM Entity)
  (equal (ListOrderFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)
          (ListLengthFn (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)))
         ?ITEM)))
*/
fof(a7434,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ITEM] : ((s_instance(ITEM, s_Entity) => (s_ListOrderFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ITEM), s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ITEM))) = ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)
 (=> (instance ?ITEM Entity)
  (equal (ListOrderFn
          (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)
          (ListLengthFn
           (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)))
         ?ITEM)))
*/
fof(a7435,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ITEM] : ((s_instance(ITEM, s_Entity) => (s_ListOrderFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ITEM), s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ITEM))) = ITEM)))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1)
  (=> (instance ?NUMBER PositiveInteger)
   (=> (and (valence partition ?NUMBER) (instance partition Predicate))
    (=> (partition2 ?ROW0 ?ROW1)
     (equal (ListLengthFn (ListFn2 ?ROW0 ?ROW1)) ?NUMBER))))))
*/
fof(a7436,axiom,! [NUMBER] : (! [ROW0,ROW1] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_partition_m, NUMBER) & s_instance(s_partition_m, s_Predicate)) => (s_partition2(ROW0, ROW1) => (s_ListLengthFn(s_ListFn2(ROW0, ROW1)) = NUMBER))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2)
  (=>
   (and (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence partition ?NUMBER) (instance partition Predicate))
     (=> (partition3 ?ROW0 ?ROW1 ?ROW2)
      (equal (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)) ?NUMBER)))))))
*/
fof(a7437,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_partition_m, NUMBER) & s_instance(s_partition_m, s_Predicate)) => (s_partition3(ROW0, ROW1, ROW2) => (s_ListLengthFn(s_ListFn3(ROW0, ROW1, ROW2)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3)
  (=>
   (and (instance ?ROW3 Class) (instance ?ROW2 Class)
        (instance ?ROW1 Class) (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence partition ?NUMBER) (instance partition Predicate))
     (=> (partition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
      (equal (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
             ?NUMBER)))))))
*/
fof(a7438,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_partition_m, NUMBER) & s_instance(s_partition_m, s_Predicate)) => (s_partition4(ROW0, ROW1, ROW2, ROW3) => (s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
  (=>
   (and (instance ?ROW4 Class) (instance ?ROW3 Class)
        (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence partition ?NUMBER) (instance partition Predicate))
     (=> (partition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
      (equal (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
             ?NUMBER)))))))
*/
fof(a7439,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_partition_m, NUMBER) & s_instance(s_partition_m, s_Predicate)) => (s_partition5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
  (=>
   (and (instance ?ROW5 Class) (instance ?ROW4 Class)
        (instance ?ROW3 Class) (instance ?ROW2 Class)
        (instance ?ROW1 Class) (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence partition ?NUMBER) (instance partition Predicate))
     (=> (partition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
      (equal (ListLengthFn
              (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
             ?NUMBER)))))))
*/
fof(a7440,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_partition_m, NUMBER) & s_instance(s_partition_m, s_Predicate)) => (s_partition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
  (=>
   (and (instance ?ROW6 Class) (instance ?ROW5 Class)
        (instance ?ROW4 Class) (instance ?ROW3 Class)
        (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence partition ?NUMBER) (instance partition Predicate))
     (=> (partition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
      (equal (ListLengthFn
              (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
             ?NUMBER)))))))
*/
fof(a7441,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6] : (((s_instance(ROW6, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_partition_m, NUMBER) & s_instance(s_partition_m, s_Predicate)) => (s_partition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1)
  (=> (instance ?NUMBER PositiveInteger)
   (=>
    (and (valence exhaustiveDecomposition ?NUMBER)
         (instance exhaustiveDecomposition Predicate))
    (=> (exhaustiveDecomposition2 ?ROW0 ?ROW1)
     (equal (ListLengthFn (ListFn2 ?ROW0 ?ROW1)) ?NUMBER))))))
*/
fof(a7442,axiom,! [NUMBER] : (! [ROW0,ROW1] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveDecomposition_m, NUMBER) & s_instance(s_exhaustiveDecomposition_m, s_Predicate)) => (s_exhaustiveDecomposition2(ROW0, ROW1) => (s_ListLengthFn(s_ListFn2(ROW0, ROW1)) = NUMBER))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2)
  (=>
   (and (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveDecomposition ?NUMBER)
          (instance exhaustiveDecomposition Predicate))
     (=> (exhaustiveDecomposition3 ?ROW0 ?ROW1 ?ROW2)
      (equal (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)) ?NUMBER)))))))
*/
fof(a7443,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveDecomposition_m, NUMBER) & s_instance(s_exhaustiveDecomposition_m, s_Predicate)) => (s_exhaustiveDecomposition3(ROW0, ROW1, ROW2) => (s_ListLengthFn(s_ListFn3(ROW0, ROW1, ROW2)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3)
  (=>
   (and (instance ?ROW3 Class) (instance ?ROW2 Class)
        (instance ?ROW1 Class) (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveDecomposition ?NUMBER)
          (instance exhaustiveDecomposition Predicate))
     (=> (exhaustiveDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
      (equal (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
             ?NUMBER)))))))
*/
fof(a7444,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveDecomposition_m, NUMBER) & s_instance(s_exhaustiveDecomposition_m, s_Predicate)) => (s_exhaustiveDecomposition4(ROW0, ROW1, ROW2, ROW3) => (s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
  (=>
   (and (instance ?ROW4 Class) (instance ?ROW3 Class)
        (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveDecomposition ?NUMBER)
          (instance exhaustiveDecomposition Predicate))
     (=> (exhaustiveDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
      (equal (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
             ?NUMBER)))))))
*/
fof(a7445,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveDecomposition_m, NUMBER) & s_instance(s_exhaustiveDecomposition_m, s_Predicate)) => (s_exhaustiveDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
  (=>
   (and (instance ?ROW5 Class) (instance ?ROW4 Class)
        (instance ?ROW3 Class) (instance ?ROW2 Class)
        (instance ?ROW1 Class) (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveDecomposition ?NUMBER)
          (instance exhaustiveDecomposition Predicate))
     (=> (exhaustiveDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
      (equal (ListLengthFn
              (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
             ?NUMBER)))))))
*/
fof(a7446,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveDecomposition_m, NUMBER) & s_instance(s_exhaustiveDecomposition_m, s_Predicate)) => (s_exhaustiveDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
  (=>
   (and (instance ?ROW6 Class) (instance ?ROW5 Class)
        (instance ?ROW4 Class) (instance ?ROW3 Class)
        (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveDecomposition ?NUMBER)
          (instance exhaustiveDecomposition Predicate))
     (=>
      (exhaustiveDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
       ?ROW6)
      (equal (ListLengthFn
              (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
             ?NUMBER)))))))
*/
fof(a7447,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6] : (((s_instance(ROW6, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveDecomposition_m, NUMBER) & s_instance(s_exhaustiveDecomposition_m, s_Predicate)) => (s_exhaustiveDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0)
  (=> (instance ?NUMBER PositiveInteger)
   (=>
    (and (valence contraryAttribute ?NUMBER)
         (instance contraryAttribute Predicate))
    (=> (contraryAttribute1 ?ROW0)
     (equal (ListLengthFn (ListFn1 ?ROW0)) ?NUMBER))))))
*/
fof(a7448,axiom,! [NUMBER] : (! [ROW0] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute1(ROW0) => (s_ListLengthFn(s_ListFn1(ROW0)) = NUMBER))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1)
  (=> (and (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence contraryAttribute ?NUMBER)
          (instance contraryAttribute Predicate))
     (=> (contraryAttribute2 ?ROW0 ?ROW1)
      (equal (ListLengthFn (ListFn2 ?ROW0 ?ROW1)) ?NUMBER)))))))
*/
fof(a7449,axiom,! [NUMBER] : (! [ROW0,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute2(ROW0, ROW1) => (s_ListLengthFn(s_ListFn2(ROW0, ROW1)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2)
  (=>
   (and (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
        (instance ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence contraryAttribute ?NUMBER)
          (instance contraryAttribute Predicate))
     (=> (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2)
      (equal (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)) ?NUMBER)))))))
*/
fof(a7450,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute3(ROW0, ROW1, ROW2) => (s_ListLengthFn(s_ListFn3(ROW0, ROW1, ROW2)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3)
  (=>
   (and (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
        (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence contraryAttribute ?NUMBER)
          (instance contraryAttribute Predicate))
     (=> (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
      (equal (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
             ?NUMBER)))))))
*/
fof(a7451,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3) => (s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
  (=>
   (and (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
        (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
        (instance ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence contraryAttribute ?NUMBER)
          (instance contraryAttribute Predicate))
     (=> (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
      (equal (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
             ?NUMBER)))))))
*/
fof(a7452,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
  (=>
   (and (instance ?ROW5 Attribute) (instance ?ROW4 Attribute)
        (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
        (instance ?ROW1 Attribute) (instance ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence contraryAttribute ?NUMBER)
          (instance contraryAttribute Predicate))
     (=> (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
      (equal (ListLengthFn
              (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
             ?NUMBER)))))))
*/
fof(a7453,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
  (=>
   (and (instance ?ROW6 Attribute) (instance ?ROW5 Attribute)
        (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
        (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
        (instance ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence contraryAttribute ?NUMBER)
          (instance contraryAttribute Predicate))
     (=> (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
      (equal (ListLengthFn
              (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
             ?NUMBER)))))))
*/
fof(a7454,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6] : (((s_instance(ROW6, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_contraryAttribute_m, NUMBER) & s_instance(s_contraryAttribute_m, s_Predicate)) => (s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1)
  (=> (instance ?NUMBER PositiveInteger)
   (=>
    (and (valence disjointDecomposition ?NUMBER)
         (instance disjointDecomposition Predicate))
    (=> (disjointDecomposition2 ?ROW0 ?ROW1)
     (equal (ListLengthFn (ListFn2 ?ROW0 ?ROW1)) ?NUMBER))))))
*/
fof(a7455,axiom,! [NUMBER] : (! [ROW0,ROW1] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_disjointDecomposition_m, NUMBER) & s_instance(s_disjointDecomposition_m, s_Predicate)) => (s_disjointDecomposition2(ROW0, ROW1) => (s_ListLengthFn(s_ListFn2(ROW0, ROW1)) = NUMBER))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2)
  (=>
   (and (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence disjointDecomposition ?NUMBER)
          (instance disjointDecomposition Predicate))
     (=> (disjointDecomposition3 ?ROW0 ?ROW1 ?ROW2)
      (equal (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)) ?NUMBER)))))))
*/
fof(a7456,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2] : (((s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_disjointDecomposition_m, NUMBER) & s_instance(s_disjointDecomposition_m, s_Predicate)) => (s_disjointDecomposition3(ROW0, ROW1, ROW2) => (s_ListLengthFn(s_ListFn3(ROW0, ROW1, ROW2)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3)
  (=>
   (and (instance ?ROW3 Class) (instance ?ROW2 Class)
        (instance ?ROW1 Class) (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence disjointDecomposition ?NUMBER)
          (instance disjointDecomposition Predicate))
     (=> (disjointDecomposition4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
      (equal (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
             ?NUMBER)))))))
*/
fof(a7457,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3] : (((s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_disjointDecomposition_m, NUMBER) & s_instance(s_disjointDecomposition_m, s_Predicate)) => (s_disjointDecomposition4(ROW0, ROW1, ROW2, ROW3) => (s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
  (=>
   (and (instance ?ROW4 Class) (instance ?ROW3 Class)
        (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence disjointDecomposition ?NUMBER)
          (instance disjointDecomposition Predicate))
     (=> (disjointDecomposition5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
      (equal (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
             ?NUMBER)))))))
*/
fof(a7458,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4] : (((s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_disjointDecomposition_m, NUMBER) & s_instance(s_disjointDecomposition_m, s_Predicate)) => (s_disjointDecomposition5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
  (=>
   (and (instance ?ROW5 Class) (instance ?ROW4 Class)
        (instance ?ROW3 Class) (instance ?ROW2 Class)
        (instance ?ROW1 Class) (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence disjointDecomposition ?NUMBER)
          (instance disjointDecomposition Predicate))
     (=> (disjointDecomposition6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
      (equal (ListLengthFn
              (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
             ?NUMBER)))))))
*/
fof(a7459,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5] : (((s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_disjointDecomposition_m, NUMBER) & s_instance(s_disjointDecomposition_m, s_Predicate)) => (s_disjointDecomposition6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
  (=>
   (and (instance ?ROW6 Class) (instance ?ROW5 Class)
        (instance ?ROW4 Class) (instance ?ROW3 Class)
        (instance ?ROW2 Class) (instance ?ROW1 Class)
        (instance ?ROW0 Class))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence disjointDecomposition ?NUMBER)
          (instance disjointDecomposition Predicate))
     (=>
      (disjointDecomposition7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
       ?ROW6)
      (equal (ListLengthFn
              (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
             ?NUMBER)))))))
*/
fof(a7460,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6] : (((s_instance(ROW6, s_Class) & s_instance(ROW5, s_Class) & s_instance(ROW4, s_Class) & s_instance(ROW3, s_Class) & s_instance(ROW2, s_Class) & s_instance(ROW1, s_Class) & s_instance(ROW0, s_Class)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_disjointDecomposition_m, NUMBER) & s_instance(s_disjointDecomposition_m, s_Predicate)) => (s_disjointDecomposition7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1)
  (=> (instance ?NUMBER PositiveInteger)
   (=>
    (and (valence exhaustiveAttribute ?NUMBER)
         (instance exhaustiveAttribute Predicate))
    (=> (exhaustiveAttribute2 ?ROW0 ?ROW1)
     (equal (ListLengthFn (ListFn2 ?ROW0 ?ROW1)) ?NUMBER))))))
*/
fof(a7461,axiom,! [NUMBER] : (! [ROW0,ROW1] : ((s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveAttribute_m, NUMBER) & s_instance(s_exhaustiveAttribute_m, s_Predicate)) => (s_exhaustiveAttribute2(ROW0, ROW1) => (s_ListLengthFn(s_ListFn2(ROW0, ROW1)) = NUMBER))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2)
  (=>
   (and (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
        (subclass ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveAttribute ?NUMBER)
          (instance exhaustiveAttribute Predicate))
     (=> (exhaustiveAttribute3 ?ROW0 ?ROW1 ?ROW2)
      (equal (ListLengthFn (ListFn3 ?ROW0 ?ROW1 ?ROW2)) ?NUMBER)))))))
*/
fof(a7462,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveAttribute_m, NUMBER) & s_instance(s_exhaustiveAttribute_m, s_Predicate)) => (s_exhaustiveAttribute3(ROW0, ROW1, ROW2) => (s_ListLengthFn(s_ListFn3(ROW0, ROW1, ROW2)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3)
  (=>
   (and (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
        (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveAttribute ?NUMBER)
          (instance exhaustiveAttribute Predicate))
     (=> (exhaustiveAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
      (equal (ListLengthFn (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
             ?NUMBER)))))))
*/
fof(a7463,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveAttribute_m, NUMBER) & s_instance(s_exhaustiveAttribute_m, s_Predicate)) => (s_exhaustiveAttribute4(ROW0, ROW1, ROW2, ROW3) => (s_ListLengthFn(s_ListFn4(ROW0, ROW1, ROW2, ROW3)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
  (=>
   (and (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
        (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
        (subclass ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveAttribute ?NUMBER)
          (instance exhaustiveAttribute Predicate))
     (=> (exhaustiveAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
      (equal (ListLengthFn (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
             ?NUMBER)))))))
*/
fof(a7464,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveAttribute_m, NUMBER) & s_instance(s_exhaustiveAttribute_m, s_Predicate)) => (s_exhaustiveAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4) => (s_ListLengthFn(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
  (=>
   (and (instance ?ROW5 Attribute) (instance ?ROW4 Attribute)
        (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
        (instance ?ROW1 Attribute) (subclass ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveAttribute ?NUMBER)
          (instance exhaustiveAttribute Predicate))
     (=> (exhaustiveAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
      (equal (ListLengthFn
              (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
             ?NUMBER)))))))
*/
fof(a7465,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveAttribute_m, NUMBER) & s_instance(s_exhaustiveAttribute_m, s_Predicate)) => (s_exhaustiveAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) => (s_ListLengthFn(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) = NUMBER)))))))).

/*
(forall (?NUMBER)
 (forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
  (=>
   (and (instance ?ROW6 Attribute) (instance ?ROW5 Attribute)
        (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
        (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
        (subclass ?ROW0 Attribute))
   (=> (instance ?NUMBER PositiveInteger)
    (=>
     (and (valence exhaustiveAttribute ?NUMBER)
          (instance exhaustiveAttribute Predicate))
     (=>
      (exhaustiveAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
      (equal (ListLengthFn
              (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
             ?NUMBER)))))))
*/
fof(a7466,axiom,! [NUMBER] : (! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6] : (((s_instance(ROW6, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_subclass(ROW0, s_Attribute)) => (s_instance(NUMBER, s_PositiveInteger) => ((s_valence(s_exhaustiveAttribute_m, NUMBER) & s_instance(s_exhaustiveAttribute_m, s_Predicate)) => (s_exhaustiveAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) => (s_ListLengthFn(s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) = NUMBER)))))))).

/*
(instance ListConcatenateFn BinaryFunction)
*/
fof(a7467,axiom,s_instance(s_ListConcatenateFn_m, s_BinaryFunction)).

/*
(instance ListConcatenateFn TotalValuedRelation)
*/
fof(a7468,axiom,s_instance(s_ListConcatenateFn_m, s_TotalValuedRelation)).

/*
(range ListConcatenateFn List)
*/
fof(a7469,axiom,s_range(s_ListConcatenateFn_m, s_List)).

/*
(instance inList BinaryPredicate)
*/
fof(a7470,axiom,s_instance(s_inList_m, s_BinaryPredicate)).

/*
(instance inList IrreflexiveRelation)
*/
fof(a7471,axiom,s_instance(s_inList_m, s_IrreflexiveRelation)).

/*
(instance inList AsymmetricRelation)
*/
fof(a7472,axiom,s_instance(s_inList_m, s_AsymmetricRelation)).

/*
(instance inList PartialValuedRelation)
*/
fof(a7473,axiom,s_instance(s_inList_m, s_PartialValuedRelation)).

/*
(forall (?LIST ?ITEM)
 (exists (?NUMBER)
  (and (instance ?NUMBER PositiveInteger)
       (=> (and (instance ?ITEM Entity) (instance ?LIST List))
        (=> (inList ?ITEM ?LIST)
         (equal (ListOrderFn ?LIST ?NUMBER) ?ITEM))))))
*/
fof(a7474,axiom,! [LIST,ITEM] : (? [NUMBER] : ((s_instance(NUMBER, s_PositiveInteger) & ((s_instance(ITEM, s_Entity) & s_instance(LIST, s_List)) => (s_inList(ITEM, LIST) => (s_ListOrderFn(LIST, NUMBER) = ITEM))))))).

/*
(instance subList BinaryPredicate)
*/
fof(a7475,axiom,s_instance(s_subList_m, s_BinaryPredicate)).

/*
(instance subList PartialOrderingRelation)
*/
fof(a7476,axiom,s_instance(s_subList_m, s_PartialOrderingRelation)).

/*
(instance initialList BinaryPredicate)
*/
fof(a7477,axiom,s_instance(s_initialList_m, s_BinaryPredicate)).

/*
(instance initialList PartialOrderingRelation)
*/
fof(a7478,axiom,s_instance(s_initialList_m, s_PartialOrderingRelation)).

/*
(subrelation initialList subList)
*/
fof(a7479,axiom,s_subrelation(s_initialList_m, s_subList_m)).

/*
(forall (?ROW0 ?ROW1 ?ITEM)
 (initialList (ListFn1 ?ROW0) (ListFn2 ?ROW0 ?ITEM)))
*/
fof(a7480,axiom,! [ROW0,ROW1,ITEM] : (s_initialList(s_ListFn1(ROW0), s_ListFn2(ROW0, ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ITEM)
 (initialList (ListFn2 ?ROW0 ?ROW1) (ListFn3 ?ROW0 ?ROW1 ?ITEM)))
*/
fof(a7481,axiom,! [ROW0,ROW1,ROW2,ITEM] : (s_initialList(s_ListFn2(ROW0, ROW1), s_ListFn3(ROW0, ROW1, ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM)
 (initialList (ListFn3 ?ROW0 ?ROW1 ?ROW2)
  (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ITEM)))
*/
fof(a7482,axiom,! [ROW0,ROW1,ROW2,ROW3,ITEM] : (s_initialList(s_ListFn3(ROW0, ROW1, ROW2), s_ListFn4(ROW0, ROW1, ROW2, ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)
 (initialList (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
  (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ITEM)))
*/
fof(a7483,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ITEM] : (s_initialList(s_ListFn4(ROW0, ROW1, ROW2, ROW3), s_ListFn5(ROW0, ROW1, ROW2, ROW3, ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)
 (initialList (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
  (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)))
*/
fof(a7484,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ITEM] : (s_initialList(s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4), s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ITEM)))).

/*
(forall (?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM)
 (initialList (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
  (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)))
*/
fof(a7485,axiom,! [ROW0,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6,ITEM] : (s_initialList(s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5), s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ITEM)))).

/*
(instance identicalListItems BinaryPredicate)
*/
fof(a7486,axiom,s_instance(s_identicalListItems_m, s_BinaryPredicate)).

/*
(instance identicalListItems EquivalenceRelation)
*/
fof(a7487,axiom,s_instance(s_identicalListItems_m, s_EquivalenceRelation)).

/*
(subclass Predicate Relation)
*/
fof(a7488,axiom,s_subclass(s_Predicate, s_Relation)).

/*
(subclass Predicate InheritableRelation)
*/
fof(a7489,axiom,s_subclass(s_Predicate, s_InheritableRelation)).

/*
(subclass Function SingleValuedRelation)
*/
fof(a7490,axiom,s_subclass(s_Function, s_SingleValuedRelation)).

/*
(subclass Function InheritableRelation)
*/
fof(a7491,axiom,s_subclass(s_Function, s_InheritableRelation)).

/*
(subclass UnaryFunction Function)
*/
fof(a7492,axiom,s_subclass(s_UnaryFunction, s_Function)).

/*
(subclass UnaryFunction BinaryRelation)
*/
fof(a7493,axiom,s_subclass(s_UnaryFunction, s_BinaryRelation)).

/*
(subclass UnaryFunction InheritableRelation)
*/
fof(a7494,axiom,s_subclass(s_UnaryFunction, s_InheritableRelation)).

/*
(forall (?FUNCTION)
 (=> (instance ?FUNCTION UnaryFunction) (valence ?FUNCTION 1)))
*/
fof(a7495,axiom,! [FUNCTION] : ((s_instance(FUNCTION, s_UnaryFunction) => s_valence(FUNCTION, 1)))).

/*
(subclass OneToOneFunction UnaryFunction)
*/
fof(a7496,axiom,s_subclass(s_OneToOneFunction, s_UnaryFunction)).

/*
(forall (?CLASS ?FUN)
 (forall (?ARG1 ?ARG2)
  (=> (and (instance ?ARG2 Function) (instance ?ARG1 Function))
   (=> (instance ?CLASS SetOrClass)
    (=> (instance ?FUN OneToOneFunction)
     (=>
      (and (domain ?FUN 1 ?CLASS)
           (and (instance ?ARG1 ?CLASS)
                (and (instance ?ARG2 ?CLASS)
                     (not (equal ?ARG1 ?ARG2)))))
      (not (equal (AssignmentFn2 ?FUN ?ARG1)
                  (AssignmentFn2 ?FUN ?ARG2)))))))))
*/
fof(a7497,axiom,! [CLASS,FUN] : (! [ARG1,ARG2] : (((s_instance(ARG2, s_Function) & s_instance(ARG1, s_Function)) => (s_instance(CLASS, s_SetOrClass) => (s_instance(FUN, s_OneToOneFunction) => ((s_domain(FUN, 1, CLASS) & (s_instance(ARG1, CLASS) & (s_instance(ARG2, CLASS) & (~ (ARG1 = ARG2))))) => (~ (s_AssignmentFn2(FUN, ARG1) = s_AssignmentFn2(FUN, ARG2)))))))))).

/*
(instance SequenceFunction SetOrClass)
*/
fof(a7498,axiom,s_instance(s_SequenceFunction, s_SetOrClass)).

/*
(instance OneToOneFunction SetOrClass)
*/
fof(a7499,axiom,s_instance(s_OneToOneFunction, s_SetOrClass)).

/*
(subclass SequenceFunction OneToOneFunction)
*/
fof(a7500,axiom,s_subclass(s_SequenceFunction, s_OneToOneFunction)).

/*
(forall (?CLASS ?SEQ)
 (=> (instance ?CLASS SetOrClass)
  (=> (and (instance ?SEQ SequenceFunction) (range ?SEQ ?CLASS))
   (subclass ?CLASS Integer))))
*/
fof(a7501,axiom,! [CLASS,SEQ] : ((s_instance(CLASS, s_SetOrClass) => ((s_instance(SEQ, s_SequenceFunction) & s_range(SEQ, CLASS)) => s_subclass(CLASS, s_Integer))))).

/*
(subclass BinaryFunction Function)
*/
fof(a7502,axiom,s_subclass(s_BinaryFunction, s_Function)).

/*
(subclass BinaryFunction TernaryRelation)
*/
fof(a7503,axiom,s_subclass(s_BinaryFunction, s_TernaryRelation)).

/*
(subclass BinaryFunction InheritableRelation)
*/
fof(a7504,axiom,s_subclass(s_BinaryFunction, s_InheritableRelation)).

/*
(forall (?FUNCTION)
 (=> (instance ?FUNCTION BinaryFunction) (valence ?FUNCTION 2)))
*/
fof(a7505,axiom,! [FUNCTION] : ((s_instance(FUNCTION, s_BinaryFunction) => s_valence(FUNCTION, 2)))).

/*
(subclass AssociativeFunction BinaryFunction)
*/
fof(a7506,axiom,s_subclass(s_AssociativeFunction, s_BinaryFunction)).

/*
(forall (?CLASS ?FUNCTION)
 (forall (?INST1 ?INST2 ?INST3)
  (=>
   (and (instance ?INST3 Function) (instance ?INST2 Function)
        (instance ?INST1 Function))
   (=> (instance ?CLASS SetOrClass)
    (=> (instance ?FUNCTION AssociativeFunction)
     (=>
      (and (domain ?FUNCTION 1 ?CLASS)
           (and (instance ?INST1 ?CLASS)
                (and (instance ?INST2 ?CLASS)
                     (instance ?INST3 ?CLASS))))
      (equal (AssignmentFn3 ?FUNCTION ?INST1
              (AssignmentFn3 ?FUNCTION ?INST2 ?INST3))
             (AssignmentFn3 ?FUNCTION
              (AssignmentFn3 ?FUNCTION ?INST1 ?INST2) ?INST3))))))))
*/
fof(a7507,axiom,! [CLASS,FUNCTION] : (! [INST1,INST2,INST3] : (((s_instance(INST3, s_Function) & s_instance(INST2, s_Function) & s_instance(INST1, s_Function)) => (s_instance(CLASS, s_SetOrClass) => (s_instance(FUNCTION, s_AssociativeFunction) => ((s_domain(FUNCTION, 1, CLASS) & (s_instance(INST1, CLASS) & (s_instance(INST2, CLASS) & s_instance(INST3, CLASS)))) => (s_AssignmentFn3(FUNCTION, INST1, s_AssignmentFn3(FUNCTION, INST2, INST3)) = s_AssignmentFn3(FUNCTION, s_AssignmentFn3(FUNCTION, INST1, INST2), INST3))))))))).

/*
(subclass CommutativeFunction BinaryFunction)
*/
fof(a7508,axiom,s_subclass(s_CommutativeFunction, s_BinaryFunction)).

/*
(forall (?CLASS ?FUNCTION)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Function) (instance ?INST1 Function))
   (=> (instance ?CLASS SetOrClass)
    (=> (instance ?FUNCTION CommutativeFunction)
     (=>
      (and (domain ?FUNCTION 1 ?CLASS)
           (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS)))
      (equal (AssignmentFn3 ?FUNCTION ?INST1 ?INST2)
             (AssignmentFn3 ?FUNCTION ?INST2 ?INST1))))))))
*/
fof(a7509,axiom,! [CLASS,FUNCTION] : (! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_instance(INST1, s_Function)) => (s_instance(CLASS, s_SetOrClass) => (s_instance(FUNCTION, s_CommutativeFunction) => ((s_domain(FUNCTION, 1, CLASS) & (s_instance(INST1, CLASS) & s_instance(INST2, CLASS))) => (s_AssignmentFn3(FUNCTION, INST1, INST2) = s_AssignmentFn3(FUNCTION, INST2, INST1))))))))).

/*
(subclass TernaryFunction Function)
*/
fof(a7510,axiom,s_subclass(s_TernaryFunction, s_Function)).

/*
(subclass TernaryFunction QuaternaryRelation)
*/
fof(a7511,axiom,s_subclass(s_TernaryFunction, s_QuaternaryRelation)).

/*
(instance TernaryFunction SetOrClass)
*/
fof(a7512,axiom,s_instance(s_TernaryFunction, s_SetOrClass)).

/*
(subclass TernaryFunction InheritableRelation)
*/
fof(a7513,axiom,s_subclass(s_TernaryFunction, s_InheritableRelation)).

/*
(forall (?FUNCTION)
 (=> (instance ?FUNCTION TernaryFunction) (valence ?FUNCTION 3)))
*/
fof(a7514,axiom,! [FUNCTION] : ((s_instance(FUNCTION, s_TernaryFunction) => s_valence(FUNCTION, 3)))).

/*
(subclass QuaternaryFunction Function)
*/
fof(a7515,axiom,s_subclass(s_QuaternaryFunction, s_Function)).

/*
(subclass QuaternaryFunction QuintaryRelation)
*/
fof(a7516,axiom,s_subclass(s_QuaternaryFunction, s_QuintaryRelation)).

/*
(subclass QuaternaryFunction InheritableRelation)
*/
fof(a7517,axiom,s_subclass(s_QuaternaryFunction, s_InheritableRelation)).

/*
(forall (?FUNCTION)
 (=> (instance ?FUNCTION QuaternaryFunction) (valence ?FUNCTION 4)))
*/
fof(a7518,axiom,! [FUNCTION] : ((s_instance(FUNCTION, s_QuaternaryFunction) => s_valence(FUNCTION, 4)))).

/*
(instance ContinuousFunction SetOrClass)
*/
fof(a7519,axiom,s_instance(s_ContinuousFunction, s_SetOrClass)).

/*
(subclass ContinuousFunction Function)
*/
fof(a7520,axiom,s_subclass(s_ContinuousFunction, s_Function)).

/*
(subclass BinaryPredicate Predicate)
*/
fof(a7521,axiom,s_subclass(s_BinaryPredicate, s_Predicate)).

/*
(instance BinaryRelation SetOrClass)
*/
fof(a7522,axiom,s_instance(s_BinaryRelation, s_SetOrClass)).

/*
(subclass BinaryPredicate BinaryRelation)
*/
fof(a7523,axiom,s_subclass(s_BinaryPredicate, s_BinaryRelation)).

/*
(subclass BinaryPredicate InheritableRelation)
*/
fof(a7524,axiom,s_subclass(s_BinaryPredicate, s_InheritableRelation)).

/*
(forall (?REL) (=> (instance ?REL BinaryPredicate) (valence ?REL 2)))
*/
fof(a7525,axiom,! [REL] : ((s_instance(REL, s_BinaryPredicate) => s_valence(REL, 2)))).

/*
(subclass TernaryPredicate Predicate)
*/
fof(a7526,axiom,s_subclass(s_TernaryPredicate, s_Predicate)).

/*
(instance TernaryRelation SetOrClass)
*/
fof(a7527,axiom,s_instance(s_TernaryRelation, s_SetOrClass)).

/*
(subclass TernaryPredicate TernaryRelation)
*/
fof(a7528,axiom,s_subclass(s_TernaryPredicate, s_TernaryRelation)).

/*
(subclass TernaryPredicate InheritableRelation)
*/
fof(a7529,axiom,s_subclass(s_TernaryPredicate, s_InheritableRelation)).

/*
(forall (?REL) (=> (instance ?REL TernaryPredicate) (valence ?REL 3)))
*/
fof(a7530,axiom,! [REL] : ((s_instance(REL, s_TernaryPredicate) => s_valence(REL, 3)))).

/*
(subclass QuaternaryPredicate Predicate)
*/
fof(a7531,axiom,s_subclass(s_QuaternaryPredicate, s_Predicate)).

/*
(instance QuaternaryRelation SetOrClass)
*/
fof(a7532,axiom,s_instance(s_QuaternaryRelation, s_SetOrClass)).

/*
(subclass QuaternaryPredicate QuaternaryRelation)
*/
fof(a7533,axiom,s_subclass(s_QuaternaryPredicate, s_QuaternaryRelation)).

/*
(subclass QuaternaryPredicate InheritableRelation)
*/
fof(a7534,axiom,s_subclass(s_QuaternaryPredicate, s_InheritableRelation)).

/*
(forall (?REL)
 (=> (instance ?REL QuaternaryPredicate) (valence ?REL 4)))
*/
fof(a7535,axiom,! [REL] : ((s_instance(REL, s_QuaternaryPredicate) => s_valence(REL, 4)))).

/*
(subclass QuintaryPredicate Predicate)
*/
fof(a7536,axiom,s_subclass(s_QuintaryPredicate, s_Predicate)).

/*
(instance QuintaryRelation SetOrClass)
*/
fof(a7537,axiom,s_instance(s_QuintaryRelation, s_SetOrClass)).

/*
(subclass QuintaryPredicate QuintaryRelation)
*/
fof(a7538,axiom,s_subclass(s_QuintaryPredicate, s_QuintaryRelation)).

/*
(instance QuintaryPredicate SetOrClass)
*/
fof(a7539,axiom,s_instance(s_QuintaryPredicate, s_SetOrClass)).

/*
(subclass QuintaryPredicate InheritableRelation)
*/
fof(a7540,axiom,s_subclass(s_QuintaryPredicate, s_InheritableRelation)).

/*
(forall (?REL) (=> (instance ?REL QuintaryPredicate) (valence ?REL 5)))
*/
fof(a7541,axiom,! [REL] : ((s_instance(REL, s_QuintaryPredicate) => s_valence(REL, 5)))).

/*
(subclass VariableArityRelation Relation)
*/
fof(a7542,axiom,s_subclass(s_VariableArityRelation, s_Relation)).

/*
(forall (?REL)
 (forall (?INT)
  (=> (instance ?INT PositiveInteger)
   (=> (instance ?REL VariableArityRelation)
    (not (valence ?REL ?INT))))))
*/
fof(a7543,axiom,! [REL] : (! [INT] : ((s_instance(INT, s_PositiveInteger) => (s_instance(REL, s_VariableArityRelation) => (~ s_valence(REL, INT))))))).

/*
(instance Relation SetOrClass)
*/
fof(a7544,axiom,s_instance(s_Relation, s_SetOrClass)).

/*
(subclass RelationExtendedToQuantities Relation)
*/
fof(a7545,axiom,s_subclass(s_RelationExtendedToQuantities, s_Relation)).

/*
(instance InheritableRelation SetOrClass)
*/
fof(a7546,axiom,s_instance(s_InheritableRelation, s_SetOrClass)).

/*
(subclass RelationExtendedToQuantities InheritableRelation)
*/
fof(a7547,axiom,s_subclass(s_RelationExtendedToQuantities, s_InheritableRelation)).

/*
(instance LogicalOperator SetOrClass)
*/
fof(a7548,axiom,s_instance(s_LogicalOperator, s_SetOrClass)).

/*
(instance Predicate SetOrClass)
*/
fof(a7549,axiom,s_instance(s_Predicate, s_SetOrClass)).

/*
(subclass LogicalOperator Predicate)
*/
fof(a7550,axiom,s_subclass(s_LogicalOperator, s_Predicate)).

/*
(subclass Proposition Abstract)
*/
fof(a7551,axiom,s_subclass(s_Proposition, s_Abstract)).

/*
(instance closedOn BinaryPredicate)
*/
fof(a7552,axiom,s_instance(s_closedOn_m, s_BinaryPredicate)).

/*
(instance closedOn AsymmetricRelation)
*/
fof(a7553,axiom,s_instance(s_closedOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS ?FUNCTION)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (closedOn ?FUNCTION ?CLASS)
          (instance ?FUNCTION UnaryFunction))
     (=> (instance ?INST ?CLASS)
      (instance (AssignmentFn2 ?FUNCTION ?INST) ?CLASS)))))))
*/
fof(a7554,axiom,! [CLASS,FUNCTION] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_closedOn(FUNCTION, CLASS) & s_instance(FUNCTION, s_UnaryFunction)) => (s_instance(INST, CLASS) => s_instance(s_AssignmentFn2(FUNCTION, INST), CLASS)))))))).

/*
(forall (?CLASS ?FUNCTION)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Function) (instance ?INST1 Function))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (closedOn ?FUNCTION ?CLASS)
          (instance ?FUNCTION BinaryFunction))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (instance (AssignmentFn3 ?FUNCTION ?INST1 ?INST2) ?CLASS)))))))
*/
fof(a7555,axiom,! [CLASS,FUNCTION] : (! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_instance(INST1, s_Function)) => (s_instance(CLASS, s_SetOrClass) => ((s_closedOn(FUNCTION, CLASS) & s_instance(FUNCTION, s_BinaryFunction)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => s_instance(s_AssignmentFn3(FUNCTION, INST1, INST2), CLASS)))))))).

/*
(instance reflexiveOn BinaryPredicate)
*/
fof(a7556,axiom,s_instance(s_reflexiveOn_m, s_BinaryPredicate)).

/*
(instance reflexiveOn AsymmetricRelation)
*/
fof(a7557,axiom,s_instance(s_reflexiveOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn preventsSubclass ?CLASS)
          (instance preventsSubclass Predicate))
     (=> (instance ?INST ?CLASS) (preventsSubclass ?INST ?INST)))))))
*/
fof(a7558,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_preventsSubclass_m, CLASS) & s_instance(s_preventsSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => s_preventsSubclass(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Man)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn uncle ?CLASS) (instance uncle Predicate))
     (=> (instance ?INST ?CLASS) (uncle ?INST ?INST)))))))
*/
fof(a7559,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Man) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_uncle_m, CLASS) & s_instance(s_uncle_m, s_Predicate)) => (s_instance(INST, CLASS) => s_uncle(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelephonyDevice)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telecomContactDevice ?CLASS)
          (instance telecomContactDevice Predicate))
     (=> (instance ?INST ?CLASS)
      (telecomContactDevice ?INST ?INST)))))))
*/
fof(a7560,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelephonyDevice) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telecomContactDevice_m, CLASS) & s_instance(s_telecomContactDevice_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telecomContactDevice(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn top ?CLASS) (instance top Predicate))
     (=> (instance ?INST ?CLASS) (top ?INST ?INST)))))))
*/
fof(a7561,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_top_m, CLASS) & s_instance(s_top_m, s_Predicate)) => (s_instance(INST, CLASS) => s_top(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn deceptiveIdentifier ?CLASS)
          (instance deceptiveIdentifier Predicate))
     (=> (instance ?INST ?CLASS) (deceptiveIdentifier ?INST ?INST)))))))
*/
fof(a7562,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_deceptiveIdentifier_m, CLASS) & s_instance(s_deceptiveIdentifier_m, s_Predicate)) => (s_instance(INST, CLASS) => s_deceptiveIdentifier(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn faxNumber ?CLASS)
          (instance faxNumber Predicate))
     (=> (instance ?INST ?CLASS) (faxNumber ?INST ?INST)))))))
*/
fof(a7563,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_faxNumber_m, CLASS) & s_instance(s_faxNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_faxNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GraphElement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn graphPart ?CLASS)
          (instance graphPart Predicate))
     (=> (instance ?INST ?CLASS) (graphPart ?INST ?INST)))))))
*/
fof(a7564,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GraphElement) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_graphPart_m, CLASS) & s_instance(s_graphPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_graphPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn occupation ?CLASS)
          (instance occupation Predicate))
     (=> (instance ?INST ?CLASS) (occupation ?INST ?INST)))))))
*/
fof(a7565,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_occupation_m, CLASS) & s_instance(s_occupation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_occupation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn connected ?CLASS)
          (instance connected Predicate))
     (=> (instance ?INST ?CLASS) (connected ?INST ?INST)))))))
*/
fof(a7566,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_connected_m, CLASS) & s_instance(s_connected_m, s_Predicate)) => (s_instance(INST, CLASS) => s_connected(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn element ?CLASS) (instance element Predicate))
     (=> (instance ?INST ?CLASS) (element ?INST ?INST)))))))
*/
fof(a7567,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_element_m, CLASS) & s_instance(s_element_m, s_Predicate)) => (s_instance(INST, CLASS) => s_element(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn smaller ?CLASS) (instance smaller Predicate))
     (=> (instance ?INST ?CLASS) (smaller ?INST ?INST)))))))
*/
fof(a7568,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_smaller_m, CLASS) & s_instance(s_smaller_m, s_Predicate)) => (s_instance(INST, CLASS) => s_smaller(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn inverse ?CLASS) (instance inverse Predicate))
     (=> (instance ?INST ?CLASS) (inverse ?INST ?INST)))))))
*/
fof(a7569,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_inverse_m, CLASS) & s_instance(s_inverse_m, s_Predicate)) => (s_instance(INST, CLASS) => s_inverse(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postNeighborhood ?CLASS)
          (instance postNeighborhood Predicate))
     (=> (instance ?INST ?CLASS) (postNeighborhood ?INST ?INST)))))))
*/
fof(a7570,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postNeighborhood_m, CLASS) & s_instance(s_postNeighborhood_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postNeighborhood(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Argument)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn premise ?CLASS) (instance premise Predicate))
     (=> (instance ?INST ?CLASS) (premise ?INST ?INST)))))))
*/
fof(a7571,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Argument) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_premise_m, CLASS) & s_instance(s_premise_m, s_Predicate)) => (s_instance(INST, CLASS) => s_premise(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn relatedInternalConcept ?CLASS)
          (instance relatedInternalConcept Predicate))
     (=> (instance ?INST ?CLASS)
      (relatedInternalConcept ?INST ?INST)))))))
*/
fof(a7572,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_relatedInternalConcept_m, CLASS) & s_instance(s_relatedInternalConcept_m, s_Predicate)) => (s_instance(INST, CLASS) => s_relatedInternalConcept(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telecomCoreNumber ?CLASS)
          (instance telecomCoreNumber Predicate))
     (=> (instance ?INST ?CLASS) (telecomCoreNumber ?INST ?INST)))))))
*/
fof(a7573,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telecomCoreNumber_m, CLASS) & s_instance(s_telecomCoreNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telecomCoreNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn acquaintance ?CLASS)
          (instance acquaintance Predicate))
     (=> (instance ?INST ?CLASS) (acquaintance ?INST ?INST)))))))
*/
fof(a7574,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_acquaintance_m, CLASS) & s_instance(s_acquaintance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_acquaintance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn meetsTemporally ?CLASS)
          (instance meetsTemporally Predicate))
     (=> (instance ?INST ?CLASS) (meetsTemporally ?INST ?INST)))))))
*/
fof(a7575,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_meetsTemporally_m, CLASS) & s_instance(s_meetsTemporally_m, s_Predicate)) => (s_instance(INST, CLASS) => s_meetsTemporally(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn relatedEvent ?CLASS)
          (instance relatedEvent Predicate))
     (=> (instance ?INST ?CLASS) (relatedEvent ?INST ?INST)))))))
*/
fof(a7576,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_relatedEvent_m, CLASS) & s_instance(s_relatedEvent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_relatedEvent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Argument)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn conclusion ?CLASS)
          (instance conclusion Predicate))
     (=> (instance ?INST ?CLASS) (conclusion ?INST ?INST)))))))
*/
fof(a7577,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Argument) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_conclusion_m, CLASS) & s_instance(s_conclusion_m, s_Predicate)) => (s_instance(INST, CLASS) => s_conclusion(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Meat))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn meatOfAnimal ?CLASS)
          (instance meatOfAnimal Predicate))
     (=> (instance ?INST ?CLASS) (meatOfAnimal ?INST ?INST)))))))
*/
fof(a7578,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Meat)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_meatOfAnimal_m, CLASS) & s_instance(s_meatOfAnimal_m, s_Predicate)) => (s_instance(INST, CLASS) => s_meatOfAnimal(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST AchievingControl)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn gainsControl ?CLASS)
          (instance gainsControl Predicate))
     (=> (instance ?INST ?CLASS) (gainsControl ?INST ?INST)))))))
*/
fof(a7579,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_AchievingControl) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_gainsControl_m, CLASS) & s_instance(s_gainsControl_m, s_Predicate)) => (s_instance(INST, CLASS) => s_gainsControl(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Hole)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn hole ?CLASS) (instance hole Predicate))
     (=> (instance ?INST ?CLASS) (hole ?INST ?INST)))))))
*/
fof(a7580,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Hole) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hole_m, CLASS) & s_instance(s_hole_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hole(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Animal)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn wears ?CLASS) (instance wears Predicate))
     (=> (instance ?INST ?CLASS) (wears ?INST ?INST)))))))
*/
fof(a7581,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Animal) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_wears_m, CLASS) & s_instance(s_wears_m, s_Predicate)) => (s_instance(INST, CLASS) => s_wears(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Character)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn inString ?CLASS) (instance inString Predicate))
     (=> (instance ?INST ?CLASS) (inString ?INST ?INST)))))))
*/
fof(a7582,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Character) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_inString_m, CLASS) & s_instance(s_inString_m, s_Predicate)) => (s_instance(INST, CLASS) => s_inString(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telephoneNumber ?CLASS)
          (instance telephoneNumber Predicate))
     (=> (instance ?INST ?CLASS) (telephoneNumber ?INST ?INST)))))))
*/
fof(a7583,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telephoneNumber_m, CLASS) & s_instance(s_telephoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telephoneNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST MusicalTone)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn soundFrequency ?CLASS)
          (instance soundFrequency Predicate))
     (=> (instance ?INST ?CLASS) (soundFrequency ?INST ?INST)))))))
*/
fof(a7584,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_MusicalTone) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_soundFrequency_m, CLASS) & s_instance(s_soundFrequency_m, s_Predicate)) => (s_instance(INST, CLASS) => s_soundFrequency(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OneDimensionalFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn lineMeasure ?CLASS)
          (instance lineMeasure Predicate))
     (=> (instance ?INST ?CLASS) (lineMeasure ?INST ?INST)))))))
*/
fof(a7585,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OneDimensionalFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_lineMeasure_m, CLASS) & s_instance(s_lineMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_lineMeasure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postCity ?CLASS) (instance postCity Predicate))
     (=> (instance ?INST ?CLASS) (postCity ?INST ?INST)))))))
*/
fof(a7586,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postCity_m, CLASS) & s_instance(s_postCity_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postCity(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST PureSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn meltingPoint ?CLASS)
          (instance meltingPoint Predicate))
     (=> (instance ?INST ?CLASS) (meltingPoint ?INST ?INST)))))))
*/
fof(a7587,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_PureSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_meltingPoint_m, CLASS) & s_instance(s_meltingPoint_m, s_Predicate)) => (s_instance(INST, CLASS) => s_meltingPoint(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TwoDimensionalAngle)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn angularMeasure ?CLASS)
          (instance angularMeasure Predicate))
     (=> (instance ?INST ?CLASS) (angularMeasure ?INST ?INST)))))))
*/
fof(a7588,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TwoDimensionalAngle) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_angularMeasure_m, CLASS) & s_instance(s_angularMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_angularMeasure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Attribute)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subAttribute ?CLASS)
          (instance subAttribute Predicate))
     (=> (instance ?INST ?CLASS) (subAttribute ?INST ?INST)))))))
*/
fof(a7589,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subAttribute_m, CLASS) & s_instance(s_subAttribute_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subAttribute(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn totalOrderingOn ?CLASS)
          (instance totalOrderingOn Predicate))
     (=> (instance ?INST ?CLASS) (totalOrderingOn ?INST ?INST)))))))
*/
fof(a7590,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_totalOrderingOn_m, CLASS) & s_instance(s_totalOrderingOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_totalOrderingOn(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn resourceExhausted ?CLASS)
          (instance resourceExhausted Predicate))
     (=> (instance ?INST ?CLASS) (resourceExhausted ?INST ?INST)))))))
*/
fof(a7591,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_resourceExhausted_m, CLASS) & s_instance(s_resourceExhausted_m, s_Predicate)) => (s_instance(INST, CLASS) => s_resourceExhausted(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn believes ?CLASS) (instance believes Predicate))
     (=> (instance ?INST ?CLASS) (believes ?INST ?INST)))))))
*/
fof(a7592,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_believes_m, CLASS) & s_instance(s_believes_m, s_Predicate)) => (s_instance(INST, CLASS) => s_believes(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn eventPartlyLocated ?CLASS)
          (instance eventPartlyLocated Predicate))
     (=> (instance ?INST ?CLASS) (eventPartlyLocated ?INST ?INST)))))))
*/
fof(a7593,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_eventPartlyLocated_m, CLASS) & s_instance(s_eventPartlyLocated_m, s_Predicate)) => (s_instance(INST, CLASS) => s_eventPartlyLocated(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn familyRelation ?CLASS)
          (instance familyRelation Predicate))
     (=> (instance ?INST ?CLASS) (familyRelation ?INST ?INST)))))))
*/
fof(a7594,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_familyRelation_m, CLASS) & s_instance(s_familyRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_familyRelation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn increasesLikelihood ?CLASS)
          (instance increasesLikelihood Predicate))
     (=> (instance ?INST ?CLASS) (increasesLikelihood ?INST ?INST)))))))
*/
fof(a7595,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_increasesLikelihood_m, CLASS) & s_instance(s_increasesLikelihood_m, s_Predicate)) => (s_instance(INST, CLASS) => s_increasesLikelihood(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn stepmother ?CLASS)
          (instance stepmother Predicate))
     (=> (instance ?INST ?CLASS) (stepmother ?INST ?INST)))))))
*/
fof(a7596,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_stepmother_m, CLASS) & s_instance(s_stepmother_m, s_Predicate)) => (s_instance(INST, CLASS) => s_stepmother(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Artifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn equipmentType ?CLASS)
          (instance equipmentType Predicate))
     (=> (instance ?INST ?CLASS) (equipmentType ?INST ?INST)))))))
*/
fof(a7597,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Artifact) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_equipmentType_m, CLASS) & s_instance(s_equipmentType_m, s_Predicate)) => (s_instance(INST, CLASS) => s_equipmentType(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn mutualStranger ?CLASS)
          (instance mutualStranger Predicate))
     (=> (instance ?INST ?CLASS) (mutualStranger ?INST ?INST)))))))
*/
fof(a7598,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_mutualStranger_m, CLASS) & s_instance(s_mutualStranger_m, s_Predicate)) => (s_instance(INST, CLASS) => s_mutualStranger(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn givenName ?CLASS)
          (instance givenName Predicate))
     (=> (instance ?INST ?CLASS) (givenName ?INST ?INST)))))))
*/
fof(a7599,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_givenName_m, CLASS) & s_instance(s_givenName_m, s_Predicate)) => (s_instance(INST, CLASS) => s_givenName(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PlacingUnderArrest)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn arrested ?CLASS) (instance arrested Predicate))
     (=> (instance ?INST ?CLASS) (arrested ?INST ?INST)))))))
*/
fof(a7600,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PlacingUnderArrest) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_arrested_m, CLASS) & s_instance(s_arrested_m, s_Predicate)) => (s_instance(INST, CLASS) => s_arrested(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn policyOwner ?CLASS)
          (instance policyOwner Predicate))
     (=> (instance ?INST ?CLASS) (policyOwner ?INST ?INST)))))))
*/
fof(a7601,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_policyOwner_m, CLASS) & s_instance(s_policyOwner_m, s_Predicate)) => (s_instance(INST, CLASS) => s_policyOwner(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn expects ?CLASS) (instance expects Predicate))
     (=> (instance ?INST ?CLASS) (expects ?INST ?INST)))))))
*/
fof(a7602,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_expects_m, CLASS) & s_instance(s_expects_m, s_Predicate)) => (s_instance(INST, CLASS) => s_expects(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Motion)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn path ?CLASS) (instance path Predicate))
     (=> (instance ?INST ?CLASS) (path ?INST ?INST)))))))
*/
fof(a7603,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Motion) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_path_m, CLASS) & s_instance(s_path_m, s_Predicate)) => (s_instance(INST, CLASS) => s_path(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn traverses ?CLASS)
          (instance traverses Predicate))
     (=> (instance ?INST ?CLASS) (traverses ?INST ?INST)))))))
*/
fof(a7604,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_traverses_m, CLASS) & s_instance(s_traverses_m, s_Predicate)) => (s_instance(INST, CLASS) => s_traverses(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postStreetNumber ?CLASS)
          (instance postStreetNumber Predicate))
     (=> (instance ?INST ?CLASS) (postStreetNumber ?INST ?INST)))))))
*/
fof(a7605,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postStreetNumber_m, CLASS) & s_instance(s_postStreetNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postStreetNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn middleName ?CLASS)
          (instance middleName Predicate))
     (=> (instance ?INST ?CLASS) (middleName ?INST ?INST)))))))
*/
fof(a7606,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_middleName_m, CLASS) & s_instance(s_middleName_m, s_Predicate)) => (s_instance(INST, CLASS) => s_middleName(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn birthdate ?CLASS)
          (instance birthdate Predicate))
     (=> (instance ?INST ?CLASS) (birthdate ?INST ?INST)))))))
*/
fof(a7607,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_birthdate_m, CLASS) & s_instance(s_birthdate_m, s_Predicate)) => (s_instance(INST, CLASS) => s_birthdate(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn cooccur ?CLASS) (instance cooccur Predicate))
     (=> (instance ?INST ?CLASS) (cooccur ?INST ?INST)))))))
*/
fof(a7608,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_cooccur_m, CLASS) & s_instance(s_cooccur_m, s_Predicate)) => (s_instance(INST, CLASS) => s_cooccur(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn coworker ?CLASS) (instance coworker Predicate))
     (=> (instance ?INST ?CLASS) (coworker ?INST ?INST)))))))
*/
fof(a7609,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_coworker_m, CLASS) & s_instance(s_coworker_m, s_Predicate)) => (s_instance(INST, CLASS) => s_coworker(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn tenant ?CLASS) (instance tenant Predicate))
     (=> (instance ?INST ?CLASS) (tenant ?INST ?INST)))))))
*/
fof(a7610,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_tenant_m, CLASS) & s_instance(s_tenant_m, s_Predicate)) => (s_instance(INST, CLASS) => s_tenant(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn weight ?CLASS) (instance weight Predicate))
     (=> (instance ?INST ?CLASS) (weight ?INST ?INST)))))))
*/
fof(a7611,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_weight_m, CLASS) & s_instance(s_weight_m, s_Predicate)) => (s_instance(INST, CLASS) => s_weight(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn capacity ?CLASS) (instance capacity Predicate))
     (=> (instance ?INST ?CLASS) (capacity ?INST ?INST)))))))
*/
fof(a7612,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_capacity_m, CLASS) & s_instance(s_capacity_m, s_Predicate)) => (s_instance(INST, CLASS) => s_capacity(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PureSubstance)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn protonNumber ?CLASS)
          (instance protonNumber Predicate))
     (=> (instance ?INST ?CLASS) (protonNumber ?INST ?INST)))))))
*/
fof(a7613,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PureSubstance) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_protonNumber_m, CLASS) & s_instance(s_protonNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_protonNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn personalPhoneNumber ?CLASS)
          (instance personalPhoneNumber Predicate))
     (=> (instance ?INST ?CLASS) (personalPhoneNumber ?INST ?INST)))))))
*/
fof(a7614,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_personalPhoneNumber_m, CLASS) & s_instance(s_personalPhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_personalPhoneNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn initialList ?CLASS)
          (instance initialList Predicate))
     (=> (instance ?INST ?CLASS) (initialList ?INST ?INST)))))))
*/
fof(a7615,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_initialList_m, CLASS) & s_instance(s_initialList_m, s_Predicate)) => (s_instance(INST, CLASS) => s_initialList(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST MeasuringDevice)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn measurementReading ?CLASS)
          (instance measurementReading Predicate))
     (=> (instance ?INST ?CLASS) (measurementReading ?INST ?INST)))))))
*/
fof(a7616,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_MeasuringDevice) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_measurementReading_m, CLASS) & s_instance(s_measurementReading_m, s_Predicate)) => (s_instance(INST, CLASS) => s_measurementReading(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn agent ?CLASS) (instance agent Predicate))
     (=> (instance ?INST ?CLASS) (agent ?INST ?INST)))))))
*/
fof(a7617,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_agent_m, CLASS) & s_instance(s_agent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_agent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST OrganicObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn secretesSubstance ?CLASS)
          (instance secretesSubstance Predicate))
     (=> (instance ?INST ?CLASS) (secretesSubstance ?INST ?INST)))))))
*/
fof(a7618,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_OrganicObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_secretesSubstance_m, CLASS) & s_instance(s_secretesSubstance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_secretesSubstance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn equivalenceRelationOn ?CLASS)
          (instance equivalenceRelationOn Predicate))
     (=> (instance ?INST ?CLASS)
      (equivalenceRelationOn ?INST ?INST)))))))
*/
fof(a7619,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_equivalenceRelationOn_m, CLASS) & s_instance(s_equivalenceRelationOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_equivalenceRelationOn(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn axis ?CLASS) (instance axis Predicate))
     (=> (instance ?INST ?CLASS) (axis ?INST ?INST)))))))
*/
fof(a7620,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_axis_m, CLASS) & s_instance(s_axis_m, s_Predicate)) => (s_instance(INST, CLASS) => s_axis(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn allegiance ?CLASS)
          (instance allegiance Predicate))
     (=> (instance ?INST ?CLASS) (allegiance ?INST ?INST)))))))
*/
fof(a7621,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_allegiance_m, CLASS) & s_instance(s_allegiance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_allegiance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContactSite)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn siteForContact ?CLASS)
          (instance siteForContact Predicate))
     (=> (instance ?INST ?CLASS) (siteForContact ?INST ?INST)))))))
*/
fof(a7622,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContactSite) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_siteForContact_m, CLASS) & s_instance(s_siteForContact_m, s_Predicate)) => (s_instance(INST, CLASS) => s_siteForContact(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ServiceProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn serviceProvider ?CLASS)
          (instance serviceProvider Predicate))
     (=> (instance ?INST ?CLASS) (serviceProvider ?INST ?INST)))))))
*/
fof(a7623,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ServiceProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_serviceProvider_m, CLASS) & s_instance(s_serviceProvider_m, s_Predicate)) => (s_instance(INST, CLASS) => s_serviceProvider(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PureSubstance)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn electronNumber ?CLASS)
          (instance electronNumber Predicate))
     (=> (instance ?INST ?CLASS) (electronNumber ?INST ?INST)))))))
*/
fof(a7624,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PureSubstance) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_electronNumber_m, CLASS) & s_instance(s_electronNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_electronNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST AchievingControl)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn controlled ?CLASS)
          (instance controlled Predicate))
     (=> (instance ?INST ?CLASS) (controlled ?INST ?INST)))))))
*/
fof(a7625,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_AchievingControl) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_controlled_m, CLASS) & s_instance(s_controlled_m, s_Predicate)) => (s_instance(INST, CLASS) => s_controlled(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn structure ?CLASS)
          (instance structure Predicate))
     (=> (instance ?INST ?CLASS) (structure ?INST ?INST)))))))
*/
fof(a7626,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_structure_m, CLASS) & s_instance(s_structure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_structure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn time ?CLASS) (instance time Predicate))
     (=> (instance ?INST ?CLASS) (time ?INST ?INST)))))))
*/
fof(a7627,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_time_m, CLASS) & s_instance(s_time_m, s_Predicate)) => (s_instance(INST, CLASS) => s_time(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Woman)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn niece ?CLASS) (instance niece Predicate))
     (=> (instance ?INST ?CLASS) (niece ?INST ?INST)))))))
*/
fof(a7628,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Woman) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_niece_m, CLASS) & s_instance(s_niece_m, s_Predicate)) => (s_instance(INST, CLASS) => s_niece(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postDistrict ?CLASS)
          (instance postDistrict Predicate))
     (=> (instance ?INST ?CLASS) (postDistrict ?INST ?INST)))))))
*/
fof(a7629,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postDistrict_m, CLASS) & s_instance(s_postDistrict_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postDistrict(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Motion)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn moves ?CLASS) (instance moves Predicate))
     (=> (instance ?INST ?CLASS) (moves ?INST ?INST)))))))
*/
fof(a7630,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Motion) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_moves_m, CLASS) & s_instance(s_moves_m, s_Predicate)) => (s_instance(INST, CLASS) => s_moves(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn causes ?CLASS) (instance causes Predicate))
     (=> (instance ?INST ?CLASS) (causes ?INST ?INST)))))))
*/
fof(a7631,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_causes_m, CLASS) & s_instance(s_causes_m, s_Predicate)) => (s_instance(INST, CLASS) => s_causes(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Man)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn nephew ?CLASS) (instance nephew Predicate))
     (=> (instance ?INST ?CLASS) (nephew ?INST ?INST)))))))
*/
fof(a7632,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Man) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_nephew_m, CLASS) & s_instance(s_nephew_m, s_Predicate)) => (s_instance(INST, CLASS) => s_nephew(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Abstract)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn abstractPart ?CLASS)
          (instance abstractPart Predicate))
     (=> (instance ?INST ?CLASS) (abstractPart ?INST ?INST)))))))
*/
fof(a7633,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Abstract) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_abstractPart_m, CLASS) & s_instance(s_abstractPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_abstractPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hasAward ?CLASS) (instance hasAward Predicate))
     (=> (instance ?INST ?CLASS) (hasAward ?INST ?INST)))))))
*/
fof(a7634,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hasAward_m, CLASS) & s_instance(s_hasAward_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hasAward(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn desires ?CLASS) (instance desires Predicate))
     (=> (instance ?INST ?CLASS) (desires ?INST ?INST)))))))
*/
fof(a7635,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_desires_m, CLASS) & s_instance(s_desires_m, s_Predicate)) => (s_instance(INST, CLASS) => s_desires(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Attribute)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn successorAttribute ?CLASS)
          (instance successorAttribute Predicate))
     (=> (instance ?INST ?CLASS) (successorAttribute ?INST ?INST)))))))
*/
fof(a7636,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_successorAttribute_m, CLASS) & s_instance(s_successorAttribute_m, s_Predicate)) => (s_instance(INST, CLASS) => s_successorAttribute(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn workAddress ?CLASS)
          (instance workAddress Predicate))
     (=> (instance ?INST ?CLASS) (workAddress ?INST ?INST)))))))
*/
fof(a7637,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_workAddress_m, CLASS) & s_instance(s_workAddress_m, s_Predicate)) => (s_instance(INST, CLASS) => s_workAddress(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn mobilePhoneNumber ?CLASS)
          (instance mobilePhoneNumber Predicate))
     (=> (instance ?INST ?CLASS) (mobilePhoneNumber ?INST ?INST)))))))
*/
fof(a7638,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_mobilePhoneNumber_m, CLASS) & s_instance(s_mobilePhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_mobilePhoneNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agreement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn agreementExpirationDate ?CLASS)
          (instance agreementExpirationDate Predicate))
     (=> (instance ?INST ?CLASS)
      (agreementExpirationDate ?INST ?INST)))))))
*/
fof(a7639,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agreement) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_agreementExpirationDate_m, CLASS) & s_instance(s_agreementExpirationDate_m, s_Predicate)) => (s_instance(INST, CLASS) => s_agreementExpirationDate(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Collection)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subCollection ?CLASS)
          (instance subCollection Predicate))
     (=> (instance ?INST ?CLASS) (subCollection ?INST ?INST)))))))
*/
fof(a7640,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Collection) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subCollection_m, CLASS) & s_instance(s_subCollection_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subCollection(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn affiliatedOrganization ?CLASS)
          (instance affiliatedOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (affiliatedOrganization ?INST ?INST)))))))
*/
fof(a7641,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_affiliatedOrganization_m, CLASS) & s_instance(s_affiliatedOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => s_affiliatedOrganization(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Text)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn registeredItem ?CLASS)
          (instance registeredItem Predicate))
     (=> (instance ?INST ?CLASS) (registeredItem ?INST ?INST)))))))
*/
fof(a7642,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Text) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_registeredItem_m, CLASS) & s_instance(s_registeredItem_m, s_Predicate)) => (s_instance(INST, CLASS) => s_registeredItem(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GeometricFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn geometricPart ?CLASS)
          (instance geometricPart Predicate))
     (=> (instance ?INST ?CLASS) (geometricPart ?INST ?INST)))))))
*/
fof(a7643,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GeometricFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_geometricPart_m, CLASS) & s_instance(s_geometricPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_geometricPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn fleetSize ?CLASS)
          (instance fleetSize Predicate))
     (=> (instance ?INST ?CLASS) (fleetSize ?INST ?INST)))))))
*/
fof(a7644,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_fleetSize_m, CLASS) & s_instance(s_fleetSize_m, s_Predicate)) => (s_instance(INST, CLASS) => s_fleetSize(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn date ?CLASS) (instance date Predicate))
     (=> (instance ?INST ?CLASS) (date ?INST ?INST)))))))
*/
fof(a7645,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_date_m, CLASS) & s_instance(s_date_m, s_Predicate)) => (s_instance(INST, CLASS) => s_date(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Animal)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn birthplace ?CLASS)
          (instance birthplace Predicate))
     (=> (instance ?INST ?CLASS) (birthplace ?INST ?INST)))))))
*/
fof(a7646,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Animal) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_birthplace_m, CLASS) & s_instance(s_birthplace_m, s_Predicate)) => (s_instance(INST, CLASS) => s_birthplace(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PowerSource)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn voltageMeasure ?CLASS)
          (instance voltageMeasure Predicate))
     (=> (instance ?INST ?CLASS) (voltageMeasure ?INST ?INST)))))))
*/
fof(a7647,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PowerSource) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_voltageMeasure_m, CLASS) & s_instance(s_voltageMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_voltageMeasure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Substance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn material ?CLASS) (instance material Predicate))
     (=> (instance ?INST ?CLASS) (material ?INST ?INST)))))))
*/
fof(a7648,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Substance)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_material_m, CLASS) & s_instance(s_material_m, s_Predicate)) => (s_instance(INST, CLASS) => s_material(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn initialPart ?CLASS)
          (instance initialPart Predicate))
     (=> (instance ?INST ?CLASS) (initialPart ?INST ?INST)))))))
*/
fof(a7649,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_initialPart_m, CLASS) & s_instance(s_initialPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_initialPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn origin ?CLASS) (instance origin Predicate))
     (=> (instance ?INST ?CLASS) (origin ?INST ?INST)))))))
*/
fof(a7650,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_origin_m, CLASS) & s_instance(s_origin_m, s_Predicate)) => (s_instance(INST, CLASS) => s_origin(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn precondition ?CLASS)
          (instance precondition Predicate))
     (=> (instance ?INST ?CLASS) (precondition ?INST ?INST)))))))
*/
fof(a7651,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_precondition_m, CLASS) & s_instance(s_precondition_m, s_Predicate)) => (s_instance(INST, CLASS) => s_precondition(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn irreflexiveOn ?CLASS)
          (instance irreflexiveOn Predicate))
     (=> (instance ?INST ?CLASS) (irreflexiveOn ?INST ?INST)))))))
*/
fof(a7652,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_irreflexiveOn_m, CLASS) & s_instance(s_irreflexiveOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_irreflexiveOn(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn localLongName ?CLASS)
          (instance localLongName Predicate))
     (=> (instance ?INST ?CLASS) (localLongName ?INST ?INST)))))))
*/
fof(a7653,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_localLongName_m, CLASS) & s_instance(s_localLongName_m, s_Predicate)) => (s_instance(INST, CLASS) => s_localLongName(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn deviceState ?CLASS)
          (instance deviceState Predicate))
     (=> (instance ?INST ?CLASS) (deviceState ?INST ?INST)))))))
*/
fof(a7654,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_deviceState_m, CLASS) & s_instance(s_deviceState_m, s_Predicate)) => (s_instance(INST, CLASS) => s_deviceState(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn legalRelation ?CLASS)
          (instance legalRelation Predicate))
     (=> (instance ?INST ?CLASS) (legalRelation ?INST ?INST)))))))
*/
fof(a7655,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_legalRelation_m, CLASS) & s_instance(s_legalRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_legalRelation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn cousin ?CLASS) (instance cousin Predicate))
     (=> (instance ?INST ?CLASS) (cousin ?INST ?INST)))))))
*/
fof(a7656,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_cousin_m, CLASS) & s_instance(s_cousin_m, s_Predicate)) => (s_instance(INST, CLASS) => s_cousin(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn targetInAttack ?CLASS)
          (instance targetInAttack Predicate))
     (=> (instance ?INST ?CLASS) (targetInAttack ?INST ?INST)))))))
*/
fof(a7657,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_targetInAttack_m, CLASS) & s_instance(s_targetInAttack_m, s_Predicate)) => (s_instance(INST, CLASS) => s_targetInAttack(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimePoint)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn beforeOrEqual ?CLASS)
          (instance beforeOrEqual Predicate))
     (=> (instance ?INST ?CLASS) (beforeOrEqual ?INST ?INST)))))))
*/
fof(a7658,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimePoint) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_beforeOrEqual_m, CLASS) & s_instance(s_beforeOrEqual_m, s_Predicate)) => (s_instance(INST, CLASS) => s_beforeOrEqual(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn partyToAgreement ?CLASS)
          (instance partyToAgreement Predicate))
     (=> (instance ?INST ?CLASS) (partyToAgreement ?INST ?INST)))))))
*/
fof(a7659,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_partyToAgreement_m, CLASS) & s_instance(s_partyToAgreement_m, s_Predicate)) => (s_instance(INST, CLASS) => s_partyToAgreement(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn result ?CLASS) (instance result Predicate))
     (=> (instance ?INST ?CLASS) (result ?INST ?INST)))))))
*/
fof(a7660,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_result_m, CLASS) & s_instance(s_result_m, s_Predicate)) => (s_instance(INST, CLASS) => s_result(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn experiencer ?CLASS)
          (instance experiencer Predicate))
     (=> (instance ?INST ?CLASS) (experiencer ?INST ?INST)))))))
*/
fof(a7661,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_experiencer_m, CLASS) & s_instance(s_experiencer_m, s_Predicate)) => (s_instance(INST, CLASS) => s_experiencer(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telecomAreaCode ?CLASS)
          (instance telecomAreaCode Predicate))
     (=> (instance ?INST ?CLASS) (telecomAreaCode ?INST ?INST)))))))
*/
fof(a7662,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telecomAreaCode_m, CLASS) & s_instance(s_telecomAreaCode_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telecomAreaCode(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Phrase)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn grammaticalRelation ?CLASS)
          (instance grammaticalRelation Predicate))
     (=> (instance ?INST ?CLASS) (grammaticalRelation ?INST ?INST)))))))
*/
fof(a7663,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Phrase) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_grammaticalRelation_m, CLASS) & s_instance(s_grammaticalRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_grammaticalRelation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OneDimensionalFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn parallel ?CLASS) (instance parallel Predicate))
     (=> (instance ?INST ?CLASS) (parallel ?INST ?INST)))))))
*/
fof(a7664,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OneDimensionalFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_parallel_m, CLASS) & s_instance(s_parallel_m, s_Predicate)) => (s_instance(INST, CLASS) => s_parallel(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn duration ?CLASS) (instance duration Predicate))
     (=> (instance ?INST ?CLASS) (duration ?INST ?INST)))))))
*/
fof(a7665,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_duration_m, CLASS) & s_instance(s_duration_m, s_Predicate)) => (s_instance(INST, CLASS) => s_duration(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn ancestorOrganization ?CLASS)
          (instance ancestorOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (ancestorOrganization ?INST ?INST)))))))
*/
fof(a7666,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_ancestorOrganization_m, CLASS) & s_instance(s_ancestorOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => s_ancestorOrganization(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn homePhoneNumber ?CLASS)
          (instance homePhoneNumber Predicate))
     (=> (instance ?INST ?CLASS) (homePhoneNumber ?INST ?INST)))))))
*/
fof(a7667,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_homePhoneNumber_m, CLASS) & s_instance(s_homePhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_homePhoneNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn describes ?CLASS)
          (instance describes Predicate))
     (=> (instance ?INST ?CLASS) (describes ?INST ?INST)))))))
*/
fof(a7668,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_describes_m, CLASS) & s_instance(s_describes_m, s_Predicate)) => (s_instance(INST, CLASS) => s_describes(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn prevents ?CLASS) (instance prevents Predicate))
     (=> (instance ?INST ?CLASS) (prevents ?INST ?INST)))))))
*/
fof(a7669,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_prevents_m, CLASS) & s_instance(s_prevents_m, s_Predicate)) => (s_instance(INST, CLASS) => s_prevents(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Shipping)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn cargo ?CLASS) (instance cargo Predicate))
     (=> (instance ?INST ?CLASS) (cargo ?INST ?INST)))))))
*/
fof(a7670,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Shipping) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_cargo_m, CLASS) & s_instance(s_cargo_m, s_Predicate)) => (s_instance(INST, CLASS) => s_cargo(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn equal ?CLASS) (instance equal Predicate))
     (=> (instance ?INST ?CLASS) (equal ?INST ?INST)))))))
*/
fof(a7671,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_equal_m, CLASS) & s_instance(s_equal_m, s_Predicate)) => (s_instance(INST, CLASS) => (INST = INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST RealNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn approximateValue ?CLASS)
          (instance approximateValue Predicate))
     (=> (instance ?INST ?CLASS) (approximateValue ?INST ?INST)))))))
*/
fof(a7672,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_RealNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_approximateValue_m, CLASS) & s_instance(s_approximateValue_m, s_Predicate)) => (s_instance(INST, CLASS) => s_approximateValue(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn overlapsPartially ?CLASS)
          (instance overlapsPartially Predicate))
     (=> (instance ?INST ?CLASS) (overlapsPartially ?INST ?INST)))))))
*/
fof(a7673,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_overlapsPartially_m, CLASS) & s_instance(s_overlapsPartially_m, s_Predicate)) => (s_instance(INST, CLASS) => s_overlapsPartially(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Transportation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn transported ?CLASS)
          (instance transported Predicate))
     (=> (instance ?INST ?CLASS) (transported ?INST ?INST)))))))
*/
fof(a7674,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Transportation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_transported_m, CLASS) & s_instance(s_transported_m, s_Predicate)) => (s_instance(INST, CLASS) => s_transported(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ChemicalProcess)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn reagent ?CLASS) (instance reagent Predicate))
     (=> (instance ?INST ?CLASS) (reagent ?INST ?INST)))))))
*/
fof(a7675,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ChemicalProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_reagent_m, CLASS) & s_instance(s_reagent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_reagent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Contest)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn contestParticipant ?CLASS)
          (instance contestParticipant Predicate))
     (=> (instance ?INST ?CLASS) (contestParticipant ?INST ?INST)))))))
*/
fof(a7676,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Contest) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_contestParticipant_m, CLASS) & s_instance(s_contestParticipant_m, s_Predicate)) => (s_instance(INST, CLASS) => s_contestParticipant(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn reflexiveOn ?CLASS)
          (instance reflexiveOn Predicate))
     (=> (instance ?INST ?CLASS) (reflexiveOn ?INST ?INST)))))))
*/
fof(a7677,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_reflexiveOn_m, CLASS) & s_instance(s_reflexiveOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_reflexiveOn(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Confining)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn detainee ?CLASS) (instance detainee Predicate))
     (=> (instance ?INST ?CLASS) (detainee ?INST ?INST)))))))
*/
fof(a7678,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Confining) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_detainee_m, CLASS) & s_instance(s_detainee_m, s_Predicate)) => (s_instance(INST, CLASS) => s_detainee(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimePosition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn temporalPart ?CLASS)
          (instance temporalPart Predicate))
     (=> (instance ?INST ?CLASS) (temporalPart ?INST ?INST)))))))
*/
fof(a7679,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimePosition) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_temporalPart_m, CLASS) & s_instance(s_temporalPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_temporalPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn larger ?CLASS) (instance larger Predicate))
     (=> (instance ?INST ?CLASS) (larger ?INST ?INST)))))))
*/
fof(a7680,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_larger_m, CLASS) & s_instance(s_larger_m, s_Predicate)) => (s_instance(INST, CLASS) => s_larger(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Abstract)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn abstractCounterpart ?CLASS)
          (instance abstractCounterpart Predicate))
     (=> (instance ?INST ?CLASS) (abstractCounterpart ?INST ?INST)))))))
*/
fof(a7681,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Abstract) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_abstractCounterpart_m, CLASS) & s_instance(s_abstractCounterpart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_abstractCounterpart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postCountry ?CLASS)
          (instance postCountry Predicate))
     (=> (instance ?INST ?CLASS) (postCountry ?INST ?INST)))))))
*/
fof(a7682,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postCountry_m, CLASS) & s_instance(s_postCountry_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postCountry(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn holdsObligation ?CLASS)
          (instance holdsObligation Predicate))
     (=> (instance ?INST ?CLASS) (holdsObligation ?INST ?INST)))))))
*/
fof(a7683,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_holdsObligation_m, CLASS) & s_instance(s_holdsObligation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_holdsObligation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn neighbor ?CLASS) (instance neighbor Predicate))
     (=> (instance ?INST ?CLASS) (neighbor ?INST ?INST)))))))
*/
fof(a7684,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_neighbor_m, CLASS) & s_instance(s_neighbor_m, s_Predicate)) => (s_instance(INST, CLASS) => s_neighbor(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=>
   (and (instance ?INST Entity)
        (subclass ?INST ContentBearingPhysical))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subsumesContentClass ?CLASS)
          (instance subsumesContentClass Predicate))
     (=> (instance ?INST ?CLASS)
      (subsumesContentClass ?INST ?INST)))))))
*/
fof(a7685,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_ContentBearingPhysical)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subsumesContentClass_m, CLASS) & s_instance(s_subsumesContentClass_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subsumesContentClass(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn carries ?CLASS) (instance carries Predicate))
     (=> (instance ?INST ?CLASS) (carries ?INST ?INST)))))))
*/
fof(a7686,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_carries_m, CLASS) & s_instance(s_carries_m, s_Predicate)) => (s_instance(INST, CLASS) => s_carries(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST LegalAction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn plaintiff ?CLASS)
          (instance plaintiff Predicate))
     (=> (instance ?INST ?CLASS) (plaintiff ?INST ?INST)))))))
*/
fof(a7687,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_LegalAction) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_plaintiff_m, CLASS) & s_instance(s_plaintiff_m, s_Predicate)) => (s_instance(INST, CLASS) => s_plaintiff(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GraphPath)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn pathLength ?CLASS)
          (instance pathLength Predicate))
     (=> (instance ?INST ?CLASS) (pathLength ?INST ?INST)))))))
*/
fof(a7688,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GraphPath) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_pathLength_m, CLASS) & s_instance(s_pathLength_m, s_Predicate)) => (s_instance(INST, CLASS) => s_pathLength(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn copy ?CLASS) (instance copy Predicate))
     (=> (instance ?INST ?CLASS) (copy ?INST ?INST)))))))
*/
fof(a7689,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_copy_m, CLASS) & s_instance(s_copy_m, s_Predicate)) => (s_instance(INST, CLASS) => s_copy(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PhysicalSystem)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subSystem ?CLASS)
          (instance subSystem Predicate))
     (=> (instance ?INST ?CLASS) (subSystem ?INST ?INST)))))))
*/
fof(a7690,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PhysicalSystem) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subSystem_m, CLASS) & s_instance(s_subSystem_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subSystem(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subProcess ?CLASS)
          (instance subProcess Predicate))
     (=> (instance ?INST ?CLASS) (subProcess ?INST ?INST)))))))
*/
fof(a7691,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subProcess_m, CLASS) & s_instance(s_subProcess_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subProcess(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn anniversary ?CLASS)
          (instance anniversary Predicate))
     (=> (instance ?INST ?CLASS) (anniversary ?INST ?INST)))))))
*/
fof(a7692,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_anniversary_m, CLASS) & s_instance(s_anniversary_m, s_Predicate)) => (s_instance(INST, CLASS) => s_anniversary(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn localShortName ?CLASS)
          (instance localShortName Predicate))
     (=> (instance ?INST ?CLASS) (localShortName ?INST ?INST)))))))
*/
fof(a7693,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_localShortName_m, CLASS) & s_instance(s_localShortName_m, s_Predicate)) => (s_instance(INST, CLASS) => s_localShortName(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn parent ?CLASS) (instance parent Predicate))
     (=> (instance ?INST ?CLASS) (parent ?INST ?INST)))))))
*/
fof(a7694,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_parent_m, CLASS) & s_instance(s_parent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_parent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST LinguisticExpression)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn expressedInLanguage ?CLASS)
          (instance expressedInLanguage Predicate))
     (=> (instance ?INST ?CLASS) (expressedInLanguage ?INST ?INST)))))))
*/
fof(a7695,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_LinguisticExpression) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_expressedInLanguage_m, CLASS) & s_instance(s_expressedInLanguage_m, s_Predicate)) => (s_instance(INST, CLASS) => s_expressedInLanguage(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn directed ?CLASS) (instance directed Predicate))
     (=> (instance ?INST ?CLASS) (directed ?INST ?INST)))))))
*/
fof(a7696,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_directed_m, CLASS) & s_instance(s_directed_m, s_Predicate)) => (s_instance(INST, CLASS) => s_directed(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Woman)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn aunt ?CLASS) (instance aunt Predicate))
     (=> (instance ?INST ?CLASS) (aunt ?INST ?INST)))))))
*/
fof(a7697,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Woman) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_aunt_m, CLASS) & s_instance(s_aunt_m, s_Predicate)) => (s_instance(INST, CLASS) => s_aunt(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn emailAddress ?CLASS)
          (instance emailAddress Predicate))
     (=> (instance ?INST ?CLASS) (emailAddress ?INST ?INST)))))))
*/
fof(a7698,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_emailAddress_m, CLASS) & s_instance(s_emailAddress_m, s_Predicate)) => (s_instance(INST, CLASS) => s_emailAddress(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn involvedInEvent ?CLASS)
          (instance involvedInEvent Predicate))
     (=> (instance ?INST ?CLASS) (involvedInEvent ?INST ?INST)))))))
*/
fof(a7699,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_involvedInEvent_m, CLASS) & s_instance(s_involvedInEvent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_involvedInEvent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn unitNumber ?CLASS)
          (instance unitNumber Predicate))
     (=> (instance ?INST ?CLASS) (unitNumber ?INST ?INST)))))))
*/
fof(a7700,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_unitNumber_m, CLASS) & s_instance(s_unitNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_unitNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn barometricPressure ?CLASS)
          (instance barometricPressure Predicate))
     (=> (instance ?INST ?CLASS) (barometricPressure ?INST ?INST)))))))
*/
fof(a7701,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_barometricPressure_m, CLASS) & s_instance(s_barometricPressure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_barometricPressure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn grandparent ?CLASS)
          (instance grandparent Predicate))
     (=> (instance ?INST ?CLASS) (grandparent ?INST ?INST)))))))
*/
fof(a7702,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_grandparent_m, CLASS) & s_instance(s_grandparent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_grandparent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Proposition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subProposition ?CLASS)
          (instance subProposition Predicate))
     (=> (instance ?INST ?CLASS) (subProposition ?INST ?INST)))))))
*/
fof(a7703,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subProposition_m, CLASS) & s_instance(s_subProposition_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subProposition(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ChangeOfControl)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn losesControl ?CLASS)
          (instance losesControl Predicate))
     (=> (instance ?INST ?CLASS) (losesControl ?INST ?INST)))))))
*/
fof(a7704,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ChangeOfControl) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_losesControl_m, CLASS) & s_instance(s_losesControl_m, s_Predicate)) => (s_instance(INST, CLASS) => s_losesControl(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn uses ?CLASS) (instance uses Predicate))
     (=> (instance ?INST ?CLASS) (uses ?INST ?INST)))))))
*/
fof(a7705,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_uses_m, CLASS) & s_instance(s_uses_m, s_Predicate)) => (s_instance(INST, CLASS) => s_uses(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postPostOfficeBox ?CLASS)
          (instance postPostOfficeBox Predicate))
     (=> (instance ?INST ?CLASS) (postPostOfficeBox ?INST ?INST)))))))
*/
fof(a7706,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postPostOfficeBox_m, CLASS) & s_instance(s_postPostOfficeBox_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postPostOfficeBox(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Translocation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn changesLocation ?CLASS)
          (instance changesLocation Predicate))
     (=> (instance ?INST ?CLASS) (changesLocation ?INST ?INST)))))))
*/
fof(a7707,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Translocation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_changesLocation_m, CLASS) & s_instance(s_changesLocation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_changesLocation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn rangeSubclass ?CLASS)
          (instance rangeSubclass Predicate))
     (=> (instance ?INST ?CLASS) (rangeSubclass ?INST ?INST)))))))
*/
fof(a7708,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_rangeSubclass_m, CLASS) & s_instance(s_rangeSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => s_rangeSubclass(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn refers ?CLASS) (instance refers Predicate))
     (=> (instance ?INST ?CLASS) (refers ?INST ?INST)))))))
*/
fof(a7709,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_refers_m, CLASS) & s_instance(s_refers_m, s_Predicate)) => (s_instance(INST, CLASS) => s_refers(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn parasite ?CLASS) (instance parasite Predicate))
     (=> (instance ?INST ?CLASS) (parasite ?INST ?INST)))))))
*/
fof(a7710,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_parasite_m, CLASS) & s_instance(s_parasite_m, s_Predicate)) => (s_instance(INST, CLASS) => s_parasite(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GraphArc)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn arcWeight ?CLASS)
          (instance arcWeight Predicate))
     (=> (instance ?INST ?CLASS) (arcWeight ?INST ?INST)))))))
*/
fof(a7711,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GraphArc) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_arcWeight_m, CLASS) & s_instance(s_arcWeight_m, s_Predicate)) => (s_instance(INST, CLASS) => s_arcWeight(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Demonstrating)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn attends ?CLASS) (instance attends Predicate))
     (=> (instance ?INST ?CLASS) (attends ?INST ?INST)))))))
*/
fof(a7712,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Demonstrating) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_attends_m, CLASS) & s_instance(s_attends_m, s_Predicate)) => (s_instance(INST, CLASS) => s_attends(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn side ?CLASS) (instance side Predicate))
     (=> (instance ?INST ?CLASS) (side ?INST ?INST)))))))
*/
fof(a7713,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_side_m, CLASS) & s_instance(s_side_m, s_Predicate)) => (s_instance(INST, CLASS) => s_side(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST FinancialTransaction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn transactionAmount ?CLASS)
          (instance transactionAmount Predicate))
     (=> (instance ?INST ?CLASS) (transactionAmount ?INST ?INST)))))))
*/
fof(a7714,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_FinancialTransaction) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_transactionAmount_m, CLASS) & s_instance(s_transactionAmount_m, s_Predicate)) => (s_instance(INST, CLASS) => s_transactionAmount(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn frequency ?CLASS)
          (instance frequency Predicate))
     (=> (instance ?INST ?CLASS) (frequency ?INST ?INST)))))))
*/
fof(a7715,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_frequency_m, CLASS) & s_instance(s_frequency_m, s_Predicate)) => (s_instance(INST, CLASS) => s_frequency(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn medicalPatient ?CLASS)
          (instance medicalPatient Predicate))
     (=> (instance ?INST ?CLASS) (medicalPatient ?INST ?INST)))))))
*/
fof(a7716,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_medicalPatient_m, CLASS) & s_instance(s_medicalPatient_m, s_Predicate)) => (s_instance(INST, CLASS) => s_medicalPatient(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn average ?CLASS) (instance average Predicate))
     (=> (instance ?INST ?CLASS) (average ?INST ?INST)))))))
*/
fof(a7717,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_average_m, CLASS) & s_instance(s_average_m, s_Predicate)) => (s_instance(INST, CLASS) => s_average(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn closedOn ?CLASS) (instance closedOn Predicate))
     (=> (instance ?INST ?CLASS) (closedOn ?INST ?INST)))))))
*/
fof(a7718,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_closedOn_m, CLASS) & s_instance(s_closedOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_closedOn(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PermanentResidence)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn homeAddress ?CLASS)
          (instance homeAddress Predicate))
     (=> (instance ?INST ?CLASS) (homeAddress ?INST ?INST)))))))
*/
fof(a7719,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PermanentResidence) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_homeAddress_m, CLASS) & s_instance(s_homeAddress_m, s_Predicate)) => (s_instance(INST, CLASS) => s_homeAddress(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Solution)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn potentialOfHydrogen ?CLASS)
          (instance potentialOfHydrogen Predicate))
     (=> (instance ?INST ?CLASS) (potentialOfHydrogen ?INST ?INST)))))))
*/
fof(a7720,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Solution) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_potentialOfHydrogen_m, CLASS) & s_instance(s_potentialOfHydrogen_m, s_Predicate)) => (s_instance(INST, CLASS) => s_potentialOfHydrogen(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn grandfather ?CLASS)
          (instance grandfather Predicate))
     (=> (instance ?INST ?CLASS) (grandfather ?INST ?INST)))))))
*/
fof(a7721,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_grandfather_m, CLASS) & s_instance(s_grandfather_m, s_Predicate)) => (s_instance(INST, CLASS) => s_grandfather(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn stepfather ?CLASS)
          (instance stepfather Predicate))
     (=> (instance ?INST ?CLASS) (stepfather ?INST ?INST)))))))
*/
fof(a7722,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_stepfather_m, CLASS) & s_instance(s_stepfather_m, s_Predicate)) => (s_instance(INST, CLASS) => s_stepfather(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn yearOfFounding ?CLASS)
          (instance yearOfFounding Predicate))
     (=> (instance ?INST ?CLASS) (yearOfFounding ?INST ?INST)))))))
*/
fof(a7723,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_yearOfFounding_m, CLASS) & s_instance(s_yearOfFounding_m, s_Predicate)) => (s_instance(INST, CLASS) => s_yearOfFounding(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Attribute)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn successorAttributeClosure ?CLASS)
          (instance successorAttributeClosure Predicate))
     (=> (instance ?INST ?CLASS)
      (successorAttributeClosure ?INST ?INST)))))))
*/
fof(a7724,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_successorAttributeClosure_m, CLASS) & s_instance(s_successorAttributeClosure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_successorAttributeClosure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn direction ?CLASS)
          (instance direction Predicate))
     (=> (instance ?INST ?CLASS) (direction ?INST ?INST)))))))
*/
fof(a7725,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_direction_m, CLASS) & s_instance(s_direction_m, s_Predicate)) => (s_instance(INST, CLASS) => s_direction(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn monetaryValue ?CLASS)
          (instance monetaryValue Predicate))
     (=> (instance ?INST ?CLASS) (monetaryValue ?INST ?INST)))))))
*/
fof(a7726,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_monetaryValue_m, CLASS) & s_instance(s_monetaryValue_m, s_Predicate)) => (s_instance(INST, CLASS) => s_monetaryValue(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn sibling ?CLASS) (instance sibling Predicate))
     (=> (instance ?INST ?CLASS) (sibling ?INST ?INST)))))))
*/
fof(a7727,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_sibling_m, CLASS) & s_instance(s_sibling_m, s_Predicate)) => (s_instance(INST, CLASS) => s_sibling(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalAddressText)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postAddressText ?CLASS)
          (instance postAddressText Predicate))
     (=> (instance ?INST ?CLASS) (postAddressText ?INST ?INST)))))))
*/
fof(a7728,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalAddressText) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postAddressText_m, CLASS) & s_instance(s_postAddressText_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postAddressText(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn wants ?CLASS) (instance wants Predicate))
     (=> (instance ?INST ?CLASS) (wants ?INST ?INST)))))))
*/
fof(a7729,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_wants_m, CLASS) & s_instance(s_wants_m, s_Predicate)) => (s_instance(INST, CLASS) => s_wants(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn externalImage ?CLASS)
          (instance externalImage Predicate))
     (=> (instance ?INST ?CLASS) (externalImage ?INST ?INST)))))))
*/
fof(a7730,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_externalImage_m, CLASS) & s_instance(s_externalImage_m, s_Predicate)) => (s_instance(INST, CLASS) => s_externalImage(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Circle)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn radius ?CLASS) (instance radius Predicate))
     (=> (instance ?INST ?CLASS) (radius ?INST ?INST)))))))
*/
fof(a7731,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Circle) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_radius_m, CLASS) & s_instance(s_radius_m, s_Predicate)) => (s_instance(INST, CLASS) => s_radius(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SetOrClass)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn disjoint ?CLASS) (instance disjoint Predicate))
     (=> (instance ?INST ?CLASS) (disjoint ?INST ?INST)))))))
*/
fof(a7732,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SetOrClass) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_disjoint_m, CLASS) & s_instance(s_disjoint_m, s_Predicate)) => (s_instance(INST, CLASS) => s_disjoint(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST ElementalSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn atomicNumber ?CLASS)
          (instance atomicNumber Predicate))
     (=> (instance ?INST ?CLASS) (atomicNumber ?INST ?INST)))))))
*/
fof(a7733,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_ElementalSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_atomicNumber_m, CLASS) & s_instance(s_atomicNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_atomicNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn independentProbability ?CLASS)
          (instance independentProbability Predicate))
     (=> (instance ?INST ?CLASS)
      (independentProbability ?INST ?INST)))))))
*/
fof(a7734,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_independentProbability_m, CLASS) & s_instance(s_independentProbability_m, s_Predicate)) => (s_instance(INST, CLASS) => s_independentProbability(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn decreasesLikelihood ?CLASS)
          (instance decreasesLikelihood Predicate))
     (=> (instance ?INST ?CLASS) (decreasesLikelihood ?INST ?INST)))))))
*/
fof(a7735,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_decreasesLikelihood_m, CLASS) & s_instance(s_decreasesLikelihood_m, s_Predicate)) => (s_instance(INST, CLASS) => s_decreasesLikelihood(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subString ?CLASS)
          (instance subString Predicate))
     (=> (instance ?INST ?CLASS) (subString ?INST ?INST)))))))
*/
fof(a7736,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subString_m, CLASS) & s_instance(s_subString_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subString(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn covers ?CLASS) (instance covers Predicate))
     (=> (instance ?INST ?CLASS) (covers ?INST ?INST)))))))
*/
fof(a7737,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_covers_m, CLASS) & s_instance(s_covers_m, s_Predicate)) => (s_instance(INST, CLASS) => s_covers(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn stranger ?CLASS) (instance stranger Predicate))
     (=> (instance ?INST ?CLASS) (stranger ?INST ?INST)))))))
*/
fof(a7738,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_stranger_m, CLASS) & s_instance(s_stranger_m, s_Predicate)) => (s_instance(INST, CLASS) => s_stranger(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn patientMedical ?CLASS)
          (instance patientMedical Predicate))
     (=> (instance ?INST ?CLASS) (patientMedical ?INST ?INST)))))))
*/
fof(a7739,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_patientMedical_m, CLASS) & s_instance(s_patientMedical_m, s_Predicate)) => (s_instance(INST, CLASS) => s_patientMedical(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST LegalAction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn defendant ?CLASS)
          (instance defendant Predicate))
     (=> (instance ?INST ?CLASS) (defendant ?INST ?INST)))))))
*/
fof(a7740,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_LegalAction) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_defendant_m, CLASS) & s_instance(s_defendant_m, s_Predicate)) => (s_instance(INST, CLASS) => s_defendant(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn instance ?CLASS) (instance instance Predicate))
     (=> (instance ?INST ?CLASS) (instance ?INST ?INST)))))))
*/
fof(a7741,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_instance_m, CLASS) & s_instance(s_instance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_instance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Proposition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn consistent ?CLASS)
          (instance consistent Predicate))
     (=> (instance ?INST ?CLASS) (consistent ?INST ?INST)))))))
*/
fof(a7742,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_consistent_m, CLASS) & s_instance(s_consistent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_consistent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Certificate)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn issuedBy ?CLASS) (instance issuedBy Predicate))
     (=> (instance ?INST ?CLASS) (issuedBy ?INST ?INST)))))))
*/
fof(a7743,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Certificate) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_issuedBy_m, CLASS) & s_instance(s_issuedBy_m, s_Predicate)) => (s_instance(INST, CLASS) => s_issuedBy(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn religiousAffiliationOfOrganization ?CLASS)
          (instance religiousAffiliationOfOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (religiousAffiliationOfOrganization ?INST ?INST)))))))
*/
fof(a7744,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_religiousAffiliationOfOrganization_m, CLASS) & s_instance(s_religiousAffiliationOfOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => s_religiousAffiliationOfOrganization(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn familyName ?CLASS)
          (instance familyName Predicate))
     (=> (instance ?INST ?CLASS) (familyName ?INST ?INST)))))))
*/
fof(a7745,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_familyName_m, CLASS) & s_instance(s_familyName_m, s_Predicate)) => (s_instance(INST, CLASS) => s_familyName(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ConstantQuantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn distanceOnPath ?CLASS)
          (instance distanceOnPath Predicate))
     (=> (instance ?INST ?CLASS) (distanceOnPath ?INST ?INST)))))))
*/
fof(a7746,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ConstantQuantity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_distanceOnPath_m, CLASS) & s_instance(s_distanceOnPath_m, s_Predicate)) => (s_instance(INST, CLASS) => s_distanceOnPath(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn legalGuardian ?CLASS)
          (instance legalGuardian Predicate))
     (=> (instance ?INST ?CLASS) (legalGuardian ?INST ?INST)))))))
*/
fof(a7747,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_legalGuardian_m, CLASS) & s_instance(s_legalGuardian_m, s_Predicate)) => (s_instance(INST, CLASS) => s_legalGuardian(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Integer)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn multiplicativeFactor ?CLASS)
          (instance multiplicativeFactor Predicate))
     (=> (instance ?INST ?CLASS)
      (multiplicativeFactor ?INST ?INST)))))))
*/
fof(a7748,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Integer) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_multiplicativeFactor_m, CLASS) & s_instance(s_multiplicativeFactor_m, s_Predicate)) => (s_instance(INST, CLASS) => s_multiplicativeFactor(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST StationaryArtifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn humanCapacity ?CLASS)
          (instance humanCapacity Predicate))
     (=> (instance ?INST ?CLASS) (humanCapacity ?INST ?INST)))))))
*/
fof(a7749,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_StationaryArtifact) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_humanCapacity_m, CLASS) & s_instance(s_humanCapacity_m, s_Predicate)) => (s_instance(INST, CLASS) => s_humanCapacity(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GeometricPoint)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn pointOfFigure ?CLASS)
          (instance pointOfFigure Predicate))
     (=> (instance ?INST ?CLASS) (pointOfFigure ?INST ?INST)))))))
*/
fof(a7750,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GeometricPoint) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_pointOfFigure_m, CLASS) & s_instance(s_pointOfFigure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_pointOfFigure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn workPhoneNumber ?CLASS)
          (instance workPhoneNumber Predicate))
     (=> (instance ?INST ?CLASS) (workPhoneNumber ?INST ?INST)))))))
*/
fof(a7751,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_workPhoneNumber_m, CLASS) & s_instance(s_workPhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_workPhoneNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn inScopeOfInterest ?CLASS)
          (instance inScopeOfInterest Predicate))
     (=> (instance ?INST ?CLASS) (inScopeOfInterest ?INST ?INST)))))))
*/
fof(a7752,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_inScopeOfInterest_m, CLASS) & s_instance(s_inScopeOfInterest_m, s_Predicate)) => (s_instance(INST, CLASS) => s_inScopeOfInterest(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agreement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn agreementEffectiveDate ?CLASS)
          (instance agreementEffectiveDate Predicate))
     (=> (instance ?INST ?CLASS)
      (agreementEffectiveDate ?INST ?INST)))))))
*/
fof(a7753,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agreement) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_agreementEffectiveDate_m, CLASS) & s_instance(s_agreementEffectiveDate_m, s_Predicate)) => (s_instance(INST, CLASS) => s_agreementEffectiveDate(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Graph)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subGraph ?CLASS) (instance subGraph Predicate))
     (=> (instance ?INST ?CLASS) (subGraph ?INST ?INST)))))))
*/
fof(a7754,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Graph) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subGraph_m, CLASS) & s_instance(s_subGraph_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subGraph(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TwoDimensionalAngle)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn angleOfFigure ?CLASS)
          (instance angleOfFigure Predicate))
     (=> (instance ?INST ?CLASS) (angleOfFigure ?INST ?INST)))))))
*/
fof(a7755,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TwoDimensionalAngle) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_angleOfFigure_m, CLASS) & s_instance(s_angleOfFigure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_angleOfFigure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn older ?CLASS) (instance older Predicate))
     (=> (instance ?INST ?CLASS) (older ?INST ?INST)))))))
*/
fof(a7756,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_older_m, CLASS) & s_instance(s_older_m, s_Predicate)) => (s_instance(INST, CLASS) => s_older(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn greaterThan ?CLASS)
          (instance greaterThan Predicate))
     (=> (instance ?INST ?CLASS) (greaterThan ?INST ?INST)))))))
*/
fof(a7757,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_greaterThan_m, CLASS) & s_instance(s_greaterThan_m, s_Predicate)) => (s_instance(INST, CLASS) => greater(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn inhabits ?CLASS) (instance inhabits Predicate))
     (=> (instance ?INST ?CLASS) (inhabits ?INST ?INST)))))))
*/
fof(a7758,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_inhabits_m, CLASS) & s_instance(s_inhabits_m, s_Predicate)) => (s_instance(INST, CLASS) => s_inhabits(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn airTemperature ?CLASS)
          (instance airTemperature Predicate))
     (=> (instance ?INST ?CLASS) (airTemperature ?INST ?INST)))))))
*/
fof(a7759,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_airTemperature_m, CLASS) & s_instance(s_airTemperature_m, s_Predicate)) => (s_instance(INST, CLASS) => s_airTemperature(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn possesses ?CLASS)
          (instance possesses Predicate))
     (=> (instance ?INST ?CLASS) (possesses ?INST ?INST)))))))
*/
fof(a7760,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_possesses_m, CLASS) & s_instance(s_possesses_m, s_Predicate)) => (s_instance(INST, CLASS) => s_possesses(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn greaterThanOrEqualTo ?CLASS)
          (instance greaterThanOrEqualTo Predicate))
     (=> (instance ?INST ?CLASS)
      (greaterThanOrEqualTo ?INST ?INST)))))))
*/
fof(a7761,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_greaterThanOrEqualTo_m, CLASS) & s_instance(s_greaterThanOrEqualTo_m, s_Predicate)) => (s_instance(INST, CLASS) => s_greaterThanOrEqualTo(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn employs ?CLASS) (instance employs Predicate))
     (=> (instance ?INST ?CLASS) (employs ?INST ?INST)))))))
*/
fof(a7762,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_employs_m, CLASS) & s_instance(s_employs_m, s_Predicate)) => (s_instance(INST, CLASS) => s_employs(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingPhysical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subsumesContentInstance ?CLASS)
          (instance subsumesContentInstance Predicate))
     (=> (instance ?INST ?CLASS)
      (subsumesContentInstance ?INST ?INST)))))))
*/
fof(a7763,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingPhysical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subsumesContentInstance_m, CLASS) & s_instance(s_subsumesContentInstance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subsumesContentInstance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SentientAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn speaksLanguage ?CLASS)
          (instance speaksLanguage Predicate))
     (=> (instance ?INST ?CLASS) (speaksLanguage ?INST ?INST)))))))
*/
fof(a7764,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SentientAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_speaksLanguage_m, CLASS) & s_instance(s_speaksLanguage_m, s_Predicate)) => (s_instance(INST, CLASS) => s_speaksLanguage(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn bottom ?CLASS) (instance bottom Predicate))
     (=> (instance ?INST ?CLASS) (bottom ?INST ?INST)))))))
*/
fof(a7765,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_bottom_m, CLASS) & s_instance(s_bottom_m, s_Predicate)) => (s_instance(INST, CLASS) => s_bottom(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postPostcodeArea ?CLASS)
          (instance postPostcodeArea Predicate))
     (=> (instance ?INST ?CLASS) (postPostcodeArea ?INST ?INST)))))))
*/
fof(a7766,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postPostcodeArea_m, CLASS) & s_instance(s_postPostcodeArea_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postPostcodeArea(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST MilitaryUnit)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hostileForces ?CLASS)
          (instance hostileForces Predicate))
     (=> (instance ?INST ?CLASS) (hostileForces ?INST ?INST)))))))
*/
fof(a7767,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_MilitaryUnit) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hostileForces_m, CLASS) & s_instance(s_hostileForces_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hostileForces(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Radiating)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn wavelength ?CLASS)
          (instance wavelength Predicate))
     (=> (instance ?INST ?CLASS) (wavelength ?INST ?INST)))))))
*/
fof(a7768,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Radiating) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_wavelength_m, CLASS) & s_instance(s_wavelength_m, s_Predicate)) => (s_instance(INST, CLASS) => s_wavelength(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn partlyLocated ?CLASS)
          (instance partlyLocated Predicate))
     (=> (instance ?INST ?CLASS) (partlyLocated ?INST ?INST)))))))
*/
fof(a7769,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_partlyLocated_m, CLASS) & s_instance(s_partlyLocated_m, s_Predicate)) => (s_instance(INST, CLASS) => s_partlyLocated(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn stored ?CLASS) (instance stored Predicate))
     (=> (instance ?INST ?CLASS) (stored ?INST ?INST)))))))
*/
fof(a7770,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_stored_m, CLASS) & s_instance(s_stored_m, s_Predicate)) => (s_instance(INST, CLASS) => s_stored(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn measure ?CLASS) (instance measure Predicate))
     (=> (instance ?INST ?CLASS) (measure ?INST ?INST)))))))
*/
fof(a7771,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_measure_m, CLASS) & s_instance(s_measure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_measure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Circle)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn diameter ?CLASS) (instance diameter Predicate))
     (=> (instance ?INST ?CLASS) (diameter ?INST ?INST)))))))
*/
fof(a7772,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Circle) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_diameter_m, CLASS) & s_instance(s_diameter_m, s_Predicate)) => (s_instance(INST, CLASS) => s_diameter(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn holdsRight ?CLASS)
          (instance holdsRight Predicate))
     (=> (instance ?INST ?CLASS) (holdsRight ?INST ?INST)))))))
*/
fof(a7773,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_holdsRight_m, CLASS) & s_instance(s_holdsRight_m, s_Predicate)) => (s_instance(INST, CLASS) => s_holdsRight(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telecomCode2 ?CLASS)
          (instance telecomCode2 Predicate))
     (=> (instance ?INST ?CLASS) (telecomCode2 ?INST ?INST)))))))
*/
fof(a7774,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telecomCode2_m, CLASS) & s_instance(s_telecomCode2_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telecomCode2(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimePosition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn holdsDuring ?CLASS)
          (instance holdsDuring Predicate))
     (=> (instance ?INST ?CLASS) (holdsDuring ?INST ?INST)))))))
*/
fof(a7775,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimePosition) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_holdsDuring_m, CLASS) & s_instance(s_holdsDuring_m, s_Predicate)) => (s_instance(INST, CLASS) => s_holdsDuring(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn causesProposition ?CLASS)
          (instance causesProposition Predicate))
     (=> (instance ?INST ?CLASS) (causesProposition ?INST ?INST)))))))
*/
fof(a7776,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_causesProposition_m, CLASS) & s_instance(s_causesProposition_m, s_Predicate)) => (s_instance(INST, CLASS) => s_causesProposition(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telecomCountryCode ?CLASS)
          (instance telecomCountryCode Predicate))
     (=> (instance ?INST ?CLASS) (telecomCountryCode ?INST ?INST)))))))
*/
fof(a7777,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telecomCountryCode_m, CLASS) & s_instance(s_telecomCountryCode_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telecomCountryCode(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn deviceTelecomNumber ?CLASS)
          (instance deviceTelecomNumber Predicate))
     (=> (instance ?INST ?CLASS) (deviceTelecomNumber ?INST ?INST)))))))
*/
fof(a7778,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_deviceTelecomNumber_m, CLASS) & s_instance(s_deviceTelecomNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => s_deviceTelecomNumber(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn grandmother ?CLASS)
          (instance grandmother Predicate))
     (=> (instance ?INST ?CLASS) (grandmother ?INST ?INST)))))))
*/
fof(a7779,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_grandmother_m, CLASS) & s_instance(s_grandmother_m, s_Predicate)) => (s_instance(INST, CLASS) => s_grandmother(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CompoundSubstance)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn conjugate ?CLASS)
          (instance conjugate Predicate))
     (=> (instance ?INST ?CLASS) (conjugate ?INST ?INST)))))))
*/
fof(a7780,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CompoundSubstance) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_conjugate_m, CLASS) & s_instance(s_conjugate_m, s_Predicate)) => (s_instance(INST, CLASS) => s_conjugate(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn modalAttribute ?CLASS)
          (instance modalAttribute Predicate))
     (=> (instance ?INST ?CLASS) (modalAttribute ?INST ?INST)))))))
*/
fof(a7781,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_modalAttribute_m, CLASS) & s_instance(s_modalAttribute_m, s_Predicate)) => (s_instance(INST, CLASS) => s_modalAttribute(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryFunction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn identityElement ?CLASS)
          (instance identityElement Predicate))
     (=> (instance ?INST ?CLASS) (identityElement ?INST ?INST)))))))
*/
fof(a7782,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryFunction) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_identityElement_m, CLASS) & s_instance(s_identityElement_m, s_Predicate)) => (s_instance(INST, CLASS) => s_identityElement(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn ideologicalAffiliationOfOrganization ?CLASS)
          (instance ideologicalAffiliationOfOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (ideologicalAffiliationOfOrganization ?INST ?INST)))))))
*/
fof(a7783,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_ideologicalAffiliationOfOrganization_m, CLASS) & s_instance(s_ideologicalAffiliationOfOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => s_ideologicalAffiliationOfOrganization(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingPhysical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn containsInformation ?CLASS)
          (instance containsInformation Predicate))
     (=> (instance ?INST ?CLASS) (containsInformation ?INST ?INST)))))))
*/
fof(a7784,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingPhysical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_containsInformation_m, CLASS) & s_instance(s_containsInformation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_containsInformation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Transportation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn conveyance ?CLASS)
          (instance conveyance Predicate))
     (=> (instance ?INST ?CLASS) (conveyance ?INST ?INST)))))))
*/
fof(a7785,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Transportation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_conveyance_m, CLASS) & s_instance(s_conveyance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_conveyance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn landlord ?CLASS) (instance landlord Predicate))
     (=> (instance ?INST ?CLASS) (landlord ?INST ?INST)))))))
*/
fof(a7786,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_landlord_m, CLASS) & s_instance(s_landlord_m, s_Predicate)) => (s_instance(INST, CLASS) => s_landlord(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn range ?CLASS) (instance range Predicate))
     (=> (instance ?INST ?CLASS) (range ?INST ?INST)))))))
*/
fof(a7787,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_range_m, CLASS) & s_instance(s_range_m, s_Predicate)) => (s_instance(INST, CLASS) => s_range(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn publishes ?CLASS)
          (instance publishes Predicate))
     (=> (instance ?INST ?CLASS) (publishes ?INST ?INST)))))))
*/
fof(a7788,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_publishes_m, CLASS) & s_instance(s_publishes_m, s_Predicate)) => (s_instance(INST, CLASS) => s_publishes(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Device)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn effectiveRange ?CLASS)
          (instance effectiveRange Predicate))
     (=> (instance ?INST ?CLASS) (effectiveRange ?INST ?INST)))))))
*/
fof(a7789,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Device) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_effectiveRange_m, CLASS) & s_instance(s_effectiveRange_m, s_Predicate)) => (s_instance(INST, CLASS) => s_effectiveRange(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn considers ?CLASS)
          (instance considers Predicate))
     (=> (instance ?INST ?CLASS) (considers ?INST ?INST)))))))
*/
fof(a7790,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_considers_m, CLASS) & s_instance(s_considers_m, s_Predicate)) => (s_instance(INST, CLASS) => s_considers(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn lessThan ?CLASS) (instance lessThan Predicate))
     (=> (instance ?INST ?CLASS) (lessThan ?INST ?INST)))))))
*/
fof(a7791,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_lessThan_m, CLASS) & s_instance(s_lessThan_m, s_Predicate)) => (s_instance(INST, CLASS) => less(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Animal)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn deathplace ?CLASS)
          (instance deathplace Predicate))
     (=> (instance ?INST ?CLASS) (deathplace ?INST ?INST)))))))
*/
fof(a7792,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Animal) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_deathplace_m, CLASS) & s_instance(s_deathplace_m, s_Predicate)) => (s_instance(INST, CLASS) => s_deathplace(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST PureSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn boilingPoint ?CLASS)
          (instance boilingPoint Predicate))
     (=> (instance ?INST ?CLASS) (boilingPoint ?INST ?INST)))))))
*/
fof(a7793,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_PureSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_boilingPoint_m, CLASS) & s_instance(s_boilingPoint_m, s_Predicate)) => (s_instance(INST, CLASS) => s_boilingPoint(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Relation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subrelation ?CLASS)
          (instance subrelation Predicate))
     (=> (instance ?INST ?CLASS) (subrelation ?INST ?INST)))))))
*/
fof(a7794,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Relation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subrelation_m, CLASS) & s_instance(s_subrelation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subrelation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn discovers ?CLASS)
          (instance discovers Predicate))
     (=> (instance ?INST ?CLASS) (discovers ?INST ?INST)))))))
*/
fof(a7795,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_discovers_m, CLASS) & s_instance(s_discovers_m, s_Predicate)) => (s_instance(INST, CLASS) => s_discovers(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn citizen ?CLASS) (instance citizen Predicate))
     (=> (instance ?INST ?CLASS) (citizen ?INST ?INST)))))))
*/
fof(a7796,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_citizen_m, CLASS) & s_instance(s_citizen_m, s_Predicate)) => (s_instance(INST, CLASS) => s_citizen(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn needs ?CLASS) (instance needs Predicate))
     (=> (instance ?INST ?CLASS) (needs ?INST ?INST)))))))
*/
fof(a7797,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_needs_m, CLASS) & s_instance(s_needs_m, s_Predicate)) => (s_instance(INST, CLASS) => s_needs(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn initiallyContainsPart ?CLASS)
          (instance initiallyContainsPart Predicate))
     (=> (instance ?INST ?CLASS)
      (initiallyContainsPart ?INST ?INST)))))))
*/
fof(a7798,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_initiallyContainsPart_m, CLASS) & s_instance(s_initiallyContainsPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_initiallyContainsPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn mutualAcquaintance ?CLASS)
          (instance mutualAcquaintance Predicate))
     (=> (instance ?INST ?CLASS) (mutualAcquaintance ?INST ?INST)))))))
*/
fof(a7799,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_mutualAcquaintance_m, CLASS) & s_instance(s_mutualAcquaintance_m, s_Predicate)) => (s_instance(INST, CLASS) => s_mutualAcquaintance(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn birthday ?CLASS) (instance birthday Predicate))
     (=> (instance ?INST ?CLASS) (birthday ?INST ?INST)))))))
*/
fof(a7800,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_birthday_m, CLASS) & s_instance(s_birthday_m, s_Predicate)) => (s_instance(INST, CLASS) => s_birthday(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn editor ?CLASS) (instance editor Predicate))
     (=> (instance ?INST ?CLASS) (editor ?INST ?INST)))))))
*/
fof(a7801,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_editor_m, CLASS) & s_instance(s_editor_m, s_Predicate)) => (s_instance(INST, CLASS) => s_editor(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hindersSubclass ?CLASS)
          (instance hindersSubclass Predicate))
     (=> (instance ?INST ?CLASS) (hindersSubclass ?INST ?INST)))))))
*/
fof(a7802,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hindersSubclass_m, CLASS) & s_instance(s_hindersSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hindersSubclass(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn benefits ?CLASS) (instance benefits Predicate))
     (=> (instance ?INST ?CLASS) (benefits ?INST ?INST)))))))
*/
fof(a7803,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_benefits_m, CLASS) & s_instance(s_benefits_m, s_Predicate)) => (s_instance(INST, CLASS) => s_benefits(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn exploits ?CLASS) (instance exploits Predicate))
     (=> (instance ?INST ?CLASS) (exploits ?INST ?INST)))))))
*/
fof(a7804,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_exploits_m, CLASS) & s_instance(s_exploits_m, s_Predicate)) => (s_instance(INST, CLASS) => s_exploits(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST StationaryArtifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn contractor ?CLASS)
          (instance contractor Predicate))
     (=> (instance ?INST ?CLASS) (contractor ?INST ?INST)))))))
*/
fof(a7805,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_StationaryArtifact) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_contractor_m, CLASS) & s_instance(s_contractor_m, s_Predicate)) => (s_instance(INST, CLASS) => s_contractor(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agreement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn agreementPeriod ?CLASS)
          (instance agreementPeriod Predicate))
     (=> (instance ?INST ?CLASS) (agreementPeriod ?INST ?INST)))))))
*/
fof(a7806,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agreement) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_agreementPeriod_m, CLASS) & s_instance(s_agreementPeriod_m, s_Predicate)) => (s_instance(INST, CLASS) => s_agreementPeriod(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn hinders ?CLASS) (instance hinders Predicate))
     (=> (instance ?INST ?CLASS) (hinders ?INST ?INST)))))))
*/
fof(a7807,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hinders_m, CLASS) & s_instance(s_hinders_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hinders(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn operator ?CLASS) (instance operator Predicate))
     (=> (instance ?INST ?CLASS) (operator ?INST ?INST)))))))
*/
fof(a7808,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_operator_m, CLASS) & s_instance(s_operator_m, s_Predicate)) => (s_instance(INST, CLASS) => s_operator(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OrganicObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn developmentalForm ?CLASS)
          (instance developmentalForm Predicate))
     (=> (instance ?INST ?CLASS) (developmentalForm ?INST ?INST)))))))
*/
fof(a7809,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OrganicObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_developmentalForm_m, CLASS) & s_instance(s_developmentalForm_m, s_Predicate)) => (s_instance(INST, CLASS) => s_developmentalForm(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn disapproves ?CLASS)
          (instance disapproves Predicate))
     (=> (instance ?INST ?CLASS) (disapproves ?INST ?INST)))))))
*/
fof(a7810,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_disapproves_m, CLASS) & s_instance(s_disapproves_m, s_Predicate)) => (s_instance(INST, CLASS) => s_disapproves(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Relation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn disjointRelation ?CLASS)
          (instance disjointRelation Predicate))
     (=> (instance ?INST ?CLASS) (disjointRelation ?INST ?INST)))))))
*/
fof(a7811,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Relation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_disjointRelation_m, CLASS) & s_instance(s_disjointRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_disjointRelation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn deathdate ?CLASS)
          (instance deathdate Predicate))
     (=> (instance ?INST ?CLASS) (deathdate ?INST ?INST)))))))
*/
fof(a7812,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_deathdate_m, CLASS) & s_instance(s_deathdate_m, s_Predicate)) => (s_instance(INST, CLASS) => s_deathdate(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn causesSubclass ?CLASS)
          (instance causesSubclass Predicate))
     (=> (instance ?INST ?CLASS) (causesSubclass ?INST ?INST)))))))
*/
fof(a7813,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_causesSubclass_m, CLASS) & s_instance(s_causesSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => s_causesSubclass(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn entails ?CLASS) (instance entails Predicate))
     (=> (instance ?INST ?CLASS) (entails ?INST ?INST)))))))
*/
fof(a7814,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_entails_m, CLASS) & s_instance(s_entails_m, s_Predicate)) => (s_instance(INST, CLASS) => s_entails(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Group)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hasUniform ?CLASS)
          (instance hasUniform Predicate))
     (=> (instance ?INST ?CLASS) (hasUniform ?INST ?INST)))))))
*/
fof(a7815,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Group) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hasUniform_m, CLASS) & s_instance(s_hasUniform_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hasUniform(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn trichotomizingOn ?CLASS)
          (instance trichotomizingOn Predicate))
     (=> (instance ?INST ?CLASS) (trichotomizingOn ?INST ?INST)))))))
*/
fof(a7816,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_trichotomizingOn_m, CLASS) & s_instance(s_trichotomizingOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_trichotomizingOn(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn intelligenceQuotient ?CLASS)
          (instance intelligenceQuotient Predicate))
     (=> (instance ?INST ?CLASS)
      (intelligenceQuotient ?INST ?INST)))))))
*/
fof(a7817,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_intelligenceQuotient_m, CLASS) & s_instance(s_intelligenceQuotient_m, s_Predicate)) => (s_instance(INST, CLASS) => s_intelligenceQuotient(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn color ?CLASS) (instance color Predicate))
     (=> (instance ?INST ?CLASS) (color ?INST ?INST)))))))
*/
fof(a7818,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_color_m, CLASS) & s_instance(s_color_m, s_Predicate)) => (s_instance(INST, CLASS) => s_color(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST NonnegativeInteger)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn stringLength ?CLASS)
          (instance stringLength Predicate))
     (=> (instance ?INST ?CLASS) (stringLength ?INST ?INST)))))))
*/
fof(a7819,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_NonnegativeInteger) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_stringLength_m, CLASS) & s_instance(s_stringLength_m, s_Predicate)) => (s_instance(INST, CLASS) => s_stringLength(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn customer ?CLASS) (instance customer Predicate))
     (=> (instance ?INST ?CLASS) (customer ?INST ?INST)))))))
*/
fof(a7820,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_customer_m, CLASS) & s_instance(s_customer_m, s_Predicate)) => (s_instance(INST, CLASS) => s_customer(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn lessThanOrEqualTo ?CLASS)
          (instance lessThanOrEqualTo Predicate))
     (=> (instance ?INST ?CLASS) (lessThanOrEqualTo ?INST ?INST)))))))
*/
fof(a7821,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_lessThanOrEqualTo_m, CLASS) & s_instance(s_lessThanOrEqualTo_m, s_Predicate)) => (s_instance(INST, CLASS) => lesseq(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn typicallyContainsPart ?CLASS)
          (instance typicallyContainsPart Predicate))
     (=> (instance ?INST ?CLASS)
      (typicallyContainsPart ?INST ?INST)))))))
*/
fof(a7822,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_typicallyContainsPart_m, CLASS) & s_instance(s_typicallyContainsPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_typicallyContainsPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hasPurpose ?CLASS)
          (instance hasPurpose Predicate))
     (=> (instance ?INST ?CLASS) (hasPurpose ?INST ?INST)))))))
*/
fof(a7823,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hasPurpose_m, CLASS) & s_instance(s_hasPurpose_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hasPurpose(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn overlapsTemporally ?CLASS)
          (instance overlapsTemporally Predicate))
     (=> (instance ?INST ?CLASS) (overlapsTemporally ?INST ?INST)))))))
*/
fof(a7824,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_overlapsTemporally_m, CLASS) & s_instance(s_overlapsTemporally_m, s_Predicate)) => (s_instance(INST, CLASS) => s_overlapsTemporally(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST StationaryArtifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn constructionPeriod ?CLASS)
          (instance constructionPeriod Predicate))
     (=> (instance ?INST ?CLASS) (constructionPeriod ?INST ?INST)))))))
*/
fof(a7825,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_StationaryArtifact) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_constructionPeriod_m, CLASS) & s_instance(s_constructionPeriod_m, s_Predicate)) => (s_instance(INST, CLASS) => s_constructionPeriod(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn friend ?CLASS) (instance friend Predicate))
     (=> (instance ?INST ?CLASS) (friend ?INST ?INST)))))))
*/
fof(a7826,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_friend_m, CLASS) & s_instance(s_friend_m, s_Predicate)) => (s_instance(INST, CLASS) => s_friend(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST WaterArea)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn waterDepth ?CLASS)
          (instance waterDepth Predicate))
     (=> (instance ?INST ?CLASS) (waterDepth ?INST ?INST)))))))
*/
fof(a7827,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_WaterArea) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_waterDepth_m, CLASS) & s_instance(s_waterDepth_m, s_Predicate)) => (s_instance(INST, CLASS) => s_waterDepth(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TwoDimensionalObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn sliceOfFigure ?CLASS)
          (instance sliceOfFigure Predicate))
     (=> (instance ?INST ?CLASS) (sliceOfFigure ?INST ?INST)))))))
*/
fof(a7828,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TwoDimensionalObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_sliceOfFigure_m, CLASS) & s_instance(s_sliceOfFigure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_sliceOfFigure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn resource ?CLASS) (instance resource Predicate))
     (=> (instance ?INST ?CLASS) (resource ?INST ?INST)))))))
*/
fof(a7829,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_resource_m, CLASS) & s_instance(s_resource_m, s_Predicate)) => (s_instance(INST, CLASS) => s_resource(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn earlier ?CLASS) (instance earlier Predicate))
     (=> (instance ?INST ?CLASS) (earlier ?INST ?INST)))))))
*/
fof(a7830,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_earlier_m, CLASS) & s_instance(s_earlier_m, s_Predicate)) => (s_instance(INST, CLASS) => s_earlier(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn telecomExtension ?CLASS)
          (instance telecomExtension Predicate))
     (=> (instance ?INST ?CLASS) (telecomExtension ?INST ?INST)))))))
*/
fof(a7831,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_telecomExtension_m, CLASS) & s_instance(s_telecomExtension_m, s_Predicate)) => (s_instance(INST, CLASS) => s_telecomExtension(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postContactSite ?CLASS)
          (instance postContactSite Predicate))
     (=> (instance ?INST ?CLASS) (postContactSite ?INST ?INST)))))))
*/
fof(a7832,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postContactSite_m, CLASS) & s_instance(s_postContactSite_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postContactSite(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn domesticPartner ?CLASS)
          (instance domesticPartner Predicate))
     (=> (instance ?INST ?CLASS) (domesticPartner ?INST ?INST)))))))
*/
fof(a7833,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_domesticPartner_m, CLASS) & s_instance(s_domesticPartner_m, s_Predicate)) => (s_instance(INST, CLASS) => s_domesticPartner(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Experimenting)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn experimentalControl ?CLASS)
          (instance experimentalControl Predicate))
     (=> (instance ?INST ?CLASS) (experimentalControl ?INST ?INST)))))))
*/
fof(a7834,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Experimenting) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_experimentalControl_m, CLASS) & s_instance(s_experimentalControl_m, s_Predicate)) => (s_instance(INST, CLASS) => s_experimentalControl(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn property ?CLASS) (instance property Predicate))
     (=> (instance ?INST ?CLASS) (property ?INST ?INST)))))))
*/
fof(a7835,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_property_m, CLASS) & s_instance(s_property_m, s_Predicate)) => (s_instance(INST, CLASS) => s_property(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hasExpertise ?CLASS)
          (instance hasExpertise Predicate))
     (=> (instance ?INST ?CLASS) (hasExpertise ?INST ?INST)))))))
*/
fof(a7836,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hasExpertise_m, CLASS) & s_instance(s_hasExpertise_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hasExpertise(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn faces ?CLASS) (instance faces Predicate))
     (=> (instance ?INST ?CLASS) (faces ?INST ?INST)))))))
*/
fof(a7837,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_faces_m, CLASS) & s_instance(s_faces_m, s_Predicate)) => (s_instance(INST, CLASS) => s_faces(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ServiceProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn serviceRecipient ?CLASS)
          (instance serviceRecipient Predicate))
     (=> (instance ?INST ?CLASS) (serviceRecipient ?INST ?INST)))))))
*/
fof(a7838,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ServiceProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_serviceRecipient_m, CLASS) & s_instance(s_serviceRecipient_m, s_Predicate)) => (s_instance(INST, CLASS) => s_serviceRecipient(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn leader ?CLASS) (instance leader Predicate))
     (=> (instance ?INST ?CLASS) (leader ?INST ?INST)))))))
*/
fof(a7839,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_leader_m, CLASS) & s_instance(s_leader_m, s_Predicate)) => (s_instance(INST, CLASS) => s_leader(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hasOccupation ?CLASS)
          (instance hasOccupation Predicate))
     (=> (instance ?INST ?CLASS) (hasOccupation ?INST ?INST)))))))
*/
fof(a7840,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hasOccupation_m, CLASS) & s_instance(s_hasOccupation_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hasOccupation(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SetOrClass)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn subclass ?CLASS) (instance subclass Predicate))
     (=> (instance ?INST ?CLASS) (subclass ?INST ?INST)))))))
*/
fof(a7841,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SetOrClass) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subclass_m, CLASS) & s_instance(s_subclass_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subclass(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn eventLocated ?CLASS)
          (instance eventLocated Predicate))
     (=> (instance ?INST ?CLASS) (eventLocated ?INST ?INST)))))))
*/
fof(a7842,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_eventLocated_m, CLASS) & s_instance(s_eventLocated_m, s_Predicate)) => (s_instance(INST, CLASS) => s_eventLocated(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn patient ?CLASS) (instance patient Predicate))
     (=> (instance ?INST ?CLASS) (patient ?INST ?INST)))))))
*/
fof(a7843,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_patient_m, CLASS) & s_instance(s_patient_m, s_Predicate)) => (s_instance(INST, CLASS) => s_patient(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn authors ?CLASS) (instance authors Predicate))
     (=> (instance ?INST ?CLASS) (authors ?INST ?INST)))))))
*/
fof(a7844,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_authors_m, CLASS) & s_instance(s_authors_m, s_Predicate)) => (s_instance(INST, CLASS) => s_authors(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ChemicalProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn reactant ?CLASS) (instance reactant Predicate))
     (=> (instance ?INST ?CLASS) (reactant ?INST ?INST)))))))
*/
fof(a7845,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ChemicalProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_reactant_m, CLASS) & s_instance(s_reactant_m, s_Predicate)) => (s_instance(INST, CLASS) => s_reactant(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn alias ?CLASS) (instance alias Predicate))
     (=> (instance ?INST ?CLASS) (alias ?INST ?INST)))))))
*/
fof(a7846,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_alias_m, CLASS) & s_instance(s_alias_m, s_Predicate)) => (s_instance(INST, CLASS) => s_alias(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Graph)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn graphMeasure ?CLASS)
          (instance graphMeasure Predicate))
     (=> (instance ?INST ?CLASS) (graphMeasure ?INST ?INST)))))))
*/
fof(a7847,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Graph) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_graphMeasure_m, CLASS) & s_instance(s_graphMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => s_graphMeasure(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn commentator ?CLASS)
          (instance commentator Predicate))
     (=> (instance ?INST ?CLASS) (commentator ?INST ?INST)))))))
*/
fof(a7848,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_commentator_m, CLASS) & s_instance(s_commentator_m, s_Predicate)) => (s_instance(INST, CLASS) => s_commentator(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn inventory ?CLASS)
          (instance inventory Predicate))
     (=> (instance ?INST ?CLASS) (inventory ?INST ?INST)))))))
*/
fof(a7849,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_inventory_m, CLASS) & s_instance(s_inventory_m, s_Predicate)) => (s_instance(INST, CLASS) => s_inventory(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Collection)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn memberType ?CLASS)
          (instance memberType Predicate))
     (=> (instance ?INST ?CLASS) (memberType ?INST ?INST)))))))
*/
fof(a7850,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Collection) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_memberType_m, CLASS) & s_instance(s_memberType_m, s_Predicate)) => (s_instance(INST, CLASS) => s_memberType(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn typicalPart ?CLASS)
          (instance typicalPart Predicate))
     (=> (instance ?INST ?CLASS) (typicalPart ?INST ?INST)))))))
*/
fof(a7851,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_typicalPart_m, CLASS) & s_instance(s_typicalPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_typicalPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Proposition)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn insured ?CLASS) (instance insured Predicate))
     (=> (instance ?INST ?CLASS) (insured ?INST ?INST)))))))
*/
fof(a7852,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_insured_m, CLASS) & s_instance(s_insured_m, s_Predicate)) => (s_instance(INST, CLASS) => s_insured(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GeographicArea)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn geographicSubregion ?CLASS)
          (instance geographicSubregion Predicate))
     (=> (instance ?INST ?CLASS) (geographicSubregion ?INST ?INST)))))))
*/
fof(a7853,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GeographicArea) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_geographicSubregion_m, CLASS) & s_instance(s_geographicSubregion_m, s_Predicate)) => (s_instance(INST, CLASS) => s_geographicSubregion(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn almamater ?CLASS)
          (instance almamater Predicate))
     (=> (instance ?INST ?CLASS) (almamater ?INST ?INST)))))))
*/
fof(a7854,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_almamater_m, CLASS) & s_instance(s_almamater_m, s_Predicate)) => (s_instance(INST, CLASS) => s_almamater(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn approves ?CLASS) (instance approves Predicate))
     (=> (instance ?INST ?CLASS) (approves ?INST ?INST)))))))
*/
fof(a7855,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_approves_m, CLASS) & s_instance(s_approves_m, s_Predicate)) => (s_instance(INST, CLASS) => s_approves(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn subList ?CLASS) (instance subList Predicate))
     (=> (instance ?INST ?CLASS) (subList ?INST ?INST)))))))
*/
fof(a7856,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_subList_m, CLASS) & s_instance(s_subList_m, s_Predicate)) => (s_instance(INST, CLASS) => s_subList(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn systemPart ?CLASS)
          (instance systemPart Predicate))
     (=> (instance ?INST ?CLASS) (systemPart ?INST ?INST)))))))
*/
fof(a7857,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_systemPart_m, CLASS) & s_instance(s_systemPart_m, s_Predicate)) => (s_instance(INST, CLASS) => s_systemPart(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn hasSkill ?CLASS) (instance hasSkill Predicate))
     (=> (instance ?INST ?CLASS) (hasSkill ?INST ?INST)))))))
*/
fof(a7858,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_hasSkill_m, CLASS) & s_instance(s_hasSkill_m, s_Predicate)) => (s_instance(INST, CLASS) => s_hasSkill(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn postStreet ?CLASS)
          (instance postStreet Predicate))
     (=> (instance ?INST ?CLASS) (postStreet ?INST ?INST)))))))
*/
fof(a7859,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_postStreet_m, CLASS) & s_instance(s_postStreet_m, s_Predicate)) => (s_instance(INST, CLASS) => s_postStreet(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn destination ?CLASS)
          (instance destination Predicate))
     (=> (instance ?INST ?CLASS) (destination ?INST ?INST)))))))
*/
fof(a7860,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_destination_m, CLASS) & s_instance(s_destination_m, s_Predicate)) => (s_instance(INST, CLASS) => s_destination(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OneDimensionalFigure)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn tangent ?CLASS) (instance tangent Predicate))
     (=> (instance ?INST ?CLASS) (tangent ?INST ?INST)))))))
*/
fof(a7861,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OneDimensionalFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_tangent_m, CLASS) & s_instance(s_tangent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_tangent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn floorCode ?CLASS)
          (instance floorCode Predicate))
     (=> (instance ?INST ?CLASS) (floorCode ?INST ?INST)))))))
*/
fof(a7862,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_floorCode_m, CLASS) & s_instance(s_floorCode_m, s_Predicate)) => (s_instance(INST, CLASS) => s_floorCode(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CorpuscularObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn powerComponent ?CLASS)
          (instance powerComponent Predicate))
     (=> (instance ?INST ?CLASS) (powerComponent ?INST ?INST)))))))
*/
fof(a7863,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CorpuscularObject) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_powerComponent_m, CLASS) & s_instance(s_powerComponent_m, s_Predicate)) => (s_instance(INST, CLASS) => s_powerComponent(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn creator ?CLASS) (instance creator Predicate))
     (=> (instance ?INST ?CLASS) (creator ?INST ?INST)))))))
*/
fof(a7864,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_creator_m, CLASS) & s_instance(s_creator_m, s_Predicate)) => (s_instance(INST, CLASS) => s_creator(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn doubts ?CLASS) (instance doubts Predicate))
     (=> (instance ?INST ?CLASS) (doubts ?INST ?INST)))))))
*/
fof(a7865,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_doubts_m, CLASS) & s_instance(s_doubts_m, s_Predicate)) => (s_instance(INST, CLASS) => s_doubts(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Relation)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn valence ?CLASS) (instance valence Predicate))
     (=> (instance ?INST ?CLASS) (valence ?INST ?INST)))))))
*/
fof(a7866,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Relation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_valence_m, CLASS) & s_instance(s_valence_m, s_Predicate)) => (s_instance(INST, CLASS) => s_valence(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryFunction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn distributes ?CLASS)
          (instance distributes Predicate))
     (=> (instance ?INST ?CLASS) (distributes ?INST ?INST)))))))
*/
fof(a7867,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryFunction) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_distributes_m, CLASS) & s_instance(s_distributes_m, s_Predicate)) => (s_instance(INST, CLASS) => s_distributes(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn suffers ?CLASS) (instance suffers Predicate))
     (=> (instance ?INST ?CLASS) (suffers ?INST ?INST)))))))
*/
fof(a7868,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_suffers_m, CLASS) & s_instance(s_suffers_m, s_Predicate)) => (s_instance(INST, CLASS) => s_suffers(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn relative ?CLASS) (instance relative Predicate))
     (=> (instance ?INST ?CLASS) (relative ?INST ?INST)))))))
*/
fof(a7869,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_relative_m, CLASS) & s_instance(s_relative_m, s_Predicate)) => (s_instance(INST, CLASS) => s_relative(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn inList ?CLASS) (instance inList Predicate))
     (=> (instance ?INST ?CLASS) (inList ?INST ?INST)))))))
*/
fof(a7870,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_inList_m, CLASS) & s_instance(s_inList_m, s_Predicate)) => (s_instance(INST, CLASS) => s_inList(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn cohabitant ?CLASS)
          (instance cohabitant Predicate))
     (=> (instance ?INST ?CLASS) (cohabitant ?INST ?INST)))))))
*/
fof(a7871,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_cohabitant_m, CLASS) & s_instance(s_cohabitant_m, s_Predicate)) => (s_instance(INST, CLASS) => s_cohabitant(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn instrument ?CLASS)
          (instance instrument Predicate))
     (=> (instance ?INST ?CLASS) (instrument ?INST ?INST)))))))
*/
fof(a7872,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_instrument_m, CLASS) & s_instance(s_instrument_m, s_Predicate)) => (s_instance(INST, CLASS) => s_instrument(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Artifact))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn version ?CLASS) (instance version Predicate))
     (=> (instance ?INST ?CLASS) (version ?INST ?INST)))))))
*/
fof(a7873,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Artifact)) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_version_m, CLASS) & s_instance(s_version_m, s_Predicate)) => (s_instance(INST, CLASS) => s_version(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Collection)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn memberCount ?CLASS)
          (instance memberCount Predicate))
     (=> (instance ?INST ?CLASS) (memberCount ?INST ?INST)))))))
*/
fof(a7874,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Collection) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_memberCount_m, CLASS) & s_instance(s_memberCount_m, s_Predicate)) => (s_instance(INST, CLASS) => s_memberCount(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (reflexiveOn knows ?CLASS) (instance knows Predicate))
     (=> (instance ?INST ?CLASS) (knows ?INST ?INST)))))))
*/
fof(a7875,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_knows_m, CLASS) & s_instance(s_knows_m, s_Predicate)) => (s_instance(INST, CLASS) => s_knows(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn identicalListItems ?CLASS)
          (instance identicalListItems Predicate))
     (=> (instance ?INST ?CLASS) (identicalListItems ?INST ?INST)))))))
*/
fof(a7876,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_identicalListItems_m, CLASS) & s_instance(s_identicalListItems_m, s_Predicate)) => (s_instance(INST, CLASS) => s_identicalListItems(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn dateEstablished ?CLASS)
          (instance dateEstablished Predicate))
     (=> (instance ?INST ?CLASS) (dateEstablished ?INST ?INST)))))))
*/
fof(a7877,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_dateEstablished_m, CLASS) & s_instance(s_dateEstablished_m, s_Predicate)) => (s_instance(INST, CLASS) => s_dateEstablished(INST, INST)))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (reflexiveOn partialOrderingOn ?CLASS)
          (instance partialOrderingOn Predicate))
     (=> (instance ?INST ?CLASS) (partialOrderingOn ?INST ?INST)))))))
*/
fof(a7878,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_reflexiveOn(s_partialOrderingOn_m, CLASS) & s_instance(s_partialOrderingOn_m, s_Predicate)) => (s_instance(INST, CLASS) => s_partialOrderingOn(INST, INST)))))))).

/*
(instance irreflexiveOn BinaryPredicate)
*/
fof(a7879,axiom,s_instance(s_irreflexiveOn_m, s_BinaryPredicate)).

/*
(instance irreflexiveOn AsymmetricRelation)
*/
fof(a7880,axiom,s_instance(s_irreflexiveOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn preventsSubclass ?CLASS)
          (instance preventsSubclass Predicate))
     (=> (instance ?INST ?CLASS)
      (not (preventsSubclass ?INST ?INST))))))))
*/
fof(a7881,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_preventsSubclass_m, CLASS) & s_instance(s_preventsSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_preventsSubclass(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Man)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn uncle ?CLASS) (instance uncle Predicate))
     (=> (instance ?INST ?CLASS) (not (uncle ?INST ?INST))))))))
*/
fof(a7882,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Man) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_uncle_m, CLASS) & s_instance(s_uncle_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_uncle(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelephonyDevice)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telecomContactDevice ?CLASS)
          (instance telecomContactDevice Predicate))
     (=> (instance ?INST ?CLASS)
      (not (telecomContactDevice ?INST ?INST))))))))
*/
fof(a7883,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelephonyDevice) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telecomContactDevice_m, CLASS) & s_instance(s_telecomContactDevice_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telecomContactDevice(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn top ?CLASS) (instance top Predicate))
     (=> (instance ?INST ?CLASS) (not (top ?INST ?INST))))))))
*/
fof(a7884,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_top_m, CLASS) & s_instance(s_top_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_top(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn deceptiveIdentifier ?CLASS)
          (instance deceptiveIdentifier Predicate))
     (=> (instance ?INST ?CLASS)
      (not (deceptiveIdentifier ?INST ?INST))))))))
*/
fof(a7885,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_deceptiveIdentifier_m, CLASS) & s_instance(s_deceptiveIdentifier_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_deceptiveIdentifier(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn faxNumber ?CLASS)
          (instance faxNumber Predicate))
     (=> (instance ?INST ?CLASS) (not (faxNumber ?INST ?INST))))))))
*/
fof(a7886,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_faxNumber_m, CLASS) & s_instance(s_faxNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_faxNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GraphElement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn graphPart ?CLASS)
          (instance graphPart Predicate))
     (=> (instance ?INST ?CLASS) (not (graphPart ?INST ?INST))))))))
*/
fof(a7887,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GraphElement) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_graphPart_m, CLASS) & s_instance(s_graphPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_graphPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn occupation ?CLASS)
          (instance occupation Predicate))
     (=> (instance ?INST ?CLASS) (not (occupation ?INST ?INST))))))))
*/
fof(a7888,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_occupation_m, CLASS) & s_instance(s_occupation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_occupation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn connected ?CLASS)
          (instance connected Predicate))
     (=> (instance ?INST ?CLASS) (not (connected ?INST ?INST))))))))
*/
fof(a7889,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_connected_m, CLASS) & s_instance(s_connected_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_connected(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn element ?CLASS) (instance element Predicate))
     (=> (instance ?INST ?CLASS) (not (element ?INST ?INST))))))))
*/
fof(a7890,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_element_m, CLASS) & s_instance(s_element_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_element(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn smaller ?CLASS) (instance smaller Predicate))
     (=> (instance ?INST ?CLASS) (not (smaller ?INST ?INST))))))))
*/
fof(a7891,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_smaller_m, CLASS) & s_instance(s_smaller_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_smaller(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn inverse ?CLASS) (instance inverse Predicate))
     (=> (instance ?INST ?CLASS) (not (inverse ?INST ?INST))))))))
*/
fof(a7892,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_inverse_m, CLASS) & s_instance(s_inverse_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_inverse(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postNeighborhood ?CLASS)
          (instance postNeighborhood Predicate))
     (=> (instance ?INST ?CLASS)
      (not (postNeighborhood ?INST ?INST))))))))
*/
fof(a7893,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postNeighborhood_m, CLASS) & s_instance(s_postNeighborhood_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postNeighborhood(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Argument)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn premise ?CLASS) (instance premise Predicate))
     (=> (instance ?INST ?CLASS) (not (premise ?INST ?INST))))))))
*/
fof(a7894,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Argument) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_premise_m, CLASS) & s_instance(s_premise_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_premise(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn relatedInternalConcept ?CLASS)
          (instance relatedInternalConcept Predicate))
     (=> (instance ?INST ?CLASS)
      (not (relatedInternalConcept ?INST ?INST))))))))
*/
fof(a7895,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_relatedInternalConcept_m, CLASS) & s_instance(s_relatedInternalConcept_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_relatedInternalConcept(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telecomCoreNumber ?CLASS)
          (instance telecomCoreNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (telecomCoreNumber ?INST ?INST))))))))
*/
fof(a7896,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telecomCoreNumber_m, CLASS) & s_instance(s_telecomCoreNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telecomCoreNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn acquaintance ?CLASS)
          (instance acquaintance Predicate))
     (=> (instance ?INST ?CLASS) (not (acquaintance ?INST ?INST))))))))
*/
fof(a7897,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_acquaintance_m, CLASS) & s_instance(s_acquaintance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_acquaintance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn meetsTemporally ?CLASS)
          (instance meetsTemporally Predicate))
     (=> (instance ?INST ?CLASS)
      (not (meetsTemporally ?INST ?INST))))))))
*/
fof(a7898,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_meetsTemporally_m, CLASS) & s_instance(s_meetsTemporally_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_meetsTemporally(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn relatedEvent ?CLASS)
          (instance relatedEvent Predicate))
     (=> (instance ?INST ?CLASS) (not (relatedEvent ?INST ?INST))))))))
*/
fof(a7899,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_relatedEvent_m, CLASS) & s_instance(s_relatedEvent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_relatedEvent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Argument)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn conclusion ?CLASS)
          (instance conclusion Predicate))
     (=> (instance ?INST ?CLASS) (not (conclusion ?INST ?INST))))))))
*/
fof(a7900,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Argument) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_conclusion_m, CLASS) & s_instance(s_conclusion_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_conclusion(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Meat))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn meatOfAnimal ?CLASS)
          (instance meatOfAnimal Predicate))
     (=> (instance ?INST ?CLASS) (not (meatOfAnimal ?INST ?INST))))))))
*/
fof(a7901,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Meat)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_meatOfAnimal_m, CLASS) & s_instance(s_meatOfAnimal_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_meatOfAnimal(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST AchievingControl)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn gainsControl ?CLASS)
          (instance gainsControl Predicate))
     (=> (instance ?INST ?CLASS) (not (gainsControl ?INST ?INST))))))))
*/
fof(a7902,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_AchievingControl) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_gainsControl_m, CLASS) & s_instance(s_gainsControl_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_gainsControl(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Hole)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn hole ?CLASS) (instance hole Predicate))
     (=> (instance ?INST ?CLASS) (not (hole ?INST ?INST))))))))
*/
fof(a7903,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Hole) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hole_m, CLASS) & s_instance(s_hole_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hole(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Animal)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn wears ?CLASS) (instance wears Predicate))
     (=> (instance ?INST ?CLASS) (not (wears ?INST ?INST))))))))
*/
fof(a7904,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Animal) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_wears_m, CLASS) & s_instance(s_wears_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_wears(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Character)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn inString ?CLASS)
          (instance inString Predicate))
     (=> (instance ?INST ?CLASS) (not (inString ?INST ?INST))))))))
*/
fof(a7905,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Character) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_inString_m, CLASS) & s_instance(s_inString_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_inString(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telephoneNumber ?CLASS)
          (instance telephoneNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (telephoneNumber ?INST ?INST))))))))
*/
fof(a7906,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telephoneNumber_m, CLASS) & s_instance(s_telephoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telephoneNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST MusicalTone)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn soundFrequency ?CLASS)
          (instance soundFrequency Predicate))
     (=> (instance ?INST ?CLASS)
      (not (soundFrequency ?INST ?INST))))))))
*/
fof(a7907,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_MusicalTone) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_soundFrequency_m, CLASS) & s_instance(s_soundFrequency_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_soundFrequency(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OneDimensionalFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn lineMeasure ?CLASS)
          (instance lineMeasure Predicate))
     (=> (instance ?INST ?CLASS) (not (lineMeasure ?INST ?INST))))))))
*/
fof(a7908,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OneDimensionalFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_lineMeasure_m, CLASS) & s_instance(s_lineMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_lineMeasure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postCity ?CLASS)
          (instance postCity Predicate))
     (=> (instance ?INST ?CLASS) (not (postCity ?INST ?INST))))))))
*/
fof(a7909,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postCity_m, CLASS) & s_instance(s_postCity_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postCity(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST PureSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn meltingPoint ?CLASS)
          (instance meltingPoint Predicate))
     (=> (instance ?INST ?CLASS) (not (meltingPoint ?INST ?INST))))))))
*/
fof(a7910,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_PureSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_meltingPoint_m, CLASS) & s_instance(s_meltingPoint_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_meltingPoint(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TwoDimensionalAngle)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn angularMeasure ?CLASS)
          (instance angularMeasure Predicate))
     (=> (instance ?INST ?CLASS)
      (not (angularMeasure ?INST ?INST))))))))
*/
fof(a7911,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TwoDimensionalAngle) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_angularMeasure_m, CLASS) & s_instance(s_angularMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_angularMeasure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Attribute)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subAttribute ?CLASS)
          (instance subAttribute Predicate))
     (=> (instance ?INST ?CLASS) (not (subAttribute ?INST ?INST))))))))
*/
fof(a7912,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subAttribute_m, CLASS) & s_instance(s_subAttribute_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subAttribute(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn totalOrderingOn ?CLASS)
          (instance totalOrderingOn Predicate))
     (=> (instance ?INST ?CLASS)
      (not (totalOrderingOn ?INST ?INST))))))))
*/
fof(a7913,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_totalOrderingOn_m, CLASS) & s_instance(s_totalOrderingOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_totalOrderingOn(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn resourceExhausted ?CLASS)
          (instance resourceExhausted Predicate))
     (=> (instance ?INST ?CLASS)
      (not (resourceExhausted ?INST ?INST))))))))
*/
fof(a7914,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_resourceExhausted_m, CLASS) & s_instance(s_resourceExhausted_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_resourceExhausted(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn believes ?CLASS)
          (instance believes Predicate))
     (=> (instance ?INST ?CLASS) (not (believes ?INST ?INST))))))))
*/
fof(a7915,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_believes_m, CLASS) & s_instance(s_believes_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_believes(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn eventPartlyLocated ?CLASS)
          (instance eventPartlyLocated Predicate))
     (=> (instance ?INST ?CLASS)
      (not (eventPartlyLocated ?INST ?INST))))))))
*/
fof(a7916,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_eventPartlyLocated_m, CLASS) & s_instance(s_eventPartlyLocated_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_eventPartlyLocated(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn familyRelation ?CLASS)
          (instance familyRelation Predicate))
     (=> (instance ?INST ?CLASS)
      (not (familyRelation ?INST ?INST))))))))
*/
fof(a7917,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_familyRelation_m, CLASS) & s_instance(s_familyRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_familyRelation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn increasesLikelihood ?CLASS)
          (instance increasesLikelihood Predicate))
     (=> (instance ?INST ?CLASS)
      (not (increasesLikelihood ?INST ?INST))))))))
*/
fof(a7918,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_increasesLikelihood_m, CLASS) & s_instance(s_increasesLikelihood_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_increasesLikelihood(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn stepmother ?CLASS)
          (instance stepmother Predicate))
     (=> (instance ?INST ?CLASS) (not (stepmother ?INST ?INST))))))))
*/
fof(a7919,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_stepmother_m, CLASS) & s_instance(s_stepmother_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_stepmother(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Artifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn equipmentType ?CLASS)
          (instance equipmentType Predicate))
     (=> (instance ?INST ?CLASS) (not (equipmentType ?INST ?INST))))))))
*/
fof(a7920,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Artifact) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_equipmentType_m, CLASS) & s_instance(s_equipmentType_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_equipmentType(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn mutualStranger ?CLASS)
          (instance mutualStranger Predicate))
     (=> (instance ?INST ?CLASS)
      (not (mutualStranger ?INST ?INST))))))))
*/
fof(a7921,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_mutualStranger_m, CLASS) & s_instance(s_mutualStranger_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_mutualStranger(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn givenName ?CLASS)
          (instance givenName Predicate))
     (=> (instance ?INST ?CLASS) (not (givenName ?INST ?INST))))))))
*/
fof(a7922,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_givenName_m, CLASS) & s_instance(s_givenName_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_givenName(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PlacingUnderArrest)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn arrested ?CLASS)
          (instance arrested Predicate))
     (=> (instance ?INST ?CLASS) (not (arrested ?INST ?INST))))))))
*/
fof(a7923,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PlacingUnderArrest) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_arrested_m, CLASS) & s_instance(s_arrested_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_arrested(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn policyOwner ?CLASS)
          (instance policyOwner Predicate))
     (=> (instance ?INST ?CLASS) (not (policyOwner ?INST ?INST))))))))
*/
fof(a7924,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_policyOwner_m, CLASS) & s_instance(s_policyOwner_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_policyOwner(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn expects ?CLASS) (instance expects Predicate))
     (=> (instance ?INST ?CLASS) (not (expects ?INST ?INST))))))))
*/
fof(a7925,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_expects_m, CLASS) & s_instance(s_expects_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_expects(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Motion)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn path ?CLASS) (instance path Predicate))
     (=> (instance ?INST ?CLASS) (not (path ?INST ?INST))))))))
*/
fof(a7926,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Motion) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_path_m, CLASS) & s_instance(s_path_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_path(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn traverses ?CLASS)
          (instance traverses Predicate))
     (=> (instance ?INST ?CLASS) (not (traverses ?INST ?INST))))))))
*/
fof(a7927,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_traverses_m, CLASS) & s_instance(s_traverses_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_traverses(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postStreetNumber ?CLASS)
          (instance postStreetNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (postStreetNumber ?INST ?INST))))))))
*/
fof(a7928,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postStreetNumber_m, CLASS) & s_instance(s_postStreetNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postStreetNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn middleName ?CLASS)
          (instance middleName Predicate))
     (=> (instance ?INST ?CLASS) (not (middleName ?INST ?INST))))))))
*/
fof(a7929,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_middleName_m, CLASS) & s_instance(s_middleName_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_middleName(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn birthdate ?CLASS)
          (instance birthdate Predicate))
     (=> (instance ?INST ?CLASS) (not (birthdate ?INST ?INST))))))))
*/
fof(a7930,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_birthdate_m, CLASS) & s_instance(s_birthdate_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_birthdate(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn cooccur ?CLASS) (instance cooccur Predicate))
     (=> (instance ?INST ?CLASS) (not (cooccur ?INST ?INST))))))))
*/
fof(a7931,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_cooccur_m, CLASS) & s_instance(s_cooccur_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_cooccur(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn coworker ?CLASS)
          (instance coworker Predicate))
     (=> (instance ?INST ?CLASS) (not (coworker ?INST ?INST))))))))
*/
fof(a7932,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_coworker_m, CLASS) & s_instance(s_coworker_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_coworker(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn tenant ?CLASS) (instance tenant Predicate))
     (=> (instance ?INST ?CLASS) (not (tenant ?INST ?INST))))))))
*/
fof(a7933,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_tenant_m, CLASS) & s_instance(s_tenant_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_tenant(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn weight ?CLASS) (instance weight Predicate))
     (=> (instance ?INST ?CLASS) (not (weight ?INST ?INST))))))))
*/
fof(a7934,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_weight_m, CLASS) & s_instance(s_weight_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_weight(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn capacity ?CLASS)
          (instance capacity Predicate))
     (=> (instance ?INST ?CLASS) (not (capacity ?INST ?INST))))))))
*/
fof(a7935,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_capacity_m, CLASS) & s_instance(s_capacity_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_capacity(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PureSubstance)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn protonNumber ?CLASS)
          (instance protonNumber Predicate))
     (=> (instance ?INST ?CLASS) (not (protonNumber ?INST ?INST))))))))
*/
fof(a7936,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PureSubstance) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_protonNumber_m, CLASS) & s_instance(s_protonNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_protonNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn personalPhoneNumber ?CLASS)
          (instance personalPhoneNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (personalPhoneNumber ?INST ?INST))))))))
*/
fof(a7937,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_personalPhoneNumber_m, CLASS) & s_instance(s_personalPhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_personalPhoneNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn initialList ?CLASS)
          (instance initialList Predicate))
     (=> (instance ?INST ?CLASS) (not (initialList ?INST ?INST))))))))
*/
fof(a7938,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_initialList_m, CLASS) & s_instance(s_initialList_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_initialList(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST MeasuringDevice)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn measurementReading ?CLASS)
          (instance measurementReading Predicate))
     (=> (instance ?INST ?CLASS)
      (not (measurementReading ?INST ?INST))))))))
*/
fof(a7939,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_MeasuringDevice) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_measurementReading_m, CLASS) & s_instance(s_measurementReading_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_measurementReading(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn agent ?CLASS) (instance agent Predicate))
     (=> (instance ?INST ?CLASS) (not (agent ?INST ?INST))))))))
*/
fof(a7940,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_agent_m, CLASS) & s_instance(s_agent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_agent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST OrganicObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn secretesSubstance ?CLASS)
          (instance secretesSubstance Predicate))
     (=> (instance ?INST ?CLASS)
      (not (secretesSubstance ?INST ?INST))))))))
*/
fof(a7941,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_OrganicObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_secretesSubstance_m, CLASS) & s_instance(s_secretesSubstance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_secretesSubstance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn equivalenceRelationOn ?CLASS)
          (instance equivalenceRelationOn Predicate))
     (=> (instance ?INST ?CLASS)
      (not (equivalenceRelationOn ?INST ?INST))))))))
*/
fof(a7942,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_equivalenceRelationOn_m, CLASS) & s_instance(s_equivalenceRelationOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_equivalenceRelationOn(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn axis ?CLASS) (instance axis Predicate))
     (=> (instance ?INST ?CLASS) (not (axis ?INST ?INST))))))))
*/
fof(a7943,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_axis_m, CLASS) & s_instance(s_axis_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_axis(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn allegiance ?CLASS)
          (instance allegiance Predicate))
     (=> (instance ?INST ?CLASS) (not (allegiance ?INST ?INST))))))))
*/
fof(a7944,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_allegiance_m, CLASS) & s_instance(s_allegiance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_allegiance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContactSite)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn siteForContact ?CLASS)
          (instance siteForContact Predicate))
     (=> (instance ?INST ?CLASS)
      (not (siteForContact ?INST ?INST))))))))
*/
fof(a7945,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContactSite) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_siteForContact_m, CLASS) & s_instance(s_siteForContact_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_siteForContact(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ServiceProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn serviceProvider ?CLASS)
          (instance serviceProvider Predicate))
     (=> (instance ?INST ?CLASS)
      (not (serviceProvider ?INST ?INST))))))))
*/
fof(a7946,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ServiceProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_serviceProvider_m, CLASS) & s_instance(s_serviceProvider_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_serviceProvider(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PureSubstance)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn electronNumber ?CLASS)
          (instance electronNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (electronNumber ?INST ?INST))))))))
*/
fof(a7947,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PureSubstance) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_electronNumber_m, CLASS) & s_instance(s_electronNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_electronNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST AchievingControl)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn controlled ?CLASS)
          (instance controlled Predicate))
     (=> (instance ?INST ?CLASS) (not (controlled ?INST ?INST))))))))
*/
fof(a7948,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_AchievingControl) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_controlled_m, CLASS) & s_instance(s_controlled_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_controlled(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn structure ?CLASS)
          (instance structure Predicate))
     (=> (instance ?INST ?CLASS) (not (structure ?INST ?INST))))))))
*/
fof(a7949,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_structure_m, CLASS) & s_instance(s_structure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_structure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn time ?CLASS) (instance time Predicate))
     (=> (instance ?INST ?CLASS) (not (time ?INST ?INST))))))))
*/
fof(a7950,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_time_m, CLASS) & s_instance(s_time_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_time(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Woman)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn niece ?CLASS) (instance niece Predicate))
     (=> (instance ?INST ?CLASS) (not (niece ?INST ?INST))))))))
*/
fof(a7951,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Woman) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_niece_m, CLASS) & s_instance(s_niece_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_niece(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postDistrict ?CLASS)
          (instance postDistrict Predicate))
     (=> (instance ?INST ?CLASS) (not (postDistrict ?INST ?INST))))))))
*/
fof(a7952,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postDistrict_m, CLASS) & s_instance(s_postDistrict_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postDistrict(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Motion)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn moves ?CLASS) (instance moves Predicate))
     (=> (instance ?INST ?CLASS) (not (moves ?INST ?INST))))))))
*/
fof(a7953,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Motion) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_moves_m, CLASS) & s_instance(s_moves_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_moves(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn causes ?CLASS) (instance causes Predicate))
     (=> (instance ?INST ?CLASS) (not (causes ?INST ?INST))))))))
*/
fof(a7954,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_causes_m, CLASS) & s_instance(s_causes_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_causes(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Man)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn nephew ?CLASS) (instance nephew Predicate))
     (=> (instance ?INST ?CLASS) (not (nephew ?INST ?INST))))))))
*/
fof(a7955,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Man) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_nephew_m, CLASS) & s_instance(s_nephew_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_nephew(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Abstract)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn abstractPart ?CLASS)
          (instance abstractPart Predicate))
     (=> (instance ?INST ?CLASS) (not (abstractPart ?INST ?INST))))))))
*/
fof(a7956,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Abstract) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_abstractPart_m, CLASS) & s_instance(s_abstractPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_abstractPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hasAward ?CLASS)
          (instance hasAward Predicate))
     (=> (instance ?INST ?CLASS) (not (hasAward ?INST ?INST))))))))
*/
fof(a7957,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hasAward_m, CLASS) & s_instance(s_hasAward_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hasAward(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn desires ?CLASS) (instance desires Predicate))
     (=> (instance ?INST ?CLASS) (not (desires ?INST ?INST))))))))
*/
fof(a7958,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_desires_m, CLASS) & s_instance(s_desires_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_desires(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Attribute)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn successorAttribute ?CLASS)
          (instance successorAttribute Predicate))
     (=> (instance ?INST ?CLASS)
      (not (successorAttribute ?INST ?INST))))))))
*/
fof(a7959,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_successorAttribute_m, CLASS) & s_instance(s_successorAttribute_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_successorAttribute(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn workAddress ?CLASS)
          (instance workAddress Predicate))
     (=> (instance ?INST ?CLASS) (not (workAddress ?INST ?INST))))))))
*/
fof(a7960,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_workAddress_m, CLASS) & s_instance(s_workAddress_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_workAddress(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn mobilePhoneNumber ?CLASS)
          (instance mobilePhoneNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (mobilePhoneNumber ?INST ?INST))))))))
*/
fof(a7961,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_mobilePhoneNumber_m, CLASS) & s_instance(s_mobilePhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_mobilePhoneNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agreement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn agreementExpirationDate ?CLASS)
          (instance agreementExpirationDate Predicate))
     (=> (instance ?INST ?CLASS)
      (not (agreementExpirationDate ?INST ?INST))))))))
*/
fof(a7962,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agreement) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_agreementExpirationDate_m, CLASS) & s_instance(s_agreementExpirationDate_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_agreementExpirationDate(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Collection)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subCollection ?CLASS)
          (instance subCollection Predicate))
     (=> (instance ?INST ?CLASS) (not (subCollection ?INST ?INST))))))))
*/
fof(a7963,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Collection) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subCollection_m, CLASS) & s_instance(s_subCollection_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subCollection(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn affiliatedOrganization ?CLASS)
          (instance affiliatedOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (not (affiliatedOrganization ?INST ?INST))))))))
*/
fof(a7964,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_affiliatedOrganization_m, CLASS) & s_instance(s_affiliatedOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_affiliatedOrganization(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Text)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn registeredItem ?CLASS)
          (instance registeredItem Predicate))
     (=> (instance ?INST ?CLASS)
      (not (registeredItem ?INST ?INST))))))))
*/
fof(a7965,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Text) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_registeredItem_m, CLASS) & s_instance(s_registeredItem_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_registeredItem(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GeometricFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn geometricPart ?CLASS)
          (instance geometricPart Predicate))
     (=> (instance ?INST ?CLASS) (not (geometricPart ?INST ?INST))))))))
*/
fof(a7966,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GeometricFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_geometricPart_m, CLASS) & s_instance(s_geometricPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_geometricPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn fleetSize ?CLASS)
          (instance fleetSize Predicate))
     (=> (instance ?INST ?CLASS) (not (fleetSize ?INST ?INST))))))))
*/
fof(a7967,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_fleetSize_m, CLASS) & s_instance(s_fleetSize_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_fleetSize(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn date ?CLASS) (instance date Predicate))
     (=> (instance ?INST ?CLASS) (not (date ?INST ?INST))))))))
*/
fof(a7968,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_date_m, CLASS) & s_instance(s_date_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_date(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Animal)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn birthplace ?CLASS)
          (instance birthplace Predicate))
     (=> (instance ?INST ?CLASS) (not (birthplace ?INST ?INST))))))))
*/
fof(a7969,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Animal) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_birthplace_m, CLASS) & s_instance(s_birthplace_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_birthplace(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PowerSource)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn voltageMeasure ?CLASS)
          (instance voltageMeasure Predicate))
     (=> (instance ?INST ?CLASS)
      (not (voltageMeasure ?INST ?INST))))))))
*/
fof(a7970,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PowerSource) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_voltageMeasure_m, CLASS) & s_instance(s_voltageMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_voltageMeasure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Substance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn material ?CLASS)
          (instance material Predicate))
     (=> (instance ?INST ?CLASS) (not (material ?INST ?INST))))))))
*/
fof(a7971,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Substance)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_material_m, CLASS) & s_instance(s_material_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_material(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn initialPart ?CLASS)
          (instance initialPart Predicate))
     (=> (instance ?INST ?CLASS) (not (initialPart ?INST ?INST))))))))
*/
fof(a7972,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_initialPart_m, CLASS) & s_instance(s_initialPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_initialPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn origin ?CLASS) (instance origin Predicate))
     (=> (instance ?INST ?CLASS) (not (origin ?INST ?INST))))))))
*/
fof(a7973,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_origin_m, CLASS) & s_instance(s_origin_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_origin(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn precondition ?CLASS)
          (instance precondition Predicate))
     (=> (instance ?INST ?CLASS) (not (precondition ?INST ?INST))))))))
*/
fof(a7974,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_precondition_m, CLASS) & s_instance(s_precondition_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_precondition(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn irreflexiveOn ?CLASS)
          (instance irreflexiveOn Predicate))
     (=> (instance ?INST ?CLASS) (not (irreflexiveOn ?INST ?INST))))))))
*/
fof(a7975,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_irreflexiveOn_m, CLASS) & s_instance(s_irreflexiveOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_irreflexiveOn(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn localLongName ?CLASS)
          (instance localLongName Predicate))
     (=> (instance ?INST ?CLASS) (not (localLongName ?INST ?INST))))))))
*/
fof(a7976,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_localLongName_m, CLASS) & s_instance(s_localLongName_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_localLongName(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn deviceState ?CLASS)
          (instance deviceState Predicate))
     (=> (instance ?INST ?CLASS) (not (deviceState ?INST ?INST))))))))
*/
fof(a7977,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_deviceState_m, CLASS) & s_instance(s_deviceState_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_deviceState(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn legalRelation ?CLASS)
          (instance legalRelation Predicate))
     (=> (instance ?INST ?CLASS) (not (legalRelation ?INST ?INST))))))))
*/
fof(a7978,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_legalRelation_m, CLASS) & s_instance(s_legalRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_legalRelation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn cousin ?CLASS) (instance cousin Predicate))
     (=> (instance ?INST ?CLASS) (not (cousin ?INST ?INST))))))))
*/
fof(a7979,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_cousin_m, CLASS) & s_instance(s_cousin_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_cousin(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn targetInAttack ?CLASS)
          (instance targetInAttack Predicate))
     (=> (instance ?INST ?CLASS)
      (not (targetInAttack ?INST ?INST))))))))
*/
fof(a7980,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_targetInAttack_m, CLASS) & s_instance(s_targetInAttack_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_targetInAttack(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimePoint)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn beforeOrEqual ?CLASS)
          (instance beforeOrEqual Predicate))
     (=> (instance ?INST ?CLASS) (not (beforeOrEqual ?INST ?INST))))))))
*/
fof(a7981,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimePoint) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_beforeOrEqual_m, CLASS) & s_instance(s_beforeOrEqual_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_beforeOrEqual(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn partyToAgreement ?CLASS)
          (instance partyToAgreement Predicate))
     (=> (instance ?INST ?CLASS)
      (not (partyToAgreement ?INST ?INST))))))))
*/
fof(a7982,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_partyToAgreement_m, CLASS) & s_instance(s_partyToAgreement_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_partyToAgreement(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn result ?CLASS) (instance result Predicate))
     (=> (instance ?INST ?CLASS) (not (result ?INST ?INST))))))))
*/
fof(a7983,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_result_m, CLASS) & s_instance(s_result_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_result(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn experiencer ?CLASS)
          (instance experiencer Predicate))
     (=> (instance ?INST ?CLASS) (not (experiencer ?INST ?INST))))))))
*/
fof(a7984,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_experiencer_m, CLASS) & s_instance(s_experiencer_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_experiencer(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telecomAreaCode ?CLASS)
          (instance telecomAreaCode Predicate))
     (=> (instance ?INST ?CLASS)
      (not (telecomAreaCode ?INST ?INST))))))))
*/
fof(a7985,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telecomAreaCode_m, CLASS) & s_instance(s_telecomAreaCode_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telecomAreaCode(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Phrase)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn grammaticalRelation ?CLASS)
          (instance grammaticalRelation Predicate))
     (=> (instance ?INST ?CLASS)
      (not (grammaticalRelation ?INST ?INST))))))))
*/
fof(a7986,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Phrase) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_grammaticalRelation_m, CLASS) & s_instance(s_grammaticalRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_grammaticalRelation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OneDimensionalFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn parallel ?CLASS)
          (instance parallel Predicate))
     (=> (instance ?INST ?CLASS) (not (parallel ?INST ?INST))))))))
*/
fof(a7987,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OneDimensionalFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_parallel_m, CLASS) & s_instance(s_parallel_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_parallel(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn duration ?CLASS)
          (instance duration Predicate))
     (=> (instance ?INST ?CLASS) (not (duration ?INST ?INST))))))))
*/
fof(a7988,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_duration_m, CLASS) & s_instance(s_duration_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_duration(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn ancestorOrganization ?CLASS)
          (instance ancestorOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (not (ancestorOrganization ?INST ?INST))))))))
*/
fof(a7989,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_ancestorOrganization_m, CLASS) & s_instance(s_ancestorOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_ancestorOrganization(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn homePhoneNumber ?CLASS)
          (instance homePhoneNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (homePhoneNumber ?INST ?INST))))))))
*/
fof(a7990,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_homePhoneNumber_m, CLASS) & s_instance(s_homePhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_homePhoneNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn describes ?CLASS)
          (instance describes Predicate))
     (=> (instance ?INST ?CLASS) (not (describes ?INST ?INST))))))))
*/
fof(a7991,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_describes_m, CLASS) & s_instance(s_describes_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_describes(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn prevents ?CLASS)
          (instance prevents Predicate))
     (=> (instance ?INST ?CLASS) (not (prevents ?INST ?INST))))))))
*/
fof(a7992,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_prevents_m, CLASS) & s_instance(s_prevents_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_prevents(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Shipping)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn cargo ?CLASS) (instance cargo Predicate))
     (=> (instance ?INST ?CLASS) (not (cargo ?INST ?INST))))))))
*/
fof(a7993,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Shipping) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_cargo_m, CLASS) & s_instance(s_cargo_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_cargo(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn equal ?CLASS) (instance equal Predicate))
     (=> (instance ?INST ?CLASS) (not (equal ?INST ?INST))))))))
*/
fof(a7994,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_equal_m, CLASS) & s_instance(s_equal_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ (INST = INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST RealNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn approximateValue ?CLASS)
          (instance approximateValue Predicate))
     (=> (instance ?INST ?CLASS)
      (not (approximateValue ?INST ?INST))))))))
*/
fof(a7995,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_RealNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_approximateValue_m, CLASS) & s_instance(s_approximateValue_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_approximateValue(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn overlapsPartially ?CLASS)
          (instance overlapsPartially Predicate))
     (=> (instance ?INST ?CLASS)
      (not (overlapsPartially ?INST ?INST))))))))
*/
fof(a7996,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_overlapsPartially_m, CLASS) & s_instance(s_overlapsPartially_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_overlapsPartially(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Transportation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn transported ?CLASS)
          (instance transported Predicate))
     (=> (instance ?INST ?CLASS) (not (transported ?INST ?INST))))))))
*/
fof(a7997,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Transportation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_transported_m, CLASS) & s_instance(s_transported_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_transported(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ChemicalProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn reagent ?CLASS) (instance reagent Predicate))
     (=> (instance ?INST ?CLASS) (not (reagent ?INST ?INST))))))))
*/
fof(a7998,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ChemicalProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_reagent_m, CLASS) & s_instance(s_reagent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_reagent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Contest)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn contestParticipant ?CLASS)
          (instance contestParticipant Predicate))
     (=> (instance ?INST ?CLASS)
      (not (contestParticipant ?INST ?INST))))))))
*/
fof(a7999,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Contest) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_contestParticipant_m, CLASS) & s_instance(s_contestParticipant_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_contestParticipant(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn reflexiveOn ?CLASS)
          (instance reflexiveOn Predicate))
     (=> (instance ?INST ?CLASS) (not (reflexiveOn ?INST ?INST))))))))
*/
fof(a8000,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_reflexiveOn_m, CLASS) & s_instance(s_reflexiveOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_reflexiveOn(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Confining)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn detainee ?CLASS)
          (instance detainee Predicate))
     (=> (instance ?INST ?CLASS) (not (detainee ?INST ?INST))))))))
*/
fof(a8001,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Confining) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_detainee_m, CLASS) & s_instance(s_detainee_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_detainee(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimePosition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn temporalPart ?CLASS)
          (instance temporalPart Predicate))
     (=> (instance ?INST ?CLASS) (not (temporalPart ?INST ?INST))))))))
*/
fof(a8002,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimePosition) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_temporalPart_m, CLASS) & s_instance(s_temporalPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_temporalPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn larger ?CLASS) (instance larger Predicate))
     (=> (instance ?INST ?CLASS) (not (larger ?INST ?INST))))))))
*/
fof(a8003,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_larger_m, CLASS) & s_instance(s_larger_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_larger(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Abstract)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn abstractCounterpart ?CLASS)
          (instance abstractCounterpart Predicate))
     (=> (instance ?INST ?CLASS)
      (not (abstractCounterpart ?INST ?INST))))))))
*/
fof(a8004,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Abstract) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_abstractCounterpart_m, CLASS) & s_instance(s_abstractCounterpart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_abstractCounterpart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postCountry ?CLASS)
          (instance postCountry Predicate))
     (=> (instance ?INST ?CLASS) (not (postCountry ?INST ?INST))))))))
*/
fof(a8005,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postCountry_m, CLASS) & s_instance(s_postCountry_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postCountry(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn holdsObligation ?CLASS)
          (instance holdsObligation Predicate))
     (=> (instance ?INST ?CLASS)
      (not (holdsObligation ?INST ?INST))))))))
*/
fof(a8006,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_holdsObligation_m, CLASS) & s_instance(s_holdsObligation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_holdsObligation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn neighbor ?CLASS)
          (instance neighbor Predicate))
     (=> (instance ?INST ?CLASS) (not (neighbor ?INST ?INST))))))))
*/
fof(a8007,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_neighbor_m, CLASS) & s_instance(s_neighbor_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_neighbor(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=>
   (and (instance ?INST Entity)
        (subclass ?INST ContentBearingPhysical))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subsumesContentClass ?CLASS)
          (instance subsumesContentClass Predicate))
     (=> (instance ?INST ?CLASS)
      (not (subsumesContentClass ?INST ?INST))))))))
*/
fof(a8008,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_ContentBearingPhysical)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subsumesContentClass_m, CLASS) & s_instance(s_subsumesContentClass_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subsumesContentClass(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn carries ?CLASS) (instance carries Predicate))
     (=> (instance ?INST ?CLASS) (not (carries ?INST ?INST))))))))
*/
fof(a8009,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_carries_m, CLASS) & s_instance(s_carries_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_carries(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST LegalAction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn plaintiff ?CLASS)
          (instance plaintiff Predicate))
     (=> (instance ?INST ?CLASS) (not (plaintiff ?INST ?INST))))))))
*/
fof(a8010,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_LegalAction) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_plaintiff_m, CLASS) & s_instance(s_plaintiff_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_plaintiff(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GraphPath)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn pathLength ?CLASS)
          (instance pathLength Predicate))
     (=> (instance ?INST ?CLASS) (not (pathLength ?INST ?INST))))))))
*/
fof(a8011,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GraphPath) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_pathLength_m, CLASS) & s_instance(s_pathLength_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_pathLength(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn copy ?CLASS) (instance copy Predicate))
     (=> (instance ?INST ?CLASS) (not (copy ?INST ?INST))))))))
*/
fof(a8012,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_copy_m, CLASS) & s_instance(s_copy_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_copy(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PhysicalSystem)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subSystem ?CLASS)
          (instance subSystem Predicate))
     (=> (instance ?INST ?CLASS) (not (subSystem ?INST ?INST))))))))
*/
fof(a8013,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PhysicalSystem) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subSystem_m, CLASS) & s_instance(s_subSystem_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subSystem(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subProcess ?CLASS)
          (instance subProcess Predicate))
     (=> (instance ?INST ?CLASS) (not (subProcess ?INST ?INST))))))))
*/
fof(a8014,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subProcess_m, CLASS) & s_instance(s_subProcess_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subProcess(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn anniversary ?CLASS)
          (instance anniversary Predicate))
     (=> (instance ?INST ?CLASS) (not (anniversary ?INST ?INST))))))))
*/
fof(a8015,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_anniversary_m, CLASS) & s_instance(s_anniversary_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_anniversary(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn localShortName ?CLASS)
          (instance localShortName Predicate))
     (=> (instance ?INST ?CLASS)
      (not (localShortName ?INST ?INST))))))))
*/
fof(a8016,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_localShortName_m, CLASS) & s_instance(s_localShortName_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_localShortName(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn parent ?CLASS) (instance parent Predicate))
     (=> (instance ?INST ?CLASS) (not (parent ?INST ?INST))))))))
*/
fof(a8017,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_parent_m, CLASS) & s_instance(s_parent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_parent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST LinguisticExpression)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn expressedInLanguage ?CLASS)
          (instance expressedInLanguage Predicate))
     (=> (instance ?INST ?CLASS)
      (not (expressedInLanguage ?INST ?INST))))))))
*/
fof(a8018,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_LinguisticExpression) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_expressedInLanguage_m, CLASS) & s_instance(s_expressedInLanguage_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_expressedInLanguage(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn directed ?CLASS)
          (instance directed Predicate))
     (=> (instance ?INST ?CLASS) (not (directed ?INST ?INST))))))))
*/
fof(a8019,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_directed_m, CLASS) & s_instance(s_directed_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_directed(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Woman)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn aunt ?CLASS) (instance aunt Predicate))
     (=> (instance ?INST ?CLASS) (not (aunt ?INST ?INST))))))))
*/
fof(a8020,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Woman) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_aunt_m, CLASS) & s_instance(s_aunt_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_aunt(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn emailAddress ?CLASS)
          (instance emailAddress Predicate))
     (=> (instance ?INST ?CLASS) (not (emailAddress ?INST ?INST))))))))
*/
fof(a8021,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_emailAddress_m, CLASS) & s_instance(s_emailAddress_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_emailAddress(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn involvedInEvent ?CLASS)
          (instance involvedInEvent Predicate))
     (=> (instance ?INST ?CLASS)
      (not (involvedInEvent ?INST ?INST))))))))
*/
fof(a8022,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_involvedInEvent_m, CLASS) & s_instance(s_involvedInEvent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_involvedInEvent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn unitNumber ?CLASS)
          (instance unitNumber Predicate))
     (=> (instance ?INST ?CLASS) (not (unitNumber ?INST ?INST))))))))
*/
fof(a8023,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_unitNumber_m, CLASS) & s_instance(s_unitNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_unitNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn barometricPressure ?CLASS)
          (instance barometricPressure Predicate))
     (=> (instance ?INST ?CLASS)
      (not (barometricPressure ?INST ?INST))))))))
*/
fof(a8024,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_barometricPressure_m, CLASS) & s_instance(s_barometricPressure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_barometricPressure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn grandparent ?CLASS)
          (instance grandparent Predicate))
     (=> (instance ?INST ?CLASS) (not (grandparent ?INST ?INST))))))))
*/
fof(a8025,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_grandparent_m, CLASS) & s_instance(s_grandparent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_grandparent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Proposition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subProposition ?CLASS)
          (instance subProposition Predicate))
     (=> (instance ?INST ?CLASS)
      (not (subProposition ?INST ?INST))))))))
*/
fof(a8026,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subProposition_m, CLASS) & s_instance(s_subProposition_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subProposition(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ChangeOfControl)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn losesControl ?CLASS)
          (instance losesControl Predicate))
     (=> (instance ?INST ?CLASS) (not (losesControl ?INST ?INST))))))))
*/
fof(a8027,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ChangeOfControl) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_losesControl_m, CLASS) & s_instance(s_losesControl_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_losesControl(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn uses ?CLASS) (instance uses Predicate))
     (=> (instance ?INST ?CLASS) (not (uses ?INST ?INST))))))))
*/
fof(a8028,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_uses_m, CLASS) & s_instance(s_uses_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_uses(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postPostOfficeBox ?CLASS)
          (instance postPostOfficeBox Predicate))
     (=> (instance ?INST ?CLASS)
      (not (postPostOfficeBox ?INST ?INST))))))))
*/
fof(a8029,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postPostOfficeBox_m, CLASS) & s_instance(s_postPostOfficeBox_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postPostOfficeBox(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Translocation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn changesLocation ?CLASS)
          (instance changesLocation Predicate))
     (=> (instance ?INST ?CLASS)
      (not (changesLocation ?INST ?INST))))))))
*/
fof(a8030,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Translocation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_changesLocation_m, CLASS) & s_instance(s_changesLocation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_changesLocation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn rangeSubclass ?CLASS)
          (instance rangeSubclass Predicate))
     (=> (instance ?INST ?CLASS) (not (rangeSubclass ?INST ?INST))))))))
*/
fof(a8031,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_rangeSubclass_m, CLASS) & s_instance(s_rangeSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_rangeSubclass(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn refers ?CLASS) (instance refers Predicate))
     (=> (instance ?INST ?CLASS) (not (refers ?INST ?INST))))))))
*/
fof(a8032,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_refers_m, CLASS) & s_instance(s_refers_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_refers(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn parasite ?CLASS)
          (instance parasite Predicate))
     (=> (instance ?INST ?CLASS) (not (parasite ?INST ?INST))))))))
*/
fof(a8033,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_parasite_m, CLASS) & s_instance(s_parasite_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_parasite(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GraphArc)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn arcWeight ?CLASS)
          (instance arcWeight Predicate))
     (=> (instance ?INST ?CLASS) (not (arcWeight ?INST ?INST))))))))
*/
fof(a8034,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GraphArc) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_arcWeight_m, CLASS) & s_instance(s_arcWeight_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_arcWeight(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Demonstrating)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn attends ?CLASS) (instance attends Predicate))
     (=> (instance ?INST ?CLASS) (not (attends ?INST ?INST))))))))
*/
fof(a8035,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Demonstrating) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_attends_m, CLASS) & s_instance(s_attends_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_attends(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn side ?CLASS) (instance side Predicate))
     (=> (instance ?INST ?CLASS) (not (side ?INST ?INST))))))))
*/
fof(a8036,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_side_m, CLASS) & s_instance(s_side_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_side(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST FinancialTransaction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn transactionAmount ?CLASS)
          (instance transactionAmount Predicate))
     (=> (instance ?INST ?CLASS)
      (not (transactionAmount ?INST ?INST))))))))
*/
fof(a8037,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_FinancialTransaction) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_transactionAmount_m, CLASS) & s_instance(s_transactionAmount_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_transactionAmount(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn frequency ?CLASS)
          (instance frequency Predicate))
     (=> (instance ?INST ?CLASS) (not (frequency ?INST ?INST))))))))
*/
fof(a8038,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_frequency_m, CLASS) & s_instance(s_frequency_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_frequency(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn medicalPatient ?CLASS)
          (instance medicalPatient Predicate))
     (=> (instance ?INST ?CLASS)
      (not (medicalPatient ?INST ?INST))))))))
*/
fof(a8039,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_medicalPatient_m, CLASS) & s_instance(s_medicalPatient_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_medicalPatient(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn average ?CLASS) (instance average Predicate))
     (=> (instance ?INST ?CLASS) (not (average ?INST ?INST))))))))
*/
fof(a8040,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_average_m, CLASS) & s_instance(s_average_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_average(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn closedOn ?CLASS)
          (instance closedOn Predicate))
     (=> (instance ?INST ?CLASS) (not (closedOn ?INST ?INST))))))))
*/
fof(a8041,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_closedOn_m, CLASS) & s_instance(s_closedOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_closedOn(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PermanentResidence)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn homeAddress ?CLASS)
          (instance homeAddress Predicate))
     (=> (instance ?INST ?CLASS) (not (homeAddress ?INST ?INST))))))))
*/
fof(a8042,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PermanentResidence) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_homeAddress_m, CLASS) & s_instance(s_homeAddress_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_homeAddress(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Solution)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn potentialOfHydrogen ?CLASS)
          (instance potentialOfHydrogen Predicate))
     (=> (instance ?INST ?CLASS)
      (not (potentialOfHydrogen ?INST ?INST))))))))
*/
fof(a8043,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Solution) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_potentialOfHydrogen_m, CLASS) & s_instance(s_potentialOfHydrogen_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_potentialOfHydrogen(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn grandfather ?CLASS)
          (instance grandfather Predicate))
     (=> (instance ?INST ?CLASS) (not (grandfather ?INST ?INST))))))))
*/
fof(a8044,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_grandfather_m, CLASS) & s_instance(s_grandfather_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_grandfather(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn stepfather ?CLASS)
          (instance stepfather Predicate))
     (=> (instance ?INST ?CLASS) (not (stepfather ?INST ?INST))))))))
*/
fof(a8045,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_stepfather_m, CLASS) & s_instance(s_stepfather_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_stepfather(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn yearOfFounding ?CLASS)
          (instance yearOfFounding Predicate))
     (=> (instance ?INST ?CLASS)
      (not (yearOfFounding ?INST ?INST))))))))
*/
fof(a8046,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_yearOfFounding_m, CLASS) & s_instance(s_yearOfFounding_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_yearOfFounding(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Attribute)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn successorAttributeClosure ?CLASS)
          (instance successorAttributeClosure Predicate))
     (=> (instance ?INST ?CLASS)
      (not (successorAttributeClosure ?INST ?INST))))))))
*/
fof(a8047,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Attribute) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_successorAttributeClosure_m, CLASS) & s_instance(s_successorAttributeClosure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_successorAttributeClosure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn direction ?CLASS)
          (instance direction Predicate))
     (=> (instance ?INST ?CLASS) (not (direction ?INST ?INST))))))))
*/
fof(a8048,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_direction_m, CLASS) & s_instance(s_direction_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_direction(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn monetaryValue ?CLASS)
          (instance monetaryValue Predicate))
     (=> (instance ?INST ?CLASS) (not (monetaryValue ?INST ?INST))))))))
*/
fof(a8049,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_monetaryValue_m, CLASS) & s_instance(s_monetaryValue_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_monetaryValue(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn sibling ?CLASS) (instance sibling Predicate))
     (=> (instance ?INST ?CLASS) (not (sibling ?INST ?INST))))))))
*/
fof(a8050,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_sibling_m, CLASS) & s_instance(s_sibling_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_sibling(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalAddressText)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postAddressText ?CLASS)
          (instance postAddressText Predicate))
     (=> (instance ?INST ?CLASS)
      (not (postAddressText ?INST ?INST))))))))
*/
fof(a8051,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalAddressText) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postAddressText_m, CLASS) & s_instance(s_postAddressText_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postAddressText(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn wants ?CLASS) (instance wants Predicate))
     (=> (instance ?INST ?CLASS) (not (wants ?INST ?INST))))))))
*/
fof(a8052,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_wants_m, CLASS) & s_instance(s_wants_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_wants(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn externalImage ?CLASS)
          (instance externalImage Predicate))
     (=> (instance ?INST ?CLASS) (not (externalImage ?INST ?INST))))))))
*/
fof(a8053,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_externalImage_m, CLASS) & s_instance(s_externalImage_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_externalImage(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Circle)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn radius ?CLASS) (instance radius Predicate))
     (=> (instance ?INST ?CLASS) (not (radius ?INST ?INST))))))))
*/
fof(a8054,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Circle) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_radius_m, CLASS) & s_instance(s_radius_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_radius(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SetOrClass)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn disjoint ?CLASS)
          (instance disjoint Predicate))
     (=> (instance ?INST ?CLASS) (not (disjoint ?INST ?INST))))))))
*/
fof(a8055,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SetOrClass) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_disjoint_m, CLASS) & s_instance(s_disjoint_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_disjoint(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST ElementalSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn atomicNumber ?CLASS)
          (instance atomicNumber Predicate))
     (=> (instance ?INST ?CLASS) (not (atomicNumber ?INST ?INST))))))))
*/
fof(a8056,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_ElementalSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_atomicNumber_m, CLASS) & s_instance(s_atomicNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_atomicNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn independentProbability ?CLASS)
          (instance independentProbability Predicate))
     (=> (instance ?INST ?CLASS)
      (not (independentProbability ?INST ?INST))))))))
*/
fof(a8057,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_independentProbability_m, CLASS) & s_instance(s_independentProbability_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_independentProbability(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn decreasesLikelihood ?CLASS)
          (instance decreasesLikelihood Predicate))
     (=> (instance ?INST ?CLASS)
      (not (decreasesLikelihood ?INST ?INST))))))))
*/
fof(a8058,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_decreasesLikelihood_m, CLASS) & s_instance(s_decreasesLikelihood_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_decreasesLikelihood(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subString ?CLASS)
          (instance subString Predicate))
     (=> (instance ?INST ?CLASS) (not (subString ?INST ?INST))))))))
*/
fof(a8059,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subString_m, CLASS) & s_instance(s_subString_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subString(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn covers ?CLASS) (instance covers Predicate))
     (=> (instance ?INST ?CLASS) (not (covers ?INST ?INST))))))))
*/
fof(a8060,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_covers_m, CLASS) & s_instance(s_covers_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_covers(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn stranger ?CLASS)
          (instance stranger Predicate))
     (=> (instance ?INST ?CLASS) (not (stranger ?INST ?INST))))))))
*/
fof(a8061,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_stranger_m, CLASS) & s_instance(s_stranger_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_stranger(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn patientMedical ?CLASS)
          (instance patientMedical Predicate))
     (=> (instance ?INST ?CLASS)
      (not (patientMedical ?INST ?INST))))))))
*/
fof(a8062,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_patientMedical_m, CLASS) & s_instance(s_patientMedical_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_patientMedical(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST LegalAction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn defendant ?CLASS)
          (instance defendant Predicate))
     (=> (instance ?INST ?CLASS) (not (defendant ?INST ?INST))))))))
*/
fof(a8063,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_LegalAction) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_defendant_m, CLASS) & s_instance(s_defendant_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_defendant(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn instance ?CLASS)
          (instance instance Predicate))
     (=> (instance ?INST ?CLASS) (not (instance ?INST ?INST))))))))
*/
fof(a8064,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_instance_m, CLASS) & s_instance(s_instance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_instance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Proposition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn consistent ?CLASS)
          (instance consistent Predicate))
     (=> (instance ?INST ?CLASS) (not (consistent ?INST ?INST))))))))
*/
fof(a8065,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_consistent_m, CLASS) & s_instance(s_consistent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_consistent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Certificate)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn issuedBy ?CLASS)
          (instance issuedBy Predicate))
     (=> (instance ?INST ?CLASS) (not (issuedBy ?INST ?INST))))))))
*/
fof(a8066,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Certificate) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_issuedBy_m, CLASS) & s_instance(s_issuedBy_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_issuedBy(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn religiousAffiliationOfOrganization ?CLASS)
          (instance religiousAffiliationOfOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (not (religiousAffiliationOfOrganization ?INST ?INST))))))))
*/
fof(a8067,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_religiousAffiliationOfOrganization_m, CLASS) & s_instance(s_religiousAffiliationOfOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_religiousAffiliationOfOrganization(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn familyName ?CLASS)
          (instance familyName Predicate))
     (=> (instance ?INST ?CLASS) (not (familyName ?INST ?INST))))))))
*/
fof(a8068,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_familyName_m, CLASS) & s_instance(s_familyName_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_familyName(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ConstantQuantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn distanceOnPath ?CLASS)
          (instance distanceOnPath Predicate))
     (=> (instance ?INST ?CLASS)
      (not (distanceOnPath ?INST ?INST))))))))
*/
fof(a8069,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ConstantQuantity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_distanceOnPath_m, CLASS) & s_instance(s_distanceOnPath_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_distanceOnPath(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn legalGuardian ?CLASS)
          (instance legalGuardian Predicate))
     (=> (instance ?INST ?CLASS) (not (legalGuardian ?INST ?INST))))))))
*/
fof(a8070,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_legalGuardian_m, CLASS) & s_instance(s_legalGuardian_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_legalGuardian(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Integer)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn multiplicativeFactor ?CLASS)
          (instance multiplicativeFactor Predicate))
     (=> (instance ?INST ?CLASS)
      (not (multiplicativeFactor ?INST ?INST))))))))
*/
fof(a8071,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Integer) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_multiplicativeFactor_m, CLASS) & s_instance(s_multiplicativeFactor_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_multiplicativeFactor(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST StationaryArtifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn humanCapacity ?CLASS)
          (instance humanCapacity Predicate))
     (=> (instance ?INST ?CLASS) (not (humanCapacity ?INST ?INST))))))))
*/
fof(a8072,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_StationaryArtifact) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_humanCapacity_m, CLASS) & s_instance(s_humanCapacity_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_humanCapacity(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GeometricPoint)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn pointOfFigure ?CLASS)
          (instance pointOfFigure Predicate))
     (=> (instance ?INST ?CLASS) (not (pointOfFigure ?INST ?INST))))))))
*/
fof(a8073,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GeometricPoint) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_pointOfFigure_m, CLASS) & s_instance(s_pointOfFigure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_pointOfFigure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn workPhoneNumber ?CLASS)
          (instance workPhoneNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (workPhoneNumber ?INST ?INST))))))))
*/
fof(a8074,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_workPhoneNumber_m, CLASS) & s_instance(s_workPhoneNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_workPhoneNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn inScopeOfInterest ?CLASS)
          (instance inScopeOfInterest Predicate))
     (=> (instance ?INST ?CLASS)
      (not (inScopeOfInterest ?INST ?INST))))))))
*/
fof(a8075,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_inScopeOfInterest_m, CLASS) & s_instance(s_inScopeOfInterest_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_inScopeOfInterest(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agreement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn agreementEffectiveDate ?CLASS)
          (instance agreementEffectiveDate Predicate))
     (=> (instance ?INST ?CLASS)
      (not (agreementEffectiveDate ?INST ?INST))))))))
*/
fof(a8076,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agreement) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_agreementEffectiveDate_m, CLASS) & s_instance(s_agreementEffectiveDate_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_agreementEffectiveDate(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Graph)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subGraph ?CLASS)
          (instance subGraph Predicate))
     (=> (instance ?INST ?CLASS) (not (subGraph ?INST ?INST))))))))
*/
fof(a8077,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Graph) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subGraph_m, CLASS) & s_instance(s_subGraph_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subGraph(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TwoDimensionalAngle)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn angleOfFigure ?CLASS)
          (instance angleOfFigure Predicate))
     (=> (instance ?INST ?CLASS) (not (angleOfFigure ?INST ?INST))))))))
*/
fof(a8078,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TwoDimensionalAngle) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_angleOfFigure_m, CLASS) & s_instance(s_angleOfFigure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_angleOfFigure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn older ?CLASS) (instance older Predicate))
     (=> (instance ?INST ?CLASS) (not (older ?INST ?INST))))))))
*/
fof(a8079,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_older_m, CLASS) & s_instance(s_older_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_older(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn greaterThan ?CLASS)
          (instance greaterThan Predicate))
     (=> (instance ?INST ?CLASS) (not (greaterThan ?INST ?INST))))))))
*/
fof(a8080,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_greaterThan_m, CLASS) & s_instance(s_greaterThan_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ greater(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn inhabits ?CLASS)
          (instance inhabits Predicate))
     (=> (instance ?INST ?CLASS) (not (inhabits ?INST ?INST))))))))
*/
fof(a8081,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_inhabits_m, CLASS) & s_instance(s_inhabits_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_inhabits(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn airTemperature ?CLASS)
          (instance airTemperature Predicate))
     (=> (instance ?INST ?CLASS)
      (not (airTemperature ?INST ?INST))))))))
*/
fof(a8082,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_airTemperature_m, CLASS) & s_instance(s_airTemperature_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_airTemperature(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn possesses ?CLASS)
          (instance possesses Predicate))
     (=> (instance ?INST ?CLASS) (not (possesses ?INST ?INST))))))))
*/
fof(a8083,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_possesses_m, CLASS) & s_instance(s_possesses_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_possesses(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn greaterThanOrEqualTo ?CLASS)
          (instance greaterThanOrEqualTo Predicate))
     (=> (instance ?INST ?CLASS)
      (not (greaterThanOrEqualTo ?INST ?INST))))))))
*/
fof(a8084,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_greaterThanOrEqualTo_m, CLASS) & s_instance(s_greaterThanOrEqualTo_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_greaterThanOrEqualTo(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn employs ?CLASS) (instance employs Predicate))
     (=> (instance ?INST ?CLASS) (not (employs ?INST ?INST))))))))
*/
fof(a8085,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_employs_m, CLASS) & s_instance(s_employs_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_employs(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingPhysical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subsumesContentInstance ?CLASS)
          (instance subsumesContentInstance Predicate))
     (=> (instance ?INST ?CLASS)
      (not (subsumesContentInstance ?INST ?INST))))))))
*/
fof(a8086,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingPhysical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subsumesContentInstance_m, CLASS) & s_instance(s_subsumesContentInstance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subsumesContentInstance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SentientAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn speaksLanguage ?CLASS)
          (instance speaksLanguage Predicate))
     (=> (instance ?INST ?CLASS)
      (not (speaksLanguage ?INST ?INST))))))))
*/
fof(a8087,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SentientAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_speaksLanguage_m, CLASS) & s_instance(s_speaksLanguage_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_speaksLanguage(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SelfConnectedObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn bottom ?CLASS) (instance bottom Predicate))
     (=> (instance ?INST ?CLASS) (not (bottom ?INST ?INST))))))))
*/
fof(a8088,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SelfConnectedObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_bottom_m, CLASS) & s_instance(s_bottom_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_bottom(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postPostcodeArea ?CLASS)
          (instance postPostcodeArea Predicate))
     (=> (instance ?INST ?CLASS)
      (not (postPostcodeArea ?INST ?INST))))))))
*/
fof(a8089,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postPostcodeArea_m, CLASS) & s_instance(s_postPostcodeArea_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postPostcodeArea(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST MilitaryUnit)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hostileForces ?CLASS)
          (instance hostileForces Predicate))
     (=> (instance ?INST ?CLASS) (not (hostileForces ?INST ?INST))))))))
*/
fof(a8090,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_MilitaryUnit) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hostileForces_m, CLASS) & s_instance(s_hostileForces_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hostileForces(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Radiating)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn wavelength ?CLASS)
          (instance wavelength Predicate))
     (=> (instance ?INST ?CLASS) (not (wavelength ?INST ?INST))))))))
*/
fof(a8091,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Radiating) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_wavelength_m, CLASS) & s_instance(s_wavelength_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_wavelength(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn partlyLocated ?CLASS)
          (instance partlyLocated Predicate))
     (=> (instance ?INST ?CLASS) (not (partlyLocated ?INST ?INST))))))))
*/
fof(a8092,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_partlyLocated_m, CLASS) & s_instance(s_partlyLocated_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_partlyLocated(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingObject)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn stored ?CLASS) (instance stored Predicate))
     (=> (instance ?INST ?CLASS) (not (stored ?INST ?INST))))))))
*/
fof(a8093,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_stored_m, CLASS) & s_instance(s_stored_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_stored(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn measure ?CLASS) (instance measure Predicate))
     (=> (instance ?INST ?CLASS) (not (measure ?INST ?INST))))))))
*/
fof(a8094,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_measure_m, CLASS) & s_instance(s_measure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_measure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Circle)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn diameter ?CLASS)
          (instance diameter Predicate))
     (=> (instance ?INST ?CLASS) (not (diameter ?INST ?INST))))))))
*/
fof(a8095,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Circle) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_diameter_m, CLASS) & s_instance(s_diameter_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_diameter(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn holdsRight ?CLASS)
          (instance holdsRight Predicate))
     (=> (instance ?INST ?CLASS) (not (holdsRight ?INST ?INST))))))))
*/
fof(a8096,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_holdsRight_m, CLASS) & s_instance(s_holdsRight_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_holdsRight(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telecomCode2 ?CLASS)
          (instance telecomCode2 Predicate))
     (=> (instance ?INST ?CLASS) (not (telecomCode2 ?INST ?INST))))))))
*/
fof(a8097,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telecomCode2_m, CLASS) & s_instance(s_telecomCode2_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telecomCode2(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimePosition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn holdsDuring ?CLASS)
          (instance holdsDuring Predicate))
     (=> (instance ?INST ?CLASS) (not (holdsDuring ?INST ?INST))))))))
*/
fof(a8098,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimePosition) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_holdsDuring_m, CLASS) & s_instance(s_holdsDuring_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_holdsDuring(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn causesProposition ?CLASS)
          (instance causesProposition Predicate))
     (=> (instance ?INST ?CLASS)
      (not (causesProposition ?INST ?INST))))))))
*/
fof(a8099,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_causesProposition_m, CLASS) & s_instance(s_causesProposition_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_causesProposition(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telecomCountryCode ?CLASS)
          (instance telecomCountryCode Predicate))
     (=> (instance ?INST ?CLASS)
      (not (telecomCountryCode ?INST ?INST))))))))
*/
fof(a8100,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telecomCountryCode_m, CLASS) & s_instance(s_telecomCountryCode_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telecomCountryCode(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TelecomNumber)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn deviceTelecomNumber ?CLASS)
          (instance deviceTelecomNumber Predicate))
     (=> (instance ?INST ?CLASS)
      (not (deviceTelecomNumber ?INST ?INST))))))))
*/
fof(a8101,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TelecomNumber) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_deviceTelecomNumber_m, CLASS) & s_instance(s_deviceTelecomNumber_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_deviceTelecomNumber(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn grandmother ?CLASS)
          (instance grandmother Predicate))
     (=> (instance ?INST ?CLASS) (not (grandmother ?INST ?INST))))))))
*/
fof(a8102,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_grandmother_m, CLASS) & s_instance(s_grandmother_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_grandmother(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CompoundSubstance)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn conjugate ?CLASS)
          (instance conjugate Predicate))
     (=> (instance ?INST ?CLASS) (not (conjugate ?INST ?INST))))))))
*/
fof(a8103,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CompoundSubstance) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_conjugate_m, CLASS) & s_instance(s_conjugate_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_conjugate(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn modalAttribute ?CLASS)
          (instance modalAttribute Predicate))
     (=> (instance ?INST ?CLASS)
      (not (modalAttribute ?INST ?INST))))))))
*/
fof(a8104,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_modalAttribute_m, CLASS) & s_instance(s_modalAttribute_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_modalAttribute(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryFunction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn identityElement ?CLASS)
          (instance identityElement Predicate))
     (=> (instance ?INST ?CLASS)
      (not (identityElement ?INST ?INST))))))))
*/
fof(a8105,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryFunction) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_identityElement_m, CLASS) & s_instance(s_identityElement_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_identityElement(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn ideologicalAffiliationOfOrganization ?CLASS)
          (instance ideologicalAffiliationOfOrganization Predicate))
     (=> (instance ?INST ?CLASS)
      (not (ideologicalAffiliationOfOrganization ?INST ?INST))))))))
*/
fof(a8106,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_ideologicalAffiliationOfOrganization_m, CLASS) & s_instance(s_ideologicalAffiliationOfOrganization_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_ideologicalAffiliationOfOrganization(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingPhysical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn containsInformation ?CLASS)
          (instance containsInformation Predicate))
     (=> (instance ?INST ?CLASS)
      (not (containsInformation ?INST ?INST))))))))
*/
fof(a8107,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingPhysical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_containsInformation_m, CLASS) & s_instance(s_containsInformation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_containsInformation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Transportation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn conveyance ?CLASS)
          (instance conveyance Predicate))
     (=> (instance ?INST ?CLASS) (not (conveyance ?INST ?INST))))))))
*/
fof(a8108,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Transportation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_conveyance_m, CLASS) & s_instance(s_conveyance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_conveyance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn landlord ?CLASS)
          (instance landlord Predicate))
     (=> (instance ?INST ?CLASS) (not (landlord ?INST ?INST))))))))
*/
fof(a8109,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_landlord_m, CLASS) & s_instance(s_landlord_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_landlord(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Function)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn range ?CLASS) (instance range Predicate))
     (=> (instance ?INST ?CLASS) (not (range ?INST ?INST))))))))
*/
fof(a8110,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Function) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_range_m, CLASS) & s_instance(s_range_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_range(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organization)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn publishes ?CLASS)
          (instance publishes Predicate))
     (=> (instance ?INST ?CLASS) (not (publishes ?INST ?INST))))))))
*/
fof(a8111,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organization) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_publishes_m, CLASS) & s_instance(s_publishes_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_publishes(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Device)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn effectiveRange ?CLASS)
          (instance effectiveRange Predicate))
     (=> (instance ?INST ?CLASS)
      (not (effectiveRange ?INST ?INST))))))))
*/
fof(a8112,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Device) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_effectiveRange_m, CLASS) & s_instance(s_effectiveRange_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_effectiveRange(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn considers ?CLASS)
          (instance considers Predicate))
     (=> (instance ?INST ?CLASS) (not (considers ?INST ?INST))))))))
*/
fof(a8113,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_considers_m, CLASS) & s_instance(s_considers_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_considers(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn lessThan ?CLASS)
          (instance lessThan Predicate))
     (=> (instance ?INST ?CLASS) (not (lessThan ?INST ?INST))))))))
*/
fof(a8114,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_lessThan_m, CLASS) & s_instance(s_lessThan_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ less(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Animal)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn deathplace ?CLASS)
          (instance deathplace Predicate))
     (=> (instance ?INST ?CLASS) (not (deathplace ?INST ?INST))))))))
*/
fof(a8115,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Animal) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_deathplace_m, CLASS) & s_instance(s_deathplace_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_deathplace(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST PureSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn boilingPoint ?CLASS)
          (instance boilingPoint Predicate))
     (=> (instance ?INST ?CLASS) (not (boilingPoint ?INST ?INST))))))))
*/
fof(a8116,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_PureSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_boilingPoint_m, CLASS) & s_instance(s_boilingPoint_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_boilingPoint(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Relation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subrelation ?CLASS)
          (instance subrelation Predicate))
     (=> (instance ?INST ?CLASS) (not (subrelation ?INST ?INST))))))))
*/
fof(a8117,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Relation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subrelation_m, CLASS) & s_instance(s_subrelation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subrelation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn discovers ?CLASS)
          (instance discovers Predicate))
     (=> (instance ?INST ?CLASS) (not (discovers ?INST ?INST))))))))
*/
fof(a8118,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_discovers_m, CLASS) & s_instance(s_discovers_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_discovers(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn citizen ?CLASS) (instance citizen Predicate))
     (=> (instance ?INST ?CLASS) (not (citizen ?INST ?INST))))))))
*/
fof(a8119,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_citizen_m, CLASS) & s_instance(s_citizen_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_citizen(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn needs ?CLASS) (instance needs Predicate))
     (=> (instance ?INST ?CLASS) (not (needs ?INST ?INST))))))))
*/
fof(a8120,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_needs_m, CLASS) & s_instance(s_needs_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_needs(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn initiallyContainsPart ?CLASS)
          (instance initiallyContainsPart Predicate))
     (=> (instance ?INST ?CLASS)
      (not (initiallyContainsPart ?INST ?INST))))))))
*/
fof(a8121,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_initiallyContainsPart_m, CLASS) & s_instance(s_initiallyContainsPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_initiallyContainsPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn mutualAcquaintance ?CLASS)
          (instance mutualAcquaintance Predicate))
     (=> (instance ?INST ?CLASS)
      (not (mutualAcquaintance ?INST ?INST))))))))
*/
fof(a8122,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_mutualAcquaintance_m, CLASS) & s_instance(s_mutualAcquaintance_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_mutualAcquaintance(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn birthday ?CLASS)
          (instance birthday Predicate))
     (=> (instance ?INST ?CLASS) (not (birthday ?INST ?INST))))))))
*/
fof(a8123,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_birthday_m, CLASS) & s_instance(s_birthday_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_birthday(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn editor ?CLASS) (instance editor Predicate))
     (=> (instance ?INST ?CLASS) (not (editor ?INST ?INST))))))))
*/
fof(a8124,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_editor_m, CLASS) & s_instance(s_editor_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_editor(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hindersSubclass ?CLASS)
          (instance hindersSubclass Predicate))
     (=> (instance ?INST ?CLASS)
      (not (hindersSubclass ?INST ?INST))))))))
*/
fof(a8125,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hindersSubclass_m, CLASS) & s_instance(s_hindersSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hindersSubclass(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn benefits ?CLASS)
          (instance benefits Predicate))
     (=> (instance ?INST ?CLASS) (not (benefits ?INST ?INST))))))))
*/
fof(a8126,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_benefits_m, CLASS) & s_instance(s_benefits_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_benefits(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn exploits ?CLASS)
          (instance exploits Predicate))
     (=> (instance ?INST ?CLASS) (not (exploits ?INST ?INST))))))))
*/
fof(a8127,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_exploits_m, CLASS) & s_instance(s_exploits_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_exploits(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST StationaryArtifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn contractor ?CLASS)
          (instance contractor Predicate))
     (=> (instance ?INST ?CLASS) (not (contractor ?INST ?INST))))))))
*/
fof(a8128,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_StationaryArtifact) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_contractor_m, CLASS) & s_instance(s_contractor_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_contractor(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agreement)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn agreementPeriod ?CLASS)
          (instance agreementPeriod Predicate))
     (=> (instance ?INST ?CLASS)
      (not (agreementPeriod ?INST ?INST))))))))
*/
fof(a8129,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agreement) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_agreementPeriod_m, CLASS) & s_instance(s_agreementPeriod_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_agreementPeriod(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hinders ?CLASS) (instance hinders Predicate))
     (=> (instance ?INST ?CLASS) (not (hinders ?INST ?INST))))))))
*/
fof(a8130,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hinders_m, CLASS) & s_instance(s_hinders_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hinders(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn operator ?CLASS)
          (instance operator Predicate))
     (=> (instance ?INST ?CLASS) (not (operator ?INST ?INST))))))))
*/
fof(a8131,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_operator_m, CLASS) & s_instance(s_operator_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_operator(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OrganicObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn developmentalForm ?CLASS)
          (instance developmentalForm Predicate))
     (=> (instance ?INST ?CLASS)
      (not (developmentalForm ?INST ?INST))))))))
*/
fof(a8132,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OrganicObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_developmentalForm_m, CLASS) & s_instance(s_developmentalForm_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_developmentalForm(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn disapproves ?CLASS)
          (instance disapproves Predicate))
     (=> (instance ?INST ?CLASS) (not (disapproves ?INST ?INST))))))))
*/
fof(a8133,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_disapproves_m, CLASS) & s_instance(s_disapproves_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_disapproves(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Relation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn disjointRelation ?CLASS)
          (instance disjointRelation Predicate))
     (=> (instance ?INST ?CLASS)
      (not (disjointRelation ?INST ?INST))))))))
*/
fof(a8134,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Relation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_disjointRelation_m, CLASS) & s_instance(s_disjointRelation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_disjointRelation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn deathdate ?CLASS)
          (instance deathdate Predicate))
     (=> (instance ?INST ?CLASS) (not (deathdate ?INST ?INST))))))))
*/
fof(a8135,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_deathdate_m, CLASS) & s_instance(s_deathdate_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_deathdate(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn causesSubclass ?CLASS)
          (instance causesSubclass Predicate))
     (=> (instance ?INST ?CLASS)
      (not (causesSubclass ?INST ?INST))))))))
*/
fof(a8136,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_causesSubclass_m, CLASS) & s_instance(s_causesSubclass_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_causesSubclass(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Formula)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn entails ?CLASS) (instance entails Predicate))
     (=> (instance ?INST ?CLASS) (not (entails ?INST ?INST))))))))
*/
fof(a8137,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Formula) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_entails_m, CLASS) & s_instance(s_entails_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_entails(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Group)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hasUniform ?CLASS)
          (instance hasUniform Predicate))
     (=> (instance ?INST ?CLASS) (not (hasUniform ?INST ?INST))))))))
*/
fof(a8138,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Group) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hasUniform_m, CLASS) & s_instance(s_hasUniform_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hasUniform(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn trichotomizingOn ?CLASS)
          (instance trichotomizingOn Predicate))
     (=> (instance ?INST ?CLASS)
      (not (trichotomizingOn ?INST ?INST))))))))
*/
fof(a8139,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_trichotomizingOn_m, CLASS) & s_instance(s_trichotomizingOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_trichotomizingOn(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn intelligenceQuotient ?CLASS)
          (instance intelligenceQuotient Predicate))
     (=> (instance ?INST ?CLASS)
      (not (intelligenceQuotient ?INST ?INST))))))))
*/
fof(a8140,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_intelligenceQuotient_m, CLASS) & s_instance(s_intelligenceQuotient_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_intelligenceQuotient(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn color ?CLASS) (instance color Predicate))
     (=> (instance ?INST ?CLASS) (not (color ?INST ?INST))))))))
*/
fof(a8141,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_color_m, CLASS) & s_instance(s_color_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_color(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST NonnegativeInteger)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn stringLength ?CLASS)
          (instance stringLength Predicate))
     (=> (instance ?INST ?CLASS) (not (stringLength ?INST ?INST))))))))
*/
fof(a8142,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_NonnegativeInteger) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_stringLength_m, CLASS) & s_instance(s_stringLength_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_stringLength(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn customer ?CLASS)
          (instance customer Predicate))
     (=> (instance ?INST ?CLASS) (not (customer ?INST ?INST))))))))
*/
fof(a8143,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_customer_m, CLASS) & s_instance(s_customer_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_customer(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Quantity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn lessThanOrEqualTo ?CLASS)
          (instance lessThanOrEqualTo Predicate))
     (=> (instance ?INST ?CLASS)
      (not (lessThanOrEqualTo ?INST ?INST))))))))
*/
fof(a8144,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Quantity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_lessThanOrEqualTo_m, CLASS) & s_instance(s_lessThanOrEqualTo_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ lesseq(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn typicallyContainsPart ?CLASS)
          (instance typicallyContainsPart Predicate))
     (=> (instance ?INST ?CLASS)
      (not (typicallyContainsPart ?INST ?INST))))))))
*/
fof(a8145,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_typicallyContainsPart_m, CLASS) & s_instance(s_typicallyContainsPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_typicallyContainsPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hasPurpose ?CLASS)
          (instance hasPurpose Predicate))
     (=> (instance ?INST ?CLASS) (not (hasPurpose ?INST ?INST))))))))
*/
fof(a8146,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hasPurpose_m, CLASS) & s_instance(s_hasPurpose_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hasPurpose(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn overlapsTemporally ?CLASS)
          (instance overlapsTemporally Predicate))
     (=> (instance ?INST ?CLASS)
      (not (overlapsTemporally ?INST ?INST))))))))
*/
fof(a8147,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_overlapsTemporally_m, CLASS) & s_instance(s_overlapsTemporally_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_overlapsTemporally(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST StationaryArtifact)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn constructionPeriod ?CLASS)
          (instance constructionPeriod Predicate))
     (=> (instance ?INST ?CLASS)
      (not (constructionPeriod ?INST ?INST))))))))
*/
fof(a8148,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_StationaryArtifact) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_constructionPeriod_m, CLASS) & s_instance(s_constructionPeriod_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_constructionPeriod(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn friend ?CLASS) (instance friend Predicate))
     (=> (instance ?INST ?CLASS) (not (friend ?INST ?INST))))))))
*/
fof(a8149,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_friend_m, CLASS) & s_instance(s_friend_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_friend(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST WaterArea)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn waterDepth ?CLASS)
          (instance waterDepth Predicate))
     (=> (instance ?INST ?CLASS) (not (waterDepth ?INST ?INST))))))))
*/
fof(a8150,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_WaterArea) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_waterDepth_m, CLASS) & s_instance(s_waterDepth_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_waterDepth(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TwoDimensionalObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn sliceOfFigure ?CLASS)
          (instance sliceOfFigure Predicate))
     (=> (instance ?INST ?CLASS) (not (sliceOfFigure ?INST ?INST))))))))
*/
fof(a8151,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TwoDimensionalObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_sliceOfFigure_m, CLASS) & s_instance(s_sliceOfFigure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_sliceOfFigure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn resource ?CLASS)
          (instance resource Predicate))
     (=> (instance ?INST ?CLASS) (not (resource ?INST ?INST))))))))
*/
fof(a8152,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_resource_m, CLASS) & s_instance(s_resource_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_resource(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST TimeInterval)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn earlier ?CLASS) (instance earlier Predicate))
     (=> (instance ?INST ?CLASS) (not (earlier ?INST ?INST))))))))
*/
fof(a8153,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_TimeInterval) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_earlier_m, CLASS) & s_instance(s_earlier_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_earlier(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn telecomExtension ?CLASS)
          (instance telecomExtension Predicate))
     (=> (instance ?INST ?CLASS)
      (not (telecomExtension ?INST ?INST))))))))
*/
fof(a8154,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_telecomExtension_m, CLASS) & s_instance(s_telecomExtension_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_telecomExtension(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postContactSite ?CLASS)
          (instance postContactSite Predicate))
     (=> (instance ?INST ?CLASS)
      (not (postContactSite ?INST ?INST))))))))
*/
fof(a8155,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postContactSite_m, CLASS) & s_instance(s_postContactSite_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postContactSite(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn domesticPartner ?CLASS)
          (instance domesticPartner Predicate))
     (=> (instance ?INST ?CLASS)
      (not (domesticPartner ?INST ?INST))))))))
*/
fof(a8156,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_domesticPartner_m, CLASS) & s_instance(s_domesticPartner_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_domesticPartner(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Experimenting)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn experimentalControl ?CLASS)
          (instance experimentalControl Predicate))
     (=> (instance ?INST ?CLASS)
      (not (experimentalControl ?INST ?INST))))))))
*/
fof(a8157,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Experimenting) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_experimentalControl_m, CLASS) & s_instance(s_experimentalControl_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_experimentalControl(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn property ?CLASS)
          (instance property Predicate))
     (=> (instance ?INST ?CLASS) (not (property ?INST ?INST))))))))
*/
fof(a8158,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_property_m, CLASS) & s_instance(s_property_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_property(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hasExpertise ?CLASS)
          (instance hasExpertise Predicate))
     (=> (instance ?INST ?CLASS) (not (hasExpertise ?INST ?INST))))))))
*/
fof(a8159,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hasExpertise_m, CLASS) & s_instance(s_hasExpertise_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hasExpertise(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Object)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn faces ?CLASS) (instance faces Predicate))
     (=> (instance ?INST ?CLASS) (not (faces ?INST ?INST))))))))
*/
fof(a8160,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Object) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_faces_m, CLASS) & s_instance(s_faces_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_faces(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ServiceProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn serviceRecipient ?CLASS)
          (instance serviceRecipient Predicate))
     (=> (instance ?INST ?CLASS)
      (not (serviceRecipient ?INST ?INST))))))))
*/
fof(a8161,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ServiceProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_serviceRecipient_m, CLASS) & s_instance(s_serviceRecipient_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_serviceRecipient(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn leader ?CLASS) (instance leader Predicate))
     (=> (instance ?INST ?CLASS) (not (leader ?INST ?INST))))))))
*/
fof(a8162,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_leader_m, CLASS) & s_instance(s_leader_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_leader(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hasOccupation ?CLASS)
          (instance hasOccupation Predicate))
     (=> (instance ?INST ?CLASS) (not (hasOccupation ?INST ?INST))))))))
*/
fof(a8163,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hasOccupation_m, CLASS) & s_instance(s_hasOccupation_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hasOccupation(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SetOrClass)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subclass ?CLASS)
          (instance subclass Predicate))
     (=> (instance ?INST ?CLASS) (not (subclass ?INST ?INST))))))))
*/
fof(a8164,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SetOrClass) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subclass_m, CLASS) & s_instance(s_subclass_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subclass(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn eventLocated ?CLASS)
          (instance eventLocated Predicate))
     (=> (instance ?INST ?CLASS) (not (eventLocated ?INST ?INST))))))))
*/
fof(a8165,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_eventLocated_m, CLASS) & s_instance(s_eventLocated_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_eventLocated(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn patient ?CLASS) (instance patient Predicate))
     (=> (instance ?INST ?CLASS) (not (patient ?INST ?INST))))))))
*/
fof(a8166,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_patient_m, CLASS) & s_instance(s_patient_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_patient(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn authors ?CLASS) (instance authors Predicate))
     (=> (instance ?INST ?CLASS) (not (authors ?INST ?INST))))))))
*/
fof(a8167,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_authors_m, CLASS) & s_instance(s_authors_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_authors(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ChemicalProcess)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn reactant ?CLASS)
          (instance reactant Predicate))
     (=> (instance ?INST ?CLASS) (not (reactant ?INST ?INST))))))))
*/
fof(a8168,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ChemicalProcess) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_reactant_m, CLASS) & s_instance(s_reactant_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_reactant(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn alias ?CLASS) (instance alias Predicate))
     (=> (instance ?INST ?CLASS) (not (alias ?INST ?INST))))))))
*/
fof(a8169,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_alias_m, CLASS) & s_instance(s_alias_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_alias(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Graph)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn graphMeasure ?CLASS)
          (instance graphMeasure Predicate))
     (=> (instance ?INST ?CLASS) (not (graphMeasure ?INST ?INST))))))))
*/
fof(a8170,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Graph) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_graphMeasure_m, CLASS) & s_instance(s_graphMeasure_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_graphMeasure(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn commentator ?CLASS)
          (instance commentator Predicate))
     (=> (instance ?INST ?CLASS) (not (commentator ?INST ?INST))))))))
*/
fof(a8171,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_commentator_m, CLASS) & s_instance(s_commentator_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_commentator(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST ContentBearingObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn inventory ?CLASS)
          (instance inventory Predicate))
     (=> (instance ?INST ?CLASS) (not (inventory ?INST ?INST))))))))
*/
fof(a8172,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_ContentBearingObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_inventory_m, CLASS) & s_instance(s_inventory_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_inventory(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Collection)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn memberType ?CLASS)
          (instance memberType Predicate))
     (=> (instance ?INST ?CLASS) (not (memberType ?INST ?INST))))))))
*/
fof(a8173,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Collection) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_memberType_m, CLASS) & s_instance(s_memberType_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_memberType(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn typicalPart ?CLASS)
          (instance typicalPart Predicate))
     (=> (instance ?INST ?CLASS) (not (typicalPart ?INST ?INST))))))))
*/
fof(a8174,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_typicalPart_m, CLASS) & s_instance(s_typicalPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_typicalPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Proposition)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn insured ?CLASS) (instance insured Predicate))
     (=> (instance ?INST ?CLASS) (not (insured ?INST ?INST))))))))
*/
fof(a8175,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Proposition) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_insured_m, CLASS) & s_instance(s_insured_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_insured(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST GeographicArea)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn geographicSubregion ?CLASS)
          (instance geographicSubregion Predicate))
     (=> (instance ?INST ?CLASS)
      (not (geographicSubregion ?INST ?INST))))))))
*/
fof(a8176,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_GeographicArea) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_geographicSubregion_m, CLASS) & s_instance(s_geographicSubregion_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_geographicSubregion(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn almamater ?CLASS)
          (instance almamater Predicate))
     (=> (instance ?INST ?CLASS) (not (almamater ?INST ?INST))))))))
*/
fof(a8177,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_almamater_m, CLASS) & s_instance(s_almamater_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_almamater(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn approves ?CLASS)
          (instance approves Predicate))
     (=> (instance ?INST ?CLASS) (not (approves ?INST ?INST))))))))
*/
fof(a8178,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_approves_m, CLASS) & s_instance(s_approves_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_approves(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn subList ?CLASS) (instance subList Predicate))
     (=> (instance ?INST ?CLASS) (not (subList ?INST ?INST))))))))
*/
fof(a8179,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_subList_m, CLASS) & s_instance(s_subList_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_subList(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn systemPart ?CLASS)
          (instance systemPart Predicate))
     (=> (instance ?INST ?CLASS) (not (systemPart ?INST ?INST))))))))
*/
fof(a8180,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_systemPart_m, CLASS) & s_instance(s_systemPart_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_systemPart(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn hasSkill ?CLASS)
          (instance hasSkill Predicate))
     (=> (instance ?INST ?CLASS) (not (hasSkill ?INST ?INST))))))))
*/
fof(a8181,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_hasSkill_m, CLASS) & s_instance(s_hasSkill_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_hasSkill(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST PostalPlace)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn postStreet ?CLASS)
          (instance postStreet Predicate))
     (=> (instance ?INST ?CLASS) (not (postStreet ?INST ?INST))))))))
*/
fof(a8182,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_PostalPlace) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_postStreet_m, CLASS) & s_instance(s_postStreet_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_postStreet(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn destination ?CLASS)
          (instance destination Predicate))
     (=> (instance ?INST ?CLASS) (not (destination ?INST ?INST))))))))
*/
fof(a8183,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_destination_m, CLASS) & s_instance(s_destination_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_destination(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST OneDimensionalFigure)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn tangent ?CLASS) (instance tangent Predicate))
     (=> (instance ?INST ?CLASS) (not (tangent ?INST ?INST))))))))
*/
fof(a8184,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_OneDimensionalFigure) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_tangent_m, CLASS) & s_instance(s_tangent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_tangent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST SymbolicString)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn floorCode ?CLASS)
          (instance floorCode Predicate))
     (=> (instance ?INST ?CLASS) (not (floorCode ?INST ?INST))))))))
*/
fof(a8185,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_SymbolicString) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_floorCode_m, CLASS) & s_instance(s_floorCode_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_floorCode(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CorpuscularObject)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn powerComponent ?CLASS)
          (instance powerComponent Predicate))
     (=> (instance ?INST ?CLASS)
      (not (powerComponent ?INST ?INST))))))))
*/
fof(a8186,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CorpuscularObject) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_powerComponent_m, CLASS) & s_instance(s_powerComponent_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_powerComponent(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Agent)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn creator ?CLASS) (instance creator Predicate))
     (=> (instance ?INST ?CLASS) (not (creator ?INST ?INST))))))))
*/
fof(a8187,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Agent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_creator_m, CLASS) & s_instance(s_creator_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_creator(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn doubts ?CLASS) (instance doubts Predicate))
     (=> (instance ?INST ?CLASS) (not (doubts ?INST ?INST))))))))
*/
fof(a8188,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_doubts_m, CLASS) & s_instance(s_doubts_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_doubts(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Relation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn valence ?CLASS) (instance valence Predicate))
     (=> (instance ?INST ?CLASS) (not (valence ?INST ?INST))))))))
*/
fof(a8189,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Relation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_valence_m, CLASS) & s_instance(s_valence_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_valence(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryFunction)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn distributes ?CLASS)
          (instance distributes Predicate))
     (=> (instance ?INST ?CLASS) (not (distributes ?INST ?INST))))))))
*/
fof(a8190,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryFunction) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_distributes_m, CLASS) & s_instance(s_distributes_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_distributes(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn suffers ?CLASS) (instance suffers Predicate))
     (=> (instance ?INST ?CLASS) (not (suffers ?INST ?INST))))))))
*/
fof(a8191,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_suffers_m, CLASS) & s_instance(s_suffers_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_suffers(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Organism)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn relative ?CLASS)
          (instance relative Predicate))
     (=> (instance ?INST ?CLASS) (not (relative ?INST ?INST))))))))
*/
fof(a8192,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Organism) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_relative_m, CLASS) & s_instance(s_relative_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_relative(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn inList ?CLASS) (instance inList Predicate))
     (=> (instance ?INST ?CLASS) (not (inList ?INST ?INST))))))))
*/
fof(a8193,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_inList_m, CLASS) & s_instance(s_inList_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_inList(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Human)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn cohabitant ?CLASS)
          (instance cohabitant Predicate))
     (=> (instance ?INST ?CLASS) (not (cohabitant ?INST ?INST))))))))
*/
fof(a8194,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Human) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_cohabitant_m, CLASS) & s_instance(s_cohabitant_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_cohabitant(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Process)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn instrument ?CLASS)
          (instance instrument Predicate))
     (=> (instance ?INST ?CLASS) (not (instrument ?INST ?INST))))))))
*/
fof(a8195,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Process) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_instrument_m, CLASS) & s_instance(s_instrument_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_instrument(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (and (instance ?INST Entity) (subclass ?INST Artifact))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn version ?CLASS) (instance version Predicate))
     (=> (instance ?INST ?CLASS) (not (version ?INST ?INST))))))))
*/
fof(a8196,axiom,! [CLASS] : (! [INST] : (((s_instance(INST, s_Entity) & s_subclass(INST, s_Artifact)) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_version_m, CLASS) & s_instance(s_version_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_version(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Collection)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn memberCount ?CLASS)
          (instance memberCount Predicate))
     (=> (instance ?INST ?CLASS) (not (memberCount ?INST ?INST))))))))
*/
fof(a8197,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Collection) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_memberCount_m, CLASS) & s_instance(s_memberCount_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_memberCount(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST CognitiveAgent)
   (=> (instance ?CLASS SetOrClass)
    (=> (and (irreflexiveOn knows ?CLASS) (instance knows Predicate))
     (=> (instance ?INST ?CLASS) (not (knows ?INST ?INST))))))))
*/
fof(a8198,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_CognitiveAgent) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_knows_m, CLASS) & s_instance(s_knows_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_knows(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST List)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn identicalListItems ?CLASS)
          (instance identicalListItems Predicate))
     (=> (instance ?INST ?CLASS)
      (not (identicalListItems ?INST ?INST))))))))
*/
fof(a8199,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_List) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_identicalListItems_m, CLASS) & s_instance(s_identicalListItems_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_identicalListItems(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST Physical)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn dateEstablished ?CLASS)
          (instance dateEstablished Predicate))
     (=> (instance ?INST ?CLASS)
      (not (dateEstablished ?INST ?INST))))))))
*/
fof(a8200,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_Physical) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_dateEstablished_m, CLASS) & s_instance(s_dateEstablished_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_dateEstablished(INST, INST))))))))).

/*
(forall (?CLASS)
 (forall (?INST)
  (=> (instance ?INST BinaryRelation)
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (irreflexiveOn partialOrderingOn ?CLASS)
          (instance partialOrderingOn Predicate))
     (=> (instance ?INST ?CLASS)
      (not (partialOrderingOn ?INST ?INST))))))))
*/
fof(a8201,axiom,! [CLASS] : (! [INST] : ((s_instance(INST, s_BinaryRelation) => (s_instance(CLASS, s_SetOrClass) => ((s_irreflexiveOn(s_partialOrderingOn_m, CLASS) & s_instance(s_partialOrderingOn_m, s_Predicate)) => (s_instance(INST, CLASS) => (~ s_partialOrderingOn(INST, INST))))))))).

/*
(instance partialOrderingOn BinaryPredicate)
*/
fof(a8202,axiom,s_instance(s_partialOrderingOn_m, s_BinaryPredicate)).

/*
(instance partialOrderingOn AsymmetricRelation)
*/
fof(a8203,axiom,s_instance(s_partialOrderingOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS ?RELATION)
 (=>
  (and (instance ?RELATION BinaryRelation)
       (instance ?CLASS SetOrClass))
  (=> (partialOrderingOn ?RELATION ?CLASS)
   (and (reflexiveOn ?RELATION ?CLASS)
        (and (instance ?RELATION TransitiveRelation)
             (instance ?RELATION AntisymmetricRelation))))))
*/
fof(a8204,axiom,! [CLASS,RELATION] : (((s_instance(RELATION, s_BinaryRelation) & s_instance(CLASS, s_SetOrClass)) => (s_partialOrderingOn(RELATION, CLASS) => (s_reflexiveOn(RELATION, CLASS) & (s_instance(RELATION, s_TransitiveRelation) & s_instance(RELATION, s_AntisymmetricRelation))))))).

/*
(instance totalOrderingOn BinaryPredicate)
*/
fof(a8205,axiom,s_instance(s_totalOrderingOn_m, s_BinaryPredicate)).

/*
(instance totalOrderingOn AsymmetricRelation)
*/
fof(a8206,axiom,s_instance(s_totalOrderingOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS ?RELATION)
 (=>
  (and (instance ?RELATION BinaryRelation)
       (instance ?CLASS SetOrClass))
  (<=> (totalOrderingOn ?RELATION ?CLASS)
   (and (partialOrderingOn ?RELATION ?CLASS)
        (trichotomizingOn ?RELATION ?CLASS)))))
*/
fof(a8207,axiom,! [CLASS,RELATION] : (((s_instance(RELATION, s_BinaryRelation) & s_instance(CLASS, s_SetOrClass)) => (s_totalOrderingOn(RELATION, CLASS) <=> (s_partialOrderingOn(RELATION, CLASS) & s_trichotomizingOn(RELATION, CLASS)))))).

/*
(instance trichotomizingOn BinaryPredicate)
*/
fof(a8208,axiom,s_instance(s_trichotomizingOn_m, s_BinaryPredicate)).

/*
(instance trichotomizingOn AsymmetricRelation)
*/
fof(a8209,axiom,s_instance(s_trichotomizingOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Process)
        (subclass ?INST1 Process) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn preventsSubclass ?CLASS)
          (instance preventsSubclass Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (preventsSubclass ?INST1 ?INST2)
          (or (preventsSubclass ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8210,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_preventsSubclass_m, CLASS) & s_instance(s_preventsSubclass_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_preventsSubclass(INST1, INST2) | (s_preventsSubclass(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Man) (instance ?INST1 Man))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn uncle ?CLASS) (instance uncle Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (uncle ?INST1 ?INST2)
          (or (uncle ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8211,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Man) & s_instance(INST1, s_Man)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_uncle_m, CLASS) & s_instance(s_uncle_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_uncle(INST1, INST2) | (s_uncle(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelephonyDevice) (instance ?INST2 Agent)
        (instance ?INST1 TelephonyDevice) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telecomContactDevice ?CLASS)
          (instance telecomContactDevice Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telecomContactDevice ?INST1 ?INST2)
          (or (telecomContactDevice ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8212,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelephonyDevice) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelephonyDevice) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telecomContactDevice_m, CLASS) & s_instance(s_telecomContactDevice_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telecomContactDevice(INST1, INST2) | (s_telecomContactDevice(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SelfConnectedObject)
        (instance ?INST1 SelfConnectedObject))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn top ?CLASS) (instance top Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (top ?INST1 ?INST2)
          (or (top ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8213,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_top_m, CLASS) & s_instance(s_top_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_top(INST1, INST2) | (s_top(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ContentBearingObject) (instance ?INST2 Agent)
        (instance ?INST1 ContentBearingObject) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn deceptiveIdentifier ?CLASS)
          (instance deceptiveIdentifier Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (deceptiveIdentifier ?INST1 ?INST2)
          (or (deceptiveIdentifier ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8214,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingObject) & s_instance(INST2, s_Agent) & s_instance(INST1, s_ContentBearingObject) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_deceptiveIdentifier_m, CLASS) & s_instance(s_deceptiveIdentifier_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_deceptiveIdentifier(INST1, INST2) | (s_deceptiveIdentifier(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
        (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn faxNumber ?CLASS)
          (instance faxNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (faxNumber ?INST1 ?INST2)
          (or (faxNumber ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8215,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_faxNumber_m, CLASS) & s_instance(s_faxNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_faxNumber(INST1, INST2) | (s_faxNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 GraphElement) (instance ?INST2 Graph)
        (instance ?INST1 GraphElement) (instance ?INST1 Graph))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn graphPart ?CLASS)
          (instance graphPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (graphPart ?INST1 ?INST2)
          (or (graphPart ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8216,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_GraphElement) & s_instance(INST2, s_Graph) & s_instance(INST1, s_GraphElement) & s_instance(INST1, s_Graph)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_graphPart_m, CLASS) & s_instance(s_graphPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_graphPart(INST1, INST2) | (s_graphPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 FinancialTransaction)
        (instance ?INST1 Human) (instance ?INST1 FinancialTransaction))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn occupation ?CLASS)
          (instance occupation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (occupation ?INST1 ?INST2)
          (or (occupation ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8217,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_FinancialTransaction) & s_instance(INST1, s_Human) & s_instance(INST1, s_FinancialTransaction)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_occupation_m, CLASS) & s_instance(s_occupation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_occupation(INST1, INST2) | (s_occupation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn connected ?CLASS)
          (instance connected Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (connected ?INST1 ?INST2)
          (or (connected ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8218,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_connected_m, CLASS) & s_instance(s_connected_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_connected(INST1, INST2) | (s_connected(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Set) (instance ?INST1 Set))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn element ?CLASS)
          (instance element Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (element ?INST1 ?INST2)
          (or (element ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8219,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Set) & s_instance(INST1, s_Set)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_element_m, CLASS) & s_instance(s_element_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_element(INST1, INST2) | (s_element(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn smaller ?CLASS)
          (instance smaller Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (smaller ?INST1 ?INST2)
          (or (smaller ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8220,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_smaller_m, CLASS) & s_instance(s_smaller_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_smaller(INST1, INST2) | (s_smaller(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation)
        (instance ?INST1 BinaryRelation))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn inverse ?CLASS)
          (instance inverse Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (inverse ?INST1 ?INST2)
          (or (inverse ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8221,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST1, s_BinaryRelation)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_inverse_m, CLASS) & s_instance(s_inverse_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_inverse(INST1, INST2) | (s_inverse(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 Neighborhood)
        (instance ?INST1 PostalPlace) (instance ?INST1 Neighborhood))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postNeighborhood ?CLASS)
          (instance postNeighborhood Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postNeighborhood ?INST1 ?INST2)
          (or (postNeighborhood ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8222,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_Neighborhood) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_Neighborhood)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postNeighborhood_m, CLASS) & s_instance(s_postNeighborhood_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postNeighborhood(INST1, INST2) | (s_postNeighborhood(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Argument) (instance ?INST1 Argument))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn premise ?CLASS)
          (instance premise Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (premise ?INST1 ?INST2)
          (or (premise ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8223,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Argument) & s_instance(INST1, s_Argument)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_premise_m, CLASS) & s_instance(s_premise_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_premise(INST1, INST2) | (s_premise(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Entity) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn relatedInternalConcept ?CLASS)
          (instance relatedInternalConcept Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (relatedInternalConcept ?INST1 ?INST2)
          (or (relatedInternalConcept ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8224,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_relatedInternalConcept_m, CLASS) & s_instance(s_relatedInternalConcept_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_relatedInternalConcept(INST1, INST2) | (s_relatedInternalConcept(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber)
        (instance ?INST1 TelecomNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telecomCoreNumber ?CLASS)
          (instance telecomCoreNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telecomCoreNumber ?INST1 ?INST2)
          (or (telecomCoreNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8225,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telecomCoreNumber_m, CLASS) & s_instance(s_telecomCoreNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telecomCoreNumber(INST1, INST2) | (s_telecomCoreNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn acquaintance ?CLASS)
          (instance acquaintance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (acquaintance ?INST1 ?INST2)
          (or (acquaintance ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8226,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_acquaintance_m, CLASS) & s_instance(s_acquaintance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_acquaintance(INST1, INST2) | (s_acquaintance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TimeInterval) (instance ?INST1 TimeInterval))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn meetsTemporally ?CLASS)
          (instance meetsTemporally Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (meetsTemporally ?INST1 ?INST2)
          (or (meetsTemporally ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8227,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_meetsTemporally_m, CLASS) & s_instance(s_meetsTemporally_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_meetsTemporally(INST1, INST2) | (s_meetsTemporally(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn relatedEvent ?CLASS)
          (instance relatedEvent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (relatedEvent ?INST1 ?INST2)
          (or (relatedEvent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8228,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_relatedEvent_m, CLASS) & s_instance(s_relatedEvent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_relatedEvent(INST1, INST2) | (s_relatedEvent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Argument) (instance ?INST1 Argument))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn conclusion ?CLASS)
          (instance conclusion Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (conclusion ?INST1 ?INST2)
          (or (conclusion ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8229,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Argument) & s_instance(INST1, s_Argument)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_conclusion_m, CLASS) & s_instance(s_conclusion_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_conclusion(INST1, INST2) | (s_conclusion(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Meat)
        (subclass ?INST2 Animal) (subclass ?INST1 Meat)
        (subclass ?INST1 Animal) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn meatOfAnimal ?CLASS)
          (instance meatOfAnimal Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (meatOfAnimal ?INST1 ?INST2)
          (or (meatOfAnimal ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8230,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Meat) & s_subclass(INST2, s_Animal) & s_subclass(INST1, s_Meat) & s_subclass(INST1, s_Animal) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_meatOfAnimal_m, CLASS) & s_instance(s_meatOfAnimal_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_meatOfAnimal(INST1, INST2) | (s_meatOfAnimal(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 AchievingControl) (instance ?INST2 Agent)
        (instance ?INST1 AchievingControl) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn gainsControl ?CLASS)
          (instance gainsControl Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (gainsControl ?INST1 ?INST2)
          (or (gainsControl ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8231,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_AchievingControl) & s_instance(INST2, s_Agent) & s_instance(INST1, s_AchievingControl) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_gainsControl_m, CLASS) & s_instance(s_gainsControl_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_gainsControl(INST1, INST2) | (s_gainsControl(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Hole) (instance ?INST2 SelfConnectedObject)
        (instance ?INST1 Hole) (instance ?INST1 SelfConnectedObject))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn hole ?CLASS) (instance hole Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hole ?INST1 ?INST2)
          (or (hole ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8232,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Hole) & s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_Hole) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hole_m, CLASS) & s_instance(s_hole_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hole(INST1, INST2) | (s_hole(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Animal) (instance ?INST2 WearableItem)
        (instance ?INST1 Animal) (instance ?INST1 WearableItem))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn wears ?CLASS) (instance wears Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (wears ?INST1 ?INST2)
          (or (wears ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8233,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Animal) & s_instance(INST2, s_WearableItem) & s_instance(INST1, s_Animal) & s_instance(INST1, s_WearableItem)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_wears_m, CLASS) & s_instance(s_wears_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_wears(INST1, INST2) | (s_wears(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Character) (instance ?INST1 Character))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn inString ?CLASS)
          (instance inString Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (inString ?INST1 ?INST2)
          (or (inString ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8234,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Character) & s_instance(INST1, s_Character)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_inString_m, CLASS) & s_instance(s_inString_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_inString(INST1, INST2) | (s_inString(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
        (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telephoneNumber ?CLASS)
          (instance telephoneNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telephoneNumber ?INST1 ?INST2)
          (or (telephoneNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8235,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telephoneNumber_m, CLASS) & s_instance(s_telephoneNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telephoneNumber(INST1, INST2) | (s_telephoneNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 MusicalTone)
        (instance ?INST2 FunctionQuantity)
        (instance ?INST1 MusicalTone)
        (instance ?INST1 FunctionQuantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn soundFrequency ?CLASS)
          (instance soundFrequency Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (soundFrequency ?INST1 ?INST2)
          (or (soundFrequency ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8236,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_MusicalTone) & s_instance(INST2, s_FunctionQuantity) & s_instance(INST1, s_MusicalTone) & s_instance(INST1, s_FunctionQuantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_soundFrequency_m, CLASS) & s_instance(s_soundFrequency_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_soundFrequency(INST1, INST2) | (s_soundFrequency(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 OneDimensionalFigure)
        (instance ?INST2 LengthMeasure)
        (instance ?INST1 OneDimensionalFigure)
        (instance ?INST1 LengthMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn lineMeasure ?CLASS)
          (instance lineMeasure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (lineMeasure ?INST1 ?INST2)
          (or (lineMeasure ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8237,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_OneDimensionalFigure) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_OneDimensionalFigure) & s_instance(INST1, s_LengthMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_lineMeasure_m, CLASS) & s_instance(s_lineMeasure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_lineMeasure(INST1, INST2) | (s_lineMeasure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 City)
        (instance ?INST1 PostalPlace) (instance ?INST1 City))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postCity ?CLASS)
          (instance postCity Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postCity ?INST1 ?INST2)
          (or (postCity ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8238,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_City) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_City)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postCity_m, CLASS) & s_instance(s_postCity_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postCity(INST1, INST2) | (s_postCity(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (subclass ?INST2 PureSubstance)
        (instance ?INST2 TemperatureMeasure)
        (subclass ?INST1 PureSubstance)
        (instance ?INST1 TemperatureMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn meltingPoint ?CLASS)
          (instance meltingPoint Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (meltingPoint ?INST1 ?INST2)
          (or (meltingPoint ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8239,axiom,! [CLASS] : (! [INST1,INST2] : (((s_subclass(INST2, s_PureSubstance) & s_instance(INST2, s_TemperatureMeasure) & s_subclass(INST1, s_PureSubstance) & s_instance(INST1, s_TemperatureMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_meltingPoint_m, CLASS) & s_instance(s_meltingPoint_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_meltingPoint(INST1, INST2) | (s_meltingPoint(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TwoDimensionalAngle)
        (instance ?INST2 PlaneAngleMeasure)
        (instance ?INST1 TwoDimensionalAngle)
        (instance ?INST1 PlaneAngleMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn angularMeasure ?CLASS)
          (instance angularMeasure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (angularMeasure ?INST1 ?INST2)
          (or (angularMeasure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8240,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TwoDimensionalAngle) & s_instance(INST2, s_PlaneAngleMeasure) & s_instance(INST1, s_TwoDimensionalAngle) & s_instance(INST1, s_PlaneAngleMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_angularMeasure_m, CLASS) & s_instance(s_angularMeasure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_angularMeasure(INST1, INST2) | (s_angularMeasure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Attribute) (instance ?INST1 Attribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subAttribute ?CLASS)
          (instance subAttribute Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subAttribute ?INST1 ?INST2)
          (or (subAttribute ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8241,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subAttribute_m, CLASS) & s_instance(s_subAttribute_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subAttribute(INST1, INST2) | (s_subAttribute(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
        (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn totalOrderingOn ?CLASS)
          (instance totalOrderingOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (totalOrderingOn ?INST1 ?INST2)
          (or (totalOrderingOn ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8242,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_totalOrderingOn_m, CLASS) & s_instance(s_totalOrderingOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_totalOrderingOn(INST1, INST2) | (s_totalOrderingOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn resourceExhausted ?CLASS)
          (instance resourceExhausted Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (resourceExhausted ?INST1 ?INST2)
          (or (resourceExhausted ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8243,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_resourceExhausted_m, CLASS) & s_instance(s_resourceExhausted_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_resourceExhausted(INST1, INST2) | (s_resourceExhausted(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn believes ?CLASS)
          (instance believes Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (believes ?INST1 ?INST2)
          (or (believes ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8244,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_believes_m, CLASS) & s_instance(s_believes_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_believes(INST1, INST2) | (s_believes(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn eventPartlyLocated ?CLASS)
          (instance eventPartlyLocated Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (eventPartlyLocated ?INST1 ?INST2)
          (or (eventPartlyLocated ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8245,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_eventPartlyLocated_m, CLASS) & s_instance(s_eventPartlyLocated_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_eventPartlyLocated(INST1, INST2) | (s_eventPartlyLocated(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn familyRelation ?CLASS)
          (instance familyRelation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (familyRelation ?INST1 ?INST2)
          (or (familyRelation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8246,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_familyRelation_m, CLASS) & s_instance(s_familyRelation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_familyRelation(INST1, INST2) | (s_familyRelation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn increasesLikelihood ?CLASS)
          (instance increasesLikelihood Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (increasesLikelihood ?INST1 ?INST2)
          (or (increasesLikelihood ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8247,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_increasesLikelihood_m, CLASS) & s_instance(s_increasesLikelihood_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_increasesLikelihood(INST1, INST2) | (s_increasesLikelihood(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Woman) (instance ?INST1 Woman))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn stepmother ?CLASS)
          (instance stepmother Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (stepmother ?INST1 ?INST2)
          (or (stepmother ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8248,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Woman) & s_instance(INST1, s_Woman)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_stepmother_m, CLASS) & s_instance(s_stepmother_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_stepmother(INST1, INST2) | (s_stepmother(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Device) (instance ?INST1 Device))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn equipmentType ?CLASS)
          (instance equipmentType Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (equipmentType ?INST1 ?INST2)
          (or (equipmentType ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8249,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Device) & s_instance(INST1, s_Device)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_equipmentType_m, CLASS) & s_instance(s_equipmentType_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_equipmentType(INST1, INST2) | (s_equipmentType(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn mutualStranger ?CLASS)
          (instance mutualStranger Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (mutualStranger ?INST1 ?INST2)
          (or (mutualStranger ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8250,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_mutualStranger_m, CLASS) & s_instance(s_mutualStranger_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_mutualStranger(INST1, INST2) | (s_mutualStranger(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 Human)
        (instance ?INST1 SymbolicString) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn givenName ?CLASS)
          (instance givenName Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (givenName ?INST1 ?INST2)
          (or (givenName ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8251,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Human) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_givenName_m, CLASS) & s_instance(s_givenName_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_givenName(INST1, INST2) | (s_givenName(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PlacingUnderArrest) (instance ?INST2 Agent)
        (instance ?INST1 PlacingUnderArrest) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn arrested ?CLASS)
          (instance arrested Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (arrested ?INST1 ?INST2)
          (or (arrested ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8252,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PlacingUnderArrest) & s_instance(INST2, s_Agent) & s_instance(INST1, s_PlacingUnderArrest) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_arrested_m, CLASS) & s_instance(s_arrested_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_arrested(INST1, INST2) | (s_arrested(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (instance ?INST2 Policy)
        (instance ?INST1 Organization) (instance ?INST1 Policy))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn policyOwner ?CLASS)
          (instance policyOwner Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (policyOwner ?INST1 ?INST2)
          (or (policyOwner ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8253,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST2, s_Policy) & s_instance(INST1, s_Organization) & s_instance(INST1, s_Policy)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_policyOwner_m, CLASS) & s_instance(s_policyOwner_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_policyOwner(INST1, INST2) | (s_policyOwner(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn expects ?CLASS)
          (instance expects Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (expects ?INST1 ?INST2)
          (or (expects ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8254,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_expects_m, CLASS) & s_instance(s_expects_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_expects(INST1, INST2) | (s_expects(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Motion) (instance ?INST2 Object)
        (instance ?INST1 Motion) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn path ?CLASS) (instance path Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (path ?INST1 ?INST2)
          (or (path ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8255,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Motion) & s_instance(INST2, s_Object) & s_instance(INST1, s_Motion) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_path_m, CLASS) & s_instance(s_path_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_path(INST1, INST2) | (s_path(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn traverses ?CLASS)
          (instance traverses Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (traverses ?INST1 ?INST2)
          (or (traverses ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8256,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_traverses_m, CLASS) & s_instance(s_traverses_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_traverses(INST1, INST2) | (s_traverses(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 PostalPlace)
        (instance ?INST1 SymbolicString) (instance ?INST1 PostalPlace))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postStreetNumber ?CLASS)
          (instance postStreetNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postStreetNumber ?INST1 ?INST2)
          (or (postStreetNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8257,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_PostalPlace)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postStreetNumber_m, CLASS) & s_instance(s_postStreetNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postStreetNumber(INST1, INST2) | (s_postStreetNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 Human)
        (instance ?INST1 SymbolicString) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn middleName ?CLASS)
          (instance middleName Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (middleName ?INST1 ?INST2)
          (or (middleName ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8258,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Human) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_middleName_m, CLASS) & s_instance(s_middleName_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_middleName(INST1, INST2) | (s_middleName(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 Day)
        (instance ?INST1 Human) (instance ?INST1 Day))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn birthdate ?CLASS)
          (instance birthdate Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (birthdate ?INST1 ?INST2)
          (or (birthdate ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8259,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_Day) & s_instance(INST1, s_Human) & s_instance(INST1, s_Day)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_birthdate_m, CLASS) & s_instance(s_birthdate_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_birthdate(INST1, INST2) | (s_birthdate(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Physical) (instance ?INST1 Physical))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn cooccur ?CLASS)
          (instance cooccur Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (cooccur ?INST1 ?INST2)
          (or (cooccur ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8260,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST1, s_Physical)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_cooccur_m, CLASS) & s_instance(s_cooccur_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_cooccur(INST1, INST2) | (s_cooccur(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn coworker ?CLASS)
          (instance coworker Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (coworker ?INST1 ?INST2)
          (or (coworker ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8261,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_coworker_m, CLASS) & s_instance(s_coworker_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_coworker(INST1, INST2) | (s_coworker(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agent) (instance ?INST2 Residence)
        (instance ?INST1 Agent) (instance ?INST1 Residence))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn tenant ?CLASS) (instance tenant Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (tenant ?INST1 ?INST2)
          (or (tenant ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8262,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST2, s_Residence) & s_instance(INST1, s_Agent) & s_instance(INST1, s_Residence)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_tenant_m, CLASS) & s_instance(s_tenant_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_tenant(INST1, INST2) | (s_tenant(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SelfConnectedObject)
        (instance ?INST2 MassMeasure)
        (instance ?INST1 SelfConnectedObject)
        (instance ?INST1 MassMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn weight ?CLASS) (instance weight Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (weight ?INST1 ?INST2)
          (or (weight ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8263,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST2, s_MassMeasure) & s_instance(INST1, s_SelfConnectedObject) & s_instance(INST1, s_MassMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_weight_m, CLASS) & s_instance(s_weight_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_weight(INST1, INST2) | (s_weight(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SelfConnectedObject)
        (instance ?INST2 ConstantQuantity)
        (instance ?INST1 SelfConnectedObject)
        (instance ?INST1 ConstantQuantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn capacity ?CLASS)
          (instance capacity Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (capacity ?INST1 ?INST2)
          (or (capacity ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8264,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST2, s_ConstantQuantity) & s_instance(INST1, s_SelfConnectedObject) & s_instance(INST1, s_ConstantQuantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_capacity_m, CLASS) & s_instance(s_capacity_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_capacity(INST1, INST2) | (s_capacity(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PureSubstance)
        (instance ?INST2 PositiveInteger)
        (instance ?INST1 PureSubstance)
        (instance ?INST1 PositiveInteger))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn protonNumber ?CLASS)
          (instance protonNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (protonNumber ?INST1 ?INST2)
          (or (protonNumber ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8265,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PureSubstance) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_PureSubstance) & s_instance(INST1, s_PositiveInteger)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_protonNumber_m, CLASS) & s_instance(s_protonNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_protonNumber(INST1, INST2) | (s_protonNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber) (instance ?INST2 Human)
        (instance ?INST1 TelecomNumber) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn personalPhoneNumber ?CLASS)
          (instance personalPhoneNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (personalPhoneNumber ?INST1 ?INST2)
          (or (personalPhoneNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8266,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Human) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_personalPhoneNumber_m, CLASS) & s_instance(s_personalPhoneNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_personalPhoneNumber(INST1, INST2) | (s_personalPhoneNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 List) (instance ?INST1 List))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn initialList ?CLASS)
          (instance initialList Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (initialList ?INST1 ?INST2)
          (or (initialList ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8267,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_initialList_m, CLASS) & s_instance(s_initialList_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_initialList(INST1, INST2) | (s_initialList(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 MeasuringDevice)
        (instance ?INST2 ConstantQuantity)
        (instance ?INST1 MeasuringDevice)
        (instance ?INST1 ConstantQuantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn measurementReading ?CLASS)
          (instance measurementReading Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (measurementReading ?INST1 ?INST2)
          (or (measurementReading ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8268,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_MeasuringDevice) & s_instance(INST2, s_ConstantQuantity) & s_instance(INST1, s_MeasuringDevice) & s_instance(INST1, s_ConstantQuantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_measurementReading_m, CLASS) & s_instance(s_measurementReading_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_measurementReading(INST1, INST2) | (s_measurementReading(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Agent)
        (instance ?INST1 Process) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn agent ?CLASS) (instance agent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (agent ?INST1 ?INST2)
          (or (agent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8269,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_agent_m, CLASS) & s_instance(s_agent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_agent(INST1, INST2) | (s_agent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 OrganicObject)
        (subclass ?INST2 NaturalSubstance)
        (subclass ?INST1 OrganicObject)
        (subclass ?INST1 NaturalSubstance) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn secretesSubstance ?CLASS)
          (instance secretesSubstance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (secretesSubstance ?INST1 ?INST2)
          (or (secretesSubstance ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8270,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_OrganicObject) & s_subclass(INST2, s_NaturalSubstance) & s_subclass(INST1, s_OrganicObject) & s_subclass(INST1, s_NaturalSubstance) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_secretesSubstance_m, CLASS) & s_instance(s_secretesSubstance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_secretesSubstance(INST1, INST2) | (s_secretesSubstance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
        (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn equivalenceRelationOn ?CLASS)
          (instance equivalenceRelationOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (equivalenceRelationOn ?INST1 ?INST2)
          (or (equivalenceRelationOn ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8271,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_equivalenceRelationOn_m, CLASS) & s_instance(s_equivalenceRelationOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_equivalenceRelationOn(INST1, INST2) | (s_equivalenceRelationOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn axis ?CLASS) (instance axis Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (axis ?INST1 ?INST2)
          (or (axis ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8272,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_axis_m, CLASS) & s_instance(s_axis_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_axis(INST1, INST2) | (s_axis(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn allegiance ?CLASS)
          (instance allegiance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (allegiance ?INST1 ?INST2)
          (or (allegiance ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8273,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_allegiance_m, CLASS) & s_instance(s_allegiance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_allegiance(INST1, INST2) | (s_allegiance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ContactSite) (instance ?INST2 Agent)
        (instance ?INST1 ContactSite) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn siteForContact ?CLASS)
          (instance siteForContact Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (siteForContact ?INST1 ?INST2)
          (or (siteForContact ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8274,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ContactSite) & s_instance(INST2, s_Agent) & s_instance(INST1, s_ContactSite) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_siteForContact_m, CLASS) & s_instance(s_siteForContact_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_siteForContact(INST1, INST2) | (s_siteForContact(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ServiceProcess)
        (instance ?INST2 CognitiveAgent)
        (instance ?INST1 ServiceProcess)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn serviceProvider ?CLASS)
          (instance serviceProvider Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (serviceProvider ?INST1 ?INST2)
          (or (serviceProvider ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8275,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ServiceProcess) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_ServiceProcess) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_serviceProvider_m, CLASS) & s_instance(s_serviceProvider_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_serviceProvider(INST1, INST2) | (s_serviceProvider(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PureSubstance)
        (instance ?INST2 PositiveInteger)
        (instance ?INST1 PureSubstance)
        (instance ?INST1 PositiveInteger))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn electronNumber ?CLASS)
          (instance electronNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (electronNumber ?INST1 ?INST2)
          (or (electronNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8276,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PureSubstance) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_PureSubstance) & s_instance(INST1, s_PositiveInteger)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_electronNumber_m, CLASS) & s_instance(s_electronNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_electronNumber(INST1, INST2) | (s_electronNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 AchievingControl) (instance ?INST2 Object)
        (instance ?INST1 AchievingControl) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn controlled ?CLASS)
          (instance controlled Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (controlled ?INST1 ?INST2)
          (or (controlled ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8277,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_AchievingControl) & s_instance(INST2, s_Object) & s_instance(INST1, s_AchievingControl) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_controlled_m, CLASS) & s_instance(s_controlled_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_controlled(INST1, INST2) | (s_controlled(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object) (instance ?INST2 StructureAttribute)
        (instance ?INST1 Object) (instance ?INST1 StructureAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn structure ?CLASS)
          (instance structure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (structure ?INST1 ?INST2)
          (or (structure ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8278,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_StructureAttribute) & s_instance(INST1, s_Object) & s_instance(INST1, s_StructureAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_structure_m, CLASS) & s_instance(s_structure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_structure(INST1, INST2) | (s_structure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Physical) (instance ?INST2 TimePosition)
        (instance ?INST1 Physical) (instance ?INST1 TimePosition))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn time ?CLASS) (instance time Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (time ?INST1 ?INST2)
          (or (time ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8279,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_TimePosition) & s_instance(INST1, s_Physical) & s_instance(INST1, s_TimePosition)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_time_m, CLASS) & s_instance(s_time_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_time(INST1, INST2) | (s_time(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Woman) (instance ?INST1 Woman))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn niece ?CLASS) (instance niece Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (niece ?INST1 ?INST2)
          (or (niece ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8280,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Woman) & s_instance(INST1, s_Woman)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_niece_m, CLASS) & s_instance(s_niece_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_niece(INST1, INST2) | (s_niece(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 StateOrProvince)
        (instance ?INST1 PostalPlace)
        (instance ?INST1 StateOrProvince))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postDistrict ?CLASS)
          (instance postDistrict Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postDistrict ?INST1 ?INST2)
          (or (postDistrict ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8281,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_StateOrProvince) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_StateOrProvince)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postDistrict_m, CLASS) & s_instance(s_postDistrict_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postDistrict(INST1, INST2) | (s_postDistrict(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Motion) (instance ?INST2 Object)
        (instance ?INST1 Motion) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn moves ?CLASS) (instance moves Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (moves ?INST1 ?INST2)
          (or (moves ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8282,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Motion) & s_instance(INST2, s_Object) & s_instance(INST1, s_Motion) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_moves_m, CLASS) & s_instance(s_moves_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_moves(INST1, INST2) | (s_moves(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn causes ?CLASS) (instance causes Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (causes ?INST1 ?INST2)
          (or (causes ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8283,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_causes_m, CLASS) & s_instance(s_causes_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_causes(INST1, INST2) | (s_causes(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Man) (instance ?INST1 Man))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn nephew ?CLASS) (instance nephew Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (nephew ?INST1 ?INST2)
          (or (nephew ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8284,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Man) & s_instance(INST1, s_Man)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_nephew_m, CLASS) & s_instance(s_nephew_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_nephew(INST1, INST2) | (s_nephew(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Abstract) (instance ?INST1 Abstract))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn abstractPart ?CLASS)
          (instance abstractPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (abstractPart ?INST1 ?INST2)
          (or (abstractPart ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8285,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Abstract) & s_instance(INST1, s_Abstract)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_abstractPart_m, CLASS) & s_instance(s_abstractPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_abstractPart(INST1, INST2) | (s_abstractPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hasAward ?CLASS)
          (instance hasAward Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hasAward ?INST1 ?INST2)
          (or (hasAward ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8286,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hasAward_m, CLASS) & s_instance(s_hasAward_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hasAward(INST1, INST2) | (s_hasAward(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn desires ?CLASS)
          (instance desires Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (desires ?INST1 ?INST2)
          (or (desires ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8287,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_desires_m, CLASS) & s_instance(s_desires_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_desires(INST1, INST2) | (s_desires(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Attribute) (instance ?INST1 Attribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn successorAttribute ?CLASS)
          (instance successorAttribute Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (successorAttribute ?INST1 ?INST2)
          (or (successorAttribute ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8288,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_successorAttribute_m, CLASS) & s_instance(s_successorAttribute_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_successorAttribute(INST1, INST2) | (s_successorAttribute(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 PostalPlace) (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn workAddress ?CLASS)
          (instance workAddress Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (workAddress ?INST1 ?INST2)
          (or (workAddress ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8289,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_workAddress_m, CLASS) & s_instance(s_workAddress_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_workAddress(INST1, INST2) | (s_workAddress(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
        (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn mobilePhoneNumber ?CLASS)
          (instance mobilePhoneNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (mobilePhoneNumber ?INST1 ?INST2)
          (or (mobilePhoneNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8290,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_mobilePhoneNumber_m, CLASS) & s_instance(s_mobilePhoneNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_mobilePhoneNumber(INST1, INST2) | (s_mobilePhoneNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agreement) (instance ?INST2 TimePoint)
        (instance ?INST1 Agreement) (instance ?INST1 TimePoint))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn agreementExpirationDate ?CLASS)
          (instance agreementExpirationDate Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (agreementExpirationDate ?INST1 ?INST2)
          (or (agreementExpirationDate ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8291,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agreement) & s_instance(INST2, s_TimePoint) & s_instance(INST1, s_Agreement) & s_instance(INST1, s_TimePoint)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_agreementExpirationDate_m, CLASS) & s_instance(s_agreementExpirationDate_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_agreementExpirationDate(INST1, INST2) | (s_agreementExpirationDate(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Collection) (instance ?INST1 Collection))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subCollection ?CLASS)
          (instance subCollection Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subCollection ?INST1 ?INST2)
          (or (subCollection ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8292,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Collection) & s_instance(INST1, s_Collection)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subCollection_m, CLASS) & s_instance(s_subCollection_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subCollection(INST1, INST2) | (s_subCollection(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (instance ?INST1 Organization))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn affiliatedOrganization ?CLASS)
          (instance affiliatedOrganization Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (affiliatedOrganization ?INST1 ?INST2)
          (or (affiliatedOrganization ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8293,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST1, s_Organization)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_affiliatedOrganization_m, CLASS) & s_instance(s_affiliatedOrganization_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_affiliatedOrganization(INST1, INST2) | (s_affiliatedOrganization(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Text) (instance ?INST1 Text))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn registeredItem ?CLASS)
          (instance registeredItem Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (registeredItem ?INST1 ?INST2)
          (or (registeredItem ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8294,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Text) & s_instance(INST1, s_Text)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_registeredItem_m, CLASS) & s_instance(s_registeredItem_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_registeredItem(INST1, INST2) | (s_registeredItem(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 GeometricFigure)
        (instance ?INST1 GeometricFigure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn geometricPart ?CLASS)
          (instance geometricPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (geometricPart ?INST1 ?INST2)
          (or (geometricPart ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8295,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_GeometricFigure) & s_instance(INST1, s_GeometricFigure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_geometricPart_m, CLASS) & s_instance(s_geometricPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_geometricPart(INST1, INST2) | (s_geometricPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agent) (instance ?INST2 Integer)
        (instance ?INST1 Agent) (instance ?INST1 Integer))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn fleetSize ?CLASS)
          (instance fleetSize Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (fleetSize ?INST1 ?INST2)
          (or (fleetSize ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8296,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST2, s_Integer) & s_instance(INST1, s_Agent) & s_instance(INST1, s_Integer)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_fleetSize_m, CLASS) & s_instance(s_fleetSize_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_fleetSize(INST1, INST2) | (s_fleetSize(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Physical) (instance ?INST2 Day)
        (instance ?INST1 Physical) (instance ?INST1 Day))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn date ?CLASS) (instance date Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (date ?INST1 ?INST2)
          (or (date ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8297,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_Day) & s_instance(INST1, s_Physical) & s_instance(INST1, s_Day)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_date_m, CLASS) & s_instance(s_date_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_date(INST1, INST2) | (s_date(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Animal) (instance ?INST1 Animal))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn birthplace ?CLASS)
          (instance birthplace Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (birthplace ?INST1 ?INST2)
          (or (birthplace ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8298,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Animal) & s_instance(INST1, s_Animal)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_birthplace_m, CLASS) & s_instance(s_birthplace_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_birthplace(INST1, INST2) | (s_birthplace(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PowerSource)
        (instance ?INST2 PhysicalQuantity)
        (instance ?INST1 PowerSource)
        (instance ?INST1 PhysicalQuantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn voltageMeasure ?CLASS)
          (instance voltageMeasure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (voltageMeasure ?INST1 ?INST2)
          (or (voltageMeasure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8299,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PowerSource) & s_instance(INST2, s_PhysicalQuantity) & s_instance(INST1, s_PowerSource) & s_instance(INST1, s_PhysicalQuantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_voltageMeasure_m, CLASS) & s_instance(s_voltageMeasure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_voltageMeasure(INST1, INST2) | (s_voltageMeasure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (subclass ?INST2 Substance) (instance ?INST2 CorpuscularObject)
        (subclass ?INST1 Substance)
        (instance ?INST1 CorpuscularObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn material ?CLASS)
          (instance material Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (material ?INST1 ?INST2)
          (or (material ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8300,axiom,! [CLASS] : (! [INST1,INST2] : (((s_subclass(INST2, s_Substance) & s_instance(INST2, s_CorpuscularObject) & s_subclass(INST1, s_Substance) & s_instance(INST1, s_CorpuscularObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_material_m, CLASS) & s_instance(s_material_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_material(INST1, INST2) | (s_material(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Object)
        (subclass ?INST1 Object) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn initialPart ?CLASS)
          (instance initialPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (initialPart ?INST1 ?INST2)
          (or (initialPart ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8301,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Object) & s_subclass(INST1, s_Object) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_initialPart_m, CLASS) & s_instance(s_initialPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_initialPart(INST1, INST2) | (s_initialPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn origin ?CLASS) (instance origin Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (origin ?INST1 ?INST2)
          (or (origin ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8302,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_origin_m, CLASS) & s_instance(s_origin_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_origin(INST1, INST2) | (s_origin(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Process)
        (subclass ?INST1 Process) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn precondition ?CLASS)
          (instance precondition Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (precondition ?INST1 ?INST2)
          (or (precondition ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8303,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_precondition_m, CLASS) & s_instance(s_precondition_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_precondition(INST1, INST2) | (s_precondition(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
        (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn irreflexiveOn ?CLASS)
          (instance irreflexiveOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (irreflexiveOn ?INST1 ?INST2)
          (or (irreflexiveOn ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8304,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_irreflexiveOn_m, CLASS) & s_instance(s_irreflexiveOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_irreflexiveOn(INST1, INST2) | (s_irreflexiveOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString)
        (instance ?INST1 SymbolicString))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn localLongName ?CLASS)
          (instance localLongName Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (localLongName ?INST1 ?INST2)
          (or (localLongName ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8305,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_SymbolicString)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_localLongName_m, CLASS) & s_instance(s_localLongName_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_localLongName(INST1, INST2) | (s_localLongName(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object) (instance ?INST2 DeviceStateAttribute)
        (instance ?INST1 Object)
        (instance ?INST1 DeviceStateAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn deviceState ?CLASS)
          (instance deviceState Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (deviceState ?INST1 ?INST2)
          (or (deviceState ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8306,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_DeviceStateAttribute) & s_instance(INST1, s_Object) & s_instance(INST1, s_DeviceStateAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_deviceState_m, CLASS) & s_instance(s_deviceState_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_deviceState(INST1, INST2) | (s_deviceState(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn legalRelation ?CLASS)
          (instance legalRelation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (legalRelation ?INST1 ?INST2)
          (or (legalRelation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8307,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_legalRelation_m, CLASS) & s_instance(s_legalRelation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_legalRelation(INST1, INST2) | (s_legalRelation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn cousin ?CLASS) (instance cousin Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (cousin ?INST1 ?INST2)
          (or (cousin ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8308,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_cousin_m, CLASS) & s_instance(s_cousin_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_cousin(INST1, INST2) | (s_cousin(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn targetInAttack ?CLASS)
          (instance targetInAttack Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (targetInAttack ?INST1 ?INST2)
          (or (targetInAttack ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8309,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_targetInAttack_m, CLASS) & s_instance(s_targetInAttack_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_targetInAttack(INST1, INST2) | (s_targetInAttack(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 TimePoint) (instance ?INST1 TimePoint))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn beforeOrEqual ?CLASS)
          (instance beforeOrEqual Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (beforeOrEqual ?INST1 ?INST2)
          (or (beforeOrEqual ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8310,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimePoint) & s_instance(INST1, s_TimePoint)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_beforeOrEqual_m, CLASS) & s_instance(s_beforeOrEqual_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_beforeOrEqual(INST1, INST2) | (s_beforeOrEqual(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Agreement)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Agreement))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn partyToAgreement ?CLASS)
          (instance partyToAgreement Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (partyToAgreement ?INST1 ?INST2)
          (or (partyToAgreement ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8311,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Agreement) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Agreement)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_partyToAgreement_m, CLASS) & s_instance(s_partyToAgreement_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_partyToAgreement(INST1, INST2) | (s_partyToAgreement(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn result ?CLASS) (instance result Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (result ?INST1 ?INST2)
          (or (result ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8312,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_result_m, CLASS) & s_instance(s_result_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_result(INST1, INST2) | (s_result(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Agent)
        (instance ?INST1 Process) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn experiencer ?CLASS)
          (instance experiencer Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (experiencer ?INST1 ?INST2)
          (or (experiencer ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8313,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_experiencer_m, CLASS) & s_instance(s_experiencer_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_experiencer(INST1, INST2) | (s_experiencer(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber)
        (instance ?INST1 TelecomNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telecomAreaCode ?CLASS)
          (instance telecomAreaCode Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telecomAreaCode ?INST1 ?INST2)
          (or (telecomAreaCode ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8314,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telecomAreaCode_m, CLASS) & s_instance(s_telecomAreaCode_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telecomAreaCode(INST1, INST2) | (s_telecomAreaCode(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Phrase) (instance ?INST2 Sentence)
        (instance ?INST1 Phrase) (instance ?INST1 Sentence))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn grammaticalRelation ?CLASS)
          (instance grammaticalRelation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (grammaticalRelation ?INST1 ?INST2)
          (or (grammaticalRelation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8315,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Phrase) & s_instance(INST2, s_Sentence) & s_instance(INST1, s_Phrase) & s_instance(INST1, s_Sentence)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_grammaticalRelation_m, CLASS) & s_instance(s_grammaticalRelation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_grammaticalRelation(INST1, INST2) | (s_grammaticalRelation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 OneDimensionalFigure)
        (instance ?INST1 OneDimensionalFigure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn parallel ?CLASS)
          (instance parallel Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (parallel ?INST1 ?INST2)
          (or (parallel ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8316,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_OneDimensionalFigure) & s_instance(INST1, s_OneDimensionalFigure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_parallel_m, CLASS) & s_instance(s_parallel_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_parallel(INST1, INST2) | (s_parallel(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TimeInterval) (instance ?INST2 TimeDuration)
        (instance ?INST1 TimeInterval) (instance ?INST1 TimeDuration))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn duration ?CLASS)
          (instance duration Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (duration ?INST1 ?INST2)
          (or (duration ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8317,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST2, s_TimeDuration) & s_instance(INST1, s_TimeInterval) & s_instance(INST1, s_TimeDuration)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_duration_m, CLASS) & s_instance(s_duration_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_duration(INST1, INST2) | (s_duration(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (instance ?INST1 Organization))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn ancestorOrganization ?CLASS)
          (instance ancestorOrganization Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (ancestorOrganization ?INST1 ?INST2)
          (or (ancestorOrganization ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8318,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST1, s_Organization)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_ancestorOrganization_m, CLASS) & s_instance(s_ancestorOrganization_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_ancestorOrganization(INST1, INST2) | (s_ancestorOrganization(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber) (instance ?INST2 Human)
        (instance ?INST1 TelecomNumber) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn homePhoneNumber ?CLASS)
          (instance homePhoneNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (homePhoneNumber ?INST1 ?INST2)
          (or (homePhoneNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8319,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Human) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_homePhoneNumber_m, CLASS) & s_instance(s_homePhoneNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_homePhoneNumber(INST1, INST2) | (s_homePhoneNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Formula) (instance ?INST2 Object)
        (instance ?INST1 Formula) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn describes ?CLASS)
          (instance describes Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (describes ?INST1 ?INST2)
          (or (describes ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8320,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_Object) & s_instance(INST1, s_Formula) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_describes_m, CLASS) & s_instance(s_describes_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_describes(INST1, INST2) | (s_describes(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (subclass ?INST2 Process)
        (instance ?INST1 Process) (subclass ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn prevents ?CLASS)
          (instance prevents Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (prevents ?INST1 ?INST2)
          (or (prevents ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8321,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_subclass(INST2, s_Process) & s_instance(INST1, s_Process) & s_subclass(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_prevents_m, CLASS) & s_instance(s_prevents_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_prevents(INST1, INST2) | (s_prevents(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Shipping) (instance ?INST2 Object)
        (instance ?INST1 Shipping) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn cargo ?CLASS) (instance cargo Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (cargo ?INST1 ?INST2)
          (or (cargo ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8322,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Shipping) & s_instance(INST2, s_Object) & s_instance(INST1, s_Shipping) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_cargo_m, CLASS) & s_instance(s_cargo_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_cargo(INST1, INST2) | (s_cargo(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Entity) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn equal ?CLASS) (instance equal Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (equal ?INST1 ?INST2)
          (or (equal ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8323,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_equal_m, CLASS) & s_instance(s_equal_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => ((INST1 = INST2) | ((INST2 = INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 RealNumber) (instance ?INST1 RealNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn approximateValue ?CLASS)
          (instance approximateValue Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (approximateValue ?INST1 ?INST2)
          (or (approximateValue ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8324,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_RealNumber) & s_instance(INST1, s_RealNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_approximateValue_m, CLASS) & s_instance(s_approximateValue_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_approximateValue(INST1, INST2) | (s_approximateValue(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn overlapsPartially ?CLASS)
          (instance overlapsPartially Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (overlapsPartially ?INST1 ?INST2)
          (or (overlapsPartially ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8325,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_overlapsPartially_m, CLASS) & s_instance(s_overlapsPartially_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_overlapsPartially(INST1, INST2) | (s_overlapsPartially(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Transportation) (instance ?INST2 Object)
        (instance ?INST1 Transportation) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn transported ?CLASS)
          (instance transported Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (transported ?INST1 ?INST2)
          (or (transported ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8326,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Transportation) & s_instance(INST2, s_Object) & s_instance(INST1, s_Transportation) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_transported_m, CLASS) & s_instance(s_transported_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_transported(INST1, INST2) | (s_transported(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ChemicalProcess) (instance ?INST2 Substance)
        (instance ?INST1 ChemicalProcess) (instance ?INST1 Substance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn reagent ?CLASS)
          (instance reagent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (reagent ?INST1 ?INST2)
          (or (reagent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8327,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ChemicalProcess) & s_instance(INST2, s_Substance) & s_instance(INST1, s_ChemicalProcess) & s_instance(INST1, s_Substance)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_reagent_m, CLASS) & s_instance(s_reagent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_reagent(INST1, INST2) | (s_reagent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Contest) (instance ?INST2 Agent)
        (instance ?INST1 Contest) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn contestParticipant ?CLASS)
          (instance contestParticipant Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (contestParticipant ?INST1 ?INST2)
          (or (contestParticipant ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8328,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Contest) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Contest) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_contestParticipant_m, CLASS) & s_instance(s_contestParticipant_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_contestParticipant(INST1, INST2) | (s_contestParticipant(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
        (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn reflexiveOn ?CLASS)
          (instance reflexiveOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (reflexiveOn ?INST1 ?INST2)
          (or (reflexiveOn ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8329,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_reflexiveOn_m, CLASS) & s_instance(s_reflexiveOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_reflexiveOn(INST1, INST2) | (s_reflexiveOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Confining) (instance ?INST2 Animal)
        (instance ?INST1 Confining) (instance ?INST1 Animal))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn detainee ?CLASS)
          (instance detainee Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (detainee ?INST1 ?INST2)
          (or (detainee ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8330,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Confining) & s_instance(INST2, s_Animal) & s_instance(INST1, s_Confining) & s_instance(INST1, s_Animal)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_detainee_m, CLASS) & s_instance(s_detainee_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_detainee(INST1, INST2) | (s_detainee(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TimePosition) (instance ?INST1 TimePosition))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn temporalPart ?CLASS)
          (instance temporalPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (temporalPart ?INST1 ?INST2)
          (or (temporalPart ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8331,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimePosition) & s_instance(INST1, s_TimePosition)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_temporalPart_m, CLASS) & s_instance(s_temporalPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_temporalPart(INST1, INST2) | (s_temporalPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn larger ?CLASS) (instance larger Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (larger ?INST1 ?INST2)
          (or (larger ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8332,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_larger_m, CLASS) & s_instance(s_larger_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_larger(INST1, INST2) | (s_larger(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Abstract) (instance ?INST2 Physical)
        (instance ?INST1 Abstract) (instance ?INST1 Physical))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn abstractCounterpart ?CLASS)
          (instance abstractCounterpart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (abstractCounterpart ?INST1 ?INST2)
          (or (abstractCounterpart ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8333,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Abstract) & s_instance(INST2, s_Physical) & s_instance(INST1, s_Abstract) & s_instance(INST1, s_Physical)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_abstractCounterpart_m, CLASS) & s_instance(s_abstractCounterpart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_abstractCounterpart(INST1, INST2) | (s_abstractCounterpart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace)
        (instance ?INST2 GeopoliticalArea)
        (instance ?INST1 PostalPlace)
        (instance ?INST1 GeopoliticalArea))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postCountry ?CLASS)
          (instance postCountry Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postCountry ?INST1 ?INST2)
          (or (postCountry ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8334,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_GeopoliticalArea) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_GeopoliticalArea)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postCountry_m, CLASS) & s_instance(s_postCountry_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postCountry(INST1, INST2) | (s_postCountry(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 Formula) (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn holdsObligation ?CLASS)
          (instance holdsObligation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (holdsObligation ?INST1 ?INST2)
          (or (holdsObligation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8335,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_Formula) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_holdsObligation_m, CLASS) & s_instance(s_holdsObligation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_holdsObligation(INST1, INST2) | (s_holdsObligation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn neighbor ?CLASS)
          (instance neighbor Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (neighbor ?INST1 ?INST2)
          (or (neighbor ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8336,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_neighbor_m, CLASS) & s_instance(s_neighbor_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_neighbor(INST1, INST2) | (s_neighbor(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity)
        (subclass ?INST2 ContentBearingPhysical)
        (subclass ?INST1 ContentBearingPhysical)
        (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subsumesContentClass ?CLASS)
          (instance subsumesContentClass Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subsumesContentClass ?INST1 ?INST2)
          (or (subsumesContentClass ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8337,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_ContentBearingPhysical) & s_subclass(INST1, s_ContentBearingPhysical) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subsumesContentClass_m, CLASS) & s_instance(s_subsumesContentClass_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subsumesContentClass(INST1, INST2) | (s_subsumesContentClass(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn carries ?CLASS)
          (instance carries Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (carries ?INST1 ?INST2)
          (or (carries ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8338,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_carries_m, CLASS) & s_instance(s_carries_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_carries(INST1, INST2) | (s_carries(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 LegalAction) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 LegalAction) (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn plaintiff ?CLASS)
          (instance plaintiff Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (plaintiff ?INST1 ?INST2)
          (or (plaintiff ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8339,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_LegalAction) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_LegalAction) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_plaintiff_m, CLASS) & s_instance(s_plaintiff_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_plaintiff(INST1, INST2) | (s_plaintiff(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 GraphPath) (instance ?INST2 PositiveInteger)
        (instance ?INST1 GraphPath) (instance ?INST1 PositiveInteger))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn pathLength ?CLASS)
          (instance pathLength Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (pathLength ?INST1 ?INST2)
          (or (pathLength ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8340,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_GraphPath) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_GraphPath) & s_instance(INST1, s_PositiveInteger)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_pathLength_m, CLASS) & s_instance(s_pathLength_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_pathLength(INST1, INST2) | (s_pathLength(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn copy ?CLASS) (instance copy Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (copy ?INST1 ?INST2)
          (or (copy ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8341,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_copy_m, CLASS) & s_instance(s_copy_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_copy(INST1, INST2) | (s_copy(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PhysicalSystem)
        (instance ?INST1 PhysicalSystem))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subSystem ?CLASS)
          (instance subSystem Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subSystem ?INST1 ?INST2)
          (or (subSystem ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8342,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PhysicalSystem) & s_instance(INST1, s_PhysicalSystem)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subSystem_m, CLASS) & s_instance(s_subSystem_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subSystem(INST1, INST2) | (s_subSystem(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subProcess ?CLASS)
          (instance subProcess Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subProcess ?INST1 ?INST2)
          (or (subProcess ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8343,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subProcess_m, CLASS) & s_instance(s_subProcess_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subProcess(INST1, INST2) | (s_subProcess(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Physical) (instance ?INST2 TimeInterval)
        (instance ?INST1 Physical) (instance ?INST1 TimeInterval))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn anniversary ?CLASS)
          (instance anniversary Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (anniversary ?INST1 ?INST2)
          (or (anniversary ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8344,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_Physical) & s_instance(INST1, s_TimeInterval)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_anniversary_m, CLASS) & s_instance(s_anniversary_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_anniversary(INST1, INST2) | (s_anniversary(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString)
        (instance ?INST1 SymbolicString))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn localShortName ?CLASS)
          (instance localShortName Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (localShortName ?INST1 ?INST2)
          (or (localShortName ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8345,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_SymbolicString)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_localShortName_m, CLASS) & s_instance(s_localShortName_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_localShortName(INST1, INST2) | (s_localShortName(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn parent ?CLASS) (instance parent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (parent ?INST1 ?INST2)
          (or (parent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8346,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_parent_m, CLASS) & s_instance(s_parent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_parent(INST1, INST2) | (s_parent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Language) (instance ?INST1 Language))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn expressedInLanguage ?CLASS)
          (instance expressedInLanguage Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (expressedInLanguage ?INST1 ?INST2)
          (or (expressedInLanguage ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8347,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Language) & s_instance(INST1, s_Language)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_expressedInLanguage_m, CLASS) & s_instance(s_expressedInLanguage_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_expressedInLanguage(INST1, INST2) | (s_expressedInLanguage(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 MotionPicture)
        (instance ?INST1 Human) (instance ?INST1 MotionPicture))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn directed ?CLASS)
          (instance directed Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (directed ?INST1 ?INST2)
          (or (directed ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8348,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_MotionPicture) & s_instance(INST1, s_Human) & s_instance(INST1, s_MotionPicture)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_directed_m, CLASS) & s_instance(s_directed_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_directed(INST1, INST2) | (s_directed(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Woman) (instance ?INST1 Woman))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn aunt ?CLASS) (instance aunt Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (aunt ?INST1 ?INST2)
          (or (aunt ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8349,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Woman) & s_instance(INST1, s_Woman)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_aunt_m, CLASS) & s_instance(s_aunt_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_aunt(INST1, INST2) | (s_aunt(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 Agent)
        (instance ?INST1 SymbolicString) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn emailAddress ?CLASS)
          (instance emailAddress Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (emailAddress ?INST1 ?INST2)
          (or (emailAddress ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8350,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Agent) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_emailAddress_m, CLASS) & s_instance(s_emailAddress_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_emailAddress(INST1, INST2) | (s_emailAddress(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn involvedInEvent ?CLASS)
          (instance involvedInEvent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (involvedInEvent ?INST1 ?INST2)
          (or (involvedInEvent ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8351,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_involvedInEvent_m, CLASS) & s_instance(s_involvedInEvent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_involvedInEvent(INST1, INST2) | (s_involvedInEvent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 PostalPlace)
        (instance ?INST1 SymbolicString) (instance ?INST1 PostalPlace))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn unitNumber ?CLASS)
          (instance unitNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (unitNumber ?INST1 ?INST2)
          (or (unitNumber ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8352,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_PostalPlace)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_unitNumber_m, CLASS) & s_instance(s_unitNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_unitNumber(INST1, INST2) | (s_unitNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object)
        (instance ?INST2 UnitOfAtmosphericPressure)
        (instance ?INST1 Object)
        (instance ?INST1 UnitOfAtmosphericPressure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn barometricPressure ?CLASS)
          (instance barometricPressure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (barometricPressure ?INST1 ?INST2)
          (or (barometricPressure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8353,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_UnitOfAtmosphericPressure) & s_instance(INST1, s_Object) & s_instance(INST1, s_UnitOfAtmosphericPressure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_barometricPressure_m, CLASS) & s_instance(s_barometricPressure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_barometricPressure(INST1, INST2) | (s_barometricPressure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn grandparent ?CLASS)
          (instance grandparent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (grandparent ?INST1 ?INST2)
          (or (grandparent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8354,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_grandparent_m, CLASS) & s_instance(s_grandparent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_grandparent(INST1, INST2) | (s_grandparent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Proposition) (instance ?INST1 Proposition))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subProposition ?CLASS)
          (instance subProposition Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subProposition ?INST1 ?INST2)
          (or (subProposition ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8355,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Proposition) & s_instance(INST1, s_Proposition)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subProposition_m, CLASS) & s_instance(s_subProposition_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subProposition(INST1, INST2) | (s_subProposition(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ChangeOfControl) (instance ?INST2 Agent)
        (instance ?INST1 ChangeOfControl) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn losesControl ?CLASS)
          (instance losesControl Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (losesControl ?INST1 ?INST2)
          (or (losesControl ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8356,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ChangeOfControl) & s_instance(INST2, s_Agent) & s_instance(INST1, s_ChangeOfControl) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_losesControl_m, CLASS) & s_instance(s_losesControl_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_losesControl(INST1, INST2) | (s_losesControl(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn uses ?CLASS) (instance uses Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (uses ?INST1 ?INST2)
          (or (uses ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8357,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_uses_m, CLASS) & s_instance(s_uses_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_uses(INST1, INST2) | (s_uses(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 PostalPlace)
        (instance ?INST1 SymbolicString) (instance ?INST1 PostalPlace))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postPostOfficeBox ?CLASS)
          (instance postPostOfficeBox Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postPostOfficeBox ?INST1 ?INST2)
          (or (postPostOfficeBox ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8358,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_PostalPlace)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postPostOfficeBox_m, CLASS) & s_instance(s_postPostOfficeBox_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postPostOfficeBox(INST1, INST2) | (s_postPostOfficeBox(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Translocation) (instance ?INST2 Object)
        (instance ?INST1 Translocation) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn changesLocation ?CLASS)
          (instance changesLocation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (changesLocation ?INST1 ?INST2)
          (or (changesLocation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8359,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Translocation) & s_instance(INST2, s_Object) & s_instance(INST1, s_Translocation) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_changesLocation_m, CLASS) & s_instance(s_changesLocation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_changesLocation(INST1, INST2) | (s_changesLocation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Function) (subclass ?INST2 SetOrClass)
        (instance ?INST1 Function) (subclass ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn rangeSubclass ?CLASS)
          (instance rangeSubclass Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (rangeSubclass ?INST1 ?INST2)
          (or (rangeSubclass ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8360,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_subclass(INST2, s_SetOrClass) & s_instance(INST1, s_Function) & s_subclass(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_rangeSubclass_m, CLASS) & s_instance(s_rangeSubclass_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_rangeSubclass(INST1, INST2) | (s_rangeSubclass(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Entity) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn refers ?CLASS) (instance refers Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (refers ?INST1 ?INST2)
          (or (refers ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8361,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_refers_m, CLASS) & s_instance(s_refers_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_refers(INST1, INST2) | (s_refers(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn parasite ?CLASS)
          (instance parasite Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (parasite ?INST1 ?INST2)
          (or (parasite ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8362,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_parasite_m, CLASS) & s_instance(s_parasite_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_parasite(INST1, INST2) | (s_parasite(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 GraphArc) (instance ?INST2 Quantity)
        (instance ?INST1 GraphArc) (instance ?INST1 Quantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn arcWeight ?CLASS)
          (instance arcWeight Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (arcWeight ?INST1 ?INST2)
          (or (arcWeight ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8363,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_GraphArc) & s_instance(INST2, s_Quantity) & s_instance(INST1, s_GraphArc) & s_instance(INST1, s_Quantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_arcWeight_m, CLASS) & s_instance(s_arcWeight_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_arcWeight(INST1, INST2) | (s_arcWeight(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Demonstrating) (instance ?INST2 Human)
        (instance ?INST1 Demonstrating) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn attends ?CLASS)
          (instance attends Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (attends ?INST1 ?INST2)
          (or (attends ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8364,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Demonstrating) & s_instance(INST2, s_Human) & s_instance(INST1, s_Demonstrating) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_attends_m, CLASS) & s_instance(s_attends_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_attends(INST1, INST2) | (s_attends(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SelfConnectedObject)
        (instance ?INST1 SelfConnectedObject))
   (=> (instance ?CLASS SetOrClass)
    (=> (and (trichotomizingOn side ?CLASS) (instance side Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (side ?INST1 ?INST2)
          (or (side ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8365,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_side_m, CLASS) & s_instance(s_side_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_side(INST1, INST2) | (s_side(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 FinancialTransaction)
        (instance ?INST2 CurrencyMeasure)
        (instance ?INST1 FinancialTransaction)
        (instance ?INST1 CurrencyMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn transactionAmount ?CLASS)
          (instance transactionAmount Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (transactionAmount ?INST1 ?INST2)
          (or (transactionAmount ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8366,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_FinancialTransaction) & s_instance(INST2, s_CurrencyMeasure) & s_instance(INST1, s_FinancialTransaction) & s_instance(INST1, s_CurrencyMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_transactionAmount_m, CLASS) & s_instance(s_transactionAmount_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_transactionAmount(INST1, INST2) | (s_transactionAmount(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (subclass ?INST2 Process) (instance ?INST2 TimeDuration)
        (subclass ?INST1 Process) (instance ?INST1 TimeDuration))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn frequency ?CLASS)
          (instance frequency Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (frequency ?INST1 ?INST2)
          (or (frequency ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8367,axiom,! [CLASS] : (! [INST1,INST2] : (((s_subclass(INST2, s_Process) & s_instance(INST2, s_TimeDuration) & s_subclass(INST1, s_Process) & s_instance(INST1, s_TimeDuration)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_frequency_m, CLASS) & s_instance(s_frequency_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_frequency(INST1, INST2) | (s_frequency(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 CareOrganization)
        (instance ?INST1 Human) (instance ?INST1 CareOrganization))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn medicalPatient ?CLASS)
          (instance medicalPatient Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (medicalPatient ?INST1 ?INST2)
          (or (medicalPatient ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8368,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_CareOrganization) & s_instance(INST1, s_Human) & s_instance(INST1, s_CareOrganization)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_medicalPatient_m, CLASS) & s_instance(s_medicalPatient_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_medicalPatient(INST1, INST2) | (s_medicalPatient(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 List) (instance ?INST2 RealNumber)
        (instance ?INST1 List) (instance ?INST1 RealNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn average ?CLASS)
          (instance average Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (average ?INST1 ?INST2)
          (or (average ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8369,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST2, s_RealNumber) & s_instance(INST1, s_List) & s_instance(INST1, s_RealNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_average_m, CLASS) & s_instance(s_average_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_average(INST1, INST2) | (s_average(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Function) (instance ?INST2 SetOrClass)
        (instance ?INST1 Function) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn closedOn ?CLASS)
          (instance closedOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (closedOn ?INST1 ?INST2)
          (or (closedOn ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8370,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_Function) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_closedOn_m, CLASS) & s_instance(s_closedOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_closedOn(INST1, INST2) | (s_closedOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PermanentResidence) (instance ?INST2 Human)
        (instance ?INST1 PermanentResidence) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn homeAddress ?CLASS)
          (instance homeAddress Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (homeAddress ?INST1 ?INST2)
          (or (homeAddress ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8371,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PermanentResidence) & s_instance(INST2, s_Human) & s_instance(INST1, s_PermanentResidence) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_homeAddress_m, CLASS) & s_instance(s_homeAddress_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_homeAddress(INST1, INST2) | (s_homeAddress(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Solution) (instance ?INST2 RealNumber)
        (instance ?INST1 Solution) (instance ?INST1 RealNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn potentialOfHydrogen ?CLASS)
          (instance potentialOfHydrogen Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (potentialOfHydrogen ?INST1 ?INST2)
          (or (potentialOfHydrogen ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8372,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Solution) & s_instance(INST2, s_RealNumber) & s_instance(INST1, s_Solution) & s_instance(INST1, s_RealNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_potentialOfHydrogen_m, CLASS) & s_instance(s_potentialOfHydrogen_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_potentialOfHydrogen(INST1, INST2) | (s_potentialOfHydrogen(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Man) (instance ?INST1 Man))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn grandfather ?CLASS)
          (instance grandfather Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (grandfather ?INST1 ?INST2)
          (or (grandfather ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8373,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Man) & s_instance(INST1, s_Man)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_grandfather_m, CLASS) & s_instance(s_grandfather_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_grandfather(INST1, INST2) | (s_grandfather(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Man) (instance ?INST1 Man))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn stepfather ?CLASS)
          (instance stepfather Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (stepfather ?INST1 ?INST2)
          (or (stepfather ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8374,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Man) & s_instance(INST1, s_Man)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_stepfather_m, CLASS) & s_instance(s_stepfather_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_stepfather(INST1, INST2) | (s_stepfather(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (instance ?INST2 Integer)
        (instance ?INST1 Organization) (instance ?INST1 Integer))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn yearOfFounding ?CLASS)
          (instance yearOfFounding Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (yearOfFounding ?INST1 ?INST2)
          (or (yearOfFounding ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8375,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST2, s_Integer) & s_instance(INST1, s_Organization) & s_instance(INST1, s_Integer)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_yearOfFounding_m, CLASS) & s_instance(s_yearOfFounding_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_yearOfFounding(INST1, INST2) | (s_yearOfFounding(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Attribute) (instance ?INST1 Attribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn successorAttributeClosure ?CLASS)
          (instance successorAttributeClosure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (successorAttributeClosure ?INST1 ?INST2)
          (or (successorAttributeClosure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8376,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_successorAttributeClosure_m, CLASS) & s_instance(s_successorAttributeClosure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_successorAttributeClosure(INST1, INST2) | (s_successorAttributeClosure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 PositionalAttribute)
        (instance ?INST1 Process)
        (instance ?INST1 PositionalAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn direction ?CLASS)
          (instance direction Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (direction ?INST1 ?INST2)
          (or (direction ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8377,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_PositionalAttribute) & s_instance(INST1, s_Process) & s_instance(INST1, s_PositionalAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_direction_m, CLASS) & s_instance(s_direction_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_direction(INST1, INST2) | (s_direction(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Physical) (instance ?INST2 CurrencyMeasure)
        (instance ?INST1 Physical) (instance ?INST1 CurrencyMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn monetaryValue ?CLASS)
          (instance monetaryValue Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (monetaryValue ?INST1 ?INST2)
          (or (monetaryValue ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8378,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_instance(INST2, s_CurrencyMeasure) & s_instance(INST1, s_Physical) & s_instance(INST1, s_CurrencyMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_monetaryValue_m, CLASS) & s_instance(s_monetaryValue_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_monetaryValue(INST1, INST2) | (s_monetaryValue(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn sibling ?CLASS)
          (instance sibling Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (sibling ?INST1 ?INST2)
          (or (sibling ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8379,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_sibling_m, CLASS) & s_instance(s_sibling_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_sibling(INST1, INST2) | (s_sibling(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalAddressText)
        (instance ?INST2 PostalPlace)
        (instance ?INST1 PostalAddressText)
        (instance ?INST1 PostalPlace))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postAddressText ?CLASS)
          (instance postAddressText Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postAddressText ?INST1 ?INST2)
          (or (postAddressText ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8380,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalAddressText) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_PostalAddressText) & s_instance(INST1, s_PostalPlace)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postAddressText_m, CLASS) & s_instance(s_postAddressText_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postAddressText(INST1, INST2) | (s_postAddressText(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn wants ?CLASS) (instance wants Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (wants ?INST1 ?INST2)
          (or (wants ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8381,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_wants_m, CLASS) & s_instance(s_wants_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_wants(INST1, INST2) | (s_wants(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString)
        (instance ?INST1 SymbolicString))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn externalImage ?CLASS)
          (instance externalImage Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (externalImage ?INST1 ?INST2)
          (or (externalImage ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8382,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_SymbolicString)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_externalImage_m, CLASS) & s_instance(s_externalImage_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_externalImage(INST1, INST2) | (s_externalImage(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Circle) (instance ?INST2 LengthMeasure)
        (instance ?INST1 Circle) (instance ?INST1 LengthMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn radius ?CLASS) (instance radius Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (radius ?INST1 ?INST2)
          (or (radius ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8383,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Circle) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_Circle) & s_instance(INST1, s_LengthMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_radius_m, CLASS) & s_instance(s_radius_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_radius(INST1, INST2) | (s_radius(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn disjoint ?CLASS)
          (instance disjoint Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (disjoint ?INST1 ?INST2)
          (or (disjoint ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8384,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_disjoint_m, CLASS) & s_instance(s_disjoint_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_disjoint(INST1, INST2) | (s_disjoint(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (subclass ?INST2 ElementalSubstance)
        (instance ?INST2 PositiveInteger)
        (subclass ?INST1 ElementalSubstance)
        (instance ?INST1 PositiveInteger))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn atomicNumber ?CLASS)
          (instance atomicNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (atomicNumber ?INST1 ?INST2)
          (or (atomicNumber ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8385,axiom,! [CLASS] : (! [INST1,INST2] : (((s_subclass(INST2, s_ElementalSubstance) & s_instance(INST2, s_PositiveInteger) & s_subclass(INST1, s_ElementalSubstance) & s_instance(INST1, s_PositiveInteger)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_atomicNumber_m, CLASS) & s_instance(s_atomicNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_atomicNumber(INST1, INST2) | (s_atomicNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn independentProbability ?CLASS)
          (instance independentProbability Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (independentProbability ?INST1 ?INST2)
          (or (independentProbability ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8386,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_independentProbability_m, CLASS) & s_instance(s_independentProbability_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_independentProbability(INST1, INST2) | (s_independentProbability(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn decreasesLikelihood ?CLASS)
          (instance decreasesLikelihood Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (decreasesLikelihood ?INST1 ?INST2)
          (or (decreasesLikelihood ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8387,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_decreasesLikelihood_m, CLASS) & s_instance(s_decreasesLikelihood_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_decreasesLikelihood(INST1, INST2) | (s_decreasesLikelihood(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString)
        (instance ?INST1 SymbolicString))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subString ?CLASS)
          (instance subString Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subString ?INST1 ?INST2)
          (or (subString ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8388,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_SymbolicString)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subString_m, CLASS) & s_instance(s_subString_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subString(INST1, INST2) | (s_subString(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn covers ?CLASS) (instance covers Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (covers ?INST1 ?INST2)
          (or (covers ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8389,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_covers_m, CLASS) & s_instance(s_covers_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_covers(INST1, INST2) | (s_covers(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn stranger ?CLASS)
          (instance stranger Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (stranger ?INST1 ?INST2)
          (or (stranger ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8390,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_stranger_m, CLASS) & s_instance(s_stranger_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_stranger(INST1, INST2) | (s_stranger(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn patientMedical ?CLASS)
          (instance patientMedical Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (patientMedical ?INST1 ?INST2)
          (or (patientMedical ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8391,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_patientMedical_m, CLASS) & s_instance(s_patientMedical_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_patientMedical(INST1, INST2) | (s_patientMedical(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 LegalAction) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 LegalAction) (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn defendant ?CLASS)
          (instance defendant Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (defendant ?INST1 ?INST2)
          (or (defendant ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8392,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_LegalAction) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_LegalAction) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_defendant_m, CLASS) & s_instance(s_defendant_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_defendant(INST1, INST2) | (s_defendant(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn instance ?CLASS)
          (instance instance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (instance ?INST1 ?INST2)
          (or (instance ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8393,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_instance_m, CLASS) & s_instance(s_instance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_instance(INST1, INST2) | (s_instance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Proposition) (instance ?INST1 Proposition))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn consistent ?CLASS)
          (instance consistent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (consistent ?INST1 ?INST2)
          (or (consistent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8394,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Proposition) & s_instance(INST1, s_Proposition)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_consistent_m, CLASS) & s_instance(s_consistent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_consistent(INST1, INST2) | (s_consistent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Certificate) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 Certificate) (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn issuedBy ?CLASS)
          (instance issuedBy Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (issuedBy ?INST1 ?INST2)
          (or (issuedBy ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8395,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Certificate) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_Certificate) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_issuedBy_m, CLASS) & s_instance(s_issuedBy_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_issuedBy(INST1, INST2) | (s_issuedBy(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (instance ?INST2 BeliefGroup)
        (instance ?INST1 Organization) (instance ?INST1 BeliefGroup))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn religiousAffiliationOfOrganization ?CLASS)
          (instance religiousAffiliationOfOrganization Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (religiousAffiliationOfOrganization ?INST1 ?INST2)
          (or (religiousAffiliationOfOrganization ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8396,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST2, s_BeliefGroup) & s_instance(INST1, s_Organization) & s_instance(INST1, s_BeliefGroup)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_religiousAffiliationOfOrganization_m, CLASS) & s_instance(s_religiousAffiliationOfOrganization_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_religiousAffiliationOfOrganization(INST1, INST2) | (s_religiousAffiliationOfOrganization(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 Human)
        (instance ?INST1 SymbolicString) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn familyName ?CLASS)
          (instance familyName Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (familyName ?INST1 ?INST2)
          (or (familyName ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8397,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Human) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_familyName_m, CLASS) & s_instance(s_familyName_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_familyName(INST1, INST2) | (s_familyName(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ConstantQuantity) (instance ?INST2 Transitway)
        (instance ?INST1 ConstantQuantity)
        (instance ?INST1 Transitway))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn distanceOnPath ?CLASS)
          (instance distanceOnPath Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (distanceOnPath ?INST1 ?INST2)
          (or (distanceOnPath ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8398,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ConstantQuantity) & s_instance(INST2, s_Transitway) & s_instance(INST1, s_ConstantQuantity) & s_instance(INST1, s_Transitway)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_distanceOnPath_m, CLASS) & s_instance(s_distanceOnPath_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_distanceOnPath(INST1, INST2) | (s_distanceOnPath(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn legalGuardian ?CLASS)
          (instance legalGuardian Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (legalGuardian ?INST1 ?INST2)
          (or (legalGuardian ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8399,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_legalGuardian_m, CLASS) & s_instance(s_legalGuardian_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_legalGuardian(INST1, INST2) | (s_legalGuardian(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Integer) (instance ?INST1 Integer))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn multiplicativeFactor ?CLASS)
          (instance multiplicativeFactor Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (multiplicativeFactor ?INST1 ?INST2)
          (or (multiplicativeFactor ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8400,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Integer) & s_instance(INST1, s_Integer)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_multiplicativeFactor_m, CLASS) & s_instance(s_multiplicativeFactor_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_multiplicativeFactor(INST1, INST2) | (s_multiplicativeFactor(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 StationaryArtifact)
        (instance ?INST2 PositiveInteger)
        (instance ?INST1 StationaryArtifact)
        (instance ?INST1 PositiveInteger))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn humanCapacity ?CLASS)
          (instance humanCapacity Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (humanCapacity ?INST1 ?INST2)
          (or (humanCapacity ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8401,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_StationaryArtifact) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_StationaryArtifact) & s_instance(INST1, s_PositiveInteger)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_humanCapacity_m, CLASS) & s_instance(s_humanCapacity_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_humanCapacity(INST1, INST2) | (s_humanCapacity(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 GeometricPoint)
        (instance ?INST1 GeometricPoint))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn pointOfFigure ?CLASS)
          (instance pointOfFigure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (pointOfFigure ?INST1 ?INST2)
          (or (pointOfFigure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8402,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_GeometricPoint) & s_instance(INST1, s_GeometricPoint)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_pointOfFigure_m, CLASS) & s_instance(s_pointOfFigure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_pointOfFigure(INST1, INST2) | (s_pointOfFigure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber) (instance ?INST2 Agent)
        (instance ?INST1 TelecomNumber) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn workPhoneNumber ?CLASS)
          (instance workPhoneNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (workPhoneNumber ?INST1 ?INST2)
          (or (workPhoneNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8403,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_Agent) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_workPhoneNumber_m, CLASS) & s_instance(s_workPhoneNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_workPhoneNumber(INST1, INST2) | (s_workPhoneNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn inScopeOfInterest ?CLASS)
          (instance inScopeOfInterest Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (inScopeOfInterest ?INST1 ?INST2)
          (or (inScopeOfInterest ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8404,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_inScopeOfInterest_m, CLASS) & s_instance(s_inScopeOfInterest_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_inScopeOfInterest(INST1, INST2) | (s_inScopeOfInterest(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agreement) (instance ?INST2 TimePoint)
        (instance ?INST1 Agreement) (instance ?INST1 TimePoint))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn agreementEffectiveDate ?CLASS)
          (instance agreementEffectiveDate Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (agreementEffectiveDate ?INST1 ?INST2)
          (or (agreementEffectiveDate ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8405,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agreement) & s_instance(INST2, s_TimePoint) & s_instance(INST1, s_Agreement) & s_instance(INST1, s_TimePoint)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_agreementEffectiveDate_m, CLASS) & s_instance(s_agreementEffectiveDate_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_agreementEffectiveDate(INST1, INST2) | (s_agreementEffectiveDate(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Graph) (instance ?INST1 Graph))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subGraph ?CLASS)
          (instance subGraph Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subGraph ?INST1 ?INST2)
          (or (subGraph ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8406,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Graph) & s_instance(INST1, s_Graph)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subGraph_m, CLASS) & s_instance(s_subGraph_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subGraph(INST1, INST2) | (s_subGraph(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TwoDimensionalAngle)
        (instance ?INST1 TwoDimensionalAngle))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn angleOfFigure ?CLASS)
          (instance angleOfFigure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (angleOfFigure ?INST1 ?INST2)
          (or (angleOfFigure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8407,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TwoDimensionalAngle) & s_instance(INST1, s_TwoDimensionalAngle)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_angleOfFigure_m, CLASS) & s_instance(s_angleOfFigure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_angleOfFigure(INST1, INST2) | (s_angleOfFigure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn older ?CLASS) (instance older Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (older ?INST1 ?INST2)
          (or (older ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8408,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_older_m, CLASS) & s_instance(s_older_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_older(INST1, INST2) | (s_older(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Quantity) (instance ?INST1 Quantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn greaterThan ?CLASS)
          (instance greaterThan Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (greaterThan ?INST1 ?INST2)
          (or (greaterThan ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8409,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_greaterThan_m, CLASS) & s_instance(s_greaterThan_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (greater(INST1, INST2) | (greater(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn inhabits ?CLASS)
          (instance inhabits Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (inhabits ?INST1 ?INST2)
          (or (inhabits ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8410,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_inhabits_m, CLASS) & s_instance(s_inhabits_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_inhabits(INST1, INST2) | (s_inhabits(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object) (instance ?INST2 TemperatureMeasure)
        (instance ?INST1 Object) (instance ?INST1 TemperatureMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn airTemperature ?CLASS)
          (instance airTemperature Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (airTemperature ?INST1 ?INST2)
          (or (airTemperature ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8411,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_TemperatureMeasure) & s_instance(INST1, s_Object) & s_instance(INST1, s_TemperatureMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_airTemperature_m, CLASS) & s_instance(s_airTemperature_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_airTemperature(INST1, INST2) | (s_airTemperature(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn possesses ?CLASS)
          (instance possesses Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (possesses ?INST1 ?INST2)
          (or (possesses ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8412,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_possesses_m, CLASS) & s_instance(s_possesses_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_possesses(INST1, INST2) | (s_possesses(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Quantity) (instance ?INST1 Quantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn greaterThanOrEqualTo ?CLASS)
          (instance greaterThanOrEqualTo Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (greaterThanOrEqualTo ?INST1 ?INST2)
          (or (greaterThanOrEqualTo ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8413,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_greaterThanOrEqualTo_m, CLASS) & s_instance(s_greaterThanOrEqualTo_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_greaterThanOrEqualTo(INST1, INST2) | (s_greaterThanOrEqualTo(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 Organization)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn employs ?CLASS)
          (instance employs Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (employs ?INST1 ?INST2)
          (or (employs ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8414,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_Organization) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_employs_m, CLASS) & s_instance(s_employs_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_employs(INST1, INST2) | (s_employs(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ContentBearingPhysical)
        (instance ?INST1 ContentBearingPhysical))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subsumesContentInstance ?CLASS)
          (instance subsumesContentInstance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subsumesContentInstance ?INST1 ?INST2)
          (or (subsumesContentInstance ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8415,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST1, s_ContentBearingPhysical)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subsumesContentInstance_m, CLASS) & s_instance(s_subsumesContentInstance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subsumesContentInstance(INST1, INST2) | (s_subsumesContentInstance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SentientAgent) (instance ?INST2 Language)
        (instance ?INST1 SentientAgent) (instance ?INST1 Language))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn speaksLanguage ?CLASS)
          (instance speaksLanguage Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (speaksLanguage ?INST1 ?INST2)
          (or (speaksLanguage ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8416,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SentientAgent) & s_instance(INST2, s_Language) & s_instance(INST1, s_SentientAgent) & s_instance(INST1, s_Language)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_speaksLanguage_m, CLASS) & s_instance(s_speaksLanguage_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_speaksLanguage(INST1, INST2) | (s_speaksLanguage(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SelfConnectedObject)
        (instance ?INST1 SelfConnectedObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn bottom ?CLASS) (instance bottom Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (bottom ?INST1 ?INST2)
          (or (bottom ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8417,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SelfConnectedObject) & s_instance(INST1, s_SelfConnectedObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_bottom_m, CLASS) & s_instance(s_bottom_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_bottom(INST1, INST2) | (s_bottom(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 PostcodeArea)
        (instance ?INST1 PostalPlace) (instance ?INST1 PostcodeArea))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postPostcodeArea ?CLASS)
          (instance postPostcodeArea Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postPostcodeArea ?INST1 ?INST2)
          (or (postPostcodeArea ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8418,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_PostcodeArea) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_PostcodeArea)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postPostcodeArea_m, CLASS) & s_instance(s_postPostcodeArea_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postPostcodeArea(INST1, INST2) | (s_postPostcodeArea(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 MilitaryUnit) (instance ?INST1 MilitaryUnit))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hostileForces ?CLASS)
          (instance hostileForces Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hostileForces ?INST1 ?INST2)
          (or (hostileForces ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8419,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_MilitaryUnit) & s_instance(INST1, s_MilitaryUnit)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hostileForces_m, CLASS) & s_instance(s_hostileForces_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hostileForces(INST1, INST2) | (s_hostileForces(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Radiating) (instance ?INST2 LengthMeasure)
        (instance ?INST1 Radiating) (instance ?INST1 LengthMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn wavelength ?CLASS)
          (instance wavelength Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (wavelength ?INST1 ?INST2)
          (or (wavelength ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8420,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Radiating) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_Radiating) & s_instance(INST1, s_LengthMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_wavelength_m, CLASS) & s_instance(s_wavelength_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_wavelength(INST1, INST2) | (s_wavelength(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Object) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn partlyLocated ?CLASS)
          (instance partlyLocated Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (partlyLocated ?INST1 ?INST2)
          (or (partlyLocated ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8421,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_partlyLocated_m, CLASS) & s_instance(s_partlyLocated_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_partlyLocated(INST1, INST2) | (s_partlyLocated(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ContentBearingObject)
        (instance ?INST2 DataStorageDevice)
        (instance ?INST1 ContentBearingObject)
        (instance ?INST1 DataStorageDevice))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn stored ?CLASS) (instance stored Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (stored ?INST1 ?INST2)
          (or (stored ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8422,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingObject) & s_instance(INST2, s_DataStorageDevice) & s_instance(INST1, s_ContentBearingObject) & s_instance(INST1, s_DataStorageDevice)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_stored_m, CLASS) & s_instance(s_stored_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_stored(INST1, INST2) | (s_stored(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object) (instance ?INST2 PhysicalQuantity)
        (instance ?INST1 Object) (instance ?INST1 PhysicalQuantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn measure ?CLASS)
          (instance measure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (measure ?INST1 ?INST2)
          (or (measure ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8423,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_PhysicalQuantity) & s_instance(INST1, s_Object) & s_instance(INST1, s_PhysicalQuantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_measure_m, CLASS) & s_instance(s_measure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_measure(INST1, INST2) | (s_measure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Circle) (instance ?INST2 LengthMeasure)
        (instance ?INST1 Circle) (instance ?INST1 LengthMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn diameter ?CLASS)
          (instance diameter Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (diameter ?INST1 ?INST2)
          (or (diameter ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8424,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Circle) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_Circle) & s_instance(INST1, s_LengthMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_diameter_m, CLASS) & s_instance(s_diameter_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_diameter(INST1, INST2) | (s_diameter(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)
        (instance ?INST1 Formula) (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn holdsRight ?CLASS)
          (instance holdsRight Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (holdsRight ?INST1 ?INST2)
          (or (holdsRight ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8425,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_Formula) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_holdsRight_m, CLASS) & s_instance(s_holdsRight_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_holdsRight(INST1, INST2) | (s_holdsRight(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber)
        (instance ?INST1 TelecomNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telecomCode2 ?CLASS)
          (instance telecomCode2 Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telecomCode2 ?INST1 ?INST2)
          (or (telecomCode2 ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8426,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telecomCode2_m, CLASS) & s_instance(s_telecomCode2_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telecomCode2(INST1, INST2) | (s_telecomCode2(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TimePosition) (instance ?INST2 Formula)
        (instance ?INST1 TimePosition) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn holdsDuring ?CLASS)
          (instance holdsDuring Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (holdsDuring ?INST1 ?INST2)
          (or (holdsDuring ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8427,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimePosition) & s_instance(INST2, s_Formula) & s_instance(INST1, s_TimePosition) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_holdsDuring_m, CLASS) & s_instance(s_holdsDuring_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_holdsDuring(INST1, INST2) | (s_holdsDuring(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn causesProposition ?CLASS)
          (instance causesProposition Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (causesProposition ?INST1 ?INST2)
          (or (causesProposition ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8428,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_causesProposition_m, CLASS) & s_instance(s_causesProposition_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_causesProposition(INST1, INST2) | (s_causesProposition(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber)
        (instance ?INST1 TelecomNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telecomCountryCode ?CLASS)
          (instance telecomCountryCode Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telecomCountryCode ?INST1 ?INST2)
          (or (telecomCountryCode ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8429,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telecomCountryCode_m, CLASS) & s_instance(s_telecomCountryCode_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telecomCountryCode(INST1, INST2) | (s_telecomCountryCode(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber)
        (instance ?INST2 TelephonyDevice)
        (instance ?INST1 TelecomNumber)
        (instance ?INST1 TelephonyDevice))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn deviceTelecomNumber ?CLASS)
          (instance deviceTelecomNumber Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (deviceTelecomNumber ?INST1 ?INST2)
          (or (deviceTelecomNumber ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8430,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST2, s_TelephonyDevice) & s_instance(INST1, s_TelecomNumber) & s_instance(INST1, s_TelephonyDevice)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_deviceTelecomNumber_m, CLASS) & s_instance(s_deviceTelecomNumber_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_deviceTelecomNumber(INST1, INST2) | (s_deviceTelecomNumber(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Woman) (instance ?INST1 Woman))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn grandmother ?CLASS)
          (instance grandmother Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (grandmother ?INST1 ?INST2)
          (or (grandmother ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8431,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Woman) & s_instance(INST1, s_Woman)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_grandmother_m, CLASS) & s_instance(s_grandmother_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_grandmother(INST1, INST2) | (s_grandmother(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CompoundSubstance)
        (instance ?INST1 CompoundSubstance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn conjugate ?CLASS)
          (instance conjugate Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (conjugate ?INST1 ?INST2)
          (or (conjugate ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8432,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CompoundSubstance) & s_instance(INST1, s_CompoundSubstance)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_conjugate_m, CLASS) & s_instance(s_conjugate_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_conjugate(INST1, INST2) | (s_conjugate(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Formula) (instance ?INST2 NormativeAttribute)
        (instance ?INST1 Formula) (instance ?INST1 NormativeAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn modalAttribute ?CLASS)
          (instance modalAttribute Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (modalAttribute ?INST1 ?INST2)
          (or (modalAttribute ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8433,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST2, s_NormativeAttribute) & s_instance(INST1, s_Formula) & s_instance(INST1, s_NormativeAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_modalAttribute_m, CLASS) & s_instance(s_modalAttribute_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_modalAttribute(INST1, INST2) | (s_modalAttribute(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryFunction)
        (instance ?INST1 BinaryFunction))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn identityElement ?CLASS)
          (instance identityElement Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (identityElement ?INST1 ?INST2)
          (or (identityElement ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8434,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryFunction) & s_instance(INST1, s_BinaryFunction)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_identityElement_m, CLASS) & s_instance(s_identityElement_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_identityElement(INST1, INST2) | (s_identityElement(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization)
        (instance ?INST2 FormOfGovernment)
        (instance ?INST1 Organization)
        (instance ?INST1 FormOfGovernment))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn ideologicalAffiliationOfOrganization
           ?CLASS)
          (instance ideologicalAffiliationOfOrganization Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (ideologicalAffiliationOfOrganization ?INST1 ?INST2)
          (or (ideologicalAffiliationOfOrganization ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8435,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_instance(INST2, s_FormOfGovernment) & s_instance(INST1, s_Organization) & s_instance(INST1, s_FormOfGovernment)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_ideologicalAffiliationOfOrganization_m, CLASS) & s_instance(s_ideologicalAffiliationOfOrganization_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_ideologicalAffiliationOfOrganization(INST1, INST2) | (s_ideologicalAffiliationOfOrganization(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ContentBearingPhysical)
        (instance ?INST2 Proposition)
        (instance ?INST1 ContentBearingPhysical)
        (instance ?INST1 Proposition))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn containsInformation ?CLASS)
          (instance containsInformation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (containsInformation ?INST1 ?INST2)
          (or (containsInformation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8436,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingPhysical) & s_instance(INST2, s_Proposition) & s_instance(INST1, s_ContentBearingPhysical) & s_instance(INST1, s_Proposition)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_containsInformation_m, CLASS) & s_instance(s_containsInformation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_containsInformation(INST1, INST2) | (s_containsInformation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Transportation)
        (instance ?INST2 TransportationDevice)
        (instance ?INST1 Transportation)
        (instance ?INST1 TransportationDevice))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn conveyance ?CLASS)
          (instance conveyance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (conveyance ?INST1 ?INST2)
          (or (conveyance ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8437,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Transportation) & s_instance(INST2, s_TransportationDevice) & s_instance(INST1, s_Transportation) & s_instance(INST1, s_TransportationDevice)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_conveyance_m, CLASS) & s_instance(s_conveyance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_conveyance(INST1, INST2) | (s_conveyance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agent) (instance ?INST2 PermanentResidence)
        (instance ?INST1 Agent) (instance ?INST1 PermanentResidence))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn landlord ?CLASS)
          (instance landlord Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (landlord ?INST1 ?INST2)
          (or (landlord ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8438,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST2, s_PermanentResidence) & s_instance(INST1, s_Agent) & s_instance(INST1, s_PermanentResidence)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_landlord_m, CLASS) & s_instance(s_landlord_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_landlord(INST1, INST2) | (s_landlord(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Function) (instance ?INST2 SetOrClass)
        (instance ?INST1 Function) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn range ?CLASS) (instance range Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (range ?INST1 ?INST2)
          (or (range ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8439,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Function) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_Function) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_range_m, CLASS) & s_instance(s_range_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_range(INST1, INST2) | (s_range(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Organization) (subclass ?INST2 Text)
        (instance ?INST1 Organization) (subclass ?INST1 Text))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn publishes ?CLASS)
          (instance publishes Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (publishes ?INST1 ?INST2)
          (or (publishes ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8440,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organization) & s_subclass(INST2, s_Text) & s_instance(INST1, s_Organization) & s_subclass(INST1, s_Text)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_publishes_m, CLASS) & s_instance(s_publishes_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_publishes(INST1, INST2) | (s_publishes(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Device) (instance ?INST2 LengthMeasure)
        (instance ?INST1 Device) (instance ?INST1 LengthMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn effectiveRange ?CLASS)
          (instance effectiveRange Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (effectiveRange ?INST1 ?INST2)
          (or (effectiveRange ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8441,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Device) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_Device) & s_instance(INST1, s_LengthMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_effectiveRange_m, CLASS) & s_instance(s_effectiveRange_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_effectiveRange(INST1, INST2) | (s_effectiveRange(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn considers ?CLASS)
          (instance considers Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (considers ?INST1 ?INST2)
          (or (considers ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8442,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_considers_m, CLASS) & s_instance(s_considers_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_considers(INST1, INST2) | (s_considers(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Quantity) (instance ?INST1 Quantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn lessThan ?CLASS)
          (instance lessThan Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (lessThan ?INST1 ?INST2)
          (or (lessThan ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8443,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_lessThan_m, CLASS) & s_instance(s_lessThan_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (less(INST1, INST2) | (less(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Animal) (instance ?INST1 Animal))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn deathplace ?CLASS)
          (instance deathplace Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (deathplace ?INST1 ?INST2)
          (or (deathplace ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8444,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Animal) & s_instance(INST1, s_Animal)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_deathplace_m, CLASS) & s_instance(s_deathplace_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_deathplace(INST1, INST2) | (s_deathplace(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (subclass ?INST2 PureSubstance)
        (instance ?INST2 TemperatureMeasure)
        (subclass ?INST1 PureSubstance)
        (instance ?INST1 TemperatureMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn boilingPoint ?CLASS)
          (instance boilingPoint Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (boilingPoint ?INST1 ?INST2)
          (or (boilingPoint ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8445,axiom,! [CLASS] : (! [INST1,INST2] : (((s_subclass(INST2, s_PureSubstance) & s_instance(INST2, s_TemperatureMeasure) & s_subclass(INST1, s_PureSubstance) & s_instance(INST1, s_TemperatureMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_boilingPoint_m, CLASS) & s_instance(s_boilingPoint_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_boilingPoint(INST1, INST2) | (s_boilingPoint(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Relation) (instance ?INST1 Relation))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subrelation ?CLASS)
          (instance subrelation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subrelation ?INST1 ?INST2)
          (or (subrelation ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8446,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Relation) & s_instance(INST1, s_Relation)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subrelation_m, CLASS) & s_instance(s_subrelation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subrelation(INST1, INST2) | (s_subrelation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn discovers ?CLASS)
          (instance discovers Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (discovers ?INST1 ?INST2)
          (or (discovers ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8447,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_discovers_m, CLASS) & s_instance(s_discovers_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_discovers(INST1, INST2) | (s_discovers(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 Nation)
        (instance ?INST1 Human) (instance ?INST1 Nation))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn citizen ?CLASS)
          (instance citizen Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (citizen ?INST1 ?INST2)
          (or (citizen ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8448,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_Nation) & s_instance(INST1, s_Human) & s_instance(INST1, s_Nation)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_citizen_m, CLASS) & s_instance(s_citizen_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_citizen(INST1, INST2) | (s_citizen(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn needs ?CLASS) (instance needs Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (needs ?INST1 ?INST2)
          (or (needs ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8449,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_needs_m, CLASS) & s_instance(s_needs_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_needs(INST1, INST2) | (s_needs(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Object)
        (subclass ?INST1 Object) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn initiallyContainsPart ?CLASS)
          (instance initiallyContainsPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (initiallyContainsPart ?INST1 ?INST2)
          (or (initiallyContainsPart ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8450,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Object) & s_subclass(INST1, s_Object) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_initiallyContainsPart_m, CLASS) & s_instance(s_initiallyContainsPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_initiallyContainsPart(INST1, INST2) | (s_initiallyContainsPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn mutualAcquaintance ?CLASS)
          (instance mutualAcquaintance Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (mutualAcquaintance ?INST1 ?INST2)
          (or (mutualAcquaintance ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8451,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_mutualAcquaintance_m, CLASS) & s_instance(s_mutualAcquaintance_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_mutualAcquaintance(INST1, INST2) | (s_mutualAcquaintance(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 Day)
        (instance ?INST1 Human) (instance ?INST1 Day))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn birthday ?CLASS)
          (instance birthday Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (birthday ?INST1 ?INST2)
          (or (birthday ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8452,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_Day) & s_instance(INST1, s_Human) & s_instance(INST1, s_Day)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_birthday_m, CLASS) & s_instance(s_birthday_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_birthday(INST1, INST2) | (s_birthday(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agent) (subclass ?INST2 Text)
        (instance ?INST1 Agent) (subclass ?INST1 Text))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn editor ?CLASS) (instance editor Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (editor ?INST1 ?INST2)
          (or (editor ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8453,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_subclass(INST2, s_Text) & s_instance(INST1, s_Agent) & s_subclass(INST1, s_Text)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_editor_m, CLASS) & s_instance(s_editor_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_editor(INST1, INST2) | (s_editor(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Process)
        (subclass ?INST1 Process) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hindersSubclass ?CLASS)
          (instance hindersSubclass Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hindersSubclass ?INST1 ?INST2)
          (or (hindersSubclass ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8454,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hindersSubclass_m, CLASS) & s_instance(s_hindersSubclass_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hindersSubclass(INST1, INST2) | (s_hindersSubclass(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Agent)
        (instance ?INST1 Process) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn benefits ?CLASS)
          (instance benefits Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (benefits ?INST1 ?INST2)
          (or (benefits ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8455,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_benefits_m, CLASS) & s_instance(s_benefits_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_benefits(INST1, INST2) | (s_benefits(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn exploits ?CLASS)
          (instance exploits Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (exploits ?INST1 ?INST2)
          (or (exploits ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8456,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_exploits_m, CLASS) & s_instance(s_exploits_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_exploits(INST1, INST2) | (s_exploits(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 StationaryArtifact) (instance ?INST2 Agent)
        (instance ?INST1 StationaryArtifact) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn contractor ?CLASS)
          (instance contractor Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (contractor ?INST1 ?INST2)
          (or (contractor ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8457,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_StationaryArtifact) & s_instance(INST2, s_Agent) & s_instance(INST1, s_StationaryArtifact) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_contractor_m, CLASS) & s_instance(s_contractor_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_contractor(INST1, INST2) | (s_contractor(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agreement) (instance ?INST2 TimeInterval)
        (instance ?INST1 Agreement) (instance ?INST1 TimeInterval))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn agreementPeriod ?CLASS)
          (instance agreementPeriod Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (agreementPeriod ?INST1 ?INST2)
          (or (agreementPeriod ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8458,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agreement) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_Agreement) & s_instance(INST1, s_TimeInterval)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_agreementPeriod_m, CLASS) & s_instance(s_agreementPeriod_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_agreementPeriod(INST1, INST2) | (s_agreementPeriod(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (subclass ?INST2 Process)
        (instance ?INST1 Process) (subclass ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hinders ?CLASS)
          (instance hinders Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hinders ?INST1 ?INST2)
          (or (hinders ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8459,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_subclass(INST2, s_Process) & s_instance(INST1, s_Process) & s_subclass(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hinders_m, CLASS) & s_instance(s_hinders_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hinders(INST1, INST2) | (s_hinders(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn operator ?CLASS)
          (instance operator Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (operator ?INST1 ?INST2)
          (or (operator ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8460,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_operator_m, CLASS) & s_instance(s_operator_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_operator(INST1, INST2) | (s_operator(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 OrganicObject)
        (instance ?INST2 DevelopmentalAttribute)
        (instance ?INST1 OrganicObject)
        (instance ?INST1 DevelopmentalAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn developmentalForm ?CLASS)
          (instance developmentalForm Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (developmentalForm ?INST1 ?INST2)
          (or (developmentalForm ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8461,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_OrganicObject) & s_instance(INST2, s_DevelopmentalAttribute) & s_instance(INST1, s_OrganicObject) & s_instance(INST1, s_DevelopmentalAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_developmentalForm_m, CLASS) & s_instance(s_developmentalForm_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_developmentalForm(INST1, INST2) | (s_developmentalForm(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn disapproves ?CLASS)
          (instance disapproves Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (disapproves ?INST1 ?INST2)
          (or (disapproves ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8462,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_disapproves_m, CLASS) & s_instance(s_disapproves_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_disapproves(INST1, INST2) | (s_disapproves(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Relation) (instance ?INST1 Relation))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn disjointRelation ?CLASS)
          (instance disjointRelation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (disjointRelation ?INST1 ?INST2)
          (or (disjointRelation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8463,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Relation) & s_instance(INST1, s_Relation)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_disjointRelation_m, CLASS) & s_instance(s_disjointRelation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_disjointRelation(INST1, INST2) | (s_disjointRelation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 Day)
        (instance ?INST1 Human) (instance ?INST1 Day))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn deathdate ?CLASS)
          (instance deathdate Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (deathdate ?INST1 ?INST2)
          (or (deathdate ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8464,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_Day) & s_instance(INST1, s_Human) & s_instance(INST1, s_Day)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_deathdate_m, CLASS) & s_instance(s_deathdate_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_deathdate(INST1, INST2) | (s_deathdate(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Process)
        (subclass ?INST1 Process) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn causesSubclass ?CLASS)
          (instance causesSubclass Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (causesSubclass ?INST1 ?INST2)
          (or (causesSubclass ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8465,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Process) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_causesSubclass_m, CLASS) & s_instance(s_causesSubclass_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_causesSubclass(INST1, INST2) | (s_causesSubclass(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn entails ?CLASS)
          (instance entails Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (entails ?INST1 ?INST2)
          (or (entails ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8466,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_entails_m, CLASS) & s_instance(s_entails_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_entails(INST1, INST2) | (s_entails(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Group) (subclass ?INST2 UniformClothing)
        (instance ?INST1 Group) (subclass ?INST1 UniformClothing))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hasUniform ?CLASS)
          (instance hasUniform Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hasUniform ?INST1 ?INST2)
          (or (hasUniform ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8467,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Group) & s_subclass(INST2, s_UniformClothing) & s_instance(INST1, s_Group) & s_subclass(INST1, s_UniformClothing)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hasUniform_m, CLASS) & s_instance(s_hasUniform_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hasUniform(INST1, INST2) | (s_hasUniform(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
        (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn trichotomizingOn ?CLASS)
          (instance trichotomizingOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (trichotomizingOn ?INST1 ?INST2)
          (or (trichotomizingOn ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8468,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_trichotomizingOn_m, CLASS) & s_instance(s_trichotomizingOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_trichotomizingOn(INST1, INST2) | (s_trichotomizingOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 RationalNumber)
        (instance ?INST1 Human) (instance ?INST1 RationalNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn intelligenceQuotient ?CLASS)
          (instance intelligenceQuotient Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (intelligenceQuotient ?INST1 ?INST2)
          (or (intelligenceQuotient ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8469,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_RationalNumber) & s_instance(INST1, s_Human) & s_instance(INST1, s_RationalNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_intelligenceQuotient_m, CLASS) & s_instance(s_intelligenceQuotient_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_intelligenceQuotient(INST1, INST2) | (s_intelligenceQuotient(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object) (instance ?INST2 ColorAttribute)
        (instance ?INST1 Object) (instance ?INST1 ColorAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn color ?CLASS) (instance color Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (color ?INST1 ?INST2)
          (or (color ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8470,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_ColorAttribute) & s_instance(INST1, s_Object) & s_instance(INST1, s_ColorAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_color_m, CLASS) & s_instance(s_color_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_color(INST1, INST2) | (s_color(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 NonnegativeInteger)
        (instance ?INST2 SymbolicString)
        (instance ?INST1 NonnegativeInteger)
        (instance ?INST1 SymbolicString))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn stringLength ?CLASS)
          (instance stringLength Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (stringLength ?INST1 ?INST2)
          (or (stringLength ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8471,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_NonnegativeInteger) & s_instance(INST2, s_SymbolicString) & s_instance(INST1, s_NonnegativeInteger) & s_instance(INST1, s_SymbolicString)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_stringLength_m, CLASS) & s_instance(s_stringLength_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_stringLength(INST1, INST2) | (s_stringLength(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn customer ?CLASS)
          (instance customer Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (customer ?INST1 ?INST2)
          (or (customer ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8472,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_customer_m, CLASS) & s_instance(s_customer_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_customer(INST1, INST2) | (s_customer(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Quantity) (instance ?INST1 Quantity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn lessThanOrEqualTo ?CLASS)
          (instance lessThanOrEqualTo Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (lessThanOrEqualTo ?INST1 ?INST2)
          (or (lessThanOrEqualTo ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8473,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Quantity) & s_instance(INST1, s_Quantity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_lessThanOrEqualTo_m, CLASS) & s_instance(s_lessThanOrEqualTo_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (lesseq(INST1, INST2) | (lesseq(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Object)
        (subclass ?INST1 Object) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn typicallyContainsPart ?CLASS)
          (instance typicallyContainsPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (typicallyContainsPart ?INST1 ?INST2)
          (or (typicallyContainsPart ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8474,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Object) & s_subclass(INST1, s_Object) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_typicallyContainsPart_m, CLASS) & s_instance(s_typicallyContainsPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_typicallyContainsPart(INST1, INST2) | (s_typicallyContainsPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Formula) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hasPurpose ?CLASS)
          (instance hasPurpose Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hasPurpose ?INST1 ?INST2)
          (or (hasPurpose ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8475,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Formula) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hasPurpose_m, CLASS) & s_instance(s_hasPurpose_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hasPurpose(INST1, INST2) | (s_hasPurpose(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TimeInterval) (instance ?INST1 TimeInterval))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn overlapsTemporally ?CLASS)
          (instance overlapsTemporally Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (overlapsTemporally ?INST1 ?INST2)
          (or (overlapsTemporally ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8476,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_overlapsTemporally_m, CLASS) & s_instance(s_overlapsTemporally_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_overlapsTemporally(INST1, INST2) | (s_overlapsTemporally(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 StationaryArtifact)
        (instance ?INST2 TimeInterval)
        (instance ?INST1 StationaryArtifact)
        (instance ?INST1 TimeInterval))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn constructionPeriod ?CLASS)
          (instance constructionPeriod Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (constructionPeriod ?INST1 ?INST2)
          (or (constructionPeriod ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8477,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_StationaryArtifact) & s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_StationaryArtifact) & s_instance(INST1, s_TimeInterval)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_constructionPeriod_m, CLASS) & s_instance(s_constructionPeriod_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_constructionPeriod(INST1, INST2) | (s_constructionPeriod(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn friend ?CLASS) (instance friend Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (friend ?INST1 ?INST2)
          (or (friend ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8478,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_friend_m, CLASS) & s_instance(s_friend_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_friend(INST1, INST2) | (s_friend(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 WaterArea) (instance ?INST2 LengthMeasure)
        (instance ?INST1 WaterArea) (instance ?INST1 LengthMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn waterDepth ?CLASS)
          (instance waterDepth Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (waterDepth ?INST1 ?INST2)
          (or (waterDepth ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8479,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_WaterArea) & s_instance(INST2, s_LengthMeasure) & s_instance(INST1, s_WaterArea) & s_instance(INST1, s_LengthMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_waterDepth_m, CLASS) & s_instance(s_waterDepth_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_waterDepth(INST1, INST2) | (s_waterDepth(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TwoDimensionalObject)
        (instance ?INST2 CorpuscularObject)
        (instance ?INST1 TwoDimensionalObject)
        (instance ?INST1 CorpuscularObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn sliceOfFigure ?CLASS)
          (instance sliceOfFigure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (sliceOfFigure ?INST1 ?INST2)
          (or (sliceOfFigure ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8480,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TwoDimensionalObject) & s_instance(INST2, s_CorpuscularObject) & s_instance(INST1, s_TwoDimensionalObject) & s_instance(INST1, s_CorpuscularObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_sliceOfFigure_m, CLASS) & s_instance(s_sliceOfFigure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_sliceOfFigure(INST1, INST2) | (s_sliceOfFigure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn resource ?CLASS)
          (instance resource Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (resource ?INST1 ?INST2)
          (or (resource ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8481,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_resource_m, CLASS) & s_instance(s_resource_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_resource(INST1, INST2) | (s_resource(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TimeInterval) (instance ?INST1 TimeInterval))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn earlier ?CLASS)
          (instance earlier Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (earlier ?INST1 ?INST2)
          (or (earlier ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8482,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TimeInterval) & s_instance(INST1, s_TimeInterval)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_earlier_m, CLASS) & s_instance(s_earlier_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_earlier(INST1, INST2) | (s_earlier(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 TelecomNumber)
        (instance ?INST1 TelecomNumber))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn telecomExtension ?CLASS)
          (instance telecomExtension Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (telecomExtension ?INST1 ?INST2)
          (or (telecomExtension ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8483,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_TelecomNumber) & s_instance(INST1, s_TelecomNumber)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_telecomExtension_m, CLASS) & s_instance(s_telecomExtension_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_telecomExtension(INST1, INST2) | (s_telecomExtension(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 Agent)
        (instance ?INST1 PostalPlace) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postContactSite ?CLASS)
          (instance postContactSite Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postContactSite ?INST1 ?INST2)
          (or (postContactSite ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8484,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_Agent) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postContactSite_m, CLASS) & s_instance(s_postContactSite_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postContactSite(INST1, INST2) | (s_postContactSite(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn domesticPartner ?CLASS)
          (instance domesticPartner Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (domesticPartner ?INST1 ?INST2)
          (or (domesticPartner ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8485,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_domesticPartner_m, CLASS) & s_instance(s_domesticPartner_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_domesticPartner(INST1, INST2) | (s_domesticPartner(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Experimenting) (instance ?INST2 Object)
        (instance ?INST1 Experimenting) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn experimentalControl ?CLASS)
          (instance experimentalControl Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (experimentalControl ?INST1 ?INST2)
          (or (experimentalControl ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8486,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Experimenting) & s_instance(INST2, s_Object) & s_instance(INST1, s_Experimenting) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_experimentalControl_m, CLASS) & s_instance(s_experimentalControl_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_experimentalControl(INST1, INST2) | (s_experimentalControl(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Attribute) (instance ?INST1 Attribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn property ?CLASS)
          (instance property Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (property ?INST1 ?INST2)
          (or (property ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8487,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Attribute) & s_instance(INST1, s_Attribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_property_m, CLASS) & s_instance(s_property_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_property(INST1, INST2) | (s_property(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 FieldOfStudy)
        (instance ?INST1 Human) (instance ?INST1 FieldOfStudy))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hasExpertise ?CLASS)
          (instance hasExpertise Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hasExpertise ?INST1 ?INST2)
          (or (hasExpertise ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8488,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_FieldOfStudy) & s_instance(INST1, s_Human) & s_instance(INST1, s_FieldOfStudy)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hasExpertise_m, CLASS) & s_instance(s_hasExpertise_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hasExpertise(INST1, INST2) | (s_hasExpertise(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Object) (instance ?INST2 DirectionalAttribute)
        (instance ?INST1 Object)
        (instance ?INST1 DirectionalAttribute))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn faces ?CLASS) (instance faces Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (faces ?INST1 ?INST2)
          (or (faces ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8489,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Object) & s_instance(INST2, s_DirectionalAttribute) & s_instance(INST1, s_Object) & s_instance(INST1, s_DirectionalAttribute)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_faces_m, CLASS) & s_instance(s_faces_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_faces(INST1, INST2) | (s_faces(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ServiceProcess)
        (instance ?INST2 CognitiveAgent)
        (instance ?INST1 ServiceProcess)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn serviceRecipient ?CLASS)
          (instance serviceRecipient Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (serviceRecipient ?INST1 ?INST2)
          (or (serviceRecipient ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8490,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ServiceProcess) & s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_ServiceProcess) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_serviceRecipient_m, CLASS) & s_instance(s_serviceRecipient_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_serviceRecipient(INST1, INST2) | (s_serviceRecipient(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn leader ?CLASS) (instance leader Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (leader ?INST1 ?INST2)
          (or (leader ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8491,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_leader_m, CLASS) & s_instance(s_leader_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_leader(INST1, INST2) | (s_leader(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (subclass ?INST2 IntentionalProcess)
        (instance ?INST1 Human) (subclass ?INST1 IntentionalProcess))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hasOccupation ?CLASS)
          (instance hasOccupation Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hasOccupation ?INST1 ?INST2)
          (or (hasOccupation ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8492,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_subclass(INST2, s_IntentionalProcess) & s_instance(INST1, s_Human) & s_subclass(INST1, s_IntentionalProcess)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hasOccupation_m, CLASS) & s_instance(s_hasOccupation_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hasOccupation(INST1, INST2) | (s_hasOccupation(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 SetOrClass) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subclass ?CLASS)
          (instance subclass Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subclass ?INST1 ?INST2)
          (or (subclass ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8493,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subclass_m, CLASS) & s_instance(s_subclass_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subclass(INST1, INST2) | (s_subclass(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn eventLocated ?CLASS)
          (instance eventLocated Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (eventLocated ?INST1 ?INST2)
          (or (eventLocated ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8494,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_eventLocated_m, CLASS) & s_instance(s_eventLocated_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_eventLocated(INST1, INST2) | (s_eventLocated(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn patient ?CLASS)
          (instance patient Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (patient ?INST1 ?INST2)
          (or (patient ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8495,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_patient_m, CLASS) & s_instance(s_patient_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_patient(INST1, INST2) | (s_patient(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agent) (subclass ?INST2 ContentBearingObject)
        (instance ?INST1 Agent) (subclass ?INST1 ContentBearingObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn authors ?CLASS)
          (instance authors Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (authors ?INST1 ?INST2)
          (or (authors ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8496,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_subclass(INST2, s_ContentBearingObject) & s_instance(INST1, s_Agent) & s_subclass(INST1, s_ContentBearingObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_authors_m, CLASS) & s_instance(s_authors_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_authors(INST1, INST2) | (s_authors(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ChemicalProcess) (instance ?INST2 Substance)
        (instance ?INST1 ChemicalProcess) (instance ?INST1 Substance))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn reactant ?CLASS)
          (instance reactant Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (reactant ?INST1 ?INST2)
          (or (reactant ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8497,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ChemicalProcess) & s_instance(INST2, s_Substance) & s_instance(INST1, s_ChemicalProcess) & s_instance(INST1, s_Substance)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_reactant_m, CLASS) & s_instance(s_reactant_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_reactant(INST1, INST2) | (s_reactant(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 Agent)
        (instance ?INST1 SymbolicString) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn alias ?CLASS) (instance alias Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (alias ?INST1 ?INST2)
          (or (alias ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8498,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_Agent) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_alias_m, CLASS) & s_instance(s_alias_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_alias(INST1, INST2) | (s_alias(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Graph) (instance ?INST2 UnitOfMeasure)
        (instance ?INST1 Graph) (instance ?INST1 UnitOfMeasure))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn graphMeasure ?CLASS)
          (instance graphMeasure Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (graphMeasure ?INST1 ?INST2)
          (or (graphMeasure ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8499,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Graph) & s_instance(INST2, s_UnitOfMeasure) & s_instance(INST1, s_Graph) & s_instance(INST1, s_UnitOfMeasure)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_graphMeasure_m, CLASS) & s_instance(s_graphMeasure_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_graphMeasure(INST1, INST2) | (s_graphMeasure(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Agent) (instance ?INST2 Process)
        (instance ?INST1 Agent) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn commentator ?CLASS)
          (instance commentator Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (commentator ?INST1 ?INST2)
          (or (commentator ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8500,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST2, s_Process) & s_instance(INST1, s_Agent) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_commentator_m, CLASS) & s_instance(s_commentator_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_commentator(INST1, INST2) | (s_commentator(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 ContentBearingObject)
        (instance ?INST2 Collection)
        (instance ?INST1 ContentBearingObject)
        (instance ?INST1 Collection))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn inventory ?CLASS)
          (instance inventory Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (inventory ?INST1 ?INST2)
          (or (inventory ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8501,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_ContentBearingObject) & s_instance(INST2, s_Collection) & s_instance(INST1, s_ContentBearingObject) & s_instance(INST1, s_Collection)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_inventory_m, CLASS) & s_instance(s_inventory_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_inventory(INST1, INST2) | (s_inventory(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Collection) (instance ?INST2 SetOrClass)
        (instance ?INST1 Collection) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn memberType ?CLASS)
          (instance memberType Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (memberType ?INST1 ?INST2)
          (or (memberType ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8502,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Collection) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_Collection) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_memberType_m, CLASS) & s_instance(s_memberType_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_memberType(INST1, INST2) | (s_memberType(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Object)
        (subclass ?INST1 Object) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn typicalPart ?CLASS)
          (instance typicalPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (typicalPart ?INST1 ?INST2)
          (or (typicalPart ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8503,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Object) & s_subclass(INST1, s_Object) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_typicalPart_m, CLASS) & s_instance(s_typicalPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_typicalPart(INST1, INST2) | (s_typicalPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Proposition) (instance ?INST2 Organization)
        (instance ?INST1 Proposition) (instance ?INST1 Organization))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn insured ?CLASS)
          (instance insured Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (insured ?INST1 ?INST2)
          (or (insured ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8504,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Proposition) & s_instance(INST2, s_Organization) & s_instance(INST1, s_Proposition) & s_instance(INST1, s_Organization)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_insured_m, CLASS) & s_instance(s_insured_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_insured(INST1, INST2) | (s_insured(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 GeographicArea)
        (instance ?INST1 GeographicArea))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn geographicSubregion ?CLASS)
          (instance geographicSubregion Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (geographicSubregion ?INST1 ?INST2)
          (or (geographicSubregion ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8505,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_GeographicArea) & s_instance(INST1, s_GeographicArea)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_geographicSubregion_m, CLASS) & s_instance(s_geographicSubregion_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_geographicSubregion(INST1, INST2) | (s_geographicSubregion(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Human) (instance ?INST2 PostSecondarySchool)
        (instance ?INST1 Human) (instance ?INST1 PostSecondarySchool))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn almamater ?CLASS)
          (instance almamater Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (almamater ?INST1 ?INST2)
          (or (almamater ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8506,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST2, s_PostSecondarySchool) & s_instance(INST1, s_Human) & s_instance(INST1, s_PostSecondarySchool)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_almamater_m, CLASS) & s_instance(s_almamater_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_almamater(INST1, INST2) | (s_almamater(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent)
        (instance ?INST1 CognitiveAgent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn approves ?CLASS)
          (instance approves Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (approves ?INST1 ?INST2)
          (or (approves ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8507,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST1, s_CognitiveAgent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_approves_m, CLASS) & s_instance(s_approves_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_approves(INST1, INST2) | (s_approves(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 List) (instance ?INST1 List))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn subList ?CLASS)
          (instance subList Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (subList ?INST1 ?INST2)
          (or (subList ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8508,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_subList_m, CLASS) & s_instance(s_subList_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_subList(INST1, INST2) | (s_subList(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PhysicalSystem)
        (instance ?INST1 PhysicalSystem))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn systemPart ?CLASS)
          (instance systemPart Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (systemPart ?INST1 ?INST2)
          (or (systemPart ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8509,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PhysicalSystem) & s_instance(INST1, s_PhysicalSystem)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_systemPart_m, CLASS) & s_instance(s_systemPart_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_systemPart(INST1, INST2) | (s_systemPart(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (subclass ?INST2 Process) (instance ?INST2 Agent)
        (subclass ?INST1 Process) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn hasSkill ?CLASS)
          (instance hasSkill Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (hasSkill ?INST1 ?INST2)
          (or (hasSkill ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8510,axiom,! [CLASS] : (! [INST1,INST2] : (((s_subclass(INST2, s_Process) & s_instance(INST2, s_Agent) & s_subclass(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_hasSkill_m, CLASS) & s_instance(s_hasSkill_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_hasSkill(INST1, INST2) | (s_hasSkill(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 PostalPlace) (instance ?INST2 Roadway)
        (instance ?INST1 PostalPlace) (instance ?INST1 Roadway))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn postStreet ?CLASS)
          (instance postStreet Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (postStreet ?INST1 ?INST2)
          (or (postStreet ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8511,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_PostalPlace) & s_instance(INST2, s_Roadway) & s_instance(INST1, s_PostalPlace) & s_instance(INST1, s_Roadway)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_postStreet_m, CLASS) & s_instance(s_postStreet_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_postStreet(INST1, INST2) | (s_postStreet(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Process) (instance ?INST1 Process))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn destination ?CLASS)
          (instance destination Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (destination ?INST1 ?INST2)
          (or (destination ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8512,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST1, s_Process)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_destination_m, CLASS) & s_instance(s_destination_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_destination(INST1, INST2) | (s_destination(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 OneDimensionalFigure)
        (instance ?INST2 TwoDimensionalObject)
        (instance ?INST1 OneDimensionalFigure)
        (instance ?INST1 TwoDimensionalObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn tangent ?CLASS)
          (instance tangent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (tangent ?INST1 ?INST2)
          (or (tangent ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8513,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_OneDimensionalFigure) & s_instance(INST2, s_TwoDimensionalObject) & s_instance(INST1, s_OneDimensionalFigure) & s_instance(INST1, s_TwoDimensionalObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_tangent_m, CLASS) & s_instance(s_tangent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_tangent(INST1, INST2) | (s_tangent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 SymbolicString) (instance ?INST2 PostalPlace)
        (instance ?INST1 SymbolicString) (instance ?INST1 PostalPlace))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn floorCode ?CLASS)
          (instance floorCode Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (floorCode ?INST1 ?INST2)
          (or (floorCode ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8514,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_SymbolicString) & s_instance(INST2, s_PostalPlace) & s_instance(INST1, s_SymbolicString) & s_instance(INST1, s_PostalPlace)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_floorCode_m, CLASS) & s_instance(s_floorCode_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_floorCode(INST1, INST2) | (s_floorCode(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CorpuscularObject)
        (instance ?INST1 CorpuscularObject))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn powerComponent ?CLASS)
          (instance powerComponent Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (powerComponent ?INST1 ?INST2)
          (or (powerComponent ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8515,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CorpuscularObject) & s_instance(INST1, s_CorpuscularObject)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_powerComponent_m, CLASS) & s_instance(s_powerComponent_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_powerComponent(INST1, INST2) | (s_powerComponent(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Agent) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn creator ?CLASS)
          (instance creator Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (creator ?INST1 ?INST2)
          (or (creator ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8516,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Agent) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_creator_m, CLASS) & s_instance(s_creator_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_creator(INST1, INST2) | (s_creator(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn doubts ?CLASS) (instance doubts Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (doubts ?INST1 ?INST2)
          (or (doubts ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8517,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_doubts_m, CLASS) & s_instance(s_doubts_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_doubts(INST1, INST2) | (s_doubts(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Relation) (instance ?INST2 PositiveInteger)
        (instance ?INST1 Relation) (instance ?INST1 PositiveInteger))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn valence ?CLASS)
          (instance valence Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (valence ?INST1 ?INST2)
          (or (valence ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8518,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Relation) & s_instance(INST2, s_PositiveInteger) & s_instance(INST1, s_Relation) & s_instance(INST1, s_PositiveInteger)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_valence_m, CLASS) & s_instance(s_valence_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_valence(INST1, INST2) | (s_valence(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryFunction)
        (instance ?INST1 BinaryFunction))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn distributes ?CLASS)
          (instance distributes Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (distributes ?INST1 ?INST2)
          (or (distributes ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8519,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryFunction) & s_instance(INST1, s_BinaryFunction)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_distributes_m, CLASS) & s_instance(s_distributes_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_distributes(INST1, INST2) | (s_distributes(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Agent)
        (instance ?INST1 Process) (instance ?INST1 Agent))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn suffers ?CLASS)
          (instance suffers Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (suffers ?INST1 ?INST2)
          (or (suffers ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8520,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Agent) & s_instance(INST1, s_Process) & s_instance(INST1, s_Agent)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_suffers_m, CLASS) & s_instance(s_suffers_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_suffers(INST1, INST2) | (s_suffers(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Organism) (instance ?INST1 Organism))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn relative ?CLASS)
          (instance relative Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (relative ?INST1 ?INST2)
          (or (relative ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8521,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Organism) & s_instance(INST1, s_Organism)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_relative_m, CLASS) & s_instance(s_relative_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_relative(INST1, INST2) | (s_relative(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 List) (instance ?INST1 List))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn inList ?CLASS) (instance inList Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (inList ?INST1 ?INST2)
          (or (inList ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8522,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_inList_m, CLASS) & s_instance(s_inList_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_inList(INST1, INST2) | (s_inList(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 Human) (instance ?INST1 Human))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn cohabitant ?CLASS)
          (instance cohabitant Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (cohabitant ?INST1 ?INST2)
          (or (cohabitant ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8523,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Human) & s_instance(INST1, s_Human)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_cohabitant_m, CLASS) & s_instance(s_cohabitant_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_cohabitant(INST1, INST2) | (s_cohabitant(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Process) (instance ?INST2 Object)
        (instance ?INST1 Process) (instance ?INST1 Object))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn instrument ?CLASS)
          (instance instrument Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (instrument ?INST1 ?INST2)
          (or (instrument ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8524,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Process) & s_instance(INST2, s_Object) & s_instance(INST1, s_Process) & s_instance(INST1, s_Object)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_instrument_m, CLASS) & s_instance(s_instrument_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_instrument(INST1, INST2) | (s_instrument(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Entity) (subclass ?INST2 Artifact)
        (subclass ?INST1 Artifact) (instance ?INST1 Entity))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn version ?CLASS)
          (instance version Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (version ?INST1 ?INST2)
          (or (version ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8525,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Entity) & s_subclass(INST2, s_Artifact) & s_subclass(INST1, s_Artifact) & s_instance(INST1, s_Entity)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_version_m, CLASS) & s_instance(s_version_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_version(INST1, INST2) | (s_version(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Collection) (instance ?INST2 Integer)
        (instance ?INST1 Collection) (instance ?INST1 Integer))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn memberCount ?CLASS)
          (instance memberCount Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (memberCount ?INST1 ?INST2)
          (or (memberCount ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8526,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Collection) & s_instance(INST2, s_Integer) & s_instance(INST1, s_Collection) & s_instance(INST1, s_Integer)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_memberCount_m, CLASS) & s_instance(s_memberCount_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_memberCount(INST1, INST2) | (s_memberCount(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)
        (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn knows ?CLASS) (instance knows Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (knows ?INST1 ?INST2)
          (or (knows ?INST2 ?INST1) (equal ?INST1 ?INST2)))))))))
*/
fof(a8527,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_CognitiveAgent) & s_instance(INST2, s_Formula) & s_instance(INST1, s_CognitiveAgent) & s_instance(INST1, s_Formula)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_knows_m, CLASS) & s_instance(s_knows_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_knows(INST1, INST2) | (s_knows(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=> (and (instance ?INST2 List) (instance ?INST1 List))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn identicalListItems ?CLASS)
          (instance identicalListItems Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (identicalListItems ?INST1 ?INST2)
          (or (identicalListItems ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8528,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_List) & s_instance(INST1, s_List)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_identicalListItems_m, CLASS) & s_instance(s_identicalListItems_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_identicalListItems(INST1, INST2) | (s_identicalListItems(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 Physical) (subclass ?INST2 TimePosition)
        (instance ?INST1 Physical) (subclass ?INST1 TimePosition))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn dateEstablished ?CLASS)
          (instance dateEstablished Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (dateEstablished ?INST1 ?INST2)
          (or (dateEstablished ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8529,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_Physical) & s_subclass(INST2, s_TimePosition) & s_instance(INST1, s_Physical) & s_subclass(INST1, s_TimePosition)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_dateEstablished_m, CLASS) & s_instance(s_dateEstablished_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_dateEstablished(INST1, INST2) | (s_dateEstablished(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (=>
   (and (instance ?INST2 BinaryRelation) (instance ?INST2 SetOrClass)
        (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass))
   (=> (instance ?CLASS SetOrClass)
    (=>
     (and (trichotomizingOn partialOrderingOn ?CLASS)
          (instance partialOrderingOn Predicate))
     (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS))
      (or (partialOrderingOn ?INST1 ?INST2)
          (or (partialOrderingOn ?INST2 ?INST1)
              (equal ?INST1 ?INST2)))))))))
*/
fof(a8530,axiom,! [CLASS] : (! [INST1,INST2] : (((s_instance(INST2, s_BinaryRelation) & s_instance(INST2, s_SetOrClass) & s_instance(INST1, s_BinaryRelation) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_SetOrClass) => ((s_trichotomizingOn(s_partialOrderingOn_m, CLASS) & s_instance(s_partialOrderingOn_m, s_Predicate)) => ((s_instance(INST1, CLASS) & s_instance(INST2, CLASS)) => (s_partialOrderingOn(INST1, INST2) | (s_partialOrderingOn(INST2, INST1) | (INST1 = INST2)))))))))).

/*
(instance equivalenceRelationOn BinaryPredicate)
*/
fof(a8531,axiom,s_instance(s_equivalenceRelationOn_m, s_BinaryPredicate)).

/*
(instance equivalenceRelationOn AsymmetricRelation)
*/
fof(a8532,axiom,s_instance(s_equivalenceRelationOn_m, s_AsymmetricRelation)).

/*
(forall (?CLASS ?RELATION)
 (=>
  (and (instance ?RELATION BinaryRelation)
       (instance ?CLASS SetOrClass))
  (=> (equivalenceRelationOn ?RELATION ?CLASS)
   (and (instance ?RELATION TransitiveRelation)
        (and (instance ?RELATION SymmetricRelation)
             (reflexiveOn ?RELATION ?CLASS))))))
*/
fof(a8533,axiom,! [CLASS,RELATION] : (((s_instance(RELATION, s_BinaryRelation) & s_instance(CLASS, s_SetOrClass)) => (s_equivalenceRelationOn(RELATION, CLASS) => (s_instance(RELATION, s_TransitiveRelation) & (s_instance(RELATION, s_SymmetricRelation) & s_reflexiveOn(RELATION, CLASS))))))).

/*
(instance distributes BinaryPredicate)
*/
fof(a8534,axiom,s_instance(s_distributes_m, s_BinaryPredicate)).

/*
(forall (?FUNCTION1 ?CLASS1 ?CLASS2 ?FUNCTION2)
 (forall (?INST1 ?INST2 ?INST3)
  (=>
   (and (instance ?INST3 Function) (instance ?INST2 Function)
        (instance ?INST1 Function))
   (=>
    (and (instance ?FUNCTION2 BinaryFunction)
         (instance ?CLASS2 SetOrClass) (instance ?CLASS1 SetOrClass)
         (instance ?FUNCTION1 BinaryFunction))
    (=> (distributes ?FUNCTION1 ?FUNCTION2)
     (=>
      (and (domain ?FUNCTION1 1 ?CLASS1)
           (and (instance ?INST1 ?CLASS1)
                (and (instance ?INST2 ?CLASS1)
                     (and (instance ?INST3 ?CLASS1)
                          (and (domain ?FUNCTION2 1 ?CLASS2)
                               (and
                                (instance ?INST1 ?CLASS2)
                                (and
                                 (instance ?INST2 ?CLASS2)
                                 (instance ?INST3 ?CLASS2))))))))
      (equal (AssignmentFn3 ?FUNCTION1 ?INST1
              (AssignmentFn3 ?FUNCTION2 ?INST2 ?INST3))
             (AssignmentFn3 ?FUNCTION2
              (AssignmentFn3 ?FUNCTION1 ?INST1 ?INST2)
              (AssignmentFn3 ?FUNCTION1 ?INST1 ?INST3)))))))))
*/
fof(a8535,axiom,! [FUNCTION1,CLASS1,CLASS2,FUNCTION2] : (! [INST1,INST2,INST3] : (((s_instance(INST3, s_Function) & s_instance(INST2, s_Function) & s_instance(INST1, s_Function)) => ((s_instance(FUNCTION2, s_BinaryFunction) & s_instance(CLASS2, s_SetOrClass) & s_instance(CLASS1, s_SetOrClass) & s_instance(FUNCTION1, s_BinaryFunction)) => (s_distributes(FUNCTION1, FUNCTION2) => ((s_domain(FUNCTION1, 1, CLASS1) & (s_instance(INST1, CLASS1) & (s_instance(INST2, CLASS1) & (s_instance(INST3, CLASS1) & (s_domain(FUNCTION2, 1, CLASS2) & (s_instance(INST1, CLASS2) & (s_instance(INST2, CLASS2) & s_instance(INST3, CLASS2)))))))) => (s_AssignmentFn3(FUNCTION1, INST1, s_AssignmentFn3(FUNCTION2, INST2, INST3)) = s_AssignmentFn3(FUNCTION2, s_AssignmentFn3(FUNCTION1, INST1, INST2), s_AssignmentFn3(FUNCTION1, INST1, INST3)))))))))).

/*
(instance relatedEvent BinaryPredicate)
*/
fof(a8536,axiom,s_instance(s_relatedEvent_m, s_BinaryPredicate)).

/*
(instance relatedEvent SymmetricRelation)
*/
fof(a8537,axiom,s_instance(s_relatedEvent_m, s_SymmetricRelation)).

/*
(forall (?S2 ?P ?S1)
 (=>
  (and (instance ?S1 Process) (instance ?P Process)
       (instance ?S2 Process))
  (=> (and (subProcess ?S1 ?P) (subProcess ?S2 ?P))
   (relatedEvent ?S1 ?S2))))
*/
fof(a8538,axiom,! [S2,P,S1] : (((s_instance(S1, s_Process) & s_instance(P, s_Process) & s_instance(S2, s_Process)) => ((s_subProcess(S1, P) & s_subProcess(S2, P)) => s_relatedEvent(S1, S2))))).

/*
(instance causes BinaryPredicate)
*/
fof(a8539,axiom,s_instance(s_causes_m, s_BinaryPredicate)).

/*
(instance causes AsymmetricRelation)
*/
fof(a8540,axiom,s_instance(s_causes_m, s_AsymmetricRelation)).

/*
(subrelation causes relatedEvent)
*/
fof(a8541,axiom,s_subrelation(s_causes_m, s_relatedEvent_m)).

/*
(forall (?PROC1)
 (exists (?PROC2)
  (and (instance ?PROC2 Process)
       (=> (instance ?PROC1 Process) (causes ?PROC2 ?PROC1)))))
*/
fof(a8542,axiom,! [PROC1] : (? [PROC2] : ((s_instance(PROC2, s_Process) & (s_instance(PROC1, s_Process) => s_causes(PROC2, PROC1)))))).

/*
(forall (?P2 ?P1)
 (=> (and (instance ?P1 Process) (instance ?P2 Process))
  (=> (causes ?P1 ?P2) (earlier (WhenFn ?P1) (WhenFn ?P2)))))
*/
fof(a8543,axiom,! [P2,P1] : (((s_instance(P1, s_Process) & s_instance(P2, s_Process)) => (s_causes(P1, P2) => s_earlier(s_WhenFn(P1), s_WhenFn(P2)))))).

/*
(instance causesSubclass BinaryPredicate)
*/
fof(a8544,axiom,s_instance(s_causesSubclass_m, s_BinaryPredicate)).

/*
(instance causesSubclass AsymmetricRelation)
*/
fof(a8545,axiom,s_instance(s_causesSubclass_m, s_AsymmetricRelation)).

/*
(domainSubclass causesSubclass 1 Process)
*/
fof(a8546,axiom,s_domainSubclass(s_causesSubclass_m, 1, s_Process)).

/*
(domainSubclass causesSubclass 2 Process)
*/
fof(a8547,axiom,s_domainSubclass(s_causesSubclass_m, 2, s_Process)).

/*
(forall (?PROC2 ?PROC1)
 (forall (?INST2)
  (exists (?INST1)
   (and (instance ?INST1 Process)
        (=> (instance ?INST2 Process)
         (=>
          (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process)
               (subclass ?PROC2 Process) (instance ?PROC2 SetOrClass))
          (=> (causesSubclass ?PROC1 ?PROC2)
           (=> (instance ?INST2 ?PROC2)
            (and (instance ?INST1 ?PROC1)
                 (causes ?INST1 ?INST2))))))))))
*/
fof(a8548,axiom,! [PROC2,PROC1] : (! [INST2] : (? [INST1] : ((s_instance(INST1, s_Process) & (s_instance(INST2, s_Process) => ((s_instance(PROC1, s_SetOrClass) & s_subclass(PROC1, s_Process) & s_subclass(PROC2, s_Process) & s_instance(PROC2, s_SetOrClass)) => (s_causesSubclass(PROC1, PROC2) => (s_instance(INST2, PROC2) => (s_instance(INST1, PROC1) & s_causes(INST1, INST2))))))))))).

/*
(instance causesProposition BinaryPredicate)
*/
fof(a8549,axiom,s_instance(s_causesProposition_m, s_BinaryPredicate)).

/*
(instance causesProposition AsymmetricRelation)
*/
fof(a8550,axiom,s_instance(s_causesProposition_m, s_AsymmetricRelation)).

/*
(forall (?T1 ?T2 ?SIT2 ?SIT1)
 (=> (and (instance ?SIT2 Formula) (instance ?SIT1 Formula))
  (=>
   (and (holdsDuring ?T2 ?SIT2)
        (and (holdsDuring ?T1 ?SIT1)
             (and (instance ?T1 TimeInterval)
                  (and (instance ?T2 TimeInterval)
                       (causesProposition ?SIT1 ?SIT2)))))
   (beforeOrEqual (BeginFn ?T1) (BeginFn ?T2)))))
*/
fof(a8551,axiom,! [T1,T2,SIT2,SIT1] : (((s_instance(SIT2, s_Formula) & s_instance(SIT1, s_Formula)) => ((s_holdsDuring(T2, SIT2) & (s_holdsDuring(T1, SIT1) & (s_instance(T1, s_TimeInterval) & (s_instance(T2, s_TimeInterval) & s_causesProposition(SIT1, SIT2))))) => s_beforeOrEqual(s_BeginFn(T1), s_BeginFn(T2)))))).

/*
(instance copy BinaryPredicate)
*/
fof(a8552,axiom,s_instance(s_copy_m, s_BinaryPredicate)).

/*
(instance copy EquivalenceRelation)
*/
fof(a8553,axiom,s_instance(s_copy_m, s_EquivalenceRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?ATTR)
  (=> (instance ?ATTR Attribute)
   (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
    (=> (copy ?OBJ1 ?OBJ2)
     (=> (attribute ?OBJ1 ?ATTR) (attribute ?OBJ2 ?ATTR)))))))
*/
fof(a8554,axiom,! [OBJ2,OBJ1] : (! [ATTR] : ((s_instance(ATTR, s_Attribute) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_copy(OBJ1, OBJ2) => (s_attribute(OBJ1, ATTR) => s_attribute(OBJ2, ATTR)))))))).

/*
(instance time BinaryPredicate)
*/
fof(a8555,axiom,s_instance(s_time_m, s_BinaryPredicate)).

/*
(instance time TemporalRelation)
*/
fof(a8556,axiom,s_instance(s_time_m, s_TemporalRelation)).

/*
(instance time AsymmetricRelation)
*/
fof(a8557,axiom,s_instance(s_time_m, s_AsymmetricRelation)).

/*
(instance time TotalValuedRelation)
*/
fof(a8558,axiom,s_instance(s_time_m, s_TotalValuedRelation)).

/*
(instance holdsDuring BinaryPredicate)
*/
fof(a8559,axiom,s_instance(s_holdsDuring_m, s_BinaryPredicate)).

/*
(instance holdsDuring AsymmetricRelation)
*/
fof(a8560,axiom,s_instance(s_holdsDuring_m, s_AsymmetricRelation)).

/*
(forall (?SITUATION2 ?SITUATION1 ?TIME)
 (=>
  (and (instance ?TIME TimePosition) (instance ?SITUATION1 Formula)
       (instance ?SITUATION2 Formula))
  (=>
   (and (holdsDuring ?TIME ?SITUATION1)
        (entails ?SITUATION1 ?SITUATION2))
   (holdsDuring ?TIME ?SITUATION2))))
*/
fof(a8561,axiom,! [SITUATION2,SITUATION1,TIME] : (((s_instance(TIME, s_TimePosition) & s_instance(SITUATION1, s_Formula) & s_instance(SITUATION2, s_Formula)) => ((s_holdsDuring(TIME, SITUATION1) & s_entails(SITUATION1, SITUATION2)) => s_holdsDuring(TIME, SITUATION2))))).

/*
(forall (?SITUATION ?TIME)
 (=> (and (instance ?TIME TimePosition) (instance ?SITUATION Formula))
  (=> (holdsDuring ?TIME (not ?SITUATION))
   (not (holdsDuring ?TIME ?SITUATION)))))
*/
%% no translation to TPTP available.

/*
(instance capability TernaryPredicate)
*/
fof(a8562,axiom,s_instance(s_capability_m, s_TernaryPredicate)).

/*
(domainSubclass capability 1 Process)
*/
fof(a8563,axiom,s_domainSubclass(s_capability_m, 1, s_Process)).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance instrument CaseRole)
        (and (instrument ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC instrument ?ARG2))))
*/
fof(a8564,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_instrument_m, s_CaseRole) & (s_instrument(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_instrument_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance suffers CaseRole)
        (and (suffers ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC suffers ?ARG2))))
*/
fof(a8565,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_suffers_m, s_CaseRole) & (s_suffers(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_suffers_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance destination CaseRole)
        (and (destination ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC destination ?ARG2))))
*/
fof(a8566,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_destination_m, s_CaseRole) & (s_destination(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_destination_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Substance) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance reactant CaseRole)
        (and (reactant ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC reactant ?ARG2))))
*/
fof(a8567,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Substance) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_reactant_m, s_CaseRole) & (s_reactant(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_reactant_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance patient CaseRole)
        (and (patient ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC patient ?ARG2))))
*/
fof(a8568,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_patient_m, s_CaseRole) & (s_patient(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_patient_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance eventLocated CaseRole)
        (and (eventLocated ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC eventLocated ?ARG2))))
*/
fof(a8569,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_eventLocated_m, s_CaseRole) & (s_eventLocated(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_eventLocated_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 CognitiveAgent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance serviceRecipient CaseRole)
        (and (serviceRecipient ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC serviceRecipient ?ARG2))))
*/
fof(a8570,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_CognitiveAgent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_serviceRecipient_m, s_CaseRole) & (s_serviceRecipient(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_serviceRecipient_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance experimentalControl CaseRole)
        (and (experimentalControl ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC experimentalControl ?ARG2))))
*/
fof(a8571,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_experimentalControl_m, s_CaseRole) & (s_experimentalControl(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_experimentalControl_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance resource CaseRole)
        (and (resource ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC resource ?ARG2))))
*/
fof(a8572,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_resource_m, s_CaseRole) & (s_resource(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_resource_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 TransportationDevice)
       (instance ?PROC SetOrClass) (subclass ?PROC Process))
  (=>
   (and (instance conveyance CaseRole)
        (and (conveyance ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC conveyance ?ARG2))))
*/
fof(a8573,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_TransportationDevice) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_conveyance_m, s_CaseRole) & (s_conveyance(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_conveyance_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 CognitiveAgent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance defendant CaseRole)
        (and (defendant ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC defendant ?ARG2))))
*/
fof(a8574,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_CognitiveAgent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_defendant_m, s_CaseRole) & (s_defendant(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_defendant_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (subclass ?PROC Process) (instance ?PROC SetOrClass)
       (instance ?ARG2 PositionalAttribute) (instance ?ARG2 Object))
  (=>
   (and (instance direction CaseRole)
        (and (direction ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC direction ?ARG2))))
*/
fof(a8575,axiom,! [PROC,ARG2,ARG1] : (((s_subclass(PROC, s_Process) & s_instance(PROC, s_SetOrClass) & s_instance(ARG2, s_PositionalAttribute) & s_instance(ARG2, s_Object)) => ((s_instance(s_direction_m, s_CaseRole) & (s_direction(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_direction_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Human) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance attends CaseRole)
        (and (attends ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC attends ?ARG2))))
*/
fof(a8576,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Human) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_attends_m, s_CaseRole) & (s_attends(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_attends_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance changesLocation CaseRole)
        (and (changesLocation ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC changesLocation ?ARG2))))
*/
fof(a8577,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_changesLocation_m, s_CaseRole) & (s_changesLocation(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_changesLocation_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance losesControl CaseRole)
        (and (losesControl ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC losesControl ?ARG2))))
*/
fof(a8578,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_losesControl_m, s_CaseRole) & (s_losesControl(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_losesControl_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 CognitiveAgent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance plaintiff CaseRole)
        (and (plaintiff ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC plaintiff ?ARG2))))
*/
fof(a8579,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_CognitiveAgent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_plaintiff_m, s_CaseRole) & (s_plaintiff(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_plaintiff_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Animal) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance detainee CaseRole)
        (and (detainee ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC detainee ?ARG2))))
*/
fof(a8580,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Animal) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_detainee_m, s_CaseRole) & (s_detainee(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_detainee_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance contestParticipant CaseRole)
        (and (contestParticipant ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC contestParticipant ?ARG2))))
*/
fof(a8581,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_contestParticipant_m, s_CaseRole) & (s_contestParticipant(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_contestParticipant_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Substance) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance reagent CaseRole)
        (and (reagent ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC reagent ?ARG2))))
*/
fof(a8582,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Substance) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_reagent_m, s_CaseRole) & (s_reagent(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_reagent_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance transported CaseRole)
        (and (transported ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC transported ?ARG2))))
*/
fof(a8583,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_transported_m, s_CaseRole) & (s_transported(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_transported_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance cargo CaseRole)
        (and (cargo ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC cargo ?ARG2))))
*/
fof(a8584,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_cargo_m, s_CaseRole) & (s_cargo(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_cargo_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance experiencer CaseRole)
        (and (experiencer ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC experiencer ?ARG2))))
*/
fof(a8585,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_experiencer_m, s_CaseRole) & (s_experiencer(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_experiencer_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance result CaseRole)
        (and (result ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC result ?ARG2))))
*/
fof(a8586,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_result_m, s_CaseRole) & (s_result(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_result_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance targetInAttack CaseRole)
        (and (targetInAttack ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC targetInAttack ?ARG2))))
*/
fof(a8587,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_targetInAttack_m, s_CaseRole) & (s_targetInAttack(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_targetInAttack_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance origin CaseRole)
        (and (origin ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC origin ?ARG2))))
*/
fof(a8588,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_origin_m, s_CaseRole) & (s_origin(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_origin_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance moves CaseRole)
        (and (moves ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC moves ?ARG2))))
*/
fof(a8589,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_moves_m, s_CaseRole) & (s_moves(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_moves_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance controlled CaseRole)
        (and (controlled ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC controlled ?ARG2))))
*/
fof(a8590,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_controlled_m, s_CaseRole) & (s_controlled(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_controlled_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 CognitiveAgent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance serviceProvider CaseRole)
        (and (serviceProvider ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC serviceProvider ?ARG2))))
*/
fof(a8591,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_CognitiveAgent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_serviceProvider_m, s_CaseRole) & (s_serviceProvider(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_serviceProvider_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance agent CaseRole)
        (and (agent ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC agent ?ARG2))))
*/
fof(a8592,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_agent_m, s_CaseRole) & (s_agent(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_agent_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance path CaseRole)
        (and (path ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC path ?ARG2))))
*/
fof(a8593,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_path_m, s_CaseRole) & (s_path(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_path_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance arrested CaseRole)
        (and (arrested ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC arrested ?ARG2))))
*/
fof(a8594,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_arrested_m, s_CaseRole) & (s_arrested(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_arrested_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance eventPartlyLocated CaseRole)
        (and (eventPartlyLocated ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC eventPartlyLocated ?ARG2))))
*/
fof(a8595,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_eventPartlyLocated_m, s_CaseRole) & (s_eventPartlyLocated(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_eventPartlyLocated_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Object) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance resourceExhausted CaseRole)
        (and (resourceExhausted ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC resourceExhausted ?ARG2))))
*/
fof(a8596,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Object) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_resourceExhausted_m, s_CaseRole) & (s_resourceExhausted(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_resourceExhausted_m, ARG2))))).

/*
(forall (?PROC ?ARG2 ?ARG1)
 (=>
  (and (instance ?ARG2 Agent) (instance ?PROC SetOrClass)
       (subclass ?PROC Process))
  (=>
   (and (instance gainsControl CaseRole)
        (and (gainsControl ?ARG1 ?ARG2)
             (and (instance ?ARG1 ?PROC) (subclass ?PROC Process))))
   (capability ?PROC gainsControl ?ARG2))))
*/
fof(a8597,axiom,! [PROC,ARG2,ARG1] : (((s_instance(ARG2, s_Agent) & s_instance(PROC, s_SetOrClass) & s_subclass(PROC, s_Process)) => ((s_instance(s_gainsControl_m, s_CaseRole) & (s_gainsControl(ARG1, ARG2) & (s_instance(ARG1, PROC) & s_subclass(PROC, s_Process)))) => s_capability(PROC, s_gainsControl_m, ARG2))))).

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS instrument ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (instrument ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS suffers ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (suffers ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS destination ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (destination ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Substance) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS reactant ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (reactant ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS patient ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (patient ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS eventLocated ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (eventLocated ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ CognitiveAgent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS serviceRecipient ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (serviceRecipient ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS experimentalControl ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (experimentalControl ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS resource ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (resource ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ TransportationDevice) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS conveyance ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (conveyance ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ CognitiveAgent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS defendant ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (defendant ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?PROCESS SetOrClass) (subclass ?PROCESS Process)
       (instance ?OBJ Object) (instance ?OBJ PositionalAttribute))
  (=> (capability ?PROCESS direction ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (direction ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Human) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS attends ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (attends ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS changesLocation ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (changesLocation ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS losesControl ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (losesControl ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ CognitiveAgent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS plaintiff ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (plaintiff ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Animal) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS detainee ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (detainee ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS contestParticipant ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (contestParticipant ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Substance) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS reagent ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (reagent ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS transported ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (transported ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS cargo ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (cargo ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS experiencer ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (experiencer ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS result ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (result ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS targetInAttack ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (targetInAttack ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS origin ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (origin ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS moves ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (moves ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS controlled ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (controlled ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ CognitiveAgent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS serviceProvider ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (serviceProvider ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS agent ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (agent ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS path ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (path ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS arrested ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (arrested ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS eventPartlyLocated ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (eventPartlyLocated ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Object) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS resourceExhausted ?OBJ)
   (modalAttribute
    (exists (?P)
     (and (instance ?P ?PROCESS) (resourceExhausted ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?PROCESS)
 (=>
  (and (instance ?OBJ Agent) (subclass ?PROCESS Process)
       (instance ?PROCESS SetOrClass))
  (=> (capability ?PROCESS gainsControl ?OBJ)
   (modalAttribute
    (exists (?P) (and (instance ?P ?PROCESS) (gainsControl ?P ?OBJ)))
    Possibility))))
*/
%% no translation to TPTP available.

/*
(instance exploits BinaryPredicate)
*/
fof(a8598,axiom,s_instance(s_exploits_m, s_BinaryPredicate)).

/*
(instance exploits AsymmetricRelation)
*/
fof(a8599,axiom,s_instance(s_exploits_m, s_AsymmetricRelation)).

/*
(forall (?AGENT ?OBJ)
 (exists (?PROCESS)
  (and (instance ?PROCESS Process)
       (=> (and (instance ?OBJ Object) (instance ?AGENT Agent))
        (=> (exploits ?OBJ ?AGENT)
         (and (agent ?PROCESS ?AGENT) (resource ?PROCESS ?OBJ)))))))
*/
fof(a8600,axiom,! [AGENT,OBJ] : (? [PROCESS] : ((s_instance(PROCESS, s_Process) & ((s_instance(OBJ, s_Object) & s_instance(AGENT, s_Agent)) => (s_exploits(OBJ, AGENT) => (s_agent(PROCESS, AGENT) & s_resource(PROCESS, OBJ)))))))).

/*
(instance hasPurpose BinaryPredicate)
*/
fof(a8601,axiom,s_instance(s_hasPurpose_m, s_BinaryPredicate)).

/*
(instance hasPurpose AsymmetricRelation)
*/
fof(a8602,axiom,s_instance(s_hasPurpose_m, s_AsymmetricRelation)).

/*
(instance hasPurposeForAgent TernaryPredicate)
*/
fof(a8603,axiom,s_instance(s_hasPurposeForAgent_m, s_TernaryPredicate)).

/*
(forall (?PURPOSE ?THING)
 (exists (?AGENT)
  (and (instance ?AGENT Agent)
       (=> (and (instance ?THING Physical) (instance ?PURPOSE Formula))
        (=> (hasPurpose ?THING ?PURPOSE)
         (hasPurposeForAgent ?THING ?PURPOSE ?AGENT))))))
*/
fof(a8604,axiom,! [PURPOSE,THING] : (? [AGENT] : ((s_instance(AGENT, s_Agent) & ((s_instance(THING, s_Physical) & s_instance(PURPOSE, s_Formula)) => (s_hasPurpose(THING, PURPOSE) => s_hasPurposeForAgent(THING, PURPOSE, AGENT))))))).

/*
(instance hasSkill BinaryPredicate)
*/
fof(a8605,axiom,s_instance(s_hasSkill_m, s_BinaryPredicate)).

/*
(instance hasSkill AsymmetricRelation)
*/
fof(a8606,axiom,s_instance(s_hasSkill_m, s_AsymmetricRelation)).

/*
(domainSubclass hasSkill 1 Process)
*/
fof(a8607,axiom,s_domainSubclass(s_hasSkill_m, 1, s_Process)).

/*
(forall (?AGENT ?PROC)
 (=> (and (subclass ?PROC Process) (instance ?AGENT Agent))
  (=> (hasSkill ?PROC ?AGENT) (capability ?PROC agent ?AGENT))))
*/
fof(a8608,axiom,! [AGENT,PROC] : (((s_subclass(PROC, s_Process) & s_instance(AGENT, s_Agent)) => (s_hasSkill(PROC, AGENT) => s_capability(PROC, s_agent_m, AGENT))))).

/*
(instance confersNorm TernaryPredicate)
*/
fof(a8609,axiom,s_instance(s_confersNorm_m, s_TernaryPredicate)).

/*
(forall (?TIME ?ENTITY ?NORM ?FORMULA)
 (=>
  (and (instance ?FORMULA Formula) (instance ?NORM ObjectiveNorm)
       (instance ?ENTITY Entity) (instance ?TIME TimePosition))
  (=> (holdsDuring ?TIME (confersNorm ?ENTITY ?FORMULA ?NORM))
   (and (holdsDuring (ImmediatePastFn ?TIME)
         (not (modalAttribute ?FORMULA ?NORM)))
        (holdsDuring (ImmediateFutureFn ?TIME)
         (modalAttribute ?FORMULA ?NORM))))))
*/
%% no translation to TPTP available.

/*
(instance deprivesNorm TernaryPredicate)
*/
fof(a8610,axiom,s_instance(s_deprivesNorm_m, s_TernaryPredicate)).

/*
(disjointRelation deprivesNorm confersNorm)
*/
fof(a8611,axiom,s_disjointRelation(s_deprivesNorm_m, s_confersNorm_m)).

/*
(forall (?TIME ?ENTITY ?NORM ?FORMULA)
 (=>
  (and (instance ?FORMULA Formula) (instance ?NORM ObjectiveNorm)
       (instance ?ENTITY Entity) (instance ?TIME TimePosition))
  (=> (holdsDuring ?TIME (deprivesNorm ?ENTITY ?FORMULA ?NORM))
   (and (holdsDuring (ImmediatePastFn ?TIME)
         (modalAttribute ?FORMULA ?NORM))
        (holdsDuring (ImmediateFutureFn ?TIME)
         (not (modalAttribute ?FORMULA ?NORM)))))))
*/
%% no translation to TPTP available.

/*
(instance partlyLocated SpatialRelation)
*/
fof(a8612,axiom,s_instance(s_partlyLocated_m, s_SpatialRelation)).

/*
(instance partlyLocated BinaryPredicate)
*/
fof(a8613,axiom,s_instance(s_partlyLocated_m, s_BinaryPredicate)).

/*
(instance partlyLocated TotalValuedRelation)
*/
fof(a8614,axiom,s_instance(s_partlyLocated_m, s_TotalValuedRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (instance ?OBJ2 Object)
  (=> (and (instance ?OBJ1 Object) (partlyLocated ?OBJ1 ?OBJ2))
   (overlapsSpatially ?OBJ1 ?OBJ2))))
*/
fof(a8615,axiom,! [OBJ2,OBJ1] : ((s_instance(OBJ2, s_Object) => ((s_instance(OBJ1, s_Object) & s_partlyLocated(OBJ1, OBJ2)) => s_overlapsSpatially(OBJ1, OBJ2))))).

/*
(forall (?OBJ2 ?OBJ1)
 (exists (?SUB)
  (and (instance ?SUB Object)
       (=> (instance ?OBJ2 Object)
        (=> (and (instance ?OBJ1 Object) (partlyLocated ?OBJ1 ?OBJ2))
         (and (part ?SUB ?OBJ1) (located ?SUB ?OBJ2)))))))
*/
fof(a8616,axiom,! [OBJ2,OBJ1] : (? [SUB] : ((s_instance(SUB, s_Object) & (s_instance(OBJ2, s_Object) => ((s_instance(OBJ1, s_Object) & s_partlyLocated(OBJ1, OBJ2)) => (s_part(SUB, OBJ1) & s_located(SUB, OBJ2)))))))).

/*
(instance AntisymmetricRelation SetOrClass)
*/
fof(a8617,axiom,s_instance(s_AntisymmetricRelation, s_SetOrClass)).

/*
(instance located AntisymmetricRelation)
*/
fof(a8618,axiom,s_instance(s_located_m, s_AntisymmetricRelation)).

/*
(instance located TransitiveRelation)
*/
fof(a8619,axiom,s_instance(s_located_m, s_TransitiveRelation)).

/*
(instance located TotalValuedRelation)
*/
fof(a8620,axiom,s_instance(s_located_m, s_TotalValuedRelation)).

/*
(subrelation located partlyLocated)
*/
fof(a8621,axiom,s_subrelation(s_located_m, s_partlyLocated_m)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?SUB)
  (=> (instance ?SUB Object)
   (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
    (=> (located ?OBJ1 ?OBJ2)
     (=> (part ?SUB ?OBJ1) (located ?SUB ?OBJ2)))))))
*/
fof(a8622,axiom,! [OBJ2,OBJ1] : (! [SUB] : ((s_instance(SUB, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_located(OBJ1, OBJ2) => (s_part(SUB, OBJ1) => s_located(SUB, OBJ2)))))))).

/*
(instance eventPartlyLocated CaseRole)
*/
fof(a8623,axiom,s_instance(s_eventPartlyLocated_m, s_CaseRole)).

/*
(instance eventPartlyLocated PartialValuedRelation)
*/
fof(a8624,axiom,s_instance(s_eventPartlyLocated_m, s_PartialValuedRelation)).

/*
(subrelation eventPartlyLocated partlyLocated)
*/
fof(a8625,axiom,s_subrelation(s_eventPartlyLocated_m, s_partlyLocated_m)).

/*
(forall (?OBJ ?PROC)
 (exists (?SUB)
  (and (instance ?SUB Process)
       (=> (and (instance ?PROC Process) (instance ?OBJ Object))
        (=> (eventPartlyLocated ?PROC ?OBJ)
         (and (subProcess ?SUB ?PROC) (eventLocated ?SUB ?OBJ)))))))
*/
fof(a8626,axiom,! [OBJ,PROC] : (? [SUB] : ((s_instance(SUB, s_Process) & ((s_instance(PROC, s_Process) & s_instance(OBJ, s_Object)) => (s_eventPartlyLocated(PROC, OBJ) => (s_subProcess(SUB, PROC) & s_eventLocated(SUB, OBJ)))))))).

/*
(forall (?LOC ?PROCESS)
 (=> (and (instance ?PROCESS Process) (instance ?LOC Object))
  (=> (origin ?PROCESS ?LOC) (eventPartlyLocated ?PROCESS ?LOC))))
*/
fof(a8627,axiom,! [LOC,PROCESS] : (((s_instance(PROCESS, s_Process) & s_instance(LOC, s_Object)) => (s_origin(PROCESS, LOC) => s_eventPartlyLocated(PROCESS, LOC))))).

/*
(forall (?LOC ?PROCESS)
 (=> (and (instance ?PROCESS Process) (instance ?LOC Object))
  (=> (destination ?PROCESS ?LOC) (eventPartlyLocated ?PROCESS ?LOC))))
*/
fof(a8628,axiom,! [LOC,PROCESS] : (((s_instance(PROCESS, s_Process) & s_instance(LOC, s_Object)) => (s_destination(PROCESS, LOC) => s_eventPartlyLocated(PROCESS, LOC))))).

/*
(subrelation eventPartlyLocated involvedInEvent)
*/
fof(a8629,axiom,s_subrelation(s_eventPartlyLocated_m, s_involvedInEvent_m)).

/*
(subrelation eventLocated eventPartlyLocated)
*/
fof(a8630,axiom,s_subrelation(s_eventLocated_m, s_eventPartlyLocated_m)).

/*
(instance eventLocated CaseRole)
*/
fof(a8631,axiom,s_instance(s_eventLocated_m, s_CaseRole)).

/*
(instance eventLocated TotalValuedRelation)
*/
fof(a8632,axiom,s_instance(s_eventLocated_m, s_TotalValuedRelation)).

/*
(forall (?OBJ ?PROCESS)
 (forall (?SUB)
  (=> (instance ?SUB Process)
   (=> (and (instance ?PROCESS Process) (instance ?OBJ Object))
    (=> (eventLocated ?PROCESS ?OBJ)
     (=> (subProcess ?SUB ?PROCESS) (eventLocated ?SUB ?OBJ)))))))
*/
fof(a8633,axiom,! [OBJ,PROCESS] : (! [SUB] : ((s_instance(SUB, s_Process) => ((s_instance(PROCESS, s_Process) & s_instance(OBJ, s_Object)) => (s_eventLocated(PROCESS, OBJ) => (s_subProcess(SUB, PROCESS) => s_eventLocated(SUB, OBJ)))))))).

/*
(subrelation exactlyLocated located)
*/
fof(a8634,axiom,s_subrelation(s_exactlyLocated_m, s_located_m)).

/*
(forall (?REGION ?OBJ)
 (forall (?OTHEROBJ)
  (=> (instance ?OTHEROBJ Physical)
   (=> (and (instance ?OBJ Physical) (instance ?REGION Object))
    (=> (exactlyLocated ?OBJ ?REGION)
     (not (and (exactlyLocated ?OTHEROBJ ?REGION)
               (not (equal ?OTHEROBJ ?OBJ)))))))))
*/
fof(a8635,axiom,! [REGION,OBJ] : (! [OTHEROBJ] : ((s_instance(OTHEROBJ, s_Physical) => ((s_instance(OBJ, s_Physical) & s_instance(REGION, s_Object)) => (s_exactlyLocated(OBJ, REGION) => (~ (s_exactlyLocated(OTHEROBJ, REGION) & (~ (OTHEROBJ = OBJ)))))))))).

/*
(instance between SpatialRelation)
*/
fof(a8636,axiom,s_instance(s_between_m, s_SpatialRelation)).

/*
(instance between TernaryPredicate)
*/
fof(a8637,axiom,s_instance(s_between_m, s_TernaryPredicate)).

/*
(forall (?END1 ?END2 ?MID)
 (=>
  (and (instance ?MID Object) (instance ?END2 Object)
       (instance ?END1 Object))
  (=> (between ?END1 ?MID ?END2) (between ?END2 ?MID ?END1))))
*/
fof(a8638,axiom,! [END1,END2,MID] : (((s_instance(MID, s_Object) & s_instance(END2, s_Object) & s_instance(END1, s_Object)) => (s_between(END1, MID, END2) => s_between(END2, MID, END1))))).

/*
(instance betweenOnPath SpatialRelation)
*/
fof(a8639,axiom,s_instance(s_betweenOnPath_m, s_SpatialRelation)).

/*
(instance QuaternaryPredicate SetOrClass)
*/
fof(a8640,axiom,s_instance(s_QuaternaryPredicate, s_SetOrClass)).

/*
(instance betweenOnPath QuaternaryPredicate)
*/
fof(a8641,axiom,s_instance(s_betweenOnPath_m, s_QuaternaryPredicate)).

/*
(forall (?OBJ1 ?OBJ2 ?PATH ?OBJ3)
 (=>
  (and (instance ?OBJ3 Object) (instance ?PATH Object)
       (instance ?OBJ2 Object) (instance ?OBJ1 Object))
  (=> (betweenOnPath ?OBJ1 ?OBJ2 ?OBJ3 ?PATH)
   (between ?OBJ1 ?OBJ2 ?OBJ3))))
*/
fof(a8642,axiom,! [OBJ1,OBJ2,PATH,OBJ3] : (((s_instance(OBJ3, s_Object) & s_instance(PATH, s_Object) & s_instance(OBJ2, s_Object) & s_instance(OBJ1, s_Object)) => (s_betweenOnPath(OBJ1, OBJ2, OBJ3, PATH) => s_between(OBJ1, OBJ2, OBJ3))))).

/*
(instance traverses BinaryPredicate)
*/
fof(a8643,axiom,s_instance(s_traverses_m, s_BinaryPredicate)).

/*
(instance traverses SpatialRelation)
*/
fof(a8644,axiom,s_instance(s_traverses_m, s_SpatialRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (traverses ?OBJ1 ?OBJ2)
   (or (crosses ?OBJ1 ?OBJ2) (penetrates ?OBJ1 ?OBJ2)))))
*/
fof(a8645,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_traverses(OBJ1, OBJ2) => (s_crosses(OBJ1, OBJ2) | s_penetrates(OBJ1, OBJ2)))))).

/*
(subrelation crosses traverses)
*/
fof(a8646,axiom,s_subrelation(s_crosses_m, s_traverses_m)).

/*
(instance crosses AsymmetricRelation)
*/
fof(a8647,axiom,s_instance(s_crosses_m, s_AsymmetricRelation)).

/*
(instance crosses TransitiveRelation)
*/
fof(a8648,axiom,s_instance(s_crosses_m, s_TransitiveRelation)).

/*
(disjointRelation crosses connected)
*/
fof(a8649,axiom,s_disjointRelation(s_crosses_m, s_connected_m)).

/*
(subrelation penetrates traverses)
*/
fof(a8650,axiom,s_subrelation(s_penetrates_m, s_traverses_m)).

/*
(subrelation penetrates meetsSpatially)
*/
fof(a8651,axiom,s_subrelation(s_penetrates_m, s_meetsSpatially_m)).

/*
(instance penetrates AsymmetricRelation)
*/
fof(a8652,axiom,s_instance(s_penetrates_m, s_AsymmetricRelation)).

/*
(instance penetrates IntransitiveRelation)
*/
fof(a8653,axiom,s_instance(s_penetrates_m, s_IntransitiveRelation)).

/*
(instance penetrates PartialValuedRelation)
*/
fof(a8654,axiom,s_instance(s_penetrates_m, s_PartialValuedRelation)).

/*
(instance WhereFn BinaryFunction)
*/
fof(a8655,axiom,s_instance(s_WhereFn_m, s_BinaryFunction)).

/*
(instance WhereFn SpatialRelation)
*/
fof(a8656,axiom,s_instance(s_WhereFn_m, s_SpatialRelation)).

/*
(instance WhereFn TotalValuedRelation)
*/
fof(a8657,axiom,s_instance(s_WhereFn_m, s_TotalValuedRelation)).

/*
(range WhereFn Region)
*/
fof(a8658,axiom,s_range(s_WhereFn_m, s_Region)).

/*
(forall (?REGION ?TIME ?THING)
 (=>
  (and (instance ?THING Physical) (instance ?TIME TimePoint)
       (instance ?REGION Object))
  (<=> (equal (WhereFn ?THING ?TIME) ?REGION)
   (holdsDuring ?TIME (exactlyLocated ?THING ?REGION)))))
*/
%% no translation to TPTP available.

/*
(instance possesses BinaryPredicate)
*/
fof(a8659,axiom,s_instance(s_possesses_m, s_BinaryPredicate)).

/*
(instance possesses AsymmetricRelation)
*/
fof(a8660,axiom,s_instance(s_possesses_m, s_AsymmetricRelation)).

/*
(forall (?OBJ ?PERSON)
 (=> (and (instance ?PERSON Agent) (instance ?OBJ Object))
  (=> (possesses ?PERSON ?OBJ)
   (modalAttribute (uses ?OBJ ?PERSON) Permission))))
*/
%% no translation to TPTP available.

/*
(forall (?AGENT2 ?TIME ?OBJ ?AGENT1)
 (=>
  (and (instance ?AGENT2 Agent) (instance ?OBJ Object)
       (instance ?AGENT1 Agent))
  (=>
   (and (instance ?TIME TimePosition)
        (and (holdsDuring ?TIME (possesses ?AGENT1 ?OBJ))
             (holdsDuring ?TIME (possesses ?AGENT2 ?OBJ))))
   (equal ?AGENT1 ?AGENT2))))
*/
%% no translation to TPTP available.

/*
(instance PropertyFn UnaryFunction)
*/
fof(a8661,axiom,s_instance(s_PropertyFn_m, s_UnaryFunction)).

/*
(instance PropertyFn TotalValuedRelation)
*/
fof(a8662,axiom,s_instance(s_PropertyFn_m, s_TotalValuedRelation)).

/*
(range PropertyFn Set)
*/
fof(a8663,axiom,s_range(s_PropertyFn_m, s_Set)).

/*
(forall (?PERSON ?OBJ)
 (=> (and (instance ?OBJ Object) (instance ?PERSON Agent))
  (<=> (instance ?OBJ (PropertyFn ?PERSON)) (possesses ?PERSON ?OBJ))))
*/
fof(a8664,axiom,! [PERSON,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(PERSON, s_Agent)) => (s_instance(OBJ, s_PropertyFn(PERSON)) <=> s_possesses(PERSON, OBJ))))).

/*
(instance precondition BinaryPredicate)
*/
fof(a8665,axiom,s_instance(s_precondition_m, s_BinaryPredicate)).

/*
(instance precondition AsymmetricRelation)
*/
fof(a8666,axiom,s_instance(s_precondition_m, s_AsymmetricRelation)).

/*
(instance precondition TransitiveRelation)
*/
fof(a8667,axiom,s_instance(s_precondition_m, s_TransitiveRelation)).

/*
(domainSubclass precondition 1 Process)
*/
fof(a8668,axiom,s_domainSubclass(s_precondition_m, 1, s_Process)).

/*
(domainSubclass precondition 2 Process)
*/
fof(a8669,axiom,s_domainSubclass(s_precondition_m, 2, s_Process)).

/*
(forall (?PROC2 ?PROC1)
 (forall (?INST2)
  (exists (?INST1)
   (and (instance ?INST1 Entity)
        (=> (instance ?INST2 Entity)
         (=>
          (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process)
               (subclass ?PROC2 Process) (instance ?PROC2 SetOrClass))
          (=> (precondition ?PROC1 ?PROC2)
           (=> (instance ?INST2 ?PROC2) (instance ?INST1 ?PROC1)))))))))
*/
fof(a8670,axiom,! [PROC2,PROC1] : (! [INST2] : (? [INST1] : ((s_instance(INST1, s_Entity) & (s_instance(INST2, s_Entity) => ((s_instance(PROC1, s_SetOrClass) & s_subclass(PROC1, s_Process) & s_subclass(PROC2, s_Process) & s_instance(PROC2, s_SetOrClass)) => (s_precondition(PROC1, PROC2) => (s_instance(INST2, PROC2) => s_instance(INST1, PROC1)))))))))).

/*
(instance hindersSubclass BinaryPredicate)
*/
fof(a8671,axiom,s_instance(s_hindersSubclass_m, s_BinaryPredicate)).

/*
(instance hindersSubclass IrreflexiveRelation)
*/
fof(a8672,axiom,s_instance(s_hindersSubclass_m, s_IrreflexiveRelation)).

/*
(instance hindersSubclass PartialValuedRelation)
*/
fof(a8673,axiom,s_instance(s_hindersSubclass_m, s_PartialValuedRelation)).

/*
(domainSubclass hindersSubclass 1 Process)
*/
fof(a8674,axiom,s_domainSubclass(s_hindersSubclass_m, 1, s_Process)).

/*
(domainSubclass hindersSubclass 2 Process)
*/
fof(a8675,axiom,s_domainSubclass(s_hindersSubclass_m, 2, s_Process)).

/*
(forall (?PROC2 ?PROC1)
 (forall (?TIME ?PLACE)
  (=> (and (instance ?PLACE Object) (instance ?TIME TimePosition))
   (=>
    (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process)
         (subclass ?PROC2 Process) (instance ?PROC2 SetOrClass))
    (=> (hindersSubclass ?PROC1 ?PROC2)
     (decreasesLikelihood
      (holdsDuring ?TIME
       (exists (?INST1)
        (and (instance ?INST1 ?PROC1) (eventLocated ?INST1 ?PLACE))))
      (holdsDuring ?TIME
       (exists (?INST2)
        (and (instance ?INST2 ?PROC2)
             (eventLocated ?INST2 ?PLACE))))))))))
*/
%% no translation to TPTP available.

/*
(instance preventsSubclass BinaryPredicate)
*/
fof(a8676,axiom,s_instance(s_preventsSubclass_m, s_BinaryPredicate)).

/*
(instance preventsSubclass IrreflexiveRelation)
*/
fof(a8677,axiom,s_instance(s_preventsSubclass_m, s_IrreflexiveRelation)).

/*
(instance preventsSubclass PartialValuedRelation)
*/
fof(a8678,axiom,s_instance(s_preventsSubclass_m, s_PartialValuedRelation)).

/*
(domainSubclass preventsSubclass 1 Process)
*/
fof(a8679,axiom,s_domainSubclass(s_preventsSubclass_m, 1, s_Process)).

/*
(domainSubclass preventsSubclass 2 Process)
*/
fof(a8680,axiom,s_domainSubclass(s_preventsSubclass_m, 2, s_Process)).

/*
(forall (?PROC2 ?PROC1)
 (forall (?TIME ?PLACE)
  (=> (and (instance ?PLACE Object) (instance ?TIME TimePosition))
   (=>
    (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process)
         (subclass ?PROC2 Process) (instance ?PROC2 SetOrClass))
    (=> (preventsSubclass ?PROC1 ?PROC2)
     (=>
      (holdsDuring ?TIME
       (exists (?INST1)
        (and (instance ?INST1 ?PROC1) (eventLocated ?INST1 ?PLACE))))
      (not (holdsDuring ?TIME
            (exists (?INST2)
             (and (instance ?INST2 ?PROC2)
                  (eventLocated ?INST2 ?PLACE)))))))))))
*/
%% no translation to TPTP available.

/*
(instance prevents BinaryPredicate)
*/
fof(a8681,axiom,s_instance(s_prevents_m, s_BinaryPredicate)).

/*
(instance prevents IrreflexiveRelation)
*/
fof(a8682,axiom,s_instance(s_prevents_m, s_IrreflexiveRelation)).

/*
(instance prevents PartialValuedRelation)
*/
fof(a8683,axiom,s_instance(s_prevents_m, s_PartialValuedRelation)).

/*
(domainSubclass prevents 2 Process)
*/
fof(a8684,axiom,s_domainSubclass(s_prevents_m, 2, s_Process)).

/*
(forall (?P ?L ?T ?X)
 (=>
  (and (instance ?X Process) (instance ?T TimePosition)
       (instance ?L Object) (subclass ?P Process)
       (instance ?P SetOrClass))
  (=>
   (and (prevents ?X ?P)
        (and (equal (WhenFn ?X) ?T) (eventLocated ?X ?L)))
   (not (holdsDuring ?T
         (exists (?Y) (and (instance ?Y ?P) (eventLocated ?Y ?L))))))))
*/
%% no translation to TPTP available.

/*
(instance hinders BinaryPredicate)
*/
fof(a8685,axiom,s_instance(s_hinders_m, s_BinaryPredicate)).

/*
(instance hinders IrreflexiveRelation)
*/
fof(a8686,axiom,s_instance(s_hinders_m, s_IrreflexiveRelation)).

/*
(instance hinders PartialValuedRelation)
*/
fof(a8687,axiom,s_instance(s_hinders_m, s_PartialValuedRelation)).

/*
(domainSubclass hinders 2 Process)
*/
fof(a8688,axiom,s_domainSubclass(s_hinders_m, 2, s_Process)).

/*
(forall (?PROC ?L ?T ?X)
 (=>
  (and (instance ?X Process) (instance ?T TimePosition)
       (instance ?L Object) (subclass ?PROC Process)
       (instance ?PROC SetOrClass))
  (=> (hinders ?X ?PROC)
   (decreasesLikelihood
    (and (equal (WhenFn ?X) ?T) (eventLocated ?X ?L))
    (holdsDuring ?T
     (exists (?Y) (and (instance ?Y ?PROC) (eventLocated ?Y ?L))))))))
*/
%% no translation to TPTP available.

/*
(instance refers BinaryPredicate)
*/
fof(a8689,axiom,s_instance(s_refers_m, s_BinaryPredicate)).

/*
(subrelation names refers)
*/
fof(a8690,axiom,s_subrelation(s_names_m, s_refers_m)).

/*
(subrelation uniqueIdentifier names)
*/
fof(a8691,axiom,s_subrelation(s_uniqueIdentifier_m, s_names_m)).

/*
(instance uniqueIdentifier SingleValuedRelation)
*/
fof(a8692,axiom,s_instance(s_uniqueIdentifier_m, s_SingleValuedRelation)).

/*
(instance uniqueIdentifier PartialValuedRelation)
*/
fof(a8693,axiom,s_instance(s_uniqueIdentifier_m, s_PartialValuedRelation)).

/*
(subrelation represents refers)
*/
fof(a8694,axiom,s_subrelation(s_represents_m, s_refers_m)).

/*
(instance representsForAgent TernaryPredicate)
*/
fof(a8695,axiom,s_instance(s_representsForAgent_m, s_TernaryPredicate)).

/*
(forall (?REP ?AGENT ?ENTITY)
 (=>
  (and (instance ?ENTITY Entity) (instance ?AGENT Agent)
       (instance ?REP Entity))
  (=> (representsForAgent ?REP ?ENTITY ?AGENT)
   (represents ?REP ?ENTITY))))
*/
fof(a8696,axiom,! [REP,AGENT,ENTITY] : (((s_instance(ENTITY, s_Entity) & s_instance(AGENT, s_Agent) & s_instance(REP, s_Entity)) => (s_representsForAgent(REP, ENTITY, AGENT) => s_represents(REP, ENTITY))))).

/*
(instance representsInLanguage TernaryPredicate)
*/
fof(a8697,axiom,s_instance(s_representsInLanguage_m, s_TernaryPredicate)).

/*
(forall (?REP ?LANGUAGE ?ENTITY)
 (exists (?AGENT)
  (and (instance ?AGENT Agent)
       (=>
        (and (instance ?ENTITY Entity) (instance ?LANGUAGE Language)
             (instance ?REP LinguisticExpression))
        (=> (representsInLanguage ?REP ?ENTITY ?LANGUAGE)
         (representsForAgent ?REP ?ENTITY ?AGENT))))))
*/
fof(a8698,axiom,! [REP,LANGUAGE,ENTITY] : (? [AGENT] : ((s_instance(AGENT, s_Agent) & ((s_instance(ENTITY, s_Entity) & s_instance(LANGUAGE, s_Language) & s_instance(REP, s_LinguisticExpression)) => (s_representsInLanguage(REP, ENTITY, LANGUAGE) => s_representsForAgent(REP, ENTITY, AGENT))))))).

/*
(subrelation equivalentContentClass subsumesContentClass)
*/
fof(a8699,axiom,s_subrelation(s_equivalentContentClass_m, s_subsumesContentClass_m)).

/*
(instance equivalentContentClass EquivalenceRelation)
*/
fof(a8700,axiom,s_instance(s_equivalentContentClass_m, s_EquivalenceRelation)).

/*
(domainSubclass equivalentContentClass 1 ContentBearingPhysical)
*/
fof(a8701,axiom,s_domainSubclass(s_equivalentContentClass_m, 1, s_ContentBearingPhysical)).

/*
(domainSubclass equivalentContentClass 2 ContentBearingPhysical)
*/
fof(a8702,axiom,s_domainSubclass(s_equivalentContentClass_m, 2, s_ContentBearingPhysical)).

/*
(forall (?CLASS2 ?CLASS1)
 (=>
  (and (subclass ?CLASS1 ContentBearingPhysical)
       (subclass ?CLASS2 ContentBearingPhysical))
  (<=>
   (and (subsumesContentClass ?CLASS1 ?CLASS2)
        (subsumesContentClass ?CLASS2 ?CLASS1))
   (equivalentContentClass ?CLASS1 ?CLASS2))))
*/
fof(a8703,axiom,! [CLASS2,CLASS1] : (((s_subclass(CLASS1, s_ContentBearingPhysical) & s_subclass(CLASS2, s_ContentBearingPhysical)) => ((s_subsumesContentClass(CLASS1, CLASS2) & s_subsumesContentClass(CLASS2, CLASS1)) <=> s_equivalentContentClass(CLASS1, CLASS2))))).

/*
(instance subsumesContentClass BinaryPredicate)
*/
fof(a8704,axiom,s_instance(s_subsumesContentClass_m, s_BinaryPredicate)).

/*
(instance subsumesContentClass PartialOrderingRelation)
*/
fof(a8705,axiom,s_instance(s_subsumesContentClass_m, s_PartialOrderingRelation)).

/*
(domainSubclass subsumesContentClass 1 ContentBearingPhysical)
*/
fof(a8706,axiom,s_domainSubclass(s_subsumesContentClass_m, 1, s_ContentBearingPhysical)).

/*
(domainSubclass subsumesContentClass 2 ContentBearingPhysical)
*/
fof(a8707,axiom,s_domainSubclass(s_subsumesContentClass_m, 2, s_ContentBearingPhysical)).

/*
(forall (?CLASS2 ?CLASS1)
 (forall (?OBJ2 ?INFO)
  (exists (?OBJ1)
   (and (instance ?OBJ1 ContentBearingPhysical)
        (=>
         (and (instance ?INFO Proposition)
              (instance ?OBJ2 ContentBearingPhysical))
         (=>
          (and (instance ?CLASS1 SetOrClass)
               (subclass ?CLASS1 ContentBearingPhysical)
               (subclass ?CLASS2 ContentBearingPhysical)
               (instance ?CLASS2 SetOrClass))
          (=> (subsumesContentClass ?CLASS1 ?CLASS2)
           (=>
            (and (instance ?OBJ2 ?CLASS2)
                 (containsInformation ?OBJ2 ?INFO))
            (and (instance ?OBJ1 ?CLASS1)
                 (containsInformation ?OBJ1 ?INFO))))))))))
*/
fof(a8708,axiom,! [CLASS2,CLASS1] : (! [OBJ2,INFO] : (? [OBJ1] : ((s_instance(OBJ1, s_ContentBearingPhysical) & ((s_instance(INFO, s_Proposition) & s_instance(OBJ2, s_ContentBearingPhysical)) => ((s_instance(CLASS1, s_SetOrClass) & s_subclass(CLASS1, s_ContentBearingPhysical) & s_subclass(CLASS2, s_ContentBearingPhysical) & s_instance(CLASS2, s_SetOrClass)) => (s_subsumesContentClass(CLASS1, CLASS2) => ((s_instance(OBJ2, CLASS2) & s_containsInformation(OBJ2, INFO)) => (s_instance(OBJ1, CLASS1) & s_containsInformation(OBJ1, INFO))))))))))).

/*
(subrelation equivalentContentInstance subsumesContentInstance)
*/
fof(a8709,axiom,s_subrelation(s_equivalentContentInstance_m, s_subsumesContentInstance_m)).

/*
(instance equivalentContentInstance EquivalenceRelation)
*/
fof(a8710,axiom,s_instance(s_equivalentContentInstance_m, s_EquivalenceRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (=>
  (and (instance ?OBJ1 ContentBearingPhysical)
       (instance ?OBJ2 ContentBearingPhysical))
  (<=>
   (and (subsumesContentInstance ?OBJ1 ?OBJ2)
        (subsumesContentInstance ?OBJ2 ?OBJ1))
   (equivalentContentInstance ?OBJ1 ?OBJ2))))
*/
fof(a8711,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_ContentBearingPhysical) & s_instance(OBJ2, s_ContentBearingPhysical)) => ((s_subsumesContentInstance(OBJ1, OBJ2) & s_subsumesContentInstance(OBJ2, OBJ1)) <=> s_equivalentContentInstance(OBJ1, OBJ2))))).

/*
(instance subsumesContentInstance BinaryPredicate)
*/
fof(a8712,axiom,s_instance(s_subsumesContentInstance_m, s_BinaryPredicate)).

/*
(instance subsumesContentInstance PartialOrderingRelation)
*/
fof(a8713,axiom,s_instance(s_subsumesContentInstance_m, s_PartialOrderingRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?INFO)
  (=> (instance ?INFO Proposition)
   (=>
    (and (instance ?OBJ1 ContentBearingPhysical)
         (instance ?OBJ2 ContentBearingPhysical))
    (=> (subsumesContentInstance ?OBJ1 ?OBJ2)
     (=> (containsInformation ?OBJ2 ?INFO)
      (containsInformation ?OBJ1 ?INFO)))))))
*/
fof(a8714,axiom,! [OBJ2,OBJ1] : (! [INFO] : ((s_instance(INFO, s_Proposition) => ((s_instance(OBJ1, s_ContentBearingPhysical) & s_instance(OBJ2, s_ContentBearingPhysical)) => (s_subsumesContentInstance(OBJ1, OBJ2) => (s_containsInformation(OBJ2, INFO) => s_containsInformation(OBJ1, INFO)))))))).

/*
(subrelation realization represents)
*/
fof(a8715,axiom,s_subrelation(s_realization_m, s_represents_m)).

/*
(instance realization AsymmetricRelation)
*/
fof(a8716,axiom,s_instance(s_realization_m, s_AsymmetricRelation)).

/*
(forall (?PROP ?PROCESS)
 (exists (?OBJ)
  (and (instance ?OBJ ContentBearingPhysical)
       (=>
        (and (instance ?PROCESS Process) (instance ?PROP Proposition))
        (=> (realization ?PROCESS ?PROP)
         (and (instance ?OBJ ContentBearingObject)
              (containsInformation ?OBJ ?PROP)))))))
*/
fof(a8717,axiom,! [PROP,PROCESS] : (? [OBJ] : ((s_instance(OBJ, s_ContentBearingPhysical) & ((s_instance(PROCESS, s_Process) & s_instance(PROP, s_Proposition)) => (s_realization(PROCESS, PROP) => (s_instance(OBJ, s_ContentBearingObject) & s_containsInformation(OBJ, PROP)))))))).

/*
(instance expressedInLanguage BinaryPredicate)
*/
fof(a8718,axiom,s_instance(s_expressedInLanguage_m, s_BinaryPredicate)).

/*
(instance expressedInLanguage AsymmetricRelation)
*/
fof(a8719,axiom,s_instance(s_expressedInLanguage_m, s_AsymmetricRelation)).

/*
(forall (?LANGUAGE ?EXPRESS)
 (forall (?PROP)
  (exists (?g6688)
   (and (instance ?g6688 Entity)
        (=> (instance ?PROP Entity)
         (=>
          (and (instance ?EXPRESS LinguisticExpression)
               (instance ?LANGUAGE Language))
          (and (=> (expressedInLanguage ?EXPRESS ?LANGUAGE)
                (representsInLanguage ?EXPRESS ?g6688 ?LANGUAGE))
               (=> (representsInLanguage ?EXPRESS ?PROP ?LANGUAGE)
                (expressedInLanguage ?EXPRESS ?LANGUAGE)))))))))
*/
fof(a8720,axiom,! [LANGUAGE,EXPRESS] : (! [PROP] : (? [G6688] : ((s_instance(G6688, s_Entity) & (s_instance(PROP, s_Entity) => ((s_instance(EXPRESS, s_LinguisticExpression) & s_instance(LANGUAGE, s_Language)) => ((s_expressedInLanguage(EXPRESS, LANGUAGE) => s_representsInLanguage(EXPRESS, G6688, LANGUAGE)) & (s_representsInLanguage(EXPRESS, PROP, LANGUAGE) => s_expressedInLanguage(EXPRESS, LANGUAGE)))))))))).

/*
(instance subProposition BinaryPredicate)
*/
fof(a8721,axiom,s_instance(s_subProposition_m, s_BinaryPredicate)).

/*
(instance subProposition TransitiveRelation)
*/
fof(a8722,axiom,s_instance(s_subProposition_m, s_TransitiveRelation)).

/*
(instance subProposition IrreflexiveRelation)
*/
fof(a8723,axiom,s_instance(s_subProposition_m, s_IrreflexiveRelation)).

/*
(instance subProposition PartialValuedRelation)
*/
fof(a8724,axiom,s_instance(s_subProposition_m, s_PartialValuedRelation)).

/*
(forall (?PROP2 ?PROP1)
 (forall (?OBJ1 ?OBJ2)
  (=>
   (and (instance ?OBJ2 ContentBearingPhysical)
        (instance ?OBJ1 ContentBearingPhysical))
   (=>
    (and (instance ?PROP1 Proposition) (instance ?PROP2 Proposition))
    (=> (subProposition ?PROP1 ?PROP2)
     (=>
      (and (containsInformation ?OBJ1 ?PROP1)
           (containsInformation ?OBJ2 ?PROP2))
      (subsumesContentInstance ?OBJ2 ?OBJ1)))))))
*/
fof(a8725,axiom,! [PROP2,PROP1] : (! [OBJ1,OBJ2] : (((s_instance(OBJ2, s_ContentBearingPhysical) & s_instance(OBJ1, s_ContentBearingPhysical)) => ((s_instance(PROP1, s_Proposition) & s_instance(PROP2, s_Proposition)) => (s_subProposition(PROP1, PROP2) => ((s_containsInformation(OBJ1, PROP1) & s_containsInformation(OBJ2, PROP2)) => s_subsumesContentInstance(OBJ2, OBJ1)))))))).

/*
(subrelation subPlan subProposition)
*/
fof(a8726,axiom,s_subrelation(s_subPlan_m, s_subProposition_m)).

/*
(instance subPlan TransitiveRelation)
*/
fof(a8727,axiom,s_instance(s_subPlan_m, s_TransitiveRelation)).

/*
(instance subPlan IrreflexiveRelation)
*/
fof(a8728,axiom,s_instance(s_subPlan_m, s_IrreflexiveRelation)).

/*
(instance subPlan PartialValuedRelation)
*/
fof(a8729,axiom,s_instance(s_subPlan_m, s_PartialValuedRelation)).

/*
(instance uses BinaryPredicate)
*/
fof(a8730,axiom,s_instance(s_uses_m, s_BinaryPredicate)).

/*
(instance uses AsymmetricRelation)
*/
fof(a8731,axiom,s_instance(s_uses_m, s_AsymmetricRelation)).

/*
(forall (?AGENT ?OBJ)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (and (instance ?OBJ Object) (instance ?AGENT Agent))
        (=> (uses ?OBJ ?AGENT)
         (and (agent ?PROC ?AGENT) (instrument ?PROC ?OBJ)))))))
*/
fof(a8732,axiom,! [AGENT,OBJ] : (? [PROC] : ((s_instance(PROC, s_Process) & ((s_instance(OBJ, s_Object) & s_instance(AGENT, s_Agent)) => (s_uses(OBJ, AGENT) => (s_agent(PROC, AGENT) & s_instrument(PROC, OBJ)))))))).

/*
(instance MultiplicationFn BinaryFunction)
*/
fof(a8733,axiom,s_instance(s_MultiplicationFn_m, s_BinaryFunction)).

/*
(instance MultiplicationFn AssociativeFunction)
*/
fof(a8734,axiom,s_instance(s_MultiplicationFn_m, s_AssociativeFunction)).

/*
(instance MultiplicationFn CommutativeFunction)
*/
fof(a8735,axiom,s_instance(s_MultiplicationFn_m, s_CommutativeFunction)).

/*
(instance MultiplicationFn RelationExtendedToQuantities)
*/
fof(a8736,axiom,s_instance(s_MultiplicationFn_m, s_RelationExtendedToQuantities)).

/*
(instance MultiplicationFn TotalValuedRelation)
*/
fof(a8737,axiom,s_instance(s_MultiplicationFn_m, s_TotalValuedRelation)).

/*
(range MultiplicationFn Quantity)
*/
fof(a8738,axiom,s_range(s_MultiplicationFn_m, s_Quantity)).

/*
(instance AdditionFn BinaryFunction)
*/
fof(a8739,axiom,s_instance(s_AdditionFn_m, s_BinaryFunction)).

/*
(instance AdditionFn AssociativeFunction)
*/
fof(a8740,axiom,s_instance(s_AdditionFn_m, s_AssociativeFunction)).

/*
(instance AdditionFn CommutativeFunction)
*/
fof(a8741,axiom,s_instance(s_AdditionFn_m, s_CommutativeFunction)).

/*
(instance AdditionFn RelationExtendedToQuantities)
*/
fof(a8742,axiom,s_instance(s_AdditionFn_m, s_RelationExtendedToQuantities)).

/*
(instance AdditionFn TotalValuedRelation)
*/
fof(a8743,axiom,s_instance(s_AdditionFn_m, s_TotalValuedRelation)).

/*
(range AdditionFn Quantity)
*/
fof(a8744,axiom,s_range(s_AdditionFn_m, s_Quantity)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER Integer)
  (equal (SuccessorFn ?NUMBER) (AdditionFn ?NUMBER 1))))
*/
fof(a8745,axiom,! [NUMBER] : ((s_instance(NUMBER, s_Integer) => (s_SuccessorFn(NUMBER) = plus(NUMBER, 1))))).

/*
(instance SubtractionFn BinaryFunction)
*/
fof(a8746,axiom,s_instance(s_SubtractionFn_m, s_BinaryFunction)).

/*
(instance SubtractionFn AssociativeFunction)
*/
fof(a8747,axiom,s_instance(s_SubtractionFn_m, s_AssociativeFunction)).

/*
(instance SubtractionFn RelationExtendedToQuantities)
*/
fof(a8748,axiom,s_instance(s_SubtractionFn_m, s_RelationExtendedToQuantities)).

/*
(instance SubtractionFn TotalValuedRelation)
*/
fof(a8749,axiom,s_instance(s_SubtractionFn_m, s_TotalValuedRelation)).

/*
(range SubtractionFn Quantity)
*/
fof(a8750,axiom,s_range(s_SubtractionFn_m, s_Quantity)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER Integer)
  (equal (PredecessorFn ?NUMBER) (SubtractionFn ?NUMBER 1))))
*/
fof(a8751,axiom,! [NUMBER] : ((s_instance(NUMBER, s_Integer) => (s_PredecessorFn(NUMBER) = s_SubtractionFn(NUMBER, 1))))).

/*
(instance DivisionFn BinaryFunction)
*/
fof(a8752,axiom,s_instance(s_DivisionFn_m, s_BinaryFunction)).

/*
(instance DivisionFn AssociativeFunction)
*/
fof(a8753,axiom,s_instance(s_DivisionFn_m, s_AssociativeFunction)).

/*
(instance DivisionFn RelationExtendedToQuantities)
*/
fof(a8754,axiom,s_instance(s_DivisionFn_m, s_RelationExtendedToQuantities)).

/*
(instance DivisionFn PartialValuedRelation)
*/
fof(a8755,axiom,s_instance(s_DivisionFn_m, s_PartialValuedRelation)).

/*
(range DivisionFn Quantity)
*/
fof(a8756,axiom,s_range(s_DivisionFn_m, s_Quantity)).

/*
(forall (?NUMBER)
 (exists (?INT1 ?INT2)
  (and (and (instance ?INT2 Quantity) (instance ?INT1 Quantity))
       (=> (instance ?NUMBER RationalNumber)
        (and (instance ?INT1 Integer)
             (and (instance ?INT2 Integer)
                  (equal ?NUMBER (DivisionFn ?INT1 ?INT2))))))))
*/
fof(a8757,axiom,! [NUMBER] : (? [INT1,INT2] : (((s_instance(INT2, s_Quantity) & s_instance(INT1, s_Quantity)) & (s_instance(NUMBER, s_RationalNumber) => (s_instance(INT1, s_Integer) & (s_instance(INT2, s_Integer) & (NUMBER = divide(INT1, INT2))))))))).

/*
(instance AbsoluteValueFn UnaryFunction)
*/
fof(a8758,axiom,s_instance(s_AbsoluteValueFn_m, s_UnaryFunction)).

/*
(instance AbsoluteValueFn TotalValuedRelation)
*/
fof(a8759,axiom,s_instance(s_AbsoluteValueFn_m, s_TotalValuedRelation)).

/*
(range AbsoluteValueFn NonnegativeRealNumber)
*/
fof(a8760,axiom,s_range(s_AbsoluteValueFn_m, s_NonnegativeRealNumber)).

/*
(forall (?NUMBER2 ?NUMBER1)
 (<=>
  (and (equal (AbsoluteValueFn ?NUMBER1) ?NUMBER2)
       (and (instance ?NUMBER1 RealNumber)
            (instance ?NUMBER2 RealNumber)))
  (or (and (instance ?NUMBER1 NonnegativeRealNumber)
           (equal ?NUMBER1 ?NUMBER2))
      (and (instance ?NUMBER1 NegativeRealNumber)
           (equal ?NUMBER2 (SubtractionFn 0 ?NUMBER1))))))
*/
fof(a8761,axiom,! [NUMBER2,NUMBER1] : ((((s_AbsoluteValueFn(NUMBER1) = NUMBER2) & (s_instance(NUMBER1, s_RealNumber) & s_instance(NUMBER2, s_RealNumber))) <=> ((s_instance(NUMBER1, s_NonnegativeRealNumber) & (NUMBER1 = NUMBER2)) | (s_instance(NUMBER1, s_NegativeRealNumber) & (NUMBER2 = s_SubtractionFn(0, NUMBER1))))))).

/*
(instance CeilingFn UnaryFunction)
*/
fof(a8762,axiom,s_instance(s_CeilingFn_m, s_UnaryFunction)).

/*
(instance CeilingFn TotalValuedRelation)
*/
fof(a8763,axiom,s_instance(s_CeilingFn_m, s_TotalValuedRelation)).

/*
(range CeilingFn Integer)
*/
fof(a8764,axiom,s_range(s_CeilingFn_m, s_Integer)).

/*
(forall (?INT ?NUMBER)
 (forall (?OTHERINT)
  (=> (instance ?OTHERINT Quantity)
   (=> (and (instance ?NUMBER RealNumber) (instance ?INT Quantity))
    (=> (equal (CeilingFn ?NUMBER) ?INT)
     (not (and (instance ?OTHERINT Integer)
               (and (greaterThanOrEqualTo ?OTHERINT ?NUMBER)
                    (lessThan ?OTHERINT ?INT)))))))))
*/
fof(a8765,axiom,! [INT,NUMBER] : (! [OTHERINT] : ((s_instance(OTHERINT, s_Quantity) => ((s_instance(NUMBER, s_RealNumber) & s_instance(INT, s_Quantity)) => ((s_CeilingFn(NUMBER) = INT) => (~ (s_instance(OTHERINT, s_Integer) & (s_greaterThanOrEqualTo(OTHERINT, NUMBER) & less(OTHERINT, INT)))))))))).

/*
(instance CosineFn UnaryFunction)
*/
fof(a8766,axiom,s_instance(s_CosineFn_m, s_UnaryFunction)).

/*
(instance CosineFn TotalValuedRelation)
*/
fof(a8767,axiom,s_instance(s_CosineFn_m, s_TotalValuedRelation)).

/*
(range CosineFn RealNumber)
*/
fof(a8768,axiom,s_range(s_CosineFn_m, s_RealNumber)).

/*
(instance DenominatorFn UnaryFunction)
*/
fof(a8769,axiom,s_instance(s_DenominatorFn_m, s_UnaryFunction)).

/*
(instance DenominatorFn TotalValuedRelation)
*/
fof(a8770,axiom,s_instance(s_DenominatorFn_m, s_TotalValuedRelation)).

/*
(range DenominatorFn Integer)
*/
fof(a8771,axiom,s_range(s_DenominatorFn_m, s_Integer)).

/*
(instance ExponentiationFn BinaryFunction)
*/
fof(a8772,axiom,s_instance(s_ExponentiationFn_m, s_BinaryFunction)).

/*
(instance ExponentiationFn RelationExtendedToQuantities)
*/
fof(a8773,axiom,s_instance(s_ExponentiationFn_m, s_RelationExtendedToQuantities)).

/*
(instance ExponentiationFn TotalValuedRelation)
*/
fof(a8774,axiom,s_instance(s_ExponentiationFn_m, s_TotalValuedRelation)).

/*
(range ExponentiationFn Quantity)
*/
fof(a8775,axiom,s_range(s_ExponentiationFn_m, s_Quantity)).

/*
(instance FloorFn UnaryFunction)
*/
fof(a8776,axiom,s_instance(s_FloorFn_m, s_UnaryFunction)).

/*
(instance FloorFn TotalValuedRelation)
*/
fof(a8777,axiom,s_instance(s_FloorFn_m, s_TotalValuedRelation)).

/*
(range FloorFn Integer)
*/
fof(a8778,axiom,s_range(s_FloorFn_m, s_Integer)).

/*
(forall (?INT ?NUMBER)
 (forall (?OTHERINT)
  (=> (instance ?OTHERINT Quantity)
   (=> (and (instance ?NUMBER RealNumber) (instance ?INT Quantity))
    (=> (equal (FloorFn ?NUMBER) ?INT)
     (not (and (instance ?OTHERINT Integer)
               (and (lessThanOrEqualTo ?OTHERINT ?NUMBER)
                    (greaterThan ?OTHERINT ?INT)))))))))
*/
fof(a8779,axiom,! [INT,NUMBER] : (! [OTHERINT] : ((s_instance(OTHERINT, s_Quantity) => ((s_instance(NUMBER, s_RealNumber) & s_instance(INT, s_Quantity)) => ((s_FloorFn(NUMBER) = INT) => (~ (s_instance(OTHERINT, s_Integer) & (lesseq(OTHERINT, NUMBER) & greater(OTHERINT, INT)))))))))).

/*
(instance GreatestCommonDivisorFn Function)
*/
fof(a8780,axiom,s_instance(s_GreatestCommonDivisorFn_m, s_Function)).

/*
(instance GreatestCommonDivisorFn VariableArityRelation)
*/
fof(a8781,axiom,s_instance(s_GreatestCommonDivisorFn_m, s_VariableArityRelation)).

/*
(instance GreatestCommonDivisorFn PartialValuedRelation)
*/
fof(a8782,axiom,s_instance(s_GreatestCommonDivisorFn_m, s_PartialValuedRelation)).

/*
(range GreatestCommonDivisorFn Integer)
*/
fof(a8783,axiom,s_range(s_GreatestCommonDivisorFn_m, s_Integer)).

/*
(forall (?ROW0 ?ELEMENT)
 (=> (instance ?ELEMENT Entity)
  (=> (GreatestCommonDivisorFn1 ?ROW0)
   (=> (inList ?ELEMENT (ListFn1 ?ROW0)) (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Number) (instance ?ROW1 Number)
       (instance ?ELEMENT Entity))
  (=> (GreatestCommonDivisorFn2 ?ROW0 ?ROW1)
   (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Number) (instance ?ROW2 Number)
       (instance ?ROW0 Number) (instance ?ELEMENT Entity))
  (=> (GreatestCommonDivisorFn3 ?ROW0 ?ROW1 ?ROW2)
   (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Number) (instance ?ROW3 Number)
       (instance ?ROW1 Number) (instance ?ROW0 Number)
       (instance ?ELEMENT Entity))
  (=> (GreatestCommonDivisorFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Number) (instance ?ROW4 Number)
       (instance ?ROW2 Number) (instance ?ROW1 Number)
       (instance ?ROW0 Number) (instance ?ELEMENT Entity))
  (=> (GreatestCommonDivisorFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Number) (instance ?ROW5 Number)
       (instance ?ROW3 Number) (instance ?ROW2 Number)
       (instance ?ROW1 Number) (instance ?ROW0 Number)
       (instance ?ELEMENT Entity))
  (=> (GreatestCommonDivisorFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (=> (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Number) (instance ?ROW6 Number)
       (instance ?ROW4 Number) (instance ?ROW3 Number)
       (instance ?ROW2 Number) (instance ?ROW1 Number)
       (instance ?ROW0 Number) (instance ?ELEMENT Entity))
  (=>
   (GreatestCommonDivisorFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
   (=>
    (inList ?ELEMENT
     (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?NUMBER ?ROW0)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=> (instance ?NUMBER Quantity)
    (=> (equal (GreatestCommonDivisorFn1 ?ROW0) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn1 ?ROW0))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8784,axiom,! [NUMBER,ROW0] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => (s_instance(NUMBER, s_Quantity) => ((s_GreatestCommonDivisorFn1(ROW0) = NUMBER) => (s_inList(ELEMENT, s_ListFn1(ROW0)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW1 ?ROW0)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW0 Number) (instance ?ROW1 Number)
         (instance ?NUMBER Quantity))
    (=> (equal (GreatestCommonDivisorFn2 ?ROW0 ?ROW1) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8785,axiom,! [NUMBER,ROW1,ROW0] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW0, s_Number) & s_instance(ROW1, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn2(ROW0, ROW1) = NUMBER) => (s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW2 ?ROW1)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW1 Number) (instance ?ROW2 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=> (equal (GreatestCommonDivisorFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8786,axiom,! [NUMBER,ROW0,ROW2,ROW1] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW1, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn3(ROW0, ROW1, ROW2) = NUMBER) => (s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW2 Number) (instance ?ROW3 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8787,axiom,! [NUMBER,ROW0,ROW1,ROW3,ROW2] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW2, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn4(ROW0, ROW1, ROW2, ROW3) = NUMBER) => (s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW3 Number) (instance ?ROW4 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
            ?NUMBER)
     (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8788,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW3, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn5(ROW0, ROW1, ROW2, ROW3, ROW4) = NUMBER) => (s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW4 Number) (instance ?ROW5 Number)
         (instance ?ROW3 Number) (instance ?ROW2 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
             ?ROW5)
            ?NUMBER)
     (=>
      (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8789,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW4, s_Number) & s_instance(ROW5, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) = NUMBER) => (s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW5 Number) (instance ?ROW6 Number)
         (instance ?ROW4 Number) (instance ?ROW3 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
             ?ROW5 ?ROW6)
            ?NUMBER)
     (=>
      (inList ?ELEMENT
       (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
      (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))
*/
fof(a8790,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW5, s_Number) & s_instance(ROW6, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) = NUMBER) => (s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => (s_RemainderFn(ELEMENT, NUMBER) = 0)))))))).

/*
(forall (?NUMBER ?ROW0)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=> (instance ?NUMBER Quantity)
    (=> (equal (GreatestCommonDivisorFn1 ?ROW0) ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn1 ?ROW0))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8791,axiom,! [NUMBER,ROW0] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => (s_instance(NUMBER, s_Quantity) => ((s_GreatestCommonDivisorFn1(ROW0) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn1(ROW0)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(forall (?NUMBER ?ROW1 ?ROW0)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=>
    (and (instance ?ROW0 Number) (instance ?ROW1 Number)
         (instance ?NUMBER Quantity))
    (=> (equal (GreatestCommonDivisorFn2 ?ROW0 ?ROW1) ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8792,axiom,! [NUMBER,ROW1,ROW0] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => ((s_instance(ROW0, s_Number) & s_instance(ROW1, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn2(ROW0, ROW1) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW2 ?ROW1)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=>
    (and (instance ?ROW1 Number) (instance ?ROW2 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=> (equal (GreatestCommonDivisorFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8793,axiom,! [NUMBER,ROW0,ROW2,ROW1] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => ((s_instance(ROW1, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn3(ROW0, ROW1, ROW2) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=>
    (and (instance ?ROW2 Number) (instance ?ROW3 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8794,axiom,! [NUMBER,ROW0,ROW1,ROW3,ROW2] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => ((s_instance(ROW2, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn4(ROW0, ROW1, ROW2, ROW3) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=>
    (and (instance ?ROW3 Number) (instance ?ROW4 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
            ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=>
                 (inList ?ELEMENT
                  (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8795,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => ((s_instance(ROW3, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn5(ROW0, ROW1, ROW2, ROW3, ROW4) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=>
    (and (instance ?ROW4 Number) (instance ?ROW5 Number)
         (instance ?ROW3 Number) (instance ?ROW2 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
             ?ROW5)
            ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=>
                 (inList ?ELEMENT
                  (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8796,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => ((s_instance(ROW4, s_Number) & s_instance(ROW5, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?GREATER)
  (=> (instance ?GREATER Quantity)
   (=>
    (and (instance ?ROW5 Number) (instance ?ROW6 Number)
         (instance ?ROW4 Number) (instance ?ROW3 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (GreatestCommonDivisorFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
             ?ROW5 ?ROW6)
            ?NUMBER)
     (not (and (greaterThan ?GREATER ?NUMBER)
               (forall (?ELEMENT)
                (=>
                 (inList ?ELEMENT
                  (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
                 (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))
*/
fof(a8797,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [GREATER] : ((s_instance(GREATER, s_Quantity) => ((s_instance(ROW5, s_Number) & s_instance(ROW6, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_GreatestCommonDivisorFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) = NUMBER) => (~ (greater(GREATER, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => (s_RemainderFn(ELEMENT, GREATER) = 0))))))))))).

/*
(instance multiplicativeFactor BinaryPredicate)
*/
fof(a8798,axiom,s_instance(s_multiplicativeFactor_m, s_BinaryPredicate)).

/*
(instance multiplicativeFactor TransitiveRelation)
*/
fof(a8799,axiom,s_instance(s_multiplicativeFactor_m, s_TransitiveRelation)).

/*
(forall (?N2 ?N1)
 (exists (?I)
  (and (instance ?I Quantity)
       (=> (and (instance ?N1 Integer) (instance ?N2 Integer))
        (=> (multiplicativeFactor ?N1 ?N2)
         (and (instance ?I Integer)
              (equal ?N2 (MultiplicationFn ?N1 ?I))))))))
*/
fof(a8800,axiom,! [N2,N1] : (? [I] : ((s_instance(I, s_Quantity) & ((s_instance(N1, s_Integer) & s_instance(N2, s_Integer)) => (s_multiplicativeFactor(N1, N2) => (s_instance(I, s_Integer) & (N2 = times(N1, I))))))))).

/*
(instance ImaginaryPartFn UnaryFunction)
*/
fof(a8801,axiom,s_instance(s_ImaginaryPartFn_m, s_UnaryFunction)).

/*
(instance ImaginaryPartFn TotalValuedRelation)
*/
fof(a8802,axiom,s_instance(s_ImaginaryPartFn_m, s_TotalValuedRelation)).

/*
(range ImaginaryPartFn ImaginaryNumber)
*/
fof(a8803,axiom,s_range(s_ImaginaryPartFn_m, s_ImaginaryNumber)).

/*
(forall (?NUMBER)
 (exists (?PART1 ?PART2)
  (and (and (instance ?PART2 Entity) (instance ?PART1 Entity))
       (=> (instance ?NUMBER ComplexNumber)
        (and (equal ?PART1 (RealNumberFn ?NUMBER))
             (equal ?PART2 (ImaginaryPartFn ?NUMBER)))))))
*/
fof(a8804,axiom,! [NUMBER] : (? [PART1,PART2] : (((s_instance(PART2, s_Entity) & s_instance(PART1, s_Entity)) & (s_instance(NUMBER, s_ComplexNumber) => ((PART1 = s_RealNumberFn(NUMBER)) & (PART2 = s_ImaginaryPartFn(NUMBER)))))))).

/*
(instance IntegerSquareRootFn UnaryFunction)
*/
fof(a8805,axiom,s_instance(s_IntegerSquareRootFn_m, s_UnaryFunction)).

/*
(instance IntegerSquareRootFn PartialValuedRelation)
*/
fof(a8806,axiom,s_instance(s_IntegerSquareRootFn_m, s_PartialValuedRelation)).

/*
(range IntegerSquareRootFn NonnegativeInteger)
*/
fof(a8807,axiom,s_range(s_IntegerSquareRootFn_m, s_NonnegativeInteger)).

/*
(instance Function SetOrClass)
*/
fof(a8808,axiom,s_instance(s_Function, s_SetOrClass)).

/*
(instance LeastCommonMultipleFn Function)
*/
fof(a8809,axiom,s_instance(s_LeastCommonMultipleFn_m, s_Function)).

/*
(instance LeastCommonMultipleFn PartialValuedRelation)
*/
fof(a8810,axiom,s_instance(s_LeastCommonMultipleFn_m, s_PartialValuedRelation)).

/*
(instance VariableArityRelation SetOrClass)
*/
fof(a8811,axiom,s_instance(s_VariableArityRelation, s_SetOrClass)).

/*
(instance LeastCommonMultipleFn VariableArityRelation)
*/
fof(a8812,axiom,s_instance(s_LeastCommonMultipleFn_m, s_VariableArityRelation)).

/*
(range LeastCommonMultipleFn Integer)
*/
fof(a8813,axiom,s_range(s_LeastCommonMultipleFn_m, s_Integer)).

/*
(forall (?ROW0 ?ELEMENT)
 (=> (instance ?ELEMENT Entity)
  (=> (LeastCommonMultipleFn1 ?ROW0)
   (=> (inList ?ELEMENT (ListFn1 ?ROW0)) (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Number) (instance ?ROW1 Number)
       (instance ?ELEMENT Entity))
  (=> (LeastCommonMultipleFn2 ?ROW0 ?ROW1)
   (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Number) (instance ?ROW2 Number)
       (instance ?ROW0 Number) (instance ?ELEMENT Entity))
  (=> (LeastCommonMultipleFn3 ?ROW0 ?ROW1 ?ROW2)
   (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Number) (instance ?ROW3 Number)
       (instance ?ROW1 Number) (instance ?ROW0 Number)
       (instance ?ELEMENT Entity))
  (=> (LeastCommonMultipleFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
   (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Number) (instance ?ROW4 Number)
       (instance ?ROW2 Number) (instance ?ROW1 Number)
       (instance ?ROW0 Number) (instance ?ELEMENT Entity))
  (=> (LeastCommonMultipleFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
   (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Number) (instance ?ROW5 Number)
       (instance ?ROW3 Number) (instance ?ROW2 Number)
       (instance ?ROW1 Number) (instance ?ROW0 Number)
       (instance ?ELEMENT Entity))
  (=> (LeastCommonMultipleFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
   (=> (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?ELEMENT ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Number) (instance ?ROW6 Number)
       (instance ?ROW4 Number) (instance ?ROW3 Number)
       (instance ?ROW2 Number) (instance ?ROW1 Number)
       (instance ?ROW0 Number) (instance ?ELEMENT Entity))
  (=>
   (LeastCommonMultipleFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)
   (=>
    (inList ?ELEMENT
     (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
    (instance ?ELEMENT Number)))))
*/
%% no translation to TPTP available.

/*
(forall (?NUMBER ?ROW0)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=> (instance ?NUMBER Quantity)
    (=> (equal (LeastCommonMultipleFn1 ?ROW0) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn1 ?ROW0))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8814,axiom,! [NUMBER,ROW0] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => (s_instance(NUMBER, s_Quantity) => ((s_LeastCommonMultipleFn1(ROW0) = NUMBER) => (s_inList(ELEMENT, s_ListFn1(ROW0)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW1 ?ROW0)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW0 Number) (instance ?ROW1 Number)
         (instance ?NUMBER Quantity))
    (=> (equal (LeastCommonMultipleFn2 ?ROW0 ?ROW1) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8815,axiom,! [NUMBER,ROW1,ROW0] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW0, s_Number) & s_instance(ROW1, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn2(ROW0, ROW1) = NUMBER) => (s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW2 ?ROW1)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW1 Number) (instance ?ROW2 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=> (equal (LeastCommonMultipleFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8816,axiom,! [NUMBER,ROW0,ROW2,ROW1] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW1, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn3(ROW0, ROW1, ROW2) = NUMBER) => (s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW2 Number) (instance ?ROW3 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
     (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8817,axiom,! [NUMBER,ROW0,ROW1,ROW3,ROW2] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW2, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn4(ROW0, ROW1, ROW2, ROW3) = NUMBER) => (s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW3 Number) (instance ?ROW4 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
            ?NUMBER)
     (=> (inList ?ELEMENT (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8818,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW3, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn5(ROW0, ROW1, ROW2, ROW3, ROW4) = NUMBER) => (s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW4 Number) (instance ?ROW5 Number)
         (instance ?ROW3 Number) (instance ?ROW2 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
             ?ROW5)
            ?NUMBER)
     (=>
      (inList ?ELEMENT (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8819,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW4, s_Number) & s_instance(ROW5, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) = NUMBER) => (s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Quantity)
   (=>
    (and (instance ?ROW5 Number) (instance ?ROW6 Number)
         (instance ?ROW4 Number) (instance ?ROW3 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
             ?ROW6)
            ?NUMBER)
     (=>
      (inList ?ELEMENT
       (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
      (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))
*/
fof(a8820,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Quantity) => ((s_instance(ROW5, s_Number) & s_instance(ROW6, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) = NUMBER) => (s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => (s_RemainderFn(NUMBER, ELEMENT) = 0)))))))).

/*
(forall (?NUMBER ?ROW0)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=> (instance ?NUMBER Quantity)
    (=> (equal (LeastCommonMultipleFn1 ?ROW0) ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn1 ?ROW0))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8821,axiom,! [NUMBER,ROW0] : (! [LESS] : ((s_instance(LESS, s_Quantity) => (s_instance(NUMBER, s_Quantity) => ((s_LeastCommonMultipleFn1(ROW0) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn1(ROW0)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(forall (?NUMBER ?ROW1 ?ROW0)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=>
    (and (instance ?ROW0 Number) (instance ?ROW1 Number)
         (instance ?NUMBER Quantity))
    (=> (equal (LeastCommonMultipleFn2 ?ROW0 ?ROW1) ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn2 ?ROW0 ?ROW1))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8822,axiom,! [NUMBER,ROW1,ROW0] : (! [LESS] : ((s_instance(LESS, s_Quantity) => ((s_instance(ROW0, s_Number) & s_instance(ROW1, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn2(ROW0, ROW1) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn2(ROW0, ROW1)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW2 ?ROW1)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=>
    (and (instance ?ROW1 Number) (instance ?ROW2 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=> (equal (LeastCommonMultipleFn3 ?ROW0 ?ROW1 ?ROW2) ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8823,axiom,! [NUMBER,ROW0,ROW2,ROW1] : (! [LESS] : ((s_instance(LESS, s_Quantity) => ((s_instance(ROW1, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn3(ROW0, ROW1, ROW2) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn3(ROW0, ROW1, ROW2)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=>
    (and (instance ?ROW2 Number) (instance ?ROW3 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3) ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=> (inList ?ELEMENT (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8824,axiom,! [NUMBER,ROW0,ROW1,ROW3,ROW2] : (! [LESS] : ((s_instance(LESS, s_Quantity) => ((s_instance(ROW2, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn4(ROW0, ROW1, ROW2, ROW3) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=>
    (and (instance ?ROW3 Number) (instance ?ROW4 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
            ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=>
                 (inList ?ELEMENT
                  (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8825,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW4,ROW3] : (! [LESS] : ((s_instance(LESS, s_Quantity) => ((s_instance(ROW3, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn5(ROW0, ROW1, ROW2, ROW3, ROW4) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=>
    (and (instance ?ROW4 Number) (instance ?ROW5 Number)
         (instance ?ROW3 Number) (instance ?ROW2 Number)
         (instance ?ROW1 Number) (instance ?ROW0 Number)
         (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4
             ?ROW5)
            ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=>
                 (inList ?ELEMENT
                  (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8826,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (! [LESS] : ((s_instance(LESS, s_Quantity) => ((s_instance(ROW4, s_Number) & s_instance(ROW5, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(forall (?NUMBER ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (forall (?LESS)
  (=> (instance ?LESS Quantity)
   (=>
    (and (instance ?ROW5 Number) (instance ?ROW6 Number)
         (instance ?ROW4 Number) (instance ?ROW3 Number)
         (instance ?ROW2 Number) (instance ?ROW1 Number)
         (instance ?ROW0 Number) (instance ?NUMBER Quantity))
    (=>
     (equal (LeastCommonMultipleFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
             ?ROW6)
            ?NUMBER)
     (not (and (lessThan ?LESS ?NUMBER)
               (forall (?ELEMENT)
                (=>
                 (inList ?ELEMENT
                  (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
                 (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))
*/
fof(a8827,axiom,! [NUMBER,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (! [LESS] : ((s_instance(LESS, s_Quantity) => ((s_instance(ROW5, s_Number) & s_instance(ROW6, s_Number) & s_instance(ROW4, s_Number) & s_instance(ROW3, s_Number) & s_instance(ROW2, s_Number) & s_instance(ROW1, s_Number) & s_instance(ROW0, s_Number) & s_instance(NUMBER, s_Quantity)) => ((s_LeastCommonMultipleFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) = NUMBER) => (~ (less(LESS, NUMBER) & ! [ELEMENT] : ((s_inList(ELEMENT, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) => (s_RemainderFn(LESS, ELEMENT) = 0))))))))))).

/*
(instance LogFn BinaryFunction)
*/
fof(a8828,axiom,s_instance(s_LogFn_m, s_BinaryFunction)).

/*
(range LogFn RealNumber)
*/
fof(a8829,axiom,s_range(s_LogFn_m, s_RealNumber)).

/*
(instance MaxFn BinaryFunction)
*/
fof(a8830,axiom,s_instance(s_MaxFn_m, s_BinaryFunction)).

/*
(instance MaxFn AssociativeFunction)
*/
fof(a8831,axiom,s_instance(s_MaxFn_m, s_AssociativeFunction)).

/*
(instance MaxFn CommutativeFunction)
*/
fof(a8832,axiom,s_instance(s_MaxFn_m, s_CommutativeFunction)).

/*
(instance MaxFn RelationExtendedToQuantities)
*/
fof(a8833,axiom,s_instance(s_MaxFn_m, s_RelationExtendedToQuantities)).

/*
(instance MaxFn TotalValuedRelation)
*/
fof(a8834,axiom,s_instance(s_MaxFn_m, s_TotalValuedRelation)).

/*
(range MaxFn Quantity)
*/
fof(a8835,axiom,s_range(s_MaxFn_m, s_Quantity)).

/*
(forall (?NUMBER ?NUMBER2 ?NUMBER1)
 (=>
  (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity)
       (instance ?NUMBER Entity))
  (=> (equal (MaxFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (or (and (equal ?NUMBER ?NUMBER1) (greaterThan ?NUMBER1 ?NUMBER2))
       (or (and (equal ?NUMBER ?NUMBER2)
                (greaterThan ?NUMBER2 ?NUMBER1))
           (and (equal ?NUMBER ?NUMBER1) (equal ?NUMBER ?NUMBER2)))))))
*/
fof(a8836,axiom,! [NUMBER,NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity) & s_instance(NUMBER, s_Entity)) => ((s_MaxFn(NUMBER1, NUMBER2) = NUMBER) => (((NUMBER = NUMBER1) & greater(NUMBER1, NUMBER2)) | (((NUMBER = NUMBER2) & greater(NUMBER2, NUMBER1)) | ((NUMBER = NUMBER1) & (NUMBER = NUMBER2)))))))).

/*
(instance MinFn BinaryFunction)
*/
fof(a8837,axiom,s_instance(s_MinFn_m, s_BinaryFunction)).

/*
(instance AssociativeFunction SetOrClass)
*/
fof(a8838,axiom,s_instance(s_AssociativeFunction, s_SetOrClass)).

/*
(instance MinFn AssociativeFunction)
*/
fof(a8839,axiom,s_instance(s_MinFn_m, s_AssociativeFunction)).

/*
(instance CommutativeFunction SetOrClass)
*/
fof(a8840,axiom,s_instance(s_CommutativeFunction, s_SetOrClass)).

/*
(instance MinFn CommutativeFunction)
*/
fof(a8841,axiom,s_instance(s_MinFn_m, s_CommutativeFunction)).

/*
(instance MinFn RelationExtendedToQuantities)
*/
fof(a8842,axiom,s_instance(s_MinFn_m, s_RelationExtendedToQuantities)).

/*
(instance MinFn TotalValuedRelation)
*/
fof(a8843,axiom,s_instance(s_MinFn_m, s_TotalValuedRelation)).

/*
(range MinFn Quantity)
*/
fof(a8844,axiom,s_range(s_MinFn_m, s_Quantity)).

/*
(forall (?NUMBER ?NUMBER2 ?NUMBER1)
 (=>
  (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity)
       (instance ?NUMBER Entity))
  (=> (equal (MinFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (or (and (equal ?NUMBER ?NUMBER1) (lessThan ?NUMBER1 ?NUMBER2))
       (or (and (equal ?NUMBER ?NUMBER2) (lessThan ?NUMBER2 ?NUMBER1))
           (and (equal ?NUMBER ?NUMBER1) (equal ?NUMBER ?NUMBER2)))))))
*/
fof(a8845,axiom,! [NUMBER,NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity) & s_instance(NUMBER, s_Entity)) => ((s_MinFn(NUMBER1, NUMBER2) = NUMBER) => (((NUMBER = NUMBER1) & less(NUMBER1, NUMBER2)) | (((NUMBER = NUMBER2) & less(NUMBER2, NUMBER1)) | ((NUMBER = NUMBER1) & (NUMBER = NUMBER2)))))))).

/*
(instance NumeratorFn UnaryFunction)
*/
fof(a8846,axiom,s_instance(s_NumeratorFn_m, s_UnaryFunction)).

/*
(instance NumeratorFn TotalValuedRelation)
*/
fof(a8847,axiom,s_instance(s_NumeratorFn_m, s_TotalValuedRelation)).

/*
(range NumeratorFn Integer)
*/
fof(a8848,axiom,s_range(s_NumeratorFn_m, s_Integer)).

/*
(instance Pi PositiveRealNumber)
*/
fof(a8849,axiom,s_instance(s_Pi, s_PositiveRealNumber)).

/*
(instance PositiveRealNumber SetOrClass)
*/
fof(a8850,axiom,s_instance(s_PositiveRealNumber, s_SetOrClass)).

/*
(instance NumberE PositiveRealNumber)
*/
fof(a8851,axiom,s_instance(s_NumberE, s_PositiveRealNumber)).

/*
(instance RationalNumberFn UnaryFunction)
*/
fof(a8852,axiom,s_instance(s_RationalNumberFn_m, s_UnaryFunction)).

/*
(range RationalNumberFn RationalNumber)
*/
fof(a8853,axiom,s_range(s_RationalNumberFn_m, s_RationalNumber)).

/*
(instance RealNumberFn UnaryFunction)
*/
fof(a8854,axiom,s_instance(s_RealNumberFn_m, s_UnaryFunction)).

/*
(range RealNumberFn RealNumber)
*/
fof(a8855,axiom,s_range(s_RealNumberFn_m, s_RealNumber)).

/*
(instance ReciprocalFn UnaryFunction)
*/
fof(a8856,axiom,s_instance(s_ReciprocalFn_m, s_UnaryFunction)).

/*
(instance ReciprocalFn RelationExtendedToQuantities)
*/
fof(a8857,axiom,s_instance(s_ReciprocalFn_m, s_RelationExtendedToQuantities)).

/*
(instance ReciprocalFn TotalValuedRelation)
*/
fof(a8858,axiom,s_instance(s_ReciprocalFn_m, s_TotalValuedRelation)).

/*
(range ReciprocalFn Quantity)
*/
fof(a8859,axiom,s_range(s_ReciprocalFn_m, s_Quantity)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER Quantity)
  (equal (ReciprocalFn ?NUMBER) (ExponentiationFn ?NUMBER -1))))
*/
fof(a8860,axiom,! [NUMBER] : ((s_instance(NUMBER, s_Quantity) => (s_ReciprocalFn(NUMBER) = s_ExponentiationFn(NUMBER, -1))))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER Quantity)
  (equal 1 (MultiplicationFn ?NUMBER (ReciprocalFn ?NUMBER)))))
*/
fof(a8861,axiom,! [NUMBER] : ((s_instance(NUMBER, s_Quantity) => (1 = times(NUMBER, s_ReciprocalFn(NUMBER)))))).

/*
(instance RemainderFn BinaryFunction)
*/
fof(a8862,axiom,s_instance(s_RemainderFn_m, s_BinaryFunction)).

/*
(instance RemainderFn RelationExtendedToQuantities)
*/
fof(a8863,axiom,s_instance(s_RemainderFn_m, s_RelationExtendedToQuantities)).

/*
(instance RemainderFn PartialValuedRelation)
*/
fof(a8864,axiom,s_instance(s_RemainderFn_m, s_PartialValuedRelation)).

/*
(range RemainderFn Quantity)
*/
fof(a8865,axiom,s_range(s_RemainderFn_m, s_Quantity)).

/*
(forall (?NUMBER ?NUMBER2 ?NUMBER1)
 (=>
  (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity)
       (instance ?NUMBER Quantity))
  (<=> (equal (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (equal (AdditionFn
           (MultiplicationFn (FloorFn (DivisionFn ?NUMBER1 ?NUMBER2))
            ?NUMBER2)
           ?NUMBER)
          ?NUMBER1))))
*/
fof(a8866,axiom,! [NUMBER,NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity) & s_instance(NUMBER, s_Quantity)) => ((s_RemainderFn(NUMBER1, NUMBER2) = NUMBER) <=> (plus(times(s_FloorFn(divide(NUMBER1, NUMBER2)), NUMBER2), NUMBER) = NUMBER1))))).

/*
(forall (?NUMBER ?NUMBER2 ?NUMBER1)
 (=>
  (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 RealNumber)
       (instance ?NUMBER RealNumber))
  (=> (equal (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (equal (SignumFn ?NUMBER2) (SignumFn ?NUMBER)))))
*/
fof(a8867,axiom,! [NUMBER,NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_RealNumber) & s_instance(NUMBER, s_RealNumber)) => ((s_RemainderFn(NUMBER1, NUMBER2) = NUMBER) => (s_SignumFn(NUMBER2) = s_SignumFn(NUMBER)))))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER EvenInteger) (equal (RemainderFn ?NUMBER 2) 0)))
*/
fof(a8868,axiom,! [NUMBER] : ((s_instance(NUMBER, s_EvenInteger) => (s_RemainderFn(NUMBER, 2) = 0)))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER OddInteger) (equal (RemainderFn ?NUMBER 2) 1)))
*/
fof(a8869,axiom,! [NUMBER] : ((s_instance(NUMBER, s_OddInteger) => (s_RemainderFn(NUMBER, 2) = 1)))).

/*
(forall (?PRIME)
 (forall (?NUMBER)
  (=> (instance ?NUMBER Quantity)
   (=> (instance ?PRIME PrimeNumber)
    (=> (equal (RemainderFn ?PRIME ?NUMBER) 0)
     (or (equal ?NUMBER 1) (equal ?NUMBER ?PRIME)))))))
*/
fof(a8870,axiom,! [PRIME] : (! [NUMBER] : ((s_instance(NUMBER, s_Quantity) => (s_instance(PRIME, s_PrimeNumber) => ((s_RemainderFn(PRIME, NUMBER) = 0) => ((NUMBER = 1) | (NUMBER = PRIME)))))))).

/*
(instance RoundFn UnaryFunction)
*/
fof(a8871,axiom,s_instance(s_RoundFn_m, s_UnaryFunction)).

/*
(instance RelationExtendedToQuantities SetOrClass)
*/
fof(a8872,axiom,s_instance(s_RelationExtendedToQuantities, s_SetOrClass)).

/*
(instance RoundFn RelationExtendedToQuantities)
*/
fof(a8873,axiom,s_instance(s_RoundFn_m, s_RelationExtendedToQuantities)).

/*
(instance RoundFn TotalValuedRelation)
*/
fof(a8874,axiom,s_instance(s_RoundFn_m, s_TotalValuedRelation)).

/*
(range RoundFn Quantity)
*/
fof(a8875,axiom,s_range(s_RoundFn_m, s_Quantity)).

/*
(forall (?NUMBER2 ?NUMBER1)
 (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 Entity))
  (=> (equal (RoundFn ?NUMBER1) ?NUMBER2)
   (or (=> (lessThan (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5)
        (equal ?NUMBER2 (FloorFn ?NUMBER1)))
       (=>
        (greaterThanOrEqualTo
         (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5)
        (equal ?NUMBER2 (CeilingFn ?NUMBER1)))))))
*/
fof(a8876,axiom,! [NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_RealNumber) & s_instance(NUMBER2, s_Entity)) => ((s_RoundFn(NUMBER1) = NUMBER2) => ((less(s_SubtractionFn(NUMBER1, s_FloorFn(NUMBER1)), 0.5) => (NUMBER2 = s_FloorFn(NUMBER1))) | (s_greaterThanOrEqualTo(s_SubtractionFn(NUMBER1, s_FloorFn(NUMBER1)), 0.5) => (NUMBER2 = s_CeilingFn(NUMBER1)))))))).

/*
(instance SignumFn UnaryFunction)
*/
fof(a8877,axiom,s_instance(s_SignumFn_m, s_UnaryFunction)).

/*
(instance SignumFn TotalValuedRelation)
*/
fof(a8878,axiom,s_instance(s_SignumFn_m, s_TotalValuedRelation)).

/*
(range SignumFn Integer)
*/
fof(a8879,axiom,s_range(s_SignumFn_m, s_Integer)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER NonnegativeRealNumber)
  (or (equal (SignumFn ?NUMBER) 1) (equal (SignumFn ?NUMBER) 0))))
*/
fof(a8880,axiom,! [NUMBER] : ((s_instance(NUMBER, s_NonnegativeRealNumber) => ((s_SignumFn(NUMBER) = 1) | (s_SignumFn(NUMBER) = 0))))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER PositiveRealNumber)
  (equal (SignumFn ?NUMBER) 1)))
*/
fof(a8881,axiom,! [NUMBER] : ((s_instance(NUMBER, s_PositiveRealNumber) => (s_SignumFn(NUMBER) = 1)))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER NegativeRealNumber)
  (equal (SignumFn ?NUMBER) -1)))
*/
fof(a8882,axiom,! [NUMBER] : ((s_instance(NUMBER, s_NegativeRealNumber) => (s_SignumFn(NUMBER) = -1)))).

/*
(instance SineFn UnaryFunction)
*/
fof(a8883,axiom,s_instance(s_SineFn_m, s_UnaryFunction)).

/*
(instance SineFn TotalValuedRelation)
*/
fof(a8884,axiom,s_instance(s_SineFn_m, s_TotalValuedRelation)).

/*
(range SineFn RealNumber)
*/
fof(a8885,axiom,s_range(s_SineFn_m, s_RealNumber)).

/*
(instance SquareRootFn UnaryFunction)
*/
fof(a8886,axiom,s_instance(s_SquareRootFn_m, s_UnaryFunction)).

/*
(range SquareRootFn Number)
*/
fof(a8887,axiom,s_range(s_SquareRootFn_m, s_Number)).

/*
(forall (?NUMBER2 ?NUMBER1)
 (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 Quantity))
  (=> (equal (SquareRootFn ?NUMBER1) ?NUMBER2)
   (equal (MultiplicationFn ?NUMBER2 ?NUMBER2) ?NUMBER1))))
*/
fof(a8888,axiom,! [NUMBER2,NUMBER1] : (((s_instance(NUMBER1, s_RealNumber) & s_instance(NUMBER2, s_Quantity)) => ((s_SquareRootFn(NUMBER1) = NUMBER2) => (times(NUMBER2, NUMBER2) = NUMBER1))))).

/*
(instance TangentFn UnaryFunction)
*/
fof(a8889,axiom,s_instance(s_TangentFn_m, s_UnaryFunction)).

/*
(instance TangentFn TotalValuedRelation)
*/
fof(a8890,axiom,s_instance(s_TangentFn_m, s_TotalValuedRelation)).

/*
(range TangentFn RealNumber)
*/
fof(a8891,axiom,s_range(s_TangentFn_m, s_RealNumber)).

/*
(forall (?DEGREE)
 (=> (instance ?DEGREE PlaneAngleMeasure)
  (equal (TangentFn ?DEGREE)
         (DivisionFn (SineFn ?DEGREE) (CosineFn ?DEGREE)))))
*/
fof(a8892,axiom,! [DEGREE] : ((s_instance(DEGREE, s_PlaneAngleMeasure) => (s_TangentFn(DEGREE) = divide(s_SineFn(DEGREE), s_CosineFn(DEGREE)))))).

/*
(instance identityElement BinaryPredicate)
*/
fof(a8893,axiom,s_instance(s_identityElement_m, s_BinaryPredicate)).

/*
(instance identityElement AsymmetricRelation)
*/
fof(a8894,axiom,s_instance(s_identityElement_m, s_AsymmetricRelation)).

/*
(forall (?ID ?CLASS ?FUNCTION)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=>
    (and (instance ?FUNCTION BinaryFunction)
         (instance ?CLASS SetOrClass) (instance ?ID Function))
    (=> (identityElement ?FUNCTION ?ID)
     (=> (and (domain ?FUNCTION 1 ?CLASS) (instance ?INST ?CLASS))
      (equal (AssignmentFn3 ?FUNCTION ?ID ?INST) ?INST)))))))
*/
fof(a8895,axiom,! [ID,CLASS,FUNCTION] : (! [INST] : ((s_instance(INST, s_Entity) => ((s_instance(FUNCTION, s_BinaryFunction) & s_instance(CLASS, s_SetOrClass) & s_instance(ID, s_Function)) => (s_identityElement(FUNCTION, ID) => ((s_domain(FUNCTION, 1, CLASS) & s_instance(INST, CLASS)) => (s_AssignmentFn3(FUNCTION, ID, INST) = INST)))))))).

/*
(identityElement MultiplicationFn 1)
*/
fof(a8896,axiom,s_identityElement(s_MultiplicationFn_m, 1)).

/*
(identityElement AdditionFn 0)
*/
fof(a8897,axiom,s_identityElement(s_AdditionFn_m, 0)).

/*
(identityElement SubtractionFn 0)
*/
fof(a8898,axiom,s_identityElement(s_SubtractionFn_m, 0)).

/*
(identityElement DivisionFn 1)
*/
fof(a8899,axiom,s_identityElement(s_DivisionFn_m, 1)).

/*
(instance SuccessorFn UnaryFunction)
*/
fof(a8900,axiom,s_instance(s_SuccessorFn_m, s_UnaryFunction)).

/*
(instance SuccessorFn TotalValuedRelation)
*/
fof(a8901,axiom,s_instance(s_SuccessorFn_m, s_TotalValuedRelation)).

/*
(range SuccessorFn Integer)
*/
fof(a8902,axiom,s_range(s_SuccessorFn_m, s_Integer)).

/*
(forall (?INT2 ?INT1)
 (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer))
  (=> (equal (SuccessorFn ?INT1) (SuccessorFn ?INT2))
   (equal ?INT1 ?INT2))))
*/
fof(a8903,axiom,! [INT2,INT1] : (((s_instance(INT1, s_Integer) & s_instance(INT2, s_Integer)) => ((s_SuccessorFn(INT1) = s_SuccessorFn(INT2)) => (INT1 = INT2))))).

/*
(forall (?INT)
 (=> (instance ?INT Integer) (lessThan ?INT (SuccessorFn ?INT))))
*/
fof(a8904,axiom,! [INT] : ((s_instance(INT, s_Integer) => less(INT, s_SuccessorFn(INT))))).

/*
(forall (?INT2 ?INT1)
 (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer))
  (not (and (lessThan ?INT1 ?INT2)
            (lessThan ?INT2 (SuccessorFn ?INT1))))))
*/
fof(a8905,axiom,! [INT2,INT1] : (((s_instance(INT1, s_Integer) & s_instance(INT2, s_Integer)) => (~ (less(INT1, INT2) & less(INT2, s_SuccessorFn(INT1))))))).

/*
(forall (?INT)
 (=> (instance ?INT Integer)
  (equal ?INT (SuccessorFn (PredecessorFn ?INT)))))
*/
fof(a8906,axiom,! [INT] : ((s_instance(INT, s_Integer) => (INT = s_SuccessorFn(s_PredecessorFn(INT)))))).

/*
(forall (?INT)
 (=> (instance ?INT Integer)
  (equal ?INT (PredecessorFn (SuccessorFn ?INT)))))
*/
fof(a8907,axiom,! [INT] : ((s_instance(INT, s_Integer) => (INT = s_PredecessorFn(s_SuccessorFn(INT)))))).

/*
(instance PredecessorFn UnaryFunction)
*/
fof(a8908,axiom,s_instance(s_PredecessorFn_m, s_UnaryFunction)).

/*
(instance PredecessorFn TotalValuedRelation)
*/
fof(a8909,axiom,s_instance(s_PredecessorFn_m, s_TotalValuedRelation)).

/*
(range PredecessorFn Integer)
*/
fof(a8910,axiom,s_range(s_PredecessorFn_m, s_Integer)).

/*
(forall (?INT2 ?INT1)
 (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer))
  (=> (equal (PredecessorFn ?INT1) (PredecessorFn ?INT2))
   (equal ?INT1 ?INT2))))
*/
fof(a8911,axiom,! [INT2,INT1] : (((s_instance(INT1, s_Integer) & s_instance(INT2, s_Integer)) => ((s_PredecessorFn(INT1) = s_PredecessorFn(INT2)) => (INT1 = INT2))))).

/*
(forall (?INT)
 (=> (instance ?INT Integer) (greaterThan ?INT (PredecessorFn ?INT))))
*/
fof(a8912,axiom,! [INT] : ((s_instance(INT, s_Integer) => greater(INT, s_PredecessorFn(INT))))).

/*
(forall (?INT2 ?INT1)
 (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer))
  (not (and (lessThan ?INT2 ?INT1)
            (lessThan (PredecessorFn ?INT1) ?INT2)))))
*/
fof(a8913,axiom,! [INT2,INT1] : (((s_instance(INT1, s_Integer) & s_instance(INT2, s_Integer)) => (~ (less(INT2, INT1) & less(s_PredecessorFn(INT1), INT2)))))).

/*
(instance average PartialValuedRelation)
*/
fof(a8914,axiom,s_instance(s_average_m, s_PartialValuedRelation)).

/*
(instance average BinaryPredicate)
*/
fof(a8915,axiom,s_instance(s_average_m, s_BinaryPredicate)).

/*
(instance average SingleValuedRelation)
*/
fof(a8916,axiom,s_instance(s_average_m, s_SingleValuedRelation)).

/*
(forall (?AVERAGE ?LIST)
 (forall (?LISTITEM)
  (=> (instance ?LISTITEM Entity)
   (=> (and (instance ?LIST List) (instance ?AVERAGE RealNumber))
    (=> (average ?LIST ?AVERAGE)
     (=> (inList ?LISTITEM ?LIST) (instance ?LISTITEM RealNumber)))))))
*/
fof(a8917,axiom,! [AVERAGE,LIST] : (! [LISTITEM] : ((s_instance(LISTITEM, s_Entity) => ((s_instance(LIST, s_List) & s_instance(AVERAGE, s_RealNumber)) => (s_average(LIST, AVERAGE) => (s_inList(LISTITEM, LIST) => s_instance(LISTITEM, s_RealNumber)))))))).

/*
(subrelation subset subclass)
*/
fof(a8918,axiom,s_subrelation(s_subset_m, s_subclass_m)).

/*
(forall (?SET ?SUBSET)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Entity)
   (=> (and (instance ?SUBSET Set) (instance ?SET Set))
    (=> (subset ?SUBSET ?SET)
     (=> (element ?ELEMENT ?SUBSET) (element ?ELEMENT ?SET)))))))
*/
fof(a8919,axiom,! [SET,SUBSET] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Entity) => ((s_instance(SUBSET, s_Set) & s_instance(SET, s_Set)) => (s_subset(SUBSET, SET) => (s_element(ELEMENT, SUBSET) => s_element(ELEMENT, SET)))))))).

/*
(instance element BinaryPredicate)
*/
fof(a8920,axiom,s_instance(s_element_m, s_BinaryPredicate)).

/*
(instance element AsymmetricRelation)
*/
fof(a8921,axiom,s_instance(s_element_m, s_AsymmetricRelation)).

/*
(subrelation element instance)
*/
fof(a8922,axiom,s_subrelation(s_element_m, s_instance_m)).

/*
(forall (?SET2 ?SET1)
 (exists (?ELEMENT)
  (and (instance ?ELEMENT Entity)
       (=> (and (instance ?SET1 Set) (instance ?SET2 Set))
        (=> (<=> (element ?ELEMENT ?SET1) (element ?ELEMENT ?SET2))
         (equal ?SET1 ?SET2))))))
*/
fof(a8923,axiom,! [SET2,SET1] : (? [ELEMENT] : ((s_instance(ELEMENT, s_Entity) & ((s_instance(SET1, s_Set) & s_instance(SET2, s_Set)) => ((s_element(ELEMENT, SET1) <=> s_element(ELEMENT, SET2)) => (SET1 = SET2))))))).

/*
(instance UnionFn BinaryFunction)
*/
fof(a8924,axiom,s_instance(s_UnionFn_m, s_BinaryFunction)).

/*
(instance UnionFn TotalValuedRelation)
*/
fof(a8925,axiom,s_instance(s_UnionFn_m, s_TotalValuedRelation)).

/*
(range UnionFn SetOrClass)
*/
fof(a8926,axiom,s_range(s_UnionFn_m, s_SetOrClass)).

/*
(instance IntersectionFn BinaryFunction)
*/
fof(a8927,axiom,s_instance(s_IntersectionFn_m, s_BinaryFunction)).

/*
(instance IntersectionFn TotalValuedRelation)
*/
fof(a8928,axiom,s_instance(s_IntersectionFn_m, s_TotalValuedRelation)).

/*
(range IntersectionFn SetOrClass)
*/
fof(a8929,axiom,s_range(s_IntersectionFn_m, s_SetOrClass)).

/*
(instance RelativeComplementFn BinaryFunction)
*/
fof(a8930,axiom,s_instance(s_RelativeComplementFn_m, s_BinaryFunction)).

/*
(instance RelativeComplementFn TotalValuedRelation)
*/
fof(a8931,axiom,s_instance(s_RelativeComplementFn_m, s_TotalValuedRelation)).

/*
(range RelativeComplementFn SetOrClass)
*/
fof(a8932,axiom,s_range(s_RelativeComplementFn_m, s_SetOrClass)).

/*
(instance ComplementFn UnaryFunction)
*/
fof(a8933,axiom,s_instance(s_ComplementFn_m, s_UnaryFunction)).

/*
(instance ComplementFn TotalValuedRelation)
*/
fof(a8934,axiom,s_instance(s_ComplementFn_m, s_TotalValuedRelation)).

/*
(range ComplementFn SetOrClass)
*/
fof(a8935,axiom,s_range(s_ComplementFn_m, s_SetOrClass)).

/*
(instance GeneralizedUnionFn UnaryFunction)
*/
fof(a8936,axiom,s_instance(s_GeneralizedUnionFn_m, s_UnaryFunction)).

/*
(instance GeneralizedUnionFn TotalValuedRelation)
*/
fof(a8937,axiom,s_instance(s_GeneralizedUnionFn_m, s_TotalValuedRelation)).

/*
(domainSubclass GeneralizedUnionFn 1 SetOrClass)
*/
fof(a8938,axiom,s_domainSubclass(s_GeneralizedUnionFn_m, 1, s_SetOrClass)).

/*
(range GeneralizedUnionFn SetOrClass)
*/
fof(a8939,axiom,s_range(s_GeneralizedUnionFn_m, s_SetOrClass)).

/*
(instance GeneralizedIntersectionFn UnaryFunction)
*/
fof(a8940,axiom,s_instance(s_GeneralizedIntersectionFn_m, s_UnaryFunction)).

/*
(instance GeneralizedIntersectionFn TotalValuedRelation)
*/
fof(a8941,axiom,s_instance(s_GeneralizedIntersectionFn_m, s_TotalValuedRelation)).

/*
(domainSubclass GeneralizedIntersectionFn 1 SetOrClass)
*/
fof(a8942,axiom,s_domainSubclass(s_GeneralizedIntersectionFn_m, 1, s_SetOrClass)).

/*
(range GeneralizedIntersectionFn SetOrClass)
*/
fof(a8943,axiom,s_range(s_GeneralizedIntersectionFn_m, s_SetOrClass)).

/*
(instance CardinalityFn UnaryFunction)
*/
fof(a8944,axiom,s_instance(s_CardinalityFn_m, s_UnaryFunction)).

/*
(instance CardinalityFn TotalValuedRelation)
*/
fof(a8945,axiom,s_instance(s_CardinalityFn_m, s_TotalValuedRelation)).

/*
(instance CardinalityFn AsymmetricRelation)
*/
fof(a8946,axiom,s_instance(s_CardinalityFn_m, s_AsymmetricRelation)).

/*
(range CardinalityFn Number)
*/
fof(a8947,axiom,s_range(s_CardinalityFn_m, s_Number)).

/*
(forall (?SET)
 (forall (?INST)
  (=> (instance ?INST Entity)
   (=> (instance ?SET NullSet) (not (instance ?INST ?SET))))))
*/
fof(a8948,axiom,! [SET] : (! [INST] : ((s_instance(INST, s_Entity) => (s_instance(SET, s_NullSet) => (~ s_instance(INST, SET))))))).

/*
(forall (?SET)
 (exists (?INST)
  (and (instance ?INST Entity)
       (=> (instance ?SET NonNullSet) (instance ?INST ?SET)))))
*/
fof(a8949,axiom,! [SET] : (? [INST] : ((s_instance(INST, s_Entity) & (s_instance(SET, s_NonNullSet) => s_instance(INST, SET)))))).

/*
(instance FiniteSet SetOrClass)
*/
fof(a8950,axiom,s_instance(s_FiniteSet, s_SetOrClass)).

/*
(instance Set SetOrClass)
*/
fof(a8951,axiom,s_instance(s_Set, s_SetOrClass)).

/*
(subclass FiniteSet Set)
*/
fof(a8952,axiom,s_subclass(s_FiniteSet, s_Set)).

/*
(forall (?SET)
 (exists (?NUMBER)
  (and (instance ?NUMBER Entity)
       (=> (instance ?SET FiniteSet)
        (and (instance ?NUMBER NonnegativeInteger)
             (equal ?NUMBER (CardinalityFn ?SET)))))))
*/
fof(a8953,axiom,! [SET] : (? [NUMBER] : ((s_instance(NUMBER, s_Entity) & (s_instance(SET, s_FiniteSet) => (s_instance(NUMBER, s_NonnegativeInteger) & (NUMBER = s_CardinalityFn(SET)))))))).

/*
(forall (?SUPERCLASS)
 (forall (?CLASS1 ?CLASS2)
  (=> (and (instance ?CLASS2 SetOrClass) (instance ?CLASS1 SetOrClass))
   (=> (instance ?SUPERCLASS PairwiseDisjointClass)
    (=>
     (and (instance ?CLASS1 ?SUPERCLASS)
          (instance ?CLASS2 ?SUPERCLASS))
     (or (equal ?CLASS1 ?CLASS2) (disjoint ?CLASS1 ?CLASS2)))))))
*/
fof(a8954,axiom,! [SUPERCLASS] : (! [CLASS1,CLASS2] : (((s_instance(CLASS2, s_SetOrClass) & s_instance(CLASS1, s_SetOrClass)) => (s_instance(SUPERCLASS, s_PairwiseDisjointClass) => ((s_instance(CLASS1, SUPERCLASS) & s_instance(CLASS2, SUPERCLASS)) => ((CLASS1 = CLASS2) | s_disjoint(CLASS1, CLASS2)))))))).

/*
(forall (?CLASS)
 (forall (?INST1 ?INST2)
  (exists (?INST3)
   (and (instance ?INST3 SetOrClass)
        (=> (and (instance ?INST2 Entity) (instance ?INST1 SetOrClass))
         (=> (instance ?CLASS MutuallyDisjointClass)
          (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?INST1))
           (and (instance ?INST3 ?CLASS)
                (not (instance ?INST2 ?INST3))))))))))
*/
fof(a8955,axiom,! [CLASS] : (! [INST1,INST2] : (? [INST3] : ((s_instance(INST3, s_SetOrClass) & ((s_instance(INST2, s_Entity) & s_instance(INST1, s_SetOrClass)) => (s_instance(CLASS, s_MutuallyDisjointClass) => ((s_instance(INST1, CLASS) & s_instance(INST2, INST1)) => (s_instance(INST3, CLASS) & (~ s_instance(INST2, INST3))))))))))).

/*
(instance KappaFn BinaryFunction)
*/
fof(a8956,axiom,s_instance(s_KappaFn_m, s_BinaryFunction)).

/*
(instance KappaFn PartialValuedRelation)
*/
fof(a8957,axiom,s_instance(s_KappaFn_m, s_PartialValuedRelation)).

/*
(range KappaFn Class)
*/
fof(a8958,axiom,s_range(s_KappaFn_m, s_Class)).

/*
(subclass Graph Abstract)
*/
fof(a8959,axiom,s_subclass(s_Graph, s_Abstract)).

/*
(forall (?NODE1 ?GRAPH ?NODE2)
 (exists (?ARC ?PATH)
  (and (and (instance ?PATH GraphPath) (instance ?ARC GraphArc))
       (=>
        (and (instance ?GRAPH Graph)
             (and (instance ?NODE1 GraphNode)
                  (and (instance ?NODE2 GraphNode)
                       (and (graphPart ?NODE1 ?GRAPH)
                            (and (graphPart ?NODE2 ?GRAPH)
                                 (not (equal ?NODE1 ?NODE2)))))))
        (or (links ?NODE1 ?NODE2 ?ARC)
            (and (subGraph ?PATH ?GRAPH)
                 (and (instance ?PATH GraphPath)
                      (or (and (equal (BeginNodeFn ?PATH) ?NODE1)
                               (equal (EndNodeFn ?PATH) ?NODE2))
                          (and (equal (BeginNodeFn ?PATH) ?NODE2)
                               (equal (EndNodeFn ?PATH) ?NODE1))))))))))
*/
fof(a8960,axiom,! [NODE1,GRAPH,NODE2] : (? [ARC,PATH] : (((s_instance(PATH, s_GraphPath) & s_instance(ARC, s_GraphArc)) & ((s_instance(GRAPH, s_Graph) & (s_instance(NODE1, s_GraphNode) & (s_instance(NODE2, s_GraphNode) & (s_graphPart(NODE1, GRAPH) & (s_graphPart(NODE2, GRAPH) & (~ (NODE1 = NODE2))))))) => (s_links(NODE1, NODE2, ARC) | (s_subGraph(PATH, GRAPH) & (s_instance(PATH, s_GraphPath) & (((s_BeginNodeFn(PATH) = NODE1) & (s_EndNodeFn(PATH) = NODE2)) | ((s_BeginNodeFn(PATH) = NODE2) & (s_EndNodeFn(PATH) = NODE1))))))))))).

/*
(forall (?GRAPH)
 (exists (?NODE1 ?NODE2 ?NODE3 ?ARC1 ?ARC2)
  (and (and (instance ?ARC2 GraphArc) (instance ?ARC1 GraphArc)
            (instance ?NODE3 GraphNode) (instance ?NODE2 GraphNode)
            (instance ?NODE1 GraphNode))
       (=> (instance ?GRAPH Graph)
        (and (graphPart ?NODE1 ?GRAPH)
             (and (graphPart ?NODE2 ?GRAPH)
                  (and (graphPart ?NODE3 ?GRAPH)
                       (and (graphPart ?ARC1 ?GRAPH)
                            (and (graphPart ?ARC2 ?GRAPH)
                                 (and
                                  (links ?NODE1 ?NODE2 ?ARC1)
                                  (and
                                   (links ?NODE2 ?NODE3 ?ARC2)
                                   (and
                                    (not (equal ?NODE1 ?NODE2))
                                    (and
                                     (not (equal ?NODE2 ?NODE3))
                                     (and
                                      (not (equal ?NODE1 ?NODE3))
                                      (not
                                       (equal
                                        ?ARC1
                                        ?ARC2))))))))))))))))
*/
fof(a8961,axiom,! [GRAPH] : (? [NODE1,NODE2,NODE3,ARC1,ARC2] : (((s_instance(ARC2, s_GraphArc) & s_instance(ARC1, s_GraphArc) & s_instance(NODE3, s_GraphNode) & s_instance(NODE2, s_GraphNode) & s_instance(NODE1, s_GraphNode)) & (s_instance(GRAPH, s_Graph) => (s_graphPart(NODE1, GRAPH) & (s_graphPart(NODE2, GRAPH) & (s_graphPart(NODE3, GRAPH) & (s_graphPart(ARC1, GRAPH) & (s_graphPart(ARC2, GRAPH) & (s_links(NODE1, NODE2, ARC1) & (s_links(NODE2, NODE3, ARC2) & ((~ (NODE1 = NODE2)) & ((~ (NODE2 = NODE3)) & ((~ (NODE1 = NODE3)) & (~ (ARC1 = ARC2))))))))))))))))).

/*
(subclass DirectedGraph Graph)
*/
fof(a8962,axiom,s_subclass(s_DirectedGraph, s_Graph)).

/*
(forall (?GRAPH ?ARC)
 (exists (?NODE1 ?NODE2)
  (and (and (instance ?NODE2 Entity) (instance ?NODE1 Entity))
       (=>
        (and (instance ?GRAPH DirectedGraph)
             (and (instance ?ARC GraphArc) (graphPart ?ARC ?GRAPH)))
        (and (equal (InitialNodeFn ?ARC) ?NODE1)
             (equal (TerminalNodeFn ?ARC) ?NODE2))))))
*/
fof(a8963,axiom,! [GRAPH,ARC] : (? [NODE1,NODE2] : (((s_instance(NODE2, s_Entity) & s_instance(NODE1, s_Entity)) & ((s_instance(GRAPH, s_DirectedGraph) & (s_instance(ARC, s_GraphArc) & s_graphPart(ARC, GRAPH))) => ((s_InitialNodeFn(ARC) = NODE1) & (s_TerminalNodeFn(ARC) = NODE2))))))).

/*
(instance Tree SetOrClass)
*/
fof(a8964,axiom,s_instance(s_Tree, s_SetOrClass)).

/*
(subclass Tree DirectedGraph)
*/
fof(a8965,axiom,s_subclass(s_Tree, s_DirectedGraph)).

/*
(forall (?GRAPH)
 (forall (?LOOP)
  (=> (instance ?LOOP GraphElement)
   (=> (instance ?GRAPH Tree)
    (not (and (instance ?LOOP GraphLoop) (graphPart ?LOOP ?GRAPH)))))))
*/
fof(a8966,axiom,! [GRAPH] : (! [LOOP] : ((s_instance(LOOP, s_GraphElement) => (s_instance(GRAPH, s_Tree) => (~ (s_instance(LOOP, s_GraphLoop) & s_graphPart(LOOP, GRAPH)))))))).

/*
(forall (?GRAPH)
 (forall (?LOOP)
  (=> (instance ?LOOP GraphElement)
   (=> (instance ?GRAPH Tree)
    (not (and (instance ?LOOP GraphCircuit)
              (graphPart ?LOOP ?GRAPH)))))))
*/
fof(a8967,axiom,! [GRAPH] : (! [LOOP] : ((s_instance(LOOP, s_GraphElement) => (s_instance(GRAPH, s_Tree) => (~ (s_instance(LOOP, s_GraphCircuit) & s_graphPart(LOOP, GRAPH)))))))).

/*
(forall (?GRAPH)
 (forall (?ARC1 ?ARC2 ?NODE)
  (=>
   (and (instance ?NODE GraphElement) (instance ?ARC2 GraphArc)
        (instance ?ARC1 GraphArc))
   (=> (instance ?GRAPH Tree)
    (not (and (graphPart ?ARC1 ?GRAPH)
              (and (graphPart ?ARC2 ?GRAPH)
                   (and (graphPart ?NODE ?GRAPH)
                        (and (equal (TerminalNodeFn ?ARC1) ?NODE)
                             (and (equal (TerminalNodeFn ?ARC2) ?NODE)
                                  (not (equal ?ARC1 ?ARC2))))))))))))
*/
fof(a8968,axiom,! [GRAPH] : (! [ARC1,ARC2,NODE] : (((s_instance(NODE, s_GraphElement) & s_instance(ARC2, s_GraphArc) & s_instance(ARC1, s_GraphArc)) => (s_instance(GRAPH, s_Tree) => (~ (s_graphPart(ARC1, GRAPH) & (s_graphPart(ARC2, GRAPH) & (s_graphPart(NODE, GRAPH) & ((s_TerminalNodeFn(ARC1) = NODE) & ((s_TerminalNodeFn(ARC2) = NODE) & (~ (ARC1 = ARC2))))))))))))).

/*
(instance DirectedGraph SetOrClass)
*/
fof(a8969,axiom,s_instance(s_DirectedGraph, s_SetOrClass)).

/*
(subclass GraphPath DirectedGraph)
*/
fof(a8970,axiom,s_subclass(s_GraphPath, s_DirectedGraph)).

/*
(forall (?NODE ?GRAPH ?ARC)
 (forall (?OTHER)
  (=> (instance ?OTHER GraphArc)
   (=> (instance ?NODE Entity)
    (=>
     (and (instance ?GRAPH GraphPath)
          (and (instance ?ARC GraphArc) (graphPart ?ARC ?GRAPH)))
     (=> (equal (InitialNodeFn ?ARC) ?NODE)
      (not (and (equal (InitialNodeFn ?OTHER) ?NODE)
                (not (equal ?OTHER ?ARC))))))))))
*/
fof(a8971,axiom,! [NODE,GRAPH,ARC] : (! [OTHER] : ((s_instance(OTHER, s_GraphArc) => (s_instance(NODE, s_Entity) => ((s_instance(GRAPH, s_GraphPath) & (s_instance(ARC, s_GraphArc) & s_graphPart(ARC, GRAPH))) => ((s_InitialNodeFn(ARC) = NODE) => (~ ((s_InitialNodeFn(OTHER) = NODE) & (~ (OTHER = ARC))))))))))).

/*
(forall (?NODE ?GRAPH ?ARC)
 (forall (?OTHER)
  (=> (instance ?OTHER GraphArc)
   (=> (instance ?NODE Entity)
    (=>
     (and (instance ?GRAPH GraphPath)
          (and (instance ?ARC GraphArc) (graphPart ?ARC ?GRAPH)))
     (=> (equal (TerminalNodeFn ?ARC) ?NODE)
      (not (and (equal (TerminalNodeFn ?OTHER) ?NODE)
                (not (equal ?OTHER ?ARC))))))))))
*/
fof(a8972,axiom,! [NODE,GRAPH,ARC] : (! [OTHER] : ((s_instance(OTHER, s_GraphArc) => (s_instance(NODE, s_Entity) => ((s_instance(GRAPH, s_GraphPath) & (s_instance(ARC, s_GraphArc) & s_graphPart(ARC, GRAPH))) => ((s_TerminalNodeFn(ARC) = NODE) => (~ ((s_TerminalNodeFn(OTHER) = NODE) & (~ (OTHER = ARC))))))))))).

/*
(instance GraphCircuit SetOrClass)
*/
fof(a8973,axiom,s_instance(s_GraphCircuit, s_SetOrClass)).

/*
(instance GraphPath SetOrClass)
*/
fof(a8974,axiom,s_instance(s_GraphPath, s_SetOrClass)).

/*
(subclass GraphCircuit GraphPath)
*/
fof(a8975,axiom,s_subclass(s_GraphCircuit, s_GraphPath)).

/*
(forall (?GRAPH)
 (forall (?NODE)
  (exists (?g6762)
   (and (instance ?g6762 Entity)
        (=> (instance ?NODE Entity)
         (and (=> (instance ?GRAPH GraphCircuit)
               (and (equal (BeginNodeFn ?GRAPH) ?g6762)
                    (equal (EndNodeFn ?GRAPH) ?g6762)))
              (=>
               (and (equal (BeginNodeFn ?GRAPH) ?NODE)
                    (equal (EndNodeFn ?GRAPH) ?NODE))
               (instance ?GRAPH GraphCircuit))))))))
*/
fof(a8976,axiom,! [GRAPH] : (! [NODE] : (? [G6762] : ((s_instance(G6762, s_Entity) & (s_instance(NODE, s_Entity) => ((s_instance(GRAPH, s_GraphCircuit) => ((s_BeginNodeFn(GRAPH) = G6762) & (s_EndNodeFn(GRAPH) = G6762))) & (((s_BeginNodeFn(GRAPH) = NODE) & (s_EndNodeFn(GRAPH) = NODE)) => s_instance(GRAPH, s_GraphCircuit))))))))).

/*
(instance MultiGraph SetOrClass)
*/
fof(a8977,axiom,s_instance(s_MultiGraph, s_SetOrClass)).

/*
(subclass MultiGraph Graph)
*/
fof(a8978,axiom,s_subclass(s_MultiGraph, s_Graph)).

/*
(forall (?GRAPH)
 (forall (?ARC1 ?ARC2 ?NODE1 ?NODE2)
  (exists (?g6772 ?g6773 ?g6774 ?g6775)
   (and (and (instance ?g6775 GraphNode) (instance ?g6774 GraphNode)
             (instance ?g6773 GraphArc) (instance ?g6772 GraphArc))
        (=>
         (and (instance ?NODE2 GraphNode) (instance ?NODE1 GraphNode)
              (instance ?ARC2 GraphArc) (instance ?ARC1 GraphArc))
         (and (=> (instance ?GRAPH MultiGraph)
               (and (graphPart ?g6772 ?GRAPH)
                    (and (graphPart ?g6773 ?GRAPH)
                         (and (graphPart ?g6774 ?GRAPH)
                              (and (graphPart ?g6775 ?GRAPH)
                                   (and
                                    (links ?g6774 ?g6775 ?g6772)
                                    (and
                                     (links ?g6774 ?g6775 ?g6773)
                                     (not (equal ?g6772 ?g6773)))))))))
              (=>
               (and (graphPart ?ARC1 ?GRAPH)
                    (and (graphPart ?ARC2 ?GRAPH)
                         (and (graphPart ?NODE1 ?GRAPH)
                              (and (graphPart ?NODE2 ?GRAPH)
                                   (and
                                    (links ?NODE1 ?NODE2 ?ARC1)
                                    (and
                                     (links ?NODE1 ?NODE2 ?ARC2)
                                     (not (equal ?ARC1 ?ARC2))))))))
               (instance ?GRAPH MultiGraph))))))))
*/
fof(a8979,axiom,! [GRAPH] : (! [ARC1,ARC2,NODE1,NODE2] : (? [G6772,G6773,G6774,G6775] : (((s_instance(G6775, s_GraphNode) & s_instance(G6774, s_GraphNode) & s_instance(G6773, s_GraphArc) & s_instance(G6772, s_GraphArc)) & ((s_instance(NODE2, s_GraphNode) & s_instance(NODE1, s_GraphNode) & s_instance(ARC2, s_GraphArc) & s_instance(ARC1, s_GraphArc)) => ((s_instance(GRAPH, s_MultiGraph) => (s_graphPart(G6772, GRAPH) & (s_graphPart(G6773, GRAPH) & (s_graphPart(G6774, GRAPH) & (s_graphPart(G6775, GRAPH) & (s_links(G6774, G6775, G6772) & (s_links(G6774, G6775, G6773) & (~ (G6772 = G6773))))))))) & ((s_graphPart(ARC1, GRAPH) & (s_graphPart(ARC2, GRAPH) & (s_graphPart(NODE1, GRAPH) & (s_graphPart(NODE2, GRAPH) & (s_links(NODE1, NODE2, ARC1) & (s_links(NODE1, NODE2, ARC2) & (~ (ARC1 = ARC2)))))))) => s_instance(GRAPH, s_MultiGraph))))))))).

/*
(instance PseudoGraph SetOrClass)
*/
fof(a8980,axiom,s_instance(s_PseudoGraph, s_SetOrClass)).

/*
(instance Graph SetOrClass)
*/
fof(a8981,axiom,s_instance(s_Graph, s_SetOrClass)).

/*
(subclass PseudoGraph Graph)
*/
fof(a8982,axiom,s_subclass(s_PseudoGraph, s_Graph)).

/*
(forall (?GRAPH)
 (forall (?LOOP)
  (exists (?g6782)
   (and (=> (instance ?GRAPH PseudoGraph)
         (and (instance ?g6782 GraphLoop) (graphPart ?g6782 ?GRAPH)))
        (=> (and (instance ?LOOP GraphLoop) (graphPart ?LOOP ?GRAPH))
         (instance ?GRAPH PseudoGraph))))))
*/
fof(a8983,axiom,! [GRAPH] : (! [LOOP] : (? [G6782] : (((s_instance(GRAPH, s_PseudoGraph) => (s_instance(G6782, s_GraphLoop) & s_graphPart(G6782, GRAPH))) & ((s_instance(LOOP, s_GraphLoop) & s_graphPart(LOOP, GRAPH)) => s_instance(GRAPH, s_PseudoGraph))))))).

/*
(instance Abstract SetOrClass)
*/
fof(a8984,axiom,s_instance(s_Abstract, s_SetOrClass)).

/*
(subclass GraphElement Abstract)
*/
fof(a8985,axiom,s_subclass(s_GraphElement, s_Abstract)).

/*
(partition3 GraphElement GraphNode GraphArc)
*/
fof(a8986,axiom,s_partition3(s_GraphElement, s_GraphNode, s_GraphArc)).

/*
(forall (?PART)
 (exists (?GRAPH)
  (and (instance ?GRAPH Graph)
       (=> (instance ?PART GraphElement)
        (and (instance ?GRAPH Graph) (graphPart ?PART ?GRAPH))))))
*/
fof(a8987,axiom,! [PART] : (? [GRAPH] : ((s_instance(GRAPH, s_Graph) & (s_instance(PART, s_GraphElement) => (s_instance(GRAPH, s_Graph) & s_graphPart(PART, GRAPH))))))).

/*
(instance GraphNode SetOrClass)
*/
fof(a8988,axiom,s_instance(s_GraphNode, s_SetOrClass)).

/*
(subclass GraphNode GraphElement)
*/
fof(a8989,axiom,s_subclass(s_GraphNode, s_GraphElement)).

/*
(forall (?NODE)
 (exists (?OTHER ?ARC)
  (and (and (instance ?ARC GraphArc) (instance ?OTHER GraphNode))
       (=> (instance ?NODE GraphNode) (links ?NODE ?OTHER ?ARC)))))
*/
fof(a8990,axiom,! [NODE] : (? [OTHER,ARC] : (((s_instance(ARC, s_GraphArc) & s_instance(OTHER, s_GraphNode)) & (s_instance(NODE, s_GraphNode) => s_links(NODE, OTHER, ARC)))))).

/*
(instance GraphElement SetOrClass)
*/
fof(a8991,axiom,s_instance(s_GraphElement, s_SetOrClass)).

/*
(subclass GraphArc GraphElement)
*/
fof(a8992,axiom,s_subclass(s_GraphArc, s_GraphElement)).

/*
(forall (?ARC)
 (exists (?NODE1 ?NODE2)
  (and (and (instance ?NODE2 GraphNode) (instance ?NODE1 GraphNode))
       (=> (instance ?ARC GraphArc) (links ?NODE1 ?NODE2 ?ARC)))))
*/
fof(a8993,axiom,! [ARC] : (? [NODE1,NODE2] : (((s_instance(NODE2, s_GraphNode) & s_instance(NODE1, s_GraphNode)) & (s_instance(ARC, s_GraphArc) => s_links(NODE1, NODE2, ARC)))))).

/*
(instance GraphLoop SetOrClass)
*/
fof(a8994,axiom,s_instance(s_GraphLoop, s_SetOrClass)).

/*
(instance GraphArc SetOrClass)
*/
fof(a8995,axiom,s_instance(s_GraphArc, s_SetOrClass)).

/*
(subclass GraphLoop GraphArc)
*/
fof(a8996,axiom,s_subclass(s_GraphLoop, s_GraphArc)).

/*
(forall (?LOOP)
 (forall (?NODE)
  (exists (?g6791)
   (and (instance ?g6791 GraphNode)
        (=> (instance ?NODE GraphNode)
         (and (=> (instance ?LOOP GraphLoop)
               (links ?g6791 ?g6791 ?LOOP))
              (=> (links ?NODE ?NODE ?LOOP)
               (instance ?LOOP GraphLoop))))))))
*/
fof(a8997,axiom,! [LOOP] : (! [NODE] : (? [G6791] : ((s_instance(G6791, s_GraphNode) & (s_instance(NODE, s_GraphNode) => ((s_instance(LOOP, s_GraphLoop) => s_links(G6791, G6791, LOOP)) & (s_links(NODE, NODE, LOOP) => s_instance(LOOP, s_GraphLoop))))))))).

/*
(forall (?NODE ?ARC)
 (=> (and (instance ?ARC GraphArc) (instance ?NODE Entity))
  (=>
   (and (equal (InitialNodeFn ?ARC) ?NODE)
        (equal (TerminalNodeFn ?ARC) ?NODE))
   (instance ?ARC GraphLoop))))
*/
fof(a8998,axiom,! [NODE,ARC] : (((s_instance(ARC, s_GraphArc) & s_instance(NODE, s_Entity)) => (((s_InitialNodeFn(ARC) = NODE) & (s_TerminalNodeFn(ARC) = NODE)) => s_instance(ARC, s_GraphLoop))))).

/*
(instance links TernaryPredicate)
*/
fof(a8999,axiom,s_instance(s_links_m, s_TernaryPredicate)).

/*
(forall (?NODE1 ?ARC ?NODE2)
 (=>
  (and (instance ?NODE2 GraphNode) (instance ?ARC GraphArc)
       (instance ?NODE1 GraphNode))
  (=> (links ?NODE1 ?NODE2 ?ARC) (links ?NODE2 ?NODE1 ?ARC))))
*/
fof(a9000,axiom,! [NODE1,ARC,NODE2] : (((s_instance(NODE2, s_GraphNode) & s_instance(ARC, s_GraphArc) & s_instance(NODE1, s_GraphNode)) => (s_links(NODE1, NODE2, ARC) => s_links(NODE2, NODE1, ARC))))).

/*
(instance graphPart BinaryPredicate)
*/
fof(a9001,axiom,s_instance(s_graphPart_m, s_BinaryPredicate)).

/*
(instance graphPart AsymmetricRelation)
*/
fof(a9002,axiom,s_instance(s_graphPart_m, s_AsymmetricRelation)).

/*
(instance graphPart TotalValuedRelation)
*/
fof(a9003,axiom,s_instance(s_graphPart_m, s_TotalValuedRelation)).

/*
(instance graphPart IrreflexiveRelation)
*/
fof(a9004,axiom,s_instance(s_graphPart_m, s_IrreflexiveRelation)).

/*
(instance subGraph BinaryPredicate)
*/
fof(a9005,axiom,s_instance(s_subGraph_m, s_BinaryPredicate)).

/*
(instance subGraph ReflexiveRelation)
*/
fof(a9006,axiom,s_instance(s_subGraph_m, s_ReflexiveRelation)).

/*
(instance subGraph TransitiveRelation)
*/
fof(a9007,axiom,s_instance(s_subGraph_m, s_TransitiveRelation)).

/*
(forall (?ELEMENT ?GRAPH2 ?GRAPH1)
 (=>
  (and (instance ?GRAPH1 Graph) (instance ?GRAPH2 Graph)
       (instance ?ELEMENT GraphElement))
  (=> (and (subGraph ?GRAPH1 ?GRAPH2) (graphPart ?ELEMENT ?GRAPH1))
   (graphPart ?ELEMENT ?GRAPH2))))
*/
fof(a9008,axiom,! [ELEMENT,GRAPH2,GRAPH1] : (((s_instance(GRAPH1, s_Graph) & s_instance(GRAPH2, s_Graph) & s_instance(ELEMENT, s_GraphElement)) => ((s_subGraph(GRAPH1, GRAPH2) & s_graphPart(ELEMENT, GRAPH1)) => s_graphPart(ELEMENT, GRAPH2))))).

/*
(instance pathLength BinaryPredicate)
*/
fof(a9009,axiom,s_instance(s_pathLength_m, s_BinaryPredicate)).

/*
(instance pathLength AsymmetricRelation)
*/
fof(a9010,axiom,s_instance(s_pathLength_m, s_AsymmetricRelation)).

/*
(instance pathLength IrreflexiveRelation)
*/
fof(a9011,axiom,s_instance(s_pathLength_m, s_IrreflexiveRelation)).

/*
(instance InitialNodeFn UnaryFunction)
*/
fof(a9012,axiom,s_instance(s_InitialNodeFn_m, s_UnaryFunction)).

/*
(instance InitialNodeFn PartialValuedRelation)
*/
fof(a9013,axiom,s_instance(s_InitialNodeFn_m, s_PartialValuedRelation)).

/*
(range InitialNodeFn GraphNode)
*/
fof(a9014,axiom,s_range(s_InitialNodeFn_m, s_GraphNode)).

/*
(instance TerminalNodeFn UnaryFunction)
*/
fof(a9015,axiom,s_instance(s_TerminalNodeFn_m, s_UnaryFunction)).

/*
(instance TerminalNodeFn PartialValuedRelation)
*/
fof(a9016,axiom,s_instance(s_TerminalNodeFn_m, s_PartialValuedRelation)).

/*
(range TerminalNodeFn GraphNode)
*/
fof(a9017,axiom,s_range(s_TerminalNodeFn_m, s_GraphNode)).

/*
(instance BeginNodeFn UnaryFunction)
*/
fof(a9018,axiom,s_instance(s_BeginNodeFn_m, s_UnaryFunction)).

/*
(instance BeginNodeFn TotalValuedRelation)
*/
fof(a9019,axiom,s_instance(s_BeginNodeFn_m, s_TotalValuedRelation)).

/*
(range BeginNodeFn GraphNode)
*/
fof(a9020,axiom,s_range(s_BeginNodeFn_m, s_GraphNode)).

/*
(instance EndNodeFn UnaryFunction)
*/
fof(a9021,axiom,s_instance(s_EndNodeFn_m, s_UnaryFunction)).

/*
(instance EndNodeFn TotalValuedRelation)
*/
fof(a9022,axiom,s_instance(s_EndNodeFn_m, s_TotalValuedRelation)).

/*
(range EndNodeFn GraphNode)
*/
fof(a9023,axiom,s_range(s_EndNodeFn_m, s_GraphNode)).

/*
(instance arcWeight BinaryPredicate)
*/
fof(a9024,axiom,s_instance(s_arcWeight_m, s_BinaryPredicate)).

/*
(instance arcWeight SingleValuedRelation)
*/
fof(a9025,axiom,s_instance(s_arcWeight_m, s_SingleValuedRelation)).

/*
(instance PathWeightFn UnaryFunction)
*/
fof(a9026,axiom,s_instance(s_PathWeightFn_m, s_UnaryFunction)).

/*
(range PathWeightFn Quantity)
*/
fof(a9027,axiom,s_range(s_PathWeightFn_m, s_Quantity)).

/*
(forall (?SUM ?NUMBER1 ?PATH ?ARC1 ?SUBPATH)
 (exists (?ARC2)
  (and (instance ?ARC2 GraphElement)
       (=>
        (and (instance ?SUBPATH GraphPath) (instance ?ARC1 GraphArc)
             (instance ?PATH GraphPath) (instance ?NUMBER1 Quantity)
             (instance ?SUM Entity))
        (=>
         (and (equal (PathWeightFn ?PATH) ?SUM)
              (and (subGraph ?SUBPATH ?PATH)
                   (and (graphPart ?ARC1 ?PATH)
                        (and (arcWeight ?ARC1 ?NUMBER1)
                             (=> (graphPart ?ARC2 ?PATH)
                              (or (graphPart ?ARC2 ?SUBPATH)
                                  (equal ?ARC2 ?ARC1)))))))
         (equal ?SUM (AdditionFn (PathWeightFn ?SUBPATH) ?NUMBER1)))))))
*/
fof(a9028,axiom,! [SUM,NUMBER1,PATH,ARC1,SUBPATH] : (? [ARC2] : ((s_instance(ARC2, s_GraphElement) & ((s_instance(SUBPATH, s_GraphPath) & s_instance(ARC1, s_GraphArc) & s_instance(PATH, s_GraphPath) & s_instance(NUMBER1, s_Quantity) & s_instance(SUM, s_Entity)) => (((s_PathWeightFn(PATH) = SUM) & (s_subGraph(SUBPATH, PATH) & (s_graphPart(ARC1, PATH) & (s_arcWeight(ARC1, NUMBER1) & (s_graphPart(ARC2, PATH) => (s_graphPart(ARC2, SUBPATH) | (ARC2 = ARC1))))))) => (SUM = plus(s_PathWeightFn(SUBPATH), NUMBER1)))))))).

/*
(forall (?SUM ?NUMBER1 ?NUMBER2 ?PATH ?ARC2 ?ARC1)
 (exists (?ARC3)
  (and (instance ?ARC3 GraphElement)
       (=>
        (and (instance ?ARC1 GraphArc) (instance ?ARC2 GraphArc)
             (instance ?PATH GraphPath) (instance ?NUMBER2 Quantity)
             (instance ?NUMBER1 Quantity) (instance ?SUM Entity))
        (=>
         (and (equal (PathWeightFn ?PATH) ?SUM)
              (and (graphPart ?ARC1 ?PATH)
                   (and (graphPart ?ARC2 ?PATH)
                        (and (arcWeight ?ARC1 ?NUMBER1)
                             (and (arcWeight ?ARC2 ?NUMBER2)
                                  (=>
                                   (graphPart ?ARC3 ?PATH)
                                   (or
                                    (equal ?ARC3 ?ARC1)
                                    (equal ?ARC3 ?ARC2))))))))
         (equal (PathWeightFn ?PATH)
                (AdditionFn ?NUMBER1 ?NUMBER2)))))))
*/
fof(a9029,axiom,! [SUM,NUMBER1,NUMBER2,PATH,ARC2,ARC1] : (? [ARC3] : ((s_instance(ARC3, s_GraphElement) & ((s_instance(ARC1, s_GraphArc) & s_instance(ARC2, s_GraphArc) & s_instance(PATH, s_GraphPath) & s_instance(NUMBER2, s_Quantity) & s_instance(NUMBER1, s_Quantity) & s_instance(SUM, s_Entity)) => (((s_PathWeightFn(PATH) = SUM) & (s_graphPart(ARC1, PATH) & (s_graphPart(ARC2, PATH) & (s_arcWeight(ARC1, NUMBER1) & (s_arcWeight(ARC2, NUMBER2) & (s_graphPart(ARC3, PATH) => ((ARC3 = ARC1) | (ARC3 = ARC2)))))))) => (s_PathWeightFn(PATH) = plus(NUMBER1, NUMBER2)))))))).

/*
(instance MinimalWeightedPathFn BinaryFunction)
*/
fof(a9030,axiom,s_instance(s_MinimalWeightedPathFn_m, s_BinaryFunction)).

/*
(instance MinimalWeightedPathFn TotalValuedRelation)
*/
fof(a9031,axiom,s_instance(s_MinimalWeightedPathFn_m, s_TotalValuedRelation)).

/*
(range MinimalWeightedPathFn GraphPath)
*/
fof(a9032,axiom,s_range(s_MinimalWeightedPathFn_m, s_GraphPath)).

/*
(forall (?PATH ?NODE2 ?NODE1)
 (=>
  (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode)
       (instance ?PATH Entity))
  (=> (equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
   (instance ?PATH (GraphPathFn ?NODE1 ?NODE2)))))
*/
fof(a9033,axiom,! [PATH,NODE2,NODE1] : (((s_instance(NODE1, s_GraphNode) & s_instance(NODE2, s_GraphNode) & s_instance(PATH, s_Entity)) => ((s_MinimalWeightedPathFn(NODE1, NODE2) = PATH) => s_instance(PATH, s_GraphPathFn(NODE1, NODE2)))))).

/*
(forall (?NUMBER2 ?NUMBER1 ?PATH ?NODE2 ?NODE1)
 (forall (?PATH2)
  (=> (instance ?PATH2 GraphPath)
   (=>
    (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode)
         (instance ?PATH GraphPath) (instance ?NUMBER1 Quantity)
         (instance ?NUMBER2 Quantity))
    (=>
     (and (equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
          (equal (PathWeightFn ?PATH) ?NUMBER1))
     (=>
      (and (instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2))
           (equal (PathWeightFn ?PATH2) ?NUMBER2))
      (greaterThanOrEqualTo ?NUMBER2 ?NUMBER1)))))))
*/
fof(a9034,axiom,! [NUMBER2,NUMBER1,PATH,NODE2,NODE1] : (! [PATH2] : ((s_instance(PATH2, s_GraphPath) => ((s_instance(NODE1, s_GraphNode) & s_instance(NODE2, s_GraphNode) & s_instance(PATH, s_GraphPath) & s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity)) => (((s_MinimalWeightedPathFn(NODE1, NODE2) = PATH) & (s_PathWeightFn(PATH) = NUMBER1)) => ((s_instance(PATH2, s_GraphPathFn(NODE1, NODE2)) & (s_PathWeightFn(PATH2) = NUMBER2)) => s_greaterThanOrEqualTo(NUMBER2, NUMBER1)))))))).

/*
(instance MaximalWeightedPathFn BinaryFunction)
*/
fof(a9035,axiom,s_instance(s_MaximalWeightedPathFn_m, s_BinaryFunction)).

/*
(instance MaximalWeightedPathFn TotalValuedRelation)
*/
fof(a9036,axiom,s_instance(s_MaximalWeightedPathFn_m, s_TotalValuedRelation)).

/*
(range MaximalWeightedPathFn GraphPath)
*/
fof(a9037,axiom,s_range(s_MaximalWeightedPathFn_m, s_GraphPath)).

/*
(forall (?PATH ?NODE2 ?NODE1)
 (=>
  (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode)
       (instance ?PATH Entity))
  (=> (equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
   (instance ?PATH (GraphPathFn ?NODE1 ?NODE2)))))
*/
fof(a9038,axiom,! [PATH,NODE2,NODE1] : (((s_instance(NODE1, s_GraphNode) & s_instance(NODE2, s_GraphNode) & s_instance(PATH, s_Entity)) => ((s_MaximalWeightedPathFn(NODE1, NODE2) = PATH) => s_instance(PATH, s_GraphPathFn(NODE1, NODE2)))))).

/*
(forall (?NUMBER2 ?NUMBER1 ?PATH ?NODE2 ?NODE1)
 (forall (?PATH2)
  (=> (instance ?PATH2 GraphPath)
   (=>
    (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode)
         (instance ?PATH GraphPath) (instance ?NUMBER1 Quantity)
         (instance ?NUMBER2 Quantity))
    (=>
     (and (equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
          (equal (PathWeightFn ?PATH) ?NUMBER1))
     (=>
      (and (instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2))
           (equal (PathWeightFn ?PATH2) ?NUMBER2))
      (lessThanOrEqualTo ?NUMBER2 ?NUMBER1)))))))
*/
fof(a9039,axiom,! [NUMBER2,NUMBER1,PATH,NODE2,NODE1] : (! [PATH2] : ((s_instance(PATH2, s_GraphPath) => ((s_instance(NODE1, s_GraphNode) & s_instance(NODE2, s_GraphNode) & s_instance(PATH, s_GraphPath) & s_instance(NUMBER1, s_Quantity) & s_instance(NUMBER2, s_Quantity)) => (((s_MaximalWeightedPathFn(NODE1, NODE2) = PATH) & (s_PathWeightFn(PATH) = NUMBER1)) => ((s_instance(PATH2, s_GraphPathFn(NODE1, NODE2)) & (s_PathWeightFn(PATH2) = NUMBER2)) => lesseq(NUMBER2, NUMBER1)))))))).

/*
(instance GraphPathFn BinaryFunction)
*/
fof(a9040,axiom,s_instance(s_GraphPathFn_m, s_BinaryFunction)).

/*
(instance GraphPathFn TotalValuedRelation)
*/
fof(a9041,axiom,s_instance(s_GraphPathFn_m, s_TotalValuedRelation)).

/*
(rangeSubclass GraphPathFn GraphPath)
*/
fof(a9042,axiom,s_rangeSubclass(s_GraphPathFn_m, s_GraphPath)).

/*
(forall (?GRAPH ?PATH ?NODE2 ?NODE1)
 (=>
  (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode)
       (instance ?PATH GraphElement) (instance ?GRAPH Graph))
  (=>
   (and (graphPart ?PATH ?GRAPH) (not (instance ?GRAPH DirectedGraph)))
   (<=> (equal (GraphPathFn ?NODE1 ?NODE2) ?PATH)
    (equal (GraphPathFn ?NODE2 ?NODE1) ?PATH)))))
*/
fof(a9043,axiom,! [GRAPH,PATH,NODE2,NODE1] : (((s_instance(NODE1, s_GraphNode) & s_instance(NODE2, s_GraphNode) & s_instance(PATH, s_GraphElement) & s_instance(GRAPH, s_Graph)) => ((s_graphPart(PATH, GRAPH) & (~ s_instance(GRAPH, s_DirectedGraph))) => ((s_GraphPathFn(NODE1, NODE2) = PATH) <=> (s_GraphPathFn(NODE2, NODE1) = PATH)))))).

/*
(instance CutSetFn UnaryFunction)
*/
fof(a9044,axiom,s_instance(s_CutSetFn_m, s_UnaryFunction)).

/*
(rangeSubclass CutSetFn GraphPath)
*/
fof(a9045,axiom,s_rangeSubclass(s_CutSetFn_m, s_GraphPath)).

/*
(instance MinimalCutSetFn UnaryFunction)
*/
fof(a9046,axiom,s_instance(s_MinimalCutSetFn_m, s_UnaryFunction)).

/*
(rangeSubclass MinimalCutSetFn GraphPath)
*/
fof(a9047,axiom,s_rangeSubclass(s_MinimalCutSetFn_m, s_GraphPath)).

/*
(forall (?GRAPH)
 (=> (instance ?GRAPH Graph)
  (subclass (MinimalCutSetFn ?GRAPH) (CutSetFn ?GRAPH))))
*/
fof(a9048,axiom,! [GRAPH] : ((s_instance(GRAPH, s_Graph) => s_subclass(s_MinimalCutSetFn(GRAPH), s_CutSetFn(GRAPH))))).

/*
(forall (?PATHCLASS ?GRAPH)
 (exists (?NUMBER)
  (forall (?PATH)
   (=> (instance ?PATH GraphPath)
    (and (instance ?NUMBER PositiveInteger)
         (=>
          (and (instance ?GRAPH Graph)
               (instance ?PATHCLASS SetOrClass))
          (=> (equal (MinimalCutSetFn ?GRAPH) ?PATHCLASS)
           (=> (instance ?PATH ?PATHCLASS)
            (pathLength ?PATH ?NUMBER)))))))))
*/
fof(a9049,axiom,! [PATHCLASS,GRAPH] : (? [NUMBER] : (! [PATH] : ((s_instance(PATH, s_GraphPath) => (s_instance(NUMBER, s_PositiveInteger) & ((s_instance(GRAPH, s_Graph) & s_instance(PATHCLASS, s_SetOrClass)) => ((s_MinimalCutSetFn(GRAPH) = PATHCLASS) => (s_instance(PATH, PATHCLASS) => s_pathLength(PATH, NUMBER)))))))))).

/*
(forall (?GRAPH ?NUMBER2 ?NUMBER1)
 (forall (?PATH1 ?PATH2)
  (=> (and (instance ?PATH2 GraphPath) (instance ?PATH1 GraphPath))
   (=>
    (and (instance ?NUMBER1 PositiveInteger)
         (instance ?NUMBER2 PositiveInteger) (instance ?GRAPH Graph))
    (not (and (instance ?PATH1 (CutSetFn ?GRAPH))
              (and (instance ?PATH2 (MinimalCutSetFn ?GRAPH))
                   (and (pathLength ?PATH1 ?NUMBER1)
                        (and (pathLength ?PATH2 ?NUMBER2)
                             (lessThan ?NUMBER1 ?NUMBER2))))))))))
*/
fof(a9050,axiom,! [GRAPH,NUMBER2,NUMBER1] : (! [PATH1,PATH2] : (((s_instance(PATH2, s_GraphPath) & s_instance(PATH1, s_GraphPath)) => ((s_instance(NUMBER1, s_PositiveInteger) & s_instance(NUMBER2, s_PositiveInteger) & s_instance(GRAPH, s_Graph)) => (~ (s_instance(PATH1, s_CutSetFn(GRAPH)) & (s_instance(PATH2, s_MinimalCutSetFn(GRAPH)) & (s_pathLength(PATH1, NUMBER1) & (s_pathLength(PATH2, NUMBER2) & less(NUMBER1, NUMBER2))))))))))).

/*
(instance abstractCounterpart BinaryPredicate)
*/
fof(a9051,axiom,s_instance(s_abstractCounterpart_m, s_BinaryPredicate)).

/*
(subrelation abstractCounterpart represents)
*/
fof(a9052,axiom,s_subrelation(s_abstractCounterpart_m, s_represents_m)).

/*
(instance PhysicalSystem SetOrClass)
*/
fof(a9053,axiom,s_instance(s_PhysicalSystem, s_SetOrClass)).

/*
(instance Physical SetOrClass)
*/
fof(a9054,axiom,s_instance(s_Physical, s_SetOrClass)).

/*
(subclass PhysicalSystem Physical)
*/
fof(a9055,axiom,s_subclass(s_PhysicalSystem, s_Physical)).

/*
(instance subSystem BinaryPredicate)
*/
fof(a9056,axiom,s_instance(s_subSystem_m, s_BinaryPredicate)).

/*
(instance systemPart BinaryPredicate)
*/
fof(a9057,axiom,s_instance(s_systemPart_m, s_BinaryPredicate)).

/*
(forall (?PART ?SYSTEM ?SUB)
 (=>
  (and (instance ?SUB PhysicalSystem) (instance ?SYSTEM PhysicalSystem)
       (instance ?PART Physical))
  (=> (and (subSystem ?SUB ?SYSTEM) (systemPart ?PART ?SUB))
   (systemPart ?PART ?SYSTEM))))
*/
fof(a9058,axiom,! [PART,SYSTEM,SUB] : (((s_instance(SUB, s_PhysicalSystem) & s_instance(SYSTEM, s_PhysicalSystem) & s_instance(PART, s_Physical)) => ((s_subSystem(SUB, SYSTEM) & s_systemPart(PART, SUB)) => s_systemPart(PART, SYSTEM))))).

/*
(instance graphMeasure BinaryPredicate)
*/
fof(a9059,axiom,s_instance(s_graphMeasure_m, s_BinaryPredicate)).

/*
(forall (?M ?G)
 (forall (?AC)
  (exists (?PC)
   (and (instance ?PC Physical)
        (=> (instance ?AC GraphElement)
         (=> (and (instance ?G Graph) (instance ?M UnitOfMeasure))
          (=> (graphMeasure ?G ?M)
           (and (graphPart ?AC ?G) (abstractCounterpart ?AC ?PC)))))))))
*/
fof(a9060,axiom,! [M,G] : (! [AC] : (? [PC] : ((s_instance(PC, s_Physical) & (s_instance(AC, s_GraphElement) => ((s_instance(G, s_Graph) & s_instance(M, s_UnitOfMeasure)) => (s_graphMeasure(G, M) => (s_graphPart(AC, G) & s_abstractCounterpart(AC, PC)))))))))).

/*
(forall (?G ?AN ?PN ?PA ?AA ?M ?N)
 (=>
  (and (instance ?G Graph) (instance ?PN Physical)
       (instance ?PA Object) (instance ?M UnitOfMeasure)
       (instance ?N RealNumber))
  (=>
   (and (graphMeasure ?G ?M)
        (and (instance ?AN GraphNode)
             (and (instance ?AA GraphArc)
                  (and (abstractCounterpart ?AN ?PN)
                       (and (abstractCounterpart ?AA ?PA)
                            (arcWeight ?AA (MeasureFn ?N ?M)))))))
   (measure ?PA (MeasureFn ?N ?M)))))
*/
fof(a9061,axiom,! [G,AN,PN,PA,AA,M,N] : (((s_instance(G, s_Graph) & s_instance(PN, s_Physical) & s_instance(PA, s_Object) & s_instance(M, s_UnitOfMeasure) & s_instance(N, s_RealNumber)) => ((s_graphMeasure(G, M) & (s_instance(AN, s_GraphNode) & (s_instance(AA, s_GraphArc) & (s_abstractCounterpart(AN, PN) & (s_abstractCounterpart(AA, PA) & s_arcWeight(AA, s_MeasureFn(N, M))))))) => s_measure(PA, s_MeasureFn(N, M)))))).

/*
(instance PhysicalQuantity SetOrClass)
*/
fof(a9062,axiom,s_instance(s_PhysicalQuantity, s_SetOrClass)).

/*
(subclass UnitOfMeasure PhysicalQuantity)
*/
fof(a9063,axiom,s_subclass(s_UnitOfMeasure, s_PhysicalQuantity)).

/*
(subclass CompositeUnitOfMeasure UnitOfMeasure)
*/
fof(a9064,axiom,s_subclass(s_CompositeUnitOfMeasure, s_UnitOfMeasure)).

/*
(subclass CompositeUnitOfMeasure FunctionQuantity)
*/
fof(a9065,axiom,s_subclass(s_CompositeUnitOfMeasure, s_FunctionQuantity)).

/*
(subclass NonCompositeUnitOfMeasure UnitOfMeasure)
*/
fof(a9066,axiom,s_subclass(s_NonCompositeUnitOfMeasure, s_UnitOfMeasure)).

/*
(subclass NonCompositeUnitOfMeasure ConstantQuantity)
*/
fof(a9067,axiom,s_subclass(s_NonCompositeUnitOfMeasure, s_ConstantQuantity)).

/*
(partition3 UnitOfMeasure CompositeUnitOfMeasure
 NonCompositeUnitOfMeasure)
*/
fof(a9068,axiom,s_partition3(s_UnitOfMeasure, s_CompositeUnitOfMeasure, s_NonCompositeUnitOfMeasure)).

/*
(forall (?QUANT ?UNIT ?N)
 (=> (and (instance ?QUANT Entity) (instance ?N RealNumber))
  (=>
   (and (instance ?QUANT (MeasureFn ?N ?UNIT))
        (instance ?UNIT CompositeUnitOfMeasure))
   (instance ?QUANT FunctionQuantity))))
*/
fof(a9069,axiom,! [QUANT,UNIT,N] : (((s_instance(QUANT, s_Entity) & s_instance(N, s_RealNumber)) => ((s_instance(QUANT, s_MeasureFn(N, UNIT)) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(QUANT, s_FunctionQuantity))))).

/*
(forall (?QUANT ?UNIT ?N)
 (=> (and (instance ?QUANT Entity) (instance ?N RealNumber))
  (=>
   (and (instance ?QUANT (MeasureFn ?N ?UNIT))
        (instance ?UNIT NonCompositeUnitOfMeasure))
   (instance ?QUANT ConstantQuantity))))
*/
fof(a9070,axiom,! [QUANT,UNIT,N] : (((s_instance(QUANT, s_Entity) & s_instance(N, s_RealNumber)) => ((s_instance(QUANT, s_MeasureFn(N, UNIT)) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(QUANT, s_ConstantQuantity))))).

/*
(instance UnitOfMeasure SetOrClass)
*/
fof(a9071,axiom,s_instance(s_UnitOfMeasure, s_SetOrClass)).

/*
(subclass SystemeInternationalUnit UnitOfMeasure)
*/
fof(a9072,axiom,s_subclass(s_SystemeInternationalUnit, s_UnitOfMeasure)).

/*
(instance LengthMeasure SetOrClass)
*/
fof(a9073,axiom,s_instance(s_LengthMeasure, s_SetOrClass)).

/*
(subclass LengthMeasure ConstantQuantity)
*/
fof(a9074,axiom,s_subclass(s_LengthMeasure, s_ConstantQuantity)).

/*
(subclass UnitOfLength NonCompositeUnitOfMeasure)
*/
fof(a9075,axiom,s_subclass(s_UnitOfLength, s_NonCompositeUnitOfMeasure)).

/*
(instance MassMeasure SetOrClass)
*/
fof(a9076,axiom,s_instance(s_MassMeasure, s_SetOrClass)).

/*
(subclass MassMeasure ConstantQuantity)
*/
fof(a9077,axiom,s_subclass(s_MassMeasure, s_ConstantQuantity)).

/*
(subclass UnitOfMass NonCompositeUnitOfMeasure)
*/
fof(a9078,axiom,s_subclass(s_UnitOfMass, s_NonCompositeUnitOfMeasure)).

/*
(instance AreaMeasure SetOrClass)
*/
fof(a9079,axiom,s_instance(s_AreaMeasure, s_SetOrClass)).

/*
(subclass AreaMeasure FunctionQuantity)
*/
fof(a9080,axiom,s_subclass(s_AreaMeasure, s_FunctionQuantity)).

/*
(instance UnitOfArea SetOrClass)
*/
fof(a9081,axiom,s_instance(s_UnitOfArea, s_SetOrClass)).

/*
(subclass UnitOfArea CompositeUnitOfMeasure)
*/
fof(a9082,axiom,s_subclass(s_UnitOfArea, s_CompositeUnitOfMeasure)).

/*
(instance VolumeMeasure SetOrClass)
*/
fof(a9083,axiom,s_instance(s_VolumeMeasure, s_SetOrClass)).

/*
(instance FunctionQuantity SetOrClass)
*/
fof(a9084,axiom,s_instance(s_FunctionQuantity, s_SetOrClass)).

/*
(subclass VolumeMeasure FunctionQuantity)
*/
fof(a9085,axiom,s_subclass(s_VolumeMeasure, s_FunctionQuantity)).

/*
(subclass UnitOfVolume CompositeUnitOfMeasure)
*/
fof(a9086,axiom,s_subclass(s_UnitOfVolume, s_CompositeUnitOfMeasure)).

/*
(instance TemperatureMeasure SetOrClass)
*/
fof(a9087,axiom,s_instance(s_TemperatureMeasure, s_SetOrClass)).

/*
(subclass TemperatureMeasure ConstantQuantity)
*/
fof(a9088,axiom,s_subclass(s_TemperatureMeasure, s_ConstantQuantity)).

/*
(subclass UnitOfTemperature NonCompositeUnitOfMeasure)
*/
fof(a9089,axiom,s_subclass(s_UnitOfTemperature, s_NonCompositeUnitOfMeasure)).

/*
(instance CurrencyMeasure SetOrClass)
*/
fof(a9090,axiom,s_instance(s_CurrencyMeasure, s_SetOrClass)).

/*
(subclass CurrencyMeasure ConstantQuantity)
*/
fof(a9091,axiom,s_subclass(s_CurrencyMeasure, s_ConstantQuantity)).

/*
(subclass UnitOfCurrency NonCompositeUnitOfMeasure)
*/
fof(a9092,axiom,s_subclass(s_UnitOfCurrency, s_NonCompositeUnitOfMeasure)).

/*
(subclass AngleMeasure ConstantQuantity)
*/
fof(a9093,axiom,s_subclass(s_AngleMeasure, s_ConstantQuantity)).

/*
(subclass UnitOfAngularMeasure NonCompositeUnitOfMeasure)
*/
fof(a9094,axiom,s_subclass(s_UnitOfAngularMeasure, s_NonCompositeUnitOfMeasure)).

/*
(instance PlaneAngleMeasure SetOrClass)
*/
fof(a9095,axiom,s_instance(s_PlaneAngleMeasure, s_SetOrClass)).

/*
(subclass PlaneAngleMeasure AngleMeasure)
*/
fof(a9096,axiom,s_subclass(s_PlaneAngleMeasure, s_AngleMeasure)).

/*
(instance SolidAngleMeasure SetOrClass)
*/
fof(a9097,axiom,s_instance(s_SolidAngleMeasure, s_SetOrClass)).

/*
(instance AngleMeasure SetOrClass)
*/
fof(a9098,axiom,s_instance(s_AngleMeasure, s_SetOrClass)).

/*
(subclass SolidAngleMeasure AngleMeasure)
*/
fof(a9099,axiom,s_subclass(s_SolidAngleMeasure, s_AngleMeasure)).

/*
(disjoint SolidAngleMeasure PlaneAngleMeasure)
*/
fof(a9100,axiom,s_disjoint(s_SolidAngleMeasure, s_PlaneAngleMeasure)).

/*
(subclass UnitOfInformation NonCompositeUnitOfMeasure)
*/
fof(a9101,axiom,s_subclass(s_UnitOfInformation, s_NonCompositeUnitOfMeasure)).

/*
(instance NonCompositeUnitOfMeasure SetOrClass)
*/
fof(a9102,axiom,s_instance(s_NonCompositeUnitOfMeasure, s_SetOrClass)).

/*
(subclass UnitOfDuration NonCompositeUnitOfMeasure)
*/
fof(a9103,axiom,s_subclass(s_UnitOfDuration, s_NonCompositeUnitOfMeasure)).

/*
(instance MeasureFn BinaryFunction)
*/
fof(a9104,axiom,s_instance(s_MeasureFn_m, s_BinaryFunction)).

/*
(instance MeasureFn TotalValuedRelation)
*/
fof(a9105,axiom,s_instance(s_MeasureFn_m, s_TotalValuedRelation)).

/*
(range MeasureFn PhysicalQuantity)
*/
fof(a9106,axiom,s_range(s_MeasureFn_m, s_PhysicalQuantity)).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfLength))
   (instance ?QUANT LengthMeasure))))
*/
fof(a9107,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfLength)) => s_instance(QUANT, s_LengthMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfMass))
   (instance ?QUANT MassMeasure))))
*/
fof(a9108,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfMass)) => s_instance(QUANT, s_MassMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfArea))
   (instance ?QUANT AreaMeasure))))
*/
fof(a9109,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfArea)) => s_instance(QUANT, s_AreaMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfVolume))
   (instance ?QUANT VolumeMeasure))))
*/
fof(a9110,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfVolume)) => s_instance(QUANT, s_VolumeMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfTemperature))
   (instance ?QUANT TemperatureMeasure))))
*/
fof(a9111,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfTemperature)) => s_instance(QUANT, s_TemperatureMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfCurrency))
   (instance ?QUANT CurrencyMeasure))))
*/
fof(a9112,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfCurrency)) => s_instance(QUANT, s_CurrencyMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfAngularMeasure))
   (instance ?QUANT AngleMeasure))))
*/
fof(a9113,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfAngularMeasure)) => s_instance(QUANT, s_AngleMeasure))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfDuration))
   (instance ?QUANT TimeDuration))))
*/
fof(a9114,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfDuration)) => s_instance(QUANT, s_TimeDuration))))).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfInformation))
   (instance ?QUANT InformationMeasure))))
*/
fof(a9115,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfInformation)) => s_instance(QUANT, s_InformationMeasure))))).

/*
(forall (?NUMBER2 ?NUMBER1)
 (forall (?UNIT)
  (=> (instance ?UNIT UnitOfMeasure)
   (=>
    (and (instance equal RelationExtendedToQuantities)
         (and (instance equal BinaryRelation)
              (and (instance ?NUMBER1 RealNumber)
                   (and (instance ?NUMBER2 RealNumber)
                        (equal ?NUMBER1 ?NUMBER2)))))
    (=> (instance ?UNIT UnitOfMeasure)
     (equal (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT)))))))
*/
fof(a9116,axiom,! [NUMBER2,NUMBER1] : (! [UNIT] : ((s_instance(UNIT, s_UnitOfMeasure) => ((s_instance(s_equal_m, s_RelationExtendedToQuantities) & (s_instance(s_equal_m, s_BinaryRelation) & (s_instance(NUMBER1, s_RealNumber) & (s_instance(NUMBER2, s_RealNumber) & (NUMBER1 = NUMBER2))))) => (s_instance(UNIT, s_UnitOfMeasure) => (s_MeasureFn(NUMBER1, UNIT) = s_MeasureFn(NUMBER2, UNIT)))))))).

/*
(forall (?NUMBER2 ?NUMBER1)
 (forall (?UNIT)
  (=> (instance ?UNIT UnitOfMeasure)
   (=>
    (and (instance greaterThan RelationExtendedToQuantities)
         (and (instance greaterThan BinaryRelation)
              (and (instance ?NUMBER1 RealNumber)
                   (and (instance ?NUMBER2 RealNumber)
                        (greaterThan ?NUMBER1 ?NUMBER2)))))
    (=> (instance ?UNIT UnitOfMeasure)
     (greaterThan (MeasureFn ?NUMBER1 ?UNIT)
      (MeasureFn ?NUMBER2 ?UNIT)))))))
*/
fof(a9117,axiom,! [NUMBER2,NUMBER1] : (! [UNIT] : ((s_instance(UNIT, s_UnitOfMeasure) => ((s_instance(s_greaterThan_m, s_RelationExtendedToQuantities) & (s_instance(s_greaterThan_m, s_BinaryRelation) & (s_instance(NUMBER1, s_RealNumber) & (s_instance(NUMBER2, s_RealNumber) & greater(NUMBER1, NUMBER2))))) => (s_instance(UNIT, s_UnitOfMeasure) => greater(s_MeasureFn(NUMBER1, UNIT), s_MeasureFn(NUMBER2, UNIT)))))))).

/*
(forall (?NUMBER2 ?NUMBER1)
 (forall (?UNIT)
  (=> (instance ?UNIT UnitOfMeasure)
   (=>
    (and (instance greaterThanOrEqualTo RelationExtendedToQuantities)
         (and (instance greaterThanOrEqualTo BinaryRelation)
              (and (instance ?NUMBER1 RealNumber)
                   (and (instance ?NUMBER2 RealNumber)
                        (greaterThanOrEqualTo ?NUMBER1 ?NUMBER2)))))
    (=> (instance ?UNIT UnitOfMeasure)
     (greaterThanOrEqualTo (MeasureFn ?NUMBER1 ?UNIT)
      (MeasureFn ?NUMBER2 ?UNIT)))))))
*/
fof(a9118,axiom,! [NUMBER2,NUMBER1] : (! [UNIT] : ((s_instance(UNIT, s_UnitOfMeasure) => ((s_instance(s_greaterThanOrEqualTo_m, s_RelationExtendedToQuantities) & (s_instance(s_greaterThanOrEqualTo_m, s_BinaryRelation) & (s_instance(NUMBER1, s_RealNumber) & (s_instance(NUMBER2, s_RealNumber) & s_greaterThanOrEqualTo(NUMBER1, NUMBER2))))) => (s_instance(UNIT, s_UnitOfMeasure) => s_greaterThanOrEqualTo(s_MeasureFn(NUMBER1, UNIT), s_MeasureFn(NUMBER2, UNIT)))))))).

/*
(forall (?NUMBER2 ?NUMBER1)
 (forall (?UNIT)
  (=> (instance ?UNIT UnitOfMeasure)
   (=>
    (and (instance lessThan RelationExtendedToQuantities)
         (and (instance lessThan BinaryRelation)
              (and (instance ?NUMBER1 RealNumber)
                   (and (instance ?NUMBER2 RealNumber)
                        (lessThan ?NUMBER1 ?NUMBER2)))))
    (=> (instance ?UNIT UnitOfMeasure)
     (lessThan (MeasureFn ?NUMBER1 ?UNIT)
      (MeasureFn ?NUMBER2 ?UNIT)))))))
*/
fof(a9119,axiom,! [NUMBER2,NUMBER1] : (! [UNIT] : ((s_instance(UNIT, s_UnitOfMeasure) => ((s_instance(s_lessThan_m, s_RelationExtendedToQuantities) & (s_instance(s_lessThan_m, s_BinaryRelation) & (s_instance(NUMBER1, s_RealNumber) & (s_instance(NUMBER2, s_RealNumber) & less(NUMBER1, NUMBER2))))) => (s_instance(UNIT, s_UnitOfMeasure) => less(s_MeasureFn(NUMBER1, UNIT), s_MeasureFn(NUMBER2, UNIT)))))))).

/*
(forall (?NUMBER2 ?NUMBER1)
 (forall (?UNIT)
  (=> (instance ?UNIT UnitOfMeasure)
   (=>
    (and (instance lessThanOrEqualTo RelationExtendedToQuantities)
         (and (instance lessThanOrEqualTo BinaryRelation)
              (and (instance ?NUMBER1 RealNumber)
                   (and (instance ?NUMBER2 RealNumber)
                        (lessThanOrEqualTo ?NUMBER1 ?NUMBER2)))))
    (=> (instance ?UNIT UnitOfMeasure)
     (lessThanOrEqualTo (MeasureFn ?NUMBER1 ?UNIT)
      (MeasureFn ?NUMBER2 ?UNIT)))))))
*/
fof(a9120,axiom,! [NUMBER2,NUMBER1] : (! [UNIT] : ((s_instance(UNIT, s_UnitOfMeasure) => ((s_instance(s_lessThanOrEqualTo_m, s_RelationExtendedToQuantities) & (s_instance(s_lessThanOrEqualTo_m, s_BinaryRelation) & (s_instance(NUMBER1, s_RealNumber) & (s_instance(NUMBER2, s_RealNumber) & lesseq(NUMBER1, NUMBER2))))) => (s_instance(UNIT, s_UnitOfMeasure) => lesseq(s_MeasureFn(NUMBER1, UNIT), s_MeasureFn(NUMBER2, UNIT)))))))).

/*
(subclass UnitOfMeasureMultiplier UnaryFunction)
*/
fof(a9121,axiom,s_subclass(s_UnitOfMeasureMultiplier, s_UnaryFunction)).

/*
(subclass UnitOfMeasureMultiplier TotalValuedRelation)
*/
fof(a9122,axiom,s_subclass(s_UnitOfMeasureMultiplier, s_TotalValuedRelation)).

/*
(forall (?UNIT)
 (=>
  (and (instance KiloFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (KiloFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9123,axiom,! [UNIT] : (((s_instance(s_KiloFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_KiloFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance NanoFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (NanoFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9124,axiom,! [UNIT] : (((s_instance(s_NanoFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_NanoFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance MilliFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (MilliFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9125,axiom,! [UNIT] : (((s_instance(s_MilliFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_MilliFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance MegaFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (MegaFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9126,axiom,! [UNIT] : (((s_instance(s_MegaFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_MegaFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance TeraFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (TeraFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9127,axiom,! [UNIT] : (((s_instance(s_TeraFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_TeraFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance MicroFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (MicroFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9128,axiom,! [UNIT] : (((s_instance(s_MicroFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_MicroFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance PicoFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (PicoFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9129,axiom,! [UNIT] : (((s_instance(s_PicoFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_PicoFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance GigaFn UnitOfMeasureMultiplier)
       (instance ?UNIT CompositeUnitOfMeasure))
  (instance (GigaFn ?UNIT) CompositeUnitOfMeasure)))
*/
fof(a9130,axiom,! [UNIT] : (((s_instance(s_GigaFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_CompositeUnitOfMeasure)) => s_instance(s_GigaFn(UNIT), s_CompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance KiloFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (KiloFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9131,axiom,! [UNIT] : (((s_instance(s_KiloFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_KiloFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance NanoFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (NanoFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9132,axiom,! [UNIT] : (((s_instance(s_NanoFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_NanoFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance MilliFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (MilliFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9133,axiom,! [UNIT] : (((s_instance(s_MilliFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_MilliFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance MegaFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (MegaFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9134,axiom,! [UNIT] : (((s_instance(s_MegaFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_MegaFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance TeraFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (TeraFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9135,axiom,! [UNIT] : (((s_instance(s_TeraFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_TeraFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance MicroFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (MicroFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9136,axiom,! [UNIT] : (((s_instance(s_MicroFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_MicroFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance PicoFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (PicoFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9137,axiom,! [UNIT] : (((s_instance(s_PicoFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_PicoFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(forall (?UNIT)
 (=>
  (and (instance GigaFn UnitOfMeasureMultiplier)
       (instance ?UNIT NonCompositeUnitOfMeasure))
  (instance (GigaFn ?UNIT) NonCompositeUnitOfMeasure)))
*/
fof(a9138,axiom,! [UNIT] : (((s_instance(s_GigaFn_m, s_UnitOfMeasureMultiplier) & s_instance(UNIT, s_NonCompositeUnitOfMeasure)) => s_instance(s_GigaFn(UNIT), s_NonCompositeUnitOfMeasure)))).

/*
(instance KiloFn UnitOfMeasureMultiplier)
*/
fof(a9139,axiom,s_instance(s_KiloFn_m, s_UnitOfMeasureMultiplier)).

/*
(range KiloFn UnitOfMeasure)
*/
fof(a9140,axiom,s_range(s_KiloFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?KILOUNIT)
 (=> (instance ?KILOUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?KILOUNIT (KiloFn ?UNIT)))
   (equal (MeasureFn 1 ?KILOUNIT) (MeasureFn 1000 ?UNIT)))))
*/
fof(a9141,axiom,! [UNIT,KILOUNIT] : ((s_instance(KILOUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (KILOUNIT = s_KiloFn(UNIT))) => (s_MeasureFn(1, KILOUNIT) = s_MeasureFn(1000, UNIT)))))).

/*
(instance MegaFn UnitOfMeasureMultiplier)
*/
fof(a9142,axiom,s_instance(s_MegaFn_m, s_UnitOfMeasureMultiplier)).

/*
(range MegaFn UnitOfMeasure)
*/
fof(a9143,axiom,s_range(s_MegaFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?MEGAUNIT)
 (=> (instance ?MEGAUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?MEGAUNIT (MegaFn ?UNIT)))
   (equal (MeasureFn 1 ?MEGAUNIT) (MeasureFn 1000000 ?UNIT)))))
*/
fof(a9144,axiom,! [UNIT,MEGAUNIT] : ((s_instance(MEGAUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (MEGAUNIT = s_MegaFn(UNIT))) => (s_MeasureFn(1, MEGAUNIT) = s_MeasureFn(1000000, UNIT)))))).

/*
(instance GigaFn UnitOfMeasureMultiplier)
*/
fof(a9145,axiom,s_instance(s_GigaFn_m, s_UnitOfMeasureMultiplier)).

/*
(range GigaFn UnitOfMeasure)
*/
fof(a9146,axiom,s_range(s_GigaFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?GIGAUNIT)
 (=> (instance ?GIGAUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?GIGAUNIT (GigaFn ?UNIT)))
   (equal (MeasureFn 1 ?GIGAUNIT) (MeasureFn 1000000000 ?UNIT)))))
*/
fof(a9147,axiom,! [UNIT,GIGAUNIT] : ((s_instance(GIGAUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (GIGAUNIT = s_GigaFn(UNIT))) => (s_MeasureFn(1, GIGAUNIT) = s_MeasureFn(1000000000, UNIT)))))).

/*
(instance TeraFn UnitOfMeasureMultiplier)
*/
fof(a9148,axiom,s_instance(s_TeraFn_m, s_UnitOfMeasureMultiplier)).

/*
(range TeraFn UnitOfMeasure)
*/
fof(a9149,axiom,s_range(s_TeraFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?TERAUNIT)
 (=> (instance ?TERAUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?TERAUNIT (TeraFn ?UNIT)))
   (equal (MeasureFn 1 ?TERAUNIT) (MeasureFn 1000000000000 ?UNIT)))))
*/
fof(a9150,axiom,! [UNIT,TERAUNIT] : ((s_instance(TERAUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (TERAUNIT = s_TeraFn(UNIT))) => (s_MeasureFn(1, TERAUNIT) = s_MeasureFn(1000000000000, UNIT)))))).

/*
(instance MilliFn UnitOfMeasureMultiplier)
*/
fof(a9151,axiom,s_instance(s_MilliFn_m, s_UnitOfMeasureMultiplier)).

/*
(range MilliFn UnitOfMeasure)
*/
fof(a9152,axiom,s_range(s_MilliFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?MILLIUNIT)
 (=> (instance ?MILLIUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?MILLIUNIT (MilliFn ?UNIT)))
   (equal (MeasureFn 1 ?MILLIUNIT) (MeasureFn 0.001 ?UNIT)))))
*/
fof(a9153,axiom,! [UNIT,MILLIUNIT] : ((s_instance(MILLIUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (MILLIUNIT = s_MilliFn(UNIT))) => (s_MeasureFn(1, MILLIUNIT) = s_MeasureFn(0.001, UNIT)))))).

/*
(instance MicroFn UnitOfMeasureMultiplier)
*/
fof(a9154,axiom,s_instance(s_MicroFn_m, s_UnitOfMeasureMultiplier)).

/*
(range MicroFn UnitOfMeasure)
*/
fof(a9155,axiom,s_range(s_MicroFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?MICROUNIT)
 (=> (instance ?MICROUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?MICROUNIT (MicroFn ?UNIT)))
   (equal (MeasureFn 1 ?MICROUNIT) (MeasureFn 1.0e-6 ?UNIT)))))
*/
fof(a9156,axiom,! [UNIT,MICROUNIT] : ((s_instance(MICROUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (MICROUNIT = s_MicroFn(UNIT))) => (s_MeasureFn(1, MICROUNIT) = s_MeasureFn(1.0e-6, UNIT)))))).

/*
(instance NanoFn UnitOfMeasureMultiplier)
*/
fof(a9157,axiom,s_instance(s_NanoFn_m, s_UnitOfMeasureMultiplier)).

/*
(range NanoFn UnitOfMeasure)
*/
fof(a9158,axiom,s_range(s_NanoFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?NANOUNIT)
 (=> (instance ?NANOUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?NANOUNIT (NanoFn ?UNIT)))
   (equal (MeasureFn 1 ?NANOUNIT) (MeasureFn 1.0e-9 ?UNIT)))))
*/
fof(a9159,axiom,! [UNIT,NANOUNIT] : ((s_instance(NANOUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (NANOUNIT = s_NanoFn(UNIT))) => (s_MeasureFn(1, NANOUNIT) = s_MeasureFn(1.0e-9, UNIT)))))).

/*
(instance UnitOfMeasureMultiplier SetOrClass)
*/
fof(a9160,axiom,s_instance(s_UnitOfMeasureMultiplier, s_SetOrClass)).

/*
(instance PicoFn UnitOfMeasureMultiplier)
*/
fof(a9161,axiom,s_instance(s_PicoFn_m, s_UnitOfMeasureMultiplier)).

/*
(range PicoFn UnitOfMeasure)
*/
fof(a9162,axiom,s_range(s_PicoFn_m, s_UnitOfMeasure)).

/*
(forall (?UNIT ?PICOUNIT)
 (=> (instance ?PICOUNIT UnitOfMeasure)
  (=>
   (and (instance ?UNIT UnitOfMeasure)
        (equal ?PICOUNIT (PicoFn ?UNIT)))
   (equal (MeasureFn 1 ?PICOUNIT) (MeasureFn 1.0e-12 ?UNIT)))))
*/
fof(a9163,axiom,! [UNIT,PICOUNIT] : ((s_instance(PICOUNIT, s_UnitOfMeasure) => ((s_instance(UNIT, s_UnitOfMeasure) & (PICOUNIT = s_PicoFn(UNIT))) => (s_MeasureFn(1, PICOUNIT) = s_MeasureFn(1.0e-12, UNIT)))))).

/*
(instance IntervalFn BinaryFunction)
*/
fof(a9164,axiom,s_instance(s_IntervalFn_m, s_BinaryFunction)).

/*
(instance IntervalFn TotalValuedRelation)
*/
fof(a9165,axiom,s_instance(s_IntervalFn_m, s_TotalValuedRelation)).

/*
(rangeSubclass IntervalFn ConstantQuantity)
*/
fof(a9166,axiom,s_rangeSubclass(s_IntervalFn_m, s_ConstantQuantity)).

/*
(forall (?CLASS ?QUANTITY ?TO ?FROM)
 (=> (and (instance ?CLASS SetOrClass) (instance ?QUANTITY Entity))
  (=>
   (and (instance ?QUANTITY (IntervalFn ?FROM ?TO))
        (and (instance ?FROM ?CLASS) (instance ?TO ?CLASS)))
   (instance ?QUANTITY ?CLASS))))
*/
fof(a9167,axiom,! [CLASS,QUANTITY,TO,FROM] : (((s_instance(CLASS, s_SetOrClass) & s_instance(QUANTITY, s_Entity)) => ((s_instance(QUANTITY, s_IntervalFn(FROM, TO)) & (s_instance(FROM, CLASS) & s_instance(TO, CLASS))) => s_instance(QUANTITY, CLASS))))).

/*
(forall (?QUANTITY ?TO ?FROM)
 (=>
  (and (instance ?FROM ConstantQuantity)
       (instance ?TO ConstantQuantity) (instance ?QUANTITY Quantity))
  (<=> (instance ?QUANTITY (IntervalFn ?FROM ?TO))
   (and (greaterThanOrEqualTo ?QUANTITY ?FROM)
        (lessThanOrEqualTo ?QUANTITY ?TO)))))
*/
fof(a9168,axiom,! [QUANTITY,TO,FROM] : (((s_instance(FROM, s_ConstantQuantity) & s_instance(TO, s_ConstantQuantity) & s_instance(QUANTITY, s_Quantity)) => (s_instance(QUANTITY, s_IntervalFn(FROM, TO)) <=> (s_greaterThanOrEqualTo(QUANTITY, FROM) & lesseq(QUANTITY, TO)))))).

/*
(instance MagnitudeFn UnaryFunction)
*/
fof(a9169,axiom,s_instance(s_MagnitudeFn_m, s_UnaryFunction)).

/*
(instance MagnitudeFn TotalValuedRelation)
*/
fof(a9170,axiom,s_instance(s_MagnitudeFn_m, s_TotalValuedRelation)).

/*
(range MagnitudeFn RealNumber)
*/
fof(a9171,axiom,s_range(s_MagnitudeFn_m, s_RealNumber)).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=>
  (and (instance ?QUANT PhysicalQuantity)
       (instance ?NUMBER RealNumber))
  (=>
   (and (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
        (and (instance ?UNIT UnitOfMeasure)
             (equal ?QUANT (MeasureFn ?NUMBER ?UNIT))))
   (equal (MagnitudeFn ?QUANT) ?NUMBER))))
*/
fof(a9172,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_PhysicalQuantity) & s_instance(NUMBER, s_RealNumber)) => (((NUMBER = times(1, NUMBER)) & (s_instance(UNIT, s_UnitOfMeasure) & (QUANT = s_MeasureFn(NUMBER, UNIT)))) => (s_MagnitudeFn(QUANT) = NUMBER))))).

/*
(instance UnitFn UnaryFunction)
*/
fof(a9173,axiom,s_instance(s_UnitFn_m, s_UnaryFunction)).

/*
(instance UnitFn TotalValuedRelation)
*/
fof(a9174,axiom,s_instance(s_UnitFn_m, s_TotalValuedRelation)).

/*
(range UnitFn UnitOfMeasure)
*/
fof(a9175,axiom,s_range(s_UnitFn_m, s_UnitOfMeasure)).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=>
  (and (instance ?QUANT PhysicalQuantity)
       (instance ?NUMBER RealNumber))
  (=>
   (and (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
        (and (instance ?UNIT UnitOfMeasure)
             (equal ?QUANT (MeasureFn ?NUMBER ?UNIT))))
   (equal (UnitFn ?QUANT) ?UNIT))))
*/
fof(a9176,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_PhysicalQuantity) & s_instance(NUMBER, s_RealNumber)) => (((NUMBER = times(1, NUMBER)) & (s_instance(UNIT, s_UnitOfMeasure) & (QUANT = s_MeasureFn(NUMBER, UNIT)))) => (s_UnitFn(QUANT) = UNIT))))).

/*
(instance PerFn BinaryFunction)
*/
fof(a9177,axiom,s_instance(s_PerFn_m, s_BinaryFunction)).

/*
(instance PerFn TotalValuedRelation)
*/
fof(a9178,axiom,s_instance(s_PerFn_m, s_TotalValuedRelation)).

/*
(range PerFn FunctionQuantity)
*/
fof(a9179,axiom,s_range(s_PerFn_m, s_FunctionQuantity)).

/*
(subrelation DensityFn PerFn)
*/
fof(a9180,axiom,s_subrelation(s_DensityFn_m, s_PerFn_m)).

/*
(instance DensityFn TotalValuedRelation)
*/
fof(a9181,axiom,s_instance(s_DensityFn_m, s_TotalValuedRelation)).

/*
(range DensityFn FunctionQuantity)
*/
fof(a9182,axiom,s_range(s_DensityFn_m, s_FunctionQuantity)).

/*
(subrelation SpeedFn PerFn)
*/
fof(a9183,axiom,s_subrelation(s_SpeedFn_m, s_PerFn_m)).

/*
(instance SpeedFn TotalValuedRelation)
*/
fof(a9184,axiom,s_instance(s_SpeedFn_m, s_TotalValuedRelation)).

/*
(range SpeedFn FunctionQuantity)
*/
fof(a9185,axiom,s_range(s_SpeedFn_m, s_FunctionQuantity)).

/*
(instance QuaternaryFunction SetOrClass)
*/
fof(a9186,axiom,s_instance(s_QuaternaryFunction, s_SetOrClass)).

/*
(instance VelocityFn QuaternaryFunction)
*/
fof(a9187,axiom,s_instance(s_VelocityFn_m, s_QuaternaryFunction)).

/*
(instance VelocityFn TotalValuedRelation)
*/
fof(a9188,axiom,s_instance(s_VelocityFn_m, s_TotalValuedRelation)).

/*
(range VelocityFn FunctionQuantity)
*/
fof(a9189,axiom,s_range(s_VelocityFn_m, s_FunctionQuantity)).

/*
(forall (?OBJECT ?DISTANCE ?TIME ?DIRECTION ?REF)
 (=>
  (and (instance ?REF Region)
       (instance ?DIRECTION DirectionalAttribute)
       (instance ?TIME TimeDuration) (instance ?DISTANCE LengthMeasure)
       (instance ?OBJECT Object))
  (=> (measure ?OBJECT (VelocityFn ?DISTANCE ?TIME ?REF ?DIRECTION))
   (measure ?OBJECT (SpeedFn ?DISTANCE ?TIME)))))
*/
fof(a9190,axiom,! [OBJECT,DISTANCE,TIME,DIRECTION,REF] : (((s_instance(REF, s_Region) & s_instance(DIRECTION, s_DirectionalAttribute) & s_instance(TIME, s_TimeDuration) & s_instance(DISTANCE, s_LengthMeasure) & s_instance(OBJECT, s_Object)) => (s_measure(OBJECT, s_VelocityFn(DISTANCE, TIME, REF, DIRECTION)) => s_measure(OBJECT, s_SpeedFn(DISTANCE, TIME)))))).

/*
(instance Meter UnitOfLength)
*/
fof(a9191,axiom,s_instance(s_Meter, s_UnitOfLength)).

/*
(instance Meter SystemeInternationalUnit)
*/
fof(a9192,axiom,s_instance(s_Meter, s_SystemeInternationalUnit)).

/*
(instance Gram UnitOfMass)
*/
fof(a9193,axiom,s_instance(s_Gram, s_UnitOfMass)).

/*
(instance Gram SystemeInternationalUnit)
*/
fof(a9194,axiom,s_instance(s_Gram, s_SystemeInternationalUnit)).

/*
(instance SecondDuration UnitOfDuration)
*/
fof(a9195,axiom,s_instance(s_SecondDuration, s_UnitOfDuration)).

/*
(instance SecondDuration SystemeInternationalUnit)
*/
fof(a9196,axiom,s_instance(s_SecondDuration, s_SystemeInternationalUnit)).

/*
(instance Ampere CompositeUnitOfMeasure)
*/
fof(a9197,axiom,s_instance(s_Ampere, s_CompositeUnitOfMeasure)).

/*
(instance Ampere SystemeInternationalUnit)
*/
fof(a9198,axiom,s_instance(s_Ampere, s_SystemeInternationalUnit)).

/*
(instance KelvinDegree UnitOfTemperature)
*/
fof(a9199,axiom,s_instance(s_KelvinDegree, s_UnitOfTemperature)).

/*
(instance KelvinDegree SystemeInternationalUnit)
*/
fof(a9200,axiom,s_instance(s_KelvinDegree, s_SystemeInternationalUnit)).

/*
(instance Mole UnitOfMass)
*/
fof(a9201,axiom,s_instance(s_Mole, s_UnitOfMass)).

/*
(instance Mole SystemeInternationalUnit)
*/
fof(a9202,axiom,s_instance(s_Mole, s_SystemeInternationalUnit)).

/*
(instance Candela CompositeUnitOfMeasure)
*/
fof(a9203,axiom,s_instance(s_Candela, s_CompositeUnitOfMeasure)).

/*
(instance Candela SystemeInternationalUnit)
*/
fof(a9204,axiom,s_instance(s_Candela, s_SystemeInternationalUnit)).

/*
(instance Liter UnitOfVolume)
*/
fof(a9205,axiom,s_instance(s_Liter, s_UnitOfVolume)).

/*
(instance Centimeter UnitOfLength)
*/
fof(a9206,axiom,s_instance(s_Centimeter, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Centimeter)
          (MeasureFn (MultiplicationFn ?NUMBER 0.01) Meter)))))
*/
fof(a9207,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Centimeter) = s_MeasureFn(times(NUMBER, 0.01), s_Meter)))))).

/*
(instance Millimeter UnitOfLength)
*/
fof(a9208,axiom,s_instance(s_Millimeter, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Millimeter)
          (MeasureFn (MultiplicationFn ?NUMBER 0.001) Meter)))))
*/
fof(a9209,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Millimeter) = s_MeasureFn(times(NUMBER, 0.001), s_Meter)))))).

/*
(instance Kilometer UnitOfLength)
*/
fof(a9210,axiom,s_instance(s_Kilometer, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Kilometer)
          (MeasureFn (MultiplicationFn ?NUMBER 1000) Meter)))))
*/
fof(a9211,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Kilometer) = s_MeasureFn(times(NUMBER, 1000), s_Meter)))))).

/*
(instance Radian UnitOfAngularMeasure)
*/
fof(a9212,axiom,s_instance(s_Radian, s_UnitOfAngularMeasure)).

/*
(instance Radian SystemeInternationalUnit)
*/
fof(a9213,axiom,s_instance(s_Radian, s_SystemeInternationalUnit)).

/*
(instance Steradian UnitOfAngularMeasure)
*/
fof(a9214,axiom,s_instance(s_Steradian, s_UnitOfAngularMeasure)).

/*
(instance Steradian SystemeInternationalUnit)
*/
fof(a9215,axiom,s_instance(s_Steradian, s_SystemeInternationalUnit)).

/*
(instance FrequencyMeasure SetOrClass)
*/
fof(a9216,axiom,s_instance(s_FrequencyMeasure, s_SetOrClass)).

/*
(instance TimeDependentQuantity SetOrClass)
*/
fof(a9217,axiom,s_instance(s_TimeDependentQuantity, s_SetOrClass)).

/*
(subclass FrequencyMeasure TimeDependentQuantity)
*/
fof(a9218,axiom,s_subclass(s_FrequencyMeasure, s_TimeDependentQuantity)).

/*
(subclass UnitOfFrequency CompositeUnitOfMeasure)
*/
fof(a9219,axiom,s_subclass(s_UnitOfFrequency, s_CompositeUnitOfMeasure)).

/*
(forall (?QUANT ?UNIT ?NUMBER)
 (=> (and (instance ?QUANT Entity) (instance ?NUMBER RealNumber))
  (=>
   (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
        (instance ?UNIT UnitOfFrequency))
   (instance ?QUANT FrequencyMeasure))))
*/
fof(a9220,axiom,! [QUANT,UNIT,NUMBER] : (((s_instance(QUANT, s_Entity) & s_instance(NUMBER, s_RealNumber)) => (((s_MeasureFn(NUMBER, UNIT) = QUANT) & s_instance(UNIT, s_UnitOfFrequency)) => s_instance(QUANT, s_FrequencyMeasure))))).

/*
(instance UnitOfFrequency SetOrClass)
*/
fof(a9221,axiom,s_instance(s_UnitOfFrequency, s_SetOrClass)).

/*
(instance Hertz UnitOfFrequency)
*/
fof(a9222,axiom,s_instance(s_Hertz, s_UnitOfFrequency)).

/*
(instance Hertz SystemeInternationalUnit)
*/
fof(a9223,axiom,s_instance(s_Hertz, s_SystemeInternationalUnit)).

/*
(instance Newton CompositeUnitOfMeasure)
*/
fof(a9224,axiom,s_instance(s_Newton, s_CompositeUnitOfMeasure)).

/*
(instance Newton SystemeInternationalUnit)
*/
fof(a9225,axiom,s_instance(s_Newton, s_SystemeInternationalUnit)).

/*
(instance Pascal CompositeUnitOfMeasure)
*/
fof(a9226,axiom,s_instance(s_Pascal, s_CompositeUnitOfMeasure)).

/*
(instance Pascal SystemeInternationalUnit)
*/
fof(a9227,axiom,s_instance(s_Pascal, s_SystemeInternationalUnit)).

/*
(instance Joule CompositeUnitOfMeasure)
*/
fof(a9228,axiom,s_instance(s_Joule, s_CompositeUnitOfMeasure)).

/*
(instance Joule SystemeInternationalUnit)
*/
fof(a9229,axiom,s_instance(s_Joule, s_SystemeInternationalUnit)).

/*
(instance Watt CompositeUnitOfMeasure)
*/
fof(a9230,axiom,s_instance(s_Watt, s_CompositeUnitOfMeasure)).

/*
(instance Watt SystemeInternationalUnit)
*/
fof(a9231,axiom,s_instance(s_Watt, s_SystemeInternationalUnit)).

/*
(instance Horsepower CompositeUnitOfMeasure)
*/
fof(a9232,axiom,s_instance(s_Horsepower, s_CompositeUnitOfMeasure)).

/*
(forall (?N)
 (=> (instance ?N RealNumber)
  (equal (MeasureFn ?N Horsepower)
         (MeasureFn (MultiplicationFn ?N 746) Watt))))
*/
fof(a9233,axiom,! [N] : ((s_instance(N, s_RealNumber) => (s_MeasureFn(N, s_Horsepower) = s_MeasureFn(times(N, 746), s_Watt))))).

/*
(instance Coulomb CompositeUnitOfMeasure)
*/
fof(a9234,axiom,s_instance(s_Coulomb, s_CompositeUnitOfMeasure)).

/*
(instance Coulomb SystemeInternationalUnit)
*/
fof(a9235,axiom,s_instance(s_Coulomb, s_SystemeInternationalUnit)).

/*
(forall (?NUMBER ?QUANTITY)
 (=> (and (instance ?QUANTITY Entity) (instance ?NUMBER RealNumber))
  (=> (equal ?QUANTITY (MeasureFn ?NUMBER Coulomb))
   (instance ?QUANTITY TimeDependentQuantity))))
*/
fof(a9236,axiom,! [NUMBER,QUANTITY] : (((s_instance(QUANTITY, s_Entity) & s_instance(NUMBER, s_RealNumber)) => ((QUANTITY = s_MeasureFn(NUMBER, s_Coulomb)) => s_instance(QUANTITY, s_TimeDependentQuantity))))).

/*
(instance Volt CompositeUnitOfMeasure)
*/
fof(a9237,axiom,s_instance(s_Volt, s_CompositeUnitOfMeasure)).

/*
(instance Volt SystemeInternationalUnit)
*/
fof(a9238,axiom,s_instance(s_Volt, s_SystemeInternationalUnit)).

/*
(instance Farad CompositeUnitOfMeasure)
*/
fof(a9239,axiom,s_instance(s_Farad, s_CompositeUnitOfMeasure)).

/*
(instance Farad SystemeInternationalUnit)
*/
fof(a9240,axiom,s_instance(s_Farad, s_SystemeInternationalUnit)).

/*
(instance Ohm CompositeUnitOfMeasure)
*/
fof(a9241,axiom,s_instance(s_Ohm, s_CompositeUnitOfMeasure)).

/*
(instance Ohm SystemeInternationalUnit)
*/
fof(a9242,axiom,s_instance(s_Ohm, s_SystemeInternationalUnit)).

/*
(instance Siemens CompositeUnitOfMeasure)
*/
fof(a9243,axiom,s_instance(s_Siemens, s_CompositeUnitOfMeasure)).

/*
(instance Siemens SystemeInternationalUnit)
*/
fof(a9244,axiom,s_instance(s_Siemens, s_SystemeInternationalUnit)).

/*
(instance Weber CompositeUnitOfMeasure)
*/
fof(a9245,axiom,s_instance(s_Weber, s_CompositeUnitOfMeasure)).

/*
(instance Weber SystemeInternationalUnit)
*/
fof(a9246,axiom,s_instance(s_Weber, s_SystemeInternationalUnit)).

/*
(instance Tesla CompositeUnitOfMeasure)
*/
fof(a9247,axiom,s_instance(s_Tesla, s_CompositeUnitOfMeasure)).

/*
(instance Tesla SystemeInternationalUnit)
*/
fof(a9248,axiom,s_instance(s_Tesla, s_SystemeInternationalUnit)).

/*
(instance Henry CompositeUnitOfMeasure)
*/
fof(a9249,axiom,s_instance(s_Henry, s_CompositeUnitOfMeasure)).

/*
(instance Henry SystemeInternationalUnit)
*/
fof(a9250,axiom,s_instance(s_Henry, s_SystemeInternationalUnit)).

/*
(instance CelsiusDegree UnitOfTemperature)
*/
fof(a9251,axiom,s_instance(s_CelsiusDegree, s_UnitOfTemperature)).

/*
(instance CelsiusDegree SystemeInternationalUnit)
*/
fof(a9252,axiom,s_instance(s_CelsiusDegree, s_SystemeInternationalUnit)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER CelsiusDegree)
          (MeasureFn (SubtractionFn ?NUMBER 273.15) KelvinDegree)))))
*/
fof(a9253,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_CelsiusDegree) = s_MeasureFn(s_SubtractionFn(NUMBER, 273.15), s_KelvinDegree)))))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER CelsiusDegree)
          (MeasureFn (DivisionFn (SubtractionFn ?NUMBER 32) 1.8)
           FahrenheitDegree)))))
*/
fof(a9254,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_CelsiusDegree) = s_MeasureFn(divide(s_SubtractionFn(NUMBER, 32), 1.8), s_FahrenheitDegree)))))).

/*
(instance Lumen CompositeUnitOfMeasure)
*/
fof(a9255,axiom,s_instance(s_Lumen, s_CompositeUnitOfMeasure)).

/*
(instance Lumen SystemeInternationalUnit)
*/
fof(a9256,axiom,s_instance(s_Lumen, s_SystemeInternationalUnit)).

/*
(instance Lux CompositeUnitOfMeasure)
*/
fof(a9257,axiom,s_instance(s_Lux, s_CompositeUnitOfMeasure)).

/*
(instance Lux SystemeInternationalUnit)
*/
fof(a9258,axiom,s_instance(s_Lux, s_SystemeInternationalUnit)).

/*
(instance Becquerel CompositeUnitOfMeasure)
*/
fof(a9259,axiom,s_instance(s_Becquerel, s_CompositeUnitOfMeasure)).

/*
(instance Becquerel SystemeInternationalUnit)
*/
fof(a9260,axiom,s_instance(s_Becquerel, s_SystemeInternationalUnit)).

/*
(forall (?NUMBER ?QUANTITY)
 (=> (and (instance ?QUANTITY Entity) (instance ?NUMBER RealNumber))
  (=> (equal ?QUANTITY (MeasureFn ?NUMBER Becquerel))
   (instance ?QUANTITY TimeDependentQuantity))))
*/
fof(a9261,axiom,! [NUMBER,QUANTITY] : (((s_instance(QUANTITY, s_Entity) & s_instance(NUMBER, s_RealNumber)) => ((QUANTITY = s_MeasureFn(NUMBER, s_Becquerel)) => s_instance(QUANTITY, s_TimeDependentQuantity))))).

/*
(instance Gray CompositeUnitOfMeasure)
*/
fof(a9262,axiom,s_instance(s_Gray, s_CompositeUnitOfMeasure)).

/*
(instance Gray SystemeInternationalUnit)
*/
fof(a9263,axiom,s_instance(s_Gray, s_SystemeInternationalUnit)).

/*
(instance Sievert CompositeUnitOfMeasure)
*/
fof(a9264,axiom,s_instance(s_Sievert, s_CompositeUnitOfMeasure)).

/*
(instance Sievert SystemeInternationalUnit)
*/
fof(a9265,axiom,s_instance(s_Sievert, s_SystemeInternationalUnit)).

/*
(instance DayDuration UnitOfDuration)
*/
fof(a9266,axiom,s_instance(s_DayDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER DayDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 24) HourDuration)))))
*/
fof(a9267,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_DayDuration) = s_MeasureFn(times(NUMBER, 24), s_HourDuration)))))).

/*
(instance HourDuration UnitOfDuration)
*/
fof(a9268,axiom,s_instance(s_HourDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER HourDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 60) MinuteDuration)))))
*/
fof(a9269,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_HourDuration) = s_MeasureFn(times(NUMBER, 60), s_MinuteDuration)))))).

/*
(instance MinuteDuration UnitOfDuration)
*/
fof(a9270,axiom,s_instance(s_MinuteDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER MinuteDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 60) SecondDuration)))))
*/
fof(a9271,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_MinuteDuration) = s_MeasureFn(times(NUMBER, 60), s_SecondDuration)))))).

/*
(instance WeekDuration UnitOfDuration)
*/
fof(a9272,axiom,s_instance(s_WeekDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER WeekDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 7) DayDuration)))))
*/
fof(a9273,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_WeekDuration) = s_MeasureFn(times(NUMBER, 7), s_DayDuration)))))).

/*
(instance MonthDuration UnitOfDuration)
*/
fof(a9274,axiom,s_instance(s_MonthDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (greaterThanOrEqualTo (MeasureFn ?NUMBER MonthDuration)
    (MeasureFn (MultiplicationFn ?NUMBER 28) DayDuration)))))
*/
fof(a9275,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => s_greaterThanOrEqualTo(s_MeasureFn(NUMBER, s_MonthDuration), s_MeasureFn(times(NUMBER, 28), s_DayDuration)))))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (lessThanOrEqualTo (MeasureFn ?NUMBER MonthDuration)
    (MeasureFn (MultiplicationFn ?NUMBER 31) DayDuration)))))
*/
fof(a9276,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => lesseq(s_MeasureFn(NUMBER, s_MonthDuration), s_MeasureFn(times(NUMBER, 31), s_DayDuration)))))).

/*
(instance UnitOfDuration SetOrClass)
*/
fof(a9277,axiom,s_instance(s_UnitOfDuration, s_SetOrClass)).

/*
(instance YearDuration UnitOfDuration)
*/
fof(a9278,axiom,s_instance(s_YearDuration, s_UnitOfDuration)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER YearDuration)
          (MeasureFn (MultiplicationFn ?NUMBER 365) DayDuration)))))
*/
fof(a9279,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_YearDuration) = s_MeasureFn(times(NUMBER, 365), s_DayDuration)))))).

/*
(instance Amu UnitOfMass)
*/
fof(a9280,axiom,s_instance(s_Amu, s_UnitOfMass)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Amu)
          (MeasureFn (MultiplicationFn ?NUMBER 1.6605402e-24) Gram)))))
*/
fof(a9281,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Amu) = s_MeasureFn(times(NUMBER, 1.6605402e-24), s_Gram)))))).

/*
(instance ElectronVolt CompositeUnitOfMeasure)
*/
fof(a9282,axiom,s_instance(s_ElectronVolt, s_CompositeUnitOfMeasure)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER ElectronVolt)
          (MeasureFn (MultiplicationFn ?NUMBER 1.6021774e-19) Joule)))))
*/
fof(a9283,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_ElectronVolt) = s_MeasureFn(times(NUMBER, 1.6021774e-19), s_Joule)))))).

/*
(instance Angstrom UnitOfLength)
*/
fof(a9284,axiom,s_instance(s_Angstrom, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Angstrom)
          (MeasureFn (MultiplicationFn ?NUMBER 1.0e-10) Meter)))))
*/
fof(a9285,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Angstrom) = s_MeasureFn(times(NUMBER, 1.0e-10), s_Meter)))))).

/*
(instance FootLength UnitOfLength)
*/
fof(a9286,axiom,s_instance(s_FootLength, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER FootLength)
          (MeasureFn (MultiplicationFn ?NUMBER 0.3048) Meter)))))
*/
fof(a9287,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_FootLength) = s_MeasureFn(times(NUMBER, 0.3048), s_Meter)))))).

/*
(instance Inch UnitOfLength)
*/
fof(a9288,axiom,s_instance(s_Inch, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Inch)
          (MeasureFn (MultiplicationFn ?NUMBER 0.0254) Meter)))))
*/
fof(a9289,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Inch) = s_MeasureFn(times(NUMBER, 0.0254), s_Meter)))))).

/*
(instance UnitOfLength SetOrClass)
*/
fof(a9290,axiom,s_instance(s_UnitOfLength, s_SetOrClass)).

/*
(instance Mile UnitOfLength)
*/
fof(a9291,axiom,s_instance(s_Mile, s_UnitOfLength)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Mile)
          (MeasureFn (MultiplicationFn ?NUMBER 1609.344) Meter)))))
*/
fof(a9292,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Mile) = s_MeasureFn(times(NUMBER, 1609.344), s_Meter)))))).

/*
(instance UnitedStatesGallon UnitOfVolume)
*/
fof(a9293,axiom,s_instance(s_UnitedStatesGallon, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER UnitedStatesGallon)
          (MeasureFn (MultiplicationFn ?NUMBER 3.7854118) Liter)))))
*/
fof(a9294,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_UnitedStatesGallon) = s_MeasureFn(times(NUMBER, 3.7854118), s_Liter)))))).

/*
(instance Quart UnitOfVolume)
*/
fof(a9295,axiom,s_instance(s_Quart, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Quart)
          (MeasureFn (DivisionFn ?NUMBER 4) UnitedStatesGallon)))))
*/
fof(a9296,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Quart) = s_MeasureFn(divide(NUMBER, 4), s_UnitedStatesGallon)))))).

/*
(instance Pint UnitOfVolume)
*/
fof(a9297,axiom,s_instance(s_Pint, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Pint)
          (MeasureFn (DivisionFn ?NUMBER 2) Quart)))))
*/
fof(a9298,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Pint) = s_MeasureFn(divide(NUMBER, 2), s_Quart)))))).

/*
(instance Cup UnitOfVolume)
*/
fof(a9299,axiom,s_instance(s_Cup, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Cup)
          (MeasureFn (DivisionFn ?NUMBER 2) Pint)))))
*/
fof(a9300,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Cup) = s_MeasureFn(divide(NUMBER, 2), s_Pint)))))).

/*
(instance Ounce UnitOfVolume)
*/
fof(a9301,axiom,s_instance(s_Ounce, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Ounce)
          (MeasureFn (DivisionFn ?NUMBER 8) Cup)))))
*/
fof(a9302,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Ounce) = s_MeasureFn(divide(NUMBER, 8), s_Cup)))))).

/*
(instance UnitOfVolume SetOrClass)
*/
fof(a9303,axiom,s_instance(s_UnitOfVolume, s_SetOrClass)).

/*
(instance UnitedKingdomGallon UnitOfVolume)
*/
fof(a9304,axiom,s_instance(s_UnitedKingdomGallon, s_UnitOfVolume)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER UnitedKingdomGallon)
          (MeasureFn (MultiplicationFn ?NUMBER 4.54609) Liter)))))
*/
fof(a9305,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_UnitedKingdomGallon) = s_MeasureFn(times(NUMBER, 4.54609), s_Liter)))))).

/*
(instance AtomGram UnitOfMass)
*/
fof(a9306,axiom,s_instance(s_AtomGram, s_UnitOfMass)).

/*
(instance SystemeInternationalUnit SetOrClass)
*/
fof(a9307,axiom,s_instance(s_SystemeInternationalUnit, s_SetOrClass)).

/*
(instance Kilogram SystemeInternationalUnit)
*/
fof(a9308,axiom,s_instance(s_Kilogram, s_SystemeInternationalUnit)).

/*
(instance Kilogram UnitOfMass)
*/
fof(a9309,axiom,s_instance(s_Kilogram, s_UnitOfMass)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Kilogram)
          (MeasureFn (MultiplicationFn ?NUMBER 1000) Gram)))))
*/
fof(a9310,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Kilogram) = s_MeasureFn(times(NUMBER, 1000), s_Gram)))))).

/*
(instance weight BinaryPredicate)
*/
fof(a9311,axiom,s_instance(s_weight_m, s_BinaryPredicate)).

/*
(subrelation weight measure)
*/
fof(a9312,axiom,s_subrelation(s_weight_m, s_measure_m)).

/*
(instance PoundMass UnitOfMass)
*/
fof(a9313,axiom,s_instance(s_PoundMass, s_UnitOfMass)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER PoundMass)
          (MeasureFn (MultiplicationFn ?NUMBER 453.59238) Gram)))))
*/
fof(a9314,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_PoundMass) = s_MeasureFn(times(NUMBER, 453.59238), s_Gram)))))).

/*
(instance UnitOfMass SetOrClass)
*/
fof(a9315,axiom,s_instance(s_UnitOfMass, s_SetOrClass)).

/*
(instance Slug UnitOfMass)
*/
fof(a9316,axiom,s_instance(s_Slug, s_UnitOfMass)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Slug)
          (MeasureFn (MultiplicationFn ?NUMBER 14593.9) Gram)))))
*/
fof(a9317,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Slug) = s_MeasureFn(times(NUMBER, 14593.9), s_Gram)))))).

/*
(instance RankineDegree UnitOfTemperature)
*/
fof(a9318,axiom,s_instance(s_RankineDegree, s_UnitOfTemperature)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER RankineDegree)
          (MeasureFn (MultiplicationFn ?NUMBER 1.8) KelvinDegree)))))
*/
fof(a9319,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_RankineDegree) = s_MeasureFn(times(NUMBER, 1.8), s_KelvinDegree)))))).

/*
(instance UnitOfTemperature SetOrClass)
*/
fof(a9320,axiom,s_instance(s_UnitOfTemperature, s_SetOrClass)).

/*
(instance FahrenheitDegree UnitOfTemperature)
*/
fof(a9321,axiom,s_instance(s_FahrenheitDegree, s_UnitOfTemperature)).

/*
(instance PoundForce CompositeUnitOfMeasure)
*/
fof(a9322,axiom,s_instance(s_PoundForce, s_CompositeUnitOfMeasure)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER PoundForce)
          (MeasureFn (MultiplicationFn ?NUMBER 4.448222) Newton)))))
*/
fof(a9323,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_PoundForce) = s_MeasureFn(times(NUMBER, 4.448222), s_Newton)))))).

/*
(instance Calorie CompositeUnitOfMeasure)
*/
fof(a9324,axiom,s_instance(s_Calorie, s_CompositeUnitOfMeasure)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Calorie)
          (MeasureFn (MultiplicationFn ?NUMBER 4.1868) Joule)))))
*/
fof(a9325,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Calorie) = s_MeasureFn(times(NUMBER, 4.1868), s_Joule)))))).

/*
(instance BritishThermalUnit CompositeUnitOfMeasure)
*/
fof(a9326,axiom,s_instance(s_BritishThermalUnit, s_CompositeUnitOfMeasure)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER BritishThermalUnit)
          (MeasureFn (MultiplicationFn ?NUMBER 1055.0559) Joule)))))
*/
fof(a9327,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_BritishThermalUnit) = s_MeasureFn(times(NUMBER, 1055.0559), s_Joule)))))).

/*
(instance UnitOfAngularMeasure SetOrClass)
*/
fof(a9328,axiom,s_instance(s_UnitOfAngularMeasure, s_SetOrClass)).

/*
(instance AngularDegree UnitOfAngularMeasure)
*/
fof(a9329,axiom,s_instance(s_AngularDegree, s_UnitOfAngularMeasure)).

/*
(forall (?N ?QUANT)
 (=> (and (instance ?QUANT Entity) (instance ?N RealNumber))
  (=> (equal ?QUANT (MeasureFn ?N AngularDegree))
   (instance ?QUANT PlaneAngleMeasure))))
*/
fof(a9330,axiom,! [N,QUANT] : (((s_instance(QUANT, s_Entity) & s_instance(N, s_RealNumber)) => ((QUANT = s_MeasureFn(N, s_AngularDegree)) => s_instance(QUANT, s_PlaneAngleMeasure))))).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER AngularDegree)
          (MeasureFn (MultiplicationFn ?NUMBER (DivisionFn Pi 180))
           Radian)))))
*/
fof(a9331,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_AngularDegree) = s_MeasureFn(times(NUMBER, divide(s_Pi, 180)), s_Radian)))))).

/*
(forall (?NUMBER ?ANGLE)
 (=> (and (instance ?ANGLE Object) (instance ?NUMBER RealNumber))
  (=> (measure ?ANGLE (MeasureFn ?NUMBER AngularDegree))
   (and (greaterThanOrEqualTo ?NUMBER 0)
        (lessThanOrEqualTo ?NUMBER 360)))))
*/
fof(a9332,axiom,! [NUMBER,ANGLE] : (((s_instance(ANGLE, s_Object) & s_instance(NUMBER, s_RealNumber)) => (s_measure(ANGLE, s_MeasureFn(NUMBER, s_AngularDegree)) => (s_greaterThanOrEqualTo(NUMBER, 0) & lesseq(NUMBER, 360)))))).

/*
(equal (MeasureFn 0 AngularDegree) (MeasureFn 360 AngularDegree))
*/
fof(a9333,axiom,(s_MeasureFn(0, s_AngularDegree) = s_MeasureFn(360, s_AngularDegree))).

/*
(instance UnitedStatesDollar UnitOfCurrency)
*/
fof(a9334,axiom,s_instance(s_UnitedStatesDollar, s_UnitOfCurrency)).

/*
(instance UnitedStatesCent UnitOfCurrency)
*/
fof(a9335,axiom,s_instance(s_UnitedStatesCent, s_UnitOfCurrency)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER UnitedStatesCent)
          (MeasureFn (MultiplicationFn ?NUMBER 0.01)
           UnitedStatesDollar)))))
*/
fof(a9336,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_UnitedStatesCent) = s_MeasureFn(times(NUMBER, 0.01), s_UnitedStatesDollar)))))).

/*
(instance EuroDollar UnitOfCurrency)
*/
fof(a9337,axiom,s_instance(s_EuroDollar, s_UnitOfCurrency)).

/*
(instance UnitOfCurrency SetOrClass)
*/
fof(a9338,axiom,s_instance(s_UnitOfCurrency, s_SetOrClass)).

/*
(instance EuroCent UnitOfCurrency)
*/
fof(a9339,axiom,s_instance(s_EuroCent, s_UnitOfCurrency)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER EuroCent)
          (MeasureFn (MultiplicationFn ?NUMBER 0.01) EuroDollar)))))
*/
fof(a9340,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_EuroCent) = s_MeasureFn(times(NUMBER, 0.01), s_EuroDollar)))))).

/*
(instance InformationMeasure SetOrClass)
*/
fof(a9341,axiom,s_instance(s_InformationMeasure, s_SetOrClass)).

/*
(instance ConstantQuantity SetOrClass)
*/
fof(a9342,axiom,s_instance(s_ConstantQuantity, s_SetOrClass)).

/*
(subclass InformationMeasure ConstantQuantity)
*/
fof(a9343,axiom,s_subclass(s_InformationMeasure, s_ConstantQuantity)).

/*
(instance Bit UnitOfInformation)
*/
fof(a9344,axiom,s_instance(s_Bit, s_UnitOfInformation)).

/*
(instance Byte UnitOfInformation)
*/
fof(a9345,axiom,s_instance(s_Byte, s_UnitOfInformation)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER Byte)
          (MeasureFn (MultiplicationFn ?NUMBER 8) Bit)))))
*/
fof(a9346,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_Byte) = s_MeasureFn(times(NUMBER, 8), s_Bit)))))).

/*
(instance KiloByte UnitOfInformation)
*/
fof(a9347,axiom,s_instance(s_KiloByte, s_UnitOfInformation)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER KiloByte)
          (MeasureFn (MultiplicationFn ?NUMBER 1024) Byte)))))
*/
fof(a9348,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_KiloByte) = s_MeasureFn(times(NUMBER, 1024), s_Byte)))))).

/*
(instance UnitOfInformation SetOrClass)
*/
fof(a9349,axiom,s_instance(s_UnitOfInformation, s_SetOrClass)).

/*
(instance MegaByte UnitOfInformation)
*/
fof(a9350,axiom,s_instance(s_MegaByte, s_UnitOfInformation)).

/*
(forall (?NUMBER)
 (=> (instance ?NUMBER RealNumber)
  (=> (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
   (equal (MeasureFn ?NUMBER MegaByte)
          (MeasureFn (MultiplicationFn ?NUMBER 1024) KiloByte)))))
*/
fof(a9351,axiom,! [NUMBER] : ((s_instance(NUMBER, s_RealNumber) => ((NUMBER = times(1, NUMBER)) => (s_MeasureFn(NUMBER, s_MegaByte) = s_MeasureFn(times(NUMBER, 1024), s_KiloByte)))))).

/*
(instance measure BinaryPredicate)
*/
fof(a9352,axiom,s_instance(s_measure_m, s_BinaryPredicate)).

/*
(instance measure AsymmetricRelation)
*/
fof(a9353,axiom,s_instance(s_measure_m, s_AsymmetricRelation)).

/*
(instance age SingleValuedRelation)
*/
fof(a9354,axiom,s_instance(s_age_m, s_SingleValuedRelation)).

/*
(subrelation age measure)
*/
fof(a9355,axiom,s_subrelation(s_age_m, s_measure_m)).

/*
(forall (?TIME ?DURATION ?OBJ)
 (=> (and (instance ?DURATION TimeDuration) (instance ?OBJ Object))
  (=>
   (and (instance ?TIME TimePoint)
        (holdsDuring ?TIME (age ?OBJ ?DURATION)))
   (duration (TimeIntervalFn (BeginFn (WhenFn ?OBJ)) ?TIME)
    ?DURATION))))
*/
%% no translation to TPTP available.

/*
(subrelation linearExtent measure)
*/
fof(a9356,axiom,s_subrelation(s_linearExtent_m, s_measure_m)).

/*
(instance width SingleValuedRelation)
*/
fof(a9357,axiom,s_instance(s_width_m, s_SingleValuedRelation)).

/*
(subrelation width linearExtent)
*/
fof(a9358,axiom,s_subrelation(s_width_m, s_linearExtent_m)).

/*
(subrelation height linearExtent)
*/
fof(a9359,axiom,s_subrelation(s_height_m, s_linearExtent_m)).

/*
(instance length SingleValuedRelation)
*/
fof(a9360,axiom,s_instance(s_length_m, s_SingleValuedRelation)).

/*
(subrelation length linearExtent)
*/
fof(a9361,axiom,s_subrelation(s_length_m, s_linearExtent_m)).

/*
(forall (?M ?O)
 (forall (?M2)
  (=> (instance ?M2 LengthMeasure)
   (=> (and (instance ?O Object) (instance ?M LengthMeasure))
    (=> (length ?O ?M)
     (not (and (linearExtent ?O ?M2) (greaterThan ?M2 ?M))))))))
*/
fof(a9362,axiom,! [M,O] : (! [M2] : ((s_instance(M2, s_LengthMeasure) => ((s_instance(O, s_Object) & s_instance(M, s_LengthMeasure)) => (s_length(O, M) => (~ (s_linearExtent(O, M2) & greater(M2, M))))))))).

/*
(subclass Oval ClosedTwoDimensionalFigure)
*/
fof(a9363,axiom,s_subclass(s_Oval, s_ClosedTwoDimensionalFigure)).

/*
(instance Circle SetOrClass)
*/
fof(a9364,axiom,s_instance(s_Circle, s_SetOrClass)).

/*
(instance Oval SetOrClass)
*/
fof(a9365,axiom,s_instance(s_Oval, s_SetOrClass)).

/*
(subclass Circle Oval)
*/
fof(a9366,axiom,s_subclass(s_Circle, s_Oval)).

/*
(forall (?C)
 (exists (?R)
  (and (instance ?R LengthMeasure)
       (=> (instance ?C Circle) (radius ?C ?R)))))
*/
fof(a9367,axiom,! [C] : (? [R] : ((s_instance(R, s_LengthMeasure) & (s_instance(C, s_Circle) => s_radius(C, R)))))).

/*
(forall (?C)
 (exists (?P)
  (and (instance ?P Entity)
       (=> (instance ?C Circle) (equal (CenterOfCircleFn ?C) ?P)))))
*/
fof(a9368,axiom,! [C] : (? [P] : ((s_instance(P, s_Entity) & (s_instance(C, s_Circle) => (s_CenterOfCircleFn(C) = P)))))).

/*
(instance CenterOfCircleFn UnaryFunction)
*/
fof(a9369,axiom,s_instance(s_CenterOfCircleFn_m, s_UnaryFunction)).

/*
(instance CenterOfCircleFn TotalValuedRelation)
*/
fof(a9370,axiom,s_instance(s_CenterOfCircleFn_m, s_TotalValuedRelation)).

/*
(range CenterOfCircleFn GeometricPoint)
*/
fof(a9371,axiom,s_range(s_CenterOfCircleFn_m, s_GeometricPoint)).

/*
(instance radius BinaryPredicate)
*/
fof(a9372,axiom,s_instance(s_radius_m, s_BinaryPredicate)).

/*
(instance radius SingleValuedRelation)
*/
fof(a9373,axiom,s_instance(s_radius_m, s_SingleValuedRelation)).

/*
(instance radius TotalValuedRelation)
*/
fof(a9374,axiom,s_instance(s_radius_m, s_TotalValuedRelation)).

/*
(forall (?RADIUS ?CIRCLE)
 (exists (?POINT)
  (forall (?PART)
   (=> (instance ?PART GeometricPoint)
    (and (instance ?POINT GeometricPoint)
         (=>
          (and (instance ?CIRCLE Circle)
               (instance ?RADIUS LengthMeasure))
          (=> (radius ?CIRCLE ?RADIUS)
           (=> (pointOfFigure ?PART ?CIRCLE)
            (geometricDistance ?PART ?POINT ?RADIUS)))))))))
*/
fof(a9375,axiom,! [RADIUS,CIRCLE] : (? [POINT] : (! [PART] : ((s_instance(PART, s_GeometricPoint) => (s_instance(POINT, s_GeometricPoint) & ((s_instance(CIRCLE, s_Circle) & s_instance(RADIUS, s_LengthMeasure)) => (s_radius(CIRCLE, RADIUS) => (s_pointOfFigure(PART, CIRCLE) => s_geometricDistance(PART, POINT, RADIUS)))))))))).

/*
(instance diameter BinaryPredicate)
*/
fof(a9376,axiom,s_instance(s_diameter_m, s_BinaryPredicate)).

/*
(instance diameter SingleValuedRelation)
*/
fof(a9377,axiom,s_instance(s_diameter_m, s_SingleValuedRelation)).

/*
(instance diameter TotalValuedRelation)
*/
fof(a9378,axiom,s_instance(s_diameter_m, s_TotalValuedRelation)).

/*
(forall (?LENGTH ?CIRCLE)
 (exists (?HALF)
  (and (instance ?HALF LengthMeasure)
       (=>
        (and (instance ?CIRCLE Circle)
             (instance ?LENGTH LengthMeasure))
        (=> (diameter ?CIRCLE ?LENGTH)
         (and (radius ?CIRCLE ?HALF)
              (equal (MultiplicationFn ?HALF 2) ?LENGTH)))))))
*/
fof(a9379,axiom,! [LENGTH,CIRCLE] : (? [HALF] : ((s_instance(HALF, s_LengthMeasure) & ((s_instance(CIRCLE, s_Circle) & s_instance(LENGTH, s_LengthMeasure)) => (s_diameter(CIRCLE, LENGTH) => (s_radius(CIRCLE, HALF) & (times(HALF, 2) = LENGTH)))))))).

/*
(instance distance SingleValuedRelation)
*/
fof(a9380,axiom,s_instance(s_distance_m, s_SingleValuedRelation)).

/*
(instance distance SpatialRelation)
*/
fof(a9381,axiom,s_instance(s_distance_m, s_SpatialRelation)).

/*
(instance distance TernaryPredicate)
*/
fof(a9382,axiom,s_instance(s_distance_m, s_TernaryPredicate)).

/*
(instance distance TotalValuedRelation)
*/
fof(a9383,axiom,s_instance(s_distance_m, s_TotalValuedRelation)).

/*
(forall (?OBJ1 ?QUANT ?OBJ2)
 (=>
  (and (instance ?OBJ2 Physical) (instance ?QUANT LengthMeasure)
       (instance ?OBJ1 Physical))
  (=> (distance ?OBJ1 ?OBJ2 ?QUANT) (distance ?OBJ2 ?OBJ1 ?QUANT))))
*/
fof(a9384,axiom,! [OBJ1,QUANT,OBJ2] : (((s_instance(OBJ2, s_Physical) & s_instance(QUANT, s_LengthMeasure) & s_instance(OBJ1, s_Physical)) => (s_distance(OBJ1, OBJ2, QUANT) => s_distance(OBJ2, OBJ1, QUANT))))).

/*
(subrelation altitude distance)
*/
fof(a9385,axiom,s_subrelation(s_altitude_m, s_distance_m)).

/*
(instance altitude SingleValuedRelation)
*/
fof(a9386,axiom,s_instance(s_altitude_m, s_SingleValuedRelation)).

/*
(instance altitude PartialValuedRelation)
*/
fof(a9387,axiom,s_instance(s_altitude_m, s_PartialValuedRelation)).

/*
(forall (?OBJ1 ?HEIGHT ?OBJ2)
 (=>
  (and (instance ?OBJ2 Object) (instance ?HEIGHT LengthMeasure)
       (instance ?OBJ1 Object))
  (=> (altitude ?OBJ1 ?OBJ2 ?HEIGHT) (orientation ?OBJ1 ?OBJ2 Above))))
*/
fof(a9388,axiom,! [OBJ1,HEIGHT,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(HEIGHT, s_LengthMeasure) & s_instance(OBJ1, s_Object)) => (s_altitude(OBJ1, OBJ2, HEIGHT) => s_orientation(OBJ1, OBJ2, s_Above))))).

/*
(forall (?OBJ1 ?HEIGHT ?OBJ2)
 (exists (?TOP)
  (and (instance ?TOP SelfConnectedObject)
       (=>
        (and (instance ?OBJ2 Physical) (instance ?HEIGHT LengthMeasure)
             (instance ?OBJ1 SelfConnectedObject))
        (=> (altitude ?OBJ1 ?OBJ2 ?HEIGHT)
         (and (top ?TOP ?OBJ1) (distance ?TOP ?OBJ2 ?HEIGHT)))))))
*/
fof(a9389,axiom,! [OBJ1,HEIGHT,OBJ2] : (? [TOP] : ((s_instance(TOP, s_SelfConnectedObject) & ((s_instance(OBJ2, s_Physical) & s_instance(HEIGHT, s_LengthMeasure) & s_instance(OBJ1, s_SelfConnectedObject)) => (s_altitude(OBJ1, OBJ2, HEIGHT) => (s_top(TOP, OBJ1) & s_distance(TOP, OBJ2, HEIGHT)))))))).

/*
(subrelation depth distance)
*/
fof(a9390,axiom,s_subrelation(s_depth_m, s_distance_m)).

/*
(instance depth SingleValuedRelation)
*/
fof(a9391,axiom,s_instance(s_depth_m, s_SingleValuedRelation)).

/*
(forall (?OBJ1 ?DEPTH ?OBJ2)
 (=>
  (and (instance ?OBJ2 Object) (instance ?DEPTH LengthMeasure)
       (instance ?OBJ1 Object))
  (=> (depth ?OBJ1 ?OBJ2 ?DEPTH) (orientation ?OBJ1 ?OBJ2 Below))))
*/
fof(a9392,axiom,! [OBJ1,DEPTH,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(DEPTH, s_LengthMeasure) & s_instance(OBJ1, s_Object)) => (s_depth(OBJ1, OBJ2, DEPTH) => s_orientation(OBJ1, OBJ2, s_Below))))).

/*
(forall (?OBJ1 ?DEPTH ?OBJ2)
 (exists (?BOTTOM)
  (and (instance ?BOTTOM SelfConnectedObject)
       (=>
        (and (instance ?OBJ2 Physical) (instance ?DEPTH LengthMeasure)
             (instance ?OBJ1 SelfConnectedObject))
        (=> (depth ?OBJ1 ?OBJ2 ?DEPTH)
         (and (bottom ?BOTTOM ?OBJ1)
              (distance ?BOTTOM ?OBJ2 ?DEPTH)))))))
*/
fof(a9393,axiom,! [OBJ1,DEPTH,OBJ2] : (? [BOTTOM] : ((s_instance(BOTTOM, s_SelfConnectedObject) & ((s_instance(OBJ2, s_Physical) & s_instance(DEPTH, s_LengthMeasure) & s_instance(OBJ1, s_SelfConnectedObject)) => (s_depth(OBJ1, OBJ2, DEPTH) => (s_bottom(BOTTOM, OBJ1) & s_distance(BOTTOM, OBJ2, DEPTH)))))))).

/*
(instance larger BinaryPredicate)
*/
fof(a9394,axiom,s_instance(s_larger_m, s_BinaryPredicate)).

/*
(instance larger SpatialRelation)
*/
fof(a9395,axiom,s_instance(s_larger_m, s_SpatialRelation)).

/*
(instance larger TransitiveRelation)
*/
fof(a9396,axiom,s_instance(s_larger_m, s_TransitiveRelation)).

/*
(instance larger IrreflexiveRelation)
*/
fof(a9397,axiom,s_instance(s_larger_m, s_IrreflexiveRelation)).

/*
(instance larger TotalValuedRelation)
*/
fof(a9398,axiom,s_instance(s_larger_m, s_TotalValuedRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?QUANT1 ?QUANT2 ?UNIT)
  (exists (?g6830 ?g6831 ?g6832)
   (and (and (instance ?g6830 RealNumber) (instance ?g6831 RealNumber))
        (=>
         (and (instance ?QUANT1 RealNumber)
              (instance ?QUANT2 RealNumber))
         (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
          (and (=> (larger ?OBJ1 ?OBJ2)
                (=>
                 (and (measure ?OBJ1 (MeasureFn ?QUANT1 ?UNIT))
                      (and (measure ?OBJ2 (MeasureFn ?QUANT2 ?UNIT))
                           (instance ?UNIT UnitOfLength)))
                 (greaterThan ?QUANT1 ?QUANT2)))
               (=>
                (=>
                 (and (measure ?OBJ1 (MeasureFn ?g6830 ?g6832))
                      (and (measure ?OBJ2 (MeasureFn ?g6831 ?g6832))
                           (instance ?g6832 UnitOfLength)))
                 (greaterThan ?g6830 ?g6831))
                (larger ?OBJ1 ?OBJ2)))))))))
*/
fof(a9399,axiom,! [OBJ2,OBJ1] : (! [QUANT1,QUANT2,UNIT] : (? [G6830,G6831,G6832] : (((s_instance(G6830, s_RealNumber) & s_instance(G6831, s_RealNumber)) & ((s_instance(QUANT1, s_RealNumber) & s_instance(QUANT2, s_RealNumber)) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_larger(OBJ1, OBJ2) => ((s_measure(OBJ1, s_MeasureFn(QUANT1, UNIT)) & (s_measure(OBJ2, s_MeasureFn(QUANT2, UNIT)) & s_instance(UNIT, s_UnitOfLength))) => greater(QUANT1, QUANT2))) & (((s_measure(OBJ1, s_MeasureFn(G6830, G6832)) & (s_measure(OBJ2, s_MeasureFn(G6831, G6832)) & s_instance(G6832, s_UnitOfLength))) => greater(G6830, G6831)) => s_larger(OBJ1, OBJ2)))))))))).

/*
(instance smaller BinaryPredicate)
*/
fof(a9400,axiom,s_instance(s_smaller_m, s_BinaryPredicate)).

/*
(instance smaller SpatialRelation)
*/
fof(a9401,axiom,s_instance(s_smaller_m, s_SpatialRelation)).

/*
(instance smaller TotalValuedRelation)
*/
fof(a9402,axiom,s_instance(s_smaller_m, s_TotalValuedRelation)).

/*
(instance smaller TransitiveRelation)
*/
fof(a9403,axiom,s_instance(s_smaller_m, s_TransitiveRelation)).

/*
(instance smaller IrreflexiveRelation)
*/
fof(a9404,axiom,s_instance(s_smaller_m, s_IrreflexiveRelation)).

/*
(inverse smaller larger)
*/
fof(a9405,axiom,s_inverse(s_smaller_m, s_larger_m)).

/*
(instance monetaryValue SingleValuedRelation)
*/
fof(a9406,axiom,s_instance(s_monetaryValue_m, s_SingleValuedRelation)).

/*
(instance monetaryValue AsymmetricRelation)
*/
fof(a9407,axiom,s_instance(s_monetaryValue_m, s_AsymmetricRelation)).

/*
(instance monetaryValue BinaryPredicate)
*/
fof(a9408,axiom,s_instance(s_monetaryValue_m, s_BinaryPredicate)).

/*
(instance WealthFn UnaryFunction)
*/
fof(a9409,axiom,s_instance(s_WealthFn_m, s_UnaryFunction)).

/*
(instance WealthFn TotalValuedRelation)
*/
fof(a9410,axiom,s_instance(s_WealthFn_m, s_TotalValuedRelation)).

/*
(range WealthFn CurrencyMeasure)
*/
fof(a9411,axiom,s_range(s_WealthFn_m, s_CurrencyMeasure)).

/*
(forall (?AMOUNT ?PERSON)
 (=> (and (instance ?PERSON Agent) (instance ?AMOUNT CurrencyMeasure))
  (<=> (equal (WealthFn ?PERSON) ?AMOUNT)
   (monetaryValue (PropertyFn ?PERSON) ?AMOUNT))))
*/
fof(a9412,axiom,! [AMOUNT,PERSON] : (((s_instance(PERSON, s_Agent) & s_instance(AMOUNT, s_CurrencyMeasure)) => ((s_WealthFn(PERSON) = AMOUNT) <=> s_monetaryValue(s_PropertyFn(PERSON), AMOUNT))))).

/*
(instance barometricPressure BinaryPredicate)
*/
fof(a9413,axiom,s_instance(s_barometricPressure_m, s_BinaryPredicate)).

/*
(instance barometricPressure AsymmetricRelation)
*/
fof(a9414,axiom,s_instance(s_barometricPressure_m, s_AsymmetricRelation)).

/*
(subrelation barometricPressure measure)
*/
fof(a9415,axiom,s_subrelation(s_barometricPressure_m, s_measure_m)).

/*
(instance CompositeUnitOfMeasure SetOrClass)
*/
fof(a9416,axiom,s_instance(s_CompositeUnitOfMeasure, s_SetOrClass)).

/*
(subclass UnitOfAtmosphericPressure CompositeUnitOfMeasure)
*/
fof(a9417,axiom,s_subclass(s_UnitOfAtmosphericPressure, s_CompositeUnitOfMeasure)).

/*
(instance InchMercury UnitOfAtmosphericPressure)
*/
fof(a9418,axiom,s_instance(s_InchMercury, s_UnitOfAtmosphericPressure)).

/*
(instance UnitOfAtmosphericPressure SetOrClass)
*/
fof(a9419,axiom,s_instance(s_UnitOfAtmosphericPressure, s_SetOrClass)).

/*
(instance MmMercury UnitOfAtmosphericPressure)
*/
fof(a9420,axiom,s_instance(s_MmMercury, s_UnitOfAtmosphericPressure)).

/*
(instance PositiveInfinity TimePoint)
*/
fof(a9421,axiom,s_instance(s_PositiveInfinity, s_TimePoint)).

/*
(forall (?POINT)
 (=>
  (and (instance ?POINT TimePoint)
       (not (equal ?POINT PositiveInfinity)))
  (before ?POINT PositiveInfinity)))
*/
fof(a9422,axiom,! [POINT] : (((s_instance(POINT, s_TimePoint) & (~ (POINT = s_PositiveInfinity))) => s_before(POINT, s_PositiveInfinity)))).

/*
(forall (?POINT)
 (exists (?OTHERPOINT)
  (and (instance ?OTHERPOINT TimePoint)
       (=>
        (and (instance ?POINT TimePoint)
             (not (equal ?POINT PositiveInfinity)))
        (temporallyBetween ?POINT ?OTHERPOINT PositiveInfinity)))))
*/
fof(a9423,axiom,! [POINT] : (? [OTHERPOINT] : ((s_instance(OTHERPOINT, s_TimePoint) & ((s_instance(POINT, s_TimePoint) & (~ (POINT = s_PositiveInfinity))) => s_temporallyBetween(POINT, OTHERPOINT, s_PositiveInfinity)))))).

/*
(instance TimePoint SetOrClass)
*/
fof(a9424,axiom,s_instance(s_TimePoint, s_SetOrClass)).

/*
(instance NegativeInfinity TimePoint)
*/
fof(a9425,axiom,s_instance(s_NegativeInfinity, s_TimePoint)).

/*
(forall (?POINT)
 (=>
  (and (instance ?POINT TimePoint)
       (not (equal ?POINT NegativeInfinity)))
  (before NegativeInfinity ?POINT)))
*/
fof(a9426,axiom,! [POINT] : (((s_instance(POINT, s_TimePoint) & (~ (POINT = s_NegativeInfinity))) => s_before(s_NegativeInfinity, POINT)))).

/*
(forall (?POINT)
 (exists (?OTHERPOINT)
  (and (instance ?OTHERPOINT TimePoint)
       (=>
        (and (instance ?POINT TimePoint)
             (not (equal ?POINT NegativeInfinity)))
        (temporallyBetween NegativeInfinity ?OTHERPOINT ?POINT)))))
*/
fof(a9427,axiom,! [POINT] : (? [OTHERPOINT] : ((s_instance(OTHERPOINT, s_TimePoint) & ((s_instance(POINT, s_TimePoint) & (~ (POINT = s_NegativeInfinity))) => s_temporallyBetween(s_NegativeInfinity, OTHERPOINT, POINT)))))).

/*
(instance duration BinaryPredicate)
*/
fof(a9428,axiom,s_instance(s_duration_m, s_BinaryPredicate)).

/*
(instance duration AsymmetricRelation)
*/
fof(a9429,axiom,s_instance(s_duration_m, s_AsymmetricRelation)).

/*
(instance duration TotalValuedRelation)
*/
fof(a9430,axiom,s_instance(s_duration_m, s_TotalValuedRelation)).

/*
(instance frequency BinaryPredicate)
*/
fof(a9431,axiom,s_instance(s_frequency_m, s_BinaryPredicate)).

/*
(instance frequency AsymmetricRelation)
*/
fof(a9432,axiom,s_instance(s_frequency_m, s_AsymmetricRelation)).

/*
(domainSubclass frequency 1 Process)
*/
fof(a9433,axiom,s_domainSubclass(s_frequency_m, 1, s_Process)).

/*
(forall (?TIME1 ?PROC)
 (forall (?TIME2)
  (exists (?POSITION)
   (and (instance ?POSITION TimePosition)
        (=> (instance ?TIME2 TimeInterval)
         (=>
          (and (instance ?TIME1 TimeDuration) (subclass ?PROC Process)
               (instance ?PROC SetOrClass))
          (=> (frequency ?PROC ?TIME1)
           (=> (duration ?TIME2 ?TIME1)
            (and (temporalPart ?POSITION ?TIME2)
                 (holdsDuring ?POSITION
                  (exists (?INST) (instance ?INST ?PROC))))))))))))
*/
%% no translation to TPTP available.

/*
(instance temporalPart BinaryPredicate)
*/
fof(a9434,axiom,s_instance(s_temporalPart_m, s_BinaryPredicate)).

/*
(instance temporalPart TemporalRelation)
*/
fof(a9435,axiom,s_instance(s_temporalPart_m, s_TemporalRelation)).

/*
(instance temporalPart PartialOrderingRelation)
*/
fof(a9436,axiom,s_instance(s_temporalPart_m, s_PartialOrderingRelation)).

/*
(forall (?POINT)
 (exists (?INTERVAL)
  (and (instance ?INTERVAL TimePosition)
       (=> (instance ?POINT TimePoint)
        (and (instance ?INTERVAL TimeInterval)
             (temporalPart ?POINT ?INTERVAL))))))
*/
fof(a9437,axiom,! [POINT] : (? [INTERVAL] : ((s_instance(INTERVAL, s_TimePosition) & (s_instance(POINT, s_TimePoint) => (s_instance(INTERVAL, s_TimeInterval) & s_temporalPart(POINT, INTERVAL))))))).

/*
(forall (?INTERVAL)
 (exists (?POINT)
  (and (instance ?POINT TimePosition)
       (=> (instance ?INTERVAL TimeInterval)
        (and (instance ?POINT TimePoint)
             (temporalPart ?POINT ?INTERVAL))))))
*/
fof(a9438,axiom,! [INTERVAL] : (? [POINT] : ((s_instance(POINT, s_TimePosition) & (s_instance(INTERVAL, s_TimeInterval) => (s_instance(POINT, s_TimePoint) & s_temporalPart(POINT, INTERVAL))))))).

/*
(forall (?TIME2 ?SITUATION ?TIME1)
 (=>
  (and (instance ?TIME1 TimePosition) (instance ?SITUATION Formula)
       (instance ?TIME2 TimePosition))
  (=>
   (and (holdsDuring ?TIME1 ?SITUATION) (temporalPart ?TIME2 ?TIME1))
   (holdsDuring ?TIME2 ?SITUATION))))
*/
fof(a9439,axiom,! [TIME2,SITUATION,TIME1] : (((s_instance(TIME1, s_TimePosition) & s_instance(SITUATION, s_Formula) & s_instance(TIME2, s_TimePosition)) => ((s_holdsDuring(TIME1, SITUATION) & s_temporalPart(TIME2, TIME1)) => s_holdsDuring(TIME2, SITUATION))))).

/*
(forall (?THING ?POS)
 (=> (and (instance ?POS TimePosition) (instance ?THING Physical))
  (<=> (temporalPart ?POS (WhenFn ?THING)) (time ?THING ?POS))))
*/
fof(a9440,axiom,! [THING,POS] : (((s_instance(POS, s_TimePosition) & s_instance(THING, s_Physical)) => (s_temporalPart(POS, s_WhenFn(THING)) <=> s_time(THING, POS))))).

/*
(instance BeginFn TemporalRelation)
*/
fof(a9441,axiom,s_instance(s_BeginFn_m, s_TemporalRelation)).

/*
(instance BeginFn UnaryFunction)
*/
fof(a9442,axiom,s_instance(s_BeginFn_m, s_UnaryFunction)).

/*
(instance BeginFn TotalValuedRelation)
*/
fof(a9443,axiom,s_instance(s_BeginFn_m, s_TotalValuedRelation)).

/*
(range BeginFn TimePoint)
*/
fof(a9444,axiom,s_range(s_BeginFn_m, s_TimePoint)).

/*
(forall (?OBJ ?PROCESS)
 (=> (and (instance ?PROCESS Process) (instance ?OBJ Object))
  (=> (origin ?PROCESS ?OBJ)
   (eventLocated (WhereFn ?PROCESS (BeginFn (WhenFn ?PROCESS)))
    (WhereFn ?OBJ (BeginFn (WhenFn ?OBJ)))))))
*/
fof(a9445,axiom,! [OBJ,PROCESS] : (((s_instance(PROCESS, s_Process) & s_instance(OBJ, s_Object)) => (s_origin(PROCESS, OBJ) => s_eventLocated(s_WhereFn(PROCESS, s_BeginFn(s_WhenFn(PROCESS))), s_WhereFn(OBJ, s_BeginFn(s_WhenFn(OBJ)))))))).

/*
(forall (?POINT ?INTERVAL)
 (forall (?OTHERPOINT)
  (=> (instance ?OTHERPOINT TimePoint)
   (=>
    (and (instance ?INTERVAL TimeInterval) (instance ?POINT TimePoint))
    (=> (equal (BeginFn ?INTERVAL) ?POINT)
     (=>
      (and (temporalPart ?OTHERPOINT ?INTERVAL)
           (not (equal ?OTHERPOINT ?POINT)))
      (before ?POINT ?OTHERPOINT)))))))
*/
fof(a9446,axiom,! [POINT,INTERVAL] : (! [OTHERPOINT] : ((s_instance(OTHERPOINT, s_TimePoint) => ((s_instance(INTERVAL, s_TimeInterval) & s_instance(POINT, s_TimePoint)) => ((s_BeginFn(INTERVAL) = POINT) => ((s_temporalPart(OTHERPOINT, INTERVAL) & (~ (OTHERPOINT = POINT))) => s_before(POINT, OTHERPOINT)))))))).

/*
(instance EndFn TemporalRelation)
*/
fof(a9447,axiom,s_instance(s_EndFn_m, s_TemporalRelation)).

/*
(instance EndFn UnaryFunction)
*/
fof(a9448,axiom,s_instance(s_EndFn_m, s_UnaryFunction)).

/*
(instance EndFn TotalValuedRelation)
*/
fof(a9449,axiom,s_instance(s_EndFn_m, s_TotalValuedRelation)).

/*
(range EndFn TimePoint)
*/
fof(a9450,axiom,s_range(s_EndFn_m, s_TimePoint)).

/*
(forall (?POINT ?INTERVAL)
 (forall (?OTHERPOINT)
  (=> (instance ?OTHERPOINT TimePoint)
   (=>
    (and (instance ?INTERVAL TimeInterval) (instance ?POINT TimePoint))
    (=> (equal (EndFn ?INTERVAL) ?POINT)
     (=>
      (and (temporalPart ?OTHERPOINT ?INTERVAL)
           (not (equal ?OTHERPOINT ?POINT)))
      (before ?OTHERPOINT ?POINT)))))))
*/
fof(a9451,axiom,! [POINT,INTERVAL] : (! [OTHERPOINT] : ((s_instance(OTHERPOINT, s_TimePoint) => ((s_instance(INTERVAL, s_TimeInterval) & s_instance(POINT, s_TimePoint)) => ((s_EndFn(INTERVAL) = POINT) => ((s_temporalPart(OTHERPOINT, INTERVAL) & (~ (OTHERPOINT = POINT))) => s_before(OTHERPOINT, POINT)))))))).

/*
(forall (?QUANT2 ?PROC ?QUANT1 ?OBJ)
 (=>
  (and (instance ?OBJ Object) (instance ?QUANT1 PhysicalQuantity)
       (instance ?PROC Process) (instance ?QUANT2 PhysicalQuantity))
  (=>
   (and (resource ?PROC ?OBJ)
        (and (holdsDuring (BeginFn (WhenFn ?PROC))
              (measure ?OBJ ?QUANT1))
             (holdsDuring (EndFn (WhenFn ?PROC))
              (measure ?OBJ ?QUANT2))))
   (greaterThan ?QUANT1 ?QUANT2))))
*/
%% no translation to TPTP available.

/*
(subrelation starts temporalPart)
*/
fof(a9452,axiom,s_subrelation(s_starts_m, s_temporalPart_m)).

/*
(instance starts TemporalRelation)
*/
fof(a9453,axiom,s_instance(s_starts_m, s_TemporalRelation)).

/*
(instance starts TransitiveRelation)
*/
fof(a9454,axiom,s_instance(s_starts_m, s_TransitiveRelation)).

/*
(instance starts IrreflexiveRelation)
*/
fof(a9455,axiom,s_instance(s_starts_m, s_IrreflexiveRelation)).

/*
(instance starts TotalValuedRelation)
*/
fof(a9456,axiom,s_instance(s_starts_m, s_TotalValuedRelation)).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (=>
  (and (instance ?INTERVAL1 TimeInterval)
       (instance ?INTERVAL2 TimeInterval))
  (<=> (starts ?INTERVAL1 ?INTERVAL2)
   (and (equal (BeginFn ?INTERVAL1) (BeginFn ?INTERVAL2))
        (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2))))))
*/
fof(a9457,axiom,! [INTERVAL2,INTERVAL1] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => (s_starts(INTERVAL1, INTERVAL2) <=> ((s_BeginFn(INTERVAL1) = s_BeginFn(INTERVAL2)) & s_before(s_EndFn(INTERVAL1), s_EndFn(INTERVAL2))))))).

/*
(subrelation finishes temporalPart)
*/
fof(a9458,axiom,s_subrelation(s_finishes_m, s_temporalPart_m)).

/*
(instance finishes TemporalRelation)
*/
fof(a9459,axiom,s_instance(s_finishes_m, s_TemporalRelation)).

/*
(instance finishes TransitiveRelation)
*/
fof(a9460,axiom,s_instance(s_finishes_m, s_TransitiveRelation)).

/*
(instance finishes IrreflexiveRelation)
*/
fof(a9461,axiom,s_instance(s_finishes_m, s_IrreflexiveRelation)).

/*
(instance finishes TotalValuedRelation)
*/
fof(a9462,axiom,s_instance(s_finishes_m, s_TotalValuedRelation)).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (=>
  (and (instance ?INTERVAL1 TimeInterval)
       (instance ?INTERVAL2 TimeInterval))
  (<=> (finishes ?INTERVAL1 ?INTERVAL2)
   (and (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1))
        (equal (EndFn ?INTERVAL2) (EndFn ?INTERVAL1))))))
*/
fof(a9463,axiom,! [INTERVAL2,INTERVAL1] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => (s_finishes(INTERVAL1, INTERVAL2) <=> (s_before(s_BeginFn(INTERVAL2), s_BeginFn(INTERVAL1)) & (s_EndFn(INTERVAL2) = s_EndFn(INTERVAL1))))))).

/*
(instance before TemporalRelation)
*/
fof(a9464,axiom,s_instance(s_before_m, s_TemporalRelation)).

/*
(instance before IrreflexiveRelation)
*/
fof(a9465,axiom,s_instance(s_before_m, s_IrreflexiveRelation)).

/*
(instance before TransitiveRelation)
*/
fof(a9466,axiom,s_instance(s_before_m, s_TransitiveRelation)).

/*
(subrelation before beforeOrEqual)
*/
fof(a9467,axiom,s_subrelation(s_before_m, s_beforeOrEqual_m)).

/*
(forall (?OBJ)
 (exists (?TIME1 ?TIME2)
  (forall (?TIME)
   (=> (instance ?TIME TimePoint)
    (and (and (instance ?TIME2 TimePoint) (instance ?TIME1 TimePoint))
         (=> (instance ?OBJ Object)
          (and (instance ?TIME1 TimePoint)
               (and (instance ?TIME2 TimePoint)
                    (and (before ?TIME1 ?TIME2)
                         (=>
                          (and (beforeOrEqual ?TIME1 ?TIME)
                               (beforeOrEqual ?TIME ?TIME2))
                          (time ?OBJ ?TIME)))))))))))
*/
fof(a9468,axiom,! [OBJ] : (? [TIME1,TIME2] : (! [TIME] : ((s_instance(TIME, s_TimePoint) => ((s_instance(TIME2, s_TimePoint) & s_instance(TIME1, s_TimePoint)) & (s_instance(OBJ, s_Object) => (s_instance(TIME1, s_TimePoint) & (s_instance(TIME2, s_TimePoint) & (s_before(TIME1, TIME2) & ((s_beforeOrEqual(TIME1, TIME) & s_beforeOrEqual(TIME, TIME2)) => s_time(OBJ, TIME)))))))))))).

/*
(forall (?OBJ ?PROC)
 (forall (?TIME)
  (=> (instance ?TIME TimePoint)
   (=> (and (instance ?PROC Process) (instance ?OBJ Physical))
    (=> (result ?PROC ?OBJ)
     (=> (before ?TIME (BeginFn (WhenFn ?PROC)))
      (not (time ?OBJ ?TIME))))))))
*/
fof(a9469,axiom,! [OBJ,PROC] : (! [TIME] : ((s_instance(TIME, s_TimePoint) => ((s_instance(PROC, s_Process) & s_instance(OBJ, s_Physical)) => (s_result(PROC, OBJ) => (s_before(TIME, s_BeginFn(s_WhenFn(PROC))) => (~ s_time(OBJ, TIME))))))))).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (before (BeginFn ?INTERVAL) (EndFn ?INTERVAL))))
*/
fof(a9470,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => s_before(s_BeginFn(INTERVAL), s_EndFn(INTERVAL))))).

/*
(instance beforeOrEqual BinaryPredicate)
*/
fof(a9471,axiom,s_instance(s_beforeOrEqual_m, s_BinaryPredicate)).

/*
(instance beforeOrEqual TemporalRelation)
*/
fof(a9472,axiom,s_instance(s_beforeOrEqual_m, s_TemporalRelation)).

/*
(instance beforeOrEqual PartialOrderingRelation)
*/
fof(a9473,axiom,s_instance(s_beforeOrEqual_m, s_PartialOrderingRelation)).

/*
(forall (?POINT2 ?POINT1)
 (=> (and (instance ?POINT1 TimePoint) (instance ?POINT2 TimePoint))
  (=> (beforeOrEqual ?POINT1 ?POINT2)
   (or (before ?POINT1 ?POINT2) (equal ?POINT1 ?POINT2)))))
*/
fof(a9474,axiom,! [POINT2,POINT1] : (((s_instance(POINT1, s_TimePoint) & s_instance(POINT2, s_TimePoint)) => (s_beforeOrEqual(POINT1, POINT2) => (s_before(POINT1, POINT2) | (POINT1 = POINT2)))))).

/*
(instance temporallyBetween TemporalRelation)
*/
fof(a9475,axiom,s_instance(s_temporallyBetween_m, s_TemporalRelation)).

/*
(instance temporallyBetween TernaryPredicate)
*/
fof(a9476,axiom,s_instance(s_temporallyBetween_m, s_TernaryPredicate)).

/*
(instance temporallyBetween PartialValuedRelation)
*/
fof(a9477,axiom,s_instance(s_temporallyBetween_m, s_PartialValuedRelation)).

/*
(subrelation temporallyBetween temporallyBetweenOrEqual)
*/
fof(a9478,axiom,s_subrelation(s_temporallyBetween_m, s_temporallyBetweenOrEqual_m)).

/*
(forall (?POINT1 ?POINT3 ?POINT2)
 (=>
  (and (instance ?POINT2 TimePoint) (instance ?POINT3 TimePoint)
       (instance ?POINT1 TimePoint))
  (<=> (temporallyBetween ?POINT1 ?POINT2 ?POINT3)
   (and (before ?POINT1 ?POINT2) (before ?POINT2 ?POINT3)))))
*/
fof(a9479,axiom,! [POINT1,POINT3,POINT2] : (((s_instance(POINT2, s_TimePoint) & s_instance(POINT3, s_TimePoint) & s_instance(POINT1, s_TimePoint)) => (s_temporallyBetween(POINT1, POINT2, POINT3) <=> (s_before(POINT1, POINT2) & s_before(POINT2, POINT3)))))).

/*
(instance temporallyBetweenOrEqual TemporalRelation)
*/
fof(a9480,axiom,s_instance(s_temporallyBetweenOrEqual_m, s_TemporalRelation)).

/*
(instance temporallyBetweenOrEqual TernaryPredicate)
*/
fof(a9481,axiom,s_instance(s_temporallyBetweenOrEqual_m, s_TernaryPredicate)).

/*
(instance temporallyBetweenOrEqual PartialValuedRelation)
*/
fof(a9482,axiom,s_instance(s_temporallyBetweenOrEqual_m, s_PartialValuedRelation)).

/*
(forall (?POINT1 ?POINT3 ?POINT2)
 (=>
  (and (instance ?POINT2 TimePoint) (instance ?POINT3 TimePoint)
       (instance ?POINT1 TimePoint))
  (<=> (temporallyBetweenOrEqual ?POINT1 ?POINT2 ?POINT3)
   (and (beforeOrEqual ?POINT1 ?POINT2)
        (beforeOrEqual ?POINT2 ?POINT3)))))
*/
fof(a9483,axiom,! [POINT1,POINT3,POINT2] : (((s_instance(POINT2, s_TimePoint) & s_instance(POINT3, s_TimePoint) & s_instance(POINT1, s_TimePoint)) => (s_temporallyBetweenOrEqual(POINT1, POINT2, POINT3) <=> (s_beforeOrEqual(POINT1, POINT2) & s_beforeOrEqual(POINT2, POINT3)))))).

/*
(forall (?TIME ?PHYS)
 (=> (instance ?PHYS Physical)
  (<=> (and (time ?PHYS ?TIME) (instance ?TIME TimePoint))
   (temporallyBetweenOrEqual (BeginFn (WhenFn ?PHYS)) ?TIME
    (EndFn (WhenFn ?PHYS))))))
*/
fof(a9484,axiom,! [TIME,PHYS] : ((s_instance(PHYS, s_Physical) => ((s_time(PHYS, TIME) & s_instance(TIME, s_TimePoint)) <=> s_temporallyBetweenOrEqual(s_BeginFn(s_WhenFn(PHYS)), TIME, s_EndFn(s_WhenFn(PHYS))))))).

/*
(instance overlapsTemporally BinaryPredicate)
*/
fof(a9485,axiom,s_instance(s_overlapsTemporally_m, s_BinaryPredicate)).

/*
(instance overlapsTemporally TemporalRelation)
*/
fof(a9486,axiom,s_instance(s_overlapsTemporally_m, s_TemporalRelation)).

/*
(instance overlapsTemporally ReflexiveRelation)
*/
fof(a9487,axiom,s_instance(s_overlapsTemporally_m, s_ReflexiveRelation)).

/*
(instance overlapsTemporally SymmetricRelation)
*/
fof(a9488,axiom,s_instance(s_overlapsTemporally_m, s_SymmetricRelation)).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (forall (?INTERVAL3)
  (exists (?g6854)
   (=>
    (and (instance ?INTERVAL1 TimeInterval)
         (instance ?INTERVAL2 TimeInterval))
    (and (=> (overlapsTemporally ?INTERVAL1 ?INTERVAL2)
          (and (instance ?g6854 TimeInterval)
               (and (temporalPart ?g6854 ?INTERVAL1)
                    (temporalPart ?g6854 ?INTERVAL2))))
         (=>
          (and (instance ?INTERVAL3 TimeInterval)
               (and (temporalPart ?INTERVAL3 ?INTERVAL1)
                    (temporalPart ?INTERVAL3 ?INTERVAL2)))
          (overlapsTemporally ?INTERVAL1 ?INTERVAL2)))))))
*/
fof(a9489,axiom,! [INTERVAL2,INTERVAL1] : (! [INTERVAL3] : (? [G6854] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => ((s_overlapsTemporally(INTERVAL1, INTERVAL2) => (s_instance(G6854, s_TimeInterval) & (s_temporalPart(G6854, INTERVAL1) & s_temporalPart(G6854, INTERVAL2)))) & ((s_instance(INTERVAL3, s_TimeInterval) & (s_temporalPart(INTERVAL3, INTERVAL1) & s_temporalPart(INTERVAL3, INTERVAL2))) => s_overlapsTemporally(INTERVAL1, INTERVAL2)))))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=>
   (and (instance connected BinaryPredicate)
        (and (instance connected SpatialRelation)
             (connected ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9490,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(s_connected_m, s_BinaryPredicate) & (s_instance(s_connected_m, s_SpatialRelation) & s_connected(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=>
   (and (instance smaller BinaryPredicate)
        (and (instance smaller SpatialRelation) (smaller ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9491,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(s_smaller_m, s_BinaryPredicate) & (s_instance(s_smaller_m, s_SpatialRelation) & s_smaller(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Hole) (instance ?OBJ2 SelfConnectedObject))
  (=>
   (and (instance hole BinaryPredicate)
        (and (instance hole SpatialRelation) (hole ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9492,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Hole) & s_instance(OBJ2, s_SelfConnectedObject)) => ((s_instance(s_hole_m, s_BinaryPredicate) & (s_instance(s_hole_m, s_SpatialRelation) & s_hole(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=>
   (and (instance traverses BinaryPredicate)
        (and (instance traverses SpatialRelation)
             (traverses ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9493,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(s_traverses_m, s_BinaryPredicate) & (s_instance(s_traverses_m, s_SpatialRelation) & s_traverses(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=>
  (and (instance ?OBJ1 Physical) (subclass ?OBJ1 Object)
       (subclass ?OBJ2 Object) (instance ?OBJ2 Physical))
  (=>
   (and (instance initialPart BinaryPredicate)
        (and (instance initialPart SpatialRelation)
             (initialPart ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9494,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Physical) & s_subclass(OBJ1, s_Object) & s_subclass(OBJ2, s_Object) & s_instance(OBJ2, s_Physical)) => ((s_instance(s_initialPart_m, s_BinaryPredicate) & (s_instance(s_initialPart_m, s_SpatialRelation) & s_initialPart(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=>
   (and (instance larger BinaryPredicate)
        (and (instance larger SpatialRelation) (larger ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9495,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(s_larger_m, s_BinaryPredicate) & (s_instance(s_larger_m, s_SpatialRelation) & s_larger(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=>
   (and (instance covers BinaryPredicate)
        (and (instance covers SpatialRelation) (covers ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9496,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(s_covers_m, s_BinaryPredicate) & (s_instance(s_covers_m, s_SpatialRelation) & s_covers(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Physical) (instance ?OBJ2 Object))
  (=>
   (and (instance partlyLocated BinaryPredicate)
        (and (instance partlyLocated SpatialRelation)
             (partlyLocated ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9497,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Physical) & s_instance(OBJ2, s_Object)) => ((s_instance(s_partlyLocated_m, s_BinaryPredicate) & (s_instance(s_partlyLocated_m, s_SpatialRelation) & s_partlyLocated(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=>
  (and (instance ?OBJ1 Physical) (subclass ?OBJ1 Object)
       (subclass ?OBJ2 Object) (instance ?OBJ2 Physical))
  (=>
   (and (instance initiallyContainsPart BinaryPredicate)
        (and (instance initiallyContainsPart SpatialRelation)
             (initiallyContainsPart ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9498,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Physical) & s_subclass(OBJ1, s_Object) & s_subclass(OBJ2, s_Object) & s_instance(OBJ2, s_Physical)) => ((s_instance(s_initiallyContainsPart_m, s_BinaryPredicate) & (s_instance(s_initiallyContainsPart_m, s_SpatialRelation) & s_initiallyContainsPart(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=>
  (and (instance ?OBJ1 Physical) (subclass ?OBJ1 Object)
       (subclass ?OBJ2 Object) (instance ?OBJ2 Physical))
  (=>
   (and (instance typicallyContainsPart BinaryPredicate)
        (and (instance typicallyContainsPart SpatialRelation)
             (typicallyContainsPart ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9499,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Physical) & s_subclass(OBJ1, s_Object) & s_subclass(OBJ2, s_Object) & s_instance(OBJ2, s_Physical)) => ((s_instance(s_typicallyContainsPart_m, s_BinaryPredicate) & (s_instance(s_typicallyContainsPart_m, s_SpatialRelation) & s_typicallyContainsPart(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=>
  (and (instance ?OBJ1 Physical) (subclass ?OBJ1 Object)
       (subclass ?OBJ2 Object) (instance ?OBJ2 Physical))
  (=>
   (and (instance typicalPart BinaryPredicate)
        (and (instance typicalPart SpatialRelation)
             (typicalPart ?OBJ1 ?OBJ2)))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))
*/
fof(a9500,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Physical) & s_subclass(OBJ1, s_Object) & s_subclass(OBJ2, s_Object) & s_instance(OBJ2, s_Physical)) => ((s_instance(s_typicalPart_m, s_BinaryPredicate) & (s_instance(s_typicalPart_m, s_SpatialRelation) & s_typicalPart(OBJ1, OBJ2))) => s_overlapsTemporally(s_WhenFn(OBJ1), s_WhenFn(OBJ2)))))).

/*
(subrelation during temporalPart)
*/
fof(a9501,axiom,s_subrelation(s_during_m, s_temporalPart_m)).

/*
(instance during TransitiveRelation)
*/
fof(a9502,axiom,s_instance(s_during_m, s_TransitiveRelation)).

/*
(instance during IrreflexiveRelation)
*/
fof(a9503,axiom,s_instance(s_during_m, s_IrreflexiveRelation)).

/*
(subrelation during overlapsTemporally)
*/
fof(a9504,axiom,s_subrelation(s_during_m, s_overlapsTemporally_m)).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (=>
  (and (instance ?INTERVAL1 TimeInterval)
       (instance ?INTERVAL2 TimeInterval))
  (=> (during ?INTERVAL1 ?INTERVAL2)
   (and (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2))
        (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1))))))
*/
fof(a9505,axiom,! [INTERVAL2,INTERVAL1] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => (s_during(INTERVAL1, INTERVAL2) => (s_before(s_EndFn(INTERVAL1), s_EndFn(INTERVAL2)) & s_before(s_BeginFn(INTERVAL2), s_BeginFn(INTERVAL1))))))).

/*
(instance meetsTemporally BinaryPredicate)
*/
fof(a9506,axiom,s_instance(s_meetsTemporally_m, s_BinaryPredicate)).

/*
(instance meetsTemporally TemporalRelation)
*/
fof(a9507,axiom,s_instance(s_meetsTemporally_m, s_TemporalRelation)).

/*
(instance meetsTemporally AsymmetricRelation)
*/
fof(a9508,axiom,s_instance(s_meetsTemporally_m, s_AsymmetricRelation)).

/*
(instance meetsTemporally IntransitiveRelation)
*/
fof(a9509,axiom,s_instance(s_meetsTemporally_m, s_IntransitiveRelation)).

/*
(instance meetsTemporally TotalValuedRelation)
*/
fof(a9510,axiom,s_instance(s_meetsTemporally_m, s_TotalValuedRelation)).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (=>
  (and (instance ?INTERVAL1 TimeInterval)
       (instance ?INTERVAL2 TimeInterval))
  (<=> (meetsTemporally ?INTERVAL1 ?INTERVAL2)
   (equal (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2)))))
*/
fof(a9511,axiom,! [INTERVAL2,INTERVAL1] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => (s_meetsTemporally(INTERVAL1, INTERVAL2) <=> (s_EndFn(INTERVAL1) = s_BeginFn(INTERVAL2)))))).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (=>
  (and (instance ?INTERVAL1 TimeInterval)
       (instance ?INTERVAL2 TimeInterval))
  (=>
   (and (equal (BeginFn ?INTERVAL1) (BeginFn ?INTERVAL2))
        (equal (EndFn ?INTERVAL1) (EndFn ?INTERVAL2)))
   (equal ?INTERVAL1 ?INTERVAL2))))
*/
fof(a9512,axiom,! [INTERVAL2,INTERVAL1] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => (((s_BeginFn(INTERVAL1) = s_BeginFn(INTERVAL2)) & (s_EndFn(INTERVAL1) = s_EndFn(INTERVAL2))) => (INTERVAL1 = INTERVAL2))))).

/*
(instance earlier BinaryPredicate)
*/
fof(a9513,axiom,s_instance(s_earlier_m, s_BinaryPredicate)).

/*
(instance earlier TemporalRelation)
*/
fof(a9514,axiom,s_instance(s_earlier_m, s_TemporalRelation)).

/*
(instance earlier TransitiveRelation)
*/
fof(a9515,axiom,s_instance(s_earlier_m, s_TransitiveRelation)).

/*
(instance earlier IrreflexiveRelation)
*/
fof(a9516,axiom,s_instance(s_earlier_m, s_IrreflexiveRelation)).

/*
(instance earlier TotalValuedRelation)
*/
fof(a9517,axiom,s_instance(s_earlier_m, s_TotalValuedRelation)).

/*
(forall (?INTERVAL2 ?INTERVAL1)
 (=>
  (and (instance ?INTERVAL1 TimeInterval)
       (instance ?INTERVAL2 TimeInterval))
  (<=> (earlier ?INTERVAL1 ?INTERVAL2)
   (before (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2)))))
*/
fof(a9518,axiom,! [INTERVAL2,INTERVAL1] : (((s_instance(INTERVAL1, s_TimeInterval) & s_instance(INTERVAL2, s_TimeInterval)) => (s_earlier(INTERVAL1, INTERVAL2) <=> s_before(s_EndFn(INTERVAL1), s_BeginFn(INTERVAL2)))))).

/*
(instance cooccur BinaryPredicate)
*/
fof(a9519,axiom,s_instance(s_cooccur_m, s_BinaryPredicate)).

/*
(instance cooccur TemporalRelation)
*/
fof(a9520,axiom,s_instance(s_cooccur_m, s_TemporalRelation)).

/*
(instance EquivalenceRelation SetOrClass)
*/
fof(a9521,axiom,s_instance(s_EquivalenceRelation, s_SetOrClass)).

/*
(instance cooccur EquivalenceRelation)
*/
fof(a9522,axiom,s_instance(s_cooccur_m, s_EquivalenceRelation)).

/*
(forall (?PHYS2 ?PHYS1)
 (=> (and (instance ?PHYS1 Physical) (instance ?PHYS2 Physical))
  (<=> (cooccur ?PHYS1 ?PHYS2)
   (equal (WhenFn ?PHYS1) (WhenFn ?PHYS2)))))
*/
fof(a9523,axiom,! [PHYS2,PHYS1] : (((s_instance(PHYS1, s_Physical) & s_instance(PHYS2, s_Physical)) => (s_cooccur(PHYS1, PHYS2) <=> (s_WhenFn(PHYS1) = s_WhenFn(PHYS2)))))).

/*
(instance TimeIntervalFn BinaryFunction)
*/
fof(a9524,axiom,s_instance(s_TimeIntervalFn_m, s_BinaryFunction)).

/*
(instance TimeIntervalFn TemporalRelation)
*/
fof(a9525,axiom,s_instance(s_TimeIntervalFn_m, s_TemporalRelation)).

/*
(instance TimeIntervalFn PartialValuedRelation)
*/
fof(a9526,axiom,s_instance(s_TimeIntervalFn_m, s_PartialValuedRelation)).

/*
(range TimeIntervalFn TimeInterval)
*/
fof(a9527,axiom,s_range(s_TimeIntervalFn_m, s_TimeInterval)).

/*
(forall (?INTERVAL ?POINT2 ?POINT1)
 (=>
  (and (instance ?POINT1 TimePoint)
       (and (instance ?POINT2 TimePoint)
            (and (instance ?INTERVAL TimeInterval)
                 (equal (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL))))
  (and (equal (BeginFn ?INTERVAL) ?POINT1)
       (equal (EndFn ?INTERVAL) ?POINT2))))
*/
fof(a9528,axiom,! [INTERVAL,POINT2,POINT1] : (((s_instance(POINT1, s_TimePoint) & (s_instance(POINT2, s_TimePoint) & (s_instance(INTERVAL, s_TimeInterval) & (s_TimeIntervalFn(POINT1, POINT2) = INTERVAL)))) => ((s_BeginFn(INTERVAL) = POINT1) & (s_EndFn(INTERVAL) = POINT2))))).

/*
(forall (?INTERVAL ?POINT2 ?POINT1)
 (forall (?POINT)
  (=> (instance ?POINT TimePoint)
   (=>
    (and (instance ?POINT1 TimePoint)
         (and (instance ?POINT2 TimePoint)
              (and (instance ?INTERVAL TimeInterval)
                   (equal (TimeIntervalFn ?POINT1 ?POINT2)
                          ?INTERVAL))))
    (<=> (temporallyBetweenOrEqual ?POINT1 ?POINT ?POINT2)
     (temporalPart ?POINT ?INTERVAL))))))
*/
fof(a9529,axiom,! [INTERVAL,POINT2,POINT1] : (! [POINT] : ((s_instance(POINT, s_TimePoint) => ((s_instance(POINT1, s_TimePoint) & (s_instance(POINT2, s_TimePoint) & (s_instance(INTERVAL, s_TimeInterval) & (s_TimeIntervalFn(POINT1, POINT2) = INTERVAL)))) => (s_temporallyBetweenOrEqual(POINT1, POINT, POINT2) <=> s_temporalPart(POINT, INTERVAL))))))).

/*
(instance RecurrentTimeIntervalFn TemporalRelation)
*/
fof(a9530,axiom,s_instance(s_RecurrentTimeIntervalFn_m, s_TemporalRelation)).

/*
(instance RecurrentTimeIntervalFn BinaryFunction)
*/
fof(a9531,axiom,s_instance(s_RecurrentTimeIntervalFn_m, s_BinaryFunction)).

/*
(instance RecurrentTimeIntervalFn PartialValuedRelation)
*/
fof(a9532,axiom,s_instance(s_RecurrentTimeIntervalFn_m, s_PartialValuedRelation)).

/*
(domainSubclass RecurrentTimeIntervalFn 1 TimeInterval)
*/
fof(a9533,axiom,s_domainSubclass(s_RecurrentTimeIntervalFn_m, 1, s_TimeInterval)).

/*
(domainSubclass RecurrentTimeIntervalFn 2 TimeInterval)
*/
fof(a9534,axiom,s_domainSubclass(s_RecurrentTimeIntervalFn_m, 2, s_TimeInterval)).

/*
(rangeSubclass RecurrentTimeIntervalFn TimeInterval)
*/
fof(a9535,axiom,s_rangeSubclass(s_RecurrentTimeIntervalFn_m, s_TimeInterval)).

/*
(forall (?INTERVAL ?TIMECLASS2 ?TIMECLASS1)
 (exists (?TIME1 ?TIME2)
  (and (and (instance ?TIME2 TimeInterval)
            (instance ?TIME1 TimeInterval))
       (=>
        (and (instance ?TIMECLASS1 SetOrClass)
             (subclass ?TIMECLASS1 TimeInterval)
             (instance ?INTERVAL TimeInterval)
             (subclass ?TIMECLASS2 TimeInterval)
             (instance ?TIMECLASS2 SetOrClass))
        (=>
         (instance ?INTERVAL
          (RecurrentTimeIntervalFn ?TIMECLASS1 ?TIMECLASS2))
         (and (instance ?TIME1 ?TIMECLASS1)
              (and (instance ?TIME2 ?TIMECLASS2)
                   (and (starts ?TIME1 ?INTERVAL)
                        (finishes ?TIME2 ?INTERVAL)))))))))
*/
fof(a9536,axiom,! [INTERVAL,TIMECLASS2,TIMECLASS1] : (? [TIME1,TIME2] : (((s_instance(TIME2, s_TimeInterval) & s_instance(TIME1, s_TimeInterval)) & ((s_instance(TIMECLASS1, s_SetOrClass) & s_subclass(TIMECLASS1, s_TimeInterval) & s_instance(INTERVAL, s_TimeInterval) & s_subclass(TIMECLASS2, s_TimeInterval) & s_instance(TIMECLASS2, s_SetOrClass)) => (s_instance(INTERVAL, s_RecurrentTimeIntervalFn(TIMECLASS1, TIMECLASS2)) => (s_instance(TIME1, TIMECLASS1) & (s_instance(TIME2, TIMECLASS2) & (s_starts(TIME1, INTERVAL) & s_finishes(TIME2, INTERVAL)))))))))).

/*
(instance WhenFn TemporalRelation)
*/
fof(a9537,axiom,s_instance(s_WhenFn_m, s_TemporalRelation)).

/*
(instance WhenFn UnaryFunction)
*/
fof(a9538,axiom,s_instance(s_WhenFn_m, s_UnaryFunction)).

/*
(instance WhenFn TotalValuedRelation)
*/
fof(a9539,axiom,s_instance(s_WhenFn_m, s_TotalValuedRelation)).

/*
(range WhenFn TimeInterval)
*/
fof(a9540,axiom,s_range(s_WhenFn_m, s_TimeInterval)).

/*
(instance PastFn TemporalRelation)
*/
fof(a9541,axiom,s_instance(s_PastFn_m, s_TemporalRelation)).

/*
(instance PastFn UnaryFunction)
*/
fof(a9542,axiom,s_instance(s_PastFn_m, s_UnaryFunction)).

/*
(instance PastFn TotalValuedRelation)
*/
fof(a9543,axiom,s_instance(s_PastFn_m, s_TotalValuedRelation)).

/*
(range PastFn TimeInterval)
*/
fof(a9544,axiom,s_range(s_PastFn_m, s_TimeInterval)).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (meetsTemporally (PastFn ?INTERVAL) ?INTERVAL)))
*/
fof(a9545,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => s_meetsTemporally(s_PastFn(INTERVAL), INTERVAL)))).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (equal (PastFn ?INTERVAL)
         (TimeIntervalFn NegativeInfinity (BeginFn ?INTERVAL)))))
*/
fof(a9546,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => (s_PastFn(INTERVAL) = s_TimeIntervalFn(s_NegativeInfinity, s_BeginFn(INTERVAL)))))).

/*
(instance ImmediatePastFn TemporalRelation)
*/
fof(a9547,axiom,s_instance(s_ImmediatePastFn_m, s_TemporalRelation)).

/*
(instance ImmediatePastFn UnaryFunction)
*/
fof(a9548,axiom,s_instance(s_ImmediatePastFn_m, s_UnaryFunction)).

/*
(instance ImmediatePastFn TotalValuedRelation)
*/
fof(a9549,axiom,s_instance(s_ImmediatePastFn_m, s_TotalValuedRelation)).

/*
(range ImmediatePastFn TimeInterval)
*/
fof(a9550,axiom,s_range(s_ImmediatePastFn_m, s_TimeInterval)).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (finishes (ImmediatePastFn ?INTERVAL) (PastFn ?INTERVAL))))
*/
fof(a9551,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => s_finishes(s_ImmediatePastFn(INTERVAL), s_PastFn(INTERVAL))))).

/*
(instance FutureFn TemporalRelation)
*/
fof(a9552,axiom,s_instance(s_FutureFn_m, s_TemporalRelation)).

/*
(instance FutureFn UnaryFunction)
*/
fof(a9553,axiom,s_instance(s_FutureFn_m, s_UnaryFunction)).

/*
(instance FutureFn TotalValuedRelation)
*/
fof(a9554,axiom,s_instance(s_FutureFn_m, s_TotalValuedRelation)).

/*
(range FutureFn TimeInterval)
*/
fof(a9555,axiom,s_range(s_FutureFn_m, s_TimeInterval)).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (meetsTemporally ?INTERVAL (FutureFn ?INTERVAL))))
*/
fof(a9556,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => s_meetsTemporally(INTERVAL, s_FutureFn(INTERVAL))))).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (equal (FutureFn ?INTERVAL)
         (TimeIntervalFn (EndFn ?INTERVAL) PositiveInfinity))))
*/
fof(a9557,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => (s_FutureFn(INTERVAL) = s_TimeIntervalFn(s_EndFn(INTERVAL), s_PositiveInfinity))))).

/*
(instance ImmediateFutureFn TemporalRelation)
*/
fof(a9558,axiom,s_instance(s_ImmediateFutureFn_m, s_TemporalRelation)).

/*
(instance ImmediateFutureFn UnaryFunction)
*/
fof(a9559,axiom,s_instance(s_ImmediateFutureFn_m, s_UnaryFunction)).

/*
(instance ImmediateFutureFn TotalValuedRelation)
*/
fof(a9560,axiom,s_instance(s_ImmediateFutureFn_m, s_TotalValuedRelation)).

/*
(range ImmediateFutureFn TimeInterval)
*/
fof(a9561,axiom,s_range(s_ImmediateFutureFn_m, s_TimeInterval)).

/*
(forall (?INTERVAL)
 (=> (instance ?INTERVAL TimeInterval)
  (starts (ImmediateFutureFn ?INTERVAL) (FutureFn ?INTERVAL))))
*/
fof(a9562,axiom,! [INTERVAL] : ((s_instance(INTERVAL, s_TimeInterval) => s_starts(s_ImmediateFutureFn(INTERVAL), s_FutureFn(INTERVAL))))).

/*
(instance date BinaryPredicate)
*/
fof(a9563,axiom,s_instance(s_date_m, s_BinaryPredicate)).

/*
(instance date SingleValuedRelation)
*/
fof(a9564,axiom,s_instance(s_date_m, s_SingleValuedRelation)).

/*
(instance date AsymmetricRelation)
*/
fof(a9565,axiom,s_instance(s_date_m, s_AsymmetricRelation)).

/*
(subrelation date time)
*/
fof(a9566,axiom,s_subrelation(s_date_m, s_time_m)).

/*
(instance YearFn TemporalRelation)
*/
fof(a9567,axiom,s_instance(s_YearFn_m, s_TemporalRelation)).

/*
(instance YearFn UnaryFunction)
*/
fof(a9568,axiom,s_instance(s_YearFn_m, s_UnaryFunction)).

/*
(instance YearFn TotalValuedRelation)
*/
fof(a9569,axiom,s_instance(s_YearFn_m, s_TotalValuedRelation)).

/*
(rangeSubclass YearFn Year)
*/
fof(a9570,axiom,s_rangeSubclass(s_YearFn_m, s_Year)).

/*
(instance MonthFn TemporalRelation)
*/
fof(a9571,axiom,s_instance(s_MonthFn_m, s_TemporalRelation)).

/*
(instance MonthFn BinaryFunction)
*/
fof(a9572,axiom,s_instance(s_MonthFn_m, s_BinaryFunction)).

/*
(instance MonthFn PartialValuedRelation)
*/
fof(a9573,axiom,s_instance(s_MonthFn_m, s_PartialValuedRelation)).

/*
(domainSubclass MonthFn 1 Month)
*/
fof(a9574,axiom,s_domainSubclass(s_MonthFn_m, 1, s_Month)).

/*
(domainSubclass MonthFn 2 Year)
*/
fof(a9575,axiom,s_domainSubclass(s_MonthFn_m, 2, s_Year)).

/*
(rangeSubclass MonthFn Month)
*/
fof(a9576,axiom,s_rangeSubclass(s_MonthFn_m, s_Month)).

/*
(instance DayFn TemporalRelation)
*/
fof(a9577,axiom,s_instance(s_DayFn_m, s_TemporalRelation)).

/*
(instance DayFn BinaryFunction)
*/
fof(a9578,axiom,s_instance(s_DayFn_m, s_BinaryFunction)).

/*
(instance DayFn PartialValuedRelation)
*/
fof(a9579,axiom,s_instance(s_DayFn_m, s_PartialValuedRelation)).

/*
(domainSubclass DayFn 2 Month)
*/
fof(a9580,axiom,s_domainSubclass(s_DayFn_m, 2, s_Month)).

/*
(rangeSubclass DayFn Day)
*/
fof(a9581,axiom,s_rangeSubclass(s_DayFn_m, s_Day)).

/*
(forall (?DAY ?MONTH ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveInteger) (subclass ?MONTH Month)
       (instance ?DAY Entity))
  (=> (instance ?DAY (DayFn ?NUMBER ?MONTH))
   (lessThanOrEqualTo ?NUMBER 31))))
*/
fof(a9582,axiom,! [DAY,MONTH,NUMBER] : (((s_instance(NUMBER, s_PositiveInteger) & s_subclass(MONTH, s_Month) & s_instance(DAY, s_Entity)) => (s_instance(DAY, s_DayFn(NUMBER, MONTH)) => lesseq(NUMBER, 31))))).

/*
(forall (?DAY1 ?NUMBER1 ?DAY2 ?MONTH ?NUMBER2)
 (=>
  (and (instance ?NUMBER2 PositiveInteger) (subclass ?MONTH Month)
       (instance ?DAY2 TimeInterval)
       (instance ?NUMBER1 PositiveInteger)
       (instance ?DAY1 TimeInterval))
  (=>
   (and (instance ?DAY1 (DayFn ?NUMBER1 ?MONTH))
        (and (instance ?DAY2 (DayFn ?NUMBER2 ?MONTH))
             (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)))
   (meetsTemporally ?DAY1 ?DAY2))))
*/
fof(a9583,axiom,! [DAY1,NUMBER1,DAY2,MONTH,NUMBER2] : (((s_instance(NUMBER2, s_PositiveInteger) & s_subclass(MONTH, s_Month) & s_instance(DAY2, s_TimeInterval) & s_instance(NUMBER1, s_PositiveInteger) & s_instance(DAY1, s_TimeInterval)) => ((s_instance(DAY1, s_DayFn(NUMBER1, MONTH)) & (s_instance(DAY2, s_DayFn(NUMBER2, MONTH)) & (s_SubtractionFn(NUMBER2, NUMBER1) = 1))) => s_meetsTemporally(DAY1, DAY2))))).

/*
(instance HourFn TemporalRelation)
*/
fof(a9584,axiom,s_instance(s_HourFn_m, s_TemporalRelation)).

/*
(instance HourFn BinaryFunction)
*/
fof(a9585,axiom,s_instance(s_HourFn_m, s_BinaryFunction)).

/*
(instance HourFn PartialValuedRelation)
*/
fof(a9586,axiom,s_instance(s_HourFn_m, s_PartialValuedRelation)).

/*
(domainSubclass HourFn 2 Day)
*/
fof(a9587,axiom,s_domainSubclass(s_HourFn_m, 2, s_Day)).

/*
(rangeSubclass HourFn Hour)
*/
fof(a9588,axiom,s_rangeSubclass(s_HourFn_m, s_Hour)).

/*
(forall (?HOUR ?DAY ?NUMBER)
 (=>
  (and (instance ?NUMBER NonnegativeInteger) (subclass ?DAY Day)
       (instance ?HOUR Entity))
  (=> (instance ?HOUR (HourFn ?NUMBER ?DAY)) (lessThan ?NUMBER 24))))
*/
fof(a9589,axiom,! [HOUR,DAY,NUMBER] : (((s_instance(NUMBER, s_NonnegativeInteger) & s_subclass(DAY, s_Day) & s_instance(HOUR, s_Entity)) => (s_instance(HOUR, s_HourFn(NUMBER, DAY)) => less(NUMBER, 24))))).

/*
(forall (?HOUR1 ?NUMBER1 ?HOUR2 ?DAY ?NUMBER2)
 (=>
  (and (instance ?NUMBER2 NonnegativeInteger) (subclass ?DAY Day)
       (instance ?HOUR2 TimeInterval)
       (instance ?NUMBER1 NonnegativeInteger)
       (instance ?HOUR1 TimeInterval))
  (=>
   (and (instance ?HOUR1 (HourFn ?NUMBER1 ?DAY))
        (and (instance ?HOUR2 (HourFn ?NUMBER2 ?DAY))
             (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)))
   (meetsTemporally ?HOUR1 ?HOUR2))))
*/
fof(a9590,axiom,! [HOUR1,NUMBER1,HOUR2,DAY,NUMBER2] : (((s_instance(NUMBER2, s_NonnegativeInteger) & s_subclass(DAY, s_Day) & s_instance(HOUR2, s_TimeInterval) & s_instance(NUMBER1, s_NonnegativeInteger) & s_instance(HOUR1, s_TimeInterval)) => ((s_instance(HOUR1, s_HourFn(NUMBER1, DAY)) & (s_instance(HOUR2, s_HourFn(NUMBER2, DAY)) & (s_SubtractionFn(NUMBER2, NUMBER1) = 1))) => s_meetsTemporally(HOUR1, HOUR2))))).

/*
(instance MinuteFn TemporalRelation)
*/
fof(a9591,axiom,s_instance(s_MinuteFn_m, s_TemporalRelation)).

/*
(instance MinuteFn BinaryFunction)
*/
fof(a9592,axiom,s_instance(s_MinuteFn_m, s_BinaryFunction)).

/*
(instance MinuteFn PartialValuedRelation)
*/
fof(a9593,axiom,s_instance(s_MinuteFn_m, s_PartialValuedRelation)).

/*
(domainSubclass MinuteFn 2 Hour)
*/
fof(a9594,axiom,s_domainSubclass(s_MinuteFn_m, 2, s_Hour)).

/*
(rangeSubclass MinuteFn Minute)
*/
fof(a9595,axiom,s_rangeSubclass(s_MinuteFn_m, s_Minute)).

/*
(forall (?MINUTE ?HOUR ?NUMBER)
 (=>
  (and (instance ?NUMBER NonnegativeInteger) (subclass ?HOUR Hour)
       (instance ?MINUTE Entity))
  (=> (instance ?MINUTE (MinuteFn ?NUMBER ?HOUR))
   (lessThan ?NUMBER 60))))
*/
fof(a9596,axiom,! [MINUTE,HOUR,NUMBER] : (((s_instance(NUMBER, s_NonnegativeInteger) & s_subclass(HOUR, s_Hour) & s_instance(MINUTE, s_Entity)) => (s_instance(MINUTE, s_MinuteFn(NUMBER, HOUR)) => less(NUMBER, 60))))).

/*
(forall (?MINUTE1 ?NUMBER1 ?MINUTE2 ?HOUR ?NUMBER2)
 (=>
  (and (instance ?NUMBER2 NonnegativeInteger) (subclass ?HOUR Hour)
       (instance ?MINUTE2 TimeInterval)
       (instance ?NUMBER1 NonnegativeInteger)
       (instance ?MINUTE1 TimeInterval))
  (=>
   (and (instance ?MINUTE1 (MinuteFn ?NUMBER1 ?HOUR))
        (and (instance ?MINUTE2 (MinuteFn ?NUMBER2 ?HOUR))
             (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)))
   (meetsTemporally ?MINUTE1 ?MINUTE2))))
*/
fof(a9597,axiom,! [MINUTE1,NUMBER1,MINUTE2,HOUR,NUMBER2] : (((s_instance(NUMBER2, s_NonnegativeInteger) & s_subclass(HOUR, s_Hour) & s_instance(MINUTE2, s_TimeInterval) & s_instance(NUMBER1, s_NonnegativeInteger) & s_instance(MINUTE1, s_TimeInterval)) => ((s_instance(MINUTE1, s_MinuteFn(NUMBER1, HOUR)) & (s_instance(MINUTE2, s_MinuteFn(NUMBER2, HOUR)) & (s_SubtractionFn(NUMBER2, NUMBER1) = 1))) => s_meetsTemporally(MINUTE1, MINUTE2))))).

/*
(instance SecondFn TemporalRelation)
*/
fof(a9598,axiom,s_instance(s_SecondFn_m, s_TemporalRelation)).

/*
(instance SecondFn BinaryFunction)
*/
fof(a9599,axiom,s_instance(s_SecondFn_m, s_BinaryFunction)).

/*
(instance SecondFn PartialValuedRelation)
*/
fof(a9600,axiom,s_instance(s_SecondFn_m, s_PartialValuedRelation)).

/*
(domainSubclass SecondFn 2 Minute)
*/
fof(a9601,axiom,s_domainSubclass(s_SecondFn_m, 2, s_Minute)).

/*
(rangeSubclass SecondFn Second)
*/
fof(a9602,axiom,s_rangeSubclass(s_SecondFn_m, s_Second)).

/*
(forall (?SECOND ?MINUTE ?NUMBER)
 (=>
  (and (instance ?NUMBER PositiveRealNumber) (subclass ?MINUTE Minute)
       (instance ?SECOND Entity))
  (=> (instance ?SECOND (SecondFn ?NUMBER ?MINUTE))
   (lessThan ?NUMBER 60))))
*/
fof(a9603,axiom,! [SECOND,MINUTE,NUMBER] : (((s_instance(NUMBER, s_PositiveRealNumber) & s_subclass(MINUTE, s_Minute) & s_instance(SECOND, s_Entity)) => (s_instance(SECOND, s_SecondFn(NUMBER, MINUTE)) => less(NUMBER, 60))))).

/*
(forall (?SECOND1 ?NUMBER1 ?SECOND2 ?MINUTE ?NUMBER2)
 (=>
  (and (instance ?NUMBER2 PositiveRealNumber) (subclass ?MINUTE Minute)
       (instance ?SECOND2 TimeInterval)
       (instance ?NUMBER1 PositiveRealNumber)
       (instance ?SECOND1 TimeInterval))
  (=>
   (and (instance ?SECOND1 (SecondFn ?NUMBER1 ?MINUTE))
        (and (instance ?SECOND2 (SecondFn ?NUMBER2 ?MINUTE))
             (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)))
   (meetsTemporally ?SECOND1 ?SECOND2))))
*/
fof(a9604,axiom,! [SECOND1,NUMBER1,SECOND2,MINUTE,NUMBER2] : (((s_instance(NUMBER2, s_PositiveRealNumber) & s_subclass(MINUTE, s_Minute) & s_instance(SECOND2, s_TimeInterval) & s_instance(NUMBER1, s_PositiveRealNumber) & s_instance(SECOND1, s_TimeInterval)) => ((s_instance(SECOND1, s_SecondFn(NUMBER1, MINUTE)) & (s_instance(SECOND2, s_SecondFn(NUMBER2, MINUTE)) & (s_SubtractionFn(NUMBER2, NUMBER1) = 1))) => s_meetsTemporally(SECOND1, SECOND2))))).

/*
(subclass Year TimeInterval)
*/
fof(a9605,axiom,s_subclass(s_Year, s_TimeInterval)).

/*
(forall (?YEAR)
 (=> (instance ?YEAR Year) (duration ?YEAR (MeasureFn 1 YearDuration))))
*/
fof(a9606,axiom,! [YEAR] : ((s_instance(YEAR, s_Year) => s_duration(YEAR, s_MeasureFn(1, s_YearDuration))))).

/*
(forall (?YEAR1 ?YEAR2)
 (=>
  (and (instance ?YEAR1 Year)
       (and (instance ?YEAR2 Year)
            (equal (SubtractionFn ?YEAR2 ?YEAR1) 1)))
  (meetsTemporally ?YEAR1 ?YEAR2)))
*/
fof(a9607,axiom,! [YEAR1,YEAR2] : (((s_instance(YEAR1, s_Year) & (s_instance(YEAR2, s_Year) & (s_SubtractionFn(YEAR2, YEAR1) = 1))) => s_meetsTemporally(YEAR1, YEAR2)))).

/*
(instance LeapYear SetOrClass)
*/
fof(a9608,axiom,s_instance(s_LeapYear, s_SetOrClass)).

/*
(instance Year SetOrClass)
*/
fof(a9609,axiom,s_instance(s_Year, s_SetOrClass)).

/*
(subclass LeapYear Year)
*/
fof(a9610,axiom,s_subclass(s_LeapYear, s_Year)).

/*
(forall (?NUMBER ?LEAP)
 (=> (instance ?NUMBER Integer)
  (=> (and (instance ?LEAP LeapYear) (instance ?LEAP (YearFn ?NUMBER)))
   (or (and (equal (RemainderFn ?NUMBER 4) 0)
            (not (equal (RemainderFn ?NUMBER 100) 0)))
       (equal (RemainderFn ?NUMBER 400) 0)))))
*/
fof(a9611,axiom,! [NUMBER,LEAP] : ((s_instance(NUMBER, s_Integer) => ((s_instance(LEAP, s_LeapYear) & s_instance(LEAP, s_YearFn(NUMBER))) => (((s_RemainderFn(NUMBER, 4) = 0) & (~ (s_RemainderFn(NUMBER, 100) = 0))) | (s_RemainderFn(NUMBER, 400) = 0)))))).

/*
(subclass Month TimeInterval)
*/
fof(a9612,axiom,s_subclass(s_Month, s_TimeInterval)).

/*
(instance January SetOrClass)
*/
fof(a9613,axiom,s_instance(s_January, s_SetOrClass)).

/*
(subclass January Month)
*/
fof(a9614,axiom,s_subclass(s_January, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH January)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9615,axiom,! [MONTH] : ((s_instance(MONTH, s_January) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn January ?YEAR))
        (instance ?MONTH2 (MonthFn February ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9616,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_January, YEAR)) & s_instance(MONTH2, s_MonthFn(s_February, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance February SetOrClass)
*/
fof(a9617,axiom,s_instance(s_February, s_SetOrClass)).

/*
(subclass February Month)
*/
fof(a9618,axiom,s_subclass(s_February, s_Month)).

/*
(forall (?Y ?YEAR ?MONTH)
 (=>
  (and (instance ?MONTH TimeInterval) (subclass ?YEAR Year)
       (instance ?YEAR SetOrClass))
  (=>
   (and (instance ?MONTH (MonthFn February ?YEAR))
        (and (instance ?Y ?YEAR) (not (instance ?Y LeapYear))))
   (duration ?MONTH (MeasureFn 28 DayDuration)))))
*/
fof(a9619,axiom,! [Y,YEAR,MONTH] : (((s_instance(MONTH, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(YEAR, s_SetOrClass)) => ((s_instance(MONTH, s_MonthFn(s_February, YEAR)) & (s_instance(Y, YEAR) & (~ s_instance(Y, s_LeapYear)))) => s_duration(MONTH, s_MeasureFn(28, s_DayDuration)))))).

/*
(forall (?Y ?YEAR ?MONTH)
 (=>
  (and (instance ?MONTH TimeInterval) (subclass ?YEAR Year)
       (instance ?YEAR SetOrClass))
  (=>
   (and (instance ?MONTH (MonthFn February ?YEAR))
        (and (instance ?Y ?YEAR) (instance ?Y LeapYear)))
   (duration ?MONTH (MeasureFn 29 DayDuration)))))
*/
fof(a9620,axiom,! [Y,YEAR,MONTH] : (((s_instance(MONTH, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(YEAR, s_SetOrClass)) => ((s_instance(MONTH, s_MonthFn(s_February, YEAR)) & (s_instance(Y, YEAR) & s_instance(Y, s_LeapYear))) => s_duration(MONTH, s_MeasureFn(29, s_DayDuration)))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn February ?YEAR))
        (instance ?MONTH2 (MonthFn March ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9621,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_February, YEAR)) & s_instance(MONTH2, s_MonthFn(s_March, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance March SetOrClass)
*/
fof(a9622,axiom,s_instance(s_March, s_SetOrClass)).

/*
(subclass March Month)
*/
fof(a9623,axiom,s_subclass(s_March, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH March)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9624,axiom,! [MONTH] : ((s_instance(MONTH, s_March) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn March ?YEAR))
        (instance ?MONTH2 (MonthFn April ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9625,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_March, YEAR)) & s_instance(MONTH2, s_MonthFn(s_April, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance April SetOrClass)
*/
fof(a9626,axiom,s_instance(s_April, s_SetOrClass)).

/*
(subclass April Month)
*/
fof(a9627,axiom,s_subclass(s_April, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH April)
  (duration ?MONTH (MeasureFn 30 DayDuration))))
*/
fof(a9628,axiom,! [MONTH] : ((s_instance(MONTH, s_April) => s_duration(MONTH, s_MeasureFn(30, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (equal ?MONTH1 (MonthFn April ?YEAR))
        (equal ?MONTH2 (MonthFn May ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9629,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => (((MONTH1 = s_MonthFn(s_April, YEAR)) & (MONTH2 = s_MonthFn(s_May, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance May SetOrClass)
*/
fof(a9630,axiom,s_instance(s_May, s_SetOrClass)).

/*
(subclass May Month)
*/
fof(a9631,axiom,s_subclass(s_May, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH May)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9632,axiom,! [MONTH] : ((s_instance(MONTH, s_May) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn May ?YEAR))
        (instance ?MONTH2 (MonthFn June ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9633,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_May, YEAR)) & s_instance(MONTH2, s_MonthFn(s_June, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance June SetOrClass)
*/
fof(a9634,axiom,s_instance(s_June, s_SetOrClass)).

/*
(subclass June Month)
*/
fof(a9635,axiom,s_subclass(s_June, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH June)
  (duration ?MONTH (MeasureFn 30 DayDuration))))
*/
fof(a9636,axiom,! [MONTH] : ((s_instance(MONTH, s_June) => s_duration(MONTH, s_MeasureFn(30, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn June ?YEAR))
        (instance ?MONTH2 (MonthFn July ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9637,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_June, YEAR)) & s_instance(MONTH2, s_MonthFn(s_July, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance July SetOrClass)
*/
fof(a9638,axiom,s_instance(s_July, s_SetOrClass)).

/*
(subclass July Month)
*/
fof(a9639,axiom,s_subclass(s_July, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH July)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9640,axiom,! [MONTH] : ((s_instance(MONTH, s_July) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn July ?YEAR))
        (instance ?MONTH2 (MonthFn August ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9641,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_July, YEAR)) & s_instance(MONTH2, s_MonthFn(s_August, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance August SetOrClass)
*/
fof(a9642,axiom,s_instance(s_August, s_SetOrClass)).

/*
(subclass August Month)
*/
fof(a9643,axiom,s_subclass(s_August, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH August)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9644,axiom,! [MONTH] : ((s_instance(MONTH, s_August) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn August ?YEAR))
        (instance ?MONTH2 (MonthFn September ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9645,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_August, YEAR)) & s_instance(MONTH2, s_MonthFn(s_September, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance September SetOrClass)
*/
fof(a9646,axiom,s_instance(s_September, s_SetOrClass)).

/*
(subclass September Month)
*/
fof(a9647,axiom,s_subclass(s_September, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH September)
  (duration ?MONTH (MeasureFn 30 DayDuration))))
*/
fof(a9648,axiom,! [MONTH] : ((s_instance(MONTH, s_September) => s_duration(MONTH, s_MeasureFn(30, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn September ?YEAR))
        (instance ?MONTH2 (MonthFn October ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9649,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_September, YEAR)) & s_instance(MONTH2, s_MonthFn(s_October, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance October SetOrClass)
*/
fof(a9650,axiom,s_instance(s_October, s_SetOrClass)).

/*
(subclass October Month)
*/
fof(a9651,axiom,s_subclass(s_October, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH October)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9652,axiom,! [MONTH] : ((s_instance(MONTH, s_October) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn October ?YEAR))
        (instance ?MONTH2 (MonthFn November ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9653,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_October, YEAR)) & s_instance(MONTH2, s_MonthFn(s_November, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance November SetOrClass)
*/
fof(a9654,axiom,s_instance(s_November, s_SetOrClass)).

/*
(subclass November Month)
*/
fof(a9655,axiom,s_subclass(s_November, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH November)
  (duration ?MONTH (MeasureFn 30 DayDuration))))
*/
fof(a9656,axiom,! [MONTH] : ((s_instance(MONTH, s_November) => s_duration(MONTH, s_MeasureFn(30, s_DayDuration))))).

/*
(forall (?MONTH2 ?YEAR ?MONTH1)
 (=>
  (and (instance ?MONTH1 TimeInterval) (subclass ?YEAR Year)
       (instance ?MONTH2 TimeInterval))
  (=>
   (and (instance ?MONTH1 (MonthFn November ?YEAR))
        (instance ?MONTH2 (MonthFn December ?YEAR)))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9657,axiom,! [MONTH2,YEAR,MONTH1] : (((s_instance(MONTH1, s_TimeInterval) & s_subclass(YEAR, s_Year) & s_instance(MONTH2, s_TimeInterval)) => ((s_instance(MONTH1, s_MonthFn(s_November, YEAR)) & s_instance(MONTH2, s_MonthFn(s_December, YEAR))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(instance December SetOrClass)
*/
fof(a9658,axiom,s_instance(s_December, s_SetOrClass)).

/*
(instance Month SetOrClass)
*/
fof(a9659,axiom,s_instance(s_Month, s_SetOrClass)).

/*
(subclass December Month)
*/
fof(a9660,axiom,s_subclass(s_December, s_Month)).

/*
(forall (?MONTH)
 (=> (instance ?MONTH December)
  (duration ?MONTH (MeasureFn 31 DayDuration))))
*/
fof(a9661,axiom,! [MONTH] : ((s_instance(MONTH, s_December) => s_duration(MONTH, s_MeasureFn(31, s_DayDuration))))).

/*
(forall (?MONTH1 ?MONTH2 ?YEAR1 ?Y1 ?YEAR2 ?Y2)
 (=>
  (and (instance ?MONTH1 TimeInterval) (instance ?MONTH2 TimeInterval)
       (instance ?YEAR1 SetOrClass) (subclass ?YEAR1 Year)
       (subclass ?YEAR2 Year) (instance ?YEAR2 SetOrClass))
  (=>
   (and (instance ?MONTH1 (MonthFn December ?YEAR1))
        (and (instance ?MONTH2 (MonthFn January ?YEAR2))
             (and (instance ?Y1 ?YEAR1)
                  (and (instance ?Y2 ?YEAR2)
                       (meetsTemporally ?Y1 ?Y2)))))
   (meetsTemporally ?MONTH1 ?MONTH2))))
*/
fof(a9662,axiom,! [MONTH1,MONTH2,YEAR1,Y1,YEAR2,Y2] : (((s_instance(MONTH1, s_TimeInterval) & s_instance(MONTH2, s_TimeInterval) & s_instance(YEAR1, s_SetOrClass) & s_subclass(YEAR1, s_Year) & s_subclass(YEAR2, s_Year) & s_instance(YEAR2, s_SetOrClass)) => ((s_instance(MONTH1, s_MonthFn(s_December, YEAR1)) & (s_instance(MONTH2, s_MonthFn(s_January, YEAR2)) & (s_instance(Y1, YEAR1) & (s_instance(Y2, YEAR2) & s_meetsTemporally(Y1, Y2))))) => s_meetsTemporally(MONTH1, MONTH2))))).

/*
(subclass Day TimeInterval)
*/
fof(a9663,axiom,s_subclass(s_Day, s_TimeInterval)).

/*
(forall (?DAY)
 (=> (instance ?DAY Day) (duration ?DAY (MeasureFn 1 DayDuration))))
*/
fof(a9664,axiom,! [DAY] : ((s_instance(DAY, s_Day) => s_duration(DAY, s_MeasureFn(1, s_DayDuration))))).

/*
(instance Monday SetOrClass)
*/
fof(a9665,axiom,s_instance(s_Monday, s_SetOrClass)).

/*
(subclass Monday Day)
*/
fof(a9666,axiom,s_subclass(s_Monday, s_Day)).

/*
(instance Tuesday SetOrClass)
*/
fof(a9667,axiom,s_instance(s_Tuesday, s_SetOrClass)).

/*
(subclass Tuesday Day)
*/
fof(a9668,axiom,s_subclass(s_Tuesday, s_Day)).

/*
(forall (?DAY2 ?WEEK ?DAY1)
 (=>
  (and (instance ?DAY1 Monday)
       (and (instance ?DAY2 Tuesday)
            (and (instance ?WEEK Week)
                 (and (temporalPart ?DAY1 ?WEEK)
                      (temporalPart ?DAY2 ?WEEK)))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9669,axiom,! [DAY2,WEEK,DAY1] : (((s_instance(DAY1, s_Monday) & (s_instance(DAY2, s_Tuesday) & (s_instance(WEEK, s_Week) & (s_temporalPart(DAY1, WEEK) & s_temporalPart(DAY2, WEEK))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(instance Wednesday SetOrClass)
*/
fof(a9670,axiom,s_instance(s_Wednesday, s_SetOrClass)).

/*
(subclass Wednesday Day)
*/
fof(a9671,axiom,s_subclass(s_Wednesday, s_Day)).

/*
(forall (?DAY2 ?WEEK ?DAY1)
 (=>
  (and (instance ?DAY1 Tuesday)
       (and (instance ?DAY2 Wednesday)
            (and (instance ?WEEK Week)
                 (and (temporalPart ?DAY1 ?WEEK)
                      (temporalPart ?DAY2 ?WEEK)))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9672,axiom,! [DAY2,WEEK,DAY1] : (((s_instance(DAY1, s_Tuesday) & (s_instance(DAY2, s_Wednesday) & (s_instance(WEEK, s_Week) & (s_temporalPart(DAY1, WEEK) & s_temporalPart(DAY2, WEEK))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(instance Thursday SetOrClass)
*/
fof(a9673,axiom,s_instance(s_Thursday, s_SetOrClass)).

/*
(subclass Thursday Day)
*/
fof(a9674,axiom,s_subclass(s_Thursday, s_Day)).

/*
(forall (?DAY2 ?WEEK ?DAY1)
 (=>
  (and (instance ?DAY1 Wednesday)
       (and (instance ?DAY2 Thursday)
            (and (instance ?WEEK Week)
                 (and (temporalPart ?DAY1 ?WEEK)
                      (temporalPart ?DAY2 ?WEEK)))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9675,axiom,! [DAY2,WEEK,DAY1] : (((s_instance(DAY1, s_Wednesday) & (s_instance(DAY2, s_Thursday) & (s_instance(WEEK, s_Week) & (s_temporalPart(DAY1, WEEK) & s_temporalPart(DAY2, WEEK))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(instance Friday SetOrClass)
*/
fof(a9676,axiom,s_instance(s_Friday, s_SetOrClass)).

/*
(subclass Friday Day)
*/
fof(a9677,axiom,s_subclass(s_Friday, s_Day)).

/*
(forall (?DAY2 ?WEEK ?DAY1)
 (=>
  (and (instance ?DAY1 Thursday)
       (and (instance ?DAY2 Friday)
            (and (instance ?WEEK Week)
                 (and (temporalPart ?DAY1 ?WEEK)
                      (temporalPart ?DAY2 ?WEEK)))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9678,axiom,! [DAY2,WEEK,DAY1] : (((s_instance(DAY1, s_Thursday) & (s_instance(DAY2, s_Friday) & (s_instance(WEEK, s_Week) & (s_temporalPart(DAY1, WEEK) & s_temporalPart(DAY2, WEEK))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(instance Saturday SetOrClass)
*/
fof(a9679,axiom,s_instance(s_Saturday, s_SetOrClass)).

/*
(subclass Saturday Day)
*/
fof(a9680,axiom,s_subclass(s_Saturday, s_Day)).

/*
(forall (?DAY2 ?WEEK ?DAY1)
 (=>
  (and (instance ?DAY1 Friday)
       (and (instance ?DAY2 Saturday)
            (and (instance ?WEEK Week)
                 (and (temporalPart ?DAY1 ?WEEK)
                      (temporalPart ?DAY2 ?WEEK)))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9681,axiom,! [DAY2,WEEK,DAY1] : (((s_instance(DAY1, s_Friday) & (s_instance(DAY2, s_Saturday) & (s_instance(WEEK, s_Week) & (s_temporalPart(DAY1, WEEK) & s_temporalPart(DAY2, WEEK))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(instance Sunday SetOrClass)
*/
fof(a9682,axiom,s_instance(s_Sunday, s_SetOrClass)).

/*
(instance Day SetOrClass)
*/
fof(a9683,axiom,s_instance(s_Day, s_SetOrClass)).

/*
(subclass Sunday Day)
*/
fof(a9684,axiom,s_subclass(s_Sunday, s_Day)).

/*
(forall (?DAY2 ?WEEK ?DAY1)
 (=>
  (and (instance ?DAY1 Saturday)
       (and (instance ?DAY2 Sunday)
            (and (instance ?WEEK Week)
                 (and (temporalPart ?DAY1 ?WEEK)
                      (temporalPart ?DAY2 ?WEEK)))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9685,axiom,! [DAY2,WEEK,DAY1] : (((s_instance(DAY1, s_Saturday) & (s_instance(DAY2, s_Sunday) & (s_instance(WEEK, s_Week) & (s_temporalPart(DAY1, WEEK) & s_temporalPart(DAY2, WEEK))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(forall (?DAY1 ?WEEK1 ?WEEK2 ?DAY2)
 (=>
  (and (instance ?DAY1 Sunday)
       (and (instance ?DAY2 Monday)
            (and (instance ?WEEK1 Week)
                 (and (instance ?WEEK2 Week)
                      (and (temporalPart ?DAY1 ?WEEK1)
                           (and (temporalPart ?DAY2 ?WEEK2)
                                (meetsTemporally ?WEEK1 ?WEEK2)))))))
  (meetsTemporally ?DAY1 ?DAY2)))
*/
fof(a9686,axiom,! [DAY1,WEEK1,WEEK2,DAY2] : (((s_instance(DAY1, s_Sunday) & (s_instance(DAY2, s_Monday) & (s_instance(WEEK1, s_Week) & (s_instance(WEEK2, s_Week) & (s_temporalPart(DAY1, WEEK1) & (s_temporalPart(DAY2, WEEK2) & s_meetsTemporally(WEEK1, WEEK2))))))) => s_meetsTemporally(DAY1, DAY2)))).

/*
(instance Week SetOrClass)
*/
fof(a9687,axiom,s_instance(s_Week, s_SetOrClass)).

/*
(subclass Week TimeInterval)
*/
fof(a9688,axiom,s_subclass(s_Week, s_TimeInterval)).

/*
(forall (?WEEK)
 (=> (instance ?WEEK Week) (duration ?WEEK (MeasureFn 1 WeekDuration))))
*/
fof(a9689,axiom,! [WEEK] : ((s_instance(WEEK, s_Week) => s_duration(WEEK, s_MeasureFn(1, s_WeekDuration))))).

/*
(instance Hour SetOrClass)
*/
fof(a9690,axiom,s_instance(s_Hour, s_SetOrClass)).

/*
(subclass Hour TimeInterval)
*/
fof(a9691,axiom,s_subclass(s_Hour, s_TimeInterval)).

/*
(forall (?HOUR)
 (=> (instance ?HOUR Hour) (duration ?HOUR (MeasureFn 1 HourDuration))))
*/
fof(a9692,axiom,! [HOUR] : ((s_instance(HOUR, s_Hour) => s_duration(HOUR, s_MeasureFn(1, s_HourDuration))))).

/*
(instance Minute SetOrClass)
*/
fof(a9693,axiom,s_instance(s_Minute, s_SetOrClass)).

/*
(subclass Minute TimeInterval)
*/
fof(a9694,axiom,s_subclass(s_Minute, s_TimeInterval)).

/*
(forall (?MINUTE)
 (=> (instance ?MINUTE Minute)
  (duration ?MINUTE (MeasureFn 1 MinuteDuration))))
*/
fof(a9695,axiom,! [MINUTE] : ((s_instance(MINUTE, s_Minute) => s_duration(MINUTE, s_MeasureFn(1, s_MinuteDuration))))).

/*
(instance Second SetOrClass)
*/
fof(a9696,axiom,s_instance(s_Second, s_SetOrClass)).

/*
(instance TimeInterval SetOrClass)
*/
fof(a9697,axiom,s_instance(s_TimeInterval, s_SetOrClass)).

/*
(subclass Second TimeInterval)
*/
fof(a9698,axiom,s_subclass(s_Second, s_TimeInterval)).

/*
(forall (?SECOND)
 (=> (instance ?SECOND Second)
  (duration ?SECOND (MeasureFn 1 SecondDuration))))
*/
fof(a9699,axiom,! [SECOND] : ((s_instance(SECOND, s_Second) => s_duration(SECOND, s_MeasureFn(1, s_SecondDuration))))).

/*
(instance TemporalCompositionFn TemporalRelation)
*/
fof(a9700,axiom,s_instance(s_TemporalCompositionFn_m, s_TemporalRelation)).

/*
(instance TemporalCompositionFn BinaryFunction)
*/
fof(a9701,axiom,s_instance(s_TemporalCompositionFn_m, s_BinaryFunction)).

/*
(instance TemporalCompositionFn TotalValuedRelation)
*/
fof(a9702,axiom,s_instance(s_TemporalCompositionFn_m, s_TotalValuedRelation)).

/*
(domainSubclass TemporalCompositionFn 2 TimeInterval)
*/
fof(a9703,axiom,s_domainSubclass(s_TemporalCompositionFn_m, 2, s_TimeInterval)).

/*
(rangeSubclass TemporalCompositionFn TimeInterval)
*/
fof(a9704,axiom,s_rangeSubclass(s_TemporalCompositionFn_m, s_TimeInterval)).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (forall (?TIME1 ?TIME2)
  (exists (?DURATION)
   (and (instance ?DURATION TimeDuration)
        (=>
         (and (instance ?TIME2 TimeInterval)
              (instance ?TIME1 TimeInterval))
         (=>
          (and (instance ?INTERVAL TimeInterval)
               (instance ?CLASS SetOrClass)
               (subclass ?INTERVAL-TYPE TimeInterval)
               (instance ?INTERVAL-TYPE SetOrClass))
          (=>
           (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE)
                  ?CLASS)
           (=>
            (and (instance ?TIME1 ?INTERVAL-TYPE)
                 (instance ?TIME2 ?CLASS))
            (and (duration ?TIME1 ?DURATION)
                 (duration ?TIME2 ?DURATION))))))))))
*/
fof(a9705,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (! [TIME1,TIME2] : (? [DURATION] : ((s_instance(DURATION, s_TimeDuration) & ((s_instance(TIME2, s_TimeInterval) & s_instance(TIME1, s_TimeInterval)) => ((s_instance(INTERVAL, s_TimeInterval) & s_instance(CLASS, s_SetOrClass) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(INTERVAL_TYPE, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => ((s_instance(TIME1, INTERVAL_TYPE) & s_instance(TIME2, CLASS)) => (s_duration(TIME1, DURATION) & s_duration(TIME2, DURATION))))))))))).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (forall (?TIME1 ?TIME2)
  (=>
   (and (instance ?TIME2 TimeInterval) (instance ?TIME1 TimeInterval))
   (=>
    (and (instance ?INTERVAL TimeInterval)
         (subclass ?INTERVAL-TYPE TimeInterval)
         (instance ?CLASS SetOrClass))
    (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
     (=>
      (and (instance ?TIME1 ?CLASS)
           (and (instance ?TIME2 ?CLASS) (not (equal ?TIME1 ?TIME2))))
      (or (meetsTemporally ?TIME1 ?TIME2)
          (or (meetsTemporally ?TIME2 ?TIME1)
              (or (earlier ?TIME1 ?TIME2)
                  (earlier ?TIME2 ?TIME1))))))))))
*/
fof(a9706,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (! [TIME1,TIME2] : (((s_instance(TIME2, s_TimeInterval) & s_instance(TIME1, s_TimeInterval)) => ((s_instance(INTERVAL, s_TimeInterval) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(CLASS, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => ((s_instance(TIME1, CLASS) & (s_instance(TIME2, CLASS) & (~ (TIME1 = TIME2)))) => (s_meetsTemporally(TIME1, TIME2) | (s_meetsTemporally(TIME2, TIME1) | (s_earlier(TIME1, TIME2) | s_earlier(TIME2, TIME1))))))))))).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (exists (?TIME)
  (and (instance ?TIME TimeInterval)
       (=>
        (and (instance ?INTERVAL TimeInterval)
             (subclass ?INTERVAL-TYPE TimeInterval)
             (instance ?CLASS SetOrClass))
        (=>
         (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE)
                ?CLASS)
         (and (instance ?TIME ?CLASS) (starts ?TIME ?INTERVAL)))))))
*/
fof(a9707,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (? [TIME] : ((s_instance(TIME, s_TimeInterval) & ((s_instance(INTERVAL, s_TimeInterval) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(CLASS, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => (s_instance(TIME, CLASS) & s_starts(TIME, INTERVAL)))))))).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (exists (?TIME)
  (and (instance ?TIME TimeInterval)
       (=>
        (and (instance ?INTERVAL TimeInterval)
             (subclass ?INTERVAL-TYPE TimeInterval)
             (instance ?CLASS SetOrClass))
        (=>
         (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE)
                ?CLASS)
         (and (instance ?TIME ?CLASS) (finishes ?TIME ?INTERVAL)))))))
*/
fof(a9708,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (? [TIME] : ((s_instance(TIME, s_TimeInterval) & ((s_instance(INTERVAL, s_TimeInterval) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(CLASS, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => (s_instance(TIME, CLASS) & s_finishes(TIME, INTERVAL)))))))).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (forall (?TIME1)
  (exists (?TIME2)
   (and (instance ?TIME2 TimeInterval)
        (=> (instance ?TIME1 TimeInterval)
         (=>
          (and (instance ?INTERVAL TimeInterval)
               (subclass ?INTERVAL-TYPE TimeInterval)
               (instance ?CLASS SetOrClass))
          (=>
           (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE)
                  ?CLASS)
           (=>
            (and (instance ?TIME1 ?CLASS)
                 (not (finishes ?TIME1 ?INTERVAL)))
            (and (instance ?TIME2 ?CLASS)
                 (meetsTemporally ?TIME1 ?TIME2))))))))))
*/
fof(a9709,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (! [TIME1] : (? [TIME2] : ((s_instance(TIME2, s_TimeInterval) & (s_instance(TIME1, s_TimeInterval) => ((s_instance(INTERVAL, s_TimeInterval) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(CLASS, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => ((s_instance(TIME1, CLASS) & (~ s_finishes(TIME1, INTERVAL))) => (s_instance(TIME2, CLASS) & s_meetsTemporally(TIME1, TIME2))))))))))).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (forall (?TIME1)
  (exists (?TIME2)
   (and (instance ?TIME2 TimeInterval)
        (=> (instance ?TIME1 TimeInterval)
         (=>
          (and (instance ?INTERVAL TimeInterval)
               (subclass ?INTERVAL-TYPE TimeInterval)
               (instance ?CLASS SetOrClass))
          (=>
           (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE)
                  ?CLASS)
           (=>
            (and (instance ?TIME1 ?CLASS)
                 (not (starts ?TIME1 ?INTERVAL)))
            (and (instance ?TIME2 ?CLASS)
                 (meetsTemporally ?TIME2 ?TIME1))))))))))
*/
fof(a9710,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (! [TIME1] : (? [TIME2] : ((s_instance(TIME2, s_TimeInterval) & (s_instance(TIME1, s_TimeInterval) => ((s_instance(INTERVAL, s_TimeInterval) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(CLASS, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => ((s_instance(TIME1, CLASS) & (~ s_starts(TIME1, INTERVAL))) => (s_instance(TIME2, CLASS) & s_meetsTemporally(TIME2, TIME1))))))))))).

/*
(forall (?CLASS ?INTERVAL-TYPE ?INTERVAL)
 (forall (?TIME)
  (exists (?INSTANCE)
   (and (instance ?INSTANCE TimePosition)
        (=> (instance ?TIME TimePosition)
         (=>
          (and (instance ?INTERVAL TimeInterval)
               (subclass ?INTERVAL-TYPE TimeInterval)
               (instance ?CLASS SetOrClass))
          (=>
           (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE)
                  ?CLASS)
           (=>
            (and (instance ?TIME TimePoint)
                 (temporalPart ?TIME ?INTERVAL))
            (and (instance ?INSTANCE ?CLASS)
                 (temporalPart ?TIME ?INSTANCE))))))))))
*/
fof(a9711,axiom,! [CLASS,INTERVAL_TYPE,INTERVAL] : (! [TIME] : (? [INSTANCE] : ((s_instance(INSTANCE, s_TimePosition) & (s_instance(TIME, s_TimePosition) => ((s_instance(INTERVAL, s_TimeInterval) & s_subclass(INTERVAL_TYPE, s_TimeInterval) & s_instance(CLASS, s_SetOrClass)) => ((s_TemporalCompositionFn(INTERVAL, INTERVAL_TYPE) = CLASS) => ((s_instance(TIME, s_TimePoint) & s_temporalPart(TIME, INTERVAL)) => (s_instance(INSTANCE, CLASS) & s_temporalPart(TIME, INSTANCE))))))))))).

/*
(forall (?YEAR)
 (=> (instance ?YEAR Year)
  (equal (CardinalityFn (TemporalCompositionFn ?YEAR Month)) 12)))
*/
fof(a9712,axiom,! [YEAR] : ((s_instance(YEAR, s_Year) => (s_CardinalityFn(s_TemporalCompositionFn(YEAR, s_Month)) = 12)))).

/*
(forall (?NUMBER ?MONTH)
 (=> (instance ?NUMBER RealNumber)
  (=>
   (and (instance ?MONTH Month)
        (duration ?MONTH (MeasureFn ?NUMBER DayDuration)))
   (equal (CardinalityFn (TemporalCompositionFn ?MONTH Day)) ?NUMBER))))
*/
fof(a9713,axiom,! [NUMBER,MONTH] : ((s_instance(NUMBER, s_RealNumber) => ((s_instance(MONTH, s_Month) & s_duration(MONTH, s_MeasureFn(NUMBER, s_DayDuration))) => (s_CardinalityFn(s_TemporalCompositionFn(MONTH, s_Day)) = NUMBER))))).

/*
(forall (?WEEK)
 (=> (instance ?WEEK Week)
  (equal (CardinalityFn (TemporalCompositionFn ?WEEK Day)) 7)))
*/
fof(a9714,axiom,! [WEEK] : ((s_instance(WEEK, s_Week) => (s_CardinalityFn(s_TemporalCompositionFn(WEEK, s_Day)) = 7)))).

/*
(forall (?DAY)
 (=> (instance ?DAY Day)
  (equal (CardinalityFn (TemporalCompositionFn ?DAY Hour)) 24)))
*/
fof(a9715,axiom,! [DAY] : ((s_instance(DAY, s_Day) => (s_CardinalityFn(s_TemporalCompositionFn(DAY, s_Hour)) = 24)))).

/*
(forall (?HOUR)
 (=> (instance ?HOUR Hour)
  (equal (CardinalityFn (TemporalCompositionFn ?HOUR Minute)) 60)))
*/
fof(a9716,axiom,! [HOUR] : ((s_instance(HOUR, s_Hour) => (s_CardinalityFn(s_TemporalCompositionFn(HOUR, s_Minute)) = 60)))).

/*
(forall (?MINUTE)
 (=> (instance ?MINUTE Minute)
  (equal (CardinalityFn (TemporalCompositionFn ?MINUTE Second)) 60)))
*/
fof(a9717,axiom,! [MINUTE] : ((s_instance(MINUTE, s_Minute) => (s_CardinalityFn(s_TemporalCompositionFn(MINUTE, s_Second)) = 60)))).

/*
(instance connected BinaryPredicate)
*/
fof(a9718,axiom,s_instance(s_connected_m, s_BinaryPredicate)).

/*
(instance connected SpatialRelation)
*/
fof(a9719,axiom,s_instance(s_connected_m, s_SpatialRelation)).

/*
(instance connected ReflexiveRelation)
*/
fof(a9720,axiom,s_instance(s_connected_m, s_ReflexiveRelation)).

/*
(instance connected SymmetricRelation)
*/
fof(a9721,axiom,s_instance(s_connected_m, s_SymmetricRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (connected ?OBJ1 ?OBJ2)
   (or (meetsSpatially ?OBJ1 ?OBJ2) (overlapsSpatially ?OBJ1 ?OBJ2)))))
*/
fof(a9722,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_connected(OBJ1, OBJ2) => (s_meetsSpatially(OBJ1, OBJ2) | s_overlapsSpatially(OBJ1, OBJ2)))))).

/*
(forall (?OBJ)
 (forall (?PART1 ?PART2)
  (exists (?g6880 ?g6881)
   (and (and (instance ?g6881 Object) (instance ?g6880 Object))
        (=> (and (instance ?PART2 Object) (instance ?PART1 Object))
         (and (=> (instance ?OBJ SelfConnectedObject)
               (=> (equal ?OBJ (MereologicalSumFn ?PART1 ?PART2))
                (connected ?PART1 ?PART2)))
              (=>
               (=> (equal ?OBJ (MereologicalSumFn ?g6880 ?g6881))
                (connected ?g6880 ?g6881))
               (instance ?OBJ SelfConnectedObject))))))))
*/
fof(a9723,axiom,! [OBJ] : (! [PART1,PART2] : (? [G6880,G6881] : (((s_instance(G6881, s_Object) & s_instance(G6880, s_Object)) & ((s_instance(PART2, s_Object) & s_instance(PART1, s_Object)) => ((s_instance(OBJ, s_SelfConnectedObject) => ((OBJ = s_MereologicalSumFn(PART1, PART2)) => s_connected(PART1, PART2))) & (((OBJ = s_MereologicalSumFn(G6880, G6881)) => s_connected(G6880, G6881)) => s_instance(OBJ, s_SelfConnectedObject))))))))).

/*
(instance connects SpatialRelation)
*/
fof(a9724,axiom,s_instance(s_connects_m, s_SpatialRelation)).

/*
(instance connects TernaryPredicate)
*/
fof(a9725,axiom,s_instance(s_connects_m, s_TernaryPredicate)).

/*
(forall (?OBJ1 ?OBJ3 ?OBJ2)
 (=>
  (and (instance ?OBJ2 Object) (instance ?OBJ3 Object)
       (instance ?OBJ1 Object))
  (<=> (connects ?OBJ1 ?OBJ2 ?OBJ3) (between ?OBJ2 ?OBJ1 ?OBJ3))))
*/
fof(a9726,axiom,! [OBJ1,OBJ3,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(OBJ3, s_Object) & s_instance(OBJ1, s_Object)) => (s_connects(OBJ1, OBJ2, OBJ3) <=> s_between(OBJ2, OBJ1, OBJ3))))).

/*
(forall (?OBJ1 ?OBJ3 ?OBJ2)
 (=>
  (and (instance ?OBJ2 Object) (instance ?OBJ3 Object)
       (instance ?OBJ1 Object))
  (<=> (connects ?OBJ1 ?OBJ2 ?OBJ3)
   (and (connected ?OBJ1 ?OBJ2)
        (and (connected ?OBJ1 ?OBJ3) (not (connected ?OBJ2 ?OBJ3)))))))
*/
fof(a9727,axiom,! [OBJ1,OBJ3,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(OBJ3, s_Object) & s_instance(OBJ1, s_Object)) => (s_connects(OBJ1, OBJ2, OBJ3) <=> (s_connected(OBJ1, OBJ2) & (s_connected(OBJ1, OBJ3) & (~ s_connected(OBJ2, OBJ3)))))))).

/*
(forall (?ARC ?NODE2 ?NODE1)
 (=>
  (and (instance ?NODE1 Object) (instance ?NODE2 Object)
       (instance ?ARC Object))
  (=> (connects ?ARC ?NODE1 ?NODE2) (connects ?ARC ?NODE2 ?NODE1))))
*/
fof(a9728,axiom,! [ARC,NODE2,NODE1] : (((s_instance(NODE1, s_Object) & s_instance(NODE2, s_Object) & s_instance(ARC, s_Object)) => (s_connects(ARC, NODE1, NODE2) => s_connects(ARC, NODE2, NODE1))))).

/*
(instance meetsSpatially IrreflexiveRelation)
*/
fof(a9729,axiom,s_instance(s_meetsSpatially_m, s_IrreflexiveRelation)).

/*
(instance meetsSpatially SymmetricRelation)
*/
fof(a9730,axiom,s_instance(s_meetsSpatially_m, s_SymmetricRelation)).

/*
(disjointRelation meetsSpatially overlapsSpatially)
*/
fof(a9731,axiom,s_disjointRelation(s_meetsSpatially_m, s_overlapsSpatially_m)).

/*
(subrelation overlapsSpatially connected)
*/
fof(a9732,axiom,s_subrelation(s_overlapsSpatially_m, s_connected_m)).

/*
(instance ReflexiveRelation SetOrClass)
*/
fof(a9733,axiom,s_instance(s_ReflexiveRelation, s_SetOrClass)).

/*
(instance overlapsSpatially ReflexiveRelation)
*/
fof(a9734,axiom,s_instance(s_overlapsSpatially_m, s_ReflexiveRelation)).

/*
(instance overlapsSpatially SymmetricRelation)
*/
fof(a9735,axiom,s_instance(s_overlapsSpatially_m, s_SymmetricRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?OBJ3)
  (exists (?g6886)
   (and (instance ?g6886 Object)
        (=> (instance ?OBJ3 Object)
         (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
          (and (=> (overlapsSpatially ?OBJ1 ?OBJ2)
                (and (part ?g6886 ?OBJ1) (part ?g6886 ?OBJ2)))
               (=> (and (part ?OBJ3 ?OBJ1) (part ?OBJ3 ?OBJ2))
                (overlapsSpatially ?OBJ1 ?OBJ2)))))))))
*/
fof(a9736,axiom,! [OBJ2,OBJ1] : (! [OBJ3] : (? [G6886] : ((s_instance(G6886, s_Object) & (s_instance(OBJ3, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_overlapsSpatially(OBJ1, OBJ2) => (s_part(G6886, OBJ1) & s_part(G6886, OBJ2))) & ((s_part(OBJ3, OBJ1) & s_part(OBJ3, OBJ2)) => s_overlapsSpatially(OBJ1, OBJ2)))))))))).

/*
(forall (?OBJ1 ?COLL ?OBJ2)
 (=>
  (and (instance ?OBJ2 Object) (instance ?COLL Collection)
       (instance ?OBJ1 Object))
  (=>
   (and (member ?OBJ1 ?COLL)
        (and (member ?OBJ2 ?COLL) (not (equal ?OBJ1 ?OBJ2))))
   (not (overlapsSpatially ?OBJ1 ?OBJ2)))))
*/
fof(a9737,axiom,! [OBJ1,COLL,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(COLL, s_Collection) & s_instance(OBJ1, s_Object)) => ((s_member(OBJ1, COLL) & (s_member(OBJ2, COLL) & (~ (OBJ1 = OBJ2)))) => (~ s_overlapsSpatially(OBJ1, OBJ2)))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance instrument CaseRole)
              (and (instance ?OBJ Object) (instrument ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9738,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_instrument_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_instrument(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance suffers CaseRole)
              (and (instance ?OBJ Object) (suffers ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9739,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_suffers_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_suffers(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance destination CaseRole)
              (and (instance ?OBJ Object) (destination ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9740,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_destination_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_destination(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS ChemicalProcess)
        (=>
         (and (instance reactant CaseRole)
              (and (instance ?OBJ Object) (reactant ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9741,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_ChemicalProcess) => ((s_instance(s_reactant_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_reactant(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance patient CaseRole)
              (and (instance ?OBJ Object) (patient ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9742,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_patient_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_patient(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance eventLocated CaseRole)
              (and (instance ?OBJ Object)
                   (eventLocated ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9743,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_eventLocated_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_eventLocated(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS ServiceProcess)
        (=>
         (and (instance serviceRecipient CaseRole)
              (and (instance ?OBJ Object)
                   (serviceRecipient ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9744,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_ServiceProcess) => ((s_instance(s_serviceRecipient_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_serviceRecipient(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Experimenting)
        (=>
         (and (instance experimentalControl CaseRole)
              (and (instance ?OBJ Object)
                   (experimentalControl ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9745,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Experimenting) => ((s_instance(s_experimentalControl_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_experimentalControl(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance resource CaseRole)
              (and (instance ?OBJ Object) (resource ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9746,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_resource_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_resource(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Transportation)
        (=>
         (and (instance conveyance CaseRole)
              (and (instance ?OBJ Object) (conveyance ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9747,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Transportation) => ((s_instance(s_conveyance_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_conveyance(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS LegalAction)
        (=>
         (and (instance defendant CaseRole)
              (and (instance ?OBJ Object) (defendant ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9748,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_LegalAction) => ((s_instance(s_defendant_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_defendant(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance direction CaseRole)
              (and (instance ?OBJ Object) (direction ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9749,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_direction_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_direction(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Demonstrating)
        (=>
         (and (instance attends CaseRole)
              (and (instance ?OBJ Object) (attends ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9750,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Demonstrating) => ((s_instance(s_attends_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_attends(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Translocation)
        (=>
         (and (instance changesLocation CaseRole)
              (and (instance ?OBJ Object)
                   (changesLocation ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9751,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Translocation) => ((s_instance(s_changesLocation_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_changesLocation(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS ChangeOfControl)
        (=>
         (and (instance losesControl CaseRole)
              (and (instance ?OBJ Object)
                   (losesControl ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9752,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_ChangeOfControl) => ((s_instance(s_losesControl_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_losesControl(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS LegalAction)
        (=>
         (and (instance plaintiff CaseRole)
              (and (instance ?OBJ Object) (plaintiff ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9753,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_LegalAction) => ((s_instance(s_plaintiff_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_plaintiff(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Confining)
        (=>
         (and (instance detainee CaseRole)
              (and (instance ?OBJ Object) (detainee ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9754,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Confining) => ((s_instance(s_detainee_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_detainee(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Contest)
        (=>
         (and (instance contestParticipant CaseRole)
              (and (instance ?OBJ Object)
                   (contestParticipant ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9755,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Contest) => ((s_instance(s_contestParticipant_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_contestParticipant(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS ChemicalProcess)
        (=>
         (and (instance reagent CaseRole)
              (and (instance ?OBJ Object) (reagent ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9756,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_ChemicalProcess) => ((s_instance(s_reagent_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_reagent(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Transportation)
        (=>
         (and (instance transported CaseRole)
              (and (instance ?OBJ Object) (transported ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9757,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Transportation) => ((s_instance(s_transported_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_transported(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Shipping)
        (=>
         (and (instance cargo CaseRole)
              (and (instance ?OBJ Object) (cargo ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9758,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Shipping) => ((s_instance(s_cargo_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_cargo(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance experiencer CaseRole)
              (and (instance ?OBJ Object) (experiencer ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9759,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_experiencer_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_experiencer(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance result CaseRole)
              (and (instance ?OBJ Object) (result ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9760,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_result_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_result(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance targetInAttack CaseRole)
              (and (instance ?OBJ Object)
                   (targetInAttack ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9761,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_targetInAttack_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_targetInAttack(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance origin CaseRole)
              (and (instance ?OBJ Object) (origin ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9762,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_origin_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_origin(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Motion)
        (=>
         (and (instance moves CaseRole)
              (and (instance ?OBJ Object) (moves ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9763,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Motion) => ((s_instance(s_moves_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_moves(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS AchievingControl)
        (=>
         (and (instance controlled CaseRole)
              (and (instance ?OBJ Object) (controlled ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9764,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_AchievingControl) => ((s_instance(s_controlled_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_controlled(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS ServiceProcess)
        (=>
         (and (instance serviceProvider CaseRole)
              (and (instance ?OBJ Object)
                   (serviceProvider ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9765,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_ServiceProcess) => ((s_instance(s_serviceProvider_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_serviceProvider(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance agent CaseRole)
              (and (instance ?OBJ Object) (agent ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9766,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_agent_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_agent(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Motion)
        (=>
         (and (instance path CaseRole)
              (and (instance ?OBJ Object) (path ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9767,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Motion) => ((s_instance(s_path_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_path(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS PlacingUnderArrest)
        (=>
         (and (instance arrested CaseRole)
              (and (instance ?OBJ Object) (arrested ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9768,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_PlacingUnderArrest) => ((s_instance(s_arrested_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_arrested(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance eventPartlyLocated CaseRole)
              (and (instance ?OBJ Object)
                   (eventPartlyLocated ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9769,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_eventPartlyLocated_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_eventPartlyLocated(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS Process)
        (=>
         (and (instance resourceExhausted CaseRole)
              (and (instance ?OBJ Object)
                   (resourceExhausted ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9770,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_Process) => ((s_instance(s_resourceExhausted_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_resourceExhausted(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(forall (?OBJ ?PROCESS)
 (exists (?TIME)
  (and (instance ?TIME TimePoint)
       (=> (instance ?PROCESS AchievingControl)
        (=>
         (and (instance gainsControl CaseRole)
              (and (instance ?OBJ Object)
                   (gainsControl ?PROCESS ?OBJ)))
         (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))
*/
fof(a9771,axiom,! [OBJ,PROCESS] : (? [TIME] : ((s_instance(TIME, s_TimePoint) & (s_instance(PROCESS, s_AchievingControl) => ((s_instance(s_gainsControl_m, s_CaseRole) & (s_instance(OBJ, s_Object) & s_gainsControl(PROCESS, OBJ))) => s_overlapsSpatially(s_WhereFn(PROCESS, TIME), OBJ))))))).

/*
(instance overlapsPartially BinaryPredicate)
*/
fof(a9772,axiom,s_instance(s_overlapsPartially_m, s_BinaryPredicate)).

/*
(instance overlapsPartially SymmetricRelation)
*/
fof(a9773,axiom,s_instance(s_overlapsPartially_m, s_SymmetricRelation)).

/*
(instance overlapsPartially PartialValuedRelation)
*/
fof(a9774,axiom,s_instance(s_overlapsPartially_m, s_PartialValuedRelation)).

/*
(instance overlapsPartially IrreflexiveRelation)
*/
fof(a9775,axiom,s_instance(s_overlapsPartially_m, s_IrreflexiveRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?OBJ3)
  (exists (?g6926)
   (and (instance ?g6926 Object)
        (=> (instance ?OBJ3 Object)
         (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
          (and (=> (overlapsPartially ?OBJ1 ?OBJ2)
                (and (not (part ?OBJ1 ?OBJ2))
                     (and (not (part ?OBJ2 ?OBJ1))
                          (and (part ?g6926 ?OBJ1)
                               (part ?g6926 ?OBJ2)))))
               (=>
                (and (not (part ?OBJ1 ?OBJ2))
                     (and (not (part ?OBJ2 ?OBJ1))
                          (and (part ?OBJ3 ?OBJ1) (part ?OBJ3 ?OBJ2))))
                (overlapsPartially ?OBJ1 ?OBJ2)))))))))
*/
fof(a9776,axiom,! [OBJ2,OBJ1] : (! [OBJ3] : (? [G6926] : ((s_instance(G6926, s_Object) & (s_instance(OBJ3, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_overlapsPartially(OBJ1, OBJ2) => ((~ s_part(OBJ1, OBJ2)) & ((~ s_part(OBJ2, OBJ1)) & (s_part(G6926, OBJ1) & s_part(G6926, OBJ2))))) & (((~ s_part(OBJ1, OBJ2)) & ((~ s_part(OBJ2, OBJ1)) & (s_part(OBJ3, OBJ1) & s_part(OBJ3, OBJ2)))) => s_overlapsPartially(OBJ1, OBJ2)))))))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (overlapsPartially ?OBJ1 ?OBJ2) (overlapsSpatially ?OBJ1 ?OBJ2))))
*/
fof(a9777,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_overlapsPartially(OBJ1, OBJ2) => s_overlapsSpatially(OBJ1, OBJ2))))).

/*
(subrelation superficialPart part)
*/
fof(a9778,axiom,s_subrelation(s_superficialPart_m, s_part_m)).

/*
(instance superficialPart IrreflexiveRelation)
*/
fof(a9779,axiom,s_instance(s_superficialPart_m, s_IrreflexiveRelation)).

/*
(instance superficialPart TransitiveRelation)
*/
fof(a9780,axiom,s_instance(s_superficialPart_m, s_TransitiveRelation)).

/*
(instance superficialPart PartialValuedRelation)
*/
fof(a9781,axiom,s_instance(s_superficialPart_m, s_PartialValuedRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?OBJ3)
  (=> (instance ?OBJ3 Object)
   (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
    (=> (superficialPart ?OBJ1 ?OBJ2)
     (and (not (interiorPart ?OBJ1 ?OBJ2))
          (not (interiorPart ?OBJ3 ?OBJ1))))))))
*/
fof(a9782,axiom,! [OBJ2,OBJ1] : (! [OBJ3] : ((s_instance(OBJ3, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_superficialPart(OBJ1, OBJ2) => ((~ s_interiorPart(OBJ1, OBJ2)) & (~ s_interiorPart(OBJ3, OBJ1))))))))).

/*
(instance surface AsymmetricRelation)
*/
fof(a9783,axiom,s_instance(s_surface_m, s_AsymmetricRelation)).

/*
(subrelation surface superficialPart)
*/
fof(a9784,axiom,s_subrelation(s_surface_m, s_superficialPart_m)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?OBJ3)
  (=> (instance ?OBJ3 Object)
   (=>
    (and (instance ?OBJ1 SelfConnectedObject)
         (instance ?OBJ2 SelfConnectedObject))
    (=> (surface ?OBJ1 ?OBJ2)
     (=> (superficialPart ?OBJ3 ?OBJ2) (part ?OBJ3 ?OBJ1)))))))
*/
fof(a9785,axiom,! [OBJ2,OBJ1] : (! [OBJ3] : ((s_instance(OBJ3, s_Object) => ((s_instance(OBJ1, s_SelfConnectedObject) & s_instance(OBJ2, s_SelfConnectedObject)) => (s_surface(OBJ1, OBJ2) => (s_superficialPart(OBJ3, OBJ2) => s_part(OBJ3, OBJ1)))))))).

/*
(subrelation interiorPart part)
*/
fof(a9786,axiom,s_subrelation(s_interiorPart_m, s_part_m)).

/*
(instance interiorPart AsymmetricRelation)
*/
fof(a9787,axiom,s_instance(s_interiorPart_m, s_AsymmetricRelation)).

/*
(instance interiorPart TransitiveRelation)
*/
fof(a9788,axiom,s_instance(s_interiorPart_m, s_TransitiveRelation)).

/*
(forall (?OBJ2 ?OBJ1)
 (forall (?PART)
  (=> (instance ?PART Object)
   (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
    (=> (interiorPart ?OBJ1 ?OBJ2)
     (=> (superficialPart ?PART ?OBJ2)
      (not (overlapsSpatially ?OBJ1 ?PART))))))))
*/
fof(a9789,axiom,! [OBJ2,OBJ1] : (! [PART] : ((s_instance(PART, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_interiorPart(OBJ1, OBJ2) => (s_superficialPart(PART, OBJ2) => (~ s_overlapsSpatially(OBJ1, PART))))))))).

/*
(subrelation bottom superficialPart)
*/
fof(a9790,axiom,s_subrelation(s_bottom_m, s_superficialPart_m)).

/*
(instance bottom BinaryPredicate)
*/
fof(a9791,axiom,s_instance(s_bottom_m, s_BinaryPredicate)).

/*
(forall (?BOTTOM ?OBJECT ?PART)
 (=>
  (and (instance ?PART Object) (instance ?OBJECT SelfConnectedObject)
       (instance ?BOTTOM SelfConnectedObject))
  (=>
   (and (bottom ?BOTTOM ?OBJECT)
        (and (part ?PART ?OBJECT) (not (connected ?PART ?BOTTOM))))
   (orientation ?PART ?BOTTOM Above))))
*/
fof(a9792,axiom,! [BOTTOM,OBJECT,PART] : (((s_instance(PART, s_Object) & s_instance(OBJECT, s_SelfConnectedObject) & s_instance(BOTTOM, s_SelfConnectedObject)) => ((s_bottom(BOTTOM, OBJECT) & (s_part(PART, OBJECT) & (~ s_connected(PART, BOTTOM)))) => s_orientation(PART, BOTTOM, s_Above))))).

/*
(subrelation top superficialPart)
*/
fof(a9793,axiom,s_subrelation(s_top_m, s_superficialPart_m)).

/*
(instance top BinaryPredicate)
*/
fof(a9794,axiom,s_instance(s_top_m, s_BinaryPredicate)).

/*
(forall (?TOP ?OBJECT ?PART)
 (=>
  (and (instance ?PART Object) (instance ?OBJECT SelfConnectedObject)
       (instance ?TOP SelfConnectedObject))
  (=>
   (and (top ?TOP ?OBJECT)
        (and (part ?PART ?OBJECT) (not (connected ?PART ?TOP))))
   (orientation ?PART ?TOP Below))))
*/
fof(a9795,axiom,! [TOP,OBJECT,PART] : (((s_instance(PART, s_Object) & s_instance(OBJECT, s_SelfConnectedObject) & s_instance(TOP, s_SelfConnectedObject)) => ((s_top(TOP, OBJECT) & (s_part(PART, OBJECT) & (~ s_connected(PART, TOP)))) => s_orientation(PART, TOP, s_Below))))).

/*
(subrelation side superficialPart)
*/
fof(a9796,axiom,s_subrelation(s_side_m, s_superficialPart_m)).

/*
(instance side BinaryPredicate)
*/
fof(a9797,axiom,s_instance(s_side_m, s_BinaryPredicate)).

/*
(forall (?SIDE ?OBJECT ?PART)
 (exists (?DIRECT)
  (and (instance ?DIRECT PositionalAttribute)
       (=>
        (and (instance ?PART Object)
             (instance ?OBJECT SelfConnectedObject)
             (instance ?SIDE SelfConnectedObject))
        (=>
         (and (side ?SIDE ?OBJECT)
              (and (part ?PART ?OBJECT) (not (connected ?PART ?SIDE))))
         (orientation ?SIDE ?PART ?DIRECT))))))
*/
fof(a9798,axiom,! [SIDE,OBJECT,PART] : (? [DIRECT] : ((s_instance(DIRECT, s_PositionalAttribute) & ((s_instance(PART, s_Object) & s_instance(OBJECT, s_SelfConnectedObject) & s_instance(SIDE, s_SelfConnectedObject)) => ((s_side(SIDE, OBJECT) & (s_part(PART, OBJECT) & (~ s_connected(PART, SIDE)))) => s_orientation(SIDE, PART, DIRECT))))))).

/*
(forall (?S ?O ?TOP)
 (=>
  (and (instance ?TOP SelfConnectedObject)
       (instance ?O SelfConnectedObject)
       (instance ?S SelfConnectedObject))
  (=> (and (top ?TOP ?O) (side ?S ?O)) (not (equal ?TOP ?S)))))
*/
fof(a9799,axiom,! [S,O,TOP] : (((s_instance(TOP, s_SelfConnectedObject) & s_instance(O, s_SelfConnectedObject) & s_instance(S, s_SelfConnectedObject)) => ((s_top(TOP, O) & s_side(S, O)) => (~ (TOP = S)))))).

/*
(forall (?WIDTH ?OBJECT)
 (forall (?SIDE1 ?SIDE2)
  (exists (?g6937 ?g6938)
   (and (and (instance ?g6938 SelfConnectedObject)
             (instance ?g6937 SelfConnectedObject))
        (=>
         (and (instance ?SIDE2 SelfConnectedObject)
              (instance ?SIDE1 SelfConnectedObject))
         (=>
          (and (instance ?OBJECT SelfConnectedObject)
               (instance ?WIDTH LengthMeasure))
          (and (=> (width ?OBJECT ?WIDTH)
                (and (side ?g6937 ?OBJECT)
                     (and (side ?g6938 ?OBJECT)
                          (distance ?g6937 ?g6938 ?WIDTH))))
               (=>
                (and (side ?SIDE1 ?OBJECT)
                     (and (side ?SIDE2 ?OBJECT)
                          (distance ?SIDE1 ?SIDE2 ?WIDTH)))
                (width ?OBJECT ?WIDTH)))))))))
*/
fof(a9800,axiom,! [WIDTH,OBJECT] : (! [SIDE1,SIDE2] : (? [G6937,G6938] : (((s_instance(G6938, s_SelfConnectedObject) & s_instance(G6937, s_SelfConnectedObject)) & ((s_instance(SIDE2, s_SelfConnectedObject) & s_instance(SIDE1, s_SelfConnectedObject)) => ((s_instance(OBJECT, s_SelfConnectedObject) & s_instance(WIDTH, s_LengthMeasure)) => ((s_width(OBJECT, WIDTH) => (s_side(G6937, OBJECT) & (s_side(G6938, OBJECT) & s_distance(G6937, G6938, WIDTH)))) & ((s_side(SIDE1, OBJECT) & (s_side(SIDE2, OBJECT) & s_distance(SIDE1, SIDE2, WIDTH))) => s_width(OBJECT, WIDTH)))))))))).

/*
(forall (?HEIGHT ?BOTTOM ?OBJECT ?TOP)
 (=>
  (and (instance ?TOP SelfConnectedObject)
       (instance ?OBJECT SelfConnectedObject)
       (instance ?BOTTOM SelfConnectedObject)
       (instance ?HEIGHT LengthMeasure))
  (=>
   (and (height ?OBJECT ?HEIGHT)
        (and (top ?TOP ?OBJECT) (bottom ?BOTTOM ?OBJECT)))
   (distance ?TOP ?BOTTOM ?HEIGHT))))
*/
fof(a9801,axiom,! [HEIGHT,BOTTOM,OBJECT,TOP] : (((s_instance(TOP, s_SelfConnectedObject) & s_instance(OBJECT, s_SelfConnectedObject) & s_instance(BOTTOM, s_SelfConnectedObject) & s_instance(HEIGHT, s_LengthMeasure)) => ((s_height(OBJECT, HEIGHT) & (s_top(TOP, OBJECT) & s_bottom(BOTTOM, OBJECT))) => s_distance(TOP, BOTTOM, HEIGHT))))).

/*
(instance MereologicalSumFn SpatialRelation)
*/
fof(a9802,axiom,s_instance(s_MereologicalSumFn_m, s_SpatialRelation)).

/*
(instance MereologicalSumFn BinaryFunction)
*/
fof(a9803,axiom,s_instance(s_MereologicalSumFn_m, s_BinaryFunction)).

/*
(instance MereologicalSumFn TotalValuedRelation)
*/
fof(a9804,axiom,s_instance(s_MereologicalSumFn_m, s_TotalValuedRelation)).

/*
(range MereologicalSumFn Object)
*/
fof(a9805,axiom,s_range(s_MereologicalSumFn_m, s_Object)).

/*
(forall (?OBJ3 ?OBJ2 ?OBJ1)
 (forall (?PART)
  (=> (instance ?PART Object)
   (=>
    (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)
         (instance ?OBJ3 Object))
    (=> (equal ?OBJ3 (MereologicalSumFn ?OBJ1 ?OBJ2))
     (<=> (part ?PART ?OBJ3)
      (or (part ?PART ?OBJ1) (part ?PART ?OBJ2))))))))
*/
fof(a9806,axiom,! [OBJ3,OBJ2,OBJ1] : (! [PART] : ((s_instance(PART, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object) & s_instance(OBJ3, s_Object)) => ((OBJ3 = s_MereologicalSumFn(OBJ1, OBJ2)) => (s_part(PART, OBJ3) <=> (s_part(PART, OBJ1) | s_part(PART, OBJ2))))))))).

/*
(instance MereologicalProductFn SpatialRelation)
*/
fof(a9807,axiom,s_instance(s_MereologicalProductFn_m, s_SpatialRelation)).

/*
(instance MereologicalProductFn BinaryFunction)
*/
fof(a9808,axiom,s_instance(s_MereologicalProductFn_m, s_BinaryFunction)).

/*
(instance MereologicalProductFn TotalValuedRelation)
*/
fof(a9809,axiom,s_instance(s_MereologicalProductFn_m, s_TotalValuedRelation)).

/*
(range MereologicalProductFn Object)
*/
fof(a9810,axiom,s_range(s_MereologicalProductFn_m, s_Object)).

/*
(forall (?OBJ3 ?OBJ2 ?OBJ1)
 (forall (?PART)
  (=> (instance ?PART Object)
   (=>
    (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)
         (instance ?OBJ3 Object))
    (=> (equal ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2))
     (<=> (part ?PART ?OBJ3)
      (and (part ?PART ?OBJ1) (part ?PART ?OBJ2))))))))
*/
fof(a9811,axiom,! [OBJ3,OBJ2,OBJ1] : (! [PART] : ((s_instance(PART, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object) & s_instance(OBJ3, s_Object)) => ((OBJ3 = s_MereologicalProductFn(OBJ1, OBJ2)) => (s_part(PART, OBJ3) <=> (s_part(PART, OBJ1) & s_part(PART, OBJ2))))))))).

/*
(instance MereologicalDifferenceFn SpatialRelation)
*/
fof(a9812,axiom,s_instance(s_MereologicalDifferenceFn_m, s_SpatialRelation)).

/*
(instance MereologicalDifferenceFn BinaryFunction)
*/
fof(a9813,axiom,s_instance(s_MereologicalDifferenceFn_m, s_BinaryFunction)).

/*
(instance MereologicalDifferenceFn TotalValuedRelation)
*/
fof(a9814,axiom,s_instance(s_MereologicalDifferenceFn_m, s_TotalValuedRelation)).

/*
(range MereologicalDifferenceFn Object)
*/
fof(a9815,axiom,s_range(s_MereologicalDifferenceFn_m, s_Object)).

/*
(forall (?OBJ3 ?OBJ2 ?OBJ1)
 (forall (?PART)
  (=> (instance ?PART Object)
   (=>
    (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)
         (instance ?OBJ3 Object))
    (=> (equal ?OBJ3 (MereologicalDifferenceFn ?OBJ1 ?OBJ2))
     (<=> (properPart ?PART ?OBJ3)
      (and (properPart ?PART ?OBJ1)
           (not (properPart ?PART ?OBJ2)))))))))
*/
fof(a9816,axiom,! [OBJ3,OBJ2,OBJ1] : (! [PART] : ((s_instance(PART, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object) & s_instance(OBJ3, s_Object)) => ((OBJ3 = s_MereologicalDifferenceFn(OBJ1, OBJ2)) => (s_properPart(PART, OBJ3) <=> (s_properPart(PART, OBJ1) & (~ s_properPart(PART, OBJ2)))))))))).

/*
(instance hole BinaryPredicate)
*/
fof(a9817,axiom,s_instance(s_hole_m, s_BinaryPredicate)).

/*
(instance hole SpatialRelation)
*/
fof(a9818,axiom,s_instance(s_hole_m, s_SpatialRelation)).

/*
(instance hole AsymmetricRelation)
*/
fof(a9819,axiom,s_instance(s_hole_m, s_AsymmetricRelation)).

/*
(instance Hole SetOrClass)
*/
fof(a9820,axiom,s_instance(s_Hole, s_SetOrClass)).

/*
(subclass Hole Region)
*/
fof(a9821,axiom,s_subclass(s_Hole, s_Region)).

/*
(forall (?HOLE)
 (forall (?OBJ)
  (exists (?g6946)
   (and (instance ?g6946 SelfConnectedObject)
        (=> (instance ?OBJ SelfConnectedObject)
         (and (=> (instance ?HOLE Hole) (hole ?HOLE ?g6946))
              (=> (hole ?HOLE ?OBJ) (instance ?HOLE Hole))))))))
*/
fof(a9822,axiom,! [HOLE] : (! [OBJ] : (? [G6946] : ((s_instance(G6946, s_SelfConnectedObject) & (s_instance(OBJ, s_SelfConnectedObject) => ((s_instance(HOLE, s_Hole) => s_hole(HOLE, G6946)) & (s_hole(HOLE, OBJ) => s_instance(HOLE, s_Hole))))))))).

/*
(forall (?OBJ ?HOLE)
 (=> (and (instance ?HOLE Hole) (instance ?OBJ SelfConnectedObject))
  (=> (hole ?HOLE ?OBJ) (not (instance ?OBJ Hole)))))
*/
fof(a9823,axiom,! [OBJ,HOLE] : (((s_instance(HOLE, s_Hole) & s_instance(OBJ, s_SelfConnectedObject)) => (s_hole(HOLE, OBJ) => (~ s_instance(OBJ, s_Hole)))))).

/*
(forall (?OBJ ?HOLE)
 (=> (and (instance ?HOLE Hole) (instance ?OBJ SelfConnectedObject))
  (=> (hole ?HOLE ?OBJ) (not (overlapsSpatially ?HOLE ?OBJ)))))
*/
fof(a9824,axiom,! [OBJ,HOLE] : (((s_instance(HOLE, s_Hole) & s_instance(OBJ, s_SelfConnectedObject)) => (s_hole(HOLE, OBJ) => (~ s_overlapsSpatially(HOLE, OBJ)))))).

/*
(forall (?OBJ2 ?OBJ1 ?HOLE)
 (exists (?OBJ3)
  (and (instance ?OBJ3 SelfConnectedObject)
       (=>
        (and (instance ?HOLE Hole) (instance ?OBJ1 SelfConnectedObject)
             (instance ?OBJ2 SelfConnectedObject))
        (=> (and (hole ?HOLE ?OBJ1) (hole ?HOLE ?OBJ2))
         (and (properPart ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2))
              (hole ?HOLE ?OBJ3)))))))
*/
fof(a9825,axiom,! [OBJ2,OBJ1,HOLE] : (? [OBJ3] : ((s_instance(OBJ3, s_SelfConnectedObject) & ((s_instance(HOLE, s_Hole) & s_instance(OBJ1, s_SelfConnectedObject) & s_instance(OBJ2, s_SelfConnectedObject)) => ((s_hole(HOLE, OBJ1) & s_hole(HOLE, OBJ2)) => (s_properPart(OBJ3, s_MereologicalProductFn(OBJ1, OBJ2)) & s_hole(HOLE, OBJ3)))))))).

/*
(forall (?HOLE2 ?OBJ ?HOLE1)
 (forall (?HOLE3)
  (=> (instance ?HOLE3 Hole)
   (=>
    (and (instance ?HOLE1 Hole) (instance ?OBJ SelfConnectedObject)
         (instance ?HOLE2 Hole))
    (=> (and (hole ?HOLE1 ?OBJ) (hole ?HOLE2 ?OBJ))
     (=> (part ?HOLE3 (MereologicalSumFn ?HOLE1 ?HOLE2))
      (hole ?HOLE3 ?OBJ)))))))
*/
fof(a9826,axiom,! [HOLE2,OBJ,HOLE1] : (! [HOLE3] : ((s_instance(HOLE3, s_Hole) => ((s_instance(HOLE1, s_Hole) & s_instance(OBJ, s_SelfConnectedObject) & s_instance(HOLE2, s_Hole)) => ((s_hole(HOLE1, OBJ) & s_hole(HOLE2, OBJ)) => (s_part(HOLE3, s_MereologicalSumFn(HOLE1, HOLE2)) => s_hole(HOLE3, OBJ)))))))).

/*
(forall (?OBJ2 ?OBJ1 ?HOLE)
 (=>
  (and (instance ?HOLE Hole) (instance ?OBJ1 SelfConnectedObject)
       (instance ?OBJ2 SelfConnectedObject))
  (=> (and (hole ?HOLE ?OBJ1) (part ?OBJ1 ?OBJ2))
   (or (overlapsSpatially ?HOLE ?OBJ2) (hole ?HOLE ?OBJ2)))))
*/
fof(a9827,axiom,! [OBJ2,OBJ1,HOLE] : (((s_instance(HOLE, s_Hole) & s_instance(OBJ1, s_SelfConnectedObject) & s_instance(OBJ2, s_SelfConnectedObject)) => ((s_hole(HOLE, OBJ1) & s_part(OBJ1, OBJ2)) => (s_overlapsSpatially(HOLE, OBJ2) | s_hole(HOLE, OBJ2)))))).

/*
(forall (?OBJ1 ?HOLE1 ?OBJ2 ?HOLE2)
 (=>
  (and (instance ?HOLE2 Hole) (instance ?OBJ2 SelfConnectedObject)
       (instance ?HOLE1 Hole) (instance ?OBJ1 SelfConnectedObject))
  (=>
   (and (hole ?HOLE1 ?OBJ1)
        (and (hole ?HOLE2 ?OBJ2) (overlapsSpatially ?HOLE1 ?HOLE2)))
   (overlapsSpatially ?OBJ1 ?OBJ2))))
*/
fof(a9828,axiom,! [OBJ1,HOLE1,OBJ2,HOLE2] : (((s_instance(HOLE2, s_Hole) & s_instance(OBJ2, s_SelfConnectedObject) & s_instance(HOLE1, s_Hole) & s_instance(OBJ1, s_SelfConnectedObject)) => ((s_hole(HOLE1, OBJ1) & (s_hole(HOLE2, OBJ2) & s_overlapsSpatially(HOLE1, HOLE2))) => s_overlapsSpatially(OBJ1, OBJ2))))).

/*
(forall (?HOLE1)
 (exists (?HOLE2)
  (and (instance ?HOLE2 Object)
       (=> (instance ?HOLE1 Hole) (properPart ?HOLE2 ?HOLE1)))))
*/
fof(a9829,axiom,! [HOLE1] : (? [HOLE2] : ((s_instance(HOLE2, s_Object) & (s_instance(HOLE1, s_Hole) => s_properPart(HOLE2, HOLE1)))))).

/*
(instance HoleHostFn SpatialRelation)
*/
fof(a9830,axiom,s_instance(s_HoleHostFn_m, s_SpatialRelation)).

/*
(instance HoleHostFn UnaryFunction)
*/
fof(a9831,axiom,s_instance(s_HoleHostFn_m, s_UnaryFunction)).

/*
(instance HoleHostFn TotalValuedRelation)
*/
fof(a9832,axiom,s_instance(s_HoleHostFn_m, s_TotalValuedRelation)).

/*
(instance HoleHostFn AsymmetricRelation)
*/
fof(a9833,axiom,s_instance(s_HoleHostFn_m, s_AsymmetricRelation)).

/*
(range HoleHostFn Object)
*/
fof(a9834,axiom,s_range(s_HoleHostFn_m, s_Object)).

/*
(forall (?OBJ ?HOLE)
 (=> (and (instance ?HOLE Hole) (instance ?OBJ SelfConnectedObject))
  (=> (hole ?HOLE ?OBJ) (connected ?HOLE ?OBJ))))
*/
fof(a9835,axiom,! [OBJ,HOLE] : (((s_instance(HOLE, s_Hole) & s_instance(OBJ, s_SelfConnectedObject)) => (s_hole(HOLE, OBJ) => s_connected(HOLE, OBJ))))).

/*
(forall (?HOLE1 ?HOLE2)
 (exists (?OBJ)
  (=> (instance ?HOLE2 Object)
   (=> (and (instance ?HOLE1 Hole) (properPart ?HOLE2 ?HOLE1))
    (and (meetsSpatially ?HOLE1 ?OBJ)
         (not (meetsSpatially ?HOLE2 ?OBJ)))))))
*/
fof(a9836,axiom,! [HOLE1,HOLE2] : (? [OBJ] : ((s_instance(HOLE2, s_Object) => ((s_instance(HOLE1, s_Hole) & s_properPart(HOLE2, HOLE1)) => (s_meetsSpatially(HOLE1, OBJ) & (~ s_meetsSpatially(HOLE2, OBJ)))))))).

/*
(instance Fillable ShapeAttribute)
*/
fof(a9837,axiom,s_instance(s_Fillable, s_ShapeAttribute)).

/*
(forall (?HOLE ?OBJ)
 (forall (?TIME)
  (=> (instance ?TIME TimePosition)
   (=> (and (instance ?OBJ Object) (instance ?HOLE Hole))
    (=> (holdsDuring ?TIME (fills ?OBJ ?HOLE))
     (attribute ?HOLE Fillable))))))
*/
%% no translation to TPTP available.

/*
(forall (?HOLE1)
 (forall (?HOLE2)
  (exists (?g6955)
   (=> (instance ?HOLE1 Object)
    (and (=> (attribute ?HOLE1 Fillable)
          (and (instance ?g6955 Hole) (part ?HOLE1 ?g6955)))
         (=> (and (instance ?HOLE2 Hole) (part ?HOLE1 ?HOLE2))
          (attribute ?HOLE1 Fillable)))))))
*/
fof(a9838,axiom,! [HOLE1] : (! [HOLE2] : (? [G6955] : ((s_instance(HOLE1, s_Object) => ((s_attribute(HOLE1, s_Fillable) => (s_instance(G6955, s_Hole) & s_part(HOLE1, G6955))) & ((s_instance(HOLE2, s_Hole) & s_part(HOLE1, HOLE2)) => s_attribute(HOLE1, s_Fillable)))))))).

/*
(subrelation partiallyFills located)
*/
fof(a9839,axiom,s_subrelation(s_partiallyFills_m, s_located_m)).

/*
(instance partiallyFills SpatialRelation)
*/
fof(a9840,axiom,s_instance(s_partiallyFills_m, s_SpatialRelation)).

/*
(instance partiallyFills AsymmetricRelation)
*/
fof(a9841,axiom,s_instance(s_partiallyFills_m, s_AsymmetricRelation)).

/*
(forall (?HOLE1 ?OBJ)
 (exists (?HOLE2)
  (and (instance ?HOLE2 Hole)
       (=> (and (instance ?OBJ Object) (instance ?HOLE1 Hole))
        (=> (partiallyFills ?OBJ ?HOLE1)
         (and (part ?HOLE2 ?HOLE1) (completelyFills ?OBJ ?HOLE2)))))))
*/
fof(a9842,axiom,! [HOLE1,OBJ] : (? [HOLE2] : ((s_instance(HOLE2, s_Hole) & ((s_instance(OBJ, s_Object) & s_instance(HOLE1, s_Hole)) => (s_partiallyFills(OBJ, HOLE1) => (s_part(HOLE2, HOLE1) & s_completelyFills(OBJ, HOLE2)))))))).

/*
(instance properlyFills AsymmetricRelation)
*/
fof(a9843,axiom,s_instance(s_properlyFills_m, s_AsymmetricRelation)).

/*
(subrelation properlyFills partiallyFills)
*/
fof(a9844,axiom,s_subrelation(s_properlyFills_m, s_partiallyFills_m)).

/*
(forall (?HOLE1 ?OBJ)
 (exists (?HOLE2)
  (and (instance ?HOLE2 Hole)
       (=> (and (instance ?OBJ Object) (instance ?HOLE1 Hole))
        (=> (properlyFills ?OBJ ?HOLE1)
         (and (part ?HOLE2 ?HOLE1) (fills ?OBJ ?HOLE2)))))))
*/
fof(a9845,axiom,! [HOLE1,OBJ] : (? [HOLE2] : ((s_instance(HOLE2, s_Hole) & ((s_instance(OBJ, s_Object) & s_instance(HOLE1, s_Hole)) => (s_properlyFills(OBJ, HOLE1) => (s_part(HOLE2, HOLE1) & s_fills(OBJ, HOLE2)))))))).

/*
(instance completelyFills AsymmetricRelation)
*/
fof(a9846,axiom,s_instance(s_completelyFills_m, s_AsymmetricRelation)).

/*
(subrelation completelyFills partiallyFills)
*/
fof(a9847,axiom,s_subrelation(s_completelyFills_m, s_partiallyFills_m)).

/*
(forall (?HOLE ?OBJ1)
 (exists (?OBJ2)
  (and (instance ?OBJ2 Object)
       (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole))
        (=> (completelyFills ?OBJ1 ?HOLE)
         (and (part ?OBJ2 ?OBJ1) (fills ?OBJ2 ?HOLE)))))))
*/
fof(a9848,axiom,! [HOLE,OBJ1] : (? [OBJ2] : ((s_instance(OBJ2, s_Object) & ((s_instance(OBJ1, s_Object) & s_instance(HOLE, s_Hole)) => (s_completelyFills(OBJ1, HOLE) => (s_part(OBJ2, OBJ1) & s_fills(OBJ2, HOLE)))))))).

/*
(instance fills AsymmetricRelation)
*/
fof(a9849,axiom,s_instance(s_fills_m, s_AsymmetricRelation)).

/*
(subrelation fills completelyFills)
*/
fof(a9850,axiom,s_subrelation(s_fills_m, s_completelyFills_m)).

/*
(subrelation fills properlyFills)
*/
fof(a9851,axiom,s_subrelation(s_fills_m, s_properlyFills_m)).

/*
(forall (?OBJ2 ?HOLE ?OBJ1)
 (=>
  (and (instance ?OBJ1 Object) (instance ?HOLE Hole)
       (instance ?OBJ2 Object))
  (=> (and (fills ?OBJ1 ?HOLE) (attribute ?OBJ2 Fillable))
   (not (overlapsSpatially ?OBJ1 ?OBJ2)))))
*/
fof(a9852,axiom,! [OBJ2,HOLE,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(HOLE, s_Hole) & s_instance(OBJ2, s_Object)) => ((s_fills(OBJ1, HOLE) & s_attribute(OBJ2, s_Fillable)) => (~ s_overlapsSpatially(OBJ1, OBJ2)))))).

/*
(forall (?HOLE ?OBJ1)
 (forall (?OBJ2)
  (=> (instance ?OBJ2 Object)
   (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole))
    (=> (completelyFills ?OBJ1 ?HOLE)
     (=> (connected ?OBJ2 ?HOLE) (connected ?OBJ2 ?OBJ1)))))))
*/
fof(a9853,axiom,! [HOLE,OBJ1] : (! [OBJ2] : ((s_instance(OBJ2, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(HOLE, s_Hole)) => (s_completelyFills(OBJ1, HOLE) => (s_connected(OBJ2, HOLE) => s_connected(OBJ2, OBJ1)))))))).

/*
(forall (?OBJ2 ?HOLE ?OBJ1)
 (=>
  (and (instance ?OBJ1 Object) (instance ?HOLE Hole)
       (instance ?OBJ2 Object))
  (=> (and (properlyFills ?OBJ1 ?HOLE) (connected ?OBJ2 ?OBJ1))
   (connected ?HOLE ?OBJ2))))
*/
fof(a9854,axiom,! [OBJ2,HOLE,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(HOLE, s_Hole) & s_instance(OBJ2, s_Object)) => ((s_properlyFills(OBJ1, HOLE) & s_connected(OBJ2, OBJ1)) => s_connected(HOLE, OBJ2))))).

/*
(forall (?HOLE2 ?HOLE1 ?OBJ)
 (=>
  (and (instance ?OBJ Object) (instance ?HOLE1 Hole)
       (instance ?HOLE2 Hole))
  (=> (and (fills ?OBJ ?HOLE1) (properPart ?HOLE2 ?HOLE1))
   (completelyFills ?OBJ ?HOLE2))))
*/
fof(a9855,axiom,! [HOLE2,HOLE1,OBJ] : (((s_instance(OBJ, s_Object) & s_instance(HOLE1, s_Hole) & s_instance(HOLE2, s_Hole)) => ((s_fills(OBJ, HOLE1) & s_properPart(HOLE2, HOLE1)) => s_completelyFills(OBJ, HOLE2))))).

/*
(forall (?OBJ2 ?HOLE ?OBJ1)
 (=>
  (and (instance ?OBJ1 Object) (instance ?HOLE Hole)
       (instance ?OBJ2 Object))
  (=> (and (fills ?OBJ1 ?HOLE) (properPart ?OBJ2 ?OBJ1))
   (properlyFills ?OBJ2 ?HOLE))))
*/
fof(a9856,axiom,! [OBJ2,HOLE,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(HOLE, s_Hole) & s_instance(OBJ2, s_Object)) => ((s_fills(OBJ1, HOLE) & s_properPart(OBJ2, OBJ1)) => s_properlyFills(OBJ2, HOLE))))).

/*
(instance HoleSkinFn SpatialRelation)
*/
fof(a9857,axiom,s_instance(s_HoleSkinFn_m, s_SpatialRelation)).

/*
(instance HoleSkinFn UnaryFunction)
*/
fof(a9858,axiom,s_instance(s_HoleSkinFn_m, s_UnaryFunction)).

/*
(instance HoleSkinFn TotalValuedRelation)
*/
fof(a9859,axiom,s_instance(s_HoleSkinFn_m, s_TotalValuedRelation)).

/*
(instance HoleSkinFn AsymmetricRelation)
*/
fof(a9860,axiom,s_instance(s_HoleSkinFn_m, s_AsymmetricRelation)).

/*
(range HoleSkinFn Object)
*/
fof(a9861,axiom,s_range(s_HoleSkinFn_m, s_Object)).

/*
(forall (?HOLE ?OBJ1)
 (forall (?OBJ2)
  (forall (?OBJ3)
   (exists (?g6964)
    (and (instance ?g6964 Object)
         (=> (instance ?OBJ3 Object)
          (=> (instance ?OBJ2 Object)
           (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole))
            (=> (equal ?OBJ1 (HoleSkinFn ?HOLE))
             (and (=> (overlapsSpatially ?OBJ2 ?OBJ1)
                   (and (superficialPart ?g6964 (HoleHostFn ?HOLE))
                        (and (meetsSpatially ?HOLE ?g6964)
                             (overlapsSpatially ?OBJ2 ?g6964))))
                  (=>
                   (and (superficialPart ?OBJ3 (HoleHostFn ?HOLE))
                        (and (meetsSpatially ?HOLE ?OBJ3)
                             (overlapsSpatially ?OBJ2 ?OBJ3)))
                   (overlapsSpatially ?OBJ2 ?OBJ1))))))))))))
*/
fof(a9862,axiom,! [HOLE,OBJ1] : (! [OBJ2] : (! [OBJ3] : (? [G6964] : ((s_instance(G6964, s_Object) & (s_instance(OBJ3, s_Object) => (s_instance(OBJ2, s_Object) => ((s_instance(OBJ1, s_Object) & s_instance(HOLE, s_Hole)) => ((OBJ1 = s_HoleSkinFn(HOLE)) => ((s_overlapsSpatially(OBJ2, OBJ1) => (s_superficialPart(G6964, s_HoleHostFn(HOLE)) & (s_meetsSpatially(HOLE, G6964) & s_overlapsSpatially(OBJ2, G6964)))) & ((s_superficialPart(OBJ3, s_HoleHostFn(HOLE)) & (s_meetsSpatially(HOLE, OBJ3) & s_overlapsSpatially(OBJ2, OBJ3))) => s_overlapsSpatially(OBJ2, OBJ1))))))))))))).

/*
(instance subProcess BinaryPredicate)
*/
fof(a9863,axiom,s_instance(s_subProcess_m, s_BinaryPredicate)).

/*
(instance subProcess PartialOrderingRelation)
*/
fof(a9864,axiom,s_instance(s_subProcess_m, s_PartialOrderingRelation)).

/*
(forall (?PROC ?SUBPROC)
 (=> (and (instance ?SUBPROC Process) (instance ?PROC Process))
  (=> (subProcess ?SUBPROC ?PROC)
   (temporalPart (WhenFn ?SUBPROC) (WhenFn ?PROC)))))
*/
fof(a9865,axiom,! [PROC,SUBPROC] : (((s_instance(SUBPROC, s_Process) & s_instance(PROC, s_Process)) => (s_subProcess(SUBPROC, PROC) => s_temporalPart(s_WhenFn(SUBPROC), s_WhenFn(PROC)))))).

/*
(subclass BiologicalProcess InternalChange)
*/
fof(a9866,axiom,s_subclass(s_BiologicalProcess, s_InternalChange)).

/*
(forall (?PROC)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?PROC BiologicalProcess)
        (and (instance ?OBJ Organism) (eventLocated ?PROC ?OBJ))))))
*/
fof(a9867,axiom,! [PROC] : (? [OBJ] : ((s_instance(OBJ, s_Object) & (s_instance(PROC, s_BiologicalProcess) => (s_instance(OBJ, s_Organism) & s_eventLocated(PROC, OBJ))))))).

/*
(forall (?ORG ?PROC)
 (=> (instance ?ORG Agent)
  (=> (and (instance ?PROC BiologicalProcess) (experiencer ?PROC ?ORG))
   (instance ?ORG Organism))))
*/
fof(a9868,axiom,! [ORG,PROC] : ((s_instance(ORG, s_Agent) => ((s_instance(PROC, s_BiologicalProcess) & s_experiencer(PROC, ORG)) => s_instance(ORG, s_Organism))))).

/*
(subclass PhysiologicProcess BiologicalProcess)
*/
fof(a9869,axiom,s_subclass(s_PhysiologicProcess, s_BiologicalProcess)).

/*
(subclass AutonomicProcess PhysiologicProcess)
*/
fof(a9870,axiom,s_subclass(s_AutonomicProcess, s_PhysiologicProcess)).

/*
(disjoint AutonomicProcess IntentionalProcess)
*/
fof(a9871,axiom,s_disjoint(s_AutonomicProcess, s_IntentionalProcess)).

/*
(instance OrganOrTissueProcess SetOrClass)
*/
fof(a9872,axiom,s_instance(s_OrganOrTissueProcess, s_SetOrClass)).

/*
(subclass OrganOrTissueProcess AutonomicProcess)
*/
fof(a9873,axiom,s_subclass(s_OrganOrTissueProcess, s_AutonomicProcess)).

/*
(disjoint OrganOrTissueProcess OrganismProcess)
*/
fof(a9874,axiom,s_disjoint(s_OrganOrTissueProcess, s_OrganismProcess)).

/*
(forall (?PROC)
 (exists (?THING)
  (and (instance ?THING Object)
       (=> (instance ?PROC OrganOrTissueProcess)
        (and (eventLocated ?PROC ?THING)
             (or (instance ?THING Organ) (instance ?THING Tissue)))))))
*/
fof(a9875,axiom,! [PROC] : (? [THING] : ((s_instance(THING, s_Object) & (s_instance(PROC, s_OrganOrTissueProcess) => (s_eventLocated(PROC, THING) & (s_instance(THING, s_Organ) | s_instance(THING, s_Tissue)))))))).

/*
(instance PhysiologicProcess SetOrClass)
*/
fof(a9876,axiom,s_instance(s_PhysiologicProcess, s_SetOrClass)).

/*
(subclass OrganismProcess PhysiologicProcess)
*/
fof(a9877,axiom,s_subclass(s_OrganismProcess, s_PhysiologicProcess)).

/*
(instance Birth SetOrClass)
*/
fof(a9878,axiom,s_instance(s_Birth, s_SetOrClass)).

/*
(subclass Birth OrganismProcess)
*/
fof(a9879,axiom,s_subclass(s_Birth, s_OrganismProcess)).

/*
(forall (?AGENT ?BIRTH)
 (exists (?DEATH)
  (and (instance ?DEATH Process)
       (=> (instance ?AGENT Agent)
        (=> (and (instance ?BIRTH Birth) (experiencer ?BIRTH ?AGENT))
         (and (instance ?DEATH Death) (experiencer ?DEATH ?AGENT)))))))
*/
fof(a9880,axiom,! [AGENT,BIRTH] : (? [DEATH] : ((s_instance(DEATH, s_Process) & (s_instance(AGENT, s_Agent) => ((s_instance(BIRTH, s_Birth) & s_experiencer(BIRTH, AGENT)) => (s_instance(DEATH, s_Death) & s_experiencer(DEATH, AGENT)))))))).

/*
(instance Death SetOrClass)
*/
fof(a9881,axiom,s_instance(s_Death, s_SetOrClass)).

/*
(subclass Death OrganismProcess)
*/
fof(a9882,axiom,s_subclass(s_Death, s_OrganismProcess)).

/*
(forall (?DEATH ?ORG ?OBJ)
 (exists (?REM)
  (and (instance ?REM Object)
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?DEATH Death)
              (and (instance ?ORG Organism) (experiencer ?DEATH ?ORG)))
         (and (result ?DEATH ?REM)
              (and (instance ?REM OrganicObject)
                   (and (holdsDuring (FutureFn (WhenFn ?DEATH))
                         (attribute ?REM Dead))
                        (=>
                         (holdsDuring
                          (ImmediateFutureFn (WhenFn ?DEATH))
                          (part ?OBJ ?REM))
                         (holdsDuring (ImmediatePastFn (WhenFn ?DEATH))
                          (part ?OBJ ?ORG)))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Breathing OrganismProcess)
*/
fof(a9883,axiom,s_subclass(s_Breathing, s_OrganismProcess)).

/*
(instance Breathing SetOrClass)
*/
fof(a9884,axiom,s_instance(s_Breathing, s_SetOrClass)).

/*
(subclass Breathing AutonomicProcess)
*/
fof(a9885,axiom,s_subclass(s_Breathing, s_AutonomicProcess)).

/*
(subclass Ingesting OrganismProcess)
*/
fof(a9886,axiom,s_subclass(s_Ingesting, s_OrganismProcess)).

/*
(forall (?FOOD ?ACT)
 (=> (instance ?FOOD Object)
  (=> (and (instance ?ACT Ingesting) (resource ?ACT ?FOOD))
   (instance ?FOOD (FoodForFn Organism)))))
*/
fof(a9887,axiom,! [FOOD,ACT] : ((s_instance(FOOD, s_Object) => ((s_instance(ACT, s_Ingesting) & s_resource(ACT, FOOD)) => s_instance(FOOD, s_FoodForFn(s_Organism)))))).

/*
(instance Eating SetOrClass)
*/
fof(a9888,axiom,s_instance(s_Eating, s_SetOrClass)).

/*
(subclass Eating Ingesting)
*/
fof(a9889,axiom,s_subclass(s_Eating, s_Ingesting)).

/*
(forall (?FOOD ?ACT)
 (=> (instance ?FOOD Object)
  (=> (and (instance ?ACT Eating) (resource ?ACT ?FOOD))
   (attribute ?FOOD Solid))))
*/
fof(a9890,axiom,! [FOOD,ACT] : ((s_instance(FOOD, s_Object) => ((s_instance(ACT, s_Eating) & s_resource(ACT, FOOD)) => s_attribute(FOOD, s_Solid))))).

/*
(instance Drinking SetOrClass)
*/
fof(a9891,axiom,s_instance(s_Drinking, s_SetOrClass)).

/*
(instance Ingesting SetOrClass)
*/
fof(a9892,axiom,s_instance(s_Ingesting, s_SetOrClass)).

/*
(subclass Drinking Ingesting)
*/
fof(a9893,axiom,s_subclass(s_Drinking, s_Ingesting)).

/*
(forall (?FOOD ?ACT)
 (=> (instance ?FOOD Object)
  (=> (and (instance ?ACT Drinking) (resource ?ACT ?FOOD))
   (attribute ?FOOD Liquid))))
*/
fof(a9894,axiom,! [FOOD,ACT] : ((s_instance(FOOD, s_Object) => ((s_instance(ACT, s_Drinking) & s_resource(ACT, FOOD)) => s_attribute(FOOD, s_Liquid))))).

/*
(subclass Digesting OrganismProcess)
*/
fof(a9895,axiom,s_subclass(s_Digesting, s_OrganismProcess)).

/*
(instance Digesting SetOrClass)
*/
fof(a9896,axiom,s_instance(s_Digesting, s_SetOrClass)).

/*
(subclass Digesting AutonomicProcess)
*/
fof(a9897,axiom,s_subclass(s_Digesting, s_AutonomicProcess)).

/*
(forall (?ORGANISM ?DIGEST)
 (exists (?INGEST)
  (and (instance ?INGEST Process)
       (=> (instance ?ORGANISM Agent)
        (=>
         (and (instance ?DIGEST Digesting) (agent ?DIGEST ?ORGANISM))
         (and (instance ?INGEST Ingesting)
              (and (agent ?INGEST ?ORGANISM)
                   (overlapsTemporally (WhenFn ?INGEST)
                    (WhenFn ?DIGEST)))))))))
*/
fof(a9898,axiom,! [ORGANISM,DIGEST] : (? [INGEST] : ((s_instance(INGEST, s_Process) & (s_instance(ORGANISM, s_Agent) => ((s_instance(DIGEST, s_Digesting) & s_agent(DIGEST, ORGANISM)) => (s_instance(INGEST, s_Ingesting) & (s_agent(INGEST, ORGANISM) & s_overlapsTemporally(s_WhenFn(INGEST), s_WhenFn(DIGEST)))))))))).

/*
(forall (?DIGEST)
 (exists (?DECOMP)
  (and (instance ?DECOMP Process)
       (=> (instance ?DIGEST Digesting)
        (and (instance ?DECOMP ChemicalDecomposition)
             (subProcess ?DECOMP ?DIGEST))))))
*/
fof(a9899,axiom,! [DIGEST] : (? [DECOMP] : ((s_instance(DECOMP, s_Process) & (s_instance(DIGEST, s_Digesting) => (s_instance(DECOMP, s_ChemicalDecomposition) & s_subProcess(DECOMP, DIGEST))))))).

/*
(instance Growth SetOrClass)
*/
fof(a9900,axiom,s_instance(s_Growth, s_SetOrClass)).

/*
(instance AutonomicProcess SetOrClass)
*/
fof(a9901,axiom,s_instance(s_AutonomicProcess, s_SetOrClass)).

/*
(subclass Growth AutonomicProcess)
*/
fof(a9902,axiom,s_subclass(s_Growth, s_AutonomicProcess)).

/*
(instance OrganismProcess SetOrClass)
*/
fof(a9903,axiom,s_instance(s_OrganismProcess, s_SetOrClass)).

/*
(subclass Replication OrganismProcess)
*/
fof(a9904,axiom,s_subclass(s_Replication, s_OrganismProcess)).

/*
(forall (?CHILD ?PARENT ?REP)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=>
   (and (instance ?REP Replication)
        (and (agent ?REP ?PARENT) (result ?REP ?CHILD)))
   (parent ?CHILD ?PARENT))))
*/
fof(a9905,axiom,! [CHILD,PARENT,REP] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => ((s_instance(REP, s_Replication) & (s_agent(REP, PARENT) & s_result(REP, CHILD))) => s_parent(CHILD, PARENT))))).

/*
(forall (?REP)
 (exists (?BODY)
  (and (instance ?BODY Entity)
       (=> (instance ?REP Replication)
        (and (instance ?BODY ReproductiveBody) (result ?REP ?BODY))))))
*/
fof(a9906,axiom,! [REP] : (? [BODY] : ((s_instance(BODY, s_Entity) & (s_instance(REP, s_Replication) => (s_instance(BODY, s_ReproductiveBody) & s_result(REP, BODY))))))).

/*
(instance SexualReproduction SetOrClass)
*/
fof(a9907,axiom,s_instance(s_SexualReproduction, s_SetOrClass)).

/*
(subclass SexualReproduction Replication)
*/
fof(a9908,axiom,s_subclass(s_SexualReproduction, s_Replication)).

/*
(disjoint SexualReproduction AsexualReproduction)
*/
fof(a9909,axiom,s_disjoint(s_SexualReproduction, s_AsexualReproduction)).

/*
(forall (?ORGANISM ?REP)
 (exists (?MOTHER ?FATHER)
  (and (and (instance ?FATHER Organism) (instance ?MOTHER Organism))
       (=> (instance ?ORGANISM Organism)
        (=>
         (and (instance ?REP SexualReproduction)
              (result ?REP ?ORGANISM))
         (and (mother ?ORGANISM ?MOTHER)
              (father ?ORGANISM ?FATHER)))))))
*/
fof(a9910,axiom,! [ORGANISM,REP] : (? [MOTHER,FATHER] : (((s_instance(FATHER, s_Organism) & s_instance(MOTHER, s_Organism)) & (s_instance(ORGANISM, s_Organism) => ((s_instance(REP, s_SexualReproduction) & s_result(REP, ORGANISM)) => (s_mother(ORGANISM, MOTHER) & s_father(ORGANISM, FATHER)))))))).

/*
(instance AsexualReproduction SetOrClass)
*/
fof(a9911,axiom,s_instance(s_AsexualReproduction, s_SetOrClass)).

/*
(instance Replication SetOrClass)
*/
fof(a9912,axiom,s_instance(s_Replication, s_SetOrClass)).

/*
(subclass AsexualReproduction Replication)
*/
fof(a9913,axiom,s_subclass(s_AsexualReproduction, s_Replication)).

/*
(forall (?REP ?PARENT2 ?PARENT1 ?ORGANISM)
 (=>
  (and (instance ?PARENT2 Organism) (instance ?PARENT1 Organism)
       (instance ?ORGANISM Organism))
  (=>
   (and (instance ?REP AsexualReproduction)
        (and (result ?REP ?ORGANISM)
             (and (parent ?ORGANISM ?PARENT1)
                  (parent ?ORGANISM ?PARENT2))))
   (equal ?PARENT1 ?PARENT2))))
*/
fof(a9914,axiom,! [REP,PARENT2,PARENT1,ORGANISM] : (((s_instance(PARENT2, s_Organism) & s_instance(PARENT1, s_Organism) & s_instance(ORGANISM, s_Organism)) => ((s_instance(REP, s_AsexualReproduction) & (s_result(REP, ORGANISM) & (s_parent(ORGANISM, PARENT1) & s_parent(ORGANISM, PARENT2)))) => (PARENT1 = PARENT2))))).

/*
(subclass PsychologicalProcess BiologicalProcess)
*/
fof(a9915,axiom,s_subclass(s_PsychologicalProcess, s_BiologicalProcess)).

/*
(forall (?PROCESS)
 (exists (?ANIMAL)
  (and (instance ?ANIMAL Agent)
       (=> (instance ?PROCESS PsychologicalProcess)
        (and (instance ?ANIMAL Animal)
             (experiencer ?PROCESS ?ANIMAL))))))
*/
fof(a9916,axiom,! [PROCESS] : (? [ANIMAL] : ((s_instance(ANIMAL, s_Agent) & (s_instance(PROCESS, s_PsychologicalProcess) => (s_instance(ANIMAL, s_Animal) & s_experiencer(PROCESS, ANIMAL))))))).

/*
(instance BiologicalProcess SetOrClass)
*/
fof(a9917,axiom,s_instance(s_BiologicalProcess, s_SetOrClass)).

/*
(subclass PathologicProcess BiologicalProcess)
*/
fof(a9918,axiom,s_subclass(s_PathologicProcess, s_BiologicalProcess)).

/*
(disjoint PathologicProcess PhysiologicProcess)
*/
fof(a9919,axiom,s_disjoint(s_PathologicProcess, s_PhysiologicProcess)).

/*
(forall (?ORG ?PATH)
 (exists (?PART ?DISEASE)
  (and (and (instance ?DISEASE Attribute) (instance ?PART Object))
       (=> (instance ?ORG Agent)
        (=>
         (and (instance ?PATH PathologicProcess)
              (experiencer ?PATH ?ORG))
         (and (part ?PART ?ORG)
              (and (instance ?DISEASE DiseaseOrSyndrome)
                   (attribute ?PART ?DISEASE))))))))
*/
fof(a9920,axiom,! [ORG,PATH] : (? [PART,DISEASE] : (((s_instance(DISEASE, s_Attribute) & s_instance(PART, s_Object)) & (s_instance(ORG, s_Agent) => ((s_instance(PATH, s_PathologicProcess) & s_experiencer(PATH, ORG)) => (s_part(PART, ORG) & (s_instance(DISEASE, s_DiseaseOrSyndrome) & s_attribute(PART, DISEASE))))))))).

/*
(instance PathologicProcess SetOrClass)
*/
fof(a9921,axiom,s_instance(s_PathologicProcess, s_SetOrClass)).

/*
(subclass Injuring PathologicProcess)
*/
fof(a9922,axiom,s_subclass(s_Injuring, s_PathologicProcess)).

/*
(subclass Injuring Damaging)
*/
fof(a9923,axiom,s_subclass(s_Injuring, s_Damaging)).

/*
(forall (?INJ)
 (exists (?STRUCT)
  (and (instance ?STRUCT Entity)
       (=> (instance ?INJ Injuring)
        (and (instance ?STRUCT AnatomicalStructure)
             (patient ?INJ ?STRUCT))))))
*/
fof(a9924,axiom,! [INJ] : (? [STRUCT] : ((s_instance(STRUCT, s_Entity) & (s_instance(INJ, s_Injuring) => (s_instance(STRUCT, s_AnatomicalStructure) & s_patient(INJ, STRUCT))))))).

/*
(forall (?INJ)
 (forall (?ORGANISM)
  (exists (?g6984)
   (and (=> (instance ?INJ Injuring)
         (and (instance ?INJ Damaging)
              (and (instance ?g6984 Organism) (patient ?INJ ?g6984))))
        (=>
         (and (instance ?INJ Damaging)
              (and (instance ?ORGANISM Organism)
                   (patient ?INJ ?ORGANISM)))
         (instance ?INJ Injuring))))))
*/
fof(a9925,axiom,! [INJ] : (! [ORGANISM] : (? [G6984] : (((s_instance(INJ, s_Injuring) => (s_instance(INJ, s_Damaging) & (s_instance(G6984, s_Organism) & s_patient(INJ, G6984)))) & ((s_instance(INJ, s_Damaging) & (s_instance(ORGANISM, s_Organism) & s_patient(INJ, ORGANISM))) => s_instance(INJ, s_Injuring))))))).

/*
(instance Poisoning SetOrClass)
*/
fof(a9926,axiom,s_instance(s_Poisoning, s_SetOrClass)).

/*
(instance Injuring SetOrClass)
*/
fof(a9927,axiom,s_instance(s_Injuring, s_SetOrClass)).

/*
(subclass Poisoning Injuring)
*/
fof(a9928,axiom,s_subclass(s_Poisoning, s_Injuring)).

/*
(forall (?POISON)
 (exists (?THING)
  (and (instance ?THING Entity)
       (=> (instance ?POISON Poisoning)
        (and (patient ?POISON ?THING)
             (or (instance ?THING Organism)
                 (instance ?THING AnatomicalStructure)))))))
*/
fof(a9929,axiom,! [POISON] : (? [THING] : ((s_instance(THING, s_Entity) & (s_instance(POISON, s_Poisoning) => (s_patient(POISON, THING) & (s_instance(THING, s_Organism) | s_instance(THING, s_AnatomicalStructure)))))))).

/*
(forall (?POISON)
 (exists (?SUBSTANCE)
  (and (instance ?SUBSTANCE Object)
       (=> (instance ?POISON Poisoning)
        (and (instance ?SUBSTANCE BiologicallyActiveSubstance)
             (instrument ?POISON ?SUBSTANCE))))))
*/
fof(a9930,axiom,! [POISON] : (? [SUBSTANCE] : ((s_instance(SUBSTANCE, s_Object) & (s_instance(POISON, s_Poisoning) => (s_instance(SUBSTANCE, s_BiologicallyActiveSubstance) & s_instrument(POISON, SUBSTANCE))))))).

/*
(instance NaturalProcess SetOrClass)
*/
fof(a9931,axiom,s_instance(s_NaturalProcess, s_SetOrClass)).

/*
(subclass NaturalProcess Process)
*/
fof(a9932,axiom,s_subclass(s_NaturalProcess, s_Process)).

/*
(disjoint NaturalProcess IntentionalProcess)
*/
fof(a9933,axiom,s_disjoint(s_NaturalProcess, s_IntentionalProcess)).

/*
(subclass IntentionalProcess Process)
*/
fof(a9934,axiom,s_subclass(s_IntentionalProcess, s_Process)).

/*
(forall (?AGENT ?PROC)
 (exists (?PURP)
  (and (instance ?PURP Formula)
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?PROC IntentionalProcess) (agent ?PROC ?AGENT))
         (hasPurposeForAgent ?PROC ?PURP ?AGENT))))))
*/
fof(a9935,axiom,! [AGENT,PROC] : (? [PURP] : ((s_instance(PURP, s_Formula) & (s_instance(AGENT, s_Agent) => ((s_instance(PROC, s_IntentionalProcess) & s_agent(PROC, AGENT)) => s_hasPurposeForAgent(PROC, PURP, AGENT))))))).

/*
(forall (?PROC)
 (exists (?AGENT)
  (and (instance ?AGENT Agent)
       (=> (instance ?PROC IntentionalProcess)
        (and (instance ?AGENT CognitiveAgent) (agent ?PROC ?AGENT))))))
*/
fof(a9936,axiom,! [PROC] : (? [AGENT] : ((s_instance(AGENT, s_Agent) & (s_instance(PROC, s_IntentionalProcess) => (s_instance(AGENT, s_CognitiveAgent) & s_agent(PROC, AGENT))))))).

/*
(forall (?HUMAN ?PROC)
 (=>
  (and (instance ?PROC IntentionalProcess)
       (and (agent ?PROC ?HUMAN) (instance ?HUMAN Animal)))
  (holdsDuring (WhenFn ?PROC) (attribute ?HUMAN Awake))))
*/
%% no translation to TPTP available.

/*
(subclass IntentionalPsychologicalProcess IntentionalProcess)
*/
fof(a9937,axiom,s_subclass(s_IntentionalPsychologicalProcess, s_IntentionalProcess)).

/*
(subclass IntentionalPsychologicalProcess PsychologicalProcess)
*/
fof(a9938,axiom,s_subclass(s_IntentionalPsychologicalProcess, s_PsychologicalProcess)).

/*
(subclass RecreationOrExercise IntentionalProcess)
*/
fof(a9939,axiom,s_subclass(s_RecreationOrExercise, s_IntentionalProcess)).

/*
(subclass OrganizationalProcess IntentionalProcess)
*/
fof(a9940,axiom,s_subclass(s_OrganizationalProcess, s_IntentionalProcess)).

/*
(forall (?AGENT ?ACT)
 (exists (?ORG)
  (and (instance ?ORG Collection)
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?ACT OrganizationalProcess)
              (agent ?ACT ?AGENT))
         (or (instance ?AGENT Organization)
             (and (instance ?ORG Organization)
                  (member ?AGENT ?ORG))))))))
*/
fof(a9941,axiom,! [AGENT,ACT] : (? [ORG] : ((s_instance(ORG, s_Collection) & (s_instance(AGENT, s_Agent) => ((s_instance(ACT, s_OrganizationalProcess) & s_agent(ACT, AGENT)) => (s_instance(AGENT, s_Organization) | (s_instance(ORG, s_Organization) & s_member(AGENT, ORG))))))))).

/*
(instance Election SetOrClass)
*/
fof(a9942,axiom,s_instance(s_Election, s_SetOrClass)).

/*
(subclass Election OrganizationalProcess)
*/
fof(a9943,axiom,s_subclass(s_Election, s_OrganizationalProcess)).

/*
(instance ReligiousProcess SetOrClass)
*/
fof(a9944,axiom,s_instance(s_ReligiousProcess, s_SetOrClass)).

/*
(subclass ReligiousProcess OrganizationalProcess)
*/
fof(a9945,axiom,s_subclass(s_ReligiousProcess, s_OrganizationalProcess)).

/*
(forall (?AGENT ?ACT)
 (exists (?ORG)
  (and (instance ?ORG Collection)
       (=> (instance ?AGENT Agent)
        (=> (and (instance ?ACT ReligiousProcess) (agent ?ACT ?AGENT))
         (or (instance ?AGENT ReligiousOrganization)
             (and (member ?AGENT ?ORG)
                  (instance ?ORG ReligiousOrganization))))))))
*/
fof(a9946,axiom,! [AGENT,ACT] : (? [ORG] : ((s_instance(ORG, s_Collection) & (s_instance(AGENT, s_Agent) => ((s_instance(ACT, s_ReligiousProcess) & s_agent(ACT, AGENT)) => (s_instance(AGENT, s_ReligiousOrganization) | (s_member(AGENT, ORG) & s_instance(ORG, s_ReligiousOrganization))))))))).

/*
(subclass JoiningAnOrganization OrganizationalProcess)
*/
fof(a9947,axiom,s_subclass(s_JoiningAnOrganization, s_OrganizationalProcess)).

/*
(forall (?ORG ?PERSON ?JOIN)
 (=> (instance ?PERSON Agent)
  (=>
   (and (instance ?JOIN JoiningAnOrganization)
        (and (instance ?ORG Organization)
             (and (agent ?JOIN ?PERSON) (patient ?JOIN ?ORG))))
   (and (holdsDuring (BeginFn (WhenFn ?JOIN))
         (not (member ?PERSON ?ORG)))
        (holdsDuring (EndFn (WhenFn ?JOIN)) (member ?PERSON ?ORG))))))
*/
%% no translation to TPTP available.

/*
(subclass LeavingAnOrganization OrganizationalProcess)
*/
fof(a9948,axiom,s_subclass(s_LeavingAnOrganization, s_OrganizationalProcess)).

/*
(disjoint LeavingAnOrganization JoiningAnOrganization)
*/
fof(a9949,axiom,s_disjoint(s_LeavingAnOrganization, s_JoiningAnOrganization)).

/*
(forall (?ORG ?PERSON ?LEAVE)
 (=> (instance ?PERSON Agent)
  (=>
   (and (instance ?LEAVE LeavingAnOrganization)
        (and (instance ?ORG Organization)
             (and (agent ?LEAVE ?PERSON) (patient ?LEAVE ?ORG))))
   (and (holdsDuring (BeginFn (WhenFn ?LEAVE)) (member ?PERSON ?ORG))
        (holdsDuring (EndFn (WhenFn ?LEAVE))
         (not (member ?PERSON ?ORG)))))))
*/
%% no translation to TPTP available.

/*
(instance Graduation SetOrClass)
*/
fof(a9950,axiom,s_instance(s_Graduation, s_SetOrClass)).

/*
(subclass Graduation LeavingAnOrganization)
*/
fof(a9951,axiom,s_subclass(s_Graduation, s_LeavingAnOrganization)).

/*
(forall (?ORG ?GRAD)
 (=> (instance ?ORG Agent)
  (=> (and (instance ?GRAD Graduation) (agent ?GRAD ?ORG))
   (instance ?ORG EducationalOrganization))))
*/
fof(a9952,axiom,! [ORG,GRAD] : ((s_instance(ORG, s_Agent) => ((s_instance(GRAD, s_Graduation) & s_agent(GRAD, ORG)) => s_instance(ORG, s_EducationalOrganization))))).

/*
(instance Matriculation SetOrClass)
*/
fof(a9953,axiom,s_instance(s_Matriculation, s_SetOrClass)).

/*
(subclass Matriculation JoiningAnOrganization)
*/
fof(a9954,axiom,s_subclass(s_Matriculation, s_JoiningAnOrganization)).

/*
(forall (?ORG ?MAT)
 (=> (instance ?ORG Agent)
  (=> (and (instance ?MAT Matriculation) (agent ?MAT ?ORG))
   (instance ?ORG EducationalOrganization))))
*/
fof(a9955,axiom,! [ORG,MAT] : ((s_instance(ORG, s_Agent) => ((s_instance(MAT, s_Matriculation) & s_agent(MAT, ORG)) => s_instance(ORG, s_EducationalOrganization))))).

/*
(instance Hiring SetOrClass)
*/
fof(a9956,axiom,s_instance(s_Hiring, s_SetOrClass)).

/*
(instance JoiningAnOrganization SetOrClass)
*/
fof(a9957,axiom,s_instance(s_JoiningAnOrganization, s_SetOrClass)).

/*
(subclass Hiring JoiningAnOrganization)
*/
fof(a9958,axiom,s_subclass(s_Hiring, s_JoiningAnOrganization)).

/*
(forall (?PERSON ?ORG ?HIRE)
 (=> (instance ?PERSON CognitiveAgent)
  (=>
   (and (instance ?HIRE Hiring)
        (and (instance ?ORG Organization)
             (and (agent ?HIRE ?ORG) (patient ?HIRE ?PERSON))))
   (and (holdsDuring (BeginFn (WhenFn ?HIRE))
         (not (employs ?ORG ?PERSON)))
        (holdsDuring (EndFn (WhenFn ?HIRE)) (employs ?ORG ?PERSON))))))
*/
%% no translation to TPTP available.

/*
(instance TerminatingEmployment SetOrClass)
*/
fof(a9959,axiom,s_instance(s_TerminatingEmployment, s_SetOrClass)).

/*
(instance LeavingAnOrganization SetOrClass)
*/
fof(a9960,axiom,s_instance(s_LeavingAnOrganization, s_SetOrClass)).

/*
(subclass TerminatingEmployment LeavingAnOrganization)
*/
fof(a9961,axiom,s_subclass(s_TerminatingEmployment, s_LeavingAnOrganization)).

/*
(forall (?PERSON ?ORG ?FIRE)
 (=> (instance ?PERSON CognitiveAgent)
  (=>
   (and (instance ?FIRE TerminatingEmployment)
        (and (instance ?ORG Organization)
             (and (agent ?FIRE ?ORG) (patient ?FIRE ?PERSON))))
   (and (holdsDuring (BeginFn (WhenFn ?FIRE)) (employs ?ORG ?PERSON))
        (holdsDuring (EndFn (WhenFn ?FIRE))
         (not (employs ?ORG ?PERSON)))))))
*/
%% no translation to TPTP available.

/*
(subclass PoliticalProcess OrganizationalProcess)
*/
fof(a9962,axiom,s_subclass(s_PoliticalProcess, s_OrganizationalProcess)).

/*
(forall (?PROC)
 (exists (?POL)
  (exists (?GOV)
   (and (instance ?GOV Collection)
        (and (instance ?POL Agent)
             (=> (instance ?PROC PoliticalProcess)
              (and (or (instance ?POL Government)
                       (and (instance ?GOV Government)
                            (member ?POL ?GOV)))
                   (or (agent ?PROC ?POL) (patient ?PROC ?POL)))))))))
*/
fof(a9963,axiom,! [PROC] : (? [POL] : (? [GOV] : ((s_instance(GOV, s_Collection) & (s_instance(POL, s_Agent) & (s_instance(PROC, s_PoliticalProcess) => ((s_instance(POL, s_Government) | (s_instance(GOV, s_Government) & s_member(POL, GOV))) & (s_agent(PROC, POL) | s_patient(PROC, POL)))))))))).

/*
(subclass JudicialProcess PoliticalProcess)
*/
fof(a9964,axiom,s_subclass(s_JudicialProcess, s_PoliticalProcess)).

/*
(forall (?ORG ?PROCESS)
 (=>
  (and (instance ?PROCESS JudicialProcess)
       (and (agent ?PROCESS ?ORG) (instance ?ORG Organization)))
  (instance ?ORG JudicialOrganization)))
*/
fof(a9965,axiom,! [ORG,PROCESS] : (((s_instance(PROCESS, s_JudicialProcess) & (s_agent(PROCESS, ORG) & s_instance(ORG, s_Organization))) => s_instance(ORG, s_JudicialOrganization)))).

/*
(instance JudicialProcess SetOrClass)
*/
fof(a9966,axiom,s_instance(s_JudicialProcess, s_SetOrClass)).

/*
(subclass LegalDecision JudicialProcess)
*/
fof(a9967,axiom,s_subclass(s_LegalDecision, s_JudicialProcess)).

/*
(instance LegalDecision SetOrClass)
*/
fof(a9968,axiom,s_instance(s_LegalDecision, s_SetOrClass)).

/*
(subclass LegalDecision Declaring)
*/
fof(a9969,axiom,s_subclass(s_LegalDecision, s_Declaring)).

/*
(forall (?DECISION)
 (exists (?ACTION)
  (and (instance ?ACTION Entity)
       (=> (instance ?DECISION LegalDecision)
        (and (instance ?ACTION LegalAction)
             (refers ?DECISION ?ACTION))))))
*/
fof(a9970,axiom,! [DECISION] : (? [ACTION] : ((s_instance(ACTION, s_Entity) & (s_instance(DECISION, s_LegalDecision) => (s_instance(ACTION, s_LegalAction) & s_refers(DECISION, ACTION))))))).

/*
(forall (?DECISION)
 (exists (?DECIDE)
  (and (instance ?DECIDE Physical)
       (=> (instance ?DECISION LegalDecision)
        (and (instance ?DECIDE Deciding)
             (earlier (WhenFn ?DECIDE) (WhenFn ?DECISION)))))))
*/
fof(a9971,axiom,! [DECISION] : (? [DECIDE] : ((s_instance(DECIDE, s_Physical) & (s_instance(DECISION, s_LegalDecision) => (s_instance(DECIDE, s_Deciding) & s_earlier(s_WhenFn(DECIDE), s_WhenFn(DECISION)))))))).

/*
(instance PoliticalProcess SetOrClass)
*/
fof(a9972,axiom,s_instance(s_PoliticalProcess, s_SetOrClass)).

/*
(subclass MilitaryProcess PoliticalProcess)
*/
fof(a9973,axiom,s_subclass(s_MilitaryProcess, s_PoliticalProcess)).

/*
(instance MilitaryProcess SetOrClass)
*/
fof(a9974,axiom,s_instance(s_MilitaryProcess, s_SetOrClass)).

/*
(subclass MilitaryProcess OrganizationalProcess)
*/
fof(a9975,axiom,s_subclass(s_MilitaryProcess, s_OrganizationalProcess)).

/*
(instance RegulatoryProcess SetOrClass)
*/
fof(a9976,axiom,s_instance(s_RegulatoryProcess, s_SetOrClass)).

/*
(subclass RegulatoryProcess Guiding)
*/
fof(a9977,axiom,s_subclass(s_RegulatoryProcess, s_Guiding)).

/*
(instance OrganizationalProcess SetOrClass)
*/
fof(a9978,axiom,s_instance(s_OrganizationalProcess, s_SetOrClass)).

/*
(subclass Managing OrganizationalProcess)
*/
fof(a9979,axiom,s_subclass(s_Managing, s_OrganizationalProcess)).

/*
(instance Managing SetOrClass)
*/
fof(a9980,axiom,s_instance(s_Managing, s_SetOrClass)).

/*
(subclass Managing Guiding)
*/
fof(a9981,axiom,s_subclass(s_Managing, s_Guiding)).

/*
(instance Planning SetOrClass)
*/
fof(a9982,axiom,s_instance(s_Planning, s_SetOrClass)).

/*
(subclass Planning IntentionalPsychologicalProcess)
*/
fof(a9983,axiom,s_subclass(s_Planning, s_IntentionalPsychologicalProcess)).

/*
(forall (?CBO ?EVENT)
 (exists (?PLAN)
  (and (instance ?PLAN Proposition)
       (=>
        (and (instance ?EVENT Planning)
             (and (result ?EVENT ?CBO)
                  (instance ?CBO ContentBearingObject)))
        (and (instance ?PLAN Plan) (containsInformation ?CBO ?PLAN))))))
*/
fof(a9984,axiom,! [CBO,EVENT] : (? [PLAN] : ((s_instance(PLAN, s_Proposition) & ((s_instance(EVENT, s_Planning) & (s_result(EVENT, CBO) & s_instance(CBO, s_ContentBearingObject))) => (s_instance(PLAN, s_Plan) & s_containsInformation(CBO, PLAN))))))).

/*
(subclass Designing IntentionalPsychologicalProcess)
*/
fof(a9985,axiom,s_subclass(s_Designing, s_IntentionalPsychologicalProcess)).

/*
(instance Designing SetOrClass)
*/
fof(a9986,axiom,s_instance(s_Designing, s_SetOrClass)).

/*
(subclass Designing ContentDevelopment)
*/
fof(a9987,axiom,s_subclass(s_Designing, s_ContentDevelopment)).

/*
(instance Interpreting SetOrClass)
*/
fof(a9988,axiom,s_instance(s_Interpreting, s_SetOrClass)).

/*
(subclass Interpreting IntentionalPsychologicalProcess)
*/
fof(a9989,axiom,s_subclass(s_Interpreting, s_IntentionalPsychologicalProcess)).

/*
(forall (?CONTENT ?AGENT ?INTERPRET)
 (exists (?PROP)
  (and (instance ?PROP Proposition)
       (=> (instance ?AGENT CognitiveAgent)
        (=>
         (and (instance ?INTERPRET Interpreting)
              (and (agent ?INTERPRET ?AGENT)
                   (and (patient ?INTERPRET ?CONTENT)
                        (instance ?CONTENT ContentBearingObject))))
         (holdsDuring (EndFn (WhenFn ?INTERPRET))
          (believes ?AGENT (containsInformation ?CONTENT ?PROP))))))))
*/
%% no translation to TPTP available.

/*
(subclass QuantityChange InternalChange)
*/
fof(a9990,axiom,s_subclass(s_QuantityChange, s_InternalChange)).

/*
(partition3 QuantityChange Increasing Decreasing)
*/
fof(a9991,axiom,s_partition3(s_QuantityChange, s_Increasing, s_Decreasing)).

/*
(subclass Increasing QuantityChange)
*/
fof(a9992,axiom,s_subclass(s_Increasing, s_QuantityChange)).

/*
(forall (?OBJ ?INCREASE)
 (exists (?UNIT ?QUANT1 ?QUANT2)
  (and (and (instance ?QUANT2 Quantity) (instance ?QUANT1 Quantity)
            (instance ?UNIT UnitOfMeasure))
       (=> (instance ?OBJ RealNumber)
        (=>
         (and (instance ?INCREASE Increasing) (patient ?INCREASE ?OBJ))
         (and (holdsDuring (BeginFn (WhenFn ?INCREASE))
               (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
              (and (holdsDuring (EndFn (WhenFn ?INCREASE))
                    (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
                   (greaterThan ?QUANT2 ?QUANT1))))))))
*/
%% no translation to TPTP available.

/*
(instance Heating SetOrClass)
*/
fof(a9993,axiom,s_instance(s_Heating, s_SetOrClass)).

/*
(instance Increasing SetOrClass)
*/
fof(a9994,axiom,s_instance(s_Increasing, s_SetOrClass)).

/*
(subclass Heating Increasing)
*/
fof(a9995,axiom,s_subclass(s_Heating, s_Increasing)).

/*
(disjoint Heating Cooling)
*/
fof(a9996,axiom,s_disjoint(s_Heating, s_Cooling)).

/*
(forall (?OBJ ?HEAT)
 (exists (?UNIT ?QUANT1 ?QUANT2)
  (and (and (instance ?QUANT2 Quantity) (instance ?QUANT1 Quantity)
            (instance ?UNIT UnitOfMeasure))
       (=> (instance ?OBJ RealNumber)
        (=> (and (instance ?HEAT Heating) (patient ?HEAT ?OBJ))
         (and (instance ?UNIT TemperatureMeasure)
              (and (holdsDuring (BeginFn (WhenFn ?HEAT))
                    (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
                   (and (holdsDuring (EndFn (WhenFn ?HEAT))
                         (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
                        (greaterThan ?QUANT2 ?QUANT1)))))))))
*/
%% no translation to TPTP available.

/*
(instance QuantityChange SetOrClass)
*/
fof(a9997,axiom,s_instance(s_QuantityChange, s_SetOrClass)).

/*
(subclass Decreasing QuantityChange)
*/
fof(a9998,axiom,s_subclass(s_Decreasing, s_QuantityChange)).

/*
(forall (?OBJ ?DECREASE)
 (exists (?UNIT ?QUANT1 ?QUANT2)
  (and (and (instance ?QUANT2 Quantity) (instance ?QUANT1 Quantity)
            (instance ?UNIT UnitOfMeasure))
       (=> (instance ?OBJ RealNumber)
        (=>
         (and (instance ?DECREASE Decreasing) (patient ?DECREASE ?OBJ))
         (and (holdsDuring (BeginFn (WhenFn ?DECREASE))
               (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
              (and (holdsDuring (EndFn (WhenFn ?DECREASE))
                    (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
                   (lessThan ?QUANT2 ?QUANT1))))))))
*/
%% no translation to TPTP available.

/*
(instance Cooling SetOrClass)
*/
fof(a9999,axiom,s_instance(s_Cooling, s_SetOrClass)).

/*
(instance Decreasing SetOrClass)
*/
fof(a10000,axiom,s_instance(s_Decreasing, s_SetOrClass)).

/*
(subclass Cooling Decreasing)
*/
fof(a10001,axiom,s_subclass(s_Cooling, s_Decreasing)).

/*
(forall (?OBJ ?COOL)
 (exists (?UNIT ?QUANT1 ?QUANT2)
  (and (and (instance ?QUANT2 Quantity) (instance ?QUANT1 Quantity)
            (instance ?UNIT UnitOfMeasure))
       (=> (instance ?OBJ RealNumber)
        (=> (and (instance ?COOL Cooling) (patient ?COOL ?OBJ))
         (and (instance ?UNIT TemperatureMeasure)
              (and (holdsDuring (BeginFn (WhenFn ?COOL))
                    (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
                   (and (holdsDuring (EndFn (WhenFn ?COOL))
                         (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
                        (lessThan ?QUANT2 ?QUANT1)))))))))
*/
%% no translation to TPTP available.

/*
(instance moves CaseRole)
*/
fof(a10002,axiom,s_instance(s_moves_m, s_CaseRole)).

/*
(instance moves TotalValuedRelation)
*/
fof(a10003,axiom,s_instance(s_moves_m, s_TotalValuedRelation)).

/*
(subrelation moves involvedInEvent)
*/
fof(a10004,axiom,s_subrelation(s_moves_m, s_involvedInEvent_m)).

/*
(instance changesLocation CaseRole)
*/
fof(a10005,axiom,s_instance(s_changesLocation_m, s_CaseRole)).

/*
(instance changesLocation TotalValuedRelation)
*/
fof(a10006,axiom,s_instance(s_changesLocation_m, s_TotalValuedRelation)).

/*
(subrelation changesLocation moves)
*/
fof(a10007,axiom,s_subrelation(s_changesLocation_m, s_moves_m)).

/*
(forall (?OBJ ?EVENT)
 (=> (and (instance ?EVENT Translocation) (instance ?OBJ Agent))
  (=> (changesLocation ?EVENT ?OBJ)
   (and (instance ?EVENT Translocation)
        (and (instance ?OBJ Object)
             (or (patient ?EVENT ?OBJ)
                 (or (agent ?EVENT ?OBJ)
                     (experiencer ?EVENT ?OBJ))))))))
*/
fof(a10008,axiom,! [OBJ,EVENT] : (((s_instance(EVENT, s_Translocation) & s_instance(OBJ, s_Agent)) => (s_changesLocation(EVENT, OBJ) => (s_instance(EVENT, s_Translocation) & (s_instance(OBJ, s_Object) & (s_patient(EVENT, OBJ) | (s_agent(EVENT, OBJ) | s_experiencer(EVENT, OBJ))))))))).

/*
(subclass Motion Process)
*/
fof(a10009,axiom,s_subclass(s_Motion, s_Process)).

/*
(forall (?MOTION)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?MOTION Motion)
        (and (instance ?OBJ Object) (moves ?MOTION ?OBJ))))))
*/
fof(a10010,axiom,! [MOTION] : (? [OBJ] : ((s_instance(OBJ, s_Object) & (s_instance(MOTION, s_Motion) => (s_instance(OBJ, s_Object) & s_moves(MOTION, OBJ))))))).

/*
(forall (?PLACE ?OBJ ?MOTION)
 (=> (and (instance ?PLACE Object) (instance ?OBJ Object))
  (=>
   (and (instance ?MOTION Motion)
        (and (moves ?MOTION ?OBJ) (origin ?MOTION ?PLACE)))
   (holdsDuring (BeginFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))))
*/
%% no translation to TPTP available.

/*
(forall (?PLACE ?OBJ ?MOTION)
 (=> (and (instance ?PLACE Object) (instance ?OBJ Object))
  (=>
   (and (instance ?MOTION Motion)
        (and (moves ?MOTION ?OBJ) (destination ?MOTION ?PLACE)))
   (holdsDuring (EndFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))))
*/
%% no translation to TPTP available.

/*
(instance MotionUpward SetOrClass)
*/
fof(a10011,axiom,s_instance(s_MotionUpward, s_SetOrClass)).

/*
(subclass MotionUpward Motion)
*/
fof(a10012,axiom,s_subclass(s_MotionUpward, s_Motion)).

/*
(disjoint MotionUpward MotionDownward)
*/
fof(a10013,axiom,s_disjoint(s_MotionUpward, s_MotionDownward)).

/*
(subclass MotionDownward Motion)
*/
fof(a10014,axiom,s_subclass(s_MotionDownward, s_Motion)).

/*
(instance path CaseRole)
*/
fof(a10015,axiom,s_instance(s_path_m, s_CaseRole)).

/*
(instance path TotalValuedRelation)
*/
fof(a10016,axiom,s_instance(s_path_m, s_TotalValuedRelation)).

/*
(subrelation path eventPartlyLocated)
*/
fof(a10017,axiom,s_subrelation(s_path_m, s_eventPartlyLocated_m)).

/*
(forall (?PROCESS ?PATH1 ?MEASURE1 ?SOURCE ?DISTANCE ?DEST)
 (forall (?OBJ)
  (=> (instance ?OBJ Object)
   (=>
    (and (instance ?DEST Object) (instance ?DISTANCE LengthMeasure)
         (instance ?SOURCE Object) (instance ?MEASURE1 LengthMeasure)
         (instance ?PATH1 Object) (instance ?PROCESS Motion))
    (=>
     (and (path ?PROCESS ?PATH1)
          (and (origin ?PROCESS ?SOURCE)
               (and (destination ?PROCESS ?DEST)
                    (and (length ?PATH1 ?MEASURE1)
                         (and (distance ?SOURCE ?DEST ?DISTANCE)
                              (not (greaterThan
                                    ?MEASURE1
                                    ?DISTANCE)))))))
     (=> (part ?OBJ ?PATH1) (between ?SOURCE ?OBJ ?DEST)))))))
*/
fof(a10018,axiom,! [PROCESS,PATH1,MEASURE1,SOURCE,DISTANCE,DEST] : (! [OBJ] : ((s_instance(OBJ, s_Object) => ((s_instance(DEST, s_Object) & s_instance(DISTANCE, s_LengthMeasure) & s_instance(SOURCE, s_Object) & s_instance(MEASURE1, s_LengthMeasure) & s_instance(PATH1, s_Object) & s_instance(PROCESS, s_Motion)) => ((s_path(PROCESS, PATH1) & (s_origin(PROCESS, SOURCE) & (s_destination(PROCESS, DEST) & (s_length(PATH1, MEASURE1) & (s_distance(SOURCE, DEST, DISTANCE) & (~ greater(MEASURE1, DISTANCE))))))) => (s_part(OBJ, PATH1) => s_between(SOURCE, OBJ, DEST)))))))).

/*
(subclass BodyMotion Motion)
*/
fof(a10019,axiom,s_subclass(s_BodyMotion, s_Motion)).

/*
(forall (?OBJ ?MOTION)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?MOTION BodyMotion) (moves ?MOTION ?OBJ))
   (and (instance ?OBJ BodyPart) (patient ?MOTION ?OBJ)))))
*/
fof(a10020,axiom,! [OBJ,MOTION] : ((s_instance(OBJ, s_Object) => ((s_instance(MOTION, s_BodyMotion) & s_moves(MOTION, OBJ)) => (s_instance(OBJ, s_BodyPart) & s_patient(MOTION, OBJ)))))).

/*
(forall (?MOTION)
 (exists (?AGENT)
  (and (instance ?AGENT Agent)
       (=> (instance ?MOTION BodyMotion)
        (and (instance ?AGENT Organism) (agent ?MOTION ?AGENT))))))
*/
fof(a10021,axiom,! [MOTION] : (? [AGENT] : ((s_instance(AGENT, s_Agent) & (s_instance(MOTION, s_BodyMotion) => (s_instance(AGENT, s_Organism) & s_agent(MOTION, AGENT))))))).

/*
(subclass Ambulating BodyMotion)
*/
fof(a10022,axiom,s_subclass(s_Ambulating, s_BodyMotion)).

/*
(subclass Ambulating IntentionalProcess)
*/
fof(a10023,axiom,s_subclass(s_Ambulating, s_IntentionalProcess)).

/*
(subclass Ambulating Translocation)
*/
fof(a10024,axiom,s_subclass(s_Ambulating, s_Translocation)).

/*
(partition3 Ambulating Walking Running)
*/
fof(a10025,axiom,s_partition3(s_Ambulating, s_Walking, s_Running)).

/*
(instance Walking SetOrClass)
*/
fof(a10026,axiom,s_instance(s_Walking, s_SetOrClass)).

/*
(subclass Walking Ambulating)
*/
fof(a10027,axiom,s_subclass(s_Walking, s_Ambulating)).

/*
(instance Running SetOrClass)
*/
fof(a10028,axiom,s_instance(s_Running, s_SetOrClass)).

/*
(instance Ambulating SetOrClass)
*/
fof(a10029,axiom,s_instance(s_Ambulating, s_SetOrClass)).

/*
(subclass Running Ambulating)
*/
fof(a10030,axiom,s_subclass(s_Running, s_Ambulating)).

/*
(forall (?LENGTH2 ?RUN ?WALK ?AGENT ?TIME ?LENGTH1)
 (=>
  (and (instance ?LENGTH2 LengthMeasure) (instance ?AGENT Agent)
       (instance ?TIME TimeDuration) (instance ?LENGTH1 LengthMeasure))
  (=>
   (and (instance ?WALK Walking)
        (and (instance ?RUN Running)
             (and (agent ?WALK ?AGENT)
                  (and (agent ?RUN ?AGENT)
                       (and (holdsDuring (WhenFn ?WALK)
                             (measure ?AGENT (SpeedFn ?LENGTH1 ?TIME)))
                            (holdsDuring (WhenFn ?RUN)
                             (measure ?AGENT
                              (SpeedFn ?LENGTH2 ?TIME))))))))
   (greaterThan ?LENGTH2 ?LENGTH1))))
*/
%% no translation to TPTP available.

/*
(subclass Swimming BodyMotion)
*/
fof(a10031,axiom,s_subclass(s_Swimming, s_BodyMotion)).

/*
(instance Swimming SetOrClass)
*/
fof(a10032,axiom,s_instance(s_Swimming, s_SetOrClass)).

/*
(subclass Swimming IntentionalProcess)
*/
fof(a10033,axiom,s_subclass(s_Swimming, s_IntentionalProcess)).

/*
(forall (?AGENT ?SWIM)
 (exists (?AREA)
  (and (instance ?AREA Object)
       (=> (instance ?AGENT Agent)
        (=> (and (instance ?SWIM Swimming) (agent ?SWIM ?AGENT))
         (and (instance ?AREA WaterArea) (located ?AGENT ?AREA)))))))
*/
fof(a10034,axiom,! [AGENT,SWIM] : (? [AREA] : ((s_instance(AREA, s_Object) & (s_instance(AGENT, s_Agent) => ((s_instance(SWIM, s_Swimming) & s_agent(SWIM, AGENT)) => (s_instance(AREA, s_WaterArea) & s_located(AGENT, AREA)))))))).

/*
(instance Dancing SetOrClass)
*/
fof(a10035,axiom,s_instance(s_Dancing, s_SetOrClass)).

/*
(subclass Dancing BodyMotion)
*/
fof(a10036,axiom,s_subclass(s_Dancing, s_BodyMotion)).

/*
(subclass GeologicalProcess Motion)
*/
fof(a10037,axiom,s_subclass(s_GeologicalProcess, s_Motion)).

/*
(instance GeologicalProcess SetOrClass)
*/
fof(a10038,axiom,s_instance(s_GeologicalProcess, s_SetOrClass)).

/*
(subclass GeologicalProcess InternalChange)
*/
fof(a10039,axiom,s_subclass(s_GeologicalProcess, s_InternalChange)).

/*
(disjoint GeologicalProcess IntentionalProcess)
*/
fof(a10040,axiom,s_disjoint(s_GeologicalProcess, s_IntentionalProcess)).

/*
(subclass WeatherProcess Motion)
*/
fof(a10041,axiom,s_subclass(s_WeatherProcess, s_Motion)).

/*
(disjoint WeatherProcess IntentionalProcess)
*/
fof(a10042,axiom,s_disjoint(s_WeatherProcess, s_IntentionalProcess)).

/*
(instance WeatherProcess SetOrClass)
*/
fof(a10043,axiom,s_instance(s_WeatherProcess, s_SetOrClass)).

/*
(subclass Precipitation WeatherProcess)
*/
fof(a10044,axiom,s_subclass(s_Precipitation, s_WeatherProcess)).

/*
(subclass Precipitation WaterMotion)
*/
fof(a10045,axiom,s_subclass(s_Precipitation, s_WaterMotion)).

/*
(instance Precipitation SetOrClass)
*/
fof(a10046,axiom,s_instance(s_Precipitation, s_SetOrClass)).

/*
(subclass Precipitation Falling)
*/
fof(a10047,axiom,s_subclass(s_Precipitation, s_Falling)).

/*
(forall (?PROCESS)
 (exists (?STUFF)
  (and (instance ?STUFF Entity)
       (=> (instance ?PROCESS Precipitation)
        (and (instance ?STUFF Water) (patient ?PROCESS ?STUFF))))))
*/
fof(a10048,axiom,! [PROCESS] : (? [STUFF] : ((s_instance(STUFF, s_Entity) & (s_instance(PROCESS, s_Precipitation) => (s_instance(STUFF, s_Water) & s_patient(PROCESS, STUFF))))))).

/*
(subclass LiquidMotion Motion)
*/
fof(a10049,axiom,s_subclass(s_LiquidMotion, s_Motion)).

/*
(forall (?OBJ ?MOTION)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?MOTION LiquidMotion) (patient ?MOTION ?OBJ))
   (attribute ?OBJ Liquid))))
*/
fof(a10050,axiom,! [OBJ,MOTION] : ((s_instance(OBJ, s_Object) => ((s_instance(MOTION, s_LiquidMotion) & s_patient(MOTION, OBJ)) => s_attribute(OBJ, s_Liquid))))).

/*
(instance WaterMotion SetOrClass)
*/
fof(a10051,axiom,s_instance(s_WaterMotion, s_SetOrClass)).

/*
(instance LiquidMotion SetOrClass)
*/
fof(a10052,axiom,s_instance(s_LiquidMotion, s_SetOrClass)).

/*
(subclass WaterMotion LiquidMotion)
*/
fof(a10053,axiom,s_subclass(s_WaterMotion, s_LiquidMotion)).

/*
(forall (?MOTION)
 (exists (?WATER)
  (and (instance ?WATER Entity)
       (=> (instance ?MOTION WaterMotion)
        (and (patient ?MOTION ?WATER) (instance ?WATER Water))))))
*/
fof(a10054,axiom,! [MOTION] : (? [WATER] : ((s_instance(WATER, s_Entity) & (s_instance(MOTION, s_WaterMotion) => (s_patient(MOTION, WATER) & s_instance(WATER, s_Water))))))).

/*
(subclass GasMotion Motion)
*/
fof(a10055,axiom,s_subclass(s_GasMotion, s_Motion)).

/*
(forall (?OBJ ?MOTION)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?MOTION GasMotion) (patient ?MOTION ?OBJ))
   (attribute ?OBJ Gas))))
*/
fof(a10056,axiom,! [OBJ,MOTION] : ((s_instance(OBJ, s_Object) => ((s_instance(MOTION, s_GasMotion) & s_patient(MOTION, OBJ)) => s_attribute(OBJ, s_Gas))))).

/*
(instance Wind SetOrClass)
*/
fof(a10057,axiom,s_instance(s_Wind, s_SetOrClass)).

/*
(instance GasMotion SetOrClass)
*/
fof(a10058,axiom,s_instance(s_GasMotion, s_SetOrClass)).

/*
(subclass Wind GasMotion)
*/
fof(a10059,axiom,s_subclass(s_Wind, s_GasMotion)).

/*
(instance DirectionChange SetOrClass)
*/
fof(a10060,axiom,s_instance(s_DirectionChange, s_SetOrClass)).

/*
(subclass DirectionChange Motion)
*/
fof(a10061,axiom,s_subclass(s_DirectionChange, s_Motion)).

/*
(forall (?PROC)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?PROC DirectionChange)
        (and (instance ?ATTR DirectionalAttribute)
             (or (and (holdsDuring (BeginFn (WhenFn ?PROC))
                       (manner ?PROC ?ATTR))
                      (holdsDuring (EndFn (WhenFn ?PROC))
                       (not (manner ?PROC ?ATTR))))
                 (and (holdsDuring (EndFn (WhenFn ?PROC))
                       (manner ?PROC ?ATTR))
                      (holdsDuring (BeginFn (WhenFn ?PROC))
                       (not (manner ?PROC ?ATTR))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Transfer Translocation)
*/
fof(a10062,axiom,s_subclass(s_Transfer, s_Translocation)).

/*
(forall (?PATIENT ?AGENT ?TRANSFER)
 (=> (and (instance ?PATIENT Entity) (instance ?AGENT Agent))
  (=>
   (and (instance ?TRANSFER Transfer)
        (and (agent ?TRANSFER ?AGENT) (patient ?TRANSFER ?PATIENT)))
   (not (equal ?AGENT ?PATIENT)))))
*/
fof(a10063,axiom,! [PATIENT,AGENT,TRANSFER] : (((s_instance(PATIENT, s_Entity) & s_instance(AGENT, s_Agent)) => ((s_instance(TRANSFER, s_Transfer) & (s_agent(TRANSFER, AGENT) & s_patient(TRANSFER, PATIENT))) => (~ (AGENT = PATIENT)))))).

/*
(forall (?O1 ?D1 ?D2 ?T2 ?P ?T1)
 (exists (?T)
  (and (instance ?T Process)
       (=>
        (and (instance ?O1 Object) (instance ?D1 Object)
             (instance ?D2 Entity) (instance ?P Agent))
        (=>
         (and (instance ?T1 Translocation)
              (and (instance ?T2 Translocation)
                   (and (origin ?T1 ?O1)
                        (and (origin ?T2 ?D1)
                             (and (destination ?T1 ?D1)
                                  (and
                                   (destination ?T2 ?D2)
                                   (and
                                    (experiencer ?T1 ?P)
                                    (experiencer ?T2 ?P))))))))
         (and (instance ?T Translocation)
              (and (origin ?T ?O1)
                   (and (destination ?T ?D2)
                        (and (subProcess ?T1 ?T)
                             (and (subProcess ?T2 ?T)
                                  (and
                                   (experiencer ?T ?P)
                                   (and
                                    (starts (WhenFn ?T1) (WhenFn ?T))
                                    (finishes
                                     (WhenFn ?T2)
                                     (WhenFn ?T))))))))))))))
*/
fof(a10064,axiom,! [O1,D1,D2,T2,P,T1] : (? [T] : ((s_instance(T, s_Process) & ((s_instance(O1, s_Object) & s_instance(D1, s_Object) & s_instance(D2, s_Entity) & s_instance(P, s_Agent)) => ((s_instance(T1, s_Translocation) & (s_instance(T2, s_Translocation) & (s_origin(T1, O1) & (s_origin(T2, D1) & (s_destination(T1, D1) & (s_destination(T2, D2) & (s_experiencer(T1, P) & s_experiencer(T2, P)))))))) => (s_instance(T, s_Translocation) & (s_origin(T, O1) & (s_destination(T, D2) & (s_subProcess(T1, T) & (s_subProcess(T2, T) & (s_experiencer(T, P) & (s_starts(s_WhenFn(T1), s_WhenFn(T)) & s_finishes(s_WhenFn(T2), s_WhenFn(T))))))))))))))).

/*
(instance Carrying SetOrClass)
*/
fof(a10065,axiom,s_instance(s_Carrying, s_SetOrClass)).

/*
(subclass Carrying Transfer)
*/
fof(a10066,axiom,s_subclass(s_Carrying, s_Transfer)).

/*
(forall (?CARRY)
 (exists (?ANIMAL)
  (and (instance ?ANIMAL Object)
       (=> (instance ?CARRY Carrying)
        (and (instance ?ANIMAL Animal) (instrument ?CARRY ?ANIMAL))))))
*/
fof(a10067,axiom,! [CARRY] : (? [ANIMAL] : ((s_instance(ANIMAL, s_Object) & (s_instance(CARRY, s_Carrying) => (s_instance(ANIMAL, s_Animal) & s_instrument(CARRY, ANIMAL))))))).

/*
(subclass Removing Transfer)
*/
fof(a10068,axiom,s_subclass(s_Removing, s_Transfer)).

/*
(forall (?OBJ ?PLACE ?REMOVE)
 (=> (and (instance ?OBJ Physical) (instance ?PLACE Object))
  (=>
   (and (instance ?REMOVE Removing)
        (and (origin ?REMOVE ?PLACE) (patient ?REMOVE ?OBJ)))
   (and (holdsDuring (BeginFn (WhenFn ?REMOVE)) (located ?OBJ ?PLACE))
        (holdsDuring (EndFn (WhenFn ?REMOVE))
         (not (located ?OBJ ?PLACE)))))))
*/
%% no translation to TPTP available.

/*
(instance Uncovering SetOrClass)
*/
fof(a10069,axiom,s_instance(s_Uncovering, s_SetOrClass)).

/*
(subclass Uncovering Removing)
*/
fof(a10070,axiom,s_subclass(s_Uncovering, s_Removing)).

/*
(disjoint Uncovering Covering)
*/
fof(a10071,axiom,s_disjoint(s_Uncovering, s_Covering)).

/*
(subclass Putting Transfer)
*/
fof(a10072,axiom,s_subclass(s_Putting, s_Transfer)).

/*
(forall (?OBJ ?PLACE ?PUT)
 (=> (and (instance ?OBJ Physical) (instance ?PLACE Object))
  (=>
   (and (instance ?PUT Putting)
        (and (destination ?PUT ?PLACE) (patient ?PUT ?OBJ)))
   (and (holdsDuring (BeginFn (WhenFn ?PUT))
         (not (located ?OBJ ?PLACE)))
        (holdsDuring (EndFn (WhenFn ?PUT)) (located ?OBJ ?PLACE))))))
*/
%% no translation to TPTP available.

/*
(instance Covering SetOrClass)
*/
fof(a10073,axiom,s_instance(s_Covering, s_SetOrClass)).

/*
(subclass Covering Putting)
*/
fof(a10074,axiom,s_subclass(s_Covering, s_Putting)).

/*
(subclass Inserting Putting)
*/
fof(a10075,axiom,s_subclass(s_Inserting, s_Putting)).

/*
(forall (?OBJ2 ?OBJ1 ?INSERT)
 (=> (and (instance ?OBJ2 SelfConnectedObject) (instance ?OBJ1 Object))
  (=>
   (and (instance ?INSERT Inserting)
        (and (patient ?INSERT ?OBJ1) (destination ?INSERT ?OBJ2)))
   (and (holdsDuring (BeginFn (WhenFn ?INSERT))
         (not (contains ?OBJ2 ?OBJ1)))
        (holdsDuring (EndFn (WhenFn ?INSERT))
         (contains ?OBJ2 ?OBJ1))))))
*/
%% no translation to TPTP available.

/*
(instance Injecting SetOrClass)
*/
fof(a10076,axiom,s_instance(s_Injecting, s_SetOrClass)).

/*
(instance Inserting SetOrClass)
*/
fof(a10077,axiom,s_instance(s_Inserting, s_SetOrClass)).

/*
(subclass Injecting Inserting)
*/
fof(a10078,axiom,s_subclass(s_Injecting, s_Inserting)).

/*
(forall (?INJECT)
 (exists (?SUBSTANCE ?ANIMAL)
  (and (and (instance ?ANIMAL Entity) (instance ?SUBSTANCE Object))
       (=> (instance ?INJECT Injecting)
        (and (patient ?INJECT ?SUBSTANCE)
             (and (instance ?SUBSTANCE BiologicallyActiveSubstance)
                  (and (attribute ?SUBSTANCE Liquid)
                       (and (destination ?INJECT ?ANIMAL)
                            (instance ?ANIMAL Animal)))))))))
*/
fof(a10079,axiom,! [INJECT] : (? [SUBSTANCE,ANIMAL] : (((s_instance(ANIMAL, s_Entity) & s_instance(SUBSTANCE, s_Object)) & (s_instance(INJECT, s_Injecting) => (s_patient(INJECT, SUBSTANCE) & (s_instance(SUBSTANCE, s_BiologicallyActiveSubstance) & (s_attribute(SUBSTANCE, s_Liquid) & (s_destination(INJECT, ANIMAL) & s_instance(ANIMAL, s_Animal)))))))))).

/*
(subclass Substituting Transfer)
*/
fof(a10080,axiom,s_subclass(s_Substituting, s_Transfer)).

/*
(instance Substituting SetOrClass)
*/
fof(a10081,axiom,s_instance(s_Substituting, s_SetOrClass)).

/*
(subclass Substituting DualObjectProcess)
*/
fof(a10082,axiom,s_subclass(s_Substituting, s_DualObjectProcess)).

/*
(forall (?SUB)
 (exists (?PUT ?REMOVE ?OBJ1 ?OBJ2 ?PLACE)
  (and (and (instance ?PLACE Object) (instance ?OBJ2 Entity)
            (instance ?OBJ1 Entity) (instance ?REMOVE Process)
            (instance ?PUT Process))
       (=> (instance ?SUB Substituting)
        (and (instance ?PUT Putting)
             (and (instance ?REMOVE Removing)
                  (and (subProcess ?PUT ?SUB)
                       (and (subProcess ?REMOVE ?SUB)
                            (and (patient ?REMOVE ?OBJ1)
                                 (and
                                  (origin ?REMOVE ?PLACE)
                                  (and
                                   (patient ?PUT ?OBJ2)
                                   (and
                                    (destination ?PUT ?PLACE)
                                    (not
                                     (equal ?OBJ1 ?OBJ2))))))))))))))
*/
fof(a10083,axiom,! [SUB] : (? [PUT,REMOVE,OBJ1,OBJ2,PLACE] : (((s_instance(PLACE, s_Object) & s_instance(OBJ2, s_Entity) & s_instance(OBJ1, s_Entity) & s_instance(REMOVE, s_Process) & s_instance(PUT, s_Process)) & (s_instance(SUB, s_Substituting) => (s_instance(PUT, s_Putting) & (s_instance(REMOVE, s_Removing) & (s_subProcess(PUT, SUB) & (s_subProcess(REMOVE, SUB) & (s_patient(REMOVE, OBJ1) & (s_origin(REMOVE, PLACE) & (s_patient(PUT, OBJ2) & (s_destination(PUT, PLACE) & (~ (OBJ1 = OBJ2))))))))))))))).

/*
(subclass Impelling Transfer)
*/
fof(a10084,axiom,s_subclass(s_Impelling, s_Transfer)).

/*
(instance Shooting SetOrClass)
*/
fof(a10085,axiom,s_instance(s_Shooting, s_SetOrClass)).

/*
(instance Impelling SetOrClass)
*/
fof(a10086,axiom,s_instance(s_Impelling, s_SetOrClass)).

/*
(subclass Shooting Impelling)
*/
fof(a10087,axiom,s_subclass(s_Shooting, s_Impelling)).

/*
(subclass Touching Transfer)
*/
fof(a10088,axiom,s_subclass(s_Touching, s_Transfer)).

/*
(forall (?OBJ2 ?OBJ1 ?TOUCH)
 (=> (and (instance ?OBJ2 Object) (instance ?OBJ1 Agent))
  (=>
   (and (instance ?TOUCH Touching)
        (and (agent ?TOUCH ?OBJ1) (patient ?TOUCH ?OBJ2)))
   (and (holdsDuring (BeginFn (WhenFn ?TOUCH))
         (not (connected ?OBJ1 ?OBJ2)))
        (holdsDuring (EndFn (WhenFn ?TOUCH))
         (connected ?OBJ1 ?OBJ2))))))
*/
%% no translation to TPTP available.

/*
(subrelation grasps meetsSpatially)
*/
fof(a10089,axiom,s_subrelation(s_grasps_m, s_meetsSpatially_m)).

/*
(subclass Grabbing Touching)
*/
fof(a10090,axiom,s_subclass(s_Grabbing, s_Touching)).

/*
(instance Grabbing SetOrClass)
*/
fof(a10091,axiom,s_instance(s_Grabbing, s_SetOrClass)).

/*
(subclass Grabbing Attaching)
*/
fof(a10092,axiom,s_subclass(s_Grabbing, s_Attaching)).

/*
(forall (?THING ?AGENT ?GRAB)
 (=> (and (instance ?THING Object) (instance ?AGENT Animal))
  (=>
   (and (instance ?GRAB Grabbing)
        (and (agent ?GRAB ?AGENT) (patient ?GRAB ?THING)))
   (and (holdsDuring (BeginFn (WhenFn ?GRAB))
         (not (grasps ?AGENT ?THING)))
        (holdsDuring (EndFn (WhenFn ?GRAB)) (grasps ?AGENT ?THING))))))
*/
%% no translation to TPTP available.

/*
(instance Releasing SetOrClass)
*/
fof(a10093,axiom,s_instance(s_Releasing, s_SetOrClass)).

/*
(instance Transfer SetOrClass)
*/
fof(a10094,axiom,s_instance(s_Transfer, s_SetOrClass)).

/*
(subclass Releasing Transfer)
*/
fof(a10095,axiom,s_subclass(s_Releasing, s_Transfer)).

/*
(forall (?RELEASE ?THING ?AGENT ?GRAB)
 (=>
  (and (instance ?THING Object) (instance ?AGENT Animal)
       (instance ?GRAB Process))
  (=>
   (and (instance ?RELEASE Releasing)
        (and (agent ?GRAB ?AGENT) (patient ?GRAB ?THING)))
   (and (holdsDuring (BeginFn (WhenFn ?RELEASE))
         (grasps ?AGENT ?THING))
        (holdsDuring (EndFn (WhenFn ?RELEASE))
         (not (grasps ?AGENT ?THING)))))))
*/
%% no translation to TPTP available.

/*
(instance Impacting SetOrClass)
*/
fof(a10096,axiom,s_instance(s_Impacting, s_SetOrClass)).

/*
(instance Touching SetOrClass)
*/
fof(a10097,axiom,s_instance(s_Touching, s_SetOrClass)).

/*
(subclass Impacting Touching)
*/
fof(a10098,axiom,s_subclass(s_Impacting, s_Touching)).

/*
(forall (?OBJ ?IMPACT)
 (exists (?IMPEL)
  (and (instance ?IMPEL Process)
       (=> (instance ?OBJ Entity)
        (=> (and (instance ?IMPACT Impacting) (patient ?IMPACT ?OBJ))
         (and (instance ?IMPEL Impelling)
              (and (patient ?IMPEL ?OBJ)
                   (earlier (WhenFn ?IMPEL) (WhenFn ?IMPACT)))))))))
*/
fof(a10099,axiom,! [OBJ,IMPACT] : (? [IMPEL] : ((s_instance(IMPEL, s_Process) & (s_instance(OBJ, s_Entity) => ((s_instance(IMPACT, s_Impacting) & s_patient(IMPACT, OBJ)) => (s_instance(IMPEL, s_Impelling) & (s_patient(IMPEL, OBJ) & s_earlier(s_WhenFn(IMPEL), s_WhenFn(IMPACT)))))))))).

/*
(subclass Translocation Motion)
*/
fof(a10100,axiom,s_subclass(s_Translocation, s_Motion)).

/*
(forall (?PLACE1 ?MOVEMENT)
 (exists (?PLACE2 ?STAGE)
  (and (and (instance ?STAGE Process) (instance ?PLACE2 Object))
       (=> (instance ?PLACE1 Object)
        (=>
         (and (instance ?MOVEMENT Translocation)
              (origin ?MOVEMENT ?PLACE1))
         (and (instance ?PLACE2 Region)
              (and (not (equal ?PLACE1 ?PLACE2))
                   (and (subProcess ?STAGE ?MOVEMENT)
                        (located ?STAGE ?PLACE2)))))))))
*/
fof(a10101,axiom,! [PLACE1,MOVEMENT] : (? [PLACE2,STAGE] : (((s_instance(STAGE, s_Process) & s_instance(PLACE2, s_Object)) & (s_instance(PLACE1, s_Object) => ((s_instance(MOVEMENT, s_Translocation) & s_origin(MOVEMENT, PLACE1)) => (s_instance(PLACE2, s_Region) & ((~ (PLACE1 = PLACE2)) & (s_subProcess(STAGE, MOVEMENT) & s_located(STAGE, PLACE2)))))))))).

/*
(forall (?T)
 (exists (?O ?D ?P)
  (and (and (instance ?P Object) (instance ?D Entity)
            (instance ?O Object))
       (=> (instance ?T Translocation)
        (and (instance ?O Object)
             (and (instance ?D Object)
                  (and (instance ?P Object)
                       (and (path ?T ?P)
                            (and (origin ?T ?O)
                                 (destination ?T ?D))))))))))
*/
fof(a10102,axiom,! [T] : (? [O,D,P] : (((s_instance(P, s_Object) & s_instance(D, s_Entity) & s_instance(O, s_Object)) & (s_instance(T, s_Translocation) => (s_instance(O, s_Object) & (s_instance(D, s_Object) & (s_instance(P, s_Object) & (s_path(T, P) & (s_origin(T, O) & s_destination(T, D))))))))))).

/*
(subclass Falling Translocation)
*/
fof(a10103,axiom,s_subclass(s_Falling, s_Translocation)).

/*
(instance Falling SetOrClass)
*/
fof(a10104,axiom,s_instance(s_Falling, s_SetOrClass)).

/*
(instance MotionDownward SetOrClass)
*/
fof(a10105,axiom,s_instance(s_MotionDownward, s_SetOrClass)).

/*
(subclass Falling MotionDownward)
*/
fof(a10106,axiom,s_subclass(s_Falling, s_MotionDownward)).

/*
(forall (?FINISH ?START ?DROP)
 (=> (and (instance ?FINISH Object) (instance ?START Object))
  (=>
   (and (instance ?DROP Falling)
        (and (origin ?DROP ?START) (destination ?DROP ?FINISH)))
   (orientation ?FINISH ?START Below))))
*/
fof(a10107,axiom,! [FINISH,START,DROP] : (((s_instance(FINISH, s_Object) & s_instance(START, s_Object)) => ((s_instance(DROP, s_Falling) & (s_origin(DROP, START) & s_destination(DROP, FINISH))) => s_orientation(FINISH, START, s_Below))))).

/*
(instance Transportation SetOrClass)
*/
fof(a10108,axiom,s_instance(s_Transportation, s_SetOrClass)).

/*
(instance Translocation SetOrClass)
*/
fof(a10109,axiom,s_instance(s_Translocation, s_SetOrClass)).

/*
(subclass Transportation Translocation)
*/
fof(a10110,axiom,s_subclass(s_Transportation, s_Translocation)).

/*
(forall (?TRANS)
 (exists (?DEVICE)
  (and (instance ?DEVICE Object)
       (=> (instance ?TRANS Transportation)
        (and (instance ?DEVICE TransportationDevice)
             (instrument ?TRANS ?DEVICE))))))
*/
fof(a10111,axiom,! [TRANS] : (? [DEVICE] : ((s_instance(DEVICE, s_Object) & (s_instance(TRANS, s_Transportation) => (s_instance(DEVICE, s_TransportationDevice) & s_instrument(TRANS, DEVICE))))))).

/*
(subclass Guiding IntentionalProcess)
*/
fof(a10112,axiom,s_subclass(s_Guiding, s_IntentionalProcess)).

/*
(instance Driving SetOrClass)
*/
fof(a10113,axiom,s_instance(s_Driving, s_SetOrClass)).

/*
(subclass Driving Guiding)
*/
fof(a10114,axiom,s_subclass(s_Driving, s_Guiding)).

/*
(forall (?DRIVE)
 (exists (?VEHICLE)
  (and (instance ?VEHICLE Entity)
       (=> (instance ?DRIVE Driving)
        (and (instance ?VEHICLE Vehicle) (patient ?DRIVE ?VEHICLE))))))
*/
fof(a10115,axiom,! [DRIVE] : (? [VEHICLE] : ((s_instance(VEHICLE, s_Entity) & (s_instance(DRIVE, s_Driving) => (s_instance(VEHICLE, s_Vehicle) & s_patient(DRIVE, VEHICLE))))))).

/*
(instance EducationalProcess SetOrClass)
*/
fof(a10116,axiom,s_instance(s_EducationalProcess, s_SetOrClass)).

/*
(instance Guiding SetOrClass)
*/
fof(a10117,axiom,s_instance(s_Guiding, s_SetOrClass)).

/*
(subclass EducationalProcess Guiding)
*/
fof(a10118,axiom,s_subclass(s_EducationalProcess, s_Guiding)).

/*
(forall (?PERSON ?EDUCATION)
 (=> (instance ?PERSON Entity)
  (=>
   (and (instance ?EDUCATION EducationalProcess)
        (patient ?EDUCATION ?PERSON))
   (hasPurpose ?EDUCATION
    (exists (?LEARN)
     (and (instance ?LEARN Learning) (patient ?LEARN ?PERSON)))))))
*/
%% no translation to TPTP available.

/*
(subclass ChangeOfPossession SocialInteraction)
*/
fof(a10119,axiom,s_subclass(s_ChangeOfPossession, s_SocialInteraction)).

/*
(forall (?AGENT2 ?CHANGE ?OBJ ?AGENT1)
 (=>
  (and (instance ?AGENT2 Agent) (instance ?OBJ Object)
       (instance ?AGENT1 Agent))
  (=>
   (and (instance ?CHANGE ChangeOfPossession)
        (and (patient ?CHANGE ?OBJ)
             (and (holdsDuring (BeginFn (WhenFn ?CHANGE))
                   (possesses ?AGENT1 ?OBJ))
                  (holdsDuring (EndFn (WhenFn ?CHANGE))
                   (possesses ?AGENT2 ?OBJ)))))
   (not (equal ?AGENT1 ?AGENT2)))))
*/
%% no translation to TPTP available.

/*
(forall (?AGENT1 ?AGENT2 ?OBJ ?CHANGE)
 (=> (instance ?OBJ Object)
  (=>
   (and (instance ?CHANGE ChangeOfPossession)
        (and (origin ?CHANGE ?AGENT1)
             (and (destination ?CHANGE ?AGENT2)
                  (and (instance ?AGENT1 Agent)
                       (and (instance ?AGENT2 Agent)
                            (patient ?CHANGE ?OBJ))))))
   (and (holdsDuring (BeginFn (WhenFn ?CHANGE))
         (possesses ?AGENT1 ?OBJ))
        (holdsDuring (EndFn (WhenFn ?CHANGE))
         (possesses ?AGENT2 ?OBJ))))))
*/
%% no translation to TPTP available.

/*
(subclass Giving ChangeOfPossession)
*/
fof(a10120,axiom,s_subclass(s_Giving, s_ChangeOfPossession)).

/*
(forall (?AGENT1 ?AGENT2 ?OBJ ?GIVE)
 (exists (?GET)
  (and (instance ?GET Process)
       (=> (and (instance ?AGENT1 Agent) (instance ?OBJ Entity))
        (=>
         (and (instance ?GIVE Giving)
              (and (agent ?GIVE ?AGENT1)
                   (and (destination ?GIVE ?AGENT2)
                        (and (instance ?AGENT2 Agent)
                             (patient ?GIVE ?OBJ)))))
         (and (instance ?GET Getting)
              (and (agent ?GET ?AGENT2)
                   (and (origin ?GET ?AGENT1)
                        (patient ?GET ?OBJ)))))))))
*/
fof(a10121,axiom,! [AGENT1,AGENT2,OBJ,GIVE] : (? [GET] : ((s_instance(GET, s_Process) & ((s_instance(AGENT1, s_Agent) & s_instance(OBJ, s_Entity)) => ((s_instance(GIVE, s_Giving) & (s_agent(GIVE, AGENT1) & (s_destination(GIVE, AGENT2) & (s_instance(AGENT2, s_Agent) & s_patient(GIVE, OBJ))))) => (s_instance(GET, s_Getting) & (s_agent(GET, AGENT2) & (s_origin(GET, AGENT1) & s_patient(GET, OBJ)))))))))).

/*
(forall (?AGENT ?GIVE)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?GIVE Giving) (agent ?GIVE ?AGENT))
   (origin ?GIVE ?AGENT))))
*/
fof(a10122,axiom,! [AGENT,GIVE] : ((s_instance(AGENT, s_Agent) => ((s_instance(GIVE, s_Giving) & s_agent(GIVE, AGENT)) => s_origin(GIVE, AGENT))))).

/*
(instance Funding SetOrClass)
*/
fof(a10123,axiom,s_instance(s_Funding, s_SetOrClass)).

/*
(subclass Funding Giving)
*/
fof(a10124,axiom,s_subclass(s_Funding, s_Giving)).

/*
(forall (?FUND)
 (exists (?MONEY)
  (and (instance ?MONEY Entity)
       (=> (instance ?FUND Funding)
        (and (instance ?MONEY Currency) (patient ?FUND ?MONEY))))))
*/
fof(a10125,axiom,! [FUND] : (? [MONEY] : ((s_instance(MONEY, s_Entity) & (s_instance(FUND, s_Funding) => (s_instance(MONEY, s_Currency) & s_patient(FUND, MONEY))))))).

/*
(instance UnilateralGiving SetOrClass)
*/
fof(a10126,axiom,s_instance(s_UnilateralGiving, s_SetOrClass)).

/*
(subclass UnilateralGiving Giving)
*/
fof(a10127,axiom,s_subclass(s_UnilateralGiving, s_Giving)).

/*
(forall (?GIVE)
 (forall (?TRANS)
  (=> (instance ?TRANS Process)
   (=> (instance ?GIVE UnilateralGiving)
    (not (and (instance ?TRANS Transaction)
              (subProcess ?GIVE ?TRANS)))))))
*/
fof(a10128,axiom,! [GIVE] : (! [TRANS] : ((s_instance(TRANS, s_Process) => (s_instance(GIVE, s_UnilateralGiving) => (~ (s_instance(TRANS, s_Transaction) & s_subProcess(GIVE, TRANS)))))))).

/*
(instance Lending SetOrClass)
*/
fof(a10129,axiom,s_instance(s_Lending, s_SetOrClass)).

/*
(subclass Lending Giving)
*/
fof(a10130,axiom,s_subclass(s_Lending, s_Giving)).

/*
(forall (?AGENT1 ?OBJECT ?AGENT2)
 (forall (?LEND)
  (forall (?BORROW)
   (exists (?g7046)
    (exists (?g7043)
     (=>
      (and (instance ?AGENT2 Agent) (instance ?OBJECT Entity)
           (instance ?AGENT1 Agent))
      (and (=>
            (and (instance ?BORROW Borrowing)
                 (and (agent ?BORROW ?AGENT1)
                      (and (origin ?BORROW ?AGENT2)
                           (patient ?BORROW ?OBJECT))))
            (and (instance ?g7043 Lending)
                 (and (agent ?g7043 ?AGENT2)
                      (and (destination ?g7043 ?AGENT1)
                           (patient ?g7043 ?OBJECT)))))
           (=>
            (and (instance ?LEND Lending)
                 (and (agent ?LEND ?AGENT2)
                      (and (destination ?LEND ?AGENT1)
                           (patient ?LEND ?OBJECT))))
            (and (instance ?g7046 Borrowing)
                 (and (agent ?g7046 ?AGENT1)
                      (and (origin ?g7046 ?AGENT2)
                           (patient ?g7046 ?OBJECT))))))))))))
*/
fof(a10131,axiom,! [AGENT1,OBJECT,AGENT2] : (! [LEND] : (! [BORROW] : (? [G7046] : (? [G7043] : (((s_instance(AGENT2, s_Agent) & s_instance(OBJECT, s_Entity) & s_instance(AGENT1, s_Agent)) => (((s_instance(BORROW, s_Borrowing) & (s_agent(BORROW, AGENT1) & (s_origin(BORROW, AGENT2) & s_patient(BORROW, OBJECT)))) => (s_instance(G7043, s_Lending) & (s_agent(G7043, AGENT2) & (s_destination(G7043, AGENT1) & s_patient(G7043, OBJECT))))) & ((s_instance(LEND, s_Lending) & (s_agent(LEND, AGENT2) & (s_destination(LEND, AGENT1) & s_patient(LEND, OBJECT)))) => (s_instance(G7046, s_Borrowing) & (s_agent(G7046, AGENT1) & (s_origin(G7046, AGENT2) & s_patient(G7046, OBJECT))))))))))))).

/*
(instance GivingBack SetOrClass)
*/
fof(a10132,axiom,s_instance(s_GivingBack, s_SetOrClass)).

/*
(instance Giving SetOrClass)
*/
fof(a10133,axiom,s_instance(s_Giving, s_SetOrClass)).

/*
(subclass GivingBack Giving)
*/
fof(a10134,axiom,s_subclass(s_GivingBack, s_Giving)).

/*
(forall (?DEST ?AGENT ?RETURN)
 (exists (?GIVE)
  (and (instance ?GIVE Process)
       (=> (and (instance ?DEST Agent) (instance ?AGENT Agent))
        (=>
         (and (instance ?RETURN GivingBack)
              (and (agent ?RETURN ?AGENT) (destination ?RETURN ?DEST)))
         (and (instance ?GIVE Giving)
              (and (agent ?GIVE ?DEST)
                   (and (destination ?GIVE ?AGENT)
                        (earlier (WhenFn ?GIVE)
                         (WhenFn ?RETURN))))))))))
*/
fof(a10135,axiom,! [DEST,AGENT,RETURN] : (? [GIVE] : ((s_instance(GIVE, s_Process) & ((s_instance(DEST, s_Agent) & s_instance(AGENT, s_Agent)) => ((s_instance(RETURN, s_GivingBack) & (s_agent(RETURN, AGENT) & s_destination(RETURN, DEST))) => (s_instance(GIVE, s_Giving) & (s_agent(GIVE, DEST) & (s_destination(GIVE, AGENT) & s_earlier(s_WhenFn(GIVE), s_WhenFn(RETURN))))))))))).

/*
(subclass Getting ChangeOfPossession)
*/
fof(a10136,axiom,s_subclass(s_Getting, s_ChangeOfPossession)).

/*
(forall (?AGENT ?GET)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?GET Getting) (agent ?GET ?AGENT))
   (destination ?GET ?AGENT))))
*/
fof(a10137,axiom,! [AGENT,GET] : ((s_instance(AGENT, s_Agent) => ((s_instance(GET, s_Getting) & s_agent(GET, AGENT)) => s_destination(GET, AGENT))))).

/*
(instance UnilateralGetting SetOrClass)
*/
fof(a10138,axiom,s_instance(s_UnilateralGetting, s_SetOrClass)).

/*
(subclass UnilateralGetting Getting)
*/
fof(a10139,axiom,s_subclass(s_UnilateralGetting, s_Getting)).

/*
(forall (?GET)
 (forall (?TRANS)
  (=> (instance ?TRANS Process)
   (=> (instance ?GET UnilateralGetting)
    (not (and (instance ?TRANS Transaction)
              (subProcess ?GET ?TRANS)))))))
*/
fof(a10140,axiom,! [GET] : (! [TRANS] : ((s_instance(TRANS, s_Process) => (s_instance(GET, s_UnilateralGetting) => (~ (s_instance(TRANS, s_Transaction) & s_subProcess(GET, TRANS)))))))).

/*
(instance Borrowing SetOrClass)
*/
fof(a10141,axiom,s_instance(s_Borrowing, s_SetOrClass)).

/*
(instance Getting SetOrClass)
*/
fof(a10142,axiom,s_instance(s_Getting, s_SetOrClass)).

/*
(subclass Borrowing Getting)
*/
fof(a10143,axiom,s_subclass(s_Borrowing, s_Getting)).

/*
(instance ChangeOfPossession SetOrClass)
*/
fof(a10144,axiom,s_instance(s_ChangeOfPossession, s_SetOrClass)).

/*
(subclass Transaction ChangeOfPossession)
*/
fof(a10145,axiom,s_subclass(s_Transaction, s_ChangeOfPossession)).

/*
(subclass Transaction DualObjectProcess)
*/
fof(a10146,axiom,s_subclass(s_Transaction, s_DualObjectProcess)).

/*
(forall (?TRANS)
 (exists (?AGENT1 ?AGENT2 ?GIVE1 ?GIVE2 ?OBJ1 ?OBJ2)
  (and (and (instance ?OBJ2 Entity) (instance ?OBJ1 Entity)
            (instance ?GIVE2 Process) (instance ?GIVE1 Process)
            (instance ?AGENT2 Agent) (instance ?AGENT1 Agent))
       (=> (instance ?TRANS Transaction)
        (and (instance ?GIVE1 Giving)
             (and (instance ?GIVE2 Giving)
                  (and (subProcess ?GIVE1 ?TRANS)
                       (and (subProcess ?GIVE2 ?TRANS)
                            (and (agent ?GIVE1 ?AGENT1)
                                 (and
                                  (agent ?GIVE2 ?AGENT2)
                                  (and
                                   (patient ?GIVE1 ?OBJ1)
                                   (and
                                    (patient ?GIVE2 ?OBJ2)
                                    (and
                                     (destination ?GIVE1 ?AGENT2)
                                     (and
                                      (destination ?GIVE2 ?AGENT1)
                                      (and
                                       (not (equal ?AGENT1 ?AGENT2))
                                       (not
                                        (equal
                                         ?OBJ1
                                         ?OBJ2)))))))))))))))))
*/
fof(a10147,axiom,! [TRANS] : (? [AGENT1,AGENT2,GIVE1,GIVE2,OBJ1,OBJ2] : (((s_instance(OBJ2, s_Entity) & s_instance(OBJ1, s_Entity) & s_instance(GIVE2, s_Process) & s_instance(GIVE1, s_Process) & s_instance(AGENT2, s_Agent) & s_instance(AGENT1, s_Agent)) & (s_instance(TRANS, s_Transaction) => (s_instance(GIVE1, s_Giving) & (s_instance(GIVE2, s_Giving) & (s_subProcess(GIVE1, TRANS) & (s_subProcess(GIVE2, TRANS) & (s_agent(GIVE1, AGENT1) & (s_agent(GIVE2, AGENT2) & (s_patient(GIVE1, OBJ1) & (s_patient(GIVE2, OBJ2) & (s_destination(GIVE1, AGENT2) & (s_destination(GIVE2, AGENT1) & ((~ (AGENT1 = AGENT2)) & (~ (OBJ1 = OBJ2)))))))))))))))))).

/*
(instance Transaction SetOrClass)
*/
fof(a10148,axiom,s_instance(s_Transaction, s_SetOrClass)).

/*
(subclass FinancialTransaction Transaction)
*/
fof(a10149,axiom,s_subclass(s_FinancialTransaction, s_Transaction)).

/*
(forall (?TRANS)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?TRANS FinancialTransaction)
        (and (patient ?TRANS ?OBJ)
             (instance ?OBJ FinancialInstrument))))))
*/
fof(a10150,axiom,! [TRANS] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(TRANS, s_FinancialTransaction) => (s_patient(TRANS, OBJ) & s_instance(OBJ, s_FinancialInstrument))))))).

/*
(instance transactionAmount BinaryPredicate)
*/
fof(a10151,axiom,s_instance(s_transactionAmount_m, s_BinaryPredicate)).

/*
(instance transactionAmount SingleValuedRelation)
*/
fof(a10152,axiom,s_instance(s_transactionAmount_m, s_SingleValuedRelation)).

/*
(instance transactionAmount TotalValuedRelation)
*/
fof(a10153,axiom,s_instance(s_transactionAmount_m, s_TotalValuedRelation)).

/*
(forall (?AMOUNT ?TRANS)
 (exists (?OBJ)
  (and (instance ?OBJ Physical)
       (=>
        (and (instance ?TRANS FinancialTransaction)
             (instance ?AMOUNT CurrencyMeasure))
        (=> (transactionAmount ?TRANS ?AMOUNT)
         (and (patient ?TRANS ?OBJ) (monetaryValue ?OBJ ?AMOUNT)))))))
*/
fof(a10154,axiom,! [AMOUNT,TRANS] : (? [OBJ] : ((s_instance(OBJ, s_Physical) & ((s_instance(TRANS, s_FinancialTransaction) & s_instance(AMOUNT, s_CurrencyMeasure)) => (s_transactionAmount(TRANS, AMOUNT) => (s_patient(TRANS, OBJ) & s_monetaryValue(OBJ, AMOUNT)))))))).

/*
(subclass ServiceProcess SocialInteraction)
*/
fof(a10155,axiom,s_subclass(s_ServiceProcess, s_SocialInteraction)).

/*
(subclass CommercialService FinancialTransaction)
*/
fof(a10156,axiom,s_subclass(s_CommercialService, s_FinancialTransaction)).

/*
(instance CommercialService SetOrClass)
*/
fof(a10157,axiom,s_instance(s_CommercialService, s_SetOrClass)).

/*
(instance ServiceProcess SetOrClass)
*/
fof(a10158,axiom,s_instance(s_ServiceProcess, s_SetOrClass)).

/*
(subclass CommercialService ServiceProcess)
*/
fof(a10159,axiom,s_subclass(s_CommercialService, s_ServiceProcess)).

/*
(forall (?BUSINESS)
 (exists (?AGENT)
  (and (instance ?AGENT Agent)
       (=> (instance ?BUSINESS CommercialService)
        (and (instance ?AGENT CommercialAgent)
             (agent ?BUSINESS ?AGENT))))))
*/
fof(a10160,axiom,! [BUSINESS] : (? [AGENT] : ((s_instance(AGENT, s_Agent) & (s_instance(BUSINESS, s_CommercialService) => (s_instance(AGENT, s_CommercialAgent) & s_agent(BUSINESS, AGENT))))))).

/*
(instance Betting SetOrClass)
*/
fof(a10161,axiom,s_instance(s_Betting, s_SetOrClass)).

/*
(subclass Betting FinancialTransaction)
*/
fof(a10162,axiom,s_subclass(s_Betting, s_FinancialTransaction)).

/*
(instance Buying SetOrClass)
*/
fof(a10163,axiom,s_instance(s_Buying, s_SetOrClass)).

/*
(subclass Buying FinancialTransaction)
*/
fof(a10164,axiom,s_subclass(s_Buying, s_FinancialTransaction)).

/*
(forall (?AGENT ?BUY)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?BUY Buying) (agent ?BUY ?AGENT))
   (destination ?BUY ?AGENT))))
*/
fof(a10165,axiom,! [AGENT,BUY] : ((s_instance(AGENT, s_Agent) => ((s_instance(BUY, s_Buying) & s_agent(BUY, AGENT)) => s_destination(BUY, AGENT))))).

/*
(instance Selling SetOrClass)
*/
fof(a10166,axiom,s_instance(s_Selling, s_SetOrClass)).

/*
(instance FinancialTransaction SetOrClass)
*/
fof(a10167,axiom,s_instance(s_FinancialTransaction, s_SetOrClass)).

/*
(subclass Selling FinancialTransaction)
*/
fof(a10168,axiom,s_subclass(s_Selling, s_FinancialTransaction)).

/*
(forall (?AGENT1 ?OBJECT ?AGENT2)
 (forall (?SELL)
  (forall (?BUY)
   (exists (?g7065)
    (exists (?g7062)
     (=>
      (and (instance ?AGENT2 Agent) (instance ?OBJECT Entity)
           (instance ?AGENT1 Agent))
      (and (=>
            (and (instance ?BUY Buying)
                 (and (agent ?BUY ?AGENT1)
                      (and (origin ?BUY ?AGENT2)
                           (patient ?BUY ?OBJECT))))
            (and (instance ?g7062 Selling)
                 (and (agent ?g7062 ?AGENT2)
                      (and (destination ?g7062 ?AGENT1)
                           (patient ?g7062 ?OBJECT)))))
           (=>
            (and (instance ?SELL Selling)
                 (and (agent ?SELL ?AGENT2)
                      (and (destination ?SELL ?AGENT1)
                           (patient ?SELL ?OBJECT))))
            (and (instance ?g7065 Buying)
                 (and (agent ?g7065 ?AGENT1)
                      (and (origin ?g7065 ?AGENT2)
                           (patient ?g7065 ?OBJECT))))))))))))
*/
fof(a10169,axiom,! [AGENT1,OBJECT,AGENT2] : (! [SELL] : (! [BUY] : (? [G7065] : (? [G7062] : (((s_instance(AGENT2, s_Agent) & s_instance(OBJECT, s_Entity) & s_instance(AGENT1, s_Agent)) => (((s_instance(BUY, s_Buying) & (s_agent(BUY, AGENT1) & (s_origin(BUY, AGENT2) & s_patient(BUY, OBJECT)))) => (s_instance(G7062, s_Selling) & (s_agent(G7062, AGENT2) & (s_destination(G7062, AGENT1) & s_patient(G7062, OBJECT))))) & ((s_instance(SELL, s_Selling) & (s_agent(SELL, AGENT2) & (s_destination(SELL, AGENT1) & s_patient(SELL, OBJECT)))) => (s_instance(G7065, s_Buying) & (s_agent(G7065, AGENT1) & (s_origin(G7065, AGENT2) & s_patient(G7065, OBJECT))))))))))))).

/*
(forall (?AGENT ?SELL)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?SELL Selling) (agent ?SELL ?AGENT))
   (origin ?SELL ?AGENT))))
*/
fof(a10170,axiom,! [AGENT,SELL] : ((s_instance(AGENT, s_Agent) => ((s_instance(SELL, s_Selling) & s_agent(SELL, AGENT)) => s_origin(SELL, AGENT))))).

/*
(instance Learning SetOrClass)
*/
fof(a10171,axiom,s_instance(s_Learning, s_SetOrClass)).

/*
(subclass Learning IntentionalPsychologicalProcess)
*/
fof(a10172,axiom,s_subclass(s_Learning, s_IntentionalPsychologicalProcess)).

/*
(forall (?AGENT ?LEARN)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?LEARN Learning) (agent ?LEARN ?AGENT))
   (instance ?AGENT CognitiveAgent))))
*/
fof(a10173,axiom,! [AGENT,LEARN] : ((s_instance(AGENT, s_Agent) => ((s_instance(LEARN, s_Learning) & s_agent(LEARN, AGENT)) => s_instance(AGENT, s_CognitiveAgent))))).

/*
(forall (?PROP ?AGENT ?LEARN)
 (=> (and (instance ?PROP Formula) (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance ?LEARN Learning)
        (and (agent ?LEARN ?AGENT) (patient ?LEARN ?PROP)))
   (and (holdsDuring (BeginFn (WhenFn ?LEARN))
         (not (knows ?AGENT ?PROP)))
        (holdsDuring (EndFn (WhenFn ?LEARN)) (knows ?AGENT ?PROP))))))
*/
%% no translation to TPTP available.

/*
(instance Discovering SetOrClass)
*/
fof(a10174,axiom,s_instance(s_Discovering, s_SetOrClass)).

/*
(subclass Discovering IntentionalPsychologicalProcess)
*/
fof(a10175,axiom,s_subclass(s_Discovering, s_IntentionalPsychologicalProcess)).

/*
(forall (?OBJ ?DISCOVER)
 (exists (?PURSUE)
  (and (instance ?PURSUE Physical)
       (=> (instance ?OBJ Entity)
        (=>
         (and (instance ?DISCOVER Discovering)
              (patient ?DISCOVER ?OBJ))
         (and (instance ?PURSUE Pursuing)
              (meetsTemporally (WhenFn ?PURSUE)
               (WhenFn ?DISCOVER))))))))
*/
fof(a10176,axiom,! [OBJ,DISCOVER] : (? [PURSUE] : ((s_instance(PURSUE, s_Physical) & (s_instance(OBJ, s_Entity) => ((s_instance(DISCOVER, s_Discovering) & s_patient(DISCOVER, OBJ)) => (s_instance(PURSUE, s_Pursuing) & s_meetsTemporally(s_WhenFn(PURSUE), s_WhenFn(DISCOVER))))))))).

/*
(forall (?DISCOVER ?PLACE ?OBJ)
 (exists (?LEARN)
  (and (instance ?LEARN Process)
       (=> (and (instance ?PLACE Object) (instance ?OBJ Physical))
        (=>
         (and (instance ?DISCOVER Discovering)
              (and (patient ?DISCOVER ?OBJ)
                   (holdsDuring (WhenFn ?DISCOVER)
                    (located ?OBJ ?PLACE))))
         (and (instance ?LEARN Learning)
              (and (subProcess ?LEARN ?DISCOVER)
                   (patient ?LEARN (located ?OBJ ?PLACE)))))))))
*/
%% no translation to TPTP available.

/*
(instance Classifying SetOrClass)
*/
fof(a10177,axiom,s_instance(s_Classifying, s_SetOrClass)).

/*
(subclass Classifying IntentionalPsychologicalProcess)
*/
fof(a10178,axiom,s_subclass(s_Classifying, s_IntentionalPsychologicalProcess)).

/*
(instance Reasoning SetOrClass)
*/
fof(a10179,axiom,s_instance(s_Reasoning, s_SetOrClass)).

/*
(subclass Reasoning IntentionalPsychologicalProcess)
*/
fof(a10180,axiom,s_subclass(s_Reasoning, s_IntentionalPsychologicalProcess)).

/*
(forall (?AGENT)
 (=> (instance ?AGENT CognitiveAgent)
  (capability Reasoning agent ?AGENT)))
*/
fof(a10181,axiom,! [AGENT] : ((s_instance(AGENT, s_CognitiveAgent) => s_capability(s_Reasoning, s_agent_m, AGENT)))).

/*
(subclass Selecting IntentionalPsychologicalProcess)
*/
fof(a10182,axiom,s_subclass(s_Selecting, s_IntentionalPsychologicalProcess)).

/*
(subclass Deciding Selecting)
*/
fof(a10183,axiom,s_subclass(s_Deciding, s_Selecting)).

/*
(forall (?PROCESS ?AGENT ?DECIDE)
 (=> (and (instance ?PROCESS Process) (instance ?AGENT Agent))
  (=>
   (and (instance ?DECIDE Deciding)
        (and (agent ?DECIDE ?AGENT) (patient ?DECIDE ?PROCESS)))
   (and (instance ?PROCESS IntentionalProcess)
        (agent ?PROCESS ?AGENT)))))
*/
fof(a10184,axiom,! [PROCESS,AGENT,DECIDE] : (((s_instance(PROCESS, s_Process) & s_instance(AGENT, s_Agent)) => ((s_instance(DECIDE, s_Deciding) & (s_agent(DECIDE, AGENT) & s_patient(DECIDE, PROCESS))) => (s_instance(PROCESS, s_IntentionalProcess) & s_agent(PROCESS, AGENT)))))).

/*
(instance Voting SetOrClass)
*/
fof(a10185,axiom,s_instance(s_Voting, s_SetOrClass)).

/*
(instance Deciding SetOrClass)
*/
fof(a10186,axiom,s_instance(s_Deciding, s_SetOrClass)).

/*
(subclass Voting Deciding)
*/
fof(a10187,axiom,s_subclass(s_Voting, s_Deciding)).

/*
(forall (?VOTE)
 (exists (?ELECT)
  (and (instance ?ELECT Process)
       (=> (instance ?VOTE Voting)
        (and (instance ?ELECT Election) (subProcess ?VOTE ?ELECT))))))
*/
fof(a10188,axiom,! [VOTE] : (? [ELECT] : ((s_instance(ELECT, s_Process) & (s_instance(VOTE, s_Voting) => (s_instance(ELECT, s_Election) & s_subProcess(VOTE, ELECT))))))).

/*
(instance Judging SetOrClass)
*/
fof(a10189,axiom,s_instance(s_Judging, s_SetOrClass)).

/*
(instance Selecting SetOrClass)
*/
fof(a10190,axiom,s_instance(s_Selecting, s_SetOrClass)).

/*
(subclass Judging Selecting)
*/
fof(a10191,axiom,s_subclass(s_Judging, s_Selecting)).

/*
(forall (?PROPOSITION ?AGENT ?JUDGE)
 (=>
  (and (instance ?PROPOSITION Formula)
       (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance ?JUDGE Judging)
        (and (agent ?JUDGE ?AGENT) (patient ?JUDGE ?PROPOSITION)))
   (and (holdsDuring (BeginFn (WhenFn ?JUDGE))
         (not (believes ?AGENT ?PROPOSITION)))
        (holdsDuring (EndFn (WhenFn ?JUDGE))
         (believes ?AGENT ?PROPOSITION))))))
*/
%% no translation to TPTP available.

/*
(subclass Comparing IntentionalPsychologicalProcess)
*/
fof(a10192,axiom,s_subclass(s_Comparing, s_IntentionalPsychologicalProcess)).

/*
(instance Comparing SetOrClass)
*/
fof(a10193,axiom,s_instance(s_Comparing, s_SetOrClass)).

/*
(subclass Comparing DualObjectProcess)
*/
fof(a10194,axiom,s_subclass(s_Comparing, s_DualObjectProcess)).

/*
(subclass Calculating IntentionalPsychologicalProcess)
*/
fof(a10195,axiom,s_subclass(s_Calculating, s_IntentionalPsychologicalProcess)).

/*
(instance Measuring SetOrClass)
*/
fof(a10196,axiom,s_instance(s_Measuring, s_SetOrClass)).

/*
(subclass Measuring Calculating)
*/
fof(a10197,axiom,s_subclass(s_Measuring, s_Calculating)).

/*
(forall (?OBJ ?AGENT ?MEAS)
 (exists (?QUANT ?UNIT)
  (and (and (instance ?UNIT UnitOfMeasure)
            (instance ?QUANT RealNumber))
       (=>
        (and (instance ?OBJ Object) (instance ?AGENT CognitiveAgent))
        (=>
         (and (instance ?MEAS Measuring)
              (and (agent ?MEAS ?AGENT) (patient ?MEAS ?OBJ)))
         (holdsDuring (EndFn (WhenFn ?MEAS))
          (knows ?AGENT (measure ?OBJ (MeasureFn ?QUANT ?UNIT)))))))))
*/
%% no translation to TPTP available.

/*
(instance Counting SetOrClass)
*/
fof(a10198,axiom,s_instance(s_Counting, s_SetOrClass)).

/*
(instance Calculating SetOrClass)
*/
fof(a10199,axiom,s_instance(s_Calculating, s_SetOrClass)).

/*
(subclass Counting Calculating)
*/
fof(a10200,axiom,s_subclass(s_Counting, s_Calculating)).

/*
(forall (?ENTITY ?AGENT ?COUNT)
 (exists (?NUMBER)
  (and (instance ?NUMBER Entity)
       (=>
        (and (instance ?AGENT CognitiveAgent)
             (instance ?ENTITY UnionFn) (instance ?ENTITY SetOrClass)
             (instance ?ENTITY Collection))
        (=>
         (and (instance ?COUNT Counting)
              (and (agent ?COUNT ?AGENT) (patient ?COUNT ?ENTITY)))
         (knows ?AGENT (equal (CardinalityFn ?ENTITY) ?NUMBER)))))))
*/
%% no translation to TPTP available.

/*
(instance Predicting SetOrClass)
*/
fof(a10201,axiom,s_instance(s_Predicting, s_SetOrClass)).

/*
(instance IntentionalPsychologicalProcess SetOrClass)
*/
fof(a10202,axiom,s_instance(s_IntentionalPsychologicalProcess, s_SetOrClass)).

/*
(subclass Predicting IntentionalPsychologicalProcess)
*/
fof(a10203,axiom,s_subclass(s_Predicting, s_IntentionalPsychologicalProcess)).

/*
(forall (?FORMULA ?PREDICT)
 (exists (?TIME)
  (and (and (instance ?TIME TimePoint) (instance ?TIME TimeInterval))
       (=> (instance ?FORMULA Formula)
        (=>
         (and (instance ?PREDICT Predicting)
              (patient ?PREDICT ?FORMULA))
         (and (holdsDuring ?TIME ?FORMULA)
              (or (before ?TIME (WhenFn ?PREDICT))
                  (earlier ?TIME (WhenFn ?PREDICT)))))))))
*/
fof(a10204,axiom,! [FORMULA,PREDICT] : (? [TIME] : (((s_instance(TIME, s_TimePoint) & s_instance(TIME, s_TimeInterval)) & (s_instance(FORMULA, s_Formula) => ((s_instance(PREDICT, s_Predicting) & s_patient(PREDICT, FORMULA)) => (s_holdsDuring(TIME, FORMULA) & (s_before(TIME, s_WhenFn(PREDICT)) | s_earlier(TIME, s_WhenFn(PREDICT)))))))))).

/*
(instance Remembering SetOrClass)
*/
fof(a10205,axiom,s_instance(s_Remembering, s_SetOrClass)).

/*
(subclass Remembering PsychologicalProcess)
*/
fof(a10206,axiom,s_subclass(s_Remembering, s_PsychologicalProcess)).

/*
(forall (?FORMULA ?REMEMBER)
 (exists (?TIME)
  (and (and (instance ?TIME TimePoint) (instance ?TIME TimeInterval))
       (=> (instance ?FORMULA Formula)
        (=>
         (and (instance ?REMEMBER Remembering)
              (patient ?REMEMBER ?FORMULA))
         (and (holdsDuring ?TIME ?FORMULA)
              (or (before ?TIME (WhenFn ?REMEMBER))
                  (earlier ?TIME (WhenFn ?REMEMBER)))))))))
*/
fof(a10207,axiom,! [FORMULA,REMEMBER] : (? [TIME] : (((s_instance(TIME, s_TimePoint) & s_instance(TIME, s_TimeInterval)) & (s_instance(FORMULA, s_Formula) => ((s_instance(REMEMBER, s_Remembering) & s_patient(REMEMBER, FORMULA)) => (s_holdsDuring(TIME, FORMULA) & (s_before(TIME, s_WhenFn(REMEMBER)) | s_earlier(TIME, s_WhenFn(REMEMBER)))))))))).

/*
(subclass Keeping IntentionalProcess)
*/
fof(a10208,axiom,s_subclass(s_Keeping, s_IntentionalProcess)).

/*
(forall (?OBJ ?AGENT ?KEEP)
 (exists (?PUT)
  (and (instance ?PUT Process)
       (=> (and (instance ?OBJ Entity) (instance ?AGENT Agent))
        (=>
         (and (instance ?KEEP Keeping)
              (and (agent ?KEEP ?AGENT) (patient ?KEEP ?OBJ)))
         (and (instance ?PUT Putting)
              (and (agent ?PUT ?AGENT)
                   (and (patient ?PUT ?OBJ)
                        (earlier (WhenFn ?PUT) (WhenFn ?KEEP))))))))))
*/
fof(a10209,axiom,! [OBJ,AGENT,KEEP] : (? [PUT] : ((s_instance(PUT, s_Process) & ((s_instance(OBJ, s_Entity) & s_instance(AGENT, s_Agent)) => ((s_instance(KEEP, s_Keeping) & (s_agent(KEEP, AGENT) & s_patient(KEEP, OBJ))) => (s_instance(PUT, s_Putting) & (s_agent(PUT, AGENT) & (s_patient(PUT, OBJ) & s_earlier(s_WhenFn(PUT), s_WhenFn(KEEP))))))))))).

/*
(forall (?OBJ ?KEEP)
 (exists (?PLACE)
  (forall (?TIME)
   (=> (instance ?TIME TimePosition)
    (and (instance ?PLACE Object)
         (=> (instance ?OBJ Physical)
          (=> (and (instance ?KEEP Keeping) (patient ?KEEP ?OBJ))
           (=> (temporalPart ?TIME (WhenFn ?KEEP))
            (holdsDuring ?TIME (located ?OBJ ?PLACE))))))))))
*/
%% no translation to TPTP available.

/*
(instance Confining SetOrClass)
*/
fof(a10210,axiom,s_instance(s_Confining, s_SetOrClass)).

/*
(instance Keeping SetOrClass)
*/
fof(a10211,axiom,s_instance(s_Keeping, s_SetOrClass)).

/*
(subclass Confining Keeping)
*/
fof(a10212,axiom,s_subclass(s_Confining, s_Keeping)).

/*
(forall (?CONFINE)
 (exists (?AGENT)
  (and (instance ?AGENT Entity)
       (=> (instance ?CONFINE Confining)
        (and (instance ?AGENT Animal) (patient ?CONFINE ?AGENT))))))
*/
fof(a10213,axiom,! [CONFINE] : (? [AGENT] : ((s_instance(AGENT, s_Entity) & (s_instance(CONFINE, s_Confining) => (s_instance(AGENT, s_Animal) & s_patient(CONFINE, AGENT))))))).

/*
(forall (?PERSON ?CONFINE)
 (=>
  (and (instance ?CONFINE Confining)
       (and (patient ?CONFINE ?PERSON) (instance ?PERSON Human)))
  (not (desires ?PERSON (patient ?CONFINE ?PERSON)))))
*/
%% no translation to TPTP available.

/*
(instance Maintaining SetOrClass)
*/
fof(a10214,axiom,s_instance(s_Maintaining, s_SetOrClass)).

/*
(subclass Maintaining IntentionalProcess)
*/
fof(a10215,axiom,s_subclass(s_Maintaining, s_IntentionalProcess)).

/*
(subclass Repairing IntentionalProcess)
*/
fof(a10216,axiom,s_subclass(s_Repairing, s_IntentionalProcess)).

/*
(forall (?OBJ ?REPAIR)
 (exists (?DAMAGE)
  (and (instance ?DAMAGE Process)
       (=> (instance ?OBJ Entity)
        (=> (and (instance ?REPAIR Repairing) (patient ?REPAIR ?OBJ))
         (and (instance ?DAMAGE Damaging)
              (and (patient ?DAMAGE ?OBJ)
                   (earlier (WhenFn ?DAMAGE) (WhenFn ?REPAIR)))))))))
*/
fof(a10217,axiom,! [OBJ,REPAIR] : (? [DAMAGE] : ((s_instance(DAMAGE, s_Process) & (s_instance(OBJ, s_Entity) => ((s_instance(REPAIR, s_Repairing) & s_patient(REPAIR, OBJ)) => (s_instance(DAMAGE, s_Damaging) & (s_patient(DAMAGE, OBJ) & s_earlier(s_WhenFn(DAMAGE), s_WhenFn(REPAIR)))))))))).

/*
(instance Repairing SetOrClass)
*/
fof(a10218,axiom,s_instance(s_Repairing, s_SetOrClass)).

/*
(subclass TherapeuticProcess Repairing)
*/
fof(a10219,axiom,s_subclass(s_TherapeuticProcess, s_Repairing)).

/*
(forall (?BIO ?PROC)
 (exists (?ORG)
  (and (instance ?ORG Object)
       (=> (instance ?BIO Object)
        (=>
         (and (instance ?PROC TherapeuticProcess) (patient ?PROC ?BIO))
         (or (instance ?BIO Organism)
             (and (instance ?ORG Organism) (part ?BIO ?ORG))))))))
*/
fof(a10220,axiom,! [BIO,PROC] : (? [ORG] : ((s_instance(ORG, s_Object) & (s_instance(BIO, s_Object) => ((s_instance(PROC, s_TherapeuticProcess) & s_patient(PROC, BIO)) => (s_instance(BIO, s_Organism) | (s_instance(ORG, s_Organism) & s_part(BIO, ORG))))))))).

/*
(instance Surgery SetOrClass)
*/
fof(a10221,axiom,s_instance(s_Surgery, s_SetOrClass)).

/*
(instance TherapeuticProcess SetOrClass)
*/
fof(a10222,axiom,s_instance(s_TherapeuticProcess, s_SetOrClass)).

/*
(subclass Surgery TherapeuticProcess)
*/
fof(a10223,axiom,s_subclass(s_Surgery, s_TherapeuticProcess)).

/*
(forall (?ANIMAL ?ACT)
 (exists (?SUBACT)
  (and (instance ?SUBACT Process)
       (=> (instance ?ANIMAL Entity)
        (=> (and (instance ?ACT Surgery) (patient ?ACT ?ANIMAL))
         (and (instance ?SUBACT Cutting)
              (and (instance ?ANIMAL Animal)
                   (and (patient ?SUBACT ?ANIMAL)
                        (subProcess ?SUBACT ?ACT)))))))))
*/
fof(a10224,axiom,! [ANIMAL,ACT] : (? [SUBACT] : ((s_instance(SUBACT, s_Process) & (s_instance(ANIMAL, s_Entity) => ((s_instance(ACT, s_Surgery) & s_patient(ACT, ANIMAL)) => (s_instance(SUBACT, s_Cutting) & (s_instance(ANIMAL, s_Animal) & (s_patient(SUBACT, ANIMAL) & s_subProcess(SUBACT, ACT)))))))))).

/*
(subclass Damaging InternalChange)
*/
fof(a10225,axiom,s_subclass(s_Damaging, s_InternalChange)).

/*
(disjoint Damaging Repairing)
*/
fof(a10226,axiom,s_disjoint(s_Damaging, s_Repairing)).

/*
(instance Damaging SetOrClass)
*/
fof(a10227,axiom,s_instance(s_Damaging, s_SetOrClass)).

/*
(subclass Destruction Damaging)
*/
fof(a10228,axiom,s_subclass(s_Destruction, s_Damaging)).

/*
(forall (?PROCESS)
 (forall (?PATIENT)
  (exists (?g7086)
   (and (instance ?g7086 Physical)
        (=> (instance ?PATIENT Physical)
         (and (=> (instance ?PROCESS Destruction)
               (and (patient ?PROCESS ?g7086)
                    (and (time ?g7086 (BeginFn (WhenFn ?PROCESS)))
                         (not (time ?g7086
                                    (EndFn (WhenFn ?PROCESS)))))))
              (=>
               (and (patient ?PROCESS ?PATIENT)
                    (and (time ?PATIENT (BeginFn (WhenFn ?PROCESS)))
                         (not (time ?PATIENT
                                    (EndFn (WhenFn ?PROCESS))))))
               (instance ?PROCESS Destruction))))))))
*/
fof(a10229,axiom,! [PROCESS] : (! [PATIENT] : (? [G7086] : ((s_instance(G7086, s_Physical) & (s_instance(PATIENT, s_Physical) => ((s_instance(PROCESS, s_Destruction) => (s_patient(PROCESS, G7086) & (s_time(G7086, s_BeginFn(s_WhenFn(PROCESS))) & (~ s_time(G7086, s_EndFn(s_WhenFn(PROCESS))))))) & ((s_patient(PROCESS, PATIENT) & (s_time(PATIENT, s_BeginFn(s_WhenFn(PROCESS))) & (~ s_time(PATIENT, s_EndFn(s_WhenFn(PROCESS)))))) => s_instance(PROCESS, s_Destruction))))))))).

/*
(instance Killing SetOrClass)
*/
fof(a10230,axiom,s_instance(s_Killing, s_SetOrClass)).

/*
(instance Destruction SetOrClass)
*/
fof(a10231,axiom,s_instance(s_Destruction, s_SetOrClass)).

/*
(subclass Killing Destruction)
*/
fof(a10232,axiom,s_subclass(s_Killing, s_Destruction)).

/*
(forall (?PATIENT ?AGENT ?KILL)
 (=> (and (instance ?PATIENT Entity) (instance ?AGENT Agent))
  (=>
   (and (instance ?KILL Killing)
        (and (agent ?KILL ?AGENT) (patient ?KILL ?PATIENT)))
   (and (instance ?AGENT Organism) (instance ?PATIENT Organism)))))
*/
fof(a10233,axiom,! [PATIENT,AGENT,KILL] : (((s_instance(PATIENT, s_Entity) & s_instance(AGENT, s_Agent)) => ((s_instance(KILL, s_Killing) & (s_agent(KILL, AGENT) & s_patient(KILL, PATIENT))) => (s_instance(AGENT, s_Organism) & s_instance(PATIENT, s_Organism)))))).

/*
(forall (?PATIENT ?KILL)
 (=> (instance ?PATIENT Object)
  (=> (and (instance ?KILL Killing) (patient ?KILL ?PATIENT))
   (and (holdsDuring (BeginFn (WhenFn ?KILL))
         (attribute ?PATIENT Living))
        (holdsDuring (FutureFn (WhenFn ?KILL))
         (attribute ?PATIENT Dead))))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?KILL)
 (exists (?DEATH)
  (and (instance ?DEATH Process)
       (=> (instance ?OBJ Agent)
        (=> (and (instance ?KILL Killing) (patient ?KILL ?OBJ))
         (and (instance ?DEATH Death)
              (and (experiencer ?DEATH ?OBJ)
                   (causes ?KILL ?DEATH))))))))
*/
fof(a10234,axiom,! [OBJ,KILL] : (? [DEATH] : ((s_instance(DEATH, s_Process) & (s_instance(OBJ, s_Agent) => ((s_instance(KILL, s_Killing) & s_patient(KILL, OBJ)) => (s_instance(DEATH, s_Death) & (s_experiencer(DEATH, OBJ) & s_causes(KILL, DEATH))))))))).

/*
(subclass Poking IntentionalProcess)
*/
fof(a10235,axiom,s_subclass(s_Poking, s_IntentionalProcess)).

/*
(forall (?AGENT ?INST ?OBJ ?POKE)
 (=>
  (and (instance ?AGENT Agent) (instance ?INST Object)
       (instance ?OBJ Object))
  (=>
   (and (instance ?POKE Poking)
        (and (agent ?POKE ?AGENT)
             (and (patient ?POKE ?OBJ) (instrument ?POKE ?INST))))
   (holdsDuring (WhenFn ?POKE) (connects ?INST ?AGENT ?OBJ)))))
*/
%% no translation to TPTP available.

/*
(instance Cutting SetOrClass)
*/
fof(a10236,axiom,s_instance(s_Cutting, s_SetOrClass)).

/*
(instance Poking SetOrClass)
*/
fof(a10237,axiom,s_instance(s_Poking, s_SetOrClass)).

/*
(subclass Cutting Poking)
*/
fof(a10238,axiom,s_subclass(s_Cutting, s_Poking)).

/*
(instance Attaching SetOrClass)
*/
fof(a10239,axiom,s_instance(s_Attaching, s_SetOrClass)).

/*
(subclass Attaching DualObjectProcess)
*/
fof(a10240,axiom,s_subclass(s_Attaching, s_DualObjectProcess)).

/*
(disjoint Attaching Detaching)
*/
fof(a10241,axiom,s_disjoint(s_Attaching, s_Detaching)).

/*
(forall (?OBJ2 ?OBJ1 ?ATTACH)
 (=> (and (instance ?OBJ2 Object) (instance ?OBJ1 Object))
  (=>
   (and (instance ?ATTACH Attaching)
        (and (patient ?ATTACH ?OBJ1) (patient ?ATTACH ?OBJ2)))
   (and (holdsDuring (BeginFn (WhenFn ?ATTACH))
         (not (connected ?OBJ1 ?OBJ2)))
        (holdsDuring (EndFn (WhenFn ?ATTACH))
         (connected ?OBJ1 ?OBJ2))))))
*/
%% no translation to TPTP available.

/*
(forall (?ATTACH)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?ATTACH Attaching)
        (and (instance ?OBJ CorpuscularObject)
             (patient ?ATTACH ?OBJ))))))
*/
fof(a10242,axiom,! [ATTACH] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(ATTACH, s_Attaching) => (s_instance(OBJ, s_CorpuscularObject) & s_patient(ATTACH, OBJ))))))).

/*
(subclass Detaching DualObjectProcess)
*/
fof(a10243,axiom,s_subclass(s_Detaching, s_DualObjectProcess)).

/*
(forall (?OBJ2 ?OBJ1 ?DETACH)
 (=> (and (instance ?OBJ2 Object) (instance ?OBJ1 Object))
  (=>
   (and (instance ?DETACH Detaching)
        (and (patient ?DETACH ?OBJ1) (patient ?DETACH ?OBJ2)))
   (and (holdsDuring (BeginFn (WhenFn ?DETACH))
         (connected ?OBJ1 ?OBJ2))
        (holdsDuring (EndFn (WhenFn ?DETACH))
         (not (connected ?OBJ1 ?OBJ2)))))))
*/
%% no translation to TPTP available.

/*
(forall (?DETACH)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?DETACH Detaching)
        (and (instance ?OBJ CorpuscularObject)
             (patient ?DETACH ?OBJ))))))
*/
fof(a10244,axiom,! [DETACH] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(DETACH, s_Detaching) => (s_instance(OBJ, s_CorpuscularObject) & s_patient(DETACH, OBJ))))))).

/*
(instance Ungrasping SetOrClass)
*/
fof(a10245,axiom,s_instance(s_Ungrasping, s_SetOrClass)).

/*
(instance Detaching SetOrClass)
*/
fof(a10246,axiom,s_instance(s_Detaching, s_SetOrClass)).

/*
(subclass Ungrasping Detaching)
*/
fof(a10247,axiom,s_subclass(s_Ungrasping, s_Detaching)).

/*
(forall (?RELEASE ?THING ?AGENT ?GRAB)
 (=>
  (and (instance ?THING Object) (instance ?AGENT Animal)
       (instance ?GRAB Process))
  (=>
   (and (instance ?RELEASE Ungrasping)
        (and (agent ?GRAB ?AGENT) (patient ?GRAB ?THING)))
   (and (holdsDuring (BeginFn (WhenFn ?RELEASE))
         (grasps ?AGENT ?THING))
        (holdsDuring (EndFn (WhenFn ?RELEASE))
         (not (grasps ?AGENT ?THING)))))))
*/
%% no translation to TPTP available.

/*
(subclass Combining DualObjectProcess)
*/
fof(a10248,axiom,s_subclass(s_Combining, s_DualObjectProcess)).

/*
(forall (?OBJ2 ?OBJ1 ?COMBINE)
 (=> (and (instance ?OBJ2 Object) (instance ?OBJ1 Object))
  (<=>
   (and (instance ?COMBINE Combining)
        (and (resource ?COMBINE ?OBJ1) (result ?COMBINE ?OBJ2)))
   (and (holdsDuring (BeginFn (WhenFn ?COMBINE))
         (not (part ?OBJ1 ?OBJ2)))
        (holdsDuring (EndFn (WhenFn ?COMBINE)) (part ?OBJ1 ?OBJ2))))))
*/
%% no translation to TPTP available.

/*
(forall (?COMBINE)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?COMBINE Combining)
        (and (instance ?OBJ SelfConnectedObject)
             (patient ?COMBINE ?OBJ))))))
*/
fof(a10249,axiom,! [COMBINE] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(COMBINE, s_Combining) => (s_instance(OBJ, s_SelfConnectedObject) & s_patient(COMBINE, OBJ))))))).

/*
(subclass Separating DualObjectProcess)
*/
fof(a10250,axiom,s_subclass(s_Separating, s_DualObjectProcess)).

/*
(disjoint Separating Combining)
*/
fof(a10251,axiom,s_disjoint(s_Separating, s_Combining)).

/*
(forall (?SEPARATE)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?SEPARATE Separating)
        (and (instance ?OBJ SelfConnectedObject)
             (patient ?SEPARATE ?OBJ))))))
*/
fof(a10252,axiom,! [SEPARATE] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(SEPARATE, s_Separating) => (s_instance(OBJ, s_SelfConnectedObject) & s_patient(SEPARATE, OBJ))))))).

/*
(subclass ChemicalProcess InternalChange)
*/
fof(a10253,axiom,s_subclass(s_ChemicalProcess, s_InternalChange)).

/*
(partition3 ChemicalProcess ChemicalSynthesis ChemicalDecomposition)
*/
fof(a10254,axiom,s_partition3(s_ChemicalProcess, s_ChemicalSynthesis, s_ChemicalDecomposition)).

/*
(forall (?STUFF ?PROC)
 (=> (instance ?STUFF Object)
  (=>
   (and (instance ?PROC ChemicalProcess)
        (or (resource ?PROC ?STUFF) (result ?PROC ?STUFF)))
   (instance ?STUFF PureSubstance))))
*/
fof(a10255,axiom,! [STUFF,PROC] : ((s_instance(STUFF, s_Object) => ((s_instance(PROC, s_ChemicalProcess) & (s_resource(PROC, STUFF) | s_result(PROC, STUFF))) => s_instance(STUFF, s_PureSubstance))))).

/*
(subclass ChemicalSynthesis ChemicalProcess)
*/
fof(a10256,axiom,s_subclass(s_ChemicalSynthesis, s_ChemicalProcess)).

/*
(instance ChemicalSynthesis SetOrClass)
*/
fof(a10257,axiom,s_instance(s_ChemicalSynthesis, s_SetOrClass)).

/*
(instance Combining SetOrClass)
*/
fof(a10258,axiom,s_instance(s_Combining, s_SetOrClass)).

/*
(subclass ChemicalSynthesis Combining)
*/
fof(a10259,axiom,s_subclass(s_ChemicalSynthesis, s_Combining)).

/*
(forall (?SUBSTANCE1 ?SUBSTANCE2 ?PROC)
 (=> (instance ?PROC Process)
  (=>
   (and (resource ?PROC ?SUBSTANCE1)
        (and (result ?PROC ?SUBSTANCE2)
             (and (instance ?SUBSTANCE1 ElementalSubstance)
                  (instance ?SUBSTANCE2 CompoundSubstance))))
   (instance ?PROC ChemicalSynthesis))))
*/
fof(a10260,axiom,! [SUBSTANCE1,SUBSTANCE2,PROC] : ((s_instance(PROC, s_Process) => ((s_resource(PROC, SUBSTANCE1) & (s_result(PROC, SUBSTANCE2) & (s_instance(SUBSTANCE1, s_ElementalSubstance) & s_instance(SUBSTANCE2, s_CompoundSubstance)))) => s_instance(PROC, s_ChemicalSynthesis))))).

/*
(forall (?COMPOUND)
 (forall (?ELEMENT1 ?ELEMENT2 ?PROCESS)
  (exists (?g7099 ?g7100 ?g7101)
   (and (=> (instance ?COMPOUND CompoundSubstance)
         (and (instance ?g7099 ElementalSubstance)
              (and (instance ?g7100 ElementalSubstance)
                   (and (not (equal ?g7099 ?g7100))
                        (and (instance ?g7101 ChemicalSynthesis)
                             (and (resource ?g7101 ?g7099)
                                  (and
                                   (resource ?g7101 ?g7100)
                                   (result ?g7101 ?COMPOUND))))))))
        (=>
         (and (instance ?ELEMENT1 ElementalSubstance)
              (and (instance ?ELEMENT2 ElementalSubstance)
                   (and (not (equal ?ELEMENT1 ?ELEMENT2))
                        (and (instance ?PROCESS ChemicalSynthesis)
                             (and (resource ?PROCESS ?ELEMENT1)
                                  (and
                                   (resource ?PROCESS ?ELEMENT2)
                                   (result ?PROCESS ?COMPOUND)))))))
         (instance ?COMPOUND CompoundSubstance))))))
*/
fof(a10261,axiom,! [COMPOUND] : (! [ELEMENT1,ELEMENT2,PROCESS] : (? [G7099,G7100,G7101] : (((s_instance(COMPOUND, s_CompoundSubstance) => (s_instance(G7099, s_ElementalSubstance) & (s_instance(G7100, s_ElementalSubstance) & ((~ (G7099 = G7100)) & (s_instance(G7101, s_ChemicalSynthesis) & (s_resource(G7101, G7099) & (s_resource(G7101, G7100) & s_result(G7101, COMPOUND)))))))) & ((s_instance(ELEMENT1, s_ElementalSubstance) & (s_instance(ELEMENT2, s_ElementalSubstance) & ((~ (ELEMENT1 = ELEMENT2)) & (s_instance(PROCESS, s_ChemicalSynthesis) & (s_resource(PROCESS, ELEMENT1) & (s_resource(PROCESS, ELEMENT2) & s_result(PROCESS, COMPOUND))))))) => s_instance(COMPOUND, s_CompoundSubstance))))))).

/*
(instance ChemicalProcess SetOrClass)
*/
fof(a10262,axiom,s_instance(s_ChemicalProcess, s_SetOrClass)).

/*
(subclass ChemicalDecomposition ChemicalProcess)
*/
fof(a10263,axiom,s_subclass(s_ChemicalDecomposition, s_ChemicalProcess)).

/*
(instance Separating SetOrClass)
*/
fof(a10264,axiom,s_instance(s_Separating, s_SetOrClass)).

/*
(subclass ChemicalDecomposition Separating)
*/
fof(a10265,axiom,s_subclass(s_ChemicalDecomposition, s_Separating)).

/*
(forall (?SUBSTANCE1 ?SUBSTANCE2 ?PROC)
 (=> (instance ?PROC Process)
  (=>
   (and (resource ?PROC ?SUBSTANCE1)
        (and (result ?PROC ?SUBSTANCE2)
             (and (instance ?SUBSTANCE1 CompoundSubstance)
                  (instance ?SUBSTANCE2 ElementalSubstance))))
   (instance ?PROC ChemicalDecomposition))))
*/
fof(a10266,axiom,! [SUBSTANCE1,SUBSTANCE2,PROC] : ((s_instance(PROC, s_Process) => ((s_resource(PROC, SUBSTANCE1) & (s_result(PROC, SUBSTANCE2) & (s_instance(SUBSTANCE1, s_CompoundSubstance) & s_instance(SUBSTANCE2, s_ElementalSubstance)))) => s_instance(PROC, s_ChemicalDecomposition))))).

/*
(instance Combustion SetOrClass)
*/
fof(a10267,axiom,s_instance(s_Combustion, s_SetOrClass)).

/*
(instance ChemicalDecomposition SetOrClass)
*/
fof(a10268,axiom,s_instance(s_ChemicalDecomposition, s_SetOrClass)).

/*
(subclass Combustion ChemicalDecomposition)
*/
fof(a10269,axiom,s_subclass(s_Combustion, s_ChemicalDecomposition)).

/*
(forall (?COMBUSTION)
 (exists (?HEAT ?LIGHT)
  (and (and (instance ?LIGHT Process) (instance ?HEAT Process))
       (=> (instance ?COMBUSTION Combustion)
        (and (instance ?HEAT Heating)
             (and (instance ?LIGHT RadiatingLight)
                  (and (subProcess ?HEAT ?COMBUSTION)
                       (subProcess ?LIGHT ?COMBUSTION))))))))
*/
fof(a10270,axiom,! [COMBUSTION] : (? [HEAT,LIGHT] : (((s_instance(LIGHT, s_Process) & s_instance(HEAT, s_Process)) & (s_instance(COMBUSTION, s_Combustion) => (s_instance(HEAT, s_Heating) & (s_instance(LIGHT, s_RadiatingLight) & (s_subProcess(HEAT, COMBUSTION) & s_subProcess(LIGHT, COMBUSTION))))))))).

/*
(instance PhysicalAttribute SetOrClass)
*/
fof(a10271,axiom,s_instance(s_PhysicalAttribute, s_SetOrClass)).

/*
(instance Flammable PhysicalAttribute)
*/
fof(a10272,axiom,s_instance(s_Flammable, s_PhysicalAttribute)).

/*
(forall (?X)
 (=> (instance ?X Object)
  (=> (attribute ?X Flammable) (capability Combustion patient ?X))))
*/
fof(a10273,axiom,! [X] : ((s_instance(X, s_Object) => (s_attribute(X, s_Flammable) => s_capability(s_Combustion, s_patient_m, X))))).

/*
(instance Process SetOrClass)
*/
fof(a10274,axiom,s_instance(s_Process, s_SetOrClass)).

/*
(subclass InternalChange Process)
*/
fof(a10275,axiom,s_subclass(s_InternalChange, s_Process)).

/*
(forall (?OBJ ?CHANGE)
 (exists (?PROPERTY)
  (and (instance ?PROPERTY Attribute)
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?CHANGE InternalChange) (patient ?CHANGE ?OBJ))
         (or (and (holdsDuring (BeginFn (WhenFn ?CHANGE))
                   (attribute ?OBJ ?PROPERTY))
                  (holdsDuring (EndFn (WhenFn ?CHANGE))
                   (not (attribute ?OBJ ?PROPERTY))))
             (and (holdsDuring (BeginFn (WhenFn ?CHANGE))
                   (not (attribute ?OBJ ?PROPERTY)))
                  (holdsDuring (EndFn (WhenFn ?CHANGE))
                   (attribute ?OBJ ?PROPERTY)))))))))
*/
%% no translation to TPTP available.

/*
(subclass SurfaceChange InternalChange)
*/
fof(a10276,axiom,s_subclass(s_SurfaceChange, s_InternalChange)).

/*
(forall (?OBJ ?ALT)
 (exists (?PART ?PROPERTY)
  (and (and (instance ?PROPERTY Attribute) (instance ?PART Object))
       (=> (instance ?OBJ Object)
        (=> (and (instance ?ALT SurfaceChange) (patient ?ALT ?OBJ))
         (and (superficialPart ?PART ?OBJ)
              (or (and (holdsDuring (BeginFn (WhenFn ?ALT))
                        (attribute ?PART ?PROPERTY))
                       (holdsDuring (EndFn (WhenFn ?ALT))
                        (not (attribute ?PART ?PROPERTY))))
                  (and (holdsDuring (BeginFn (WhenFn ?ALT))
                        (not (attribute ?PART ?PROPERTY)))
                       (holdsDuring (EndFn (WhenFn ?ALT))
                        (attribute ?PART ?PROPERTY))))))))))
*/
%% no translation to TPTP available.

/*
(instance Coloring SetOrClass)
*/
fof(a10277,axiom,s_instance(s_Coloring, s_SetOrClass)).

/*
(instance SurfaceChange SetOrClass)
*/
fof(a10278,axiom,s_instance(s_SurfaceChange, s_SetOrClass)).

/*
(subclass Coloring SurfaceChange)
*/
fof(a10279,axiom,s_subclass(s_Coloring, s_SurfaceChange)).

/*
(forall (?OBJ ?COLORING)
 (exists (?PROPERTY ?PART)
  (and (and (instance ?PART Object) (instance ?PROPERTY Attribute))
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?COLORING Coloring) (patient ?COLORING ?OBJ))
         (and (part ?PART ?OBJ)
              (and (instance ?PROPERTY ColorAttribute)
                   (or (and (holdsDuring (BeginFn (WhenFn ?COLORING))
                             (attribute ?PART ?PROPERTY))
                            (holdsDuring (EndFn (WhenFn ?COLORING))
                             (not (attribute ?PART ?PROPERTY))))
                       (and (holdsDuring (BeginFn (WhenFn ?COLORING))
                             (not (attribute ?PART ?PROPERTY)))
                            (holdsDuring (EndFn (WhenFn ?COLORING))
                             (attribute ?PART ?PROPERTY)))))))))))
*/
%% no translation to TPTP available.

/*
(instance ShapeChange SetOrClass)
*/
fof(a10280,axiom,s_instance(s_ShapeChange, s_SetOrClass)).

/*
(subclass ShapeChange InternalChange)
*/
fof(a10281,axiom,s_subclass(s_ShapeChange, s_InternalChange)).

/*
(forall (?OBJ ?ALT)
 (exists (?PROPERTY)
  (and (instance ?PROPERTY Attribute)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?ALT ShapeChange) (patient ?ALT ?OBJ))
         (and (instance ?PROPERTY ShapeAttribute)
              (or (and (holdsDuring (BeginFn (WhenFn ?ALT))
                        (attribute ?OBJ ?PROPERTY))
                       (holdsDuring (EndFn (WhenFn ?ALT))
                        (not (attribute ?OBJ ?PROPERTY))))
                  (and (holdsDuring (BeginFn (WhenFn ?ALT))
                        (not (attribute ?OBJ ?PROPERTY)))
                       (holdsDuring (EndFn (WhenFn ?ALT))
                        (attribute ?OBJ ?PROPERTY))))))))))
*/
%% no translation to TPTP available.

/*
(subclass ContentDevelopment IntentionalProcess)
*/
fof(a10282,axiom,s_subclass(s_ContentDevelopment, s_IntentionalProcess)).

/*
(forall (?DEVELOP)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?DEVELOP ContentDevelopment)
        (and (instance ?OBJ ContentBearingObject)
             (result ?DEVELOP ?OBJ))))))
*/
fof(a10283,axiom,! [DEVELOP] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(DEVELOP, s_ContentDevelopment) => (s_instance(OBJ, s_ContentBearingObject) & s_result(DEVELOP, OBJ))))))).

/*
(instance Reading SetOrClass)
*/
fof(a10284,axiom,s_instance(s_Reading, s_SetOrClass)).

/*
(subclass Reading ContentDevelopment)
*/
fof(a10285,axiom,s_subclass(s_Reading, s_ContentDevelopment)).

/*
(forall (?READ)
 (exists (?TEXT ?PROP)
  (and (and (instance ?PROP Proposition)
            (instance ?TEXT ContentBearingPhysical))
       (=> (instance ?READ Reading)
        (and (instance ?TEXT Text)
             (and (containsInformation ?TEXT ?PROP)
                  (realization ?READ ?PROP)))))))
*/
fof(a10286,axiom,! [READ] : (? [TEXT,PROP] : (((s_instance(PROP, s_Proposition) & s_instance(TEXT, s_ContentBearingPhysical)) & (s_instance(READ, s_Reading) => (s_instance(TEXT, s_Text) & (s_containsInformation(TEXT, PROP) & s_realization(READ, PROP)))))))).

/*
(subclass Writing ContentDevelopment)
*/
fof(a10287,axiom,s_subclass(s_Writing, s_ContentDevelopment)).

/*
(instance Encoding SetOrClass)
*/
fof(a10288,axiom,s_instance(s_Encoding, s_SetOrClass)).

/*
(subclass Encoding Writing)
*/
fof(a10289,axiom,s_subclass(s_Encoding, s_Writing)).

/*
(instance Decoding SetOrClass)
*/
fof(a10290,axiom,s_instance(s_Decoding, s_SetOrClass)).

/*
(instance Writing SetOrClass)
*/
fof(a10291,axiom,s_instance(s_Writing, s_SetOrClass)).

/*
(subclass Decoding Writing)
*/
fof(a10292,axiom,s_subclass(s_Decoding, s_Writing)).

/*
(disjoint Decoding Encoding)
*/
fof(a10293,axiom,s_disjoint(s_Decoding, s_Encoding)).

/*
(forall (?DECODE ?PROP ?DOC1)
 (exists (?ENCODE ?DOC2 ?TIME)
  (and (and (instance ?TIME TimePosition)
            (instance ?DOC2 ContentBearingPhysical)
            (instance ?ENCODE Process))
       (=>
        (and (instance ?PROP Proposition)
             (instance ?DOC1 ContentBearingPhysical))
        (=> (and (instance ?DECODE Decoding) (patient ?DECODE ?DOC1))
         (and (containsInformation ?DOC2 ?PROP)
              (and (containsInformation ?DOC1 ?PROP)
                   (and (temporalPart ?TIME (PastFn (WhenFn ?DECODE)))
                        (holdsDuring ?TIME
                         (and (instance ?ENCODE Encoding)
                              (patient ?ENCODE ?DOC2)))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Translating ContentDevelopment)
*/
fof(a10294,axiom,s_subclass(s_Translating, s_ContentDevelopment)).

/*
(instance Translating SetOrClass)
*/
fof(a10295,axiom,s_instance(s_Translating, s_SetOrClass)).

/*
(instance DualObjectProcess SetOrClass)
*/
fof(a10296,axiom,s_instance(s_DualObjectProcess, s_SetOrClass)).

/*
(subclass Translating DualObjectProcess)
*/
fof(a10297,axiom,s_subclass(s_Translating, s_DualObjectProcess)).

/*
(forall (?EXPRESSION2 ?EXPRESSION1 ?TRANSLATE)
 (exists (?LANGUAGE1 ?LANGUAGE2 ?ENTITY)
  (and (and (instance ?ENTITY Entity) (instance ?LANGUAGE2 Language)
            (instance ?LANGUAGE1 Language))
       (=>
        (and (instance ?EXPRESSION2 LinguisticExpression)
             (instance ?EXPRESSION1 LinguisticExpression))
        (=>
         (and (instance ?TRANSLATE Translating)
              (and (patient ?TRANSLATE ?EXPRESSION1)
                   (result ?TRANSLATE ?EXPRESSION2)))
         (and (representsInLanguage ?EXPRESSION1 ?ENTITY ?LANGUAGE1)
              (and (representsInLanguage ?EXPRESSION2 ?ENTITY
                    ?LANGUAGE2)
                   (not (equal ?LANGUAGE1 ?LANGUAGE2)))))))))
*/
fof(a10298,axiom,! [EXPRESSION2,EXPRESSION1,TRANSLATE] : (? [LANGUAGE1,LANGUAGE2,ENTITY] : (((s_instance(ENTITY, s_Entity) & s_instance(LANGUAGE2, s_Language) & s_instance(LANGUAGE1, s_Language)) & ((s_instance(EXPRESSION2, s_LinguisticExpression) & s_instance(EXPRESSION1, s_LinguisticExpression)) => ((s_instance(TRANSLATE, s_Translating) & (s_patient(TRANSLATE, EXPRESSION1) & s_result(TRANSLATE, EXPRESSION2))) => (s_representsInLanguage(EXPRESSION1, ENTITY, LANGUAGE1) & (s_representsInLanguage(EXPRESSION2, ENTITY, LANGUAGE2) & (~ (LANGUAGE1 = LANGUAGE2)))))))))).

/*
(instance Wetting SetOrClass)
*/
fof(a10299,axiom,s_instance(s_Wetting, s_SetOrClass)).

/*
(instance Putting SetOrClass)
*/
fof(a10300,axiom,s_instance(s_Putting, s_SetOrClass)).

/*
(subclass Wetting Putting)
*/
fof(a10301,axiom,s_subclass(s_Wetting, s_Putting)).

/*
(forall (?WET)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?WET Wetting)
        (and (patient ?WET ?OBJ)
             (and (holdsDuring (BeginFn (WhenFn ?WET))
                   (not (attribute ?OBJ Damp)))
                  (holdsDuring (EndFn (WhenFn ?WET))
                   (attribute ?OBJ Damp))))))))
*/
%% no translation to TPTP available.

/*
(forall (?WET)
 (exists (?OBJ)
  (and (instance ?OBJ Object)
       (=> (instance ?WET Wetting)
        (and (attribute ?OBJ Liquid) (patient ?WET ?OBJ))))))
*/
fof(a10302,axiom,! [WET] : (? [OBJ] : ((s_instance(OBJ, s_Object) & (s_instance(WET, s_Wetting) => (s_attribute(OBJ, s_Liquid) & s_patient(WET, OBJ))))))).

/*
(instance Drying SetOrClass)
*/
fof(a10303,axiom,s_instance(s_Drying, s_SetOrClass)).

/*
(instance Removing SetOrClass)
*/
fof(a10304,axiom,s_instance(s_Removing, s_SetOrClass)).

/*
(subclass Drying Removing)
*/
fof(a10305,axiom,s_subclass(s_Drying, s_Removing)).

/*
(forall (?OBJ ?DRY)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?DRY Drying) (patient ?DRY ?OBJ))
   (holdsDuring (EndFn (WhenFn ?DRY)) (attribute ?OBJ Dry)))))
*/
%% no translation to TPTP available.

/*
(subclass Creation InternalChange)
*/
fof(a10306,axiom,s_subclass(s_Creation, s_InternalChange)).

/*
(forall (?ACTION)
 (exists (?RESULT)
  (and (instance ?RESULT Entity)
       (=> (instance ?ACTION Creation) (result ?ACTION ?RESULT)))))
*/
fof(a10307,axiom,! [ACTION] : (? [RESULT] : ((s_instance(RESULT, s_Entity) & (s_instance(ACTION, s_Creation) => s_result(ACTION, RESULT)))))).

/*
(forall (?PROCESS)
 (forall (?PATIENT)
  (exists (?g7127)
   (and (instance ?g7127 Physical)
        (=> (instance ?PATIENT Physical)
         (and (=> (instance ?PROCESS Creation)
               (and (patient ?PROCESS ?g7127)
                    (and (time ?g7127 (EndFn (WhenFn ?PROCESS)))
                         (not (time ?g7127
                                    (BeginFn (WhenFn ?PROCESS)))))))
              (=>
               (and (patient ?PROCESS ?PATIENT)
                    (and (time ?PATIENT (EndFn (WhenFn ?PROCESS)))
                         (not (time ?PATIENT
                                    (BeginFn (WhenFn ?PROCESS))))))
               (instance ?PROCESS Creation))))))))
*/
fof(a10308,axiom,! [PROCESS] : (! [PATIENT] : (? [G7127] : ((s_instance(G7127, s_Physical) & (s_instance(PATIENT, s_Physical) => ((s_instance(PROCESS, s_Creation) => (s_patient(PROCESS, G7127) & (s_time(G7127, s_EndFn(s_WhenFn(PROCESS))) & (~ s_time(G7127, s_BeginFn(s_WhenFn(PROCESS))))))) & ((s_patient(PROCESS, PATIENT) & (s_time(PATIENT, s_EndFn(s_WhenFn(PROCESS))) & (~ s_time(PATIENT, s_BeginFn(s_WhenFn(PROCESS)))))) => s_instance(PROCESS, s_Creation))))))))).

/*
(instance Creation SetOrClass)
*/
fof(a10309,axiom,s_instance(s_Creation, s_SetOrClass)).

/*
(subclass Making Creation)
*/
fof(a10310,axiom,s_subclass(s_Making, s_Creation)).

/*
(subclass Making IntentionalProcess)
*/
fof(a10311,axiom,s_subclass(s_Making, s_IntentionalProcess)).

/*
(forall (?MAKING)
 (exists (?ARTIFACT)
  (and (instance ?ARTIFACT Entity)
       (=> (instance ?MAKING Making)
        (and (instance ?ARTIFACT Artifact)
             (result ?MAKING ?ARTIFACT))))))
*/
fof(a10312,axiom,! [MAKING] : (? [ARTIFACT] : ((s_instance(ARTIFACT, s_Entity) & (s_instance(MAKING, s_Making) => (s_instance(ARTIFACT, s_Artifact) & s_result(MAKING, ARTIFACT))))))).

/*
(instance Constructing SetOrClass)
*/
fof(a10313,axiom,s_instance(s_Constructing, s_SetOrClass)).

/*
(subclass Constructing Making)
*/
fof(a10314,axiom,s_subclass(s_Constructing, s_Making)).

/*
(forall (?ARTIFACT)
 (forall (?BUILD)
  (exists (?g7132)
   (and (=>
         (and (instance ?BUILD Constructing) (result ?BUILD ?ARTIFACT))
         (instance ?ARTIFACT StationaryArtifact))
        (=> (instance ?ARTIFACT StationaryArtifact)
         (and (instance ?g7132 Constructing)
              (result ?g7132 ?ARTIFACT)))))))
*/
fof(a10315,axiom,! [ARTIFACT] : (! [BUILD] : (? [G7132] : ((((s_instance(BUILD, s_Constructing) & s_result(BUILD, ARTIFACT)) => s_instance(ARTIFACT, s_StationaryArtifact)) & (s_instance(ARTIFACT, s_StationaryArtifact) => (s_instance(G7132, s_Constructing) & s_result(G7132, ARTIFACT)))))))).

/*
(subclass Manufacture Making)
*/
fof(a10316,axiom,s_subclass(s_Manufacture, s_Making)).

/*
(instance Manufacture SetOrClass)
*/
fof(a10317,axiom,s_instance(s_Manufacture, s_SetOrClass)).

/*
(subclass Publication Manufacture)
*/
fof(a10318,axiom,s_subclass(s_Publication, s_Manufacture)).

/*
(instance Publication SetOrClass)
*/
fof(a10319,axiom,s_instance(s_Publication, s_SetOrClass)).

/*
(subclass Publication ContentDevelopment)
*/
fof(a10320,axiom,s_subclass(s_Publication, s_ContentDevelopment)).

/*
(forall (?TEXT ?PUB)
 (=> (instance ?TEXT SetOrClass)
  (=> (and (instance ?PUB Publication) (patient ?PUB ?TEXT))
   (subclass ?TEXT Text))))
*/
fof(a10321,axiom,! [TEXT,PUB] : ((s_instance(TEXT, s_SetOrClass) => ((s_instance(PUB, s_Publication) & s_patient(PUB, TEXT)) => s_subclass(TEXT, s_Text))))).

/*
(instance Cooking SetOrClass)
*/
fof(a10322,axiom,s_instance(s_Cooking, s_SetOrClass)).

/*
(instance Making SetOrClass)
*/
fof(a10323,axiom,s_instance(s_Making, s_SetOrClass)).

/*
(subclass Cooking Making)
*/
fof(a10324,axiom,s_subclass(s_Cooking, s_Making)).

/*
(forall (?COOK)
 (exists (?FOOD)
  (and (instance ?FOOD Entity)
       (=> (instance ?COOK Cooking)
        (and (instance ?FOOD (FoodForFn Organism))
             (result ?COOK ?FOOD))))))
*/
fof(a10325,axiom,! [COOK] : (? [FOOD] : ((s_instance(FOOD, s_Entity) & (s_instance(COOK, s_Cooking) => (s_instance(FOOD, s_FoodForFn(s_Organism)) & s_result(COOK, FOOD))))))).

/*
(subclass Pursuing IntentionalProcess)
*/
fof(a10326,axiom,s_subclass(s_Pursuing, s_IntentionalProcess)).

/*
(forall (?PURSUE)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?PURSUE Pursuing)
        (and (instance ?OBJ Object) (patient ?PURSUE ?OBJ))))))
*/
fof(a10327,axiom,! [PURSUE] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(PURSUE, s_Pursuing) => (s_instance(OBJ, s_Object) & s_patient(PURSUE, OBJ))))))).

/*
(forall (?OBJ ?AGENT ?PURSUE)
 (=> (and (instance ?OBJ Physical) (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance ?PURSUE Pursuing)
        (and (agent ?PURSUE ?AGENT) (patient ?PURSUE ?OBJ)))
   (holdsDuring ?PURSUE (wants ?AGENT ?OBJ)))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?AGENT ?PURSUE)
 (=> (and (instance ?OBJ Object) (instance ?AGENT Agent))
  (=>
   (and (instance ?PURSUE Pursuing)
        (and (agent ?PURSUE ?AGENT) (patient ?PURSUE ?OBJ)))
   (holdsDuring ?PURSUE (not (possesses ?AGENT ?OBJ))))))
*/
%% no translation to TPTP available.

/*
(instance Hunting SetOrClass)
*/
fof(a10328,axiom,s_instance(s_Hunting, s_SetOrClass)).

/*
(instance Pursuing SetOrClass)
*/
fof(a10329,axiom,s_instance(s_Pursuing, s_SetOrClass)).

/*
(subclass Hunting Pursuing)
*/
fof(a10330,axiom,s_subclass(s_Hunting, s_Pursuing)).

/*
(forall (?H)
 (exists (?T)
  (and (instance ?T Entity)
       (=> (instance ?H Hunting)
        (and (instance ?T Animal) (patient ?H ?T))))))
*/
fof(a10331,axiom,! [H] : (? [T] : ((s_instance(T, s_Entity) & (s_instance(H, s_Hunting) => (s_instance(T, s_Animal) & s_patient(H, T))))))).

/*
(forall (?P ?H)
 (=> (instance ?P Entity)
  (=> (and (instance ?H Hunting) (patient ?H ?P))
   (hasPurpose ?H
    (exists (?PROC)
     (and (patient ?PROC ?P)
          (or (instance ?PROC Confining) (instance ?PROC Killing))))))))
*/
%% no translation to TPTP available.

/*
(subclass Investigating IntentionalProcess)
*/
fof(a10332,axiom,s_subclass(s_Investigating, s_IntentionalProcess)).

/*
(forall (?PROP ?INVESTIGATE)
 (=> (instance ?PROP Entity)
  (=>
   (and (instance ?INVESTIGATE Investigating)
        (patient ?INVESTIGATE ?PROP))
   (instance ?PROP Formula))))
*/
fof(a10333,axiom,! [PROP,INVESTIGATE] : ((s_instance(PROP, s_Entity) => ((s_instance(INVESTIGATE, s_Investigating) & s_patient(INVESTIGATE, PROP)) => s_instance(PROP, s_Formula))))).

/*
(forall (?PROP ?AGENT ?INVESTIGATE)
 (=> (and (instance ?PROP Formula) (instance ?AGENT CognitiveAgent))
  (=>
   (and (instance ?INVESTIGATE Investigating)
        (and (agent ?INVESTIGATE ?AGENT) (patient ?INVESTIGATE ?PROP)))
   (holdsDuring (WhenFn ?INVESTIGATE) (not (knows ?AGENT ?PROP))))))
*/
%% no translation to TPTP available.

/*
(forall (?PROP ?AGENT ?INVESTIGATE)
 (=> (and (instance ?PROP Formula) (instance ?AGENT Agent))
  (=>
   (and (instance ?INVESTIGATE Investigating)
        (and (agent ?INVESTIGATE ?AGENT) (patient ?INVESTIGATE ?PROP)))
   (hasPurposeForAgent ?INVESTIGATE (knows ?AGENT ?PROP) ?AGENT))))
*/
%% no translation to TPTP available.

/*
(instance Experimenting SetOrClass)
*/
fof(a10334,axiom,s_instance(s_Experimenting, s_SetOrClass)).

/*
(subclass Experimenting Investigating)
*/
fof(a10335,axiom,s_subclass(s_Experimenting, s_Investigating)).

/*
(instance DiagnosticProcess SetOrClass)
*/
fof(a10336,axiom,s_instance(s_DiagnosticProcess, s_SetOrClass)).

/*
(subclass DiagnosticProcess Investigating)
*/
fof(a10337,axiom,s_subclass(s_DiagnosticProcess, s_Investigating)).

/*
(forall (?AGENT ?PROC)
 (exists (?CAUSE)
  (and (instance ?CAUSE Process)
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?PROC DiagnosticProcess) (agent ?PROC ?AGENT))
         (hasPurposeForAgent ?PROC (knows ?AGENT (causes ?CAUSE ?PROC))
          ?AGENT))))))
*/
%% no translation to TPTP available.

/*
(instance Searching SetOrClass)
*/
fof(a10338,axiom,s_instance(s_Searching, s_SetOrClass)).

/*
(instance Investigating SetOrClass)
*/
fof(a10339,axiom,s_instance(s_Investigating, s_SetOrClass)).

/*
(subclass Searching Investigating)
*/
fof(a10340,axiom,s_subclass(s_Searching, s_Investigating)).

/*
(forall (?S)
 (exists (?AGENT ?OBJ ?LOC)
  (and (and (instance ?LOC Object) (instance ?OBJ Physical)
            (instance ?AGENT Agent))
       (=> (instance ?S Searching)
        (and (instance ?AGENT CognitiveAgent)
             (and (agent ?S ?AGENT)
                  (and (instance ?OBJ Physical)
                       (and (patient ?S ?OBJ)
                            (and (instance ?LOC Object)
                                 (and
                                  (located ?OBJ ?LOC)
                                  (hasPurposeForAgent
                                   ?S
                                   (knows ?AGENT (located ?OBJ ?LOC))
                                   ?AGENT)))))))))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?S)
 (exists (?LOC ?AGENT)
  (and (and (instance ?AGENT Agent) (instance ?LOC Object))
       (=>
        (and (instance ?S Searching)
             (and (patient ?S ?OBJ) (instance ?OBJ Physical)))
        (and (instance ?AGENT CognitiveAgent)
             (and (agent ?S ?AGENT)
                  (and (instance ?LOC Object)
                       (and (located ?OBJ ?LOC)
                            (hasPurposeForAgent ?S
                             (knows ?AGENT (located ?OBJ ?LOC))
                             ?AGENT)))))))))
*/
%% no translation to TPTP available.

/*
(subclass SocialInteraction IntentionalProcess)
*/
fof(a10341,axiom,s_subclass(s_SocialInteraction, s_IntentionalProcess)).

/*
(forall (?INTERACTION)
 (exists (?AGENT1 ?AGENT2)
  (and (and (instance ?AGENT2 Entity) (instance ?AGENT1 Entity))
       (=> (instance ?INTERACTION SocialInteraction)
        (and (involvedInEvent ?INTERACTION ?AGENT1)
             (and (involvedInEvent ?INTERACTION ?AGENT2)
                  (and (instance ?AGENT1 Agent)
                       (and (instance ?AGENT2 Agent)
                            (not (equal ?AGENT1 ?AGENT2))))))))))
*/
fof(a10342,axiom,! [INTERACTION] : (? [AGENT1,AGENT2] : (((s_instance(AGENT2, s_Entity) & s_instance(AGENT1, s_Entity)) & (s_instance(INTERACTION, s_SocialInteraction) => (s_involvedInEvent(INTERACTION, AGENT1) & (s_involvedInEvent(INTERACTION, AGENT2) & (s_instance(AGENT1, s_Agent) & (s_instance(AGENT2, s_Agent) & (~ (AGENT1 = AGENT2))))))))))).

/*
(instance Pretending SetOrClass)
*/
fof(a10343,axiom,s_instance(s_Pretending, s_SetOrClass)).

/*
(subclass Pretending SocialInteraction)
*/
fof(a10344,axiom,s_subclass(s_Pretending, s_SocialInteraction)).

/*
(forall (?PRETEND)
 (exists (?PERSON ?PROP)
  (and (and (instance ?PROP Formula) (instance ?PERSON CognitiveAgent))
       (=> (instance ?PRETEND Pretending)
        (and (hasPurpose ?PRETEND (believes ?PERSON ?PROP))
             (truth ?PROP False))))))
*/
%% no translation to TPTP available.

/*
(subclass Communication SocialInteraction)
*/
fof(a10345,axiom,s_subclass(s_Communication, s_SocialInteraction)).

/*
(instance ContentBearingProcess SetOrClass)
*/
fof(a10346,axiom,s_instance(s_ContentBearingProcess, s_SetOrClass)).

/*
(subclass Communication ContentBearingProcess)
*/
fof(a10347,axiom,s_subclass(s_Communication, s_ContentBearingProcess)).

/*
(partition7 Communication Stating Supposing Directing Committing
 Expressing Declaring)
*/
fof(a10348,axiom,s_partition7(s_Communication, s_Stating, s_Supposing, s_Directing, s_Committing, s_Expressing, s_Declaring)).

/*
(forall (?COMMUNICATE)
 (exists (?PHYS ?ENTITY ?AGENT1 ?AGENT2)
  (and (and (instance ?AGENT2 Entity) (instance ?AGENT1 Agent)
            (instance ?ENTITY Entity) (instance ?PHYS Entity))
       (=> (instance ?COMMUNICATE Communication)
        (and (refers ?PHYS ?ENTITY)
             (and (patient ?COMMUNICATE ?PHYS)
                  (and (instance ?AGENT1 CognitiveAgent)
                       (and (agent ?COMMUNICATE ?AGENT1)
                            (and (instance ?AGENT2 CognitiveAgent)
                                 (destination
                                  ?COMMUNICATE
                                  ?AGENT2))))))))))
*/
fof(a10349,axiom,! [COMMUNICATE] : (? [PHYS,ENTITY,AGENT1,AGENT2] : (((s_instance(AGENT2, s_Entity) & s_instance(AGENT1, s_Agent) & s_instance(ENTITY, s_Entity) & s_instance(PHYS, s_Entity)) & (s_instance(COMMUNICATE, s_Communication) => (s_refers(PHYS, ENTITY) & (s_patient(COMMUNICATE, PHYS) & (s_instance(AGENT1, s_CognitiveAgent) & (s_agent(COMMUNICATE, AGENT1) & (s_instance(AGENT2, s_CognitiveAgent) & s_destination(COMMUNICATE, AGENT2))))))))))).

/*
(subclass Disseminating Communication)
*/
fof(a10350,axiom,s_subclass(s_Disseminating, s_Communication)).

/*
(forall (?DISSEMINATE)
 (exists (?AGENT1 ?AGENT2)
  (and (and (instance ?AGENT2 Entity) (instance ?AGENT1 Entity))
       (=> (instance ?DISSEMINATE Disseminating)
        (and (destination ?DISSEMINATE ?AGENT1)
             (and (instance ?AGENT1 CognitiveAgent)
                  (and (destination ?DISSEMINATE ?AGENT2)
                       (and (instance ?AGENT2 CognitiveAgent)
                            (not (equal ?AGENT1 ?AGENT2))))))))))
*/
fof(a10351,axiom,! [DISSEMINATE] : (? [AGENT1,AGENT2] : (((s_instance(AGENT2, s_Entity) & s_instance(AGENT1, s_Entity)) & (s_instance(DISSEMINATE, s_Disseminating) => (s_destination(DISSEMINATE, AGENT1) & (s_instance(AGENT1, s_CognitiveAgent) & (s_destination(DISSEMINATE, AGENT2) & (s_instance(AGENT2, s_CognitiveAgent) & (~ (AGENT1 = AGENT2))))))))))).

/*
(instance Demonstrating SetOrClass)
*/
fof(a10352,axiom,s_instance(s_Demonstrating, s_SetOrClass)).

/*
(subclass Demonstrating Disseminating)
*/
fof(a10353,axiom,s_subclass(s_Demonstrating, s_Disseminating)).

/*
(forall (?DEMO)
 (exists (?PERSON)
  (and (instance ?PERSON Human)
       (=> (instance ?DEMO Demonstrating) (attends ?DEMO ?PERSON)))))
*/
fof(a10354,axiom,! [DEMO] : (? [PERSON] : ((s_instance(PERSON, s_Human) & (s_instance(DEMO, s_Demonstrating) => s_attends(DEMO, PERSON)))))).

/*
(subrelation attends experiencer)
*/
fof(a10355,axiom,s_subrelation(s_attends_m, s_experiencer_m)).

/*
(instance attends CaseRole)
*/
fof(a10356,axiom,s_instance(s_attends_m, s_CaseRole)).

/*
(instance attends PartialValuedRelation)
*/
fof(a10357,axiom,s_instance(s_attends_m, s_PartialValuedRelation)).

/*
(subclass Gesture Communication)
*/
fof(a10358,axiom,s_subclass(s_Gesture, s_Communication)).

/*
(instance Gesture SetOrClass)
*/
fof(a10359,axiom,s_instance(s_Gesture, s_SetOrClass)).

/*
(instance BodyMotion SetOrClass)
*/
fof(a10360,axiom,s_instance(s_BodyMotion, s_SetOrClass)).

/*
(subclass Gesture BodyMotion)
*/
fof(a10361,axiom,s_subclass(s_Gesture, s_BodyMotion)).

/*
(instance Advertising SetOrClass)
*/
fof(a10362,axiom,s_instance(s_Advertising, s_SetOrClass)).

/*
(instance Disseminating SetOrClass)
*/
fof(a10363,axiom,s_instance(s_Disseminating, s_SetOrClass)).

/*
(subclass Advertising Disseminating)
*/
fof(a10364,axiom,s_subclass(s_Advertising, s_Disseminating)).

/*
(forall (?ADVERT)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?ADVERT Advertising)
        (and (refers ?ADVERT ?OBJ)
             (hasPurpose ?ADVERT
              (exists (?SALE)
               (and (instance ?SALE Selling)
                    (patient ?SALE ?OBJ)))))))))
*/
%% no translation to TPTP available.

/*
(instance Expressing SetOrClass)
*/
fof(a10365,axiom,s_instance(s_Expressing, s_SetOrClass)).

/*
(subclass Expressing Communication)
*/
fof(a10366,axiom,s_subclass(s_Expressing, s_Communication)).

/*
(forall (?AGENT ?EXPRESS)
 (exists (?STATE)
  (and (instance ?STATE Attribute)
       (=> (instance ?AGENT Agent)
        (=>
         (and (instance ?EXPRESS Expressing) (agent ?EXPRESS ?AGENT))
         (and (instance ?STATE StateOfMind)
              (and (attribute ?AGENT ?STATE)
                   (represents ?EXPRESS ?STATE))))))))
*/
fof(a10367,axiom,! [AGENT,EXPRESS] : (? [STATE] : ((s_instance(STATE, s_Attribute) & (s_instance(AGENT, s_Agent) => ((s_instance(EXPRESS, s_Expressing) & s_agent(EXPRESS, AGENT)) => (s_instance(STATE, s_StateOfMind) & (s_attribute(AGENT, STATE) & s_represents(EXPRESS, STATE))))))))).

/*
(instance Communication SetOrClass)
*/
fof(a10368,axiom,s_instance(s_Communication, s_SetOrClass)).

/*
(subclass LinguisticCommunication Communication)
*/
fof(a10369,axiom,s_subclass(s_LinguisticCommunication, s_Communication)).

/*
(forall (?COMMUNICATE)
 (exists (?OBJ)
  (and (instance ?OBJ Entity)
       (=> (instance ?COMMUNICATE LinguisticCommunication)
        (and (represents ?COMMUNICATE ?OBJ)
             (and (instance ?OBJ LinguisticExpression)
                  (patient ?COMMUNICATE ?OBJ)))))))
*/
fof(a10370,axiom,! [COMMUNICATE] : (? [OBJ] : ((s_instance(OBJ, s_Entity) & (s_instance(COMMUNICATE, s_LinguisticCommunication) => (s_represents(COMMUNICATE, OBJ) & (s_instance(OBJ, s_LinguisticExpression) & s_patient(COMMUNICATE, OBJ)))))))).

/*
(subclass Stating LinguisticCommunication)
*/
fof(a10371,axiom,s_subclass(s_Stating, s_LinguisticCommunication)).

/*
(forall (?FORMULA ?AGENT ?STATE)
 (=> (instance ?AGENT CognitiveAgent)
  (=>
   (and (instance ?STATE Stating)
        (and (agent ?STATE ?AGENT)
             (and (patient ?STATE ?FORMULA)
                  (instance ?FORMULA Formula))))
   (holdsDuring (WhenFn ?STATE) (believes ?AGENT ?FORMULA)))))
*/
%% no translation to TPTP available.

/*
(instance Disagreeing SetOrClass)
*/
fof(a10372,axiom,s_instance(s_Disagreeing, s_SetOrClass)).

/*
(instance Stating SetOrClass)
*/
fof(a10373,axiom,s_instance(s_Stating, s_SetOrClass)).

/*
(subclass Disagreeing Stating)
*/
fof(a10374,axiom,s_subclass(s_Disagreeing, s_Stating)).

/*
(forall (?DIS)
 (exists (?A1 ?A2 ?STATE1 ?STATE2 ?STMT1 ?STMT2)
  (and (and (instance ?STMT2 Proposition) (instance ?STMT1 Proposition)
            (instance ?STATE2 ContentBearingPhysical)
            (instance ?STATE2 Process)
            (instance ?STATE1 ContentBearingPhysical)
            (instance ?STATE1 Process) (instance ?A2 Agent)
            (instance ?A1 Agent))
       (=> (instance ?DIS Disagreeing)
        (and (subProcess ?STATE1 ?DIS)
             (and (subProcess ?STATE2 ?DIS)
                  (and (agent ?STATE1 ?A1)
                       (and (agent ?STATE2 ?A2)
                            (and (not (equal ?A1 ?A2))
                                 (and
                                  (containsInformation ?STATE1 ?STMT1)
                                  (and
                                   (containsInformation ?STATE2 ?STMT2)
                                   (not
                                    (consistent
                                     ?STMT1
                                     ?STMT2)))))))))))))
*/
fof(a10375,axiom,! [DIS] : (? [A1,A2,STATE1,STATE2,STMT1,STMT2] : (((s_instance(STMT2, s_Proposition) & s_instance(STMT1, s_Proposition) & s_instance(STATE2, s_ContentBearingPhysical) & s_instance(STATE2, s_Process) & s_instance(STATE1, s_ContentBearingPhysical) & s_instance(STATE1, s_Process) & s_instance(A2, s_Agent) & s_instance(A1, s_Agent)) & (s_instance(DIS, s_Disagreeing) => (s_subProcess(STATE1, DIS) & (s_subProcess(STATE2, DIS) & (s_agent(STATE1, A1) & (s_agent(STATE2, A2) & ((~ (A1 = A2)) & (s_containsInformation(STATE1, STMT1) & (s_containsInformation(STATE2, STMT2) & (~ s_consistent(STMT1, STMT2)))))))))))))).

/*
(instance Supposing SetOrClass)
*/
fof(a10376,axiom,s_instance(s_Supposing, s_SetOrClass)).

/*
(subclass Supposing LinguisticCommunication)
*/
fof(a10377,axiom,s_subclass(s_Supposing, s_LinguisticCommunication)).

/*
(subclass Directing LinguisticCommunication)
*/
fof(a10378,axiom,s_subclass(s_Directing, s_LinguisticCommunication)).

/*
(instance Ordering SetOrClass)
*/
fof(a10379,axiom,s_instance(s_Ordering, s_SetOrClass)).

/*
(subclass Ordering Directing)
*/
fof(a10380,axiom,s_subclass(s_Ordering, s_Directing)).

/*
(forall (?FORMULA ?ORDER)
 (=> (instance ?FORMULA Formula)
  (=> (and (instance ?ORDER Ordering) (patient ?ORDER ?FORMULA))
   (modalAttribute ?FORMULA Obligation))))
*/
fof(a10381,axiom,! [FORMULA,ORDER] : ((s_instance(FORMULA, s_Formula) => ((s_instance(ORDER, s_Ordering) & s_patient(ORDER, FORMULA)) => s_modalAttribute(FORMULA, s_Obligation))))).

/*
(instance Requesting SetOrClass)
*/
fof(a10382,axiom,s_instance(s_Requesting, s_SetOrClass)).

/*
(subclass Requesting Directing)
*/
fof(a10383,axiom,s_subclass(s_Requesting, s_Directing)).

/*
(forall (?FORMULA ?AGENT ?REQUEST)
 (=> (instance ?AGENT CognitiveAgent)
  (=>
   (and (instance ?REQUEST Requesting)
        (and (agent ?REQUEST ?AGENT)
             (and (patient ?REQUEST ?FORMULA)
                  (instance ?FORMULA Formula))))
   (desires ?AGENT ?FORMULA))))
*/
fof(a10384,axiom,! [FORMULA,AGENT,REQUEST] : ((s_instance(AGENT, s_CognitiveAgent) => ((s_instance(REQUEST, s_Requesting) & (s_agent(REQUEST, AGENT) & (s_patient(REQUEST, FORMULA) & s_instance(FORMULA, s_Formula)))) => s_desires(AGENT, FORMULA))))).

/*
(instance Questioning SetOrClass)
*/
fof(a10385,axiom,s_instance(s_Questioning, s_SetOrClass)).

/*
(instance Directing SetOrClass)
*/
fof(a10386,axiom,s_instance(s_Directing, s_SetOrClass)).

/*
(subclass Questioning Directing)
*/
fof(a10387,axiom,s_subclass(s_Questioning, s_Directing)).

/*
(forall (?FORMULA ?AGENT ?QUESTION)
 (=> (instance ?AGENT CognitiveAgent)
  (=>
   (and (instance ?QUESTION Questioning)
        (and (agent ?QUESTION ?AGENT)
             (and (patient ?QUESTION ?FORMULA)
                  (instance ?FORMULA Formula))))
   (holdsDuring (WhenFn ?QUESTION) (not (knows ?AGENT ?FORMULA))))))
*/
%% no translation to TPTP available.

/*
(subclass Committing LinguisticCommunication)
*/
fof(a10388,axiom,s_subclass(s_Committing, s_LinguisticCommunication)).

/*
(forall (?FORMULA ?COMMIT)
 (=>
  (and (instance ?COMMIT Committing)
       (and (patient ?COMMIT ?FORMULA) (instance ?FORMULA Formula)))
  (modalAttribute ?FORMULA Promise)))
*/
fof(a10389,axiom,! [FORMULA,COMMIT] : (((s_instance(COMMIT, s_Committing) & (s_patient(COMMIT, FORMULA) & s_instance(FORMULA, s_Formula))) => s_modalAttribute(FORMULA, s_Promise)))).

/*
(instance Offering SetOrClass)
*/
fof(a10390,axiom,s_instance(s_Offering, s_SetOrClass)).

/*
(instance Committing SetOrClass)
*/
fof(a10391,axiom,s_instance(s_Committing, s_SetOrClass)).

/*
(subclass Offering Committing)
*/
fof(a10392,axiom,s_subclass(s_Offering, s_Committing)).

/*
(instance LinguisticCommunication SetOrClass)
*/
fof(a10393,axiom,s_instance(s_LinguisticCommunication, s_SetOrClass)).

/*
(subclass Declaring LinguisticCommunication)
*/
fof(a10394,axiom,s_subclass(s_Declaring, s_LinguisticCommunication)).

/*
(forall (?DECLARE)
 (exists (?PROP ?NORM)
  (and (and (instance ?NORM ObjectiveNorm) (instance ?PROP Formula))
       (=> (instance ?DECLARE Declaring)
        (or (confersNorm ?DECLARE ?PROP ?NORM)
            (deprivesNorm ?DECLARE ?PROP ?NORM))))))
*/
fof(a10395,axiom,! [DECLARE] : (? [PROP,NORM] : (((s_instance(NORM, s_ObjectiveNorm) & s_instance(PROP, s_Formula)) & (s_instance(DECLARE, s_Declaring) => (s_confersNorm(DECLARE, PROP, NORM) | s_deprivesNorm(DECLARE, PROP, NORM))))))).

/*
(instance Naming SetOrClass)
*/
fof(a10396,axiom,s_instance(s_Naming, s_SetOrClass)).

/*
(instance Declaring SetOrClass)
*/
fof(a10397,axiom,s_instance(s_Declaring, s_SetOrClass)).

/*
(subclass Naming Declaring)
*/
fof(a10398,axiom,s_subclass(s_Naming, s_Declaring)).

/*
(forall (?NAME ?THING ?PROCESS)
 (=> (and (instance ?NAME SymbolicString) (instance ?THING Entity))
  (=>
   (and (instance ?PROCESS Naming)
        (and (patient ?PROCESS ?THING) (destination ?PROCESS ?NAME)))
   (holdsDuring (FutureFn (WhenFn ?PROCESS)) (names ?NAME ?THING)))))
*/
%% no translation to TPTP available.

/*
(instance Cooperation SetOrClass)
*/
fof(a10399,axiom,s_instance(s_Cooperation, s_SetOrClass)).

/*
(subclass Cooperation SocialInteraction)
*/
fof(a10400,axiom,s_subclass(s_Cooperation, s_SocialInteraction)).

/*
(forall (?COOPERATE)
 (exists (?PURP)
  (forall (?AGENT)
   (=> (instance ?AGENT Agent)
    (and (instance ?PURP Formula)
         (=> (instance ?COOPERATE Cooperation)
          (=> (agent ?COOPERATE ?AGENT)
           (hasPurposeForAgent ?COOPERATE ?PURP ?AGENT))))))))
*/
fof(a10401,axiom,! [COOPERATE] : (? [PURP] : (! [AGENT] : ((s_instance(AGENT, s_Agent) => (s_instance(PURP, s_Formula) & (s_instance(COOPERATE, s_Cooperation) => (s_agent(COOPERATE, AGENT) => s_hasPurposeForAgent(COOPERATE, PURP, AGENT))))))))).

/*
(instance Meeting SetOrClass)
*/
fof(a10402,axiom,s_instance(s_Meeting, s_SetOrClass)).

/*
(subclass Meeting SocialInteraction)
*/
fof(a10403,axiom,s_subclass(s_Meeting, s_SocialInteraction)).

/*
(forall (?AGENT2 ?AGENT1 ?MEET)
 (=> (and (instance ?AGENT2 Agent) (instance ?AGENT1 Agent))
  (=>
   (and (instance ?MEET Meeting)
        (and (agent ?MEET ?AGENT1) (agent ?MEET ?AGENT2)))
   (holdsDuring (WhenFn ?MEET) (orientation ?AGENT1 ?AGENT2 Near)))))
*/
%% no translation to TPTP available.

/*
(forall (?MEET)
 (exists (?AGENT1 ?AGENT2)
  (and (and (instance ?AGENT2 Agent) (instance ?AGENT1 Agent))
       (=> (instance ?MEET Meeting)
        (and (agent ?MEET ?AGENT1)
             (and (agent ?MEET ?AGENT2)
                  (hasPurpose ?MEET
                   (exists (?COMM)
                    (and (instance ?COMM Communication)
                         (and (agent ?COMM ?AGENT1)
                              (agent ?COMM ?AGENT2)))))))))))
*/
%% no translation to TPTP available.

/*
(instance SocialInteraction SetOrClass)
*/
fof(a10404,axiom,s_instance(s_SocialInteraction, s_SetOrClass)).

/*
(subclass Contest SocialInteraction)
*/
fof(a10405,axiom,s_subclass(s_Contest, s_SocialInteraction)).

/*
(forall (?CONTEST)
 (exists (?AGENT1 ?AGENT2 ?PURP1 ?PURP2)
  (and (and (instance ?PURP2 Formula) (instance ?PURP1 Formula)
            (instance ?AGENT2 Agent) (instance ?AGENT1 Agent))
       (=> (instance ?CONTEST Contest)
        (and (agent ?CONTEST ?AGENT1)
             (and (agent ?CONTEST ?AGENT2)
                  (and (hasPurposeForAgent ?CONTEST ?PURP1 ?AGENT1)
                       (and (hasPurposeForAgent ?CONTEST ?PURP2
                             ?AGENT2)
                            (and (not (equal ?AGENT1 ?AGENT2))
                                 (not (equal ?PURP1 ?PURP2)))))))))))
*/
fof(a10406,axiom,! [CONTEST] : (? [AGENT1,AGENT2,PURP1,PURP2] : (((s_instance(PURP2, s_Formula) & s_instance(PURP1, s_Formula) & s_instance(AGENT2, s_Agent) & s_instance(AGENT1, s_Agent)) & (s_instance(CONTEST, s_Contest) => (s_agent(CONTEST, AGENT1) & (s_agent(CONTEST, AGENT2) & (s_hasPurposeForAgent(CONTEST, PURP1, AGENT1) & (s_hasPurposeForAgent(CONTEST, PURP2, AGENT2) & ((~ (AGENT1 = AGENT2)) & (~ (PURP1 = PURP2)))))))))))).

/*
(subclass ViolentContest Contest)
*/
fof(a10407,axiom,s_subclass(s_ViolentContest, s_Contest)).

/*
(instance War SetOrClass)
*/
fof(a10408,axiom,s_instance(s_War, s_SetOrClass)).

/*
(subclass War ViolentContest)
*/
fof(a10409,axiom,s_subclass(s_War, s_ViolentContest)).

/*
(forall (?WAR)
 (exists (?BATTLE)
  (and (instance ?BATTLE Process)
       (=> (instance ?WAR War)
        (and (instance ?BATTLE Battle) (subProcess ?BATTLE ?WAR))))))
*/
fof(a10410,axiom,! [WAR] : (? [BATTLE] : ((s_instance(BATTLE, s_Process) & (s_instance(WAR, s_War) => (s_instance(BATTLE, s_Battle) & s_subProcess(BATTLE, WAR))))))).

/*
(forall (?AGENT ?WAR)
 (forall (?MEMBER)
  (=> (instance ?MEMBER Object)
   (=> (and (instance ?AGENT Agent) (instance ?AGENT Collection))
    (=> (and (instance ?WAR War) (agent ?WAR ?AGENT))
     (or (instance ?AGENT GeopoliticalArea)
         (and (instance ?AGENT Organization)
              (=> (member ?MEMBER ?AGENT)
               (instance ?MEMBER GeopoliticalArea)))))))))
*/
fof(a10411,axiom,! [AGENT,WAR] : (! [MEMBER] : ((s_instance(MEMBER, s_Object) => ((s_instance(AGENT, s_Agent) & s_instance(AGENT, s_Collection)) => ((s_instance(WAR, s_War) & s_agent(WAR, AGENT)) => (s_instance(AGENT, s_GeopoliticalArea) | (s_instance(AGENT, s_Organization) & (s_member(MEMBER, AGENT) => s_instance(MEMBER, s_GeopoliticalArea)))))))))).

/*
(instance Battle SetOrClass)
*/
fof(a10412,axiom,s_instance(s_Battle, s_SetOrClass)).

/*
(instance ViolentContest SetOrClass)
*/
fof(a10413,axiom,s_instance(s_ViolentContest, s_SetOrClass)).

/*
(subclass Battle ViolentContest)
*/
fof(a10414,axiom,s_subclass(s_Battle, s_ViolentContest)).

/*
(forall (?BATTLE)
 (exists (?WAR)
  (and (instance ?WAR Process)
       (=> (instance ?BATTLE Battle)
        (and (instance ?WAR War) (subProcess ?BATTLE ?WAR))))))
*/
fof(a10415,axiom,! [BATTLE] : (? [WAR] : ((s_instance(WAR, s_Process) & (s_instance(BATTLE, s_Battle) => (s_instance(WAR, s_War) & s_subProcess(BATTLE, WAR))))))).

/*
(forall (?BATTLE)
 (exists (?ATTACK)
  (and (instance ?ATTACK Process)
       (=> (instance ?BATTLE Battle)
        (and (instance ?ATTACK ViolentContest)
             (subProcess ?ATTACK ?BATTLE))))))
*/
fof(a10416,axiom,! [BATTLE] : (? [ATTACK] : ((s_instance(ATTACK, s_Process) & (s_instance(BATTLE, s_Battle) => (s_instance(ATTACK, s_ViolentContest) & s_subProcess(ATTACK, BATTLE))))))).

/*
(subclass Game Contest)
*/
fof(a10417,axiom,s_subclass(s_Game, s_Contest)).

/*
(instance RecreationOrExercise SetOrClass)
*/
fof(a10418,axiom,s_instance(s_RecreationOrExercise, s_SetOrClass)).

/*
(subclass Game RecreationOrExercise)
*/
fof(a10419,axiom,s_subclass(s_Game, s_RecreationOrExercise)).

/*
(instance Sport SetOrClass)
*/
fof(a10420,axiom,s_instance(s_Sport, s_SetOrClass)).

/*
(instance Game SetOrClass)
*/
fof(a10421,axiom,s_instance(s_Game, s_SetOrClass)).

/*
(subclass Sport Game)
*/
fof(a10422,axiom,s_subclass(s_Sport, s_Game)).

/*
(instance LegalAction SetOrClass)
*/
fof(a10423,axiom,s_instance(s_LegalAction, s_SetOrClass)).

/*
(instance Contest SetOrClass)
*/
fof(a10424,axiom,s_instance(s_Contest, s_SetOrClass)).

/*
(subclass LegalAction Contest)
*/
fof(a10425,axiom,s_subclass(s_LegalAction, s_Contest)).

/*
(subclass Maneuver IntentionalProcess)
*/
fof(a10426,axiom,s_subclass(s_Maneuver, s_IntentionalProcess)).

/*
(forall (?MOVE)
 (exists (?CONTEST)
  (and (instance ?CONTEST Process)
       (=> (instance ?MOVE Maneuver)
        (and (instance ?CONTEST Contest)
             (subProcess ?MOVE ?CONTEST))))))
*/
fof(a10427,axiom,! [MOVE] : (? [CONTEST] : ((s_instance(CONTEST, s_Process) & (s_instance(MOVE, s_Maneuver) => (s_instance(CONTEST, s_Contest) & s_subProcess(MOVE, CONTEST))))))).

/*
(instance Attack SetOrClass)
*/
fof(a10428,axiom,s_instance(s_Attack, s_SetOrClass)).

/*
(subclass Attack Maneuver)
*/
fof(a10429,axiom,s_subclass(s_Attack, s_Maneuver)).

/*
(forall (?ATTACK)
 (exists (?CONTEST)
  (and (instance ?CONTEST Process)
       (=> (instance ?ATTACK Attack)
        (and (instance ?CONTEST ViolentContest)
             (subProcess ?ATTACK ?CONTEST))))))
*/
fof(a10430,axiom,! [ATTACK] : (? [CONTEST] : ((s_instance(CONTEST, s_Process) & (s_instance(ATTACK, s_Attack) => (s_instance(CONTEST, s_ViolentContest) & s_subProcess(ATTACK, CONTEST))))))).

/*
(forall (?OBJ ?AGENT ?ATTACK)
 (=> (and (instance ?OBJ Entity) (instance ?AGENT Agent))
  (=>
   (and (instance ?ATTACK Attack)
        (and (agent ?ATTACK ?AGENT) (patient ?ATTACK ?OBJ)))
   (hasPurposeForAgent ?ATTACK
    (exists (?DAMAGE)
     (and (instance ?DAMAGE Damaging) (patient ?DAMAGE ?OBJ)))
    ?AGENT))))
*/
%% no translation to TPTP available.

/*
(instance DefensiveManeuver SetOrClass)
*/
fof(a10431,axiom,s_instance(s_DefensiveManeuver, s_SetOrClass)).

/*
(instance Maneuver SetOrClass)
*/
fof(a10432,axiom,s_instance(s_Maneuver, s_SetOrClass)).

/*
(subclass DefensiveManeuver Maneuver)
*/
fof(a10433,axiom,s_subclass(s_DefensiveManeuver, s_Maneuver)).

/*
(forall (?DEFENSE)
 (exists (?CONTEST)
  (and (instance ?CONTEST Process)
       (=> (instance ?DEFENSE DefensiveManeuver)
        (and (instance ?CONTEST ViolentContest)
             (subProcess ?DEFENSE ?CONTEST))))))
*/
fof(a10434,axiom,! [DEFENSE] : (? [CONTEST] : ((s_instance(CONTEST, s_Process) & (s_instance(DEFENSE, s_DefensiveManeuver) => (s_instance(CONTEST, s_ViolentContest) & s_subProcess(DEFENSE, CONTEST))))))).

/*
(forall (?AGENT ?DEFENSE)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?DEFENSE DefensiveManeuver) (agent ?DEFENSE ?AGENT))
   (hasPurposeForAgent ?DEFENSE
    (not (exists (?DAMAGE)
          (and (instance ?DAMAGE Damaging) (patient ?DAMAGE ?AGENT))))
    ?AGENT))))
*/
%% no translation to TPTP available.

/*
(forall (?CONTEST ?MANEUVER)
 (=>
  (and (instance ?MANEUVER Maneuver)
       (and (instance ?CONTEST ViolentContest)
            (subProcess ?MANEUVER ?CONTEST)))
  (or (instance ?MANEUVER Attack)
      (instance ?MANEUVER DefensiveManeuver))))
*/
fof(a10435,axiom,! [CONTEST,MANEUVER] : (((s_instance(MANEUVER, s_Maneuver) & (s_instance(CONTEST, s_ViolentContest) & s_subProcess(MANEUVER, CONTEST))) => (s_instance(MANEUVER, s_Attack) | s_instance(MANEUVER, s_DefensiveManeuver))))).

/*
(instance PsychologicalProcess SetOrClass)
*/
fof(a10436,axiom,s_instance(s_PsychologicalProcess, s_SetOrClass)).

/*
(subclass Perception PsychologicalProcess)
*/
fof(a10437,axiom,s_subclass(s_Perception, s_PsychologicalProcess)).

/*
(forall (?AGENT ?PERCEPT)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?PERCEPT Perception) (agent ?PERCEPT ?AGENT))
   (instance ?AGENT Animal))))
*/
fof(a10438,axiom,! [AGENT,PERCEPT] : ((s_instance(AGENT, s_Agent) => ((s_instance(PERCEPT, s_Perception) & s_agent(PERCEPT, AGENT)) => s_instance(AGENT, s_Animal))))).

/*
(forall (?AGENT)
 (=> (instance ?AGENT SentientAgent)
  (capability Perception experiencer ?AGENT)))
*/
fof(a10439,axiom,! [AGENT] : ((s_instance(AGENT, s_SentientAgent) => s_capability(s_Perception, s_experiencer_m, AGENT)))).

/*
(subclass Seeing Perception)
*/
fof(a10440,axiom,s_subclass(s_Seeing, s_Perception)).

/*
(forall (?OBJ ?AGENT ?SEE)
 (exists (?PROP)
  (and (instance ?PROP Attribute)
       (=>
        (and (instance ?OBJ Object) (instance ?AGENT CognitiveAgent))
        (=>
         (and (instance ?SEE Seeing)
              (and (agent ?SEE ?AGENT) (patient ?SEE ?OBJ)))
         (and (instance ?PROP ColorAttribute)
              (knows ?AGENT (attribute ?OBJ ?PROP))))))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?SEE)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?SEE Seeing) (patient ?SEE ?OBJ))
   (holdsDuring (WhenFn ?SEE) (attribute ?OBJ Illuminated)))))
*/
%% no translation to TPTP available.

/*
(forall (?OBJ ?SEE)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?SEE Seeing) (patient ?SEE ?OBJ))
         (and (instance ?ATTR ColorAttribute)
              (holdsDuring (WhenFn ?SEE) (attribute ?OBJ ?ATTR))))))))
*/
%% no translation to TPTP available.

/*
(instance Seeing SetOrClass)
*/
fof(a10441,axiom,s_instance(s_Seeing, s_SetOrClass)).

/*
(subclass Looking Seeing)
*/
fof(a10442,axiom,s_subclass(s_Looking, s_Seeing)).

/*
(instance Looking SetOrClass)
*/
fof(a10443,axiom,s_instance(s_Looking, s_SetOrClass)).

/*
(subclass Looking IntentionalProcess)
*/
fof(a10444,axiom,s_subclass(s_Looking, s_IntentionalProcess)).

/*
(instance Smelling SetOrClass)
*/
fof(a10445,axiom,s_instance(s_Smelling, s_SetOrClass)).

/*
(subclass Smelling Perception)
*/
fof(a10446,axiom,s_subclass(s_Smelling, s_Perception)).

/*
(forall (?OBJ ?SMELL)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?SMELL Smelling) (patient ?SMELL ?OBJ))
         (and (instance ?ATTR OlfactoryAttribute)
              (attribute ?OBJ ?ATTR)))))))
*/
fof(a10447,axiom,! [OBJ,SMELL] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(OBJ, s_Object) => ((s_instance(SMELL, s_Smelling) & s_patient(SMELL, OBJ)) => (s_instance(ATTR, s_OlfactoryAttribute) & s_attribute(OBJ, ATTR)))))))).

/*
(instance Tasting SetOrClass)
*/
fof(a10448,axiom,s_instance(s_Tasting, s_SetOrClass)).

/*
(subclass Tasting Perception)
*/
fof(a10449,axiom,s_subclass(s_Tasting, s_Perception)).

/*
(forall (?OBJ ?TASTE)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?TASTE Tasting) (patient ?TASTE ?OBJ))
         (and (instance ?ATTR TasteAttribute)
              (attribute ?OBJ ?ATTR)))))))
*/
fof(a10450,axiom,! [OBJ,TASTE] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(OBJ, s_Object) => ((s_instance(TASTE, s_Tasting) & s_patient(TASTE, OBJ)) => (s_instance(ATTR, s_TasteAttribute) & s_attribute(OBJ, ATTR)))))))).

/*
(subclass Hearing Perception)
*/
fof(a10451,axiom,s_subclass(s_Hearing, s_Perception)).

/*
(forall (?OBJ ?HEAR)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?HEAR Hearing) (patient ?HEAR ?OBJ))
         (and (instance ?ATTR SoundAttribute)
              (attribute ?OBJ ?ATTR)))))))
*/
fof(a10452,axiom,! [OBJ,HEAR] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(OBJ, s_Object) => ((s_instance(HEAR, s_Hearing) & s_patient(HEAR, OBJ)) => (s_instance(ATTR, s_SoundAttribute) & s_attribute(OBJ, ATTR)))))))).

/*
(subclass SoundAttribute PerceptualAttribute)
*/
fof(a10453,axiom,s_subclass(s_SoundAttribute, s_PerceptualAttribute)).

/*
(instance SoundAttribute SetOrClass)
*/
fof(a10454,axiom,s_instance(s_SoundAttribute, s_SetOrClass)).

/*
(instance Audible SoundAttribute)
*/
fof(a10455,axiom,s_instance(s_Audible, s_SoundAttribute)).

/*
(forall (?HEAR ?OBJ ?SOUND)
 (exists (?HUMAN)
  (and (instance ?HUMAN Object)
       (=> (and (instance ?HEAR SymbolicString) (instance ?OBJ Agent))
        (=>
         (and (instance ?SOUND RadiatingSound)
              (and (agent ?SOUND ?OBJ) (attribute ?SOUND Audible)))
         (and (instance ?HUMAN Human)
              (capability
               (KappaFn ?HEAR
                (and (instance ?HEAR Hearing)
                     (and (agent ?HEAR ?HUMAN)
                          (and (destination ?HEAR ?HUMAN)
                               (origin ?HEAR ?OBJ)))))
               agent ?HUMAN)))))))
*/
%% no translation to TPTP available.

/*
(instance Hearing SetOrClass)
*/
fof(a10456,axiom,s_instance(s_Hearing, s_SetOrClass)).

/*
(subclass Listening Hearing)
*/
fof(a10457,axiom,s_subclass(s_Listening, s_Hearing)).

/*
(instance Listening SetOrClass)
*/
fof(a10458,axiom,s_instance(s_Listening, s_SetOrClass)).

/*
(instance IntentionalProcess SetOrClass)
*/
fof(a10459,axiom,s_instance(s_IntentionalProcess, s_SetOrClass)).

/*
(subclass Listening IntentionalProcess)
*/
fof(a10460,axiom,s_subclass(s_Listening, s_IntentionalProcess)).

/*
(instance TactilePerception SetOrClass)
*/
fof(a10461,axiom,s_instance(s_TactilePerception, s_SetOrClass)).

/*
(instance Perception SetOrClass)
*/
fof(a10462,axiom,s_instance(s_Perception, s_SetOrClass)).

/*
(subclass TactilePerception Perception)
*/
fof(a10463,axiom,s_subclass(s_TactilePerception, s_Perception)).

/*
(forall (?TACTILE)
 (exists (?TOUCH)
  (and (instance ?TOUCH Process)
       (=> (instance ?TACTILE TactilePerception)
        (and (instance ?TOUCH Touching)
             (subProcess ?TOUCH ?TACTILE))))))
*/
fof(a10464,axiom,! [TACTILE] : (? [TOUCH] : ((s_instance(TOUCH, s_Process) & (s_instance(TACTILE, s_TactilePerception) => (s_instance(TOUCH, s_Touching) & s_subProcess(TOUCH, TACTILE))))))).

/*
(instance Motion SetOrClass)
*/
fof(a10465,axiom,s_instance(s_Motion, s_SetOrClass)).

/*
(subclass Radiating Motion)
*/
fof(a10466,axiom,s_subclass(s_Radiating, s_Motion)).

/*
(instance RadiatingLight SetOrClass)
*/
fof(a10467,axiom,s_instance(s_RadiatingLight, s_SetOrClass)).

/*
(subclass RadiatingLight RadiatingElectromagnetic)
*/
fof(a10468,axiom,s_subclass(s_RadiatingLight, s_RadiatingElectromagnetic)).

/*
(forall (?REGION)
 (forall (?EMIT)
  (exists (?g7191)
   (and (=>
         (and (instance ?EMIT RadiatingLight)
              (and (patient ?EMIT ?REGION) (instance ?REGION Region)))
         (attribute ?REGION Illuminated))
        (=> (attribute ?REGION Illuminated)
         (and (instance ?g7191 RadiatingLight)
              (and (patient ?g7191 ?REGION)
                   (instance ?REGION Region))))))))
*/
fof(a10469,axiom,! [REGION] : (! [EMIT] : (? [G7191] : ((((s_instance(EMIT, s_RadiatingLight) & (s_patient(EMIT, REGION) & s_instance(REGION, s_Region))) => s_attribute(REGION, s_Illuminated)) & (s_attribute(REGION, s_Illuminated) => (s_instance(G7191, s_RadiatingLight) & (s_patient(G7191, REGION) & s_instance(REGION, s_Region))))))))).

/*
(instance RadiatingInfrared SetOrClass)
*/
fof(a10470,axiom,s_instance(s_RadiatingInfrared, s_SetOrClass)).

/*
(subclass RadiatingInfrared RadiatingElectromagnetic)
*/
fof(a10471,axiom,s_subclass(s_RadiatingInfrared, s_RadiatingElectromagnetic)).

/*
(instance RadiatingXRay SetOrClass)
*/
fof(a10472,axiom,s_instance(s_RadiatingXRay, s_SetOrClass)).

/*
(subclass RadiatingXRay RadiatingElectromagnetic)
*/
fof(a10473,axiom,s_subclass(s_RadiatingXRay, s_RadiatingElectromagnetic)).

/*
(subclass RadiatingSound Radiating)
*/
fof(a10474,axiom,s_subclass(s_RadiatingSound, s_Radiating)).

/*
(forall (?SOUND ?EMIT)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?SOUND Agent)
        (=> (and (instance ?EMIT RadiatingSound) (agent ?EMIT ?SOUND))
         (and (instance ?ATTR SoundAttribute)
              (attribute ?SOUND ?ATTR)))))))
*/
fof(a10475,axiom,! [SOUND,EMIT] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(SOUND, s_Agent) => ((s_instance(EMIT, s_RadiatingSound) & s_agent(EMIT, SOUND)) => (s_instance(ATTR, s_SoundAttribute) & s_attribute(SOUND, ATTR)))))))).

/*
(instance RadiatingSound SetOrClass)
*/
fof(a10476,axiom,s_instance(s_RadiatingSound, s_SetOrClass)).

/*
(subclass MakingMusic RadiatingSound)
*/
fof(a10477,axiom,s_subclass(s_MakingMusic, s_RadiatingSound)).

/*
(comment MakingMusic
 Changing the old Music to &%MakingMusic to be more consistent with
the verb-form that &%Process seem to take. (09-14-2011) KJN)
*/
fof(a10478,axiom,s_comment(s_MakingMusic, 'Changing the old Music to &%MakingMusic to be more consistent withthe verb-form that &%Process seem to take. (09-14-2011)', 'KJN')).

/*
(partition3 MakingMusic MakingInstrumentalMusic MakingVocalMusic)
*/
fof(a10479,axiom,s_partition3(s_MakingMusic, s_MakingInstrumentalMusic, s_MakingVocalMusic)).

/*
(instance MakingInstrumentalMusic SetOrClass)
*/
fof(a10480,axiom,s_instance(s_MakingInstrumentalMusic, s_SetOrClass)).

/*
(subclass MakingInstrumentalMusic MakingMusic)
*/
fof(a10481,axiom,s_subclass(s_MakingInstrumentalMusic, s_MakingMusic)).

/*
(forall (?M)
 (exists (?I)
  (and (instance ?I Object)
       (=> (instance ?M MakingInstrumentalMusic)
        (and (instance ?I MusicalInstrument) (instrument ?M ?I))))))
*/
fof(a10482,axiom,! [M] : (? [I] : ((s_instance(I, s_Object) & (s_instance(M, s_MakingInstrumentalMusic) => (s_instance(I, s_MusicalInstrument) & s_instrument(M, I))))))).

/*
(instance MakingMusic SetOrClass)
*/
fof(a10483,axiom,s_instance(s_MakingMusic, s_SetOrClass)).

/*
(subclass MakingVocalMusic MakingMusic)
*/
fof(a10484,axiom,s_subclass(s_MakingVocalMusic, s_MakingMusic)).

/*
(instance Vocalizing SetOrClass)
*/
fof(a10485,axiom,s_instance(s_Vocalizing, s_SetOrClass)).

/*
(subclass MakingVocalMusic Vocalizing)
*/
fof(a10486,axiom,s_subclass(s_MakingVocalMusic, s_Vocalizing)).

/*
(comment MakingVocalMusic
 Currently, &%VocalMusic also inherits from &%Speaking.  Changing
this to more general &%Vocalizing.  Acapella groups today use their &%VocalCord to create
music in ways that are more than just speaking. (09-14-2011) KJN)
*/
fof(a10487,axiom,s_comment(s_MakingVocalMusic, 'Currently, &%VocalMusic also inherits from &%Speaking.  Changingthis to more general &%Vocalizing.  Acapella groups today use their &%VocalCord to createmusic in ways that are more than just speaking. (09-14-2011)', 'KJN')).

/*
(instance Singing SetOrClass)
*/
fof(a10488,axiom,s_instance(s_Singing, s_SetOrClass)).

/*
(instance MakingVocalMusic SetOrClass)
*/
fof(a10489,axiom,s_instance(s_MakingVocalMusic, s_SetOrClass)).

/*
(subclass Singing MakingVocalMusic)
*/
fof(a10490,axiom,s_subclass(s_Singing, s_MakingVocalMusic)).

/*
(forall (?S)
 (exists (?W)
  (and (instance ?W Entity)
       (=> (instance ?S Singing)
        (and (patient ?S ?W) (instance ?W Word))))))
*/
fof(a10491,axiom,! [S] : (? [W] : ((s_instance(W, s_Entity) & (s_instance(S, s_Singing) => (s_patient(S, W) & s_instance(W, s_Word))))))).

/*
(instance RadiatingElectromagnetic SetOrClass)
*/
fof(a10492,axiom,s_instance(s_RadiatingElectromagnetic, s_SetOrClass)).

/*
(subclass RadiatingElectromagnetic Radiating)
*/
fof(a10493,axiom,s_subclass(s_RadiatingElectromagnetic, s_Radiating)).

/*
(instance RadiatingNuclear SetOrClass)
*/
fof(a10494,axiom,s_instance(s_RadiatingNuclear, s_SetOrClass)).

/*
(instance Radiating SetOrClass)
*/
fof(a10495,axiom,s_instance(s_Radiating, s_SetOrClass)).

/*
(subclass RadiatingNuclear Radiating)
*/
fof(a10496,axiom,s_subclass(s_RadiatingNuclear, s_Radiating)).

/*
(instance InternalChange SetOrClass)
*/
fof(a10497,axiom,s_instance(s_InternalChange, s_SetOrClass)).

/*
(subclass StateChange InternalChange)
*/
fof(a10498,axiom,s_subclass(s_StateChange, s_InternalChange)).

/*
(forall (?OBJ ?PROCESS)
 (exists (?PART ?STATE1 ?STATE2)
  (and (and (instance ?STATE2 Attribute) (instance ?STATE1 Attribute)
            (instance ?PART Object))
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?PROCESS StateChange) (patient ?PROCESS ?OBJ))
         (and (part ?PART ?OBJ)
              (and (instance ?STATE1 PhysicalState)
                   (and (instance ?STATE2 PhysicalState)
                        (and (not (equal ?STATE1 ?STATE2))
                             (and (holdsDuring
                                   (BeginFn (WhenFn ?PROCESS))
                                   (attribute ?PART ?STATE1))
                                  (holdsDuring
                                   (EndFn (WhenFn ?PROCESS))
                                   (attribute ?PART ?STATE2))))))))))))
*/
%% no translation to TPTP available.

/*
(instance atomicNumber BinaryPredicate)
*/
fof(a10499,axiom,s_instance(s_atomicNumber_m, s_BinaryPredicate)).

/*
(instance atomicNumber AsymmetricRelation)
*/
fof(a10500,axiom,s_instance(s_atomicNumber_m, s_AsymmetricRelation)).

/*
(instance atomicNumber PartialValuedRelation)
*/
fof(a10501,axiom,s_instance(s_atomicNumber_m, s_PartialValuedRelation)).

/*
(domainSubclass atomicNumber 1 ElementalSubstance)
*/
fof(a10502,axiom,s_domainSubclass(s_atomicNumber_m, 1, s_ElementalSubstance)).

/*
(forall (?PROTON ?NUMBER ?ATOM ?TYPE ?SUBSTANCE)
 (=>
  (and (instance ?SUBSTANCE Object) (instance ?TYPE SetOrClass)
       (subclass ?TYPE ElementalSubstance) (instance ?ATOM Object)
       (instance ?NUMBER PositiveInteger)
       (instance ?PROTON SymbolicString))
  (=> (atomicNumber ?TYPE ?NUMBER)
   (=>
    (and (instance ?SUBSTANCE ?TYPE)
         (and (part ?ATOM ?SUBSTANCE) (instance ?ATOM Atom)))
    (equal ?NUMBER
           (CardinalityFn
            (KappaFn ?PROTON
             (and (part ?PROTON ?ATOM) (instance ?PROTON Proton)))))))))
*/
%% no translation to TPTP available.

/*
(instance boilingPoint BinaryPredicate)
*/
fof(a10503,axiom,s_instance(s_boilingPoint_m, s_BinaryPredicate)).

/*
(domainSubclass boilingPoint 1 PureSubstance)
*/
fof(a10504,axiom,s_domainSubclass(s_boilingPoint_m, 1, s_PureSubstance)).

/*
(forall (?PRES ?Y ?BOIL ?TEMP ?X)
 (=>
  (and (instance ?PRES RealNumber) (subclass ?Y PureSubstance)
       (instance ?Y SetOrClass) (instance ?BOIL RealNumber)
       (instance ?TEMP RealNumber))
  (=>
   (and (instance ?X ?Y)
        (and (subclass ?Y PureSubstance)
             (and (barometricPressure ?X (MeasureFn ?PRES InchMercury))
                  (and (greaterThan 29.92 ?PRES)
                       (and (boilingPoint ?Y
                             (MeasureFn ?BOIL KelvinDegree))
                            (and (measure
                                  ?X
                                  (MeasureFn ?TEMP KelvinDegree))
                                 (greaterThan ?TEMP ?BOIL)))))))
   (attribute ?X Gas))))
*/
fof(a10505,axiom,! [PRES,Y,BOIL,TEMP,X] : (((s_instance(PRES, s_RealNumber) & s_subclass(Y, s_PureSubstance) & s_instance(Y, s_SetOrClass) & s_instance(BOIL, s_RealNumber) & s_instance(TEMP, s_RealNumber)) => ((s_instance(X, Y) & (s_subclass(Y, s_PureSubstance) & (s_barometricPressure(X, s_MeasureFn(PRES, s_InchMercury)) & (greater(29.92, PRES) & (s_boilingPoint(Y, s_MeasureFn(BOIL, s_KelvinDegree)) & (s_measure(X, s_MeasureFn(TEMP, s_KelvinDegree)) & greater(TEMP, BOIL))))))) => s_attribute(X, s_Gas))))).

/*
(forall (?Y ?X ?BOIL ?MELT ?TEMP)
 (=>
  (and (subclass ?Y PureSubstance) (instance ?Y SetOrClass)
       (instance ?BOIL RealNumber) (instance ?MELT RealNumber)
       (instance ?TEMP RealNumber))
  (=>
   (and (instance ?X ?Y)
        (and (subclass ?Y PureSubstance)
             (and (boilingPoint ?Y (MeasureFn ?BOIL KelvinDegree))
                  (and (meltingPoint ?Y (MeasureFn ?MELT KelvinDegree))
                       (and (measure ?X (MeasureFn ?TEMP KelvinDegree))
                            (and (greaterThan ?TEMP ?MELT)
                                 (lessThan ?TEMP ?BOIL)))))))
   (attribute ?X Liquid))))
*/
fof(a10506,axiom,! [Y,X,BOIL,MELT,TEMP] : (((s_subclass(Y, s_PureSubstance) & s_instance(Y, s_SetOrClass) & s_instance(BOIL, s_RealNumber) & s_instance(MELT, s_RealNumber) & s_instance(TEMP, s_RealNumber)) => ((s_instance(X, Y) & (s_subclass(Y, s_PureSubstance) & (s_boilingPoint(Y, s_MeasureFn(BOIL, s_KelvinDegree)) & (s_meltingPoint(Y, s_MeasureFn(MELT, s_KelvinDegree)) & (s_measure(X, s_MeasureFn(TEMP, s_KelvinDegree)) & (greater(TEMP, MELT) & less(TEMP, BOIL))))))) => s_attribute(X, s_Liquid))))).

/*
(forall (?Y ?PRES ?MELT ?TEMP ?X)
 (=>
  (and (subclass ?Y PureSubstance) (instance ?Y SetOrClass)
       (instance ?PRES RealNumber) (instance ?MELT RealNumber)
       (instance ?TEMP RealNumber))
  (=>
   (and (instance ?X ?Y)
        (and (subclass ?Y PureSubstance)
             (and (meltingPoint ?Y (MeasureFn ?MELT KelvinDegree))
                  (and (barometricPressure ?X
                        (MeasureFn ?PRES InchMercury))
                       (and (greaterThan ?PRES 29.92)
                            (and (measure
                                  ?X
                                  (MeasureFn ?TEMP KelvinDegree))
                                 (lessThan ?TEMP ?MELT)))))))
   (attribute ?X Solid))))
*/
fof(a10507,axiom,! [Y,PRES,MELT,TEMP,X] : (((s_subclass(Y, s_PureSubstance) & s_instance(Y, s_SetOrClass) & s_instance(PRES, s_RealNumber) & s_instance(MELT, s_RealNumber) & s_instance(TEMP, s_RealNumber)) => ((s_instance(X, Y) & (s_subclass(Y, s_PureSubstance) & (s_meltingPoint(Y, s_MeasureFn(MELT, s_KelvinDegree)) & (s_barometricPressure(X, s_MeasureFn(PRES, s_InchMercury)) & (greater(PRES, 29.92) & (s_measure(X, s_MeasureFn(TEMP, s_KelvinDegree)) & less(TEMP, MELT))))))) => s_attribute(X, s_Solid))))).

/*
(forall (?TEMP1 ?TYPE ?BOILING ?SUBSTANCE ?MEASURE ?TEMP2)
 (=>
  (and (instance ?TEMP1 RealNumber) (instance ?TEMP2 RealNumber)
       (subclass ?TYPE PureSubstance) (instance ?TYPE SetOrClass))
  (=>
   (and (instance ?BOILING Boiling)
        (and (boilingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
             (and (instance ?SUBSTANCE ?TYPE)
                  (and (patient ?BOILING ?SUBSTANCE)
                       (and (holdsDuring (WhenFn ?BOILING)
                             (measure ?SUBSTANCE
                              (MeasureFn ?TEMP2 ?MEASURE)))
                            (instance ?MEASURE UnitOfTemperature))))))
   (greaterThanOrEqualTo ?TEMP2 ?TEMP1))))
*/
%% no translation to TPTP available.

/*
(forall (?TYPE ?TEMP1 ?TIME ?SUBSTANCE ?MEASURE ?TEMP2)
 (exists (?BOIL)
  (and (instance ?BOIL Process)
       (=>
        (and (instance ?TYPE SetOrClass) (subclass ?TYPE PureSubstance)
             (instance ?TEMP1 RealNumber) (instance ?TIME TimeInterval)
             (instance ?TEMP2 RealNumber))
        (=>
         (and (boilingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
              (and (instance ?SUBSTANCE ?TYPE)
                   (and (holdsDuring ?TIME
                         (measure ?SUBSTANCE
                          (MeasureFn ?TEMP2 ?MEASURE)))
                        (and (instance ?MEASURE UnitOfTemperature)
                             (greaterThanOrEqualTo ?TEMP2 ?TEMP1)))))
         (or (holdsDuring ?TIME (attribute ?SUBSTANCE Gas))
             (and (overlapsTemporally (WhenFn ?BOIL) ?TIME)
                  (and (instance ?BOIL Boiling)
                       (patient ?BOIL ?SUBSTANCE)))))))))
*/
%% no translation to TPTP available.

/*
(instance meltingPoint BinaryPredicate)
*/
fof(a10508,axiom,s_instance(s_meltingPoint_m, s_BinaryPredicate)).

/*
(domainSubclass meltingPoint 1 PureSubstance)
*/
fof(a10509,axiom,s_domainSubclass(s_meltingPoint_m, 1, s_PureSubstance)).

/*
(forall (?BOIL ?TYPE ?TEMP2 ?TEMP1 ?TIME ?SUBSTANCE ?MEASURE ?TEMP3)
 (exists (?MELT)
  (and (instance ?MELT Physical)
       (=>
        (and (instance ?BOIL Process) (subclass ?TYPE PureSubstance)
             (instance ?TYPE SetOrClass) (instance ?TEMP2 RealNumber)
             (instance ?TEMP1 RealNumber) (instance ?TIME TimeInterval)
             (instance ?TEMP3 RealNumber))
        (=>
         (and (instance ?SUBSTANCE ?TYPE)
              (and (boilingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
                   (and (meltingPoint ?TYPE
                         (MeasureFn ?TEMP2 ?MEASURE))
                        (and (instance ?MEASURE UnitOfTemperature)
                             (and (holdsDuring
                                   ?TIME
                                   (measure
                                    ?SUBSTANCE
                                    (MeasureFn ?TEMP3 ?MEASURE)))
                                  (and
                                   (greaterThan ?TEMP3 ?TEMP2)
                                   (lessThan ?TEMP3 ?TEMP1)))))))
         (or (holdsDuring ?TIME (attribute ?SUBSTANCE Liquid))
             (and (overlapsTemporally (WhenFn ?MELT) ?TIME)
                  (and (instance ?MELT Melting)
                       (patient ?BOIL ?SUBSTANCE)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?TYPE ?TEMP1 ?TIME ?SUBSTANCE ?MEASURE ?TEMP2)
 (exists (?FREEZE)
  (and (instance ?FREEZE Process)
       (=>
        (and (subclass ?TYPE PureSubstance) (instance ?TYPE SetOrClass)
             (instance ?TEMP1 RealNumber) (instance ?TIME TimeInterval)
             (instance ?TEMP2 RealNumber))
        (=>
         (and (instance ?SUBSTANCE ?TYPE)
              (and (meltingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
                   (and (holdsDuring ?TIME
                         (measure ?SUBSTANCE
                          (MeasureFn ?TEMP2 ?MEASURE)))
                        (and (instance ?MEASURE UnitOfTemperature)
                             (lessThan ?TEMP2 ?TEMP1)))))
         (or (holdsDuring ?TIME (attribute ?SUBSTANCE Solid))
             (and (overlapsTemporally (WhenFn ?FREEZE) ?TIME)
                  (and (instance ?FREEZE Freezing)
                       (patient ?FREEZE ?SUBSTANCE)))))))))
*/
%% no translation to TPTP available.

/*
(forall (?BOIL ?MELT ?TYPE)
 (=>
  (and (subclass ?TYPE PureSubstance)
       (instance ?MELT TemperatureMeasure)
       (instance ?BOIL TemperatureMeasure))
  (=> (and (meltingPoint ?TYPE ?MELT) (boilingPoint ?TYPE ?BOIL))
   (greaterThanOrEqualTo ?BOIL ?MELT))))
*/
fof(a10510,axiom,! [BOIL,MELT,TYPE] : (((s_subclass(TYPE, s_PureSubstance) & s_instance(MELT, s_TemperatureMeasure) & s_instance(BOIL, s_TemperatureMeasure)) => ((s_meltingPoint(TYPE, MELT) & s_boilingPoint(TYPE, BOIL)) => s_greaterThanOrEqualTo(BOIL, MELT))))).

/*
(instance Melting SetOrClass)
*/
fof(a10511,axiom,s_instance(s_Melting, s_SetOrClass)).

/*
(subclass Melting StateChange)
*/
fof(a10512,axiom,s_subclass(s_Melting, s_StateChange)).

/*
(forall (?MELT)
 (exists (?HEAT)
  (and (instance ?HEAT Process)
       (=> (instance ?MELT Melting)
        (and (instance ?HEAT Heating) (subProcess ?HEAT ?MELT))))))
*/
fof(a10513,axiom,! [MELT] : (? [HEAT] : ((s_instance(HEAT, s_Process) & (s_instance(MELT, s_Melting) => (s_instance(HEAT, s_Heating) & s_subProcess(HEAT, MELT))))))).

/*
(forall (?OBJ ?MELT)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?MELT Melting) (patient ?MELT ?OBJ))
         (and (part ?PART ?OBJ)
              (and (holdsDuring (BeginFn (WhenFn ?MELT))
                    (attribute ?PART Solid))
                   (holdsDuring (EndFn (WhenFn ?MELT))
                    (attribute ?PART Liquid)))))))))
*/
%% no translation to TPTP available.

/*
(instance Boiling SetOrClass)
*/
fof(a10514,axiom,s_instance(s_Boiling, s_SetOrClass)).

/*
(subclass Boiling StateChange)
*/
fof(a10515,axiom,s_subclass(s_Boiling, s_StateChange)).

/*
(forall (?BOIL)
 (exists (?HEAT)
  (and (instance ?HEAT Process)
       (=> (instance ?BOIL Boiling)
        (and (instance ?HEAT Heating) (subProcess ?HEAT ?BOIL))))))
*/
fof(a10516,axiom,! [BOIL] : (? [HEAT] : ((s_instance(HEAT, s_Process) & (s_instance(BOIL, s_Boiling) => (s_instance(HEAT, s_Heating) & s_subProcess(HEAT, BOIL))))))).

/*
(forall (?OBJ ?BOIL)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?BOIL Boiling) (patient ?BOIL ?OBJ))
         (and (part ?PART ?OBJ)
              (and (holdsDuring (BeginFn (WhenFn ?BOIL))
                    (attribute ?PART Liquid))
                   (holdsDuring (EndFn (WhenFn ?BOIL))
                    (attribute ?PART Gas)))))))))
*/
%% no translation to TPTP available.

/*
(instance Evaporating SetOrClass)
*/
fof(a10517,axiom,s_instance(s_Evaporating, s_SetOrClass)).

/*
(subclass Evaporating StateChange)
*/
fof(a10518,axiom,s_subclass(s_Evaporating, s_StateChange)).

/*
(forall (?BOILVAL ?EVAP ?OBJ ?MEAS ?VAL)
 (exists (?PART)
  (and (instance ?PART Object)
       (=>
        (and (instance ?BOILVAL RealNumber) (instance ?VAL RealNumber)
             (subclass ?OBJ PureSubstance) (instance ?OBJ Object))
        (=>
         (and (instance ?EVAP Evaporating)
              (and (boilingPoint ?OBJ (MeasureFn ?BOILVAL ?MEAS))
                   (and (measure ?OBJ (MeasureFn ?VAL ?MEAS))
                        (and (instance ?MEAS UnitOfTemperature)
                             (patient ?EVAP ?OBJ)))))
         (and (part ?PART ?OBJ)
              (and (greaterThan ?BOILVAL ?VAL)
                   (and (holdsDuring (BeginFn (WhenFn ?EVAP))
                         (attribute ?PART Liquid))
                        (holdsDuring (EndFn (WhenFn ?EVAP))
                         (attribute ?PART Gas))))))))))
*/
%% no translation to TPTP available.

/*
(instance Condensing SetOrClass)
*/
fof(a10519,axiom,s_instance(s_Condensing, s_SetOrClass)).

/*
(subclass Condensing StateChange)
*/
fof(a10520,axiom,s_subclass(s_Condensing, s_StateChange)).

/*
(forall (?COND)
 (exists (?COOL)
  (and (instance ?COOL Process)
       (=> (instance ?COND Condensing)
        (and (instance ?COOL Cooling) (subProcess ?COOL ?COND))))))
*/
fof(a10521,axiom,! [COND] : (? [COOL] : ((s_instance(COOL, s_Process) & (s_instance(COND, s_Condensing) => (s_instance(COOL, s_Cooling) & s_subProcess(COOL, COND))))))).

/*
(forall (?OBJ ?COND)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?COND Condensing) (patient ?COND ?OBJ))
         (and (part ?PART ?OBJ)
              (and (holdsDuring (BeginFn (WhenFn ?COND))
                    (attribute ?PART Gas))
                   (holdsDuring (EndFn (WhenFn ?COND))
                    (attribute ?PART Liquid)))))))))
*/
%% no translation to TPTP available.

/*
(instance Freezing SetOrClass)
*/
fof(a10522,axiom,s_instance(s_Freezing, s_SetOrClass)).

/*
(instance StateChange SetOrClass)
*/
fof(a10523,axiom,s_instance(s_StateChange, s_SetOrClass)).

/*
(subclass Freezing StateChange)
*/
fof(a10524,axiom,s_subclass(s_Freezing, s_StateChange)).

/*
(forall (?FREEZE)
 (exists (?COOL)
  (and (instance ?COOL Process)
       (=> (instance ?FREEZE Freezing)
        (and (instance ?COOL Cooling) (subProcess ?COOL ?FREEZE))))))
*/
fof(a10525,axiom,! [FREEZE] : (? [COOL] : ((s_instance(COOL, s_Process) & (s_instance(FREEZE, s_Freezing) => (s_instance(COOL, s_Cooling) & s_subProcess(COOL, FREEZE))))))).

/*
(forall (?OBJ ?FREEZE)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?OBJ Object)
        (=> (and (instance ?FREEZE Freezing) (patient ?FREEZE ?OBJ))
         (and (part ?PART ?OBJ)
              (and (holdsDuring (BeginFn (WhenFn ?FREEZE))
                    (attribute ?PART Liquid))
                   (holdsDuring (EndFn (WhenFn ?FREEZE))
                    (attribute ?PART Solid)))))))))
*/
%% no translation to TPTP available.

/*
(instance AstronomicalBody SetOrClass)
*/
fof(a10526,axiom,s_instance(s_AstronomicalBody, s_SetOrClass)).

/*
(subclass AstronomicalBody Object)
*/
fof(a10527,axiom,s_subclass(s_AstronomicalBody, s_Object)).

/*
(disjoint AstronomicalBody GeographicArea)
*/
fof(a10528,axiom,s_disjoint(s_AstronomicalBody, s_GeographicArea)).

/*
(subclass GeographicArea Region)
*/
fof(a10529,axiom,s_subclass(s_GeographicArea, s_Region)).

/*
(partition3 GeographicArea WaterArea LandArea)
*/
fof(a10530,axiom,s_partition3(s_GeographicArea, s_WaterArea, s_LandArea)).

/*
(instance LocalizablePlace SetOrClass)
*/
fof(a10531,axiom,s_instance(s_LocalizablePlace, s_SetOrClass)).

/*
(subclass LocalizablePlace GeographicArea)
*/
fof(a10532,axiom,s_subclass(s_LocalizablePlace, s_GeographicArea)).

/*
(instance geographicSubregion BinaryPredicate)
*/
fof(a10533,axiom,s_instance(s_geographicSubregion_m, s_BinaryPredicate)).

/*
(instance geographicSubregion TransitiveRelation)
*/
fof(a10534,axiom,s_instance(s_geographicSubregion_m, s_TransitiveRelation)).

/*
(instance geographicSubregion AsymmetricRelation)
*/
fof(a10535,axiom,s_instance(s_geographicSubregion_m, s_AsymmetricRelation)).

/*
(subrelation geographicSubregion properPart)
*/
fof(a10536,axiom,s_subrelation(s_geographicSubregion_m, s_properPart_m)).

/*
(subrelation geographicSubregion located)
*/
fof(a10537,axiom,s_subrelation(s_geographicSubregion_m, s_located_m)).

/*
(subclass GeopoliticalArea GeographicArea)
*/
fof(a10538,axiom,s_subclass(s_GeopoliticalArea, s_GeographicArea)).

/*
(subclass GeopoliticalArea Agent)
*/
fof(a10539,axiom,s_subclass(s_GeopoliticalArea, s_Agent)).

/*
(forall (?PERSON ?AREA)
 (=> (instance ?PERSON Human)
  (=>
   (and (instance ?AREA GeopoliticalArea)
        (leader (GovernmentFn ?AREA) ?PERSON))
   (leader ?AREA ?PERSON))))
*/
fof(a10540,axiom,! [PERSON,AREA] : ((s_instance(PERSON, s_Human) => ((s_instance(AREA, s_GeopoliticalArea) & s_leader(s_GovernmentFn(AREA), PERSON)) => s_leader(AREA, PERSON))))).

/*
(forall (?PERSON ?AREA)
 (=> (instance ?PERSON Human)
  (=> (and (instance ?AREA GeopoliticalArea) (leader ?AREA ?PERSON))
   (leader (GovernmentFn ?AREA) ?PERSON))))
*/
fof(a10541,axiom,! [PERSON,AREA] : ((s_instance(PERSON, s_Human) => ((s_instance(AREA, s_GeopoliticalArea) & s_leader(AREA, PERSON)) => s_leader(s_GovernmentFn(AREA), PERSON))))).

/*
(forall (?AGENT ?EVENT)
 (=>
  (and (instance ?EVENT Election)
       (and (agent ?EVENT ?AGENT) (instance ?AGENT GeopoliticalArea)))
  (instance ?EVENT PoliticalProcess)))
*/
fof(a10542,axiom,! [AGENT,EVENT] : (((s_instance(EVENT, s_Election) & (s_agent(EVENT, AGENT) & s_instance(AGENT, s_GeopoliticalArea))) => s_instance(EVENT, s_PoliticalProcess)))).

/*
(forall (?AREA ?AGENT ?EVENT)
 (=> (instance ?AGENT Agent)
  (=>
   (and (instance ?EVENT Election)
        (and (agent ?EVENT ?AGENT)
             (and (instance ?AREA GeopoliticalArea)
                  (instance ?AGENT (GovernmentFn ?AREA)))))
   (instance ?EVENT PoliticalProcess))))
*/
fof(a10543,axiom,! [AREA,AGENT,EVENT] : ((s_instance(AGENT, s_Agent) => ((s_instance(EVENT, s_Election) & (s_agent(EVENT, AGENT) & (s_instance(AREA, s_GeopoliticalArea) & s_instance(AGENT, s_GovernmentFn(AREA))))) => s_instance(EVENT, s_PoliticalProcess))))).

/*
(instance geopoliticalSubdivision AsymmetricRelation)
*/
fof(a10544,axiom,s_instance(s_geopoliticalSubdivision_m, s_AsymmetricRelation)).

/*
(instance geopoliticalSubdivision TransitiveRelation)
*/
fof(a10545,axiom,s_instance(s_geopoliticalSubdivision_m, s_TransitiveRelation)).

/*
(subrelation geopoliticalSubdivision geographicSubregion)
*/
fof(a10546,axiom,s_subrelation(s_geopoliticalSubdivision_m, s_geographicSubregion_m)).

/*
(subclass WaterArea GeographicArea)
*/
fof(a10547,axiom,s_subclass(s_WaterArea, s_GeographicArea)).

/*
(forall (?AREA)
 (exists (?BED ?HOLE ?WATER)
  (and (and (instance ?WATER Object) (instance ?HOLE Hole)
            (instance ?BED Object))
       (=> (instance ?AREA WaterArea)
        (and (equal (HoleHostFn ?HOLE) ?BED)
             (and (instance ?WATER Water)
                  (and (properlyFills ?WATER ?HOLE)
                       (equal (MereologicalSumFn ?BED ?WATER)
                              ?AREA))))))))
*/
fof(a10548,axiom,! [AREA] : (? [BED,HOLE,WATER] : (((s_instance(WATER, s_Object) & s_instance(HOLE, s_Hole) & s_instance(BED, s_Object)) & (s_instance(AREA, s_WaterArea) => ((s_HoleHostFn(HOLE) = BED) & (s_instance(WATER, s_Water) & (s_properlyFills(WATER, HOLE) & (s_MereologicalSumFn(BED, WATER) = AREA))))))))).

/*
(instance SaltWaterArea SetOrClass)
*/
fof(a10549,axiom,s_instance(s_SaltWaterArea, s_SetOrClass)).

/*
(subclass SaltWaterArea WaterArea)
*/
fof(a10550,axiom,s_subclass(s_SaltWaterArea, s_WaterArea)).

/*
(disjoint SaltWaterArea FreshWaterArea)
*/
fof(a10551,axiom,s_disjoint(s_SaltWaterArea, s_FreshWaterArea)).

/*
(instance FreshWaterArea SetOrClass)
*/
fof(a10552,axiom,s_instance(s_FreshWaterArea, s_SetOrClass)).

/*
(instance WaterArea SetOrClass)
*/
fof(a10553,axiom,s_instance(s_WaterArea, s_SetOrClass)).

/*
(subclass FreshWaterArea WaterArea)
*/
fof(a10554,axiom,s_subclass(s_FreshWaterArea, s_WaterArea)).

/*
(instance GeographicArea SetOrClass)
*/
fof(a10555,axiom,s_instance(s_GeographicArea, s_SetOrClass)).

/*
(subclass LandArea GeographicArea)
*/
fof(a10556,axiom,s_subclass(s_LandArea, s_GeographicArea)).

/*
(forall (?LAND1)
 (exists (?LAND2)
  (and (instance ?LAND2 Object)
       (=> (instance ?LAND1 LandArea)
        (and (part ?LAND1 ?LAND2)
             (or (instance ?LAND2 Continent)
                 (instance ?LAND2 Island)))))))
*/
fof(a10557,axiom,! [LAND1] : (? [LAND2] : ((s_instance(LAND2, s_Object) & (s_instance(LAND1, s_LandArea) => (s_part(LAND1, LAND2) & (s_instance(LAND2, s_Continent) | s_instance(LAND2, s_Island)))))))).

/*
(instance ShoreArea SetOrClass)
*/
fof(a10558,axiom,s_instance(s_ShoreArea, s_SetOrClass)).

/*
(subclass ShoreArea LandArea)
*/
fof(a10559,axiom,s_subclass(s_ShoreArea, s_LandArea)).

/*
(forall (?BANK)
 (exists (?WATER)
  (and (instance ?WATER Entity)
       (=> (instance ?BANK ShoreArea)
        (and (instance ?WATER WaterArea)
             (meetsSpatially ?BANK ?WATER))))))
*/
fof(a10560,axiom,! [BANK] : (? [WATER] : ((s_instance(WATER, s_Entity) & (s_instance(BANK, s_ShoreArea) => (s_instance(WATER, s_WaterArea) & s_meetsSpatially(BANK, WATER))))))).

/*
(instance Continent SetOrClass)
*/
fof(a10561,axiom,s_instance(s_Continent, s_SetOrClass)).

/*
(subclass Continent LandArea)
*/
fof(a10562,axiom,s_subclass(s_Continent, s_LandArea)).

/*
(equal (CardinalityFn Continent) 7)
*/
fof(a10563,axiom,(s_CardinalityFn(s_Continent) = 7)).

/*
(instance Island SetOrClass)
*/
fof(a10564,axiom,s_instance(s_Island, s_SetOrClass)).

/*
(subclass Island LandArea)
*/
fof(a10565,axiom,s_subclass(s_Island, s_LandArea)).

/*
(forall (?ISLAND)
 (forall (?AREA ?PART1 ?PART2)
  (=>
   (and (instance ?PART2 Object) (instance ?PART1 Object)
        (instance ?AREA Object))
   (=> (instance ?ISLAND Island)
    (not (and (instance ?AREA LandArea)
              (and (part ?PART1 ?ISLAND)
                   (and (part ?PART2 ?AREA)
                        (and (not (part ?ISLAND ?AREA))
                             (and (not (part ?AREA ?ISLAND))
                                  (meetsSpatially
                                   ?PART1
                                   ?PART2)))))))))))
*/
fof(a10566,axiom,! [ISLAND] : (! [AREA,PART1,PART2] : (((s_instance(PART2, s_Object) & s_instance(PART1, s_Object) & s_instance(AREA, s_Object)) => (s_instance(ISLAND, s_Island) => (~ (s_instance(AREA, s_LandArea) & (s_part(PART1, ISLAND) & (s_part(PART2, AREA) & ((~ s_part(ISLAND, AREA)) & ((~ s_part(AREA, ISLAND)) & s_meetsSpatially(PART1, PART2)))))))))))).

/*
(forall (?AREA ?ISLE)
 (=>
  (and (instance ?ISLE Island)
       (and (instance ?AREA GeographicArea)
            (meetsSpatially ?ISLE ?AREA)))
  (not (instance ?AREA LandArea))))
*/
fof(a10567,axiom,! [AREA,ISLE] : (((s_instance(ISLE, s_Island) & (s_instance(AREA, s_GeographicArea) & s_meetsSpatially(ISLE, AREA))) => (~ s_instance(AREA, s_LandArea))))).

/*
(forall (?ISLE)
 (exists (?WATER)
  (and (instance ?WATER Entity)
       (=> (instance ?ISLE Island)
        (and (instance ?WATER WaterArea)
             (meetsSpatially ?ISLE ?WATER))))))
*/
fof(a10568,axiom,! [ISLE] : (? [WATER] : ((s_instance(WATER, s_Entity) & (s_instance(ISLE, s_Island) => (s_instance(WATER, s_WaterArea) & s_meetsSpatially(ISLE, WATER))))))).

/*
(subclass Nation GeopoliticalArea)
*/
fof(a10569,axiom,s_subclass(s_Nation, s_GeopoliticalArea)).

/*
(instance Nation SetOrClass)
*/
fof(a10570,axiom,s_instance(s_Nation, s_SetOrClass)).

/*
(subclass Nation LandArea)
*/
fof(a10571,axiom,s_subclass(s_Nation, s_LandArea)).

/*
(subclass StateOrProvince GeopoliticalArea)
*/
fof(a10572,axiom,s_subclass(s_StateOrProvince, s_GeopoliticalArea)).

/*
(instance StateOrProvince SetOrClass)
*/
fof(a10573,axiom,s_instance(s_StateOrProvince, s_SetOrClass)).

/*
(subclass StateOrProvince LandArea)
*/
fof(a10574,axiom,s_subclass(s_StateOrProvince, s_LandArea)).

/*
(forall (?STATE)
 (exists (?LAND)
  (and (instance ?LAND Object)
       (=> (instance ?STATE StateOrProvince)
        (and (instance ?LAND Nation) (properPart ?STATE ?LAND))))))
*/
fof(a10575,axiom,! [STATE] : (? [LAND] : ((s_instance(LAND, s_Object) & (s_instance(STATE, s_StateOrProvince) => (s_instance(LAND, s_Nation) & s_properPart(STATE, LAND))))))).

/*
(subclass City GeopoliticalArea)
*/
fof(a10576,axiom,s_subclass(s_City, s_GeopoliticalArea)).

/*
(instance City SetOrClass)
*/
fof(a10577,axiom,s_instance(s_City, s_SetOrClass)).

/*
(subclass City LandArea)
*/
fof(a10578,axiom,s_subclass(s_City, s_LandArea)).

/*
(instance GeopoliticalArea SetOrClass)
*/
fof(a10579,axiom,s_instance(s_GeopoliticalArea, s_SetOrClass)).

/*
(subclass County GeopoliticalArea)
*/
fof(a10580,axiom,s_subclass(s_County, s_GeopoliticalArea)).

/*
(instance County SetOrClass)
*/
fof(a10581,axiom,s_instance(s_County, s_SetOrClass)).

/*
(subclass County LandArea)
*/
fof(a10582,axiom,s_subclass(s_County, s_LandArea)).

/*
(forall (?STATE)
 (exists (?LAND)
  (and (instance ?LAND Object)
       (=> (instance ?STATE County)
        (and (instance ?LAND StateOrProvince)
             (properPart ?STATE ?LAND))))))
*/
fof(a10583,axiom,! [STATE] : (? [LAND] : ((s_instance(LAND, s_Object) & (s_instance(STATE, s_County) => (s_instance(LAND, s_StateOrProvince) & s_properPart(STATE, LAND))))))).

/*
(instance Region SetOrClass)
*/
fof(a10584,axiom,s_instance(s_Region, s_SetOrClass)).

/*
(subclass Transitway Region)
*/
fof(a10585,axiom,s_subclass(s_Transitway, s_Region)).

/*
(subclass Transitway SelfConnectedObject)
*/
fof(a10586,axiom,s_subclass(s_Transitway, s_SelfConnectedObject)).

/*
(instance Transitway SetOrClass)
*/
fof(a10587,axiom,s_instance(s_Transitway, s_SetOrClass)).

/*
(subclass LandTransitway Transitway)
*/
fof(a10588,axiom,s_subclass(s_LandTransitway, s_Transitway)).

/*
(instance LandArea SetOrClass)
*/
fof(a10589,axiom,s_instance(s_LandArea, s_SetOrClass)).

/*
(subclass LandTransitway LandArea)
*/
fof(a10590,axiom,s_subclass(s_LandTransitway, s_LandArea)).

/*
(forall (?WAY)
 (=> (instance ?WAY Transitway)
  (hasPurpose ?WAY
   (exists (?TRANSPORT)
    (and (instance ?TRANSPORT Transportation)
         (path ?TRANSPORT ?WAY))))))
*/
%% no translation to TPTP available.

/*
(instance Roadway SetOrClass)
*/
fof(a10591,axiom,s_instance(s_Roadway, s_SetOrClass)).

/*
(instance LandTransitway SetOrClass)
*/
fof(a10592,axiom,s_instance(s_LandTransitway, s_SetOrClass)).

/*
(subclass Roadway LandTransitway)
*/
fof(a10593,axiom,s_subclass(s_Roadway, s_LandTransitway)).

/*
(instance Water SetOrClass)
*/
fof(a10594,axiom,s_instance(s_Water, s_SetOrClass)).

/*
(subclass Water CompoundSubstance)
*/
fof(a10595,axiom,s_subclass(s_Water, s_CompoundSubstance)).

/*
(instance Mineral SetOrClass)
*/
fof(a10596,axiom,s_instance(s_Mineral, s_SetOrClass)).

/*
(subclass Mineral Substance)
*/
fof(a10597,axiom,s_subclass(s_Mineral, s_Substance)).

/*
(instance developmentalForm BinaryPredicate)
*/
fof(a10598,axiom,s_instance(s_developmentalForm_m, s_BinaryPredicate)).

/*
(instance developmentalForm AsymmetricRelation)
*/
fof(a10599,axiom,s_instance(s_developmentalForm_m, s_AsymmetricRelation)).

/*
(instance developmentalForm TransitiveRelation)
*/
fof(a10600,axiom,s_instance(s_developmentalForm_m, s_TransitiveRelation)).

/*
(subrelation developmentalForm attribute)
*/
fof(a10601,axiom,s_subrelation(s_developmentalForm_m, s_attribute_m)).

/*
(forall (?ATTR2 ?TIME1 ?ATTR1 ?OBJ)
 (exists (?TIME2)
  (and (instance ?TIME2 TimeInterval)
       (=>
        (and (instance ?OBJ OrganicObject)
             (instance ?ATTR1 DevelopmentalAttribute)
             (instance ?TIME1 TimeInterval)
             (instance ?ATTR2 DevelopmentalAttribute))
        (=>
         (and (holdsDuring ?TIME1 (developmentalForm ?OBJ ?ATTR1))
              (successorAttributeClosure ?ATTR2 ?ATTR1))
         (and (earlier ?TIME2 ?TIME1)
              (holdsDuring ?TIME2 (developmentalForm ?OBJ ?ATTR2))))))))
*/
%% no translation to TPTP available.

/*
(instance CorpuscularObject SetOrClass)
*/
fof(a10602,axiom,s_instance(s_CorpuscularObject, s_SetOrClass)).

/*
(subclass OrganicObject CorpuscularObject)
*/
fof(a10603,axiom,s_subclass(s_OrganicObject, s_CorpuscularObject)).

/*
(instance OrganicThing SetOrClass)
*/
fof(a10604,axiom,s_instance(s_OrganicThing, s_SetOrClass)).

/*
(subclass OrganicObject OrganicThing)
*/
fof(a10605,axiom,s_subclass(s_OrganicObject, s_OrganicThing)).

/*
(partition3 OrganicObject Organism AnatomicalStructure)
*/
fof(a10606,axiom,s_partition3(s_OrganicObject, s_Organism, s_AnatomicalStructure)).

/*
(subclass Organism OrganicObject)
*/
fof(a10607,axiom,s_subclass(s_Organism, s_OrganicObject)).

/*
(subclass Organism Agent)
*/
fof(a10608,axiom,s_subclass(s_Organism, s_Agent)).

/*
(disjoint Organism Artifact)
*/
fof(a10609,axiom,s_disjoint(s_Organism, s_Artifact)).

/*
(partition5 Organism Animal Plant Fungus Microorganism)
*/
fof(a10610,axiom,s_partition5(s_Organism, s_Animal, s_Plant, s_Fungus, s_Microorganism)).

/*
(forall (?ORGANISM)
 (exists (?BIRTH)
  (and (instance ?BIRTH Process)
       (=> (instance ?ORGANISM Organism)
        (and (instance ?BIRTH Birth) (experiencer ?BIRTH ?ORGANISM))))))
*/
fof(a10611,axiom,! [ORGANISM] : (? [BIRTH] : ((s_instance(BIRTH, s_Process) & (s_instance(ORGANISM, s_Organism) => (s_instance(BIRTH, s_Birth) & s_experiencer(BIRTH, ORGANISM))))))).

/*
(instance inhabits BinaryPredicate)
*/
fof(a10612,axiom,s_instance(s_inhabits_m, s_BinaryPredicate)).

/*
(instance inhabits AsymmetricRelation)
*/
fof(a10613,axiom,s_instance(s_inhabits_m, s_AsymmetricRelation)).

/*
(forall (?T1 ?OBJ ?ORGANISM)
 (exists (?TIME)
  (and (instance ?TIME TimePosition)
       (=>
        (and (instance ?ORGANISM Organism) (instance ?OBJ Object)
             (instance ?T1 TimePosition))
        (=> (holdsDuring ?T1 (inhabits ?ORGANISM ?OBJ))
         (and (instance ?TIME TimeInterval)
              (and (temporalPart ?TIME ?T1)
                   (holdsDuring ?TIME (located ?ORGANISM ?OBJ)))))))))
*/
%% no translation to TPTP available.

/*
(subrelation home inhabits)
*/
fof(a10614,axiom,s_subrelation(s_home_m, s_inhabits_m)).

/*
(subrelation stays inhabits)
*/
fof(a10615,axiom,s_subrelation(s_stays_m, s_inhabits_m)).

/*
(disjointRelation stays home)
*/
fof(a10616,axiom,s_disjointRelation(s_stays_m, s_home_m)).

/*
(subclass Plant Organism)
*/
fof(a10617,axiom,s_subclass(s_Plant, s_Organism)).

/*
(instance FloweringPlant SetOrClass)
*/
fof(a10618,axiom,s_instance(s_FloweringPlant, s_SetOrClass)).

/*
(subclass FloweringPlant Plant)
*/
fof(a10619,axiom,s_subclass(s_FloweringPlant, s_Plant)).

/*
(instance Plant SetOrClass)
*/
fof(a10620,axiom,s_instance(s_Plant, s_SetOrClass)).

/*
(subclass NonFloweringPlant Plant)
*/
fof(a10621,axiom,s_subclass(s_NonFloweringPlant, s_Plant)).

/*
(disjoint NonFloweringPlant FloweringPlant)
*/
fof(a10622,axiom,s_disjoint(s_NonFloweringPlant, s_FloweringPlant)).

/*
(disjointDecomposition4 NonFloweringPlant Alga Fern Moss)
*/
fof(a10623,axiom,s_disjointDecomposition4(s_NonFloweringPlant, s_Alga, s_Fern, s_Moss)).

/*
(instance Alga SetOrClass)
*/
fof(a10624,axiom,s_instance(s_Alga, s_SetOrClass)).

/*
(subclass Alga NonFloweringPlant)
*/
fof(a10625,axiom,s_subclass(s_Alga, s_NonFloweringPlant)).

/*
(forall (?ALGA)
 (exists (?WATER)
  (and (instance ?WATER Object)
       (=> (instance ?ALGA Alga)
        (and (inhabits ?ALGA ?WATER) (instance ?WATER Water))))))
*/
fof(a10626,axiom,! [ALGA] : (? [WATER] : ((s_instance(WATER, s_Object) & (s_instance(ALGA, s_Alga) => (s_inhabits(ALGA, WATER) & s_instance(WATER, s_Water))))))).

/*
(instance Fungus SetOrClass)
*/
fof(a10627,axiom,s_instance(s_Fungus, s_SetOrClass)).

/*
(subclass Fungus Organism)
*/
fof(a10628,axiom,s_subclass(s_Fungus, s_Organism)).

/*
(forall (?OBJ ?FUNGUS)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?FUNGUS Fungus) (inhabits ?FUNGUS ?OBJ))
   (instance ?OBJ Organism))))
*/
fof(a10629,axiom,! [OBJ,FUNGUS] : ((s_instance(OBJ, s_Object) => ((s_instance(FUNGUS, s_Fungus) & s_inhabits(FUNGUS, OBJ)) => s_instance(OBJ, s_Organism))))).

/*
(instance Moss SetOrClass)
*/
fof(a10630,axiom,s_instance(s_Moss, s_SetOrClass)).

/*
(subclass Moss NonFloweringPlant)
*/
fof(a10631,axiom,s_subclass(s_Moss, s_NonFloweringPlant)).

/*
(instance Fern SetOrClass)
*/
fof(a10632,axiom,s_instance(s_Fern, s_SetOrClass)).

/*
(instance NonFloweringPlant SetOrClass)
*/
fof(a10633,axiom,s_instance(s_NonFloweringPlant, s_SetOrClass)).

/*
(subclass Fern NonFloweringPlant)
*/
fof(a10634,axiom,s_subclass(s_Fern, s_NonFloweringPlant)).

/*
(subclass Animal Organism)
*/
fof(a10635,axiom,s_subclass(s_Animal, s_Organism)).

/*
(partition3 Animal Vertebrate Invertebrate)
*/
fof(a10636,axiom,s_partition3(s_Animal, s_Vertebrate, s_Invertebrate)).

/*
(instance Organism SetOrClass)
*/
fof(a10637,axiom,s_instance(s_Organism, s_SetOrClass)).

/*
(subclass Microorganism Organism)
*/
fof(a10638,axiom,s_subclass(s_Microorganism, s_Organism)).

/*
(instance Bacterium SetOrClass)
*/
fof(a10639,axiom,s_instance(s_Bacterium, s_SetOrClass)).

/*
(subclass Bacterium Microorganism)
*/
fof(a10640,axiom,s_subclass(s_Bacterium, s_Microorganism)).

/*
(forall (?BACTERIUM)
 (exists (?CELL1)
  (forall (?CELL2)
   (=> (instance ?CELL2 CorpuscularObject)
    (and (instance ?CELL1 CorpuscularObject)
         (=> (instance ?BACTERIUM Bacterium)
          (and (component ?CELL1 ?BACTERIUM)
               (and (instance ?CELL1 Cell)
                    (=>
                     (and (component ?CELL2 ?BACTERIUM)
                          (instance ?CELL2 Cell))
                     (equal ?CELL1 ?CELL2))))))))))
*/
fof(a10641,axiom,! [BACTERIUM] : (? [CELL1] : (! [CELL2] : ((s_instance(CELL2, s_CorpuscularObject) => (s_instance(CELL1, s_CorpuscularObject) & (s_instance(BACTERIUM, s_Bacterium) => (s_component(CELL1, BACTERIUM) & (s_instance(CELL1, s_Cell) & ((s_component(CELL2, BACTERIUM) & s_instance(CELL2, s_Cell)) => (CELL1 = CELL2))))))))))).

/*
(forall (?OBJ ?BACTERIUM)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?BACTERIUM Bacterium) (inhabits ?BACTERIUM ?OBJ))
   (instance ?OBJ Organism))))
*/
fof(a10642,axiom,! [OBJ,BACTERIUM] : ((s_instance(OBJ, s_Object) => ((s_instance(BACTERIUM, s_Bacterium) & s_inhabits(BACTERIUM, OBJ)) => s_instance(OBJ, s_Organism))))).

/*
(instance Virus SetOrClass)
*/
fof(a10643,axiom,s_instance(s_Virus, s_SetOrClass)).

/*
(instance Microorganism SetOrClass)
*/
fof(a10644,axiom,s_instance(s_Microorganism, s_SetOrClass)).

/*
(subclass Virus Microorganism)
*/
fof(a10645,axiom,s_subclass(s_Virus, s_Microorganism)).

/*
(forall (?OBJ ?VIRUS)
 (=> (instance ?OBJ Object)
  (=> (and (instance ?VIRUS Virus) (inhabits ?VIRUS ?OBJ))
   (instance ?OBJ Organism))))
*/
fof(a10646,axiom,! [OBJ,VIRUS] : ((s_instance(OBJ, s_Object) => ((s_instance(VIRUS, s_Virus) & s_inhabits(VIRUS, OBJ)) => s_instance(OBJ, s_Organism))))).

/*
(forall (?VIRUS ?PROC)
 (exists (?CELL)
  (and (instance ?CELL Object)
       (=>
        (and (instance ?VIRUS Virus)
             (and (instance ?PROC Replication) (agent ?PROC ?VIRUS)))
        (and (located ?PROC ?CELL) (instance ?CELL Cell))))))
*/
fof(a10647,axiom,! [VIRUS,PROC] : (? [CELL] : ((s_instance(CELL, s_Object) & ((s_instance(VIRUS, s_Virus) & (s_instance(PROC, s_Replication) & s_agent(PROC, VIRUS))) => (s_located(PROC, CELL) & s_instance(CELL, s_Cell))))))).

/*
(subclass Vertebrate Animal)
*/
fof(a10648,axiom,s_subclass(s_Vertebrate, s_Animal)).

/*
(instance Animal SetOrClass)
*/
fof(a10649,axiom,s_instance(s_Animal, s_SetOrClass)).

/*
(subclass Invertebrate Animal)
*/
fof(a10650,axiom,s_subclass(s_Invertebrate, s_Animal)).

/*
(disjointDecomposition4 Invertebrate Worm Mollusk Arthropod)
*/
fof(a10651,axiom,s_disjointDecomposition4(s_Invertebrate, s_Worm, s_Mollusk, s_Arthropod)).

/*
(instance Worm SetOrClass)
*/
fof(a10652,axiom,s_instance(s_Worm, s_SetOrClass)).

/*
(subclass Worm Invertebrate)
*/
fof(a10653,axiom,s_subclass(s_Worm, s_Invertebrate)).

/*
(instance Mollusk SetOrClass)
*/
fof(a10654,axiom,s_instance(s_Mollusk, s_SetOrClass)).

/*
(subclass Mollusk Invertebrate)
*/
fof(a10655,axiom,s_subclass(s_Mollusk, s_Invertebrate)).

/*
(instance Invertebrate SetOrClass)
*/
fof(a10656,axiom,s_instance(s_Invertebrate, s_SetOrClass)).

/*
(subclass Arthropod Invertebrate)
*/
fof(a10657,axiom,s_subclass(s_Arthropod, s_Invertebrate)).

/*
(disjointDecomposition5 Arthropod Arachnid Myriapod Insect Crustacean)
*/
fof(a10658,axiom,s_disjointDecomposition5(s_Arthropod, s_Arachnid, s_Myriapod, s_Insect, s_Crustacean)).

/*
(instance Arachnid SetOrClass)
*/
fof(a10659,axiom,s_instance(s_Arachnid, s_SetOrClass)).

/*
(subclass Arachnid Arthropod)
*/
fof(a10660,axiom,s_subclass(s_Arachnid, s_Arthropod)).

/*
(instance Myriapod SetOrClass)
*/
fof(a10661,axiom,s_instance(s_Myriapod, s_SetOrClass)).

/*
(subclass Myriapod Arthropod)
*/
fof(a10662,axiom,s_subclass(s_Myriapod, s_Arthropod)).

/*
(instance Insect SetOrClass)
*/
fof(a10663,axiom,s_instance(s_Insect, s_SetOrClass)).

/*
(subclass Insect Arthropod)
*/
fof(a10664,axiom,s_subclass(s_Insect, s_Arthropod)).

/*
(instance Crustacean SetOrClass)
*/
fof(a10665,axiom,s_instance(s_Crustacean, s_SetOrClass)).

/*
(instance Arthropod SetOrClass)
*/
fof(a10666,axiom,s_instance(s_Arthropod, s_SetOrClass)).

/*
(subclass Crustacean Arthropod)
*/
fof(a10667,axiom,s_subclass(s_Crustacean, s_Arthropod)).

/*
(subclass ColdBloodedVertebrate Vertebrate)
*/
fof(a10668,axiom,s_subclass(s_ColdBloodedVertebrate, s_Vertebrate)).

/*
(disjointDecomposition4 ColdBloodedVertebrate Amphibian Fish Reptile)
*/
fof(a10669,axiom,s_disjointDecomposition4(s_ColdBloodedVertebrate, s_Amphibian, s_Fish, s_Reptile)).

/*
(instance Vertebrate SetOrClass)
*/
fof(a10670,axiom,s_instance(s_Vertebrate, s_SetOrClass)).

/*
(subclass WarmBloodedVertebrate Vertebrate)
*/
fof(a10671,axiom,s_subclass(s_WarmBloodedVertebrate, s_Vertebrate)).

/*
(disjoint WarmBloodedVertebrate ColdBloodedVertebrate)
*/
fof(a10672,axiom,s_disjoint(s_WarmBloodedVertebrate, s_ColdBloodedVertebrate)).

/*
(instance Amphibian SetOrClass)
*/
fof(a10673,axiom,s_instance(s_Amphibian, s_SetOrClass)).

/*
(subclass Amphibian ColdBloodedVertebrate)
*/
fof(a10674,axiom,s_subclass(s_Amphibian, s_ColdBloodedVertebrate)).

/*
(instance Bird SetOrClass)
*/
fof(a10675,axiom,s_instance(s_Bird, s_SetOrClass)).

/*
(subclass Bird WarmBloodedVertebrate)
*/
fof(a10676,axiom,s_subclass(s_Bird, s_WarmBloodedVertebrate)).

/*
(disjoint Bird Mammal)
*/
fof(a10677,axiom,s_disjoint(s_Bird, s_Mammal)).

/*
(instance Fish SetOrClass)
*/
fof(a10678,axiom,s_instance(s_Fish, s_SetOrClass)).

/*
(subclass Fish ColdBloodedVertebrate)
*/
fof(a10679,axiom,s_subclass(s_Fish, s_ColdBloodedVertebrate)).

/*
(forall (?FISH)
 (exists (?WATER)
  (and (instance ?WATER Object)
       (=> (instance ?FISH Fish)
        (and (inhabits ?FISH ?WATER) (instance ?WATER Water))))))
*/
fof(a10680,axiom,! [FISH] : (? [WATER] : ((s_instance(WATER, s_Object) & (s_instance(FISH, s_Fish) => (s_inhabits(FISH, WATER) & s_instance(WATER, s_Water))))))).

/*
(instance WarmBloodedVertebrate SetOrClass)
*/
fof(a10681,axiom,s_instance(s_WarmBloodedVertebrate, s_SetOrClass)).

/*
(subclass Mammal WarmBloodedVertebrate)
*/
fof(a10682,axiom,s_subclass(s_Mammal, s_WarmBloodedVertebrate)).

/*
(disjointDecomposition6 Mammal AquaticMammal HoofedMammal Marsupial
 Rodent Primate)
*/
fof(a10683,axiom,s_disjointDecomposition6(s_Mammal, s_AquaticMammal, s_HoofedMammal, s_Marsupial, s_Rodent, s_Primate)).

/*
(instance AquaticMammal SetOrClass)
*/
fof(a10684,axiom,s_instance(s_AquaticMammal, s_SetOrClass)).

/*
(subclass AquaticMammal Mammal)
*/
fof(a10685,axiom,s_subclass(s_AquaticMammal, s_Mammal)).

/*
(instance HoofedMammal SetOrClass)
*/
fof(a10686,axiom,s_instance(s_HoofedMammal, s_SetOrClass)).

/*
(subclass HoofedMammal Mammal)
*/
fof(a10687,axiom,s_subclass(s_HoofedMammal, s_Mammal)).

/*
(instance Marsupial SetOrClass)
*/
fof(a10688,axiom,s_instance(s_Marsupial, s_SetOrClass)).

/*
(subclass Marsupial Mammal)
*/
fof(a10689,axiom,s_subclass(s_Marsupial, s_Mammal)).

/*
(subclass Carnivore Mammal)
*/
fof(a10690,axiom,s_subclass(s_Carnivore, s_Mammal)).

/*
(forall (?PREY ?CARNIVORE ?EAT)
 (=> (instance ?PREY Entity)
  (=>
   (and (instance ?CARNIVORE Carnivore)
        (and (instance ?EAT Eating)
             (and (agent ?EAT ?CARNIVORE) (patient ?EAT ?PREY))))
   (instance ?PREY Animal))))
*/
fof(a10691,axiom,! [PREY,CARNIVORE,EAT] : ((s_instance(PREY, s_Entity) => ((s_instance(CARNIVORE, s_Carnivore) & (s_instance(EAT, s_Eating) & (s_agent(EAT, CARNIVORE) & s_patient(EAT, PREY)))) => s_instance(PREY, s_Animal))))).

/*
(instance Canine SetOrClass)
*/
fof(a10692,axiom,s_instance(s_Canine, s_SetOrClass)).

/*
(subclass Canine Carnivore)
*/
fof(a10693,axiom,s_subclass(s_Canine, s_Carnivore)).

/*
(disjoint Canine Feline)
*/
fof(a10694,axiom,s_disjoint(s_Canine, s_Feline)).

/*
(instance Feline SetOrClass)
*/
fof(a10695,axiom,s_instance(s_Feline, s_SetOrClass)).

/*
(instance Carnivore SetOrClass)
*/
fof(a10696,axiom,s_instance(s_Carnivore, s_SetOrClass)).

/*
(subclass Feline Carnivore)
*/
fof(a10697,axiom,s_subclass(s_Feline, s_Carnivore)).

/*
(instance Rodent SetOrClass)
*/
fof(a10698,axiom,s_instance(s_Rodent, s_SetOrClass)).

/*
(subclass Rodent Mammal)
*/
fof(a10699,axiom,s_subclass(s_Rodent, s_Mammal)).

/*
(instance Mammal SetOrClass)
*/
fof(a10700,axiom,s_instance(s_Mammal, s_SetOrClass)).

/*
(subclass Primate Mammal)
*/
fof(a10701,axiom,s_subclass(s_Primate, s_Mammal)).

/*
(disjointDecomposition4 Primate Ape Monkey Hominid)
*/
fof(a10702,axiom,s_disjointDecomposition4(s_Primate, s_Ape, s_Monkey, s_Hominid)).

/*
(instance Ape SetOrClass)
*/
fof(a10703,axiom,s_instance(s_Ape, s_SetOrClass)).

/*
(subclass Ape Primate)
*/
fof(a10704,axiom,s_subclass(s_Ape, s_Primate)).

/*
(instance Monkey SetOrClass)
*/
fof(a10705,axiom,s_instance(s_Monkey, s_SetOrClass)).

/*
(subclass Monkey Primate)
*/
fof(a10706,axiom,s_subclass(s_Monkey, s_Primate)).

/*
(instance Primate SetOrClass)
*/
fof(a10707,axiom,s_instance(s_Primate, s_SetOrClass)).

/*
(subclass Hominid Primate)
*/
fof(a10708,axiom,s_subclass(s_Hominid, s_Primate)).

/*
(instance Hominid SetOrClass)
*/
fof(a10709,axiom,s_instance(s_Hominid, s_SetOrClass)).

/*
(subclass Human Hominid)
*/
fof(a10710,axiom,s_subclass(s_Human, s_Hominid)).

/*
(instance CognitiveAgent SetOrClass)
*/
fof(a10711,axiom,s_instance(s_CognitiveAgent, s_SetOrClass)).

/*
(subclass Human CognitiveAgent)
*/
fof(a10712,axiom,s_subclass(s_Human, s_CognitiveAgent)).

/*
(partition3 Human Man Woman)
*/
fof(a10713,axiom,s_partition3(s_Human, s_Man, s_Woman)).

/*
(instance Man SetOrClass)
*/
fof(a10714,axiom,s_instance(s_Man, s_SetOrClass)).

/*
(subclass Man Human)
*/
fof(a10715,axiom,s_subclass(s_Man, s_Human)).

/*
(forall (?MAN) (=> (instance ?MAN Man) (attribute ?MAN Male)))
*/
fof(a10716,axiom,! [MAN] : ((s_instance(MAN, s_Man) => s_attribute(MAN, s_Male)))).

/*
(instance Woman SetOrClass)
*/
fof(a10717,axiom,s_instance(s_Woman, s_SetOrClass)).

/*
(instance Human SetOrClass)
*/
fof(a10718,axiom,s_instance(s_Human, s_SetOrClass)).

/*
(subclass Woman Human)
*/
fof(a10719,axiom,s_subclass(s_Woman, s_Human)).

/*
(forall (?WOMAN) (=> (instance ?WOMAN Woman) (attribute ?WOMAN Female)))
*/
fof(a10720,axiom,! [WOMAN] : ((s_instance(WOMAN, s_Woman) => s_attribute(WOMAN, s_Female)))).

/*
(instance Reptile SetOrClass)
*/
fof(a10721,axiom,s_instance(s_Reptile, s_SetOrClass)).

/*
(instance ColdBloodedVertebrate SetOrClass)
*/
fof(a10722,axiom,s_instance(s_ColdBloodedVertebrate, s_SetOrClass)).

/*
(subclass Reptile ColdBloodedVertebrate)
*/
fof(a10723,axiom,s_subclass(s_Reptile, s_ColdBloodedVertebrate)).

/*
(subclass BiologicallyActiveSubstance Substance)
*/
fof(a10724,axiom,s_subclass(s_BiologicallyActiveSubstance, s_Substance)).

/*
(subclass Nutrient BiologicallyActiveSubstance)
*/
fof(a10725,axiom,s_subclass(s_Nutrient, s_BiologicallyActiveSubstance)).

/*
(disjointDecomposition4 Nutrient Protein Carbohydrate Vitamin)
*/
fof(a10726,axiom,s_disjointDecomposition4(s_Nutrient, s_Protein, s_Carbohydrate, s_Vitamin)).

/*
(subclass Protein Nutrient)
*/
fof(a10727,axiom,s_subclass(s_Protein, s_Nutrient)).

/*
(instance Enzyme SetOrClass)
*/
fof(a10728,axiom,s_instance(s_Enzyme, s_SetOrClass)).

/*
(instance Protein SetOrClass)
*/
fof(a10729,axiom,s_instance(s_Protein, s_SetOrClass)).

/*
(subclass Enzyme Protein)
*/
fof(a10730,axiom,s_subclass(s_Enzyme, s_Protein)).

/*
(instance Carbohydrate SetOrClass)
*/
fof(a10731,axiom,s_instance(s_Carbohydrate, s_SetOrClass)).

/*
(subclass Carbohydrate Nutrient)
*/
fof(a10732,axiom,s_subclass(s_Carbohydrate, s_Nutrient)).

/*
(instance Vitamin SetOrClass)
*/
fof(a10733,axiom,s_instance(s_Vitamin, s_SetOrClass)).

/*
(instance Nutrient SetOrClass)
*/
fof(a10734,axiom,s_instance(s_Nutrient, s_SetOrClass)).

/*
(subclass Vitamin Nutrient)
*/
fof(a10735,axiom,s_subclass(s_Vitamin, s_Nutrient)).

/*
(subclass LiquidMixture Mixture)
*/
fof(a10736,axiom,s_subclass(s_LiquidMixture, s_Mixture)).

/*
(partition3 LiquidMixture Solution Suspension)
*/
fof(a10737,axiom,s_partition3(s_LiquidMixture, s_Solution, s_Suspension)).

/*
(forall (?MIX)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?MIX LiquidMixture)
        (and (part ?PART ?MIX) (attribute ?PART Liquid))))))
*/
fof(a10738,axiom,! [MIX] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(MIX, s_LiquidMixture) => (s_part(PART, MIX) & s_attribute(PART, s_Liquid))))))).

/*
(instance Solution SetOrClass)
*/
fof(a10739,axiom,s_instance(s_Solution, s_SetOrClass)).

/*
(subclass Solution LiquidMixture)
*/
fof(a10740,axiom,s_subclass(s_Solution, s_LiquidMixture)).

/*
(instance Suspension SetOrClass)
*/
fof(a10741,axiom,s_instance(s_Suspension, s_SetOrClass)).

/*
(instance LiquidMixture SetOrClass)
*/
fof(a10742,axiom,s_instance(s_LiquidMixture, s_SetOrClass)).

/*
(subclass Suspension LiquidMixture)
*/
fof(a10743,axiom,s_subclass(s_Suspension, s_LiquidMixture)).

/*
(instance Mixture SetOrClass)
*/
fof(a10744,axiom,s_instance(s_Mixture, s_SetOrClass)).

/*
(subclass GasMixture Mixture)
*/
fof(a10745,axiom,s_subclass(s_GasMixture, s_Mixture)).

/*
(disjoint GasMixture LiquidMixture)
*/
fof(a10746,axiom,s_disjoint(s_GasMixture, s_LiquidMixture)).

/*
(forall (?MIX)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?MIX GasMixture)
        (and (part ?PART ?MIX) (attribute ?PART Gas))))))
*/
fof(a10747,axiom,! [MIX] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(MIX, s_GasMixture) => (s_part(PART, MIX) & s_attribute(PART, s_Gas))))))).

/*
(subclass Cloud GasMixture)
*/
fof(a10748,axiom,s_subclass(s_Cloud, s_GasMixture)).

/*
(forall (?CLOUD)
 (=> (instance ?CLOUD Cloud) (capability Seeing patient ?CLOUD)))
*/
fof(a10749,axiom,! [CLOUD] : ((s_instance(CLOUD, s_Cloud) => s_capability(s_Seeing, s_patient_m, CLOUD)))).

/*
(instance Smoke SetOrClass)
*/
fof(a10750,axiom,s_instance(s_Smoke, s_SetOrClass)).

/*
(subclass Smoke Cloud)
*/
fof(a10751,axiom,s_subclass(s_Smoke, s_Cloud)).

/*
(forall (?SMOKE)
 (exists (?BURNING)
  (and (instance ?BURNING Process)
       (=> (instance ?SMOKE Smoke)
        (and (instance ?BURNING Combustion)
             (result ?BURNING ?SMOKE))))))
*/
fof(a10752,axiom,! [SMOKE] : (? [BURNING] : ((s_instance(BURNING, s_Process) & (s_instance(SMOKE, s_Smoke) => (s_instance(BURNING, s_Combustion) & s_result(BURNING, SMOKE))))))).

/*
(instance WaterCloud SetOrClass)
*/
fof(a10753,axiom,s_instance(s_WaterCloud, s_SetOrClass)).

/*
(instance Cloud SetOrClass)
*/
fof(a10754,axiom,s_instance(s_Cloud, s_SetOrClass)).

/*
(subclass WaterCloud Cloud)
*/
fof(a10755,axiom,s_subclass(s_WaterCloud, s_Cloud)).

/*
(forall (?CLOUD)
 (exists (?WATER)
  (and (instance ?WATER Object)
       (=> (instance ?CLOUD WaterCloud)
        (and (instance ?WATER Water) (part ?WATER ?CLOUD))))))
*/
fof(a10756,axiom,! [CLOUD] : (? [WATER] : ((s_instance(WATER, s_Object) & (s_instance(CLOUD, s_WaterCloud) => (s_instance(WATER, s_Water) & s_part(WATER, CLOUD))))))).

/*
(forall (?CLOUD ?MEASURE2 ?MEASURE1)
 (forall (?PART)
  (exists (?WATER)
   (and (instance ?WATER Object)
        (=> (instance ?PART Object)
         (=>
          (and (instance ?MEASURE2 PhysicalQuantity)
               (instance ?MEASURE1 PhysicalQuantity))
          (=> (instance ?CLOUD WaterCloud)
           (=> (and (part ?PART ?CLOUD) (not (instance ?PART Water)))
            (and (instance ?WATER Water)
                 (and (part ?WATER ?CLOUD)
                      (and (measure ?WATER ?MEASURE1)
                           (and (measure ?PART ?MEASURE2)
                                (greaterThan
                                 ?MEASURE1
                                 ?MEASURE2)))))))))))))
*/
fof(a10757,axiom,! [CLOUD,MEASURE2,MEASURE1] : (! [PART] : (? [WATER] : ((s_instance(WATER, s_Object) & (s_instance(PART, s_Object) => ((s_instance(MEASURE2, s_PhysicalQuantity) & s_instance(MEASURE1, s_PhysicalQuantity)) => (s_instance(CLOUD, s_WaterCloud) => ((s_part(PART, CLOUD) & (~ s_instance(PART, s_Water))) => (s_instance(WATER, s_Water) & (s_part(WATER, CLOUD) & (s_measure(WATER, MEASURE1) & (s_measure(PART, MEASURE2) & greater(MEASURE1, MEASURE2)))))))))))))).

/*
(instance Air SetOrClass)
*/
fof(a10758,axiom,s_instance(s_Air, s_SetOrClass)).

/*
(instance GasMixture SetOrClass)
*/
fof(a10759,axiom,s_instance(s_GasMixture, s_SetOrClass)).

/*
(subclass Air GasMixture)
*/
fof(a10760,axiom,s_subclass(s_Air, s_GasMixture)).

/*
(forall (?WIND)
 (exists (?AIR)
  (and (instance ?AIR Entity)
       (=> (instance ?WIND Wind)
        (and (patient ?WIND ?AIR) (instance ?AIR Air))))))
*/
fof(a10761,axiom,! [WIND] : (? [AIR] : ((s_instance(AIR, s_Entity) & (s_instance(WIND, s_Wind) => (s_patient(WIND, AIR) & s_instance(AIR, s_Air))))))).

/*
(instance Substance SetOrClass)
*/
fof(a10762,axiom,s_instance(s_Substance, s_SetOrClass)).

/*
(subclass BodySubstance Substance)
*/
fof(a10763,axiom,s_subclass(s_BodySubstance, s_Substance)).

/*
(subclass AnimalSubstance BodySubstance)
*/
fof(a10764,axiom,s_subclass(s_AnimalSubstance, s_BodySubstance)).

/*
(forall (?ANIMAL ?SUBSTANCE)
 (=>
  (and (instance ?SUBSTANCE AnimalSubstance)
       (and (instance ?ANIMAL Organism) (part ?SUBSTANCE ?ANIMAL)))
  (instance ?ANIMAL Animal)))
*/
fof(a10765,axiom,! [ANIMAL,SUBSTANCE] : (((s_instance(SUBSTANCE, s_AnimalSubstance) & (s_instance(ANIMAL, s_Organism) & s_part(SUBSTANCE, ANIMAL))) => s_instance(ANIMAL, s_Animal)))).

/*
(instance PlantSubstance SetOrClass)
*/
fof(a10766,axiom,s_instance(s_PlantSubstance, s_SetOrClass)).

/*
(subclass PlantSubstance BodySubstance)
*/
fof(a10767,axiom,s_subclass(s_PlantSubstance, s_BodySubstance)).

/*
(forall (?PLANT ?SUBSTANCE)
 (=>
  (and (instance ?SUBSTANCE PlantSubstance)
       (and (instance ?PLANT Organism) (part ?SUBSTANCE ?PLANT)))
  (instance ?PLANT Plant)))
*/
fof(a10768,axiom,! [PLANT,SUBSTANCE] : (((s_instance(SUBSTANCE, s_PlantSubstance) & (s_instance(PLANT, s_Organism) & s_part(SUBSTANCE, PLANT))) => s_instance(PLANT, s_Plant)))).

/*
(subclass Hormone BodySubstance)
*/
fof(a10769,axiom,s_subclass(s_Hormone, s_BodySubstance)).

/*
(instance Hormone SetOrClass)
*/
fof(a10770,axiom,s_instance(s_Hormone, s_SetOrClass)).

/*
(instance BiologicallyActiveSubstance SetOrClass)
*/
fof(a10771,axiom,s_instance(s_BiologicallyActiveSubstance, s_SetOrClass)).

/*
(subclass Hormone BiologicallyActiveSubstance)
*/
fof(a10772,axiom,s_subclass(s_Hormone, s_BiologicallyActiveSubstance)).

/*
(forall (?HORMONE)
 (exists (?PROCESS ?GLAND)
  (and (and (instance ?GLAND Object) (instance ?PROCESS Process))
       (=> (instance ?HORMONE Hormone)
        (and (instance ?GLAND Gland)
             (and (instrument ?PROCESS ?GLAND)
                  (result ?PROCESS ?HORMONE)))))))
*/
fof(a10773,axiom,! [HORMONE] : (? [PROCESS,GLAND] : (((s_instance(GLAND, s_Object) & s_instance(PROCESS, s_Process)) & (s_instance(HORMONE, s_Hormone) => (s_instance(GLAND, s_Gland) & (s_instrument(PROCESS, GLAND) & s_result(PROCESS, HORMONE)))))))).

/*
(instance Blood SetOrClass)
*/
fof(a10774,axiom,s_instance(s_Blood, s_SetOrClass)).

/*
(subclass Blood BodySubstance)
*/
fof(a10775,axiom,s_subclass(s_Blood, s_BodySubstance)).

/*
(instance FoodForFn UnaryFunction)
*/
fof(a10776,axiom,s_instance(s_FoodForFn_m, s_UnaryFunction)).

/*
(domainSubclass FoodForFn 1 Organism)
*/
fof(a10777,axiom,s_domainSubclass(s_FoodForFn_m, 1, s_Organism)).

/*
(rangeSubclass FoodForFn SelfConnectedObject)
*/
fof(a10778,axiom,s_rangeSubclass(s_FoodForFn_m, s_SelfConnectedObject)).

/*
(forall (?A ?FOOD)
 (exists (?NUTRIENT)
  (and (instance ?NUTRIENT Object)
       (=> (and (instance ?FOOD Object) (subclass ?A Organism))
        (=> (instance ?FOOD (FoodForFn ?A))
         (and (instance ?NUTRIENT Nutrient) (part ?NUTRIENT ?FOOD)))))))
*/
fof(a10779,axiom,! [A,FOOD] : (? [NUTRIENT] : ((s_instance(NUTRIENT, s_Object) & ((s_instance(FOOD, s_Object) & s_subclass(A, s_Organism)) => (s_instance(FOOD, s_FoodForFn(A)) => (s_instance(NUTRIENT, s_Nutrient) & s_part(NUTRIENT, FOOD)))))))).

/*
(instance Meat SetOrClass)
*/
fof(a10780,axiom,s_instance(s_Meat, s_SetOrClass)).

/*
(instance SelfConnectedObject SetOrClass)
*/
fof(a10781,axiom,s_instance(s_SelfConnectedObject, s_SetOrClass)).

/*
(subclass Meat SelfConnectedObject)
*/
fof(a10782,axiom,s_subclass(s_Meat, s_SelfConnectedObject)).

/*
(forall (?MEAT)
 (forall (?PART)
  (exists (?SUBPART ?TIME ?ANIMAL)
   (and (and (instance ?ANIMAL Object) (instance ?TIME TimePosition)
             (instance ?SUBPART Object))
        (=> (instance ?PART Object)
         (=> (instance ?MEAT Meat)
          (=> (part ?PART ?MEAT)
           (and (part ?SUBPART ?PART)
                (holdsDuring ?TIME
                 (and (instance ?ANIMAL Animal)
                      (part ?SUBPART ?ANIMAL)))))))))))
*/
%% no translation to TPTP available.

/*
(instance OrganicObject SetOrClass)
*/
fof(a10783,axiom,s_instance(s_OrganicObject, s_SetOrClass)).

/*
(subclass AnatomicalStructure OrganicObject)
*/
fof(a10784,axiom,s_subclass(s_AnatomicalStructure, s_OrganicObject)).

/*
(partition3 AnatomicalStructure BodyPart AbnormalAnatomicalStructure)
*/
fof(a10785,axiom,s_partition3(s_AnatomicalStructure, s_BodyPart, s_AbnormalAnatomicalStructure)).

/*
(partition3 AnatomicalStructure AnimalAnatomicalStructure
 PlantAnatomicalStructure)
*/
fof(a10786,axiom,s_partition3(s_AnatomicalStructure, s_AnimalAnatomicalStructure, s_PlantAnatomicalStructure)).

/*
(forall (?ANAT)
 (exists (?ORGANISM ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?ORGANISM Object))
       (=> (instance ?ANAT AnatomicalStructure)
        (and (instance ?ORGANISM Organism)
             (and (temporalPart ?TIME (WhenFn ?ORGANISM))
                  (holdsDuring ?TIME (part ?ANAT ?ORGANISM))))))))
*/
%% no translation to TPTP available.

/*
(forall (?PART)
 (exists (?CELL)
  (and (instance ?CELL Object)
       (=> (instance ?PART AnatomicalStructure)
        (and (instance ?CELL Cell) (part ?CELL ?PART))))))
*/
fof(a10787,axiom,! [PART] : (? [CELL] : ((s_instance(CELL, s_Object) & (s_instance(PART, s_AnatomicalStructure) => (s_instance(CELL, s_Cell) & s_part(CELL, PART))))))).

/*
(instance AbnormalAnatomicalStructure SetOrClass)
*/
fof(a10788,axiom,s_instance(s_AbnormalAnatomicalStructure, s_SetOrClass)).

/*
(subclass AbnormalAnatomicalStructure AnatomicalStructure)
*/
fof(a10789,axiom,s_subclass(s_AbnormalAnatomicalStructure, s_AnatomicalStructure)).

/*
(forall (?STRUCTURE)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?STRUCTURE AbnormalAnatomicalStructure)
        (and (instance ?PROC PathologicProcess)
             (result ?PROC ?STRUCTURE))))))
*/
fof(a10790,axiom,! [STRUCTURE] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(STRUCTURE, s_AbnormalAnatomicalStructure) => (s_instance(PROC, s_PathologicProcess) & s_result(PROC, STRUCTURE))))))).

/*
(subclass BodyPart AnatomicalStructure)
*/
fof(a10791,axiom,s_subclass(s_BodyPart, s_AnatomicalStructure)).

/*
(forall (?PART)
 (exists (?ORGANISM ?TIME)
  (and (and (instance ?TIME TimePosition)
            (instance ?ORGANISM CorpuscularObject))
       (=> (instance ?PART BodyPart)
        (and (instance ?ORGANISM Organism)
             (and (temporalPart ?TIME (WhenFn ?ORGANISM))
                  (holdsDuring ?TIME (component ?PART ?ORGANISM))))))))
*/
%% no translation to TPTP available.

/*
(forall (?PART)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?PART BodyPart)
        (and (instance ?PROC PhysiologicProcess)
             (result ?PROC ?PART))))))
*/
fof(a10792,axiom,! [PART] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(PART, s_BodyPart) => (s_instance(PROC, s_PhysiologicProcess) & s_result(PROC, PART))))))).

/*
(subclass AnimalAnatomicalStructure AnatomicalStructure)
*/
fof(a10793,axiom,s_subclass(s_AnimalAnatomicalStructure, s_AnatomicalStructure)).

/*
(forall (?ANIMAL ?STRUCTURE)
 (=>
  (and (instance ?STRUCTURE AnimalAnatomicalStructure)
       (and (instance ?ANIMAL Organism) (part ?STRUCTURE ?ANIMAL)))
  (instance ?ANIMAL Animal)))
*/
fof(a10794,axiom,! [ANIMAL,STRUCTURE] : (((s_instance(STRUCTURE, s_AnimalAnatomicalStructure) & (s_instance(ANIMAL, s_Organism) & s_part(STRUCTURE, ANIMAL))) => s_instance(ANIMAL, s_Animal)))).

/*
(instance AnatomicalStructure SetOrClass)
*/
fof(a10795,axiom,s_instance(s_AnatomicalStructure, s_SetOrClass)).

/*
(subclass PlantAnatomicalStructure AnatomicalStructure)
*/
fof(a10796,axiom,s_subclass(s_PlantAnatomicalStructure, s_AnatomicalStructure)).

/*
(forall (?PLANT ?STRUCTURE)
 (=>
  (and (instance ?STRUCTURE PlantAnatomicalStructure)
       (and (instance ?PLANT Organism) (part ?STRUCTURE ?PLANT)))
  (instance ?PLANT Plant)))
*/
fof(a10797,axiom,! [PLANT,STRUCTURE] : (((s_instance(STRUCTURE, s_PlantAnatomicalStructure) & (s_instance(PLANT, s_Organism) & s_part(STRUCTURE, PLANT))) => s_instance(PLANT, s_Plant)))).

/*
(subclass ReproductiveBody BodyPart)
*/
fof(a10798,axiom,s_subclass(s_ReproductiveBody, s_BodyPart)).

/*
(subclass Egg ReproductiveBody)
*/
fof(a10799,axiom,s_subclass(s_Egg, s_ReproductiveBody)).

/*
(instance Egg SetOrClass)
*/
fof(a10800,axiom,s_instance(s_Egg, s_SetOrClass)).

/*
(instance AnimalAnatomicalStructure SetOrClass)
*/
fof(a10801,axiom,s_instance(s_AnimalAnatomicalStructure, s_SetOrClass)).

/*
(subclass Egg AnimalAnatomicalStructure)
*/
fof(a10802,axiom,s_subclass(s_Egg, s_AnimalAnatomicalStructure)).

/*
(subclass Seed ReproductiveBody)
*/
fof(a10803,axiom,s_subclass(s_Seed, s_ReproductiveBody)).

/*
(instance Seed SetOrClass)
*/
fof(a10804,axiom,s_instance(s_Seed, s_SetOrClass)).

/*
(subclass Seed PlantAnatomicalStructure)
*/
fof(a10805,axiom,s_subclass(s_Seed, s_PlantAnatomicalStructure)).

/*
(forall (?SEED)
 (exists (?PLANT ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?PLANT Object))
       (=> (instance ?SEED Seed)
        (and (instance ?PLANT FloweringPlant)
             (holdsDuring ?TIME (part ?SEED ?PLANT)))))))
*/
%% no translation to TPTP available.

/*
(subclass Pollen ReproductiveBody)
*/
fof(a10806,axiom,s_subclass(s_Pollen, s_ReproductiveBody)).

/*
(instance Pollen SetOrClass)
*/
fof(a10807,axiom,s_instance(s_Pollen, s_SetOrClass)).

/*
(subclass Pollen PlantAnatomicalStructure)
*/
fof(a10808,axiom,s_subclass(s_Pollen, s_PlantAnatomicalStructure)).

/*
(subclass FruitOrVegetable PlantAnatomicalStructure)
*/
fof(a10809,axiom,s_subclass(s_FruitOrVegetable, s_PlantAnatomicalStructure)).

/*
(instance FruitOrVegetable SetOrClass)
*/
fof(a10810,axiom,s_instance(s_FruitOrVegetable, s_SetOrClass)).

/*
(subclass FruitOrVegetable ReproductiveBody)
*/
fof(a10811,axiom,s_subclass(s_FruitOrVegetable, s_ReproductiveBody)).

/*
(instance ReproductiveBody SetOrClass)
*/
fof(a10812,axiom,s_instance(s_ReproductiveBody, s_SetOrClass)).

/*
(subclass Spore ReproductiveBody)
*/
fof(a10813,axiom,s_subclass(s_Spore, s_ReproductiveBody)).

/*
(instance Spore SetOrClass)
*/
fof(a10814,axiom,s_instance(s_Spore, s_SetOrClass)).

/*
(instance PlantAnatomicalStructure SetOrClass)
*/
fof(a10815,axiom,s_instance(s_PlantAnatomicalStructure, s_SetOrClass)).

/*
(subclass Spore PlantAnatomicalStructure)
*/
fof(a10816,axiom,s_subclass(s_Spore, s_PlantAnatomicalStructure)).

/*
(forall (?SPORE)
 (exists (?PLANT ?TIME)
  (and (and (instance ?TIME TimePosition) (instance ?PLANT Object))
       (=> (instance ?SPORE Spore)
        (and (instance ?PLANT NonFloweringPlant)
             (holdsDuring ?TIME (part ?SPORE ?PLANT)))))))
*/
%% no translation to TPTP available.

/*
(instance BodyCovering SetOrClass)
*/
fof(a10817,axiom,s_instance(s_BodyCovering, s_SetOrClass)).

/*
(subclass BodyCovering BodyPart)
*/
fof(a10818,axiom,s_subclass(s_BodyCovering, s_BodyPart)).

/*
(forall (?COVER)
 (exists (?BODY)
  (and (instance ?BODY Object)
       (=> (instance ?COVER BodyCovering)
        (and (superficialPart ?COVER ?BODY)
             (or (instance ?BODY Organism)
                 (instance ?BODY BodyPart)))))))
*/
fof(a10819,axiom,! [COVER] : (? [BODY] : ((s_instance(BODY, s_Object) & (s_instance(COVER, s_BodyCovering) => (s_superficialPart(COVER, BODY) & (s_instance(BODY, s_Organism) | s_instance(BODY, s_BodyPart)))))))).

/*
(instance BodyJunction SetOrClass)
*/
fof(a10820,axiom,s_instance(s_BodyJunction, s_SetOrClass)).

/*
(subclass BodyJunction BodyPart)
*/
fof(a10821,axiom,s_subclass(s_BodyJunction, s_BodyPart)).

/*
(forall (?JUNCT)
 (exists (?OBJ1 ?OBJ2)
  (and (and (instance ?OBJ2 Object) (instance ?OBJ1 Object))
       (=> (instance ?JUNCT BodyJunction)
        (and (instance ?OBJ1 BodyPart)
             (and (instance ?OBJ2 BodyPart)
                  (connects ?JUNCT ?OBJ1 ?OBJ2)))))))
*/
fof(a10822,axiom,! [JUNCT] : (? [OBJ1,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(OBJ1, s_Object)) & (s_instance(JUNCT, s_BodyJunction) => (s_instance(OBJ1, s_BodyPart) & (s_instance(OBJ2, s_BodyPart) & s_connects(JUNCT, OBJ1, OBJ2)))))))).

/*
(subclass BodyCavity BodyPart)
*/
fof(a10823,axiom,s_subclass(s_BodyCavity, s_BodyPart)).

/*
(instance BodyVessel SetOrClass)
*/
fof(a10824,axiom,s_instance(s_BodyVessel, s_SetOrClass)).

/*
(instance BodyCavity SetOrClass)
*/
fof(a10825,axiom,s_instance(s_BodyCavity, s_SetOrClass)).

/*
(subclass BodyVessel BodyCavity)
*/
fof(a10826,axiom,s_subclass(s_BodyVessel, s_BodyCavity)).

/*
(instance Cell SetOrClass)
*/
fof(a10827,axiom,s_instance(s_Cell, s_SetOrClass)).

/*
(subclass Cell BodyPart)
*/
fof(a10828,axiom,s_subclass(s_Cell, s_BodyPart)).

/*
(instance BodyPart SetOrClass)
*/
fof(a10829,axiom,s_instance(s_BodyPart, s_SetOrClass)).

/*
(subclass Organ BodyPart)
*/
fof(a10830,axiom,s_subclass(s_Organ, s_BodyPart)).

/*
(forall (?ORGAN)
 (exists (?PURP)
  (and (instance ?PURP Formula)
       (=> (instance ?ORGAN Organ) (hasPurpose ?ORGAN ?PURP)))))
*/
fof(a10831,axiom,! [ORGAN] : (? [PURP] : ((s_instance(PURP, s_Formula) & (s_instance(ORGAN, s_Organ) => s_hasPurpose(ORGAN, PURP)))))).

/*
(instance Gland SetOrClass)
*/
fof(a10832,axiom,s_instance(s_Gland, s_SetOrClass)).

/*
(instance Organ SetOrClass)
*/
fof(a10833,axiom,s_instance(s_Organ, s_SetOrClass)).

/*
(subclass Gland Organ)
*/
fof(a10834,axiom,s_subclass(s_Gland, s_Organ)).

/*
(instance BodySubstance SetOrClass)
*/
fof(a10835,axiom,s_instance(s_BodySubstance, s_SetOrClass)).

/*
(subclass Tissue BodySubstance)
*/
fof(a10836,axiom,s_subclass(s_Tissue, s_BodySubstance)).

/*
(disjointDecomposition4 Tissue Bone Muscle FatTissue)
*/
fof(a10837,axiom,s_disjointDecomposition4(s_Tissue, s_Bone, s_Muscle, s_FatTissue)).

/*
(forall (?STUFF)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?STUFF Tissue)
        (and (instance ?PART Cell) (part ?PART ?STUFF))))))
*/
fof(a10838,axiom,! [STUFF] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(STUFF, s_Tissue) => (s_instance(PART, s_Cell) & s_part(PART, STUFF))))))).

/*
(forall (?STUFF)
 (exists (?ORGANISM)
  (and (instance ?ORGANISM Object)
       (=> (instance ?STUFF Tissue)
        (and (instance ?ORGANISM Organism) (part ?STUFF ?ORGANISM))))))
*/
fof(a10839,axiom,! [STUFF] : (? [ORGANISM] : ((s_instance(ORGANISM, s_Object) & (s_instance(STUFF, s_Tissue) => (s_instance(ORGANISM, s_Organism) & s_part(STUFF, ORGANISM))))))).

/*
(subclass Bone Tissue)
*/
fof(a10840,axiom,s_subclass(s_Bone, s_Tissue)).

/*
(instance Bone SetOrClass)
*/
fof(a10841,axiom,s_instance(s_Bone, s_SetOrClass)).

/*
(subclass Bone AnimalSubstance)
*/
fof(a10842,axiom,s_subclass(s_Bone, s_AnimalSubstance)).

/*
(forall (?BONE)
 (exists (?VERT)
  (and (instance ?VERT Object)
       (=> (instance ?BONE Bone)
        (and (instance ?VERT Vertebrate) (part ?BONE ?VERT))))))
*/
fof(a10843,axiom,! [BONE] : (? [VERT] : ((s_instance(VERT, s_Object) & (s_instance(BONE, s_Bone) => (s_instance(VERT, s_Vertebrate) & s_part(BONE, VERT))))))).

/*
(subclass Muscle Tissue)
*/
fof(a10844,axiom,s_subclass(s_Muscle, s_Tissue)).

/*
(instance Muscle SetOrClass)
*/
fof(a10845,axiom,s_instance(s_Muscle, s_SetOrClass)).

/*
(instance AnimalSubstance SetOrClass)
*/
fof(a10846,axiom,s_instance(s_AnimalSubstance, s_SetOrClass)).

/*
(subclass Muscle AnimalSubstance)
*/
fof(a10847,axiom,s_subclass(s_Muscle, s_AnimalSubstance)).

/*
(instance FatTissue SetOrClass)
*/
fof(a10848,axiom,s_instance(s_FatTissue, s_SetOrClass)).

/*
(instance Tissue SetOrClass)
*/
fof(a10849,axiom,s_instance(s_Tissue, s_SetOrClass)).

/*
(subclass FatTissue Tissue)
*/
fof(a10850,axiom,s_subclass(s_FatTissue, s_Tissue)).

/*
(instance Noun SetOrClass)
*/
fof(a10851,axiom,s_instance(s_Noun, s_SetOrClass)).

/*
(subclass Noun Word)
*/
fof(a10852,axiom,s_subclass(s_Noun, s_Word)).

/*
(partition6 Word Noun Verb Adjective Adverb ParticleWord)
*/
fof(a10853,axiom,s_partition6(s_Word, s_Noun, s_Verb, s_Adjective, s_Adverb, s_ParticleWord)).

/*
(instance Verb SetOrClass)
*/
fof(a10854,axiom,s_instance(s_Verb, s_SetOrClass)).

/*
(subclass Verb Word)
*/
fof(a10855,axiom,s_subclass(s_Verb, s_Word)).

/*
(instance Adjective SetOrClass)
*/
fof(a10856,axiom,s_instance(s_Adjective, s_SetOrClass)).

/*
(subclass Adjective Word)
*/
fof(a10857,axiom,s_subclass(s_Adjective, s_Word)).

/*
(instance Adverb SetOrClass)
*/
fof(a10858,axiom,s_instance(s_Adverb, s_SetOrClass)).

/*
(subclass Adverb Word)
*/
fof(a10859,axiom,s_subclass(s_Adverb, s_Word)).

/*
(instance ParticleWord SetOrClass)
*/
fof(a10860,axiom,s_instance(s_ParticleWord, s_SetOrClass)).

/*
(instance Word SetOrClass)
*/
fof(a10861,axiom,s_instance(s_Word, s_SetOrClass)).

/*
(subclass ParticleWord Word)
*/
fof(a10862,axiom,s_subclass(s_ParticleWord, s_Word)).

/*
(instance Morpheme SetOrClass)
*/
fof(a10863,axiom,s_instance(s_Morpheme, s_SetOrClass)).

/*
(subclass Morpheme LinguisticExpression)
*/
fof(a10864,axiom,s_subclass(s_Morpheme, s_LinguisticExpression)).

/*
(forall (?MORPH)
 (forall (?OTHERMORPH)
  (=> (instance ?OTHERMORPH Object)
   (=> (instance ?MORPH Morpheme)
    (not (and (instance ?OTHERMORPH Morpheme)
              (and (part ?OTHERMORPH ?MORPH)
                   (not (equal ?OTHERMORPH ?MORPH)))))))))
*/
fof(a10865,axiom,! [MORPH] : (! [OTHERMORPH] : ((s_instance(OTHERMORPH, s_Object) => (s_instance(MORPH, s_Morpheme) => (~ (s_instance(OTHERMORPH, s_Morpheme) & (s_part(OTHERMORPH, MORPH) & (~ (OTHERMORPH = MORPH)))))))))).

/*
(forall (?MORPH)
 (exists (?WORD)
  (and (instance ?WORD Object)
       (=> (instance ?MORPH Morpheme)
        (and (instance ?WORD Word) (part ?MORPH ?WORD))))))
*/
fof(a10866,axiom,! [MORPH] : (? [WORD] : ((s_instance(WORD, s_Object) & (s_instance(MORPH, s_Morpheme) => (s_instance(WORD, s_Word) & s_part(MORPH, WORD))))))).

/*
(forall (?WORD)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?WORD Word)
        (and (part ?PART ?WORD) (instance ?PART Morpheme))))))
*/
fof(a10867,axiom,! [WORD] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(WORD, s_Word) => (s_part(PART, WORD) & s_instance(PART, s_Morpheme))))))).

/*
(subclass Phrase LinguisticExpression)
*/
fof(a10868,axiom,s_subclass(s_Phrase, s_LinguisticExpression)).

/*
(disjointDecomposition4 Phrase VerbPhrase NounPhrase
 PrepositionalPhrase)
*/
fof(a10869,axiom,s_disjointDecomposition4(s_Phrase, s_VerbPhrase, s_NounPhrase, s_PrepositionalPhrase)).

/*
(forall (?PHRASE)
 (exists (?PART1 ?PART2)
  (and (and (instance ?PART2 Object) (instance ?PART1 Object))
       (=> (instance ?PHRASE Phrase)
        (and (part ?PART1 ?PHRASE)
             (and (part ?PART2 ?PHRASE)
                  (and (instance ?PART1 Word)
                       (and (instance ?PART2 Word)
                            (not (equal ?PART1 ?PART2))))))))))
*/
fof(a10870,axiom,! [PHRASE] : (? [PART1,PART2] : (((s_instance(PART2, s_Object) & s_instance(PART1, s_Object)) & (s_instance(PHRASE, s_Phrase) => (s_part(PART1, PHRASE) & (s_part(PART2, PHRASE) & (s_instance(PART1, s_Word) & (s_instance(PART2, s_Word) & (~ (PART1 = PART2))))))))))).

/*
(instance VerbPhrase SetOrClass)
*/
fof(a10871,axiom,s_instance(s_VerbPhrase, s_SetOrClass)).

/*
(subclass VerbPhrase Phrase)
*/
fof(a10872,axiom,s_subclass(s_VerbPhrase, s_Phrase)).

/*
(forall (?PHRASE)
 (exists (?VERB)
  (and (instance ?VERB Object)
       (=> (instance ?PHRASE VerbPhrase)
        (and (instance ?VERB Verb) (part ?VERB ?PHRASE))))))
*/
fof(a10873,axiom,! [PHRASE] : (? [VERB] : ((s_instance(VERB, s_Object) & (s_instance(PHRASE, s_VerbPhrase) => (s_instance(VERB, s_Verb) & s_part(VERB, PHRASE))))))).

/*
(instance NounPhrase SetOrClass)
*/
fof(a10874,axiom,s_instance(s_NounPhrase, s_SetOrClass)).

/*
(subclass NounPhrase Phrase)
*/
fof(a10875,axiom,s_subclass(s_NounPhrase, s_Phrase)).

/*
(disjoint NounPhrase VerbPhrase)
*/
fof(a10876,axiom,s_disjoint(s_NounPhrase, s_VerbPhrase)).

/*
(forall (?SENTENCE)
 (exists (?PHRASE1 ?PHRASE2)
  (and (and (instance ?PHRASE2 Object) (instance ?PHRASE1 Object))
       (=> (instance ?SENTENCE Sentence)
        (and (instance ?PHRASE1 NounPhrase)
             (and (instance ?PHRASE2 VerbPhrase)
                  (and (part ?PHRASE1 ?SENTENCE)
                       (part ?PHRASE2 ?SENTENCE))))))))
*/
fof(a10877,axiom,! [SENTENCE] : (? [PHRASE1,PHRASE2] : (((s_instance(PHRASE2, s_Object) & s_instance(PHRASE1, s_Object)) & (s_instance(SENTENCE, s_Sentence) => (s_instance(PHRASE1, s_NounPhrase) & (s_instance(PHRASE2, s_VerbPhrase) & (s_part(PHRASE1, SENTENCE) & s_part(PHRASE2, SENTENCE))))))))).

/*
(forall (?PHRASE)
 (exists (?NOUN)
  (and (instance ?NOUN Object)
       (=> (instance ?PHRASE NounPhrase)
        (and (instance ?NOUN Noun) (part ?NOUN ?PHRASE))))))
*/
fof(a10878,axiom,! [PHRASE] : (? [NOUN] : ((s_instance(NOUN, s_Object) & (s_instance(PHRASE, s_NounPhrase) => (s_instance(NOUN, s_Noun) & s_part(NOUN, PHRASE))))))).

/*
(instance PrepositionalPhrase SetOrClass)
*/
fof(a10879,axiom,s_instance(s_PrepositionalPhrase, s_SetOrClass)).

/*
(instance Phrase SetOrClass)
*/
fof(a10880,axiom,s_instance(s_Phrase, s_SetOrClass)).

/*
(subclass PrepositionalPhrase Phrase)
*/
fof(a10881,axiom,s_subclass(s_PrepositionalPhrase, s_Phrase)).

/*
(forall (?PHRASE)
 (exists (?PREP)
  (and (instance ?PREP Object)
       (=> (instance ?PHRASE PrepositionalPhrase)
        (and (instance ?PREP ParticleWord) (part ?PREP ?PHRASE))))))
*/
fof(a10882,axiom,! [PHRASE] : (? [PREP] : ((s_instance(PREP, s_Object) & (s_instance(PHRASE, s_PrepositionalPhrase) => (s_instance(PREP, s_ParticleWord) & s_part(PREP, PHRASE))))))).

/*
(subclass Text LinguisticExpression)
*/
fof(a10883,axiom,s_subclass(s_Text, s_LinguisticExpression)).

/*
(instance ContentBearingObject SetOrClass)
*/
fof(a10884,axiom,s_instance(s_ContentBearingObject, s_SetOrClass)).

/*
(subclass Text ContentBearingObject)
*/
fof(a10885,axiom,s_subclass(s_Text, s_ContentBearingObject)).

/*
(subclass Text Artifact)
*/
fof(a10886,axiom,s_subclass(s_Text, s_Artifact)).

/*
(forall (?TEXT)
 (exists (?PART)
  (and (instance ?PART Object)
       (=> (instance ?TEXT Text)
        (and (part ?PART ?TEXT)
             (instance ?PART LinguisticExpression))))))
*/
fof(a10887,axiom,! [TEXT] : (? [PART] : ((s_instance(PART, s_Object) & (s_instance(TEXT, s_Text) => (s_part(PART, TEXT) & s_instance(PART, s_LinguisticExpression))))))).

/*
(forall (?TEXT)
 (exists (?WRITE)
  (and (instance ?WRITE Process)
       (=> (instance ?TEXT Text)
        (and (instance ?WRITE Writing) (result ?WRITE ?TEXT))))))
*/
fof(a10888,axiom,! [TEXT] : (? [WRITE] : ((s_instance(WRITE, s_Process) & (s_instance(TEXT, s_Text) => (s_instance(WRITE, s_Writing) & s_result(WRITE, TEXT))))))).

/*
(instance FactualText SetOrClass)
*/
fof(a10889,axiom,s_instance(s_FactualText, s_SetOrClass)).

/*
(subclass FactualText Text)
*/
fof(a10890,axiom,s_subclass(s_FactualText, s_Text)).

/*
(disjoint FactualText FictionalText)
*/
fof(a10891,axiom,s_disjoint(s_FactualText, s_FictionalText)).

/*
(forall (?TEXT ?CONTENT ?CLASS ?AGENT)
 (=>
  (and (instance ?AGENT CognitiveAgent) (instance ?CLASS SetOrClass)
       (subclass ?CLASS ContentBearingObject))
  (=>
   (and (instance ?TEXT ?CLASS)
        (and (subclass ?CLASS FactualText)
             (and (authors ?AGENT ?CLASS)
                  (and (subsumesContentInstance ?TEXT ?CONTENT)
                       (instance ?CONTENT Formula)))))
   (believes ?AGENT ?CONTENT))))
*/
fof(a10892,axiom,! [TEXT,CONTENT,CLASS,AGENT] : (((s_instance(AGENT, s_CognitiveAgent) & s_instance(CLASS, s_SetOrClass) & s_subclass(CLASS, s_ContentBearingObject)) => ((s_instance(TEXT, CLASS) & (s_subclass(CLASS, s_FactualText) & (s_authors(AGENT, CLASS) & (s_subsumesContentInstance(TEXT, CONTENT) & s_instance(CONTENT, s_Formula))))) => s_believes(AGENT, CONTENT))))).

/*
(instance FictionalText SetOrClass)
*/
fof(a10893,axiom,s_instance(s_FictionalText, s_SetOrClass)).

/*
(subclass FictionalText Text)
*/
fof(a10894,axiom,s_subclass(s_FictionalText, s_Text)).

/*
(forall (?AGENT ?CLASS ?TEXT)
 (exists (?CONTENT)
  (and (instance ?CONTENT Formula)
       (=>
        (and (instance ?AGENT CognitiveAgent)
             (instance ?CLASS SetOrClass)
             (subclass ?CLASS ContentBearingObject))
        (=>
         (and (instance ?TEXT ?CLASS)
              (and (subclass ?CLASS FictionalText)
                   (authors ?AGENT ?CLASS)))
         (and (subsumesContentInstance ?TEXT ?CONTENT)
              (and (instance ?CONTENT Formula)
                   (not (believes ?AGENT ?CONTENT)))))))))
*/
fof(a10895,axiom,! [AGENT,CLASS,TEXT] : (? [CONTENT] : ((s_instance(CONTENT, s_Formula) & ((s_instance(AGENT, s_CognitiveAgent) & s_instance(CLASS, s_SetOrClass) & s_subclass(CLASS, s_ContentBearingObject)) => ((s_instance(TEXT, CLASS) & (s_subclass(CLASS, s_FictionalText) & s_authors(AGENT, CLASS))) => (s_subsumesContentInstance(TEXT, CONTENT) & (s_instance(CONTENT, s_Formula) & (~ s_believes(AGENT, CONTENT)))))))))).

/*
(instance Sentence SetOrClass)
*/
fof(a10896,axiom,s_instance(s_Sentence, s_SetOrClass)).

/*
(instance LinguisticExpression SetOrClass)
*/
fof(a10897,axiom,s_instance(s_LinguisticExpression, s_SetOrClass)).

/*
(subclass Sentence LinguisticExpression)
*/
fof(a10898,axiom,s_subclass(s_Sentence, s_LinguisticExpression)).

/*
(forall (?SENT)
 (exists (?PROP)
  (and (instance ?PROP Proposition)
       (=> (instance ?SENT Sentence)
        (and (instance ?PROP Proposition)
             (containsInformation ?SENT ?PROP))))))
*/
fof(a10899,axiom,! [SENT] : (? [PROP] : ((s_instance(PROP, s_Proposition) & (s_instance(SENT, s_Sentence) => (s_instance(PROP, s_Proposition) & s_containsInformation(SENT, PROP))))))).

/*
(instance authors BinaryPredicate)
*/
fof(a10900,axiom,s_instance(s_authors_m, s_BinaryPredicate)).

/*
(instance authors AsymmetricRelation)
*/
fof(a10901,axiom,s_instance(s_authors_m, s_AsymmetricRelation)).

/*
(domainSubclass authors 2 ContentBearingObject)
*/
fof(a10902,axiom,s_domainSubclass(s_authors_m, 2, s_ContentBearingObject)).

/*
(forall (?TEXTCLASS ?AGENT)
 (exists (?PROCESS ?INSTANCE)
  (and (and (instance ?INSTANCE Entity) (instance ?PROCESS Process))
       (=>
        (and (instance ?AGENT Agent)
             (subclass ?TEXTCLASS ContentBearingObject)
             (instance ?TEXTCLASS SetOrClass))
        (=> (authors ?AGENT ?TEXTCLASS)
         (and (agent ?PROCESS ?AGENT)
              (and (instance ?INSTANCE ?TEXTCLASS)
                   (result ?PROCESS ?INSTANCE))))))))
*/
fof(a10903,axiom,! [TEXTCLASS,AGENT] : (? [PROCESS,INSTANCE] : (((s_instance(INSTANCE, s_Entity) & s_instance(PROCESS, s_Process)) & ((s_instance(AGENT, s_Agent) & s_subclass(TEXTCLASS, s_ContentBearingObject) & s_instance(TEXTCLASS, s_SetOrClass)) => (s_authors(AGENT, TEXTCLASS) => (s_agent(PROCESS, AGENT) & (s_instance(INSTANCE, TEXTCLASS) & s_result(PROCESS, INSTANCE))))))))).

/*
(instance editor BinaryPredicate)
*/
fof(a10904,axiom,s_instance(s_editor_m, s_BinaryPredicate)).

/*
(instance editor AsymmetricRelation)
*/
fof(a10905,axiom,s_instance(s_editor_m, s_AsymmetricRelation)).

/*
(domainSubclass editor 2 Text)
*/
fof(a10906,axiom,s_domainSubclass(s_editor_m, 2, s_Text)).

/*
(instance publishes BinaryPredicate)
*/
fof(a10907,axiom,s_instance(s_publishes_m, s_BinaryPredicate)).

/*
(instance publishes AsymmetricRelation)
*/
fof(a10908,axiom,s_instance(s_publishes_m, s_AsymmetricRelation)).

/*
(domainSubclass publishes 2 Text)
*/
fof(a10909,axiom,s_domainSubclass(s_publishes_m, 2, s_Text)).

/*
(forall (?INST ?TEXTCLASS ?ORG)
 (exists (?PUB)
  (and (instance ?PUB Process)
       (=>
        (and (instance ?ORG Organization) (subclass ?TEXTCLASS Text)
             (instance ?TEXTCLASS SetOrClass))
        (=>
         (and (publishes ?ORG ?TEXTCLASS) (instance ?INST ?TEXTCLASS))
         (and (instance ?PUB Publication)
              (and (agent ?PUB ?ORG) (patient ?PUB ?INST))))))))
*/
fof(a10910,axiom,! [INST,TEXTCLASS,ORG] : (? [PUB] : ((s_instance(PUB, s_Process) & ((s_instance(ORG, s_Organization) & s_subclass(TEXTCLASS, s_Text) & s_instance(TEXTCLASS, s_SetOrClass)) => ((s_publishes(ORG, TEXTCLASS) & s_instance(INST, TEXTCLASS)) => (s_instance(PUB, s_Publication) & (s_agent(PUB, ORG) & s_patient(PUB, INST))))))))).

/*
(instance EditionFn BinaryFunction)
*/
fof(a10911,axiom,s_instance(s_EditionFn_m, s_BinaryFunction)).

/*
(instance EditionFn PartialValuedRelation)
*/
fof(a10912,axiom,s_instance(s_EditionFn_m, s_PartialValuedRelation)).

/*
(domainSubclass EditionFn 1 ContentBearingObject)
*/
fof(a10913,axiom,s_domainSubclass(s_EditionFn_m, 1, s_ContentBearingObject)).

/*
(rangeSubclass EditionFn ContentBearingObject)
*/
fof(a10914,axiom,s_rangeSubclass(s_EditionFn_m, s_ContentBearingObject)).

/*
(forall
 (?TEXT ?INT2 ?INT1 ?EDITION1 ?EDITION2 ?CBO1 ?CBO2 ?PUB2 ?DATE2 ?DATE1
  ?PUB1)
 (=>
  (and (subclass ?TEXT ContentBearingObject)
       (instance ?INT2 PositiveInteger)
       (instance ?INT1 PositiveInteger) (instance ?EDITION1 SetOrClass)
       (instance ?EDITION2 SetOrClass) (instance ?DATE2 Day)
       (instance ?DATE1 Day))
  (=>
   (and (equal (EditionFn ?TEXT ?INT1) ?EDITION1)
        (and (equal (EditionFn ?TEXT ?INT2) ?EDITION2)
             (and (greaterThan ?INT2 ?INT1)
                  (and (instance ?PUB1 Publication)
                       (and (instance ?PUB2 Publication)
                            (and (instance ?CBO1 ?EDITION1)
                                 (and
                                  (instance ?CBO2 ?EDITION2)
                                  (and
                                   (patient ?PUB1 ?CBO1)
                                   (and
                                    (patient ?PUB2 ?CBO2)
                                    (and
                                     (date ?PUB1 ?DATE1)
                                     (date ?PUB2 ?DATE2)))))))))))
   (before (EndFn ?DATE1) (EndFn ?DATE2)))))
*/
fof(a10915,axiom,! [TEXT,INT2,INT1,EDITION1,EDITION2,CBO1,CBO2,PUB2,DATE2,DATE1,PUB1] : (((s_subclass(TEXT, s_ContentBearingObject) & s_instance(INT2, s_PositiveInteger) & s_instance(INT1, s_PositiveInteger) & s_instance(EDITION1, s_SetOrClass) & s_instance(EDITION2, s_SetOrClass) & s_instance(DATE2, s_Day) & s_instance(DATE1, s_Day)) => (((s_EditionFn(TEXT, INT1) = EDITION1) & ((s_EditionFn(TEXT, INT2) = EDITION2) & (greater(INT2, INT1) & (s_instance(PUB1, s_Publication) & (s_instance(PUB2, s_Publication) & (s_instance(CBO1, EDITION1) & (s_instance(CBO2, EDITION2) & (s_patient(PUB1, CBO1) & (s_patient(PUB2, CBO2) & (s_date(PUB1, DATE1) & s_date(PUB2, DATE2))))))))))) => s_before(s_EndFn(DATE1), s_EndFn(DATE2)))))).

/*
(forall (?TEXT2 ?NUMBER ?TEXT1)
 (=>
  (and (subclass ?TEXT1 ContentBearingPhysical)
       (subclass ?TEXT1 ContentBearingObject)
       (instance ?NUMBER PositiveInteger) (instance ?TEXT2 Entity)
       (subclass ?TEXT2 ContentBearingPhysical))
  (=> (equal (EditionFn ?TEXT1 ?NUMBER) ?TEXT2)
   (subsumesContentClass ?TEXT1 ?TEXT2))))
*/
fof(a10916,axiom,! [TEXT2,NUMBER,TEXT1] : (((s_subclass(TEXT1, s_ContentBearingPhysical) & s_subclass(TEXT1, s_ContentBearingObject) & s_instance(NUMBER, s_PositiveInteger) & s_instance(TEXT2, s_Entity) & s_subclass(TEXT2, s_ContentBearingPhysical)) => ((s_EditionFn(TEXT1, NUMBER) = TEXT2) => s_subsumesContentClass(TEXT1, TEXT2))))).

/*
(instance Summary SetOrClass)
*/
fof(a10917,axiom,s_instance(s_Summary, s_SetOrClass)).

/*
(subclass Summary Text)
*/
fof(a10918,axiom,s_subclass(s_Summary, s_Text)).

/*
(forall (?TEXT)
 (exists (?TEXT2)
  (and (instance ?TEXT2 ContentBearingPhysical)
       (=> (instance ?TEXT Summary)
        (and (instance ?TEXT2 Text)
             (subsumesContentInstance ?TEXT2 ?TEXT))))))
*/
fof(a10919,axiom,! [TEXT] : (? [TEXT2] : ((s_instance(TEXT2, s_ContentBearingPhysical) & (s_instance(TEXT, s_Summary) => (s_instance(TEXT2, s_Text) & s_subsumesContentInstance(TEXT2, TEXT))))))).

/*
(instance Text SetOrClass)
*/
fof(a10920,axiom,s_instance(s_Text, s_SetOrClass)).

/*
(subclass Certificate Text)
*/
fof(a10921,axiom,s_subclass(s_Certificate, s_Text)).

/*
(forall (?DOC)
 (exists (?PROP ?NORM)
  (and (and (instance ?NORM ObjectiveNorm) (instance ?PROP Formula))
       (=> (instance ?DOC Certificate)
        (or (confersNorm ?DOC ?PROP ?NORM)
            (deprivesNorm ?DOC ?PROP ?NORM))))))
*/
fof(a10922,axiom,! [DOC] : (? [PROP,NORM] : (((s_instance(NORM, s_ObjectiveNorm) & s_instance(PROP, s_Formula)) & (s_instance(DOC, s_Certificate) => (s_confersNorm(DOC, PROP, NORM) | s_deprivesNorm(DOC, PROP, NORM))))))).

/*
(subclass FinancialInstrument Certificate)
*/
fof(a10923,axiom,s_subclass(s_FinancialInstrument, s_Certificate)).

/*
(instance Currency SetOrClass)
*/
fof(a10924,axiom,s_instance(s_Currency, s_SetOrClass)).

/*
(instance FinancialInstrument SetOrClass)
*/
fof(a10925,axiom,s_instance(s_FinancialInstrument, s_SetOrClass)).

/*
(subclass Currency FinancialInstrument)
*/
fof(a10926,axiom,s_subclass(s_Currency, s_FinancialInstrument)).

/*
(forall (?CURRENCY)
 (exists (?MEASURE)
  (and (instance ?MEASURE CurrencyMeasure)
       (=> (instance ?CURRENCY Currency)
        (monetaryValue ?CURRENCY ?MEASURE)))))
*/
fof(a10927,axiom,! [CURRENCY] : (? [MEASURE] : ((s_instance(MEASURE, s_CurrencyMeasure) & (s_instance(CURRENCY, s_Currency) => s_monetaryValue(CURRENCY, MEASURE)))))).

/*
(instance Patent SetOrClass)
*/
fof(a10928,axiom,s_instance(s_Patent, s_SetOrClass)).

/*
(instance Certificate SetOrClass)
*/
fof(a10929,axiom,s_instance(s_Certificate, s_SetOrClass)).

/*
(subclass Patent Certificate)
*/
fof(a10930,axiom,s_subclass(s_Patent, s_Certificate)).

/*
(instance Molecule SetOrClass)
*/
fof(a10931,axiom,s_instance(s_Molecule, s_SetOrClass)).

/*
(instance CompoundSubstance SetOrClass)
*/
fof(a10932,axiom,s_instance(s_CompoundSubstance, s_SetOrClass)).

/*
(subclass Molecule CompoundSubstance)
*/
fof(a10933,axiom,s_subclass(s_Molecule, s_CompoundSubstance)).

/*
(forall (?MOLE)
 (exists (?ATOM1 ?ATOM2)
  (and (and (instance ?ATOM2 Object) (instance ?ATOM1 Object))
       (=> (instance ?MOLE Molecule)
        (and (instance ?ATOM1 Atom)
             (and (instance ?ATOM2 Atom)
                  (and (part ?ATOM1 ?MOLE)
                       (and (part ?ATOM2 ?MOLE)
                            (not (equal ?ATOM1 ?ATOM2))))))))))
*/
fof(a10934,axiom,! [MOLE] : (? [ATOM1,ATOM2] : (((s_instance(ATOM2, s_Object) & s_instance(ATOM1, s_Object)) & (s_instance(MOLE, s_Molecule) => (s_instance(ATOM1, s_Atom) & (s_instance(ATOM2, s_Atom) & (s_part(ATOM1, MOLE) & (s_part(ATOM2, MOLE) & (~ (ATOM1 = ATOM2))))))))))).

/*
(instance Object SetOrClass)
*/
fof(a10935,axiom,s_instance(s_Object, s_SetOrClass)).

/*
(subclass Artifact Object)
*/
fof(a10936,axiom,s_subclass(s_Artifact, s_Object)).

/*
(forall (?ARTIFACT)
 (exists (?MAKING)
  (and (instance ?MAKING Process)
       (=> (instance ?ARTIFACT Artifact)
        (and (instance ?MAKING Making) (result ?MAKING ?ARTIFACT))))))
*/
fof(a10937,axiom,! [ARTIFACT] : (? [MAKING] : ((s_instance(MAKING, s_Process) & (s_instance(ARTIFACT, s_Artifact) => (s_instance(MAKING, s_Making) & s_result(MAKING, ARTIFACT))))))).

/*
(instance Product SetOrClass)
*/
fof(a10938,axiom,s_instance(s_Product, s_SetOrClass)).

/*
(subclass Product Artifact)
*/
fof(a10939,axiom,s_subclass(s_Product, s_Artifact)).

/*
(forall (?PRODUCT)
 (exists (?MANUFACTURE)
  (and (instance ?MANUFACTURE Process)
       (=> (instance ?PRODUCT Product)
        (and (instance ?MANUFACTURE Manufacture)
             (result ?MANUFACTURE ?PRODUCT))))))
*/
fof(a10940,axiom,! [PRODUCT] : (? [MANUFACTURE] : ((s_instance(MANUFACTURE, s_Process) & (s_instance(PRODUCT, s_Product) => (s_instance(MANUFACTURE, s_Manufacture) & s_result(MANUFACTURE, PRODUCT))))))).

/*
(instance version BinaryPredicate)
*/
fof(a10941,axiom,s_instance(s_version_m, s_BinaryPredicate)).

/*
(instance version AsymmetricRelation)
*/
fof(a10942,axiom,s_instance(s_version_m, s_AsymmetricRelation)).

/*
(instance version TransitiveRelation)
*/
fof(a10943,axiom,s_instance(s_version_m, s_TransitiveRelation)).

/*
(domainSubclass version 1 Artifact)
*/
fof(a10944,axiom,s_domainSubclass(s_version_m, 1, s_Artifact)).

/*
(domainSubclass version 2 Artifact)
*/
fof(a10945,axiom,s_domainSubclass(s_version_m, 2, s_Artifact)).

/*
(forall (?ARTIFACT2 ?ARTIFACT1)
 (=>
  (and (instance ?ARTIFACT1 SetOrClass) (subclass ?ARTIFACT1 Artifact)
       (subclass ?ARTIFACT2 Artifact) (instance ?ARTIFACT2 SetOrClass))
  (=> (version ?ARTIFACT1 ?ARTIFACT2)
   (subclass ?ARTIFACT1 ?ARTIFACT2))))
*/
fof(a10946,axiom,! [ARTIFACT2,ARTIFACT1] : (((s_instance(ARTIFACT1, s_SetOrClass) & s_subclass(ARTIFACT1, s_Artifact) & s_subclass(ARTIFACT2, s_Artifact) & s_instance(ARTIFACT2, s_SetOrClass)) => (s_version(ARTIFACT1, ARTIFACT2) => s_subclass(ARTIFACT1, ARTIFACT2))))).

/*
(subclass StationaryArtifact Artifact)
*/
fof(a10947,axiom,s_subclass(s_StationaryArtifact, s_Artifact)).

/*
(forall (?ARTIFACT)
 (exists (?PLACE)
  (forall (?P2)
   (=> (instance ?P2 Object)
    (and (instance ?PLACE Object)
         (=> (instance ?ARTIFACT StationaryArtifact)
          (and (holdsDuring (WhenFn ?ARTIFACT)
                (located ?ARTIFACT ?PLACE))
               (not (and (holdsDuring (WhenFn ?ARTIFACT)
                          (located ?ARTIFACT ?P2))
                         (not (equal ?PLACE ?P2)))))))))))
*/
%% no translation to TPTP available.

/*
(subclass Building StationaryArtifact)
*/
fof(a10948,axiom,s_subclass(s_Building, s_StationaryArtifact)).

/*
(forall (?BUILDING)
 (exists (?HUMAN)
  (exists (?ACT)
   (and (instance ?ACT Process)
        (and (instance ?HUMAN Organism)
             (=> (instance ?BUILDING Building)
              (and (instance ?HUMAN Human)
                   (or (inhabits ?HUMAN ?BUILDING)
                       (and (agent ?ACT ?HUMAN)
                            (located ?ACT ?BUILDING))))))))))
*/
fof(a10949,axiom,! [BUILDING] : (? [HUMAN] : (? [ACT] : ((s_instance(ACT, s_Process) & (s_instance(HUMAN, s_Organism) & (s_instance(BUILDING, s_Building) => (s_instance(HUMAN, s_Human) & (s_inhabits(HUMAN, BUILDING) | (s_agent(ACT, HUMAN) & s_located(ACT, BUILDING))))))))))).

/*
(instance Room SetOrClass)
*/
fof(a10950,axiom,s_instance(s_Room, s_SetOrClass)).

/*
(subclass Room StationaryArtifact)
*/
fof(a10951,axiom,s_subclass(s_Room, s_StationaryArtifact)).

/*
(disjoint Room Building)
*/
fof(a10952,axiom,s_disjoint(s_Room, s_Building)).

/*
(forall (?ROOM)
 (exists (?BUILD)
  (and (instance ?BUILD Object)
       (=> (instance ?ROOM Room)
        (and (instance ?BUILD Building) (properPart ?ROOM ?BUILD))))))
*/
fof(a10953,axiom,! [ROOM] : (? [BUILD] : ((s_instance(BUILD, s_Object) & (s_instance(ROOM, s_Room) => (s_instance(BUILD, s_Building) & s_properPart(ROOM, BUILD))))))).

/*
(subclass House ResidentialBuilding)
*/
fof(a10954,axiom,s_subclass(s_House, s_ResidentialBuilding)).

/*
(instance House SetOrClass)
*/
fof(a10955,axiom,s_instance(s_House, s_SetOrClass)).

/*
(subclass House SingleFamilyResidence)
*/
fof(a10956,axiom,s_subclass(s_House, s_SingleFamilyResidence)).

/*
(instance StationaryArtifact SetOrClass)
*/
fof(a10957,axiom,s_instance(s_StationaryArtifact, s_SetOrClass)).

/*
(subclass Residence StationaryArtifact)
*/
fof(a10958,axiom,s_subclass(s_Residence, s_StationaryArtifact)).

/*
(disjointDecomposition3 Residence PermanentResidence TemporaryResidence)
*/
fof(a10959,axiom,s_disjointDecomposition3(s_Residence, s_PermanentResidence, s_TemporaryResidence)).

/*
(forall (?RESIDENCE)
 (exists (?BUILDING)
  (and (instance ?BUILDING Object)
       (=> (instance ?RESIDENCE Residence)
        (or (instance ?RESIDENCE House)
            (and (instance ?BUILDING ResidentialBuilding)
                 (part ?RESIDENCE ?BUILDING)))))))
*/
fof(a10960,axiom,! [RESIDENCE] : (? [BUILDING] : ((s_instance(BUILDING, s_Object) & (s_instance(RESIDENCE, s_Residence) => (s_instance(RESIDENCE, s_House) | (s_instance(BUILDING, s_ResidentialBuilding) & s_part(RESIDENCE, BUILDING)))))))).

/*
(subclass PermanentResidence Residence)
*/
fof(a10961,axiom,s_subclass(s_PermanentResidence, s_Residence)).

/*
(forall (?RESIDENCE)
 (exists (?PERSON)
  (and (instance ?PERSON Human)
       (=> (instance ?RESIDENCE PermanentResidence)
        (home ?PERSON ?RESIDENCE)))))
*/
fof(a10962,axiom,! [RESIDENCE] : (? [PERSON] : ((s_instance(PERSON, s_Human) & (s_instance(RESIDENCE, s_PermanentResidence) => s_home(PERSON, RESIDENCE)))))).

/*
(instance TemporaryResidence SetOrClass)
*/
fof(a10963,axiom,s_instance(s_TemporaryResidence, s_SetOrClass)).

/*
(subclass TemporaryResidence Residence)
*/
fof(a10964,axiom,s_subclass(s_TemporaryResidence, s_Residence)).

/*
(forall (?RESIDENCE)
 (forall (?PERSON)
  (=> (instance ?PERSON Human)
   (=> (instance ?RESIDENCE TemporaryResidence)
    (not (home ?PERSON ?RESIDENCE))))))
*/
fof(a10965,axiom,! [RESIDENCE] : (! [PERSON] : ((s_instance(PERSON, s_Human) => (s_instance(RESIDENCE, s_TemporaryResidence) => (~ s_home(PERSON, RESIDENCE))))))).

/*
(instance Building SetOrClass)
*/
fof(a10966,axiom,s_instance(s_Building, s_SetOrClass)).

/*
(subclass ResidentialBuilding Building)
*/
fof(a10967,axiom,s_subclass(s_ResidentialBuilding, s_Building)).

/*
(instance ResidentialBuilding SetOrClass)
*/
fof(a10968,axiom,s_instance(s_ResidentialBuilding, s_SetOrClass)).

/*
(instance Residence SetOrClass)
*/
fof(a10969,axiom,s_instance(s_Residence, s_SetOrClass)).

/*
(subclass ResidentialBuilding Residence)
*/
fof(a10970,axiom,s_subclass(s_ResidentialBuilding, s_Residence)).

/*
(instance SingleFamilyResidence SetOrClass)
*/
fof(a10971,axiom,s_instance(s_SingleFamilyResidence, s_SetOrClass)).

/*
(instance PermanentResidence SetOrClass)
*/
fof(a10972,axiom,s_instance(s_PermanentResidence, s_SetOrClass)).

/*
(subclass SingleFamilyResidence PermanentResidence)
*/
fof(a10973,axiom,s_subclass(s_SingleFamilyResidence, s_PermanentResidence)).

/*
(forall (?RESIDENCE)
 (=> (instance ?RESIDENCE SingleFamilyResidence)
  (hasPurpose ?RESIDENCE
   (forall (?AGENT1 ?AGENT2)
    (=> (and (home ?AGENT1 ?RESIDENCE) (home ?AGENT2 ?RESIDENCE))
     (exists (?UNIT)
      (and (instance ?UNIT SocialUnit)
           (and (member ?AGENT1 ?UNIT) (member ?AGENT2 ?UNIT)))))))))
*/
%% no translation to TPTP available.

/*
(subclass ArtWork Artifact)
*/
fof(a10974,axiom,s_subclass(s_ArtWork, s_Artifact)).

/*
(forall (?AW)
 (=> (instance ?AW ArtWork)
  (hasPurpose ?AW
   (exists (?H ?P)
    (and (instance ?H Human)
         (and (instance ?P Perception)
              (and (experiencer ?P ?H) (patient ?P ?AW))))))))
*/
%% no translation to TPTP available.

/*
(forall (?AW ?H)
 (=> (instance ?H CognitiveAgent)
  (=> (instance ?AW ArtWork)
   (hasPurpose ?AW
    (exists (?P)
     (and (instance ?H Human)
          (desires ?H
           (exists (?P)
            (and (instance ?P Perception)
                 (and (experiencer ?P ?H) (patient ?P ?AW)))))))))))
*/
%% no translation to TPTP available.

/*
(instance ArtWork SetOrClass)
*/
fof(a10975,axiom,s_instance(s_ArtWork, s_SetOrClass)).

/*
(subclass RepresentationalArtWork ArtWork)
*/
fof(a10976,axiom,s_subclass(s_RepresentationalArtWork, s_ArtWork)).

/*
(instance RepresentationalArtWork SetOrClass)
*/
fof(a10977,axiom,s_instance(s_RepresentationalArtWork, s_SetOrClass)).

/*
(instance Icon SetOrClass)
*/
fof(a10978,axiom,s_instance(s_Icon, s_SetOrClass)).

/*
(subclass RepresentationalArtWork Icon)
*/
fof(a10979,axiom,s_subclass(s_RepresentationalArtWork, s_Icon)).

/*
(forall (?RA)
 (exists (?P)
  (and (instance ?P Entity)
       (=> (instance ?RA RepresentationalArtWork)
        (and (instance ?P Physical) (represents ?RA ?P))))))
*/
fof(a10980,axiom,! [RA] : (? [P] : ((s_instance(P, s_Entity) & (s_instance(RA, s_RepresentationalArtWork) => (s_instance(P, s_Physical) & s_represents(RA, P))))))).

/*
(instance Fabric SetOrClass)
*/
fof(a10981,axiom,s_instance(s_Fabric, s_SetOrClass)).

/*
(subclass Fabric Artifact)
*/
fof(a10982,axiom,s_subclass(s_Fabric, s_Artifact)).

/*
(disjoint Fabric StationaryArtifact)
*/
fof(a10983,axiom,s_disjoint(s_Fabric, s_StationaryArtifact)).

/*
(subclass WearableItem Artifact)
*/
fof(a10984,axiom,s_subclass(s_WearableItem, s_Artifact)).

/*
(forall (?WI)
 (=> (instance ?WI WearableItem)
  (hasPurpose ?WI
   (exists (?H) (and (instance ?H Human) (wears ?H ?WI))))))
*/
%% no translation to TPTP available.

/*
(instance Clothing SetOrClass)
*/
fof(a10985,axiom,s_instance(s_Clothing, s_SetOrClass)).

/*
(instance WearableItem SetOrClass)
*/
fof(a10986,axiom,s_instance(s_WearableItem, s_SetOrClass)).

/*
(subclass Clothing WearableItem)
*/
fof(a10987,axiom,s_subclass(s_Clothing, s_WearableItem)).

/*
(disjoint Clothing StationaryArtifact)
*/
fof(a10988,axiom,s_disjoint(s_Clothing, s_StationaryArtifact)).

/*
(forall (?CLOTHING)
 (exists (?FABRIC)
  (and (instance ?FABRIC Object)
       (=> (instance ?CLOTHING Clothing)
        (and (instance ?FABRIC Fabric) (part ?FABRIC ?CLOTHING))))))
*/
fof(a10989,axiom,! [CLOTHING] : (? [FABRIC] : ((s_instance(FABRIC, s_Object) & (s_instance(CLOTHING, s_Clothing) => (s_instance(FABRIC, s_Fabric) & s_part(FABRIC, CLOTHING))))))).

/*
(instance wears BinaryPredicate)
*/
fof(a10990,axiom,s_instance(s_wears_m, s_BinaryPredicate)).

/*
(forall (?WI ?AGENT)
 (=> (and (instance ?AGENT Animal) (instance ?WI WearableItem))
  (=> (wears ?AGENT ?WI) (located ?WI ?AGENT))))
*/
fof(a10991,axiom,! [WI,AGENT] : (((s_instance(AGENT, s_Animal) & s_instance(WI, s_WearableItem)) => (s_wears(AGENT, WI) => s_located(WI, AGENT))))).

/*
(forall (?P ?C ?A)
 (=>
  (and (instance ?A Animal) (instance ?C WearableItem)
       (instance ?P WearableItem))
  (=> (and (wears ?A ?C) (part ?P ?C)) (wears ?A ?P))))
*/
fof(a10992,axiom,! [P,C,A] : (((s_instance(A, s_Animal) & s_instance(C, s_WearableItem) & s_instance(P, s_WearableItem)) => ((s_wears(A, C) & s_part(P, C)) => s_wears(A, P))))).

/*
(instance Artifact SetOrClass)
*/
fof(a10993,axiom,s_instance(s_Artifact, s_SetOrClass)).

/*
(subclass Device Artifact)
*/
fof(a10994,axiom,s_subclass(s_Device, s_Artifact)).

/*
(forall (?DEVICE)
 (exists (?PROC)
  (and (subclass ?PROC Process)
       (=> (instance ?DEVICE Device)
        (capability ?PROC instrument ?DEVICE)))))
*/
fof(a10995,axiom,! [DEVICE] : (? [PROC] : ((s_subclass(PROC, s_Process) & (s_instance(DEVICE, s_Device) => s_capability(PROC, s_instrument_m, DEVICE)))))).

/*
(forall (?DEVICE)
 (exists (?PROC)
  (and (instance ?PROC SetOrClass)
       (=> (instance ?DEVICE Device)
        (hasPurpose ?DEVICE
         (exists (?INST)
          (and (instance ?INST ?PROC) (instrument ?INST ?DEVICE))))))))
*/
%% no translation to TPTP available.

/*
(instance MusicalInstrument SetOrClass)
*/
fof(a10996,axiom,s_instance(s_MusicalInstrument, s_SetOrClass)).

/*
(subclass MusicalInstrument Device)
*/
fof(a10997,axiom,s_subclass(s_MusicalInstrument, s_Device)).

/*
(forall (?INSTRUMENT)
 (=> (instance ?INSTRUMENT MusicalInstrument)
  (capability MakingMusic instrument ?INSTRUMENT)))
*/
fof(a10998,axiom,! [INSTRUMENT] : ((s_instance(INSTRUMENT, s_MusicalInstrument) => s_capability(s_MakingMusic, s_instrument_m, INSTRUMENT)))).

/*
(subclass TransportationDevice Device)
*/
fof(a10999,axiom,s_subclass(s_TransportationDevice, s_Device)).

/*
(forall (?DEVICE)
 (=> (instance ?DEVICE TransportationDevice)
  (capability Transportation instrument ?DEVICE)))
*/
fof(a11000,axiom,! [DEVICE] : ((s_instance(DEVICE, s_TransportationDevice) => s_capability(s_Transportation, s_instrument_m, DEVICE)))).

/*
(instance Vehicle SetOrClass)
*/
fof(a11001,axiom,s_instance(s_Vehicle, s_SetOrClass)).

/*
(instance TransportationDevice SetOrClass)
*/
fof(a11002,axiom,s_instance(s_TransportationDevice, s_SetOrClass)).

/*
(subclass Vehicle TransportationDevice)
*/
fof(a11003,axiom,s_subclass(s_Vehicle, s_TransportationDevice)).

/*
(forall (?FROM ?TRANSPORT ?MOVE)
 (=> (instance ?FROM Object)
  (=>
   (and (instance ?TRANSPORT Vehicle)
        (and (instance ?MOVE Translocation)
             (and (instrument ?MOVE ?TRANSPORT) (origin ?MOVE ?FROM))))
   (holdsDuring (BeginFn (WhenFn ?MOVE)) (located ?TRANSPORT ?FROM)))))
*/
%% no translation to TPTP available.

/*
(forall (?TO ?TRANSPORT ?MOVE)
 (=> (instance ?TO Object)
  (=>
   (and (instance ?TRANSPORT Vehicle)
        (and (instance ?MOVE Translocation)
             (and (instrument ?MOVE ?TRANSPORT)
                  (destination ?MOVE ?TO))))
   (holdsDuring (BeginFn (WhenFn ?MOVE)) (located ?TRANSPORT ?TO)))))
*/
%% no translation to TPTP available.

/*
(instance MeasuringDevice SetOrClass)
*/
fof(a11004,axiom,s_instance(s_MeasuringDevice, s_SetOrClass)).

/*
(subclass MeasuringDevice Device)
*/
fof(a11005,axiom,s_subclass(s_MeasuringDevice, s_Device)).

/*
(forall (?DEVICE)
 (=> (instance ?DEVICE MeasuringDevice)
  (hasPurpose ?DEVICE
   (exists (?MEASURE)
    (and (instance ?MEASURE Measuring)
         (instrument ?MEASURE ?DEVICE))))))
*/
%% no translation to TPTP available.

/*
(instance AttachingDevice SetOrClass)
*/
fof(a11006,axiom,s_instance(s_AttachingDevice, s_SetOrClass)).

/*
(subclass AttachingDevice Device)
*/
fof(a11007,axiom,s_subclass(s_AttachingDevice, s_Device)).

/*
(forall (?DEVICE)
 (exists (?ATTACH)
  (and (instance ?ATTACH Process)
       (=> (instance ?DEVICE AttachingDevice)
        (and (instance ?ATTACH Attaching)
             (instrument ?ATTACH ?DEVICE))))))
*/
fof(a11008,axiom,! [DEVICE] : (? [ATTACH] : ((s_instance(ATTACH, s_Process) & (s_instance(DEVICE, s_AttachingDevice) => (s_instance(ATTACH, s_Attaching) & s_instrument(ATTACH, DEVICE))))))).

/*
(instance Weapon SetOrClass)
*/
fof(a11009,axiom,s_instance(s_Weapon, s_SetOrClass)).

/*
(subclass Weapon Device)
*/
fof(a11010,axiom,s_subclass(s_Weapon, s_Device)).

/*
(forall (?WEAPON)
 (=> (instance ?WEAPON Weapon)
  (capability Damaging instrument ?WEAPON)))
*/
fof(a11011,axiom,! [WEAPON] : ((s_instance(WEAPON, s_Weapon) => s_capability(s_Damaging, s_instrument_m, WEAPON)))).

/*
(forall (?WEAPON)
 (=> (instance ?WEAPON Weapon)
  (hasPurpose ?WEAPON
   (exists (?D ?PATIENT)
    (and (instance ?D Damaging)
         (and (instrument ?D ?WEAPON) (patient ?D ?PATIENT)))))))
*/
%% no translation to TPTP available.

/*
(instance Machine SetOrClass)
*/
fof(a11012,axiom,s_instance(s_Machine, s_SetOrClass)).

/*
(subclass Machine Device)
*/
fof(a11013,axiom,s_subclass(s_Machine, s_Device)).

/*
(forall (?MACHINE)
 (forall (?PROC)
  (exists (?RESOURCE ?RESULT)
   (and (and (instance ?RESULT Entity) (instance ?RESOURCE Object))
        (=> (instance ?PROC Process)
         (=> (instance ?MACHINE Machine)
          (=> (instrument ?PROC ?MACHINE)
           (and (resource ?PROC ?RESOURCE)
                (result ?PROC ?RESULT)))))))))
*/
fof(a11014,axiom,! [MACHINE] : (! [PROC] : (? [RESOURCE,RESULT] : (((s_instance(RESULT, s_Entity) & s_instance(RESOURCE, s_Object)) & (s_instance(PROC, s_Process) => (s_instance(MACHINE, s_Machine) => (s_instrument(PROC, MACHINE) => (s_resource(PROC, RESOURCE) & s_result(PROC, RESULT)))))))))).

/*
(instance Device SetOrClass)
*/
fof(a11015,axiom,s_instance(s_Device, s_SetOrClass)).

/*
(subclass EngineeringComponent Device)
*/
fof(a11016,axiom,s_subclass(s_EngineeringComponent, s_Device)).

/*
(forall (?COMP)
 (exists (?DEVICE)
  (and (instance ?DEVICE CorpuscularObject)
       (=> (instance ?COMP EngineeringComponent)
        (and (instance ?DEVICE Device) (component ?COMP ?DEVICE))))))
*/
fof(a11017,axiom,! [COMP] : (? [DEVICE] : ((s_instance(DEVICE, s_CorpuscularObject) & (s_instance(COMP, s_EngineeringComponent) => (s_instance(DEVICE, s_Device) & s_component(COMP, DEVICE))))))).

/*
(forall (?MACHINE)
 (exists (?COMP1 ?COMP2)
  (and (and (instance ?COMP2 Object) (instance ?COMP1 Object))
       (=> (instance ?MACHINE Machine)
        (and (instance ?COMP1 EngineeringComponent)
             (and (instance ?COMP2 EngineeringComponent)
                  (and (not (equal ?COMP1 ?COMP2))
                       (and (part ?COMP1 ?MACHINE)
                            (part ?COMP2 ?MACHINE)))))))))
*/
fof(a11018,axiom,! [MACHINE] : (? [COMP1,COMP2] : (((s_instance(COMP2, s_Object) & s_instance(COMP1, s_Object)) & (s_instance(MACHINE, s_Machine) => (s_instance(COMP1, s_EngineeringComponent) & (s_instance(COMP2, s_EngineeringComponent) & ((~ (COMP1 = COMP2)) & (s_part(COMP1, MACHINE) & s_part(COMP2, MACHINE)))))))))).

/*
(subrelation engineeringSubcomponent properPart)
*/
fof(a11019,axiom,s_subrelation(s_engineeringSubcomponent_m, s_properPart_m)).

/*
(instance connectedEngineeringComponents SymmetricRelation)
*/
fof(a11020,axiom,s_instance(s_connectedEngineeringComponents_m, s_SymmetricRelation)).

/*
(instance connectedEngineeringComponents IrreflexiveRelation)
*/
fof(a11021,axiom,s_instance(s_connectedEngineeringComponents_m, s_IrreflexiveRelation)).

/*
(instance connectedEngineeringComponents PartialValuedRelation)
*/
fof(a11022,axiom,s_instance(s_connectedEngineeringComponents_m, s_PartialValuedRelation)).

/*
(subrelation connectedEngineeringComponents connected)
*/
fof(a11023,axiom,s_subrelation(s_connectedEngineeringComponents_m, s_connected_m)).

/*
(forall (?COMP2 ?COMP1)
 (=>
  (and (instance ?COMP1 EngineeringComponent)
       (instance ?COMP2 EngineeringComponent))
  (=> (connectedEngineeringComponents ?COMP1 ?COMP2)
   (and (not (engineeringSubcomponent ?COMP1 ?COMP2))
        (not (engineeringSubcomponent ?COMP2 ?COMP1))))))
*/
fof(a11024,axiom,! [COMP2,COMP1] : (((s_instance(COMP1, s_EngineeringComponent) & s_instance(COMP2, s_EngineeringComponent)) => (s_connectedEngineeringComponents(COMP1, COMP2) => ((~ s_engineeringSubcomponent(COMP1, COMP2)) & (~ s_engineeringSubcomponent(COMP2, COMP1))))))).

/*
(instance EngineeringConnection SetOrClass)
*/
fof(a11025,axiom,s_instance(s_EngineeringConnection, s_SetOrClass)).

/*
(instance EngineeringComponent SetOrClass)
*/
fof(a11026,axiom,s_instance(s_EngineeringComponent, s_SetOrClass)).

/*
(subclass EngineeringConnection EngineeringComponent)
*/
fof(a11027,axiom,s_subclass(s_EngineeringConnection, s_EngineeringComponent)).

/*
(forall (?CONNECTION)
 (exists (?COMP1 ?COMP2)
  (and (and (instance ?COMP2 EngineeringComponent)
            (instance ?COMP1 EngineeringComponent))
       (=> (instance ?CONNECTION EngineeringConnection)
        (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))))
*/
fof(a11028,axiom,! [CONNECTION] : (? [COMP1,COMP2] : (((s_instance(COMP2, s_EngineeringComponent) & s_instance(COMP1, s_EngineeringComponent)) & (s_instance(CONNECTION, s_EngineeringConnection) => s_connectsEngineeringComponents(CONNECTION, COMP1, COMP2)))))).

/*
(forall (?COMP2 ?COMP1)
 (=>
  (and (instance ?COMP1 EngineeringComponent)
       (instance ?COMP2 EngineeringComponent))
  (=> (connectedEngineeringComponents ?COMP1 ?COMP2)
   (not (or (instance ?COMP1 EngineeringConnection)
            (instance ?COMP2 EngineeringConnection))))))
*/
fof(a11029,axiom,! [COMP2,COMP1] : (((s_instance(COMP1, s_EngineeringComponent) & s_instance(COMP2, s_EngineeringComponent)) => (s_connectedEngineeringComponents(COMP1, COMP2) => (~ (s_instance(COMP1, s_EngineeringConnection) | s_instance(COMP2, s_EngineeringConnection))))))).

/*
(forall (?COMP2 ?COMP1)
 (forall (?CONNECTION)
  (exists (?g7325)
   (and (instance ?g7325 EngineeringConnection)
        (=> (instance ?CONNECTION EngineeringConnection)
         (=>
          (and (instance ?COMP1 EngineeringComponent)
               (instance ?COMP2 EngineeringComponent))
          (and (=> (connectedEngineeringComponents ?COMP1 ?COMP2)
                (connectsEngineeringComponents ?g7325 ?COMP1 ?COMP2))
               (=>
                (connectsEngineeringComponents ?CONNECTION ?COMP1
                 ?COMP2)
                (connectedEngineeringComponents ?COMP1 ?COMP2)))))))))
*/
fof(a11030,axiom,! [COMP2,COMP1] : (! [CONNECTION] : (? [G7325] : ((s_instance(G7325, s_EngineeringConnection) & (s_instance(CONNECTION, s_EngineeringConnection) => ((s_instance(COMP1, s_EngineeringComponent) & s_instance(COMP2, s_EngineeringComponent)) => ((s_connectedEngineeringComponents(COMP1, COMP2) => s_connectsEngineeringComponents(G7325, COMP1, COMP2)) & (s_connectsEngineeringComponents(CONNECTION, COMP1, COMP2) => s_connectedEngineeringComponents(COMP1, COMP2)))))))))).

/*
(subrelation connectsEngineeringComponents connects)
*/
fof(a11031,axiom,s_subrelation(s_connectsEngineeringComponents_m, s_connects_m)).

/*
(subclass CommercialAgent Agent)
*/
fof(a11032,axiom,s_subclass(s_CommercialAgent, s_Agent)).

/*
(instance CommercialAgent SetOrClass)
*/
fof(a11033,axiom,s_instance(s_CommercialAgent, s_SetOrClass)).

/*
(subclass Business CommercialAgent)
*/
fof(a11034,axiom,s_subclass(s_Business, s_CommercialAgent)).

/*
(subclass Business Organization)
*/
fof(a11035,axiom,s_subclass(s_Business, s_Organization)).

/*
(instance Business SetOrClass)
*/
fof(a11036,axiom,s_instance(s_Business, s_SetOrClass)).

/*
(subclass Corporation Business)
*/
fof(a11037,axiom,s_subclass(s_Corporation, s_Business)).

/*
(subclass Corporation LegalAgent)
*/
fof(a11038,axiom,s_subclass(s_Corporation, s_LegalAgent)).

/*
(instance Manufacturer SetOrClass)
*/
fof(a11039,axiom,s_instance(s_Manufacturer, s_SetOrClass)).

/*
(subclass Manufacturer Corporation)
*/
fof(a11040,axiom,s_subclass(s_Manufacturer, s_Corporation)).

/*
(forall (?ORG)
 (=> (instance ?ORG Manufacturer)
  (hasPurpose ?ORG
   (exists (?MANUFACTURE)
    (and (instance ?MANUFACTURE Manufacture)
         (and (instance ?MANUFACTURE CommercialService)
              (agent ?MANUFACTURE ?ORG)))))))
*/
%% no translation to TPTP available.

/*
(instance MercantileOrganization SetOrClass)
*/
fof(a11041,axiom,s_instance(s_MercantileOrganization, s_SetOrClass)).

/*
(instance Corporation SetOrClass)
*/
fof(a11042,axiom,s_instance(s_Corporation, s_SetOrClass)).

/*
(subclass MercantileOrganization Corporation)
*/
fof(a11043,axiom,s_subclass(s_MercantileOrganization, s_Corporation)).

/*
(forall (?ORG)
 (=> (instance ?ORG MercantileOrganization)
  (hasPurpose ?ORG
   (exists (?SELL)
    (and (instance ?SELL Selling)
         (and (instance ?SELL CommercialService)
              (agent ?SELL ?ORG)))))))
*/
%% no translation to TPTP available.

/*
(instance Collection SetOrClass)
*/
fof(a11044,axiom,s_instance(s_Collection, s_SetOrClass)).

/*
(subclass Group Collection)
*/
fof(a11045,axiom,s_subclass(s_Group, s_Collection)).

/*
(subclass Group Agent)
*/
fof(a11046,axiom,s_subclass(s_Group, s_Agent)).

/*
(forall (?GROUP ?MEMB)
 (=> (instance ?MEMB Object)
  (=> (and (instance ?GROUP Group) (member ?MEMB ?GROUP))
   (instance ?MEMB Agent))))
*/
fof(a11047,axiom,! [GROUP,MEMB] : ((s_instance(MEMB, s_Object) => ((s_instance(GROUP, s_Group) & s_member(MEMB, GROUP)) => s_instance(MEMB, s_Agent))))).

/*
(subclass GroupOfPeople Group)
*/
fof(a11048,axiom,s_subclass(s_GroupOfPeople, s_Group)).

/*
(forall (?GROUP ?MEMBER)
 (=> (instance ?MEMBER Object)
  (=> (and (instance ?GROUP GroupOfPeople) (member ?MEMBER ?GROUP))
   (instance ?MEMBER Human))))
*/
fof(a11049,axiom,! [GROUP,MEMBER] : ((s_instance(MEMBER, s_Object) => ((s_instance(GROUP, s_GroupOfPeople) & s_member(MEMBER, GROUP)) => s_instance(MEMBER, s_Human))))).

/*
(instance AgeGroup SetOrClass)
*/
fof(a11050,axiom,s_instance(s_AgeGroup, s_SetOrClass)).

/*
(subclass AgeGroup GroupOfPeople)
*/
fof(a11051,axiom,s_subclass(s_AgeGroup, s_GroupOfPeople)).

/*
(forall (?GROUP)
 (forall (?MEMB1 ?MEMB2 ?AGE1 ?AGE2)
  (=>
   (and (instance ?AGE2 TimeDuration) (instance ?AGE1 TimeDuration)
        (instance ?MEMB2 Object) (instance ?MEMB1 Object))
   (=> (instance ?GROUP AgeGroup)
    (=>
     (and (member ?MEMB1 ?GROUP)
          (and (member ?MEMB2 ?GROUP)
               (and (age ?MEMB1 ?AGE1) (age ?MEMB2 ?AGE2))))
     (equal ?AGE1 ?AGE2))))))
*/
fof(a11052,axiom,! [GROUP] : (! [MEMB1,MEMB2,AGE1,AGE2] : (((s_instance(AGE2, s_TimeDuration) & s_instance(AGE1, s_TimeDuration) & s_instance(MEMB2, s_Object) & s_instance(MEMB1, s_Object)) => (s_instance(GROUP, s_AgeGroup) => ((s_member(MEMB1, GROUP) & (s_member(MEMB2, GROUP) & (s_age(MEMB1, AGE1) & s_age(MEMB2, AGE2)))) => (AGE1 = AGE2))))))).

/*
(instance FamilyGroup SetOrClass)
*/
fof(a11053,axiom,s_instance(s_FamilyGroup, s_SetOrClass)).

/*
(subclass FamilyGroup GroupOfPeople)
*/
fof(a11054,axiom,s_subclass(s_FamilyGroup, s_GroupOfPeople)).

/*
(forall (?GROUP)
 (forall (?MEMB1 ?MEMB2)
  (=> (and (instance ?MEMB2 Organism) (instance ?MEMB1 Organism))
   (=> (instance ?GROUP FamilyGroup)
    (=> (and (member ?MEMB1 ?GROUP) (member ?MEMB2 ?GROUP))
     (familyRelation ?MEMB1 ?MEMB2))))))
*/
fof(a11055,axiom,! [GROUP] : (! [MEMB1,MEMB2] : (((s_instance(MEMB2, s_Organism) & s_instance(MEMB1, s_Organism)) => (s_instance(GROUP, s_FamilyGroup) => ((s_member(MEMB1, GROUP) & s_member(MEMB2, GROUP)) => s_familyRelation(MEMB1, MEMB2))))))).

/*
(instance SocialUnit SetOrClass)
*/
fof(a11056,axiom,s_instance(s_SocialUnit, s_SetOrClass)).

/*
(subclass SocialUnit GroupOfPeople)
*/
fof(a11057,axiom,s_subclass(s_SocialUnit, s_GroupOfPeople)).

/*
(forall (?UNIT ?MEMBER)
 (exists (?HOME)
  (and (instance ?HOME PermanentResidence)
       (=> (instance ?MEMBER Human)
        (=> (instance ?UNIT SocialUnit)
         (=> (member ?MEMBER ?UNIT) (home ?MEMBER ?HOME)))))))
*/
fof(a11058,axiom,! [UNIT,MEMBER] : (? [HOME] : ((s_instance(HOME, s_PermanentResidence) & (s_instance(MEMBER, s_Human) => (s_instance(UNIT, s_SocialUnit) => (s_member(MEMBER, UNIT) => s_home(MEMBER, HOME)))))))).

/*
(instance ImmediateFamilyFn UnaryFunction)
*/
fof(a11059,axiom,s_instance(s_ImmediateFamilyFn_m, s_UnaryFunction)).

/*
(instance ImmediateFamilyFn TotalValuedRelation)
*/
fof(a11060,axiom,s_instance(s_ImmediateFamilyFn_m, s_TotalValuedRelation)).

/*
(range ImmediateFamilyFn FamilyGroup)
*/
fof(a11061,axiom,s_range(s_ImmediateFamilyFn_m, s_FamilyGroup)).

/*
(forall (?FAMILY ?P)
 (forall (?MEMBER)
  (exists (?OTHER)
   (and (instance ?OTHER Organism)
        (=> (instance ?MEMBER Organism)
         (=> (and (instance ?P Human) (instance ?FAMILY Collection))
          (=> (equal (ImmediateFamilyFn ?P) ?FAMILY)
           (=> (member ?MEMBER ?FAMILY)
            (or (parent ?MEMBER ?OTHER) (parent ?OTHER ?MEMBER))))))))))
*/
fof(a11062,axiom,! [FAMILY,P] : (! [MEMBER] : (? [OTHER] : ((s_instance(OTHER, s_Organism) & (s_instance(MEMBER, s_Organism) => ((s_instance(P, s_Human) & s_instance(FAMILY, s_Collection)) => ((s_ImmediateFamilyFn(P) = FAMILY) => (s_member(MEMBER, FAMILY) => (s_parent(MEMBER, OTHER) | s_parent(OTHER, MEMBER))))))))))).

/*
(forall (?FAMILY ?PERSON)
 (exists (?MEMBER)
  (and (instance ?MEMBER Organism)
       (=> (and (instance ?PERSON Human) (instance ?FAMILY Collection))
        (=> (equal (ImmediateFamilyFn ?PERSON) ?FAMILY)
         (and (member ?MEMBER ?FAMILY)
              (or (parent ?MEMBER ?PERSON)
                  (parent ?PERSON ?MEMBER))))))))
*/
fof(a11063,axiom,! [FAMILY,PERSON] : (? [MEMBER] : ((s_instance(MEMBER, s_Organism) & ((s_instance(PERSON, s_Human) & s_instance(FAMILY, s_Collection)) => ((s_ImmediateFamilyFn(PERSON) = FAMILY) => (s_member(MEMBER, FAMILY) & (s_parent(MEMBER, PERSON) | s_parent(PERSON, MEMBER))))))))).

/*
(instance relative BinaryPredicate)
*/
fof(a11064,axiom,s_instance(s_relative_m, s_BinaryPredicate)).

/*
(instance relative SymmetricRelation)
*/
fof(a11065,axiom,s_instance(s_relative_m, s_SymmetricRelation)).

/*
(subrelation familyRelation relative)
*/
fof(a11066,axiom,s_subrelation(s_familyRelation_m, s_relative_m)).

/*
(subrelation spouse relative)
*/
fof(a11067,axiom,s_subrelation(s_spouse_m, s_relative_m)).

/*
(forall (?T1 ?A2 ?A1)
 (=> (instance ?T1 TimePosition)
  (=>
   (and (holdsDuring ?T1 (legalRelation ?A1 ?A2))
        (and (instance ?A1 Organism) (instance ?A2 Organism)))
   (holdsDuring ?T1 (relative ?A1 ?A2)))))
*/
%% no translation to TPTP available.

/*
(instance familyRelation BinaryPredicate)
*/
fof(a11068,axiom,s_instance(s_familyRelation_m, s_BinaryPredicate)).

/*
(forall (?ORGANISM2 ?ORGANISM1)
 (exists (?ORGANISM3)
  (and (instance ?ORGANISM3 Organism)
       (=>
        (and (instance ?ORGANISM1 Organism)
             (instance ?ORGANISM2 Organism))
        (=> (familyRelation ?ORGANISM1 ?ORGANISM2)
         (and (ancestor ?ORGANISM3 ?ORGANISM1)
              (ancestor ?ORGANISM3 ?ORGANISM2)))))))
*/
fof(a11069,axiom,! [ORGANISM2,ORGANISM1] : (? [ORGANISM3] : ((s_instance(ORGANISM3, s_Organism) & ((s_instance(ORGANISM1, s_Organism) & s_instance(ORGANISM2, s_Organism)) => (s_familyRelation(ORGANISM1, ORGANISM2) => (s_ancestor(ORGANISM3, ORGANISM1) & s_ancestor(ORGANISM3, ORGANISM2)))))))).

/*
(subrelation ancestor familyRelation)
*/
fof(a11070,axiom,s_subrelation(s_ancestor_m, s_familyRelation_m)).

/*
(instance ancestor TransitiveRelation)
*/
fof(a11071,axiom,s_instance(s_ancestor_m, s_TransitiveRelation)).

/*
(instance ancestor IrreflexiveRelation)
*/
fof(a11072,axiom,s_instance(s_ancestor_m, s_IrreflexiveRelation)).

/*
(instance ancestor TotalValuedRelation)
*/
fof(a11073,axiom,s_instance(s_ancestor_m, s_TotalValuedRelation)).

/*
(instance parent BinaryPredicate)
*/
fof(a11074,axiom,s_instance(s_parent_m, s_BinaryPredicate)).

/*
(subrelation parent familyRelation)
*/
fof(a11075,axiom,s_subrelation(s_parent_m, s_familyRelation_m)).

/*
(instance parent AsymmetricRelation)
*/
fof(a11076,axiom,s_instance(s_parent_m, s_AsymmetricRelation)).

/*
(instance IntransitiveRelation SetOrClass)
*/
fof(a11077,axiom,s_instance(s_IntransitiveRelation, s_SetOrClass)).

/*
(instance parent IntransitiveRelation)
*/
fof(a11078,axiom,s_instance(s_parent_m, s_IntransitiveRelation)).

/*
(instance parent TotalValuedRelation)
*/
fof(a11079,axiom,s_instance(s_parent_m, s_TotalValuedRelation)).

/*
(forall (?PARENT ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=> (parent ?CHILD ?PARENT) (ancestor ?CHILD ?PARENT))))
*/
fof(a11080,axiom,! [PARENT,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => (s_parent(CHILD, PARENT) => s_ancestor(CHILD, PARENT))))).

/*
(forall (?PARENT ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=> (parent ?CHILD ?PARENT)
   (before (BeginFn (WhenFn ?PARENT)) (BeginFn (WhenFn ?CHILD))))))
*/
fof(a11081,axiom,! [PARENT,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => (s_parent(CHILD, PARENT) => s_before(s_BeginFn(s_WhenFn(PARENT)), s_BeginFn(s_WhenFn(CHILD))))))).

/*
(forall (?CLASS ?PARENT ?CHILD)
 (=> (and (instance ?CLASS SetOrClass) (instance ?CHILD Organism))
  (=>
   (and (parent ?CHILD ?PARENT)
        (and (subclass ?CLASS Organism) (instance ?PARENT ?CLASS)))
   (instance ?CHILD ?CLASS))))
*/
fof(a11082,axiom,! [CLASS,PARENT,CHILD] : (((s_instance(CLASS, s_SetOrClass) & s_instance(CHILD, s_Organism)) => ((s_parent(CHILD, PARENT) & (s_subclass(CLASS, s_Organism) & s_instance(PARENT, CLASS))) => s_instance(CHILD, CLASS))))).

/*
(forall (?CHILD ?PARENT ?REP)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=>
   (and (parent ?CHILD ?PARENT)
        (and (instance ?REP SexualReproduction)
             (and (agent ?REP ?PARENT) (result ?REP ?CHILD))))
   (or (mother ?CHILD ?PARENT) (father ?CHILD ?PARENT)))))
*/
fof(a11083,axiom,! [CHILD,PARENT,REP] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => ((s_parent(CHILD, PARENT) & (s_instance(REP, s_SexualReproduction) & (s_agent(REP, PARENT) & s_result(REP, CHILD)))) => (s_mother(CHILD, PARENT) | s_father(CHILD, PARENT)))))).

/*
(forall (?ORGANISM)
 (exists (?PARENT)
  (and (instance ?PARENT Organism)
       (=> (instance ?ORGANISM Organism) (parent ?ORGANISM ?PARENT)))))
*/
fof(a11084,axiom,! [ORGANISM] : (? [PARENT] : ((s_instance(PARENT, s_Organism) & (s_instance(ORGANISM, s_Organism) => s_parent(ORGANISM, PARENT)))))).

/*
(instance mother SingleValuedRelation)
*/
fof(a11085,axiom,s_instance(s_mother_m, s_SingleValuedRelation)).

/*
(instance mother PartialValuedRelation)
*/
fof(a11086,axiom,s_instance(s_mother_m, s_PartialValuedRelation)).

/*
(subrelation mother parent)
*/
fof(a11087,axiom,s_subrelation(s_mother_m, s_parent_m)).

/*
(forall (?MOTHER ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?MOTHER Organism))
  (=> (mother ?CHILD ?MOTHER) (attribute ?MOTHER Female))))
*/
fof(a11088,axiom,! [MOTHER,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(MOTHER, s_Organism)) => (s_mother(CHILD, MOTHER) => s_attribute(MOTHER, s_Female))))).

/*
(instance father SingleValuedRelation)
*/
fof(a11089,axiom,s_instance(s_father_m, s_SingleValuedRelation)).

/*
(instance father PartialValuedRelation)
*/
fof(a11090,axiom,s_instance(s_father_m, s_PartialValuedRelation)).

/*
(subrelation father parent)
*/
fof(a11091,axiom,s_subrelation(s_father_m, s_parent_m)).

/*
(forall (?FATHER ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?FATHER Organism))
  (=> (father ?CHILD ?FATHER) (attribute ?FATHER Male))))
*/
fof(a11092,axiom,! [FATHER,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(FATHER, s_Organism)) => (s_father(CHILD, FATHER) => s_attribute(FATHER, s_Male))))).

/*
(subrelation daughter parent)
*/
fof(a11093,axiom,s_subrelation(s_daughter_m, s_parent_m)).

/*
(forall (?PARENT ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=> (daughter ?CHILD ?PARENT) (attribute ?CHILD Female))))
*/
fof(a11094,axiom,! [PARENT,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => (s_daughter(CHILD, PARENT) => s_attribute(CHILD, s_Female))))).

/*
(subrelation son parent)
*/
fof(a11095,axiom,s_subrelation(s_son_m, s_parent_m)).

/*
(forall (?PARENT ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=> (son ?CHILD ?PARENT) (attribute ?CHILD Male))))
*/
fof(a11096,axiom,! [PARENT,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => (s_son(CHILD, PARENT) => s_attribute(CHILD, s_Male))))).

/*
(instance sibling BinaryPredicate)
*/
fof(a11097,axiom,s_instance(s_sibling_m, s_BinaryPredicate)).

/*
(instance sibling PartialValuedRelation)
*/
fof(a11098,axiom,s_instance(s_sibling_m, s_PartialValuedRelation)).

/*
(subrelation sibling familyRelation)
*/
fof(a11099,axiom,s_subrelation(s_sibling_m, s_familyRelation_m)).

/*
(instance sibling SymmetricRelation)
*/
fof(a11100,axiom,s_instance(s_sibling_m, s_SymmetricRelation)).

/*
(instance sibling IrreflexiveRelation)
*/
fof(a11101,axiom,s_instance(s_sibling_m, s_IrreflexiveRelation)).

/*
(forall (?PARENT1 ?PARENT2 ?ORGANISM2 ?ORGANISM1)
 (=>
  (and (instance ?ORGANISM1 Organism) (instance ?ORGANISM2 Organism)
       (instance ?PARENT2 Organism) (instance ?PARENT1 Organism))
  (=>
   (and (parent ?ORGANISM1 ?PARENT1)
        (and (parent ?ORGANISM2 ?PARENT1)
             (and (parent ?ORGANISM1 ?PARENT2)
                  (and (parent ?ORGANISM2 ?PARENT2)
                       (and (not (equal ?ORGANISM1 ?ORGANISM2))
                            (not (equal ?PARENT1 ?PARENT2)))))))
   (sibling ?ORGANISM1 ?ORGANISM2))))
*/
fof(a11102,axiom,! [PARENT1,PARENT2,ORGANISM2,ORGANISM1] : (((s_instance(ORGANISM1, s_Organism) & s_instance(ORGANISM2, s_Organism) & s_instance(PARENT2, s_Organism) & s_instance(PARENT1, s_Organism)) => ((s_parent(ORGANISM1, PARENT1) & (s_parent(ORGANISM2, PARENT1) & (s_parent(ORGANISM1, PARENT2) & (s_parent(ORGANISM2, PARENT2) & ((~ (ORGANISM1 = ORGANISM2)) & (~ (PARENT1 = PARENT2))))))) => s_sibling(ORGANISM1, ORGANISM2))))).

/*
(forall (?PARENT ?ORG2 ?ORG1)
 (=>
  (and (instance ?ORG1 Organism) (instance ?ORG2 Organism)
       (instance ?PARENT Organism))
  (=> (and (sibling ?ORG1 ?ORG2) (parent ?ORG1 ?PARENT))
   (parent ?ORG2 ?PARENT))))
*/
fof(a11103,axiom,! [PARENT,ORG2,ORG1] : (((s_instance(ORG1, s_Organism) & s_instance(ORG2, s_Organism) & s_instance(PARENT, s_Organism)) => ((s_sibling(ORG1, ORG2) & s_parent(ORG1, PARENT)) => s_parent(ORG2, PARENT))))).

/*
(forall (?PARENT ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=> (and (parent ?CHILD ?PARENT) (attribute ?PARENT Male))
   (father ?CHILD ?PARENT))))
*/
fof(a11104,axiom,! [PARENT,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => ((s_parent(CHILD, PARENT) & s_attribute(PARENT, s_Male)) => s_father(CHILD, PARENT))))).

/*
(forall (?PARENT ?CHILD)
 (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism))
  (=> (and (parent ?CHILD ?PARENT) (attribute ?PARENT Female))
   (mother ?CHILD ?PARENT))))
*/
fof(a11105,axiom,! [PARENT,CHILD] : (((s_instance(CHILD, s_Organism) & s_instance(PARENT, s_Organism)) => ((s_parent(CHILD, PARENT) & s_attribute(PARENT, s_Female)) => s_mother(CHILD, PARENT))))).

/*
(subrelation brother sibling)
*/
fof(a11106,axiom,s_subrelation(s_brother_m, s_sibling_m)).

/*
(instance brother IrreflexiveRelation)
*/
fof(a11107,axiom,s_instance(s_brother_m, s_IrreflexiveRelation)).

/*
(instance brother TransitiveRelation)
*/
fof(a11108,axiom,s_instance(s_brother_m, s_TransitiveRelation)).

/*
(instance brother PartialValuedRelation)
*/
fof(a11109,axiom,s_instance(s_brother_m, s_PartialValuedRelation)).

/*
(subrelation sister sibling)
*/
fof(a11110,axiom,s_subrelation(s_sister_m, s_sibling_m)).

/*
(instance sister IrreflexiveRelation)
*/
fof(a11111,axiom,s_instance(s_sister_m, s_IrreflexiveRelation)).

/*
(instance TransitiveRelation SetOrClass)
*/
fof(a11112,axiom,s_instance(s_TransitiveRelation, s_SetOrClass)).

/*
(instance sister TransitiveRelation)
*/
fof(a11113,axiom,s_instance(s_sister_m, s_TransitiveRelation)).

/*
(instance sister PartialValuedRelation)
*/
fof(a11114,axiom,s_instance(s_sister_m, s_PartialValuedRelation)).

/*
(instance legalRelation BinaryPredicate)
*/
fof(a11115,axiom,s_instance(s_legalRelation_m, s_BinaryPredicate)).

/*
(instance legalRelation SymmetricRelation)
*/
fof(a11116,axiom,s_instance(s_legalRelation_m, s_SymmetricRelation)).

/*
(forall (?AGENT2 ?AGENT1)
 (exists (?DECLARE ?OBLIGATION)
  (and (and (instance ?OBLIGATION Formula) (instance ?DECLARE Entity))
       (=> (and (instance ?AGENT1 Human) (instance ?AGENT2 Human))
        (=> (legalRelation ?AGENT1 ?AGENT2)
         (and (instance ?DECLARE Declaring)
              (and (confersObligation ?OBLIGATION ?DECLARE ?AGENT1)
                   (confersObligation ?OBLIGATION ?DECLARE
                    ?AGENT2))))))))
*/
fof(a11117,axiom,! [AGENT2,AGENT1] : (? [DECLARE,OBLIGATION] : (((s_instance(OBLIGATION, s_Formula) & s_instance(DECLARE, s_Entity)) & ((s_instance(AGENT1, s_Human) & s_instance(AGENT2, s_Human)) => (s_legalRelation(AGENT1, AGENT2) => (s_instance(DECLARE, s_Declaring) & (s_confersObligation(OBLIGATION, DECLARE, AGENT1) & s_confersObligation(OBLIGATION, DECLARE, AGENT2))))))))).

/*
(instance acquaintance BinaryPredicate)
*/
fof(a11118,axiom,s_instance(s_acquaintance_m, s_BinaryPredicate)).

/*
(instance mutualAcquaintance BinaryPredicate)
*/
fof(a11119,axiom,s_instance(s_mutualAcquaintance_m, s_BinaryPredicate)).

/*
(instance mutualAcquaintance SymmetricRelation)
*/
fof(a11120,axiom,s_instance(s_mutualAcquaintance_m, s_SymmetricRelation)).

/*
(subrelation mutualAcquaintance acquaintance)
*/
fof(a11121,axiom,s_subrelation(s_mutualAcquaintance_m, s_acquaintance_m)).

/*
(subrelation spouse mutualAcquaintance)
*/
fof(a11122,axiom,s_subrelation(s_spouse_m, s_mutualAcquaintance_m)).

/*
(subrelation spouse legalRelation)
*/
fof(a11123,axiom,s_subrelation(s_spouse_m, s_legalRelation_m)).

/*
(instance spouse IrreflexiveRelation)
*/
fof(a11124,axiom,s_instance(s_spouse_m, s_IrreflexiveRelation)).

/*
(instance spouse SymmetricRelation)
*/
fof(a11125,axiom,s_instance(s_spouse_m, s_SymmetricRelation)).

/*
(instance spouse PartialValuedRelation)
*/
fof(a11126,axiom,s_instance(s_spouse_m, s_PartialValuedRelation)).

/*
(subrelation husband spouse)
*/
fof(a11127,axiom,s_subrelation(s_husband_m, s_spouse_m)).

/*
(instance husband AsymmetricRelation)
*/
fof(a11128,axiom,s_instance(s_husband_m, s_AsymmetricRelation)).

/*
(instance husband IrreflexiveRelation)
*/
fof(a11129,axiom,s_instance(s_husband_m, s_IrreflexiveRelation)).

/*
(instance husband PartialValuedRelation)
*/
fof(a11130,axiom,s_instance(s_husband_m, s_PartialValuedRelation)).

/*
(inverse husband wife)
*/
fof(a11131,axiom,s_inverse(s_husband_m, s_wife_m)).

/*
(subrelation wife spouse)
*/
fof(a11132,axiom,s_subrelation(s_wife_m, s_spouse_m)).

/*
(instance wife AsymmetricRelation)
*/
fof(a11133,axiom,s_instance(s_wife_m, s_AsymmetricRelation)).

/*
(instance wife IrreflexiveRelation)
*/
fof(a11134,axiom,s_instance(s_wife_m, s_IrreflexiveRelation)).

/*
(instance EthnicGroup SetOrClass)
*/
fof(a11135,axiom,s_instance(s_EthnicGroup, s_SetOrClass)).

/*
(subclass EthnicGroup GroupOfPeople)
*/
fof(a11136,axiom,s_subclass(s_EthnicGroup, s_GroupOfPeople)).

/*
(instance GroupOfPeople SetOrClass)
*/
fof(a11137,axiom,s_instance(s_GroupOfPeople, s_SetOrClass)).

/*
(subclass BeliefGroup GroupOfPeople)
*/
fof(a11138,axiom,s_subclass(s_BeliefGroup, s_GroupOfPeople)).

/*
(forall (?GROUP)
 (exists (?BELIEF)
  (forall (?MEMB)
   (=> (instance ?MEMB CognitiveAgent)
    (and (instance ?BELIEF Formula)
         (=> (instance ?GROUP BeliefGroup)
          (=> (member ?MEMB ?GROUP) (believes ?MEMB ?BELIEF))))))))
*/
fof(a11139,axiom,! [GROUP] : (? [BELIEF] : (! [MEMB] : ((s_instance(MEMB, s_CognitiveAgent) => (s_instance(BELIEF, s_Formula) & (s_instance(GROUP, s_BeliefGroup) => (s_member(MEMB, GROUP) => s_believes(MEMB, BELIEF))))))))).

/*
(instance Group SetOrClass)
*/
fof(a11140,axiom,s_instance(s_Group, s_SetOrClass)).

/*
(subclass Organization Group)
*/
fof(a11141,axiom,s_subclass(s_Organization, s_Group)).

/*
(instance Agent SetOrClass)
*/
fof(a11142,axiom,s_instance(s_Agent, s_SetOrClass)).

/*
(subclass Organization Agent)
*/
fof(a11143,axiom,s_subclass(s_Organization, s_Agent)).

/*
(forall (?ORG)
 (exists (?PURP)
  (forall (?MEMBER)
   (=> (instance ?MEMBER Object)
    (and (instance ?PURP Formula)
         (=> (instance ?ORG Organization)
          (=> (member ?MEMBER ?ORG) (hasPurpose ?MEMBER ?PURP))))))))
*/
fof(a11144,axiom,! [ORG] : (? [PURP] : (! [MEMBER] : ((s_instance(MEMBER, s_Object) => (s_instance(PURP, s_Formula) & (s_instance(ORG, s_Organization) => (s_member(MEMBER, ORG) => s_hasPurpose(MEMBER, PURP))))))))).

/*
(forall (?ORG ?AGENT)
 (=> (instance ?AGENT Object)
  (=> (and (instance ?ORG Organization) (member ?AGENT ?ORG))
   (instance ?AGENT Agent))))
*/
fof(a11145,axiom,! [ORG,AGENT] : ((s_instance(AGENT, s_Object) => ((s_instance(ORG, s_Organization) & s_member(AGENT, ORG)) => s_instance(AGENT, s_Agent))))).

/*
(instance employs BinaryPredicate)
*/
fof(a11146,axiom,s_instance(s_employs_m, s_BinaryPredicate)).

/*
(subclass PoliticalOrganization Organization)
*/
fof(a11147,axiom,s_subclass(s_PoliticalOrganization, s_Organization)).

/*
(forall (?POL)
 (exists (?PROC)
  (and (instance ?PROC Process)
       (=> (instance ?POL PoliticalOrganization)
        (and (instance ?PROC PoliticalProcess) (agent ?PROC ?POL))))))
*/
fof(a11148,axiom,! [POL] : (? [PROC] : ((s_instance(PROC, s_Process) & (s_instance(POL, s_PoliticalOrganization) => (s_instance(PROC, s_PoliticalProcess) & s_agent(PROC, POL))))))).

/*
(instance PoliticalOrganization SetOrClass)
*/
fof(a11149,axiom,s_instance(s_PoliticalOrganization, s_SetOrClass)).

/*
(subclass MilitaryForce PoliticalOrganization)
*/
fof(a11150,axiom,s_subclass(s_MilitaryForce, s_PoliticalOrganization)).

/*
(forall (?ORG)
 (=> (instance ?ORG MilitaryForce)
  (capability ViolentContest agent ?ORG)))
*/
fof(a11151,axiom,! [ORG] : ((s_instance(ORG, s_MilitaryForce) => s_capability(s_ViolentContest, s_agent_m, ORG)))).

/*
(subclass MilitaryOrganization MilitaryForce)
*/
fof(a11152,axiom,s_subclass(s_MilitaryOrganization, s_MilitaryForce)).

/*
(instance MilitaryOrganization SetOrClass)
*/
fof(a11153,axiom,s_instance(s_MilitaryOrganization, s_SetOrClass)).

/*
(subclass MilitaryOrganization GovernmentOrganization)
*/
fof(a11154,axiom,s_subclass(s_MilitaryOrganization, s_GovernmentOrganization)).

/*
(instance ParamilitaryOrganization SetOrClass)
*/
fof(a11155,axiom,s_instance(s_ParamilitaryOrganization, s_SetOrClass)).

/*
(instance MilitaryForce SetOrClass)
*/
fof(a11156,axiom,s_instance(s_MilitaryForce, s_SetOrClass)).

/*
(subclass ParamilitaryOrganization MilitaryForce)
*/
fof(a11157,axiom,s_subclass(s_ParamilitaryOrganization, s_MilitaryForce)).

/*
(disjoint ParamilitaryOrganization GovernmentOrganization)
*/
fof(a11158,axiom,s_disjoint(s_ParamilitaryOrganization, s_GovernmentOrganization)).

/*
(subclass GovernmentOrganization Organization)
*/
fof(a11159,axiom,s_subclass(s_GovernmentOrganization, s_Organization)).

/*
(forall (?ORG)
 (forall (?GOV)
  (exists (?g7349)
   (and (=> (instance ?ORG GovernmentOrganization)
         (and (instance ?g7349 Government)
              (subOrganization ?ORG ?g7349)))
        (=>
         (and (instance ?GOV Government) (subOrganization ?ORG ?GOV))
         (instance ?ORG GovernmentOrganization))))))
*/
fof(a11160,axiom,! [ORG] : (! [GOV] : (? [G7349] : (((s_instance(ORG, s_GovernmentOrganization) => (s_instance(G7349, s_Government) & s_subOrganization(ORG, G7349))) & ((s_instance(GOV, s_Government) & s_subOrganization(ORG, GOV)) => s_instance(ORG, s_GovernmentOrganization))))))).

/*
(forall (?GOV ?ORG)
 (=> (instance ?ORG Organization)
  (=>
   (and (subOrganization ?ORG ?GOV)
        (instance ?GOV GovernmentOrganization))
   (instance ?ORG GovernmentOrganization))))
*/
fof(a11161,axiom,! [GOV,ORG] : ((s_instance(ORG, s_Organization) => ((s_subOrganization(ORG, GOV) & s_instance(GOV, s_GovernmentOrganization)) => s_instance(ORG, s_GovernmentOrganization))))).

/*
(subclass Government GovernmentOrganization)
*/
fof(a11162,axiom,s_subclass(s_Government, s_GovernmentOrganization)).

/*
(instance Government SetOrClass)
*/
fof(a11163,axiom,s_instance(s_Government, s_SetOrClass)).

/*
(instance LegalAgent SetOrClass)
*/
fof(a11164,axiom,s_instance(s_LegalAgent, s_SetOrClass)).

/*
(subclass Government LegalAgent)
*/
fof(a11165,axiom,s_subclass(s_Government, s_LegalAgent)).

/*
(instance GovernmentFn UnaryFunction)
*/
fof(a11166,axiom,s_instance(s_GovernmentFn_m, s_UnaryFunction)).

/*
(instance GovernmentFn PartialValuedRelation)
*/
fof(a11167,axiom,s_instance(s_GovernmentFn_m, s_PartialValuedRelation)).

/*
(range GovernmentFn Government)
*/
fof(a11168,axiom,s_range(s_GovernmentFn_m, s_Government)).

/*
(instance PoliceOrganization SetOrClass)
*/
fof(a11169,axiom,s_instance(s_PoliceOrganization, s_SetOrClass)).

/*
(instance GovernmentOrganization SetOrClass)
*/
fof(a11170,axiom,s_instance(s_GovernmentOrganization, s_SetOrClass)).

/*
(subclass PoliceOrganization GovernmentOrganization)
*/
fof(a11171,axiom,s_subclass(s_PoliceOrganization, s_GovernmentOrganization)).

/*
(instance JudicialOrganization SetOrClass)
*/
fof(a11172,axiom,s_instance(s_JudicialOrganization, s_SetOrClass)).

/*
(subclass JudicialOrganization Organization)
*/
fof(a11173,axiom,s_subclass(s_JudicialOrganization, s_Organization)).

/*
(instance EducationalOrganization SetOrClass)
*/
fof(a11174,axiom,s_instance(s_EducationalOrganization, s_SetOrClass)).

/*
(subclass EducationalOrganization Organization)
*/
fof(a11175,axiom,s_subclass(s_EducationalOrganization, s_Organization)).

/*
(instance Organization SetOrClass)
*/
fof(a11176,axiom,s_instance(s_Organization, s_SetOrClass)).

/*
(subclass ReligiousOrganization Organization)
*/
fof(a11177,axiom,s_subclass(s_ReligiousOrganization, s_Organization)).

/*
(instance ReligiousOrganization SetOrClass)
*/
fof(a11178,axiom,s_instance(s_ReligiousOrganization, s_SetOrClass)).

/*
(instance BeliefGroup SetOrClass)
*/
fof(a11179,axiom,s_instance(s_BeliefGroup, s_SetOrClass)).

/*
(subclass ReligiousOrganization BeliefGroup)
*/
fof(a11180,axiom,s_subclass(s_ReligiousOrganization, s_BeliefGroup)).

/*
(subrelation subOrganization subCollection)
*/
fof(a11181,axiom,s_subrelation(s_subOrganization_m, s_subCollection_m)).

/*
(instance subOrganization PartialOrderingRelation)
*/
fof(a11182,axiom,s_instance(s_subOrganization_m, s_PartialOrderingRelation)).

/*
(instance citizen BinaryPredicate)
*/
fof(a11183,axiom,s_instance(s_citizen_m, s_BinaryPredicate)).

/*
(instance citizen AsymmetricRelation)
*/
fof(a11184,axiom,s_instance(s_citizen_m, s_AsymmetricRelation)).

/*
(instance FieldOfStudy SetOrClass)
*/
fof(a11185,axiom,s_instance(s_FieldOfStudy, s_SetOrClass)).

/*
(subclass FieldOfStudy Proposition)
*/
fof(a11186,axiom,s_subclass(s_FieldOfStudy, s_Proposition)).

/*
(subclass Procedure Proposition)
*/
fof(a11187,axiom,s_subclass(s_Procedure, s_Proposition)).

/*
(instance ComputerProgram SetOrClass)
*/
fof(a11188,axiom,s_instance(s_ComputerProgram, s_SetOrClass)).

/*
(subclass ComputerProgram Procedure)
*/
fof(a11189,axiom,s_subclass(s_ComputerProgram, s_Procedure)).

/*
(instance ComputerProgramming SetOrClass)
*/
fof(a11190,axiom,s_instance(s_ComputerProgramming, s_SetOrClass)).

/*
(instance ContentDevelopment SetOrClass)
*/
fof(a11191,axiom,s_instance(s_ContentDevelopment, s_SetOrClass)).

/*
(subclass ComputerProgramming ContentDevelopment)
*/
fof(a11192,axiom,s_subclass(s_ComputerProgramming, s_ContentDevelopment)).

/*
(forall (?CP)
 (exists (?C)
  (and (instance ?C Entity)
       (=> (instance ?CP ComputerProgramming)
        (and (instance ?C ComputerProgram) (result ?CP ?C))))))
*/
fof(a11193,axiom,! [CP] : (? [C] : ((s_instance(C, s_Entity) & (s_instance(CP, s_ComputerProgramming) => (s_instance(C, s_ComputerProgram) & s_result(CP, C))))))).

/*
(instance Plan SetOrClass)
*/
fof(a11194,axiom,s_instance(s_Plan, s_SetOrClass)).

/*
(instance Procedure SetOrClass)
*/
fof(a11195,axiom,s_instance(s_Procedure, s_SetOrClass)).

/*
(subclass Plan Procedure)
*/
fof(a11196,axiom,s_subclass(s_Plan, s_Procedure)).

/*
(forall (?PLAN ?OBJ)
 (exists (?PLANNING)
  (and (instance ?PLANNING Process)
       (=>
        (and (instance ?PLAN Plan)
             (and (instance ?OBJ ContentBearingObject)
                  (containsInformation ?OBJ ?PLAN)))
        (and (instance ?PLANNING Planning) (result ?PLANNING ?OBJ))))))
*/
fof(a11197,axiom,! [PLAN,OBJ] : (? [PLANNING] : ((s_instance(PLANNING, s_Process) & ((s_instance(PLAN, s_Plan) & (s_instance(OBJ, s_ContentBearingObject) & s_containsInformation(OBJ, PLAN))) => (s_instance(PLANNING, s_Planning) & s_result(PLANNING, OBJ))))))).

/*
(instance Proposition SetOrClass)
*/
fof(a11198,axiom,s_instance(s_Proposition, s_SetOrClass)).

/*
(subclass Argument Proposition)
*/
fof(a11199,axiom,s_subclass(s_Argument, s_Proposition)).

/*
(partition3 Argument DeductiveArgument InductiveArgument)
*/
fof(a11200,axiom,s_partition3(s_Argument, s_DeductiveArgument, s_InductiveArgument)).

/*
(forall (?REASON)
 (exists (?ARGUMENT)
  (and (instance ?ARGUMENT Proposition)
       (=> (instance ?REASON Reasoning)
        (and (instance ?ARGUMENT Argument)
             (realization ?REASON ?ARGUMENT))))))
*/
fof(a11201,axiom,! [REASON] : (? [ARGUMENT] : ((s_instance(ARGUMENT, s_Proposition) & (s_instance(REASON, s_Reasoning) => (s_instance(ARGUMENT, s_Argument) & s_realization(REASON, ARGUMENT))))))).

/*
(forall (?ARGUMENT)
 (exists (?PREMISES ?CONCLUSION)
  (and (and (instance ?CONCLUSION Argument)
            (instance ?PREMISES Entity))
       (=> (instance ?ARGUMENT Argument)
        (and (equal (PremisesFn ?ARGUMENT) ?PREMISES)
             (conclusion ?CONCLUSION ?ARGUMENT))))))
*/
fof(a11202,axiom,! [ARGUMENT] : (? [PREMISES,CONCLUSION] : (((s_instance(CONCLUSION, s_Argument) & s_instance(PREMISES, s_Entity)) & (s_instance(ARGUMENT, s_Argument) => ((s_PremisesFn(ARGUMENT) = PREMISES) & s_conclusion(CONCLUSION, ARGUMENT))))))).

/*
(subclass DeductiveArgument Argument)
*/
fof(a11203,axiom,s_subclass(s_DeductiveArgument, s_Argument)).

/*
(partition3 DeductiveArgument ValidDeductiveArgument
 InvalidDeductiveArgument)
*/
fof(a11204,axiom,s_partition3(s_DeductiveArgument, s_ValidDeductiveArgument, s_InvalidDeductiveArgument)).

/*
(instance ValidDeductiveArgument SetOrClass)
*/
fof(a11205,axiom,s_instance(s_ValidDeductiveArgument, s_SetOrClass)).

/*
(subclass ValidDeductiveArgument DeductiveArgument)
*/
fof(a11206,axiom,s_subclass(s_ValidDeductiveArgument, s_DeductiveArgument)).

/*
(forall (?CONCLUSION ?ARGUMENT ?PREMISES)
 (exists (?FORMULA1 ?FORMULA2)
  (and (and (instance ?FORMULA2 ContentBearingPhysical)
            (instance ?FORMULA1 ContentBearingPhysical))
       (=>
        (and (instance ?CONCLUSION Formula)
             (instance ?CONCLUSION Argument)
             (instance ?PREMISES Proposition)
             (instance ?PREMISES Formula))
        (=>
         (and (instance ?ARGUMENT ValidDeductiveArgument)
              (and (equal ?PREMISES (PremisesFn ?ARGUMENT))
                   (conclusion ?CONCLUSION ?ARGUMENT)))
         (and (containsInformation ?FORMULA1 ?PREMISES)
              (and (containsInformation ?FORMULA2 ?CONCLUSION)
                   (entails ?PREMISES ?CONCLUSION))))))))
*/
fof(a11207,axiom,! [CONCLUSION,ARGUMENT,PREMISES] : (? [FORMULA1,FORMULA2] : (((s_instance(FORMULA2, s_ContentBearingPhysical) & s_instance(FORMULA1, s_ContentBearingPhysical)) & ((s_instance(CONCLUSION, s_Formula) & s_instance(CONCLUSION, s_Argument) & s_instance(PREMISES, s_Proposition) & s_instance(PREMISES, s_Formula)) => ((s_instance(ARGUMENT, s_ValidDeductiveArgument) & ((PREMISES = s_PremisesFn(ARGUMENT)) & s_conclusion(CONCLUSION, ARGUMENT))) => (s_containsInformation(FORMULA1, PREMISES) & (s_containsInformation(FORMULA2, CONCLUSION) & s_entails(PREMISES, CONCLUSION))))))))).

/*
(instance InvalidDeductiveArgument SetOrClass)
*/
fof(a11208,axiom,s_instance(s_InvalidDeductiveArgument, s_SetOrClass)).

/*
(subclass InvalidDeductiveArgument DeductiveArgument)
*/
fof(a11209,axiom,s_subclass(s_InvalidDeductiveArgument, s_DeductiveArgument)).

/*
(instance Explanation SetOrClass)
*/
fof(a11210,axiom,s_instance(s_Explanation, s_SetOrClass)).

/*
(instance DeductiveArgument SetOrClass)
*/
fof(a11211,axiom,s_instance(s_DeductiveArgument, s_SetOrClass)).

/*
(subclass Explanation DeductiveArgument)
*/
fof(a11212,axiom,s_subclass(s_Explanation, s_DeductiveArgument)).

/*
(instance InductiveArgument SetOrClass)
*/
fof(a11213,axiom,s_instance(s_InductiveArgument, s_SetOrClass)).

/*
(instance Argument SetOrClass)
*/
fof(a11214,axiom,s_instance(s_Argument, s_SetOrClass)).

/*
(subclass InductiveArgument Argument)
*/
fof(a11215,axiom,s_subclass(s_InductiveArgument, s_Argument)).

/*
(instance premise BinaryPredicate)
*/
fof(a11216,axiom,s_instance(s_premise_m, s_BinaryPredicate)).

/*
(instance premise TotalValuedRelation)
*/
fof(a11217,axiom,s_instance(s_premise_m, s_TotalValuedRelation)).

/*
(instance PremisesFn UnaryFunction)
*/
fof(a11218,axiom,s_instance(s_PremisesFn_m, s_UnaryFunction)).

/*
(instance PremisesFn TotalValuedRelation)
*/
fof(a11219,axiom,s_instance(s_PremisesFn_m, s_TotalValuedRelation)).

/*
(range PremisesFn Proposition)
*/
fof(a11220,axiom,s_range(s_PremisesFn_m, s_Proposition)).

/*
(forall (?ARGUMENT ?PREMISES ?PROPOSITION)
 (=>
  (and (instance ?PREMISES Proposition)
       (instance ?PROPOSITION Proposition))
  (=>
   (and (instance ?ARGUMENT Argument)
        (equal ?PREMISES (PremisesFn ?ARGUMENT)))
   (<=> (subProposition ?PROPOSITION ?PREMISES)
    (premise ?ARGUMENT ?PROPOSITION)))))
*/
fof(a11221,axiom,! [ARGUMENT,PREMISES,PROPOSITION] : (((s_instance(PREMISES, s_Proposition) & s_instance(PROPOSITION, s_Proposition)) => ((s_instance(ARGUMENT, s_Argument) & (PREMISES = s_PremisesFn(ARGUMENT))) => (s_subProposition(PROPOSITION, PREMISES) <=> s_premise(ARGUMENT, PROPOSITION)))))).

/*
(instance conclusion BinaryPredicate)
*/
fof(a11222,axiom,s_instance(s_conclusion_m, s_BinaryPredicate)).

/*
(instance conclusion SingleValuedRelation)
*/
fof(a11223,axiom,s_instance(s_conclusion_m, s_SingleValuedRelation)).

/*
(instance conclusion TotalValuedRelation)
*/
fof(a11224,axiom,s_instance(s_conclusion_m, s_TotalValuedRelation)).

/*
(instance consistent BinaryPredicate)
*/
fof(a11225,axiom,s_instance(s_consistent_m, s_BinaryPredicate)).

/*
(instance SymmetricRelation SetOrClass)
*/
fof(a11226,axiom,s_instance(s_SymmetricRelation, s_SetOrClass)).

/*
(instance consistent SymmetricRelation)
*/
fof(a11227,axiom,s_instance(s_consistent_m, s_SymmetricRelation)).

/*
(instance SpatialRelation SetOrClass)
*/
fof(a11228,axiom,s_instance(s_SpatialRelation, s_SetOrClass)).

/*
(instance orientation SpatialRelation)
*/
fof(a11229,axiom,s_instance(s_orientation_m, s_SpatialRelation)).

/*
(instance orientation TernaryPredicate)
*/
fof(a11230,axiom,s_instance(s_orientation_m, s_TernaryPredicate)).

/*
(forall (?ATTR2 ?ROW0 ?OBJ1 ?ATTR1 ?OBJ2)
 (=>
  (and (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute)
       (instance ?OBJ1 Object) (instance ?ATTR2 PositionalAttribute))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute1 ?ROW0)
             (and (inList ?ATTR1 (ListFn1 ?ROW0))
                  (and (inList ?ATTR2 (ListFn1 ?ROW0))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11231,axiom,! [ATTR2,ROW0,OBJ1,ATTR1,OBJ2] : (((s_instance(OBJ2, s_Object) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(ATTR2, s_PositionalAttribute)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute1(ROW0) & (s_inList(ATTR1, s_ListFn1(ROW0)) & (s_inList(ATTR2, s_ListFn1(ROW0)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(forall (?OBJ2 ?OBJ1 ?ATTR1 ?ATTR2 ?ROW1 ?ROW0)
 (=>
  (and (instance ?ROW0 Attribute) (instance ?ROW1 Attribute)
       (instance ?ATTR2 PositionalAttribute)
       (instance ?ATTR1 PositionalAttribute) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute2 ?ROW0 ?ROW1)
             (and (inList ?ATTR1 (ListFn2 ?ROW0 ?ROW1))
                  (and (inList ?ATTR2 (ListFn2 ?ROW0 ?ROW1))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11232,axiom,! [OBJ2,OBJ1,ATTR1,ATTR2,ROW1,ROW0] : (((s_instance(ROW0, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ATTR2, s_PositionalAttribute) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute2(ROW0, ROW1) & (s_inList(ATTR1, s_ListFn2(ROW0, ROW1)) & (s_inList(ATTR2, s_ListFn2(ROW0, ROW1)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(forall (?OBJ2 ?OBJ1 ?ATTR1 ?ATTR2 ?ROW0 ?ROW2 ?ROW1)
 (=>
  (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW0 Attribute) (instance ?ATTR2 PositionalAttribute)
       (instance ?ATTR1 PositionalAttribute) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute3 ?ROW0 ?ROW1 ?ROW2)
             (and (inList ?ATTR1 (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                  (and (inList ?ATTR2 (ListFn3 ?ROW0 ?ROW1 ?ROW2))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11233,axiom,! [OBJ2,OBJ1,ATTR1,ATTR2,ROW0,ROW2,ROW1] : (((s_instance(ROW1, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR2, s_PositionalAttribute) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute3(ROW0, ROW1, ROW2) & (s_inList(ATTR1, s_ListFn3(ROW0, ROW1, ROW2)) & (s_inList(ATTR2, s_ListFn3(ROW0, ROW1, ROW2)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(forall (?OBJ2 ?OBJ1 ?ATTR1 ?ATTR2 ?ROW0 ?ROW1 ?ROW3 ?ROW2)
 (=>
  (and (instance ?ROW2 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ATTR2 PositionalAttribute)
       (instance ?ATTR1 PositionalAttribute) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute4 ?ROW0 ?ROW1 ?ROW2 ?ROW3)
             (and (inList ?ATTR1 (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                  (and (inList ?ATTR2
                        (ListFn4 ?ROW0 ?ROW1 ?ROW2 ?ROW3))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11234,axiom,! [OBJ2,OBJ1,ATTR1,ATTR2,ROW0,ROW1,ROW3,ROW2] : (((s_instance(ROW2, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR2, s_PositionalAttribute) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute4(ROW0, ROW1, ROW2, ROW3) & (s_inList(ATTR1, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) & (s_inList(ATTR2, s_ListFn4(ROW0, ROW1, ROW2, ROW3)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(forall (?OBJ2 ?OBJ1 ?ATTR1 ?ATTR2 ?ROW0 ?ROW1 ?ROW2 ?ROW4 ?ROW3)
 (=>
  (and (instance ?ROW3 Attribute) (instance ?ROW4 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ATTR2 PositionalAttribute)
       (instance ?ATTR1 PositionalAttribute) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4)
             (and (inList ?ATTR1
                   (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                  (and (inList ?ATTR2
                        (ListFn5 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11235,axiom,! [OBJ2,OBJ1,ATTR1,ATTR2,ROW0,ROW1,ROW2,ROW4,ROW3] : (((s_instance(ROW3, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR2, s_PositionalAttribute) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute5(ROW0, ROW1, ROW2, ROW3, ROW4) & (s_inList(ATTR1, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) & (s_inList(ATTR2, s_ListFn5(ROW0, ROW1, ROW2, ROW3, ROW4)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(forall (?OBJ2 ?OBJ1 ?ATTR1 ?ATTR2 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW5 ?ROW4)
 (=>
  (and (instance ?ROW4 Attribute) (instance ?ROW5 Attribute)
       (instance ?ROW3 Attribute) (instance ?ROW2 Attribute)
       (instance ?ROW1 Attribute) (instance ?ROW0 Attribute)
       (instance ?ATTR2 PositionalAttribute)
       (instance ?ATTR1 PositionalAttribute) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)
             (and (inList ?ATTR1
                   (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                  (and (inList ?ATTR2
                        (ListFn6 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11236,axiom,! [OBJ2,OBJ1,ATTR1,ATTR2,ROW0,ROW1,ROW2,ROW3,ROW5,ROW4] : (((s_instance(ROW4, s_Attribute) & s_instance(ROW5, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR2, s_PositionalAttribute) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5) & (s_inList(ATTR1, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) & (s_inList(ATTR2, s_ListFn6(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(forall
 (?OBJ2 ?OBJ1 ?ATTR1 ?ATTR2 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW6 ?ROW5)
 (=>
  (and (instance ?ROW5 Attribute) (instance ?ROW6 Attribute)
       (instance ?ROW4 Attribute) (instance ?ROW3 Attribute)
       (instance ?ROW2 Attribute) (instance ?ROW1 Attribute)
       (instance ?ROW0 Attribute) (instance ?ATTR2 PositionalAttribute)
       (instance ?ATTR1 PositionalAttribute) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (orientation ?OBJ1 ?OBJ2 ?ATTR1)
        (and (contraryAttribute7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
              ?ROW6)
             (and (inList ?ATTR1
                   (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6))
                  (and (inList ?ATTR2
                        (ListFn7 ?ROW0 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5
                         ?ROW6))
                       (not (equal ?ATTR1 ?ATTR2))))))
   (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))
*/
fof(a11237,axiom,! [OBJ2,OBJ1,ATTR1,ATTR2,ROW0,ROW1,ROW2,ROW3,ROW4,ROW6,ROW5] : (((s_instance(ROW5, s_Attribute) & s_instance(ROW6, s_Attribute) & s_instance(ROW4, s_Attribute) & s_instance(ROW3, s_Attribute) & s_instance(ROW2, s_Attribute) & s_instance(ROW1, s_Attribute) & s_instance(ROW0, s_Attribute) & s_instance(ATTR2, s_PositionalAttribute) & s_instance(ATTR1, s_PositionalAttribute) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_orientation(OBJ1, OBJ2, ATTR1) & (s_contraryAttribute7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6) & (s_inList(ATTR1, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) & (s_inList(ATTR2, s_ListFn7(ROW0, ROW1, ROW2, ROW3, ROW4, ROW5, ROW6)) & (~ (ATTR1 = ATTR2)))))) => (~ s_orientation(OBJ1, OBJ2, ATTR2)))))).

/*
(instance CaseRole SetOrClass)
*/
fof(a11238,axiom,s_instance(s_CaseRole, s_SetOrClass)).

/*
(instance direction CaseRole)
*/
fof(a11239,axiom,s_instance(s_direction_m, s_CaseRole)).

/*
(instance direction PartialValuedRelation)
*/
fof(a11240,axiom,s_instance(s_direction_m, s_PartialValuedRelation)).

/*
(subrelation direction involvedInEvent)
*/
fof(a11241,axiom,s_subrelation(s_direction_m, s_involvedInEvent_m)).

/*
(forall (?TIME ?ATTR1 ?PROC)
 (forall (?ATTR2)
  (=> (instance ?ATTR2 PositionalAttribute)
   (=>
    (and (instance ?PROC Process) (instance ?ATTR1 PositionalAttribute)
         (instance ?TIME TimePosition))
    (=> (holdsDuring ?TIME (direction ?PROC ?ATTR1))
     (=> (holdsDuring ?TIME (direction ?PROC ?ATTR2))
      (equal ?ATTR2 ?ATTR1)))))))
*/
%% no translation to TPTP available.

/*
(instance faces BinaryPredicate)
*/
fof(a11242,axiom,s_instance(s_faces_m, s_BinaryPredicate)).

/*
(forall (?TIME ?ATTR1 ?PROC)
 (forall (?ATTR2)
  (=> (instance ?ATTR2 DirectionalAttribute)
   (=>
    (and (instance ?PROC Object) (instance ?ATTR1 DirectionalAttribute)
         (instance ?TIME TimePosition))
    (=> (holdsDuring ?TIME (faces ?PROC ?ATTR1))
     (=> (holdsDuring ?TIME (faces ?PROC ?ATTR2))
      (equal ?ATTR2 ?ATTR1)))))))
*/
%% no translation to TPTP available.

/*
(subclass TruthValue RelationalAttribute)
*/
fof(a11243,axiom,s_subclass(s_TruthValue, s_RelationalAttribute)).

/*
(forall (?VALUE ?ITEM)
 (=> (instance ?ITEM Entity)
  (=> (and (property ?ITEM ?VALUE) (instance ?VALUE TruthValue))
   (or (instance ?ITEM Sentence) (instance ?ITEM Proposition)))))
*/
fof(a11244,axiom,! [VALUE,ITEM] : ((s_instance(ITEM, s_Entity) => ((s_property(ITEM, VALUE) & s_instance(VALUE, s_TruthValue)) => (s_instance(ITEM, s_Sentence) | s_instance(ITEM, s_Proposition)))))).

/*
(instance True TruthValue)
*/
%% no translation to TPTP available.

/*
(instance TruthValue SetOrClass)
*/
fof(a11245,axiom,s_instance(s_TruthValue, s_SetOrClass)).

/*
(instance False TruthValue)
*/
%% no translation to TPTP available.

/*
(contraryAttribute2 False True)
*/
%% no translation to TPTP available.

/*
(subrelation truth property)
*/
fof(a11246,axiom,s_subrelation(s_truth_m, s_property_m)).

/*
(subclass PositionalAttribute RelationalAttribute)
*/
fof(a11247,axiom,s_subclass(s_PositionalAttribute, s_RelationalAttribute)).

/*
(subclass DirectionalAttribute PositionalAttribute)
*/
fof(a11248,axiom,s_subclass(s_DirectionalAttribute, s_PositionalAttribute)).

/*
(forall (?OBJ3 ?OBJ1 ?DIRECT ?OBJ2)
 (=>
  (and (instance ?OBJ3 Object) (instance ?OBJ1 Object)
       (instance ?OBJ2 Object))
  (=>
   (and (instance ?DIRECT DirectionalAttribute)
        (and (orientation ?OBJ1 ?OBJ2 ?DIRECT)
             (orientation ?OBJ2 ?OBJ3 ?DIRECT)))
   (between ?OBJ1 ?OBJ2 ?OBJ3))))
*/
fof(a11249,axiom,! [OBJ3,OBJ1,DIRECT,OBJ2] : (((s_instance(OBJ3, s_Object) & s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => ((s_instance(DIRECT, s_DirectionalAttribute) & (s_orientation(OBJ1, OBJ2, DIRECT) & s_orientation(OBJ2, OBJ3, DIRECT))) => s_between(OBJ1, OBJ2, OBJ3))))).

/*
(instance North DirectionalAttribute)
*/
fof(a11250,axiom,s_instance(s_North, s_DirectionalAttribute)).

/*
(contraryAttribute4 North South East West)
*/
fof(a11251,axiom,s_contraryAttribute4(s_North, s_South, s_East, s_West)).

/*
(instance South DirectionalAttribute)
*/
fof(a11252,axiom,s_instance(s_South, s_DirectionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 North)
   (orientation ?OBJ2 ?OBJ1 South))))
*/
fof(a11253,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_North) <=> s_orientation(OBJ2, OBJ1, s_South))))).

/*
(instance East DirectionalAttribute)
*/
fof(a11254,axiom,s_instance(s_East, s_DirectionalAttribute)).

/*
(instance DirectionalAttribute SetOrClass)
*/
fof(a11255,axiom,s_instance(s_DirectionalAttribute, s_SetOrClass)).

/*
(instance West DirectionalAttribute)
*/
fof(a11256,axiom,s_instance(s_West, s_DirectionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 East) (orientation ?OBJ2 ?OBJ1 West))))
*/
fof(a11257,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_East) <=> s_orientation(OBJ2, OBJ1, s_West))))).

/*
(instance Vertical PositionalAttribute)
*/
fof(a11258,axiom,s_instance(s_Vertical, s_PositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 Vertical)
   (orientation ?OBJ2 ?OBJ1 Vertical))))
*/
fof(a11259,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Vertical) <=> s_orientation(OBJ2, OBJ1, s_Vertical))))).

/*
(instance Horizontal PositionalAttribute)
*/
fof(a11260,axiom,s_instance(s_Horizontal, s_PositionalAttribute)).

/*
(contraryAttribute2 Horizontal Vertical)
*/
fof(a11261,axiom,s_contraryAttribute2(s_Horizontal, s_Vertical)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 Horizontal)
   (orientation ?OBJ2 ?OBJ1 Horizontal))))
*/
fof(a11262,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Horizontal) <=> s_orientation(OBJ2, OBJ1, s_Horizontal))))).

/*
(subclass SymmetricPositionalAttribute PositionalAttribute)
*/
fof(a11263,axiom,s_subclass(s_SymmetricPositionalAttribute, s_PositionalAttribute)).

/*
(forall (?O1 ?P ?O2)
 (=> (and (instance ?O1 Object) (instance ?O2 Object))
  (=>
   (and (instance ?P SymmetricPositionalAttribute)
        (orientation ?O1 ?O2 ?P))
   (orientation ?O2 ?O1 ?P))))
*/
fof(a11264,axiom,! [O1,P,O2] : (((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => ((s_instance(P, s_SymmetricPositionalAttribute) & s_orientation(O1, O2, P)) => s_orientation(O2, O1, P))))).

/*
(subclass AntiSymmetricPositionalAttribute PositionalAttribute)
*/
fof(a11265,axiom,s_subclass(s_AntiSymmetricPositionalAttribute, s_PositionalAttribute)).

/*
(forall (?O1 ?P ?O2)
 (=> (and (instance ?O1 Object) (instance ?O2 Object))
  (=>
   (and (instance ?P AntiSymmetricPositionalAttribute)
        (orientation ?O1 ?O2 ?P))
   (not (orientation ?O2 ?O1 ?P)))))
*/
fof(a11266,axiom,! [O1,P,O2] : (((s_instance(O1, s_Object) & s_instance(O2, s_Object)) => ((s_instance(P, s_AntiSymmetricPositionalAttribute) & s_orientation(O1, O2, P)) => (~ s_orientation(O2, O1, P)))))).

/*
(instance Above PositionalAttribute)
*/
fof(a11267,axiom,s_instance(s_Above, s_PositionalAttribute)).

/*
(instance Above AntiSymmetricPositionalAttribute)
*/
fof(a11268,axiom,s_instance(s_Above, s_AntiSymmetricPositionalAttribute)).

/*
(contraryAttribute2 Above Below)
*/
fof(a11269,axiom,s_contraryAttribute2(s_Above, s_Below)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (orientation ?OBJ1 ?OBJ2 Above) (not (connected ?OBJ1 ?OBJ2)))))
*/
fof(a11270,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Above) => (~ s_connected(OBJ1, OBJ2)))))).

/*
(instance Below PositionalAttribute)
*/
fof(a11271,axiom,s_instance(s_Below, s_PositionalAttribute)).

/*
(instance Below AntiSymmetricPositionalAttribute)
*/
fof(a11272,axiom,s_instance(s_Below, s_AntiSymmetricPositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 Below)
   (or (orientation ?OBJ2 ?OBJ1 On) (orientation ?OBJ2 ?OBJ1 Above)))))
*/
fof(a11273,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Below) <=> (s_orientation(OBJ2, OBJ1, s_On) | s_orientation(OBJ2, OBJ1, s_Above)))))).

/*
(instance Adjacent SymmetricPositionalAttribute)
*/
fof(a11274,axiom,s_instance(s_Adjacent, s_SymmetricPositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 Adjacent)
   (or (orientation ?OBJ1 ?OBJ2 Near) (connected ?OBJ1 ?OBJ2)))))
*/
fof(a11275,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Adjacent) <=> (s_orientation(OBJ1, OBJ2, s_Near) | s_connected(OBJ1, OBJ2)))))).

/*
(instance Left PositionalAttribute)
*/
fof(a11276,axiom,s_instance(s_Left, s_PositionalAttribute)).

/*
(instance Left AntiSymmetricPositionalAttribute)
*/
fof(a11277,axiom,s_instance(s_Left, s_AntiSymmetricPositionalAttribute)).

/*
(instance PositionalAttribute SetOrClass)
*/
fof(a11278,axiom,s_instance(s_PositionalAttribute, s_SetOrClass)).

/*
(instance Right PositionalAttribute)
*/
fof(a11279,axiom,s_instance(s_Right, s_PositionalAttribute)).

/*
(instance Right AntiSymmetricPositionalAttribute)
*/
fof(a11280,axiom,s_instance(s_Right, s_AntiSymmetricPositionalAttribute)).

/*
(contraryAttribute2 Right Left)
*/
fof(a11281,axiom,s_contraryAttribute2(s_Right, s_Left)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (<=> (orientation ?OBJ1 ?OBJ2 Right) (orientation ?OBJ2 ?OBJ1 Left))))
*/
fof(a11282,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Right) <=> s_orientation(OBJ2, OBJ1, s_Left))))).

/*
(instance SymmetricPositionalAttribute SetOrClass)
*/
fof(a11283,axiom,s_instance(s_SymmetricPositionalAttribute, s_SetOrClass)).

/*
(instance Near SymmetricPositionalAttribute)
*/
fof(a11284,axiom,s_instance(s_Near, s_SymmetricPositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (orientation ?OBJ1 ?OBJ2 Near) (not (connected ?OBJ1 ?OBJ2)))))
*/
fof(a11285,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Near) => (~ s_connected(OBJ1, OBJ2)))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (orientation ?OBJ1 ?OBJ2 Near) (orientation ?OBJ2 ?OBJ1 Near))))
*/
fof(a11286,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_Near) => s_orientation(OBJ2, OBJ1, s_Near))))).

/*
(instance AntiSymmetricPositionalAttribute SetOrClass)
*/
fof(a11287,axiom,s_instance(s_AntiSymmetricPositionalAttribute, s_SetOrClass)).

/*
(instance On AntiSymmetricPositionalAttribute)
*/
fof(a11288,axiom,s_instance(s_On, s_AntiSymmetricPositionalAttribute)).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (orientation ?OBJ1 ?OBJ2 On) (connected ?OBJ1 ?OBJ2))))
*/
fof(a11289,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_On) => s_connected(OBJ1, OBJ2))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (orientation ?OBJ1 ?OBJ2 On) (located ?OBJ1 ?OBJ2))))
*/
fof(a11290,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_On) => s_located(OBJ1, OBJ2))))).

/*
(forall (?OBJ2 ?OBJ1)
 (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object))
  (=> (orientation ?OBJ1 ?OBJ2 On) (not (orientation ?OBJ2 ?OBJ1 On)))))
*/
fof(a11291,axiom,! [OBJ2,OBJ1] : (((s_instance(OBJ1, s_Object) & s_instance(OBJ2, s_Object)) => (s_orientation(OBJ1, OBJ2, s_On) => (~ s_orientation(OBJ2, OBJ1, s_On)))))).

/*
(subclass TimeZone RelationalAttribute)
*/
fof(a11292,axiom,s_subclass(s_TimeZone, s_RelationalAttribute)).

/*
(instance CoordinatedUniversalTimeZone TimeZone)
*/
fof(a11293,axiom,s_instance(s_CoordinatedUniversalTimeZone, s_TimeZone)).

/*
(instance PacificTimeZone TimeZone)
*/
fof(a11294,axiom,s_instance(s_PacificTimeZone, s_TimeZone)).

/*
(forall (?TIME2 ?TIME1)
 (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 Entity))
  (=> (equal (RelativeTimeFn ?TIME1 PacificTimeZone) ?TIME2)
   (equal ?TIME2 (AdditionFn ?TIME1 8)))))
*/
fof(a11295,axiom,! [TIME2,TIME1] : (((s_instance(TIME1, s_TimePosition) & s_instance(TIME2, s_Entity)) => ((s_RelativeTimeFn(TIME1, s_PacificTimeZone) = TIME2) => (TIME2 = plus(TIME1, 8)))))).

/*
(instance MountainTimeZone TimeZone)
*/
fof(a11296,axiom,s_instance(s_MountainTimeZone, s_TimeZone)).

/*
(forall (?TIME2 ?TIME1)
 (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 Entity))
  (=> (equal (RelativeTimeFn ?TIME1 MountainTimeZone) ?TIME2)
   (equal ?TIME2 (AdditionFn ?TIME1 7)))))
*/
fof(a11297,axiom,! [TIME2,TIME1] : (((s_instance(TIME1, s_TimePosition) & s_instance(TIME2, s_Entity)) => ((s_RelativeTimeFn(TIME1, s_MountainTimeZone) = TIME2) => (TIME2 = plus(TIME1, 7)))))).

/*
(instance CentralTimeZone TimeZone)
*/
fof(a11298,axiom,s_instance(s_CentralTimeZone, s_TimeZone)).

/*
(forall (?TIME2 ?TIME1)
 (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 Entity))
  (=> (equal (RelativeTimeFn ?TIME1 CentralTimeZone) ?TIME2)
   (equal ?TIME2 (AdditionFn ?TIME1 6)))))
*/
fof(a11299,axiom,! [TIME2,TIME1] : (((s_instance(TIME1, s_TimePosition) & s_instance(TIME2, s_Entity)) => ((s_RelativeTimeFn(TIME1, s_CentralTimeZone) = TIME2) => (TIME2 = plus(TIME1, 6)))))).

/*
(instance TimeZone SetOrClass)
*/
fof(a11300,axiom,s_instance(s_TimeZone, s_SetOrClass)).

/*
(instance EasternTimeZone TimeZone)
*/
fof(a11301,axiom,s_instance(s_EasternTimeZone, s_TimeZone)).

/*
(forall (?TIME2 ?TIME1)
 (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 Entity))
  (=> (equal (RelativeTimeFn ?TIME1 EasternTimeZone) ?TIME2)
   (equal ?TIME2 (AdditionFn ?TIME1 5)))))
*/
fof(a11302,axiom,! [TIME2,TIME1] : (((s_instance(TIME1, s_TimePosition) & s_instance(TIME2, s_Entity)) => ((s_RelativeTimeFn(TIME1, s_EasternTimeZone) = TIME2) => (TIME2 = plus(TIME1, 5)))))).

/*
(instance BinaryFunction SetOrClass)
*/
fof(a11303,axiom,s_instance(s_BinaryFunction, s_SetOrClass)).

/*
(instance RelativeTimeFn BinaryFunction)
*/
fof(a11304,axiom,s_instance(s_RelativeTimeFn_m, s_BinaryFunction)).

/*
(instance TemporalRelation SetOrClass)
*/
fof(a11305,axiom,s_instance(s_TemporalRelation, s_SetOrClass)).

/*
(instance RelativeTimeFn TemporalRelation)
*/
fof(a11306,axiom,s_instance(s_RelativeTimeFn_m, s_TemporalRelation)).

/*
(instance RelativeTimeFn TotalValuedRelation)
*/
fof(a11307,axiom,s_instance(s_RelativeTimeFn_m, s_TotalValuedRelation)).

/*
(range RelativeTimeFn TimePosition)
*/
fof(a11308,axiom,s_range(s_RelativeTimeFn_m, s_TimePosition)).

/*
(subclass SocialRole RelationalAttribute)
*/
fof(a11309,axiom,s_subclass(s_SocialRole, s_RelationalAttribute)).

/*
(forall (?ATTRIBUTE ?PERSON)
 (=> (instance ?PERSON Object)
  (=>
   (and (attribute ?PERSON ?ATTRIBUTE)
        (instance ?ATTRIBUTE SocialRole))
   (instance ?PERSON Human))))
*/
fof(a11310,axiom,! [ATTRIBUTE,PERSON] : ((s_instance(PERSON, s_Object) => ((s_attribute(PERSON, ATTRIBUTE) & s_instance(ATTRIBUTE, s_SocialRole)) => s_instance(PERSON, s_Human))))).

/*
(instance Unemployed SocialRole)
*/
fof(a11311,axiom,s_instance(s_Unemployed, s_SocialRole)).

/*
(forall (?PERSON)
 (forall (?ORG)
  (exists (?g7363)
   (and (instance ?g7363 Organization)
        (=> (instance ?ORG Organization)
         (and (=>
               (and (instance ?PERSON Human)
                    (not (employs ?g7363 ?PERSON)))
               (attribute ?PERSON Unemployed))
              (=> (attribute ?PERSON Unemployed)
               (and (instance ?PERSON Human)
                    (not (employs ?ORG ?PERSON))))))))))
*/
fof(a11312,axiom,! [PERSON] : (! [ORG] : (? [G7363] : ((s_instance(G7363, s_Organization) & (s_instance(ORG, s_Organization) => (((s_instance(PERSON, s_Human) & (~ s_employs(G7363, PERSON))) => s_attribute(PERSON, s_Unemployed)) & (s_attribute(PERSON, s_Unemployed) => (s_instance(PERSON, s_Human) & (~ s_employs(ORG, PERSON))))))))))).

/*
(instance Position SetOrClass)
*/
fof(a11313,axiom,s_instance(s_Position, s_SetOrClass)).

/*
(instance SocialRole SetOrClass)
*/
fof(a11314,axiom,s_instance(s_SocialRole, s_SetOrClass)).

/*
(subclass Position SocialRole)
*/
fof(a11315,axiom,s_subclass(s_Position, s_SocialRole)).

/*
(instance occupiesPosition TernaryPredicate)
*/
fof(a11316,axiom,s_instance(s_occupiesPosition_m, s_TernaryPredicate)).

/*
(forall (?AGENT ?ORG ?POSITION)
 (=>
  (and (instance ?POSITION Position) (instance ?ORG Organization)
       (instance ?AGENT Human))
  (=> (occupiesPosition ?AGENT ?POSITION ?ORG)
   (attribute ?AGENT ?POSITION))))
*/
fof(a11317,axiom,! [AGENT,ORG,POSITION] : (((s_instance(POSITION, s_Position) & s_instance(ORG, s_Organization) & s_instance(AGENT, s_Human)) => (s_occupiesPosition(AGENT, POSITION, ORG) => s_attribute(AGENT, POSITION))))).

/*
(forall (?PERSON ?ORG)
 (exists (?POSITION)
  (and (instance ?POSITION Position)
       (=> (and (instance ?ORG Organization) (instance ?PERSON Human))
        (=> (employs ?ORG ?PERSON)
         (occupiesPosition ?PERSON ?POSITION ?ORG))))))
*/
fof(a11318,axiom,! [PERSON,ORG] : (? [POSITION] : ((s_instance(POSITION, s_Position) & ((s_instance(ORG, s_Organization) & s_instance(PERSON, s_Human)) => (s_employs(ORG, PERSON) => s_occupiesPosition(PERSON, POSITION, ORG))))))).

/*
(forall (?PERSON ?ORGANIZATION ?POSITION)
 (=>
  (and (instance ?POSITION Position)
       (instance ?ORGANIZATION Organization) (instance ?PERSON Human))
  (=> (occupiesPosition ?PERSON ?POSITION ?ORGANIZATION)
   (member ?PERSON ?ORGANIZATION))))
*/
fof(a11319,axiom,! [PERSON,ORGANIZATION,POSITION] : (((s_instance(POSITION, s_Position) & s_instance(ORGANIZATION, s_Organization) & s_instance(PERSON, s_Human)) => (s_occupiesPosition(PERSON, POSITION, ORGANIZATION) => s_member(PERSON, ORGANIZATION))))).

/*
(subclass NormativeAttribute RelationalAttribute)
*/
fof(a11320,axiom,s_subclass(s_NormativeAttribute, s_RelationalAttribute)).

/*
(instance modalAttribute BinaryPredicate)
*/
fof(a11321,axiom,s_instance(s_modalAttribute_m, s_BinaryPredicate)).

/*
(instance modalAttribute AsymmetricRelation)
*/
fof(a11322,axiom,s_instance(s_modalAttribute_m, s_AsymmetricRelation)).

/*
(instance IrreflexiveRelation SetOrClass)
*/
fof(a11323,axiom,s_instance(s_IrreflexiveRelation, s_SetOrClass)).

/*
(instance modalAttribute IrreflexiveRelation)
*/
fof(a11324,axiom,s_instance(s_modalAttribute_m, s_IrreflexiveRelation)).

/*
(instance PartialValuedRelation SetOrClass)
*/
fof(a11325,axiom,s_instance(s_PartialValuedRelation, s_SetOrClass)).

/*
(instance modalAttribute PartialValuedRelation)
*/
fof(a11326,axiom,s_instance(s_modalAttribute_m, s_PartialValuedRelation)).

/*
(subrelation modalAttribute property)
*/
fof(a11327,axiom,s_subrelation(s_modalAttribute_m, s_property_m)).

/*
(forall (?FORMULA2 ?PROP ?FORMULA1)
 (=>
  (and (instance ?FORMULA1 Formula) (instance ?PROP NormativeAttribute)
       (instance ?FORMULA2 Formula))
  (=>
   (and (modalAttribute ?FORMULA1 ?PROP) (entails ?FORMULA1 ?FORMULA2))
   (modalAttribute ?FORMULA2 ?PROP))))
*/
fof(a11328,axiom,! [FORMULA2,PROP,FORMULA1] : (((s_instance(FORMULA1, s_Formula) & s_instance(PROP, s_NormativeAttribute) & s_instance(FORMULA2, s_Formula)) => ((s_modalAttribute(FORMULA1, PROP) & s_entails(FORMULA1, FORMULA2)) => s_modalAttribute(FORMULA2, PROP))))).

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (=> (modalAttribute ?FORMULA Permission)
   (modalAttribute ?FORMULA Possibility))))
*/
fof(a11329,axiom,! [FORMULA] : ((s_instance(FORMULA, s_Formula) => (s_modalAttribute(FORMULA, s_Permission) => s_modalAttribute(FORMULA, s_Possibility))))).

/*
(subclass SubjectiveAssessmentAttribute NormativeAttribute)
*/
fof(a11330,axiom,s_subclass(s_SubjectiveAssessmentAttribute, s_NormativeAttribute)).

/*
(disjoint SubjectiveAssessmentAttribute ObjectiveNorm)
*/
fof(a11331,axiom,s_disjoint(s_SubjectiveAssessmentAttribute, s_ObjectiveNorm)).

/*
(forall (?ATR ?OBJ)
 (exists (?TIME ?JUDGE ?AGENT)
  (and (and (instance ?AGENT CognitiveAgent) (instance ?JUDGE Process)
            (instance ?TIME TimePosition))
       (=> (instance ?OBJ Object)
        (=>
         (and (attribute ?OBJ ?ATR)
              (instance ?ATR SubjectiveAssessmentAttribute))
         (and (instance ?JUDGE Judging)
              (and (agent ?JUDGE ?AGENT)
                   (and (patient ?JUDGE ?OBJ)
                        (and (patient ?JUDGE (attribute ?OBJ ?ATR))
                             (holdsDuring ?TIME
                              (believes ?AGENT
                               (property ?OBJ ?ATR))))))))))))
*/
%% no translation to TPTP available.

/*
(instance SubjectiveStrongPositiveAttribute SetOrClass)
*/
fof(a11332,axiom,s_instance(s_SubjectiveStrongPositiveAttribute, s_SetOrClass)).

/*
(subclass SubjectiveStrongPositiveAttribute
 SubjectiveAssessmentAttribute)
*/
fof(a11333,axiom,s_subclass(s_SubjectiveStrongPositiveAttribute, s_SubjectiveAssessmentAttribute)).

/*
(instance SubjectiveWeakPositiveAttribute SetOrClass)
*/
fof(a11334,axiom,s_instance(s_SubjectiveWeakPositiveAttribute, s_SetOrClass)).

/*
(subclass SubjectiveWeakPositiveAttribute SubjectiveAssessmentAttribute)
*/
fof(a11335,axiom,s_subclass(s_SubjectiveWeakPositiveAttribute, s_SubjectiveAssessmentAttribute)).

/*
(instance SubjectiveStrongNegativeAttribute SetOrClass)
*/
fof(a11336,axiom,s_instance(s_SubjectiveStrongNegativeAttribute, s_SetOrClass)).

/*
(subclass SubjectiveStrongNegativeAttribute
 SubjectiveAssessmentAttribute)
*/
fof(a11337,axiom,s_subclass(s_SubjectiveStrongNegativeAttribute, s_SubjectiveAssessmentAttribute)).

/*
(instance SubjectiveWeakNegativeAttribute SetOrClass)
*/
fof(a11338,axiom,s_instance(s_SubjectiveWeakNegativeAttribute, s_SetOrClass)).

/*
(instance SubjectiveAssessmentAttribute SetOrClass)
*/
fof(a11339,axiom,s_instance(s_SubjectiveAssessmentAttribute, s_SetOrClass)).

/*
(subclass SubjectiveWeakNegativeAttribute SubjectiveAssessmentAttribute)
*/
fof(a11340,axiom,s_subclass(s_SubjectiveWeakNegativeAttribute, s_SubjectiveAssessmentAttribute)).

/*
(instance NormativeAttribute SetOrClass)
*/
fof(a11341,axiom,s_instance(s_NormativeAttribute, s_SetOrClass)).

/*
(subclass ObjectiveNorm NormativeAttribute)
*/
fof(a11342,axiom,s_subclass(s_ObjectiveNorm, s_NormativeAttribute)).

/*
(instance ContestAttribute SetOrClass)
*/
fof(a11343,axiom,s_instance(s_ContestAttribute, s_SetOrClass)).

/*
(subclass ContestAttribute ObjectiveNorm)
*/
fof(a11344,axiom,s_subclass(s_ContestAttribute, s_ObjectiveNorm)).

/*
(forall (?ATTR ?THING)
 (exists (?CONTEST)
  (and (instance ?CONTEST Process)
       (=> (and (instance ?THING Agent) (instance ?THING Process))
        (=>
         (and (property ?THING ?ATTR)
              (instance ?ATTR ContestAttribute))
         (and (instance ?CONTEST Contest)
              (or (agent ?CONTEST ?THING)
                  (or (patient ?CONTEST ?THING)
                      (subProcess ?THING ?CONTEST)))))))))
*/
fof(a11345,axiom,! [ATTR,THING] : (? [CONTEST] : ((s_instance(CONTEST, s_Process) & ((s_instance(THING, s_Agent) & s_instance(THING, s_Process)) => ((s_property(THING, ATTR) & s_instance(ATTR, s_ContestAttribute)) => (s_instance(CONTEST, s_Contest) & (s_agent(CONTEST, THING) | (s_patient(CONTEST, THING) | s_subProcess(THING, CONTEST)))))))))).

/*
(subclass AlethicAttribute ObjectiveNorm)
*/
fof(a11346,axiom,s_subclass(s_AlethicAttribute, s_ObjectiveNorm)).

/*
(instance Possibility AlethicAttribute)
*/
fof(a11347,axiom,s_instance(s_Possibility, s_AlethicAttribute)).

/*
(instance AlethicAttribute SetOrClass)
*/
fof(a11348,axiom,s_instance(s_AlethicAttribute, s_SetOrClass)).

/*
(instance Necessity AlethicAttribute)
*/
fof(a11349,axiom,s_instance(s_Necessity, s_AlethicAttribute)).

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (<=> (modalAttribute ?FORMULA Necessity)
   (not (modalAttribute (not ?FORMULA) Possibility)))))
*/
%% no translation to TPTP available.

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (=> (modalAttribute ?FORMULA Necessity)
   (modalAttribute ?FORMULA Possibility))))
*/
fof(a11350,axiom,! [FORMULA] : ((s_instance(FORMULA, s_Formula) => (s_modalAttribute(FORMULA, s_Necessity) => s_modalAttribute(FORMULA, s_Possibility))))).

/*
(instance holdsRight BinaryPredicate)
*/
fof(a11351,axiom,s_instance(s_holdsRight_m, s_BinaryPredicate)).

/*
(instance holdsRight AsymmetricRelation)
*/
fof(a11352,axiom,s_instance(s_holdsRight_m, s_AsymmetricRelation)).

/*
(instance confersRight TernaryPredicate)
*/
fof(a11353,axiom,s_instance(s_confersRight_m, s_TernaryPredicate)).

/*
(forall (?FORMULA ?AGENT2 ?AGENT1)
 (=>
  (and (instance ?AGENT1 Entity) (instance ?AGENT2 CognitiveAgent)
       (instance ?FORMULA Formula))
  (=> (confersRight ?FORMULA ?AGENT1 ?AGENT2)
   (holdsRight ?FORMULA ?AGENT2))))
*/
fof(a11354,axiom,! [FORMULA,AGENT2,AGENT1] : (((s_instance(AGENT1, s_Entity) & s_instance(AGENT2, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => (s_confersRight(FORMULA, AGENT1, AGENT2) => s_holdsRight(FORMULA, AGENT2))))).

/*
(instance holdsObligation BinaryPredicate)
*/
fof(a11355,axiom,s_instance(s_holdsObligation_m, s_BinaryPredicate)).

/*
(instance AsymmetricRelation SetOrClass)
*/
fof(a11356,axiom,s_instance(s_AsymmetricRelation, s_SetOrClass)).

/*
(instance holdsObligation AsymmetricRelation)
*/
fof(a11357,axiom,s_instance(s_holdsObligation_m, s_AsymmetricRelation)).

/*
(instance confersObligation TernaryPredicate)
*/
fof(a11358,axiom,s_instance(s_confersObligation_m, s_TernaryPredicate)).

/*
(forall (?FORMULA ?AGENT2 ?AGENT1)
 (=>
  (and (instance ?AGENT1 Entity) (instance ?AGENT2 CognitiveAgent)
       (instance ?FORMULA Formula))
  (=> (confersObligation ?FORMULA ?AGENT1 ?AGENT2)
   (holdsObligation ?FORMULA ?AGENT2))))
*/
fof(a11359,axiom,! [FORMULA,AGENT2,AGENT1] : (((s_instance(AGENT1, s_Entity) & s_instance(AGENT2, s_CognitiveAgent) & s_instance(FORMULA, s_Formula)) => (s_confersObligation(FORMULA, AGENT1, AGENT2) => s_holdsObligation(FORMULA, AGENT2))))).

/*
(subclass DeonticAttribute ObjectiveNorm)
*/
fof(a11360,axiom,s_subclass(s_DeonticAttribute, s_ObjectiveNorm)).

/*
(instance Permission DeonticAttribute)
*/
fof(a11361,axiom,s_instance(s_Permission, s_DeonticAttribute)).

/*
(instance Obligation DeonticAttribute)
*/
fof(a11362,axiom,s_instance(s_Obligation, s_DeonticAttribute)).

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (<=> (modalAttribute ?FORMULA Obligation)
   (not (modalAttribute (not ?FORMULA) Permission)))))
*/
%% no translation to TPTP available.

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (=> (modalAttribute ?FORMULA Obligation)
   (modalAttribute ?FORMULA Permission))))
*/
fof(a11363,axiom,! [FORMULA] : ((s_instance(FORMULA, s_Formula) => (s_modalAttribute(FORMULA, s_Obligation) => s_modalAttribute(FORMULA, s_Permission))))).

/*
(subAttribute Law Obligation)
*/
fof(a11364,axiom,s_subAttribute(s_Law, s_Obligation)).

/*
(instance Law DeonticAttribute)
*/
fof(a11365,axiom,s_instance(s_Law, s_DeonticAttribute)).

/*
(subAttribute Promise Obligation)
*/
fof(a11366,axiom,s_subAttribute(s_Promise, s_Obligation)).

/*
(instance DeonticAttribute SetOrClass)
*/
fof(a11367,axiom,s_instance(s_DeonticAttribute, s_SetOrClass)).

/*
(instance Prohibition DeonticAttribute)
*/
fof(a11368,axiom,s_instance(s_Prohibition, s_DeonticAttribute)).

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (<=> (modalAttribute ?FORMULA Prohibition)
   (not (modalAttribute ?FORMULA Permission)))))
*/
fof(a11369,axiom,! [FORMULA] : ((s_instance(FORMULA, s_Formula) => (s_modalAttribute(FORMULA, s_Prohibition) <=> (~ s_modalAttribute(FORMULA, s_Permission)))))).

/*
(instance ObjectiveNorm SetOrClass)
*/
fof(a11370,axiom,s_instance(s_ObjectiveNorm, s_SetOrClass)).

/*
(subclass ProbabilityAttribute ObjectiveNorm)
*/
fof(a11371,axiom,s_subclass(s_ProbabilityAttribute, s_ObjectiveNorm)).

/*
(instance Likely ProbabilityAttribute)
*/
fof(a11372,axiom,s_instance(s_Likely, s_ProbabilityAttribute)).

/*
(contraryAttribute2 Likely Unlikely)
*/
fof(a11373,axiom,s_contraryAttribute2(s_Likely, s_Unlikely)).

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (=> (modalAttribute ?FORMULA Likely)
   (greaterThan (ProbabilityFn (truth ?FORMULA True))
    (ProbabilityFn (truth ?FORMULA False))))))
*/
%% no translation to TPTP available.

/*
(instance ProbabilityAttribute SetOrClass)
*/
fof(a11374,axiom,s_instance(s_ProbabilityAttribute, s_SetOrClass)).

/*
(instance Unlikely ProbabilityAttribute)
*/
fof(a11375,axiom,s_instance(s_Unlikely, s_ProbabilityAttribute)).

/*
(forall (?FORMULA)
 (=> (instance ?FORMULA Formula)
  (=> (modalAttribute ?FORMULA Unlikely)
   (greaterThan (ProbabilityFn (truth ?FORMULA False))
    (ProbabilityFn (truth ?FORMULA True))))))
*/
%% no translation to TPTP available.

/*
(subclass PhysicalState InternalAttribute)
*/
fof(a11376,axiom,s_subclass(s_PhysicalState, s_InternalAttribute)).

/*
(contraryAttribute4 Solid Liquid Gas Plasma)
*/
fof(a11377,axiom,s_contraryAttribute4(s_Solid, s_Liquid, s_Gas, s_Plasma)).

/*
(exhaustiveAttribute6 PhysicalState Solid Fluid Liquid Gas Plasma)
*/
fof(a11378,axiom,s_exhaustiveAttribute6(s_PhysicalState, s_Solid, s_Fluid, s_Liquid, s_Gas, s_Plasma)).

/*
(instance Solid PhysicalState)
*/
fof(a11379,axiom,s_instance(s_Solid, s_PhysicalState)).

/*
(instance Fluid PhysicalState)
*/
fof(a11380,axiom,s_instance(s_Fluid, s_PhysicalState)).

/*
(instance Liquid PhysicalState)
*/
fof(a11381,axiom,s_instance(s_Liquid, s_PhysicalState)).

/*
(subAttribute Liquid Fluid)
*/
fof(a11382,axiom,s_subAttribute(s_Liquid, s_Fluid)).

/*
(forall (?OBJ) (=> (instance ?OBJ Solution) (attribute ?OBJ Liquid)))
*/
fof(a11383,axiom,! [OBJ] : ((s_instance(OBJ, s_Solution) => s_attribute(OBJ, s_Liquid)))).

/*
(instance Gas PhysicalState)
*/
fof(a11384,axiom,s_instance(s_Gas, s_PhysicalState)).

/*
(subAttribute Gas Fluid)
*/
fof(a11385,axiom,s_subAttribute(s_Gas, s_Fluid)).

/*
(forall (?OBJ)
 (forall (?ATTR)
  (exists (?g7372)
   (and (=> (instance ?OBJ Substance)
         (and (instance ?g7372 PhysicalState) (attribute ?OBJ ?g7372)))
        (=> (and (instance ?ATTR PhysicalState) (attribute ?OBJ ?ATTR))
         (instance ?OBJ Substance))))))
*/
fof(a11386,axiom,! [OBJ] : (! [ATTR] : (? [G7372] : (((s_instance(OBJ, s_Substance) => (s_instance(G7372, s_PhysicalState) & s_attribute(OBJ, G7372))) & ((s_instance(ATTR, s_PhysicalState) & s_attribute(OBJ, ATTR)) => s_instance(OBJ, s_Substance))))))).

/*
(instance PhysicalState SetOrClass)
*/
fof(a11387,axiom,s_instance(s_PhysicalState, s_SetOrClass)).

/*
(instance Plasma PhysicalState)
*/
fof(a11388,axiom,s_instance(s_Plasma, s_PhysicalState)).

/*
(subAttribute Plasma Fluid)
*/
fof(a11389,axiom,s_subAttribute(s_Plasma, s_Fluid)).

/*
(instance RelationalAttribute SetOrClass)
*/
fof(a11390,axiom,s_instance(s_RelationalAttribute, s_SetOrClass)).

/*
(subclass PerceptualAttribute RelationalAttribute)
*/
fof(a11391,axiom,s_subclass(s_PerceptualAttribute, s_RelationalAttribute)).

/*
(forall (?OBJ ?PERCEPTION)
 (exists (?PROP)
  (and (instance ?PROP Attribute)
       (=> (instance ?OBJ Object)
        (=>
         (and (instance ?PERCEPTION Perception)
              (patient ?PERCEPTION ?OBJ))
         (and (instance ?PROP PerceptualAttribute)
              (attribute ?OBJ ?PROP)))))))
*/
fof(a11392,axiom,! [OBJ,PERCEPTION] : (? [PROP] : ((s_instance(PROP, s_Attribute) & (s_instance(OBJ, s_Object) => ((s_instance(PERCEPTION, s_Perception) & s_patient(PERCEPTION, OBJ)) => (s_instance(PROP, s_PerceptualAttribute) & s_attribute(OBJ, PROP)))))))).

/*
(instance TasteAttribute SetOrClass)
*/
fof(a11393,axiom,s_instance(s_TasteAttribute, s_SetOrClass)).

/*
(subclass TasteAttribute PerceptualAttribute)
*/
fof(a11394,axiom,s_subclass(s_TasteAttribute, s_PerceptualAttribute)).

/*
(forall (?OBJ)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?OBJ Object)
        (=> (instance ?OBJ (FoodForFn Animal))
         (and (instance ?ATTR TasteAttribute)
              (attribute ?OBJ ?ATTR)))))))
*/
fof(a11395,axiom,! [OBJ] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(OBJ, s_Object) => (s_instance(OBJ, s_FoodForFn(s_Animal)) => (s_instance(ATTR, s_TasteAttribute) & s_attribute(OBJ, ATTR)))))))).

/*
(instance OlfactoryAttribute SetOrClass)
*/
fof(a11396,axiom,s_instance(s_OlfactoryAttribute, s_SetOrClass)).

/*
(subclass OlfactoryAttribute PerceptualAttribute)
*/
fof(a11397,axiom,s_subclass(s_OlfactoryAttribute, s_PerceptualAttribute)).

/*
(subclass VisualAttribute PerceptualAttribute)
*/
fof(a11398,axiom,s_subclass(s_VisualAttribute, s_PerceptualAttribute)).

/*
(instance Illuminated VisualAttribute)
*/
fof(a11399,axiom,s_instance(s_Illuminated, s_VisualAttribute)).

/*
(instance Unilluminated VisualAttribute)
*/
fof(a11400,axiom,s_instance(s_Unilluminated, s_VisualAttribute)).

/*
(contraryAttribute2 Unilluminated Illuminated)
*/
fof(a11401,axiom,s_contraryAttribute2(s_Unilluminated, s_Illuminated)).

/*
(instance VisualAttribute SetOrClass)
*/
fof(a11402,axiom,s_instance(s_VisualAttribute, s_SetOrClass)).

/*
(subclass ColorAttribute VisualAttribute)
*/
fof(a11403,axiom,s_subclass(s_ColorAttribute, s_VisualAttribute)).

/*
(subclass PrimaryColor ColorAttribute)
*/
fof(a11404,axiom,s_subclass(s_PrimaryColor, s_ColorAttribute)).

/*
(instance Red PrimaryColor)
*/
fof(a11405,axiom,s_instance(s_Red, s_PrimaryColor)).

/*
(instance Blue PrimaryColor)
*/
fof(a11406,axiom,s_instance(s_Blue, s_PrimaryColor)).

/*
(instance Yellow PrimaryColor)
*/
fof(a11407,axiom,s_instance(s_Yellow, s_PrimaryColor)).

/*
(instance White PrimaryColor)
*/
fof(a11408,axiom,s_instance(s_White, s_PrimaryColor)).

/*
(instance PrimaryColor SetOrClass)
*/
fof(a11409,axiom,s_instance(s_PrimaryColor, s_SetOrClass)).

/*
(instance Black PrimaryColor)
*/
fof(a11410,axiom,s_instance(s_Black, s_PrimaryColor)).

/*
(instance Monochromatic ColorAttribute)
*/
fof(a11411,axiom,s_instance(s_Monochromatic, s_ColorAttribute)).

/*
(forall (?COLOR ?OBJ ?PART)
 (forall (?ELEMENT)
  (=> (instance ?ELEMENT Object)
   (=> (and (instance ?OBJ Object) (instance ?PART Object))
    (=>
     (and (attribute ?OBJ Monochromatic)
          (and (superficialPart ?PART ?OBJ)
               (and (attribute ?PART ?COLOR)
                    (instance ?COLOR PrimaryColor))))
     (=> (superficialPart ?ELEMENT ?OBJ)
      (attribute ?ELEMENT ?COLOR)))))))
*/
fof(a11412,axiom,! [COLOR,OBJ,PART] : (! [ELEMENT] : ((s_instance(ELEMENT, s_Object) => ((s_instance(OBJ, s_Object) & s_instance(PART, s_Object)) => ((s_attribute(OBJ, s_Monochromatic) & (s_superficialPart(PART, OBJ) & (s_attribute(PART, COLOR) & s_instance(COLOR, s_PrimaryColor)))) => (s_superficialPart(ELEMENT, OBJ) => s_attribute(ELEMENT, COLOR)))))))).

/*
(forall (?OBJ)
 (=> (instance ?OBJ Object)
  (or (attribute ?OBJ Monochromatic) (attribute ?OBJ Polychromatic))))
*/
fof(a11413,axiom,! [OBJ] : ((s_instance(OBJ, s_Object) => (s_attribute(OBJ, s_Monochromatic) | s_attribute(OBJ, s_Polychromatic))))).

/*
(instance ColorAttribute SetOrClass)
*/
fof(a11414,axiom,s_instance(s_ColorAttribute, s_SetOrClass)).

/*
(instance Polychromatic ColorAttribute)
*/
fof(a11415,axiom,s_instance(s_Polychromatic, s_ColorAttribute)).

/*
(contraryAttribute2 Polychromatic Monochromatic)
*/
fof(a11416,axiom,s_contraryAttribute2(s_Polychromatic, s_Monochromatic)).

/*
(forall (?OBJ)
 (exists (?PART1 ?PART2 ?COLOR1 ?COLOR2)
  (and (and (instance ?COLOR2 Attribute) (instance ?COLOR1 Attribute)
            (instance ?PART2 Object) (instance ?PART1 Object))
       (=> (instance ?OBJ Object)
        (=> (attribute ?OBJ Polychromatic)
         (and (superficialPart ?PART1 ?OBJ)
              (and (superficialPart ?PART2 ?OBJ)
                   (and (attribute ?PART1 ?COLOR1)
                        (and (attribute ?PART2 ?COLOR2)
                             (and (instance ?COLOR1 ColorAttribute)
                                  (and
                                   (instance ?COLOR2 ColorAttribute)
                                   (not
                                    (equal ?COLOR1 ?COLOR2)))))))))))))
*/
fof(a11417,axiom,! [OBJ] : (? [PART1,PART2,COLOR1,COLOR2] : (((s_instance(COLOR2, s_Attribute) & s_instance(COLOR1, s_Attribute) & s_instance(PART2, s_Object) & s_instance(PART1, s_Object)) & (s_instance(OBJ, s_Object) => (s_attribute(OBJ, s_Polychromatic) => (s_superficialPart(PART1, OBJ) & (s_superficialPart(PART2, OBJ) & (s_attribute(PART1, COLOR1) & (s_attribute(PART2, COLOR2) & (s_instance(COLOR1, s_ColorAttribute) & (s_instance(COLOR2, s_ColorAttribute) & (~ (COLOR1 = COLOR2)))))))))))))).

/*
(subclass StructureAttribute InternalAttribute)
*/
fof(a11418,axiom,s_subclass(s_StructureAttribute, s_InternalAttribute)).

/*
(instance StructureAttribute SetOrClass)
*/
fof(a11419,axiom,s_instance(s_StructureAttribute, s_SetOrClass)).

/*
(subclass ShapeAttribute StructureAttribute)
*/
fof(a11420,axiom,s_subclass(s_ShapeAttribute, s_StructureAttribute)).

/*
(forall (?SURFACE ?ATTRIBUTE ?OBJ)
 (=>
  (and (instance ?SURFACE SelfConnectedObject)
       (instance ?OBJ SelfConnectedObject))
  (=>
   (and (instance ?ATTRIBUTE ShapeAttribute)
        (and (attribute ?OBJ ?ATTRIBUTE) (surface ?SURFACE ?OBJ)))
   (attribute ?SURFACE ?ATTRIBUTE))))
*/
fof(a11421,axiom,! [SURFACE,ATTRIBUTE,OBJ] : (((s_instance(SURFACE, s_SelfConnectedObject) & s_instance(OBJ, s_SelfConnectedObject)) => ((s_instance(ATTRIBUTE, s_ShapeAttribute) & (s_attribute(OBJ, ATTRIBUTE) & s_surface(SURFACE, OBJ))) => s_attribute(SURFACE, ATTRIBUTE))))).

/*
(instance Pliable InternalAttribute)
*/
fof(a11422,axiom,s_instance(s_Pliable, s_InternalAttribute)).

/*
(forall (?OBJ)
 (exists (?CHANGE)
  (and (instance ?CHANGE Process)
       (=> (and (instance ?OBJ Object) (attribute ?OBJ Pliable))
        (and (instance ?CHANGE ShapeChange) (patient ?CHANGE ?OBJ))))))
*/
fof(a11423,axiom,! [OBJ] : (? [CHANGE] : ((s_instance(CHANGE, s_Process) & ((s_instance(OBJ, s_Object) & s_attribute(OBJ, s_Pliable)) => (s_instance(CHANGE, s_ShapeChange) & s_patient(CHANGE, OBJ))))))).

/*
(instance Rigid InternalAttribute)
*/
fof(a11424,axiom,s_instance(s_Rigid, s_InternalAttribute)).

/*
(contraryAttribute2 Rigid Pliable)
*/
fof(a11425,axiom,s_contraryAttribute2(s_Rigid, s_Pliable)).

/*
(instance PerceptualAttribute SetOrClass)
*/
fof(a11426,axiom,s_instance(s_PerceptualAttribute, s_SetOrClass)).

/*
(subclass TextureAttribute PerceptualAttribute)
*/
fof(a11427,axiom,s_subclass(s_TextureAttribute, s_PerceptualAttribute)).

/*
(forall (?SURFACE ?ATTRIBUTE ?OBJ)
 (=>
  (and (instance ?SURFACE SelfConnectedObject)
       (instance ?OBJ SelfConnectedObject))
  (=>
   (and (instance ?ATTRIBUTE TextureAttribute)
        (and (attribute ?OBJ ?ATTRIBUTE) (surface ?SURFACE ?OBJ)))
   (attribute ?SURFACE ?ATTRIBUTE))))
*/
fof(a11428,axiom,! [SURFACE,ATTRIBUTE,OBJ] : (((s_instance(SURFACE, s_SelfConnectedObject) & s_instance(OBJ, s_SelfConnectedObject)) => ((s_instance(ATTRIBUTE, s_TextureAttribute) & (s_attribute(OBJ, ATTRIBUTE) & s_surface(SURFACE, OBJ))) => s_attribute(SURFACE, ATTRIBUTE))))).

/*
(instance Smooth TextureAttribute)
*/
fof(a11429,axiom,s_instance(s_Smooth, s_TextureAttribute)).

/*
(instance TextureAttribute SetOrClass)
*/
fof(a11430,axiom,s_instance(s_TextureAttribute, s_SetOrClass)).

/*
(instance Rough TextureAttribute)
*/
fof(a11431,axiom,s_instance(s_Rough, s_TextureAttribute)).

/*
(contraryAttribute2 Smooth Rough)
*/
fof(a11432,axiom,s_contraryAttribute2(s_Smooth, s_Rough)).

/*
(instance ShapeAttribute SetOrClass)
*/
fof(a11433,axiom,s_instance(s_ShapeAttribute, s_SetOrClass)).

/*
(subclass GeometricFigure ShapeAttribute)
*/
fof(a11434,axiom,s_subclass(s_GeometricFigure, s_ShapeAttribute)).

/*
(partition5 GeometricFigure GeometricPoint OneDimensionalFigure
 TwoDimensionalFigure ThreeDimensionalFigure)
*/
fof(a11435,axiom,s_partition5(s_GeometricFigure, s_GeometricPoint, s_OneDimensionalFigure, s_TwoDimensionalFigure, s_ThreeDimensionalFigure)).

/*
(instance GeometricPoint SetOrClass)
*/
fof(a11436,axiom,s_instance(s_GeometricPoint, s_SetOrClass)).

/*
(subclass GeometricPoint GeometricFigure)
*/
fof(a11437,axiom,s_subclass(s_GeometricPoint, s_GeometricFigure)).

/*
(instance OneDimensionalFigure SetOrClass)
*/
fof(a11438,axiom,s_instance(s_OneDimensionalFigure, s_SetOrClass)).

/*
(subclass OneDimensionalFigure GeometricFigure)
*/
fof(a11439,axiom,s_subclass(s_OneDimensionalFigure, s_GeometricFigure)).

/*
(subclass TwoDimensionalFigure GeometricFigure)
*/
fof(a11440,axiom,s_subclass(s_TwoDimensionalFigure, s_GeometricFigure)).

/*
(partition3 TwoDimensionalFigure OpenTwoDimensionalFigure
 ClosedTwoDimensionalFigure)
*/
fof(a11441,axiom,s_partition3(s_TwoDimensionalFigure, s_OpenTwoDimensionalFigure, s_ClosedTwoDimensionalFigure)).

/*
(subclass OpenTwoDimensionalFigure TwoDimensionalFigure)
*/
fof(a11442,axiom,s_subclass(s_OpenTwoDimensionalFigure, s_TwoDimensionalFigure)).

/*
(instance TwoDimensionalAngle SetOrClass)
*/
fof(a11443,axiom,s_instance(s_TwoDimensionalAngle, s_SetOrClass)).

/*
(instance OpenTwoDimensionalFigure SetOrClass)
*/
fof(a11444,axiom,s_instance(s_OpenTwoDimensionalFigure, s_SetOrClass)).

/*
(subclass TwoDimensionalAngle OpenTwoDimensionalFigure)
*/
fof(a11445,axiom,s_subclass(s_TwoDimensionalAngle, s_OpenTwoDimensionalFigure)).

/*
(instance ClosedTwoDimensionalFigure SetOrClass)
*/
fof(a11446,axiom,s_instance(s_ClosedTwoDimensionalFigure, s_SetOrClass)).

/*
(instance TwoDimensionalFigure SetOrClass)
*/
fof(a11447,axiom,s_instance(s_TwoDimensionalFigure, s_SetOrClass)).

/*
(subclass ClosedTwoDimensionalFigure TwoDimensionalFigure)
*/
fof(a11448,axiom,s_subclass(s_ClosedTwoDimensionalFigure, s_TwoDimensionalFigure)).

/*
(instance ThreeDimensionalFigure SetOrClass)
*/
fof(a11449,axiom,s_instance(s_ThreeDimensionalFigure, s_SetOrClass)).

/*
(instance GeometricFigure SetOrClass)
*/
fof(a11450,axiom,s_instance(s_GeometricFigure, s_SetOrClass)).

/*
(subclass ThreeDimensionalFigure GeometricFigure)
*/
fof(a11451,axiom,s_subclass(s_ThreeDimensionalFigure, s_GeometricFigure)).

/*
(instance geometricPart BinaryPredicate)
*/
fof(a11452,axiom,s_instance(s_geometricPart_m, s_BinaryPredicate)).

/*
(instance PartialOrderingRelation SetOrClass)
*/
fof(a11453,axiom,s_instance(s_PartialOrderingRelation, s_SetOrClass)).

/*
(instance geometricPart PartialOrderingRelation)
*/
fof(a11454,axiom,s_instance(s_geometricPart_m, s_PartialOrderingRelation)).

/*
(subrelation pointOfFigure geometricPart)
*/
fof(a11455,axiom,s_subrelation(s_pointOfFigure_m, s_geometricPart_m)).

/*
(instance pointOfFigure BinaryPredicate)
*/
fof(a11456,axiom,s_instance(s_pointOfFigure_m, s_BinaryPredicate)).

/*
(subrelation angleOfFigure geometricPart)
*/
fof(a11457,axiom,s_subrelation(s_angleOfFigure_m, s_geometricPart_m)).

/*
(instance angleOfFigure BinaryPredicate)
*/
fof(a11458,axiom,s_instance(s_angleOfFigure_m, s_BinaryPredicate)).

/*
(instance pointOfIntersection TernaryPredicate)
*/
fof(a11459,axiom,s_instance(s_pointOfIntersection_m, s_TernaryPredicate)).

/*
(forall (?FIGURE1 ?POINT ?FIGURE2)
 (=>
  (and (instance ?FIGURE2 OneDimensionalFigure)
       (instance ?POINT GeometricPoint)
       (instance ?FIGURE1 OneDimensionalFigure))
  (=> (pointOfIntersection ?FIGURE1 ?FIGURE2 ?POINT)
   (and (pointOfFigure ?POINT ?FIGURE1)
        (pointOfFigure ?POINT ?FIGURE2)))))
*/
fof(a11460,axiom,! [FIGURE1,POINT,FIGURE2] : (((s_instance(FIGURE2, s_OneDimensionalFigure) & s_instance(POINT, s_GeometricPoint) & s_instance(FIGURE1, s_OneDimensionalFigure)) => (s_pointOfIntersection(FIGURE1, FIGURE2, POINT) => (s_pointOfFigure(POINT, FIGURE1) & s_pointOfFigure(POINT, FIGURE2)))))).

/*
(instance parallel BinaryPredicate)
*/
fof(a11461,axiom,s_instance(s_parallel_m, s_BinaryPredicate)).

/*
(forall (?LINE2 ?LINE1)
 (forall (?POINT)
  (=> (instance ?POINT GeometricPoint)
   (=>
    (and (instance ?LINE1 OneDimensionalFigure)
         (instance ?LINE2 OneDimensionalFigure))
    (=> (parallel ?LINE1 ?LINE2)
     (not (pointOfIntersection ?LINE1 ?LINE2 ?POINT)))))))
*/
fof(a11462,axiom,! [LINE2,LINE1] : (! [POINT] : ((s_instance(POINT, s_GeometricPoint) => ((s_instance(LINE1, s_OneDimensionalFigure) & s_instance(LINE2, s_OneDimensionalFigure)) => (s_parallel(LINE1, LINE2) => (~ s_pointOfIntersection(LINE1, LINE2, POINT)))))))).

/*
(instance angularMeasure BinaryPredicate)
*/
fof(a11463,axiom,s_instance(s_angularMeasure_m, s_BinaryPredicate)).

/*
(instance angularMeasure TotalValuedRelation)
*/
fof(a11464,axiom,s_instance(s_angularMeasure_m, s_TotalValuedRelation)).

/*
(instance BinaryPredicate SetOrClass)
*/
fof(a11465,axiom,s_instance(s_BinaryPredicate, s_SetOrClass)).

/*
(instance lineMeasure BinaryPredicate)
*/
fof(a11466,axiom,s_instance(s_lineMeasure_m, s_BinaryPredicate)).

/*
(instance lineMeasure TotalValuedRelation)
*/
fof(a11467,axiom,s_instance(s_lineMeasure_m, s_TotalValuedRelation)).

/*
(instance geometricDistance TernaryPredicate)
*/
fof(a11468,axiom,s_instance(s_geometricDistance_m, s_TernaryPredicate)).

/*
(instance SingleValuedRelation SetOrClass)
*/
fof(a11469,axiom,s_instance(s_SingleValuedRelation, s_SetOrClass)).

/*
(instance geometricDistance SingleValuedRelation)
*/
fof(a11470,axiom,s_instance(s_geometricDistance_m, s_SingleValuedRelation)).

/*
(instance TotalValuedRelation SetOrClass)
*/
fof(a11471,axiom,s_instance(s_TotalValuedRelation, s_SetOrClass)).

/*
(instance geometricDistance TotalValuedRelation)
*/
fof(a11472,axiom,s_instance(s_geometricDistance_m, s_TotalValuedRelation)).

/*
(forall (?POINT1 ?LENGTH ?POINT2)
 (=>
  (and (instance ?POINT2 GeometricPoint)
       (instance ?LENGTH LengthMeasure)
       (instance ?POINT1 GeometricPoint))
  (=> (geometricDistance ?POINT1 ?POINT2 ?LENGTH)
   (geometricDistance ?POINT2 ?POINT1 ?LENGTH))))
*/
fof(a11473,axiom,! [POINT1,LENGTH,POINT2] : (((s_instance(POINT2, s_GeometricPoint) & s_instance(LENGTH, s_LengthMeasure) & s_instance(POINT1, s_GeometricPoint)) => (s_geometricDistance(POINT1, POINT2, LENGTH) => s_geometricDistance(POINT2, POINT1, LENGTH))))).

/*
(subclass SaturationAttribute InternalAttribute)
*/
fof(a11474,axiom,s_subclass(s_SaturationAttribute, s_InternalAttribute)).

/*
(instance Dry SaturationAttribute)
*/
fof(a11475,axiom,s_instance(s_Dry, s_SaturationAttribute)).

/*
(contraryAttribute2 Dry Damp)
*/
fof(a11476,axiom,s_contraryAttribute2(s_Dry, s_Damp)).

/*
(forall (?OBJ)
 (forall (?SUBOBJ)
  (=> (instance ?SUBOBJ Object)
   (=> (instance ?OBJ Object)
    (=> (attribute ?OBJ Dry)
     (not (and (part ?SUBOBJ ?OBJ) (attribute ?SUBOBJ Liquid))))))))
*/
fof(a11477,axiom,! [OBJ] : (! [SUBOBJ] : ((s_instance(SUBOBJ, s_Object) => (s_instance(OBJ, s_Object) => (s_attribute(OBJ, s_Dry) => (~ (s_part(SUBOBJ, OBJ) & s_attribute(SUBOBJ, s_Liquid))))))))).

/*
(instance Damp SaturationAttribute)
*/
fof(a11478,axiom,s_instance(s_Damp, s_SaturationAttribute)).

/*
(instance SaturationAttribute SetOrClass)
*/
fof(a11479,axiom,s_instance(s_SaturationAttribute, s_SetOrClass)).

/*
(instance Wet SaturationAttribute)
*/
fof(a11480,axiom,s_instance(s_Wet, s_SaturationAttribute)).

/*
(subAttribute Wet Damp)
*/
fof(a11481,axiom,s_subAttribute(s_Wet, s_Damp)).

/*
(forall (?OBJ)
 (forall (?PART)
  (exists (?SUBPART)
   (and (instance ?SUBPART Object)
        (=> (instance ?PART Object)
         (=> (instance ?OBJ Object)
          (=> (attribute ?OBJ Wet)
           (=> (part ?PART ?OBJ)
            (and (part ?SUBPART ?PART)
                 (attribute ?SUBPART Liquid))))))))))
*/
fof(a11482,axiom,! [OBJ] : (! [PART] : (? [SUBPART] : ((s_instance(SUBPART, s_Object) & (s_instance(PART, s_Object) => (s_instance(OBJ, s_Object) => (s_attribute(OBJ, s_Wet) => (s_part(PART, OBJ) => (s_part(SUBPART, PART) & s_attribute(SUBPART, s_Liquid))))))))))).

/*
(instance InternalAttribute SetOrClass)
*/
fof(a11483,axiom,s_instance(s_InternalAttribute, s_SetOrClass)).

/*
(subclass BiologicalAttribute InternalAttribute)
*/
fof(a11484,axiom,s_subclass(s_BiologicalAttribute, s_InternalAttribute)).

/*
(forall (?ATT ?ORG)
 (=> (instance ?ORG Object)
  (=> (and (attribute ?ORG ?ATT) (instance ?ATT BiologicalAttribute))
   (instance ?ORG OrganicObject))))
*/
fof(a11485,axiom,! [ATT,ORG] : ((s_instance(ORG, s_Object) => ((s_attribute(ORG, ATT) & s_instance(ATT, s_BiologicalAttribute)) => s_instance(ORG, s_OrganicObject))))).

/*
(subclass BodyPosition BiologicalAttribute)
*/
fof(a11486,axiom,s_subclass(s_BodyPosition, s_BiologicalAttribute)).

/*
(forall (?ANIMAL)
 (exists (?ATTR)
  (exists (?MOTION)
   (and (instance ?MOTION Process)
        (and (instance ?ATTR Attribute)
             (=> (instance ?ANIMAL Animal)
              (or (and (instance ?MOTION BodyMotion)
                       (agent ?MOTION ?ANIMAL))
                  (and (instance ?ATTR BodyPosition)
                       (attribute ?ANIMAL ?ATTR)))))))))
*/
fof(a11487,axiom,! [ANIMAL] : (? [ATTR] : (? [MOTION] : ((s_instance(MOTION, s_Process) & (s_instance(ATTR, s_Attribute) & (s_instance(ANIMAL, s_Animal) => ((s_instance(MOTION, s_BodyMotion) & s_agent(MOTION, ANIMAL)) | (s_instance(ATTR, s_BodyPosition) & s_attribute(ANIMAL, ATTR)))))))))).

/*
(instance Standing BodyPosition)
*/
fof(a11488,axiom,s_instance(s_Standing, s_BodyPosition)).

/*
(forall (?AGENT ?AMBULATE)
 (=> (instance ?AGENT Agent)
  (=> (and (instance ?AMBULATE Ambulating) (agent ?AMBULATE ?AGENT))
   (attribute ?AGENT Standing))))
*/
fof(a11489,axiom,! [AGENT,AMBULATE] : ((s_instance(AGENT, s_Agent) => ((s_instance(AMBULATE, s_Ambulating) & s_agent(AMBULATE, AGENT)) => s_attribute(AGENT, s_Standing))))).

/*
(instance Sitting BodyPosition)
*/
fof(a11490,axiom,s_instance(s_Sitting, s_BodyPosition)).

/*
(instance BodyPosition SetOrClass)
*/
fof(a11491,axiom,s_instance(s_BodyPosition, s_SetOrClass)).

/*
(instance Prostrate BodyPosition)
*/
fof(a11492,axiom,s_instance(s_Prostrate, s_BodyPosition)).

/*
(subclass AnimacyAttribute BiologicalAttribute)
*/
fof(a11493,axiom,s_subclass(s_AnimacyAttribute, s_BiologicalAttribute)).

/*
(exhaustiveAttribute3 AnimacyAttribute Living Dead)
*/
fof(a11494,axiom,s_exhaustiveAttribute3(s_AnimacyAttribute, s_Living, s_Dead)).

/*
(instance Living AnimacyAttribute)
*/
fof(a11495,axiom,s_instance(s_Living, s_AnimacyAttribute)).

/*
(forall (?ORGANISM ?PROCESS)
 (=> (instance ?PROCESS Process)
  (=> (and (instance ?ORGANISM Organism) (agent ?PROCESS ?ORGANISM))
   (holdsDuring (WhenFn ?PROCESS) (attribute ?ORGANISM Living)))))
*/
%% no translation to TPTP available.

/*
(instance AnimacyAttribute SetOrClass)
*/
fof(a11496,axiom,s_instance(s_AnimacyAttribute, s_SetOrClass)).

/*
(instance Dead AnimacyAttribute)
*/
fof(a11497,axiom,s_instance(s_Dead, s_AnimacyAttribute)).

/*
(subAttribute Dead Unconscious)
*/
fof(a11498,axiom,s_subAttribute(s_Dead, s_Unconscious)).

/*
(contraryAttribute2 Dead Living)
*/
fof(a11499,axiom,s_contraryAttribute2(s_Dead, s_Living)).

/*
(forall (?ORG)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?ORG Organism)
        (and (instance ?ATTR AnimacyAttribute)
             (attribute ?ORG ?ATTR))))))
*/
fof(a11500,axiom,! [ORG] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(ORG, s_Organism) => (s_instance(ATTR, s_AnimacyAttribute) & s_attribute(ORG, ATTR))))))).

/*
(subclass SexAttribute BiologicalAttribute)
*/
fof(a11501,axiom,s_subclass(s_SexAttribute, s_BiologicalAttribute)).

/*
(exhaustiveAttribute3 SexAttribute Female Male)
*/
fof(a11502,axiom,s_exhaustiveAttribute3(s_SexAttribute, s_Female, s_Male)).

/*
(instance Female SexAttribute)
*/
fof(a11503,axiom,s_instance(s_Female, s_SexAttribute)).

/*
(forall (?ORG ?BODY)
 (=>
  (and (instance ?BODY ReproductiveBody)
       (and (part ?BODY ?ORG) (instance ?ORG Organism)))
  (attribute ?ORG Female)))
*/
fof(a11504,axiom,! [ORG,BODY] : (((s_instance(BODY, s_ReproductiveBody) & (s_part(BODY, ORG) & s_instance(ORG, s_Organism))) => s_attribute(ORG, s_Female)))).

/*
(instance SexAttribute SetOrClass)
*/
fof(a11505,axiom,s_instance(s_SexAttribute, s_SetOrClass)).

/*
(instance Male SexAttribute)
*/
fof(a11506,axiom,s_instance(s_Male, s_SexAttribute)).

/*
(contraryAttribute2 Male Female)
*/
fof(a11507,axiom,s_contraryAttribute2(s_Male, s_Female)).

/*
(forall (?ANIMAL)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?ANIMAL Animal)
        (and (instance ?ATTR SexAttribute)
             (attribute ?ANIMAL ?ATTR))))))
*/
fof(a11508,axiom,! [ANIMAL] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(ANIMAL, s_Animal) => (s_instance(ATTR, s_SexAttribute) & s_attribute(ANIMAL, ATTR))))))).

/*
(subclass DevelopmentalAttribute BiologicalAttribute)
*/
fof(a11509,axiom,s_subclass(s_DevelopmentalAttribute, s_BiologicalAttribute)).

/*
(exhaustiveAttribute3 DevelopmentalAttribute FullyFormed NonFullyFormed)
*/
fof(a11510,axiom,s_exhaustiveAttribute3(s_DevelopmentalAttribute, s_FullyFormed, s_NonFullyFormed)).

/*
(instance FullyFormed DevelopmentalAttribute)
*/
fof(a11511,axiom,s_instance(s_FullyFormed, s_DevelopmentalAttribute)).

/*
(forall (?OBJ)
 (exists (?GROWTH)
  (and (instance ?GROWTH Process)
       (=> (instance ?OBJ Agent)
        (=> (attribute ?OBJ FullyFormed)
         (and (instance ?GROWTH Growth)
              (and (experiencer ?GROWTH ?OBJ)
                   (holdsDuring (BeginFn (WhenFn ?OBJ))
                    (attribute ?OBJ NonFullyFormed)))))))))
*/
%% no translation to TPTP available.

/*
(instance DevelopmentalAttribute SetOrClass)
*/
fof(a11512,axiom,s_instance(s_DevelopmentalAttribute, s_SetOrClass)).

/*
(instance NonFullyFormed DevelopmentalAttribute)
*/
fof(a11513,axiom,s_instance(s_NonFullyFormed, s_DevelopmentalAttribute)).

/*
(contraryAttribute2 NonFullyFormed FullyFormed)
*/
fof(a11514,axiom,s_contraryAttribute2(s_NonFullyFormed, s_FullyFormed)).

/*
(successorAttribute NonFullyFormed FullyFormed)
*/
fof(a11515,axiom,s_successorAttribute(s_NonFullyFormed, s_FullyFormed)).

/*
(forall (?ORG)
 (exists (?ATTR)
  (and (instance ?ATTR Attribute)
       (=> (instance ?ORG Organism)
        (and (instance ?ATTR DevelopmentalAttribute)
             (attribute ?ORG ?ATTR))))))
*/
fof(a11516,axiom,! [ORG] : (? [ATTR] : ((s_instance(ATTR, s_Attribute) & (s_instance(ORG, s_Organism) => (s_instance(ATTR, s_DevelopmentalAttribute) & s_attribute(ORG, ATTR))))))).

/*
(subAttribute Larval NonFullyFormed)
*/
fof(a11517,axiom,s_subAttribute(s_Larval, s_NonFullyFormed)).

/*
(forall (?TIME ?ORG ?BIRTH ?BW)
 (=>
  (and (instance ?TIME TimeInterval) (instance ?ORG Agent)
       (instance ?BW TimeInterval))
  (=>
   (and (holdsDuring ?TIME (attribute ?ORG Larval))
        (and (instance ?BIRTH Birth)
             (and (equal ?BW (WhenFn ?BIRTH))
                  (experiencer ?BIRTH ?ORG))))
   (meetsTemporally ?BW ?TIME))))
*/
%% no translation to TPTP available.

/*
(subAttribute Embryonic NonFullyFormed)
*/
fof(a11518,axiom,s_subAttribute(s_Embryonic, s_NonFullyFormed)).

/*
(contraryAttribute2 Embryonic Larval)
*/
fof(a11519,axiom,s_contraryAttribute2(s_Embryonic, s_Larval)).

/*
(forall (?ORG)
 (exists (?BODY)
  (and (instance ?BODY Object)
       (=> (instance ?ORG Object)
        (=> (attribute ?ORG Embryonic)
         (and (instance ?BODY ReproductiveBody)
              (located ?ORG ?BODY)))))))
*/
fof(a11520,axiom,! [ORG] : (? [BODY] : ((s_instance(BODY, s_Object) & (s_instance(ORG, s_Object) => (s_attribute(ORG, s_Embryonic) => (s_instance(BODY, s_ReproductiveBody) & s_located(ORG, BODY)))))))).

/*
(forall (?TIME ?ORG ?BIRTH ?BW)
 (=>
  (and (instance ?TIME TimeInterval) (instance ?ORG Agent)
       (instance ?BW TimeInterval))
  (=>
   (and (holdsDuring ?TIME (attribute ?ORG Embryonic))
        (and (instance ?BIRTH Birth)
             (and (equal ?BW (WhenFn ?BIRTH))
                  (experiencer ?BIRTH ?ORG))))
   (not (overlapsTemporally ?TIME ?BW)))))
*/
%% no translation to TPTP available.

/*
(subclass DiseaseOrSyndrome BiologicalAttribute)
*/
fof(a11521,axiom,s_subclass(s_DiseaseOrSyndrome, s_BiologicalAttribute)).

/*
(instance BiologicalAttribute SetOrClass)
*/
fof(a11522,axiom,s_instance(s_BiologicalAttribute, s_SetOrClass)).

/*
(subclass PsychologicalAttribute BiologicalAttribute)
*/
fof(a11523,axiom,s_subclass(s_PsychologicalAttribute, s_BiologicalAttribute)).

/*
(partition3 PsychologicalAttribute StateOfMind TraitAttribute)
*/
fof(a11524,axiom,s_partition3(s_PsychologicalAttribute, s_StateOfMind, s_TraitAttribute)).

/*
(forall (?TIME ?ATTR ?ORGANISM)
 (=> (and (instance ?TIME TimePosition) (instance ?ORGANISM Object))
  (=> (instance ?ATTR PsychologicalAttribute)
   (=>
    (and (holdsDuring ?TIME (attribute ?ORGANISM ?ATTR))
         (instance ?ORGANISM Organism))
    (holdsDuring ?TIME (attribute ?ORGANISM Living))))))
*/
%% no translation to TPTP available.

/*
(forall (?ATTR ?AGENT)
 (=> (instance ?AGENT Object)
  (=>
   (and (instance ?ATTR PsychologicalAttribute)
        (attribute ?AGENT ?ATTR))
   (instance ?AGENT SentientAgent))))
*/
fof(a11525,axiom,! [ATTR,AGENT] : ((s_instance(AGENT, s_Object) => ((s_instance(ATTR, s_PsychologicalAttribute) & s_attribute(AGENT, ATTR)) => s_instance(AGENT, s_SentientAgent))))).

/*
(subclass StateOfMind PsychologicalAttribute)
*/
fof(a11526,axiom,s_subclass(s_StateOfMind, s_PsychologicalAttribute)).

/*
(instance EmotionalState SetOrClass)
*/
fof(a11527,axiom,s_instance(s_EmotionalState, s_SetOrClass)).

/*
(subclass EmotionalState StateOfMind)
*/
fof(a11528,axiom,s_subclass(s_EmotionalState, s_StateOfMind)).

/*
(instance StateOfMind SetOrClass)
*/
fof(a11529,axiom,s_instance(s_StateOfMind, s_SetOrClass)).

/*
(subclass ConsciousnessAttribute StateOfMind)
*/
fof(a11530,axiom,s_subclass(s_ConsciousnessAttribute, s_StateOfMind)).

/*
(forall (?AGENT)
 (forall (?ATTR)
  (exists (?g7398)
   (and (=>
         (and (instance ?AGENT SentientAgent)
              (attribute ?AGENT Living))
         (and (instance ?g7398 ConsciousnessAttribute)
              (attribute ?AGENT ?g7398)))
        (=>
         (and (instance ?ATTR ConsciousnessAttribute)
              (attribute ?AGENT ?ATTR))
         (and (instance ?AGENT SentientAgent)
              (attribute ?AGENT Living)))))))
*/
fof(a11531,axiom,! [AGENT] : (! [ATTR] : (? [G7398] : ((((s_instance(AGENT, s_SentientAgent) & s_attribute(AGENT, s_Living)) => (s_instance(G7398, s_ConsciousnessAttribute) & s_attribute(AGENT, G7398))) & ((s_instance(ATTR, s_ConsciousnessAttribute) & s_attribute(AGENT, ATTR)) => (s_instance(AGENT, s_SentientAgent) & s_attribute(AGENT, s_Living)))))))).

/*
(instance Asleep ConsciousnessAttribute)
*/
fof(a11532,axiom,s_instance(s_Asleep, s_ConsciousnessAttribute)).

/*
(instance Unconscious ConsciousnessAttribute)
*/
fof(a11533,axiom,s_instance(s_Unconscious, s_ConsciousnessAttribute)).

/*
(contraryAttribute2 Unconscious Awake)
*/
fof(a11534,axiom,s_contraryAttribute2(s_Unconscious, s_Awake)).

/*
(instance ConsciousnessAttribute SetOrClass)
*/
fof(a11535,axiom,s_instance(s_ConsciousnessAttribute, s_SetOrClass)).

/*
(instance Awake ConsciousnessAttribute)
*/
fof(a11536,axiom,s_instance(s_Awake, s_ConsciousnessAttribute)).

/*
(forall (?AGENT)
 (=> (instance ?AGENT Object)
  (=> (or (attribute ?AGENT Asleep) (attribute ?AGENT Awake))
   (attribute ?AGENT Living))))
*/
fof(a11537,axiom,! [AGENT] : ((s_instance(AGENT, s_Object) => ((s_attribute(AGENT, s_Asleep) | s_attribute(AGENT, s_Awake)) => s_attribute(AGENT, s_Living))))).

/*
(instance TraitAttribute SetOrClass)
*/
fof(a11538,axiom,s_instance(s_TraitAttribute, s_SetOrClass)).

/*
(subclass TraitAttribute PsychologicalAttribute)
*/
fof(a11539,axiom,s_subclass(s_TraitAttribute, s_PsychologicalAttribute)).

/*
(instance PsychologicalAttribute SetOrClass)
*/
fof(a11540,axiom,s_instance(s_PsychologicalAttribute, s_SetOrClass)).

/*
(subclass PsychologicalDysfunction PsychologicalAttribute)
*/
fof(a11541,axiom,s_subclass(s_PsychologicalDysfunction, s_PsychologicalAttribute)).

/*
(instance PsychologicalDysfunction SetOrClass)
*/
fof(a11542,axiom,s_instance(s_PsychologicalDysfunction, s_SetOrClass)).

/*
(instance DiseaseOrSyndrome SetOrClass)
*/
fof(a11543,axiom,s_instance(s_DiseaseOrSyndrome, s_SetOrClass)).

/*
(subclass PsychologicalDysfunction DiseaseOrSyndrome)
*/
fof(a11544,axiom,s_subclass(s_PsychologicalDysfunction, s_DiseaseOrSyndrome)).

/*
(instance TernaryPredicate SetOrClass)
*/
fof(a11545,axiom,s_instance(s_TernaryPredicate, s_SetOrClass)).

/*
(instance comment TernaryPredicate)
*/
fof(a11546,axiom,s_instance(s_comment_m, s_TernaryPredicate)).

/*
(instance UnaryFunction SetOrClass)
*/
fof(a11547,axiom,s_instance(s_UnaryFunction, s_SetOrClass)).

/*
(instance MakingFn UnaryFunction)
*/
fof(a11548,axiom,s_instance(s_MakingFn_m, s_UnaryFunction)).

/*
(domainSubclass MakingFn 1 Making)
*/
fof(a11549,axiom,s_domainSubclass(s_MakingFn_m, 1, s_Making)).

/*
(rangeSubclass MakingFn Object)
*/
fof(a11550,axiom,s_rangeSubclass(s_MakingFn_m, s_Object)).

/*
(forall (?Y ?X)
 (exists (?OBJECT)
  (and (instance ?OBJECT Entity)
       (=>
        (and (instance ?X Process) (subclass ?Y Making)
             (instance ?Y SetOrClass))
        (=> (instance ?X (MakingFn ?Y))
         (and (instance ?OBJECT ?Y) (result ?X ?OBJECT)))))))
*/
fof(a11551,axiom,! [Y,X] : (? [OBJECT] : ((s_instance(OBJECT, s_Entity) & ((s_instance(X, s_Process) & s_subclass(Y, s_Making) & s_instance(Y, s_SetOrClass)) => (s_instance(X, s_MakingFn(Y)) => (s_instance(OBJECT, Y) & s_result(X, OBJECT)))))))).

/*
(instance HumanAdult SetOrClass)
*/
fof(a11552,axiom,s_instance(s_HumanAdult, s_SetOrClass)).

/*
(instance John HumanAdult)
*/
fof(a11553,axiom,s_instance(s_John, s_HumanAdult)).
% fof(q,question,s_instance(s_John, s_Human)).
% fof(q, question, ? [X] : s_instance(X, s_Human)).
fof(q,conjecture, s_immediateInstance(s_John, s_Human)).
