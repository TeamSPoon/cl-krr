(deftheory global  (<= (p $x b)      (q $x $x))  (<= (q (f a) a))  (<- (f a) a)  (<- (g b) b))*(stp '(p (f a) (g b)))t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (val (in 1 f1) 1 on)  (val (in 2 f1) 1 off)  (val (in 3 f1) 1 on)  (isa x1 xorg)  (isa x2 xorg)  (isa a1 andg)  (isa a2 andg)  (isa o1 org)  (conn (in 1 f1) (in 1 x1))  (conn (in 1 f1) (in 1 a1))  (conn (in 2 f1) (in 2 x1))  (conn (in 2 f1) (in 2 a1))  (conn (in 3 f1) (in 2 x2))  (conn (in 3 f1) (in 1 a2))  (conn (out 1 x1) (in 1 x2))  (conn (out 1 x1) (in 2 a2))  (conn (out 1 a2) (in 1 o1))  (conn (out 1 a1) (in 2 o1))  (conn (out 1 x2) (out 1 f1))  (conn (out 1 o1) (out 2 f1))  (<= (val (out 1 $x) $t on)      (isa $x andg)      (val (in 1 $x) $t on)      (val (in 2 $x) $t on))  (<= (val (out 1 $x) $t off)      (isa $x andg)      (val (in $n $x) $t off))  (<= (val (out 1 $x) $t off)      (isa $x org)      (val (in 1 $x) $t off)      (val (in 2 $x) $t off))  (<= (val (out 1 $x) $t on)      (isa $x org)      (val (in $n $x) $t on))  (<= (val (out 1 $x) $t off)      (isa $x xorg)      (val (in 1 $x) $t $z)      (val (in 2 $x) $t $z))  (<= (val (out 1 $x) $t on)      (isa $x xorg)      (val (in 1 $x) $t on)      (val (in 2 $x) $t off))  (<= (val (out 1 $x) $t on)      (isa $x xorg)      (val (in 1 $x) $t off)      (val (in 2 $x) $t on))  (<= (val $y $t $z)      (conn $x $y)      (val $x $t $z)))*(stp '(val (out 1 f1) 1 off))t(stp '(val (out 2 f1) 1 on))t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global   (<= (faster $x $y)      (horse $x)      (dog $y))  (greyhound greg)  (<= (faster greg $z)      (rabbit $z))  (<= (dog $x)      (greyhound $x))  (<= (faster $x $z)      (faster $x $y)      (faster $y $z))  (horse harry)  (rabbit ralph))*(stp '(faster harry ralph))t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (<= (FRIEND BERTRAM VICTOR) (INNOCENT ARTHUR))   (<= (NOT (INNOCENT ARTHUR)) (NOT (FRIEND BERTRAM VICTOR)))   (<= (NOT (LIKES CARLETON VICTOR)) (INNOCENT ARTHUR))   (<= (NOT (INNOCENT ARTHUR)) (LIKES CARLETON VICTOR))   (<= (NOT (INTOWN BERTRAM)) (INNOCENT BERTRAM))   (<= (NOT (INNOCENT BERTRAM)) (INTOWN BERTRAM))   (<= (NOT (KNOWS BERTRAM VICTOR)) (INNOCENT BERTRAM))   (<= (NOT (INNOCENT BERTRAM)) (KNOWS BERTRAM VICTOR))   (<= (WITH ARTHUR VICTOR) (INNOCENT CARLETON))   (<= (NOT (INNOCENT CARLETON)) (NOT (WITH ARTHUR VICTOR)))   (<= (WITH BERTRAM VICTOR) (INNOCENT CARLETON))   (<= (NOT (INNOCENT CARLETON)) (NOT (WITH BERTRAM VICTOR)))   (<= (INTOWN $X) (WITH $X VICTOR))   (<= (NOT (WITH $X VICTOR)) (NOT (INTOWN $X)))   (<= (KNOWS $X $Y) (FRIEND $X $Y))   (<= (NOT (FRIEND $X $Y)) (NOT (KNOWS $X $Y)))   (<= (KNOWS $X $Y) (LIKES $X $Y))   (<= (NOT (LIKES $X $Y)) (NOT (KNOWS $X $Y)))   (<= (INNOCENT ARTHUR) (NOT (INNOCENT BERTRAM)))   (<= (INNOCENT BERTRAM) (NOT (INNOCENT ARTHUR)))   (<= (INNOCENT ARTHUR) (NOT (INNOCENT CARLETON)))   (<= (INNOCENT CARLETON) (NOT (INNOCENT ARTHUR)))   (<= (INNOCENT BERTRAM) (NOT (INNOCENT CARLETON)))   (<= (INNOCENT CARLETON) (NOT (INNOCENT BERTRAM))))*(stp '(not (innocent bertram)))t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global   (<= (<- a b) p)  (<= (r b) q)  p  q)*(stp '(r a))t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (<= (p $x $y $z)      (is (f $x $y) $z))  (<- (f $u $v) (cond ((alike $u $v) 2) (t 3))))*(stp '(and (p a $s $t) (alike $s a) (alike $t 2)))t(reset)*