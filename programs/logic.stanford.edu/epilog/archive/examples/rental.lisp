(deftheory small  (building-type paw-1 apartment)  (city          paw-1 redwood-city)  (cost          paw-1 1000)  (bedrooms      paw-1 1)  (building-type paw-2 condominium)  (city          paw-2 redwood-city)  (cost          paw-2 1000)  (bedrooms      paw-2 1))(finds '?o       '(and (or (building-type ?o apartment) (building-type ?o condominium))             (or (city ?o redwood-city) (city ?o palo-alto))             (and (cost ?o ?cost) (>= ?cost 500) (=< ?cost 1500))             (and (bedrooms ?o ?bedrooms) (>= ?bedrooms 0) (=< ?bedrooms 2)))       'rental)(finds '?o       '(and (or (building-type ?o apartment) (building-type ?o condominium))             (or (city ?o redwood-city) (city ?o palo-alto) (execute (break)) (city ?o menlo-park))             (and (cost ?o ?cost) (>= ?cost 500) (=< ?cost 1500)))       'rental)(deftheory test  (p a)  (p b))(finds '?x '(and (p ?x) (execute (break)) (r ?x)) 'test)(deftheory bar  (<= (r ?x ?y) (p ?x) (= ?x ?y) (execute (break)))  (p 1)  (<= (p ?x) (p ?y) (+ ?y 1 ?x))  (= ?x ?x))(load-theory "gullible:epilog:examples:translate.kif" 'translate #'index)(load-theory "gullible:epilog:examples:paw.kif" 'paw #'index)(load-theory "gullible:epilog:examples:sfgate.kif" 'sfgate #'index)(load-theory "gullible:epilog:examples:merc.kif" 'merc #'index)(includes 'rental 'translate)(includes 'rental 'paw)(includes 'rental 'sfgate)(includes 'rental 'merc)(finds '?o '(AND (OR (BUILDING-TYPE ?O APARTMENT) (BUILDING-TYPE ?O CONDOMINIUM)         (BUILDING-TYPE ?O COTTAGE) (BUILDING-TYPE ?O FLAT)         (BUILDING-TYPE ?O HOME) (BUILDING-TYPE ?O PLEX)         (BUILDING-TYPE ?O STUDIO))     (OR (CITY ?O REDWOOD-CITY) (CITY ?O PALO-ALTO) (CITY ?O MOUNTAIN-VIEW)         (CITY ?O MENLO-PARK) (CITY ?O LOS-ALTOS-HILLS) (CITY ?O LOS-ALTOS)         (CITY ?O ATHERTON))     (AND (COST ?O ?COST) (>= ?COST 500) (=< ?COST 1500))     (AND (BEDROOMS ?O ?BEDROOMS) (>= ?BEDROOMS 0) (=< ?BEDROOMS 2))) 'rental)(defmethod envindexps (p al (th (eql 'paw)))  (setq p (plugstdexp p al))  (cond ((null p) (contents th))        ((atom p) (indexees p th))        (t (do ((l (cdr p) (cdr l)))               ((null l) (indexps p th))               (cond ((varp (car l)))                     ((null (car l)))                     ((atom (car l)) (return (indexees (car l) th))))))))(defmethod envindexps (p al (th (eql 'sfgate)))  (setq p (plugstdexp p al))  (cond ((null p) (contents th))        ((atom p) (indexees p th))        (t (do ((l (cdr p) (cdr l)))               ((null l) (indexps p th))               (cond ((varp (car l)))                     ((null (car l)))                     ((atom (car l)) (return (indexees (car l) th))))))))(defmethod envindexps (p al (th (eql 'merc)))  (setq p (plugstdexp p al))  (cond ((null p) (contents th))        ((atom p) (indexees p th))        (t (do ((l (cdr p) (cdr l)))               ((null l) (indexps p th))               (cond ((varp (car l)))                     ((null (car l)))                     ((atom (car l)) (return (indexees (car l) th))))))))