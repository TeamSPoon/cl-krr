STP is a sound and complete theorem prover for the first order predicate calculus wih equality.  Works by combination of resolution and paramodulation.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sound and complete on initial databases  and queries involving;;;   ' = and or not <= => <=> forall exists ;;;   arbitrary other symbols excluding those listed below;;;;;; Some procedural attachments for the following.  Sound but not complete;;;   if cond oneof bagof + - * / alike unalike is ns known unknown;;;   provable unprovable > < >= =< atom number etc.;;;;;; Completeness requires that the database;;;   is in backward rule form;;;   includes appropriate contrapositives, one for each literal;;;   includes equations in both directions;;; These conditions are guaranteed by STPSTASH;;;;;; Automatically negates query, converts to rule form, and adds clauses to ;;;   STP theory.;;;;;; There is a compiler for theories called STPFINALIZE ;;;;;; This version does NOT cache. Does not want advice of user.  ARROGANT!;;;;;; NOTE: Side effects;;;   Empties and decludes the theory STP and leaves junk there after done. ;;;   Overwrites the variable *CALLS* to be the number of calls executed.;;;   Overwrites the variable *SIMPS* to be the number of terms simplfied.;;;   Overwrites the varibale *PROOF* to be the most recent proof.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Loading:   (1) The system presumes that Epikit has been loaded.   (2) STP is contained in the file "stp.fasl"   (3) STPFINALIZE is contained in the file "stpfinal.fasl"Commands:   (stpstash p &optional (th *theory*))   (stp p &optional (*theory* *theory*))   (stpfinalize &optional (th *theory*))   (stpfinalize-file in &optional (out nil))   (trace-proof)   (untrace-proof)   (trace-expression x1 ... xn)   (untrace-expression x1 .. xn)   (print-proof p)Variables:   *start*   *increment*   *depth*   *simps*   *calls*   *proof*