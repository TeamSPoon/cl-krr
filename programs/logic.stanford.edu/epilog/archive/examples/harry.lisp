(DEFTHEORY HARRY           (<= (FASTER $X $Y) (HORSE $X) (DOG $Y))           (GREYHOUND GREG)           (<= (FASTER GREG $Z) (RABBIT $Z))           (<= (DOG $X) (GREYHOUND $X))           (<= (FASTER $X $Z)               (FASTER $X $Y)               (FASTER $Y $Z))           (HORSE HARRY)           (RABBIT RALPH))(DEFPROP HARRY FAIL INDEX)(DEFPROP HARRY FAIL UNINDEX)(DEFPROP HARRY PROLOGTHFINAL PROLOGTH)(DEFPROP RABBIT PROLOGX-RABBIT-HARRY PROLOGRSTHFINAL)(DEFUN PROLOGX-RABBIT-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(RABBIT RALPH) BL))           (SETQ ANS (APPLY (CAR C) (CDR C))))      (BACKUP OL)      ANS)     ((BACKUP OL)))))(DEFPROP HARRY PROLOGTHFINAL PROLOGTH)(DEFPROP HORSE PROLOGX-HORSE-HARRY PROLOGRSTHFINAL)(DEFUN PROLOGX-HORSE-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(HORSE HARRY) BL))           (SETQ ANS (APPLY (CAR C) (CDR C))))      (BACKUP OL)      ANS)     ((BACKUP OL)))))(DEFPROP HARRY PROLOGTHFINAL PROLOGTH)(DEFPROP DOG PROLOGX-DOG-HARRY PROLOGRSTHFINAL)(DEFUN PROLOGX-DOG-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(DOG $X) BL))           (SETQ ANS                 (PROLOGPUSH '(DOG $X)                             '((GREYHOUND $X))                             BL                             C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL)))))(DEFPROP HARRY PROLOGTHFINAL PROLOGTH)(DEFPROP GREYHOUND         PROLOGX-GREYHOUND-HARRY         PROLOGRSTHFINAL)(DEFUN PROLOGX-GREYHOUND-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(GREYHOUND GREG) BL))           (SETQ ANS (APPLY (CAR C) (CDR C))))      (BACKUP OL)      ANS)     ((BACKUP OL)))))(DEFPROP HARRY PROLOGTHFINAL PROLOGTH)(DEFPROP FASTER PROLOGX-FASTER-HARRY PROLOGRSTHFINAL)(DEFUN PROLOGX-FASTER-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(FASTER $X $Y) BL))           (SETQ ANS                 (PROLOGPUSH '(FASTER $X $Y)                             '((HORSE $X) (DOG $Y))                             BL                             C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL))     ((AND (SETQ OL (UNIFY P AL '(FASTER GREG $Z) BL))           (SETQ ANS                 (PROLOGPUSH '(FASTER GREG $Z)                             '((RABBIT $Z))                             BL                             C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL))     ((AND (SETQ OL (UNIFY P AL '(FASTER $X $Z) BL))           (SETQ ANS                 (PROLOGPUSH '(FASTER $X $Z)                             '((FASTER $X $Y)                               (FASTER $Y $Z))                             BL                             C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL)))))(DEFPROP HARRY PARALOGTHFINAL PARALOGTH)(DEFPROP RABBIT PARALOG-RABBIT-HARRY PARALOGTHFINAL)(DEFUN PARALOG-RABBIT-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(RABBIT RALPH) BL))           (SETQ ANS (PARALOGEXITREDO P AL C)))      (BACKUP OL)      ANS)     ((BACKUP OL)))))(DEFPROP HORSE PARALOG-HORSE-HARRY PARALOGTHFINAL)(DEFUN PARALOG-HORSE-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(HORSE HARRY) BL))           (SETQ ANS (PARALOGEXITREDO P AL C)))      (BACKUP OL)      ANS)     ((BACKUP OL)))))(DEFPROP DOG PARALOG-DOG-HARRY PARALOGTHFINAL)(DEFUN PARALOG-DOG-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND       (OR (< DEPTH *DEPTH*)           (NOT (SETQ TERMINATION T)))       (SETQ OL (UNIFY P AL '(DOG $X) BL))       (SETQ ANS             (PARALOGPUSH '(DOG $X)                          '((GREYHOUND $X))                          BL                          C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL)))))(DEFPROP GREYHOUND         PARALOG-GREYHOUND-HARRY         PARALOGTHFINAL)(DEFUN PARALOG-GREYHOUND-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND (SETQ OL (UNIFY P AL '(GREYHOUND GREG) BL))           (SETQ ANS (PARALOGEXITREDO P AL C)))      (BACKUP OL)      ANS)     ((BACKUP OL)))))(DEFPROP FASTER PARALOG-FASTER-HARRY PARALOGTHFINAL)(DEFUN PARALOG-FASTER-HARRY (P AL C)  (LET (BL        OL        ANS)    (SETQ BL (ENVIRONMENT))    (COND     ((AND       (OR (< DEPTH *DEPTH*)           (NOT (SETQ TERMINATION T)))       (SETQ OL (UNIFY P AL '(FASTER $X $Y) BL))       (SETQ ANS             (PARALOGPUSH '(FASTER $X $Y)                          '((HORSE $X) (DOG $Y))                          BL                          C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL))     ((AND       (OR (< DEPTH *DEPTH*)           (NOT (SETQ TERMINATION T)))       (SETQ OL (UNIFY P AL '(FASTER GREG $Z) BL))       (SETQ ANS             (PARALOGPUSH '(FASTER GREG $Z)                          '((RABBIT $Z))                          BL                          C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL))     ((AND       (OR (< DEPTH *DEPTH*)           (NOT (SETQ TERMINATION T)))       (SETQ OL (UNIFY P AL '(FASTER $X $Z) BL))       (SETQ ANS             (PARALOGPUSH '(FASTER $X $Z)                          '((FASTER $X $Y)                            (FASTER $Y $Z))                          BL                          C)))      (BACKUP OL)      (IF (EQ C ANS) NIL ANS))     ((BACKUP OL)))))