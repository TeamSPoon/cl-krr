;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (c) Copyright 1991 Michael R. Genesereth;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; *transforms*;;; *rules*;;; *eliminations*;;; *subsumptions*;;; *methods*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (mgu <expression> <expression>);;;;;; (cnf <sentence>);;; (dnf <sentence>);;; (brf <sentence>);;; (frf <sentence>);;;;;; (clauses <sentence>);;;;;; (apply-transforms <transforms> <database>);;; (apply-rules <rules> <database>);;; (apply-eliminations <eliminations> <database>);;;;;; (prove <database> <sentence>;;;   &key schemata transforms rules eliminations subsumptions method);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(proclaim '(special *lisp*                    *doschemata* *dotransforms* *dorules*                    *doeliminations* *dosubsumptions*))(defun apply-transforms (transforms data)  (do ((l data (cdr l)) (nl))      ((null l) (nreverse nl))      (do ((r transforms (cdr r)))          ((null r))          (setq nl (cons (funcall (car r) (car l)) nl)))))(defun apply-rules (rules data)  (do ((l data (cdr l)) (nl))      ((null l) (nreverse nl))      (do ((m data (cdr m)))          ((null m))          (do ((r rules (cdr r)))              ((null r))              (setq nl (nreconc (funcall (car r) (car l) (car m)) nl))))))(defun apply-eliminations (eliminations data)  (do ((l data (cdr l)) (nl))      ((null l) (nreverse nl))      (do ((r eliminations (cdr r)))          ((null r) (setq nl (cons (car l) nl)))          (if (funcall (car r) (car l)) (return t)))))(defun prove (data goal &key              (schemata)              (transforms '(factor))              (rules '(resolution))              (eliminations '(tautology))              (subsumptions '(subsumes))              (method 'bf))  (let ((*lisp* t)        (*doschemata* schemata)        (*dotransforms* transforms)        (*dorules* rules)        (*doeliminations* eliminations)        (*dosubsumptions* subsumptions))    (funcall method (cons `(or (not ,goal) goal) data)))) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;