;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Graphs;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Problem 1 - showing (=> (edge ?x ?x) (samefamily ?x ?x));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-fulltheory 'graphsa  '((edge a a)        (<= (samefamily ?x ?y) (path ?x ?y))        (<= (samefamily ?x ?y) (path ?y ?x))        (<= (path ?x ?y) (samefamily ?x ?y) (not (path ?y ?x)))        (<= (not (path ?x ?y)) (not (samefamily ?x ?y)))        (<= (path ?x ?y)        (edge ?x ?y))        (<= (path ?x ?z)        (edge ?x ?y)        (path ?y ?z))))(findp '(samefamily a a) 'graphsa);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Results with 10000 step limit and depth 5;;;     14 lines of proof;;;     19 steps of search;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Problem b - showing (=> (samefamily ?x ?y) (samefamily ?y ?x));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-fulltheory 'graphsb  '((samefamily a b)        (<= (samefamily ?x ?y) (path ?x ?y))        (<= (samefamily ?x ?y) (path ?y ?x))        (<= (path ?x ?y) (samefamily ?x ?y) (not (path ?y ?x)))        (<= (not (path ?x ?y)) (not (samefamily ?x ?y)))        (<= (path ?x ?y)        (edge ?x ?y))        (<= (path ?x ?z)        (edge ?x ?y)        (path ?y ?z))))(findp '(samefamily b a) 'graphsb);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Results with 10000 step limit and depth 5;;;     10 lines of proof;;;     17 steps of search;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Problem c - showing transitivity;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-fulltheory 'graphsc  '((samefamily a b)    (samefamily b c)    (<= (samefamily ?x ?y) (path ?x ?y))        (<= (samefamily ?x ?y) (path ?y ?x))        (<= (path ?x ?y) (samefamily ?x ?y) (not (path ?y ?x)))        (<= (not (path ?x ?y)) (not (samefamily ?x ?y)))        (<= (path ?x ?y)        (edge ?x ?y))        (<= (path ?x ?z)        (edge ?x ?y)        (path ?y ?z))))(let ((*depth* 5)) (findp '(samefamily a c) 'graphsc));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Results with 10000 step limit and depth 5;;;      0 lines of proof;;;     22 steps of search;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;