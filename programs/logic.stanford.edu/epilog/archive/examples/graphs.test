;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Graphs;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Background Premises;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deffulltheory graphs  (<= (samefamily ?x ?y) (path ?x ?y))    (<= (samefamily ?x ?y) (path ?y ?x))    (<= (path ?x ?y) (samefamily ?x ?y) (not (path ?y ?x)))    (<= (not (path ?x ?y)) (not (samefamily ?x ?y)))    (<= (path ?x ?y)      (edge ?x ?y))    (<= (path ?x ?z)      (edge ?x ?y)      (path ?y ?z)))*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Problem a - showing (=> (edge ?x ?x) (samefamily ?x ?x));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deffulltheory graphsa  (edge a a))*(includes 'graphsa 'graphs)*(let ((*reduction* t) (*ancestry* t) (*depth* 5))  (fullfindp '(samefamily a a) 'graphsa))T*inferences*49*unifications*272;;; *proof*;;; 14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Problem b - showing (=> (samefamily ?x ?y) (samefamily ?y ?x));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deffulltheory graphsb  (samefamily a b))* (includes 'graphsb 'graphs)*(let ((*reduction* t) (*ancestry* t) (*depth* 5))  (fullfindp '(samefamily b a) 'graphsb))T*inferences*8*unifications*33;;; *proof*;;; 10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Problem c - showing transitivity;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deffulltheory graphsc  (samefamily a b)  (samefamily b c))*(includes 'graphsc 'graphs)*(let ((*reduction* t) (*ancestry* t) (*depth* 5))  (fullfindp '(samefamily a c) 'graphsc))NIL*inferences*116*unifications*755;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;