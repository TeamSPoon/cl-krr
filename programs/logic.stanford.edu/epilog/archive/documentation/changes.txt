;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Summary of changes.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Direct access to methods used to index sentences on atoms.;;; Using these methods, user can change the order in which sentences are used.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod indexees (x th) "(INDEXEES TH)  INDEXEES takes an atom and a theory as arguments and returns a list of the  sentences in the specified theory containing the specified atom."  (getf (gethash x plistarray) th))(defmethod (setf indexees) (sents x th) "(SETF (INDEXEES X TH) SENTS)  SETF is used to modify (INDEXEES X TH).  See INDEXEES."  (setf (getf (gethash x plistarray) th) sents))(defmethod indexees ((x symbol) th)  (get x th))(defmethod (setf indexees) (sents (x symbol) th)  (setf (get x th) sents));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Direct access to methods used to modify theories.;;; User can modify order of contents and included theories.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod contents ((th symbol)) "(CONTENTS TH)  CONTENTS takes a theory as argument and returns a list of the sentences   stored in that theory."  (get th 'sentences))(defmethod (setf contents) (sents (th symbol)) "(SETF (CONTENTS TH) SENTS)  SETF is used to modify (CONTENTS TH).  See CONTENTS."  (setf (get th 'sentences) sents))(defmethod includees ((th symbol)) "(INCLUDEES TH)  INCLUDEES takes a theory as argument and returns a list of its included  theories."  (get th 'includees))(defmethod (setf includees) (ths (th symbol)) "(SETF (INCLUDEES TH) SENTS)  SETF is used to modify (INCLUDEES TH).  See INCLUDEES."  (setf (get th 'includees) ths))(defmethod includers ((th symbol)) "(INCLUDERS TH)  INCLUDERS takes a theory as argument and returns a list of thoeries that  include it."  (get th 'includers))(defmethod (setf includers) (ths (th symbol)) "(SETF (INCLUDERS TH) SENTS)  SETF is used to modify (INCLUDERS TH).  See INCLUDERS."  (setf (get th 'includers) ths));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Class of theories defined allowing the use of instances;;; This way the user can create subclasses with specialized behavior.;;; NB: Symbols may still be used as theories;;;     In this case information still placed on property list.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass theory ()  ((contents  :accessor contents  :initarg :contents   :initform nil)   (includees :accessor includees :initarg :includees  :initform nil)   (includers :accessor includers :initarg :includers  :initform nil)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Indexing methods.  No changes here, just Information about defaults.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod index (p th) "(INDEX P TH)  INDEX takes a sentence P and a theory TH as arguments.  It adds P at the end  of the indexees of all atoms in P.  It also adds P at the end of the contents  of TH and updates *THEORIES* accordingly.  It returns P as value."  (cntxt p th)  (fullindex p p th)  p)(defun fullindex (p d th)  (cond ((atom p) (cond ((null p))                        ((varp p))                        (t (setf (indexees p th) (endeq d (indexees p th))))))	(t (fullindex (car p) d th)	   (fullindex (cdr p) d th))))(defmethod unindex (p th) "(UNINDEX P TH)  UNINDEX takes a sentence P and a theory TH as arguments.  It removes P from  the indexees of all atoms in P.  It also removes P from the contents of TH."  (uncntxt p th)  (fullunindex p p th))(defun fullunindex (p d th)  (cond ((atom p) (cond ((null p))                        ((varp p))                        (t (setf (indexees p th) (delete d (indexees p th))))))	(t (fullunindex (car p) d th)	   (fullunindex (cdr p) d th))))(defmethod indexps (p th) "(INDEXPS P TH)  INDEXPS takes a sentence P and a theory TH as arguments and returns the  indexees of the leading constant in P."  (cond ((varp (setq p (operator p))) (contents th))        ((null p) (contents th))        (t (indexees p th))))(defun operator (x)  (cond ((atom x) x)        ((eq 'not (car x)) (operator (cadr x)))        ((and (memq (car x) '(= /=))  (operator (cadr x))))        (t (car x))));;; EMPTY could be implemented faster.;;; However, must remain this way to allow the user to redefine indexing.(defmethod empty (th) "(EMPTY (TH)  EMPTY takes a theory as argument and unindexes its contents."  (do ((l (contents th) (cdr l)))      ((null l) 'done)      (unindex (car l) th)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ENVINDEXPS defined.  All inference routines call ENVINDEXPS.;;; This allows the user the option of plugging environment into pattern;;; before calling indexing routines.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod envindexps (p env th) "(ENVINDEXPS P ENV TH)  ENVINDEXPS takes an expression, an environment, and a theory as arguments and  returns a list of sentences in the specified theory containing a component  that could potentially unify with the specified expression in the specified  environment.  ENVINDEXPS is used by all inference subroutines.  Users are free  to redefine ENVINDEXPS to implement specialized subroutines.  The default  implementation (INDEXPS P TH) ignores the environment."  (declare (ignore env))  (indexps p th));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Class of environments defined with appropriate accessing methods.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass environment ()  ((alist :accessor alist :initform nil)))(defmethod environment () (make-instance 'environment))(defmethod variables ((env environment)) "(VARIABLES ENV)  VARIABLES takes an environment as argument and returns a list of variables  with bindings in that environment."  (do ((l (alist env) (cdr l)) (nl))      ((null l) (nreverse nl))      (if (cdar l) (setq nl (cons (caar l) nl)))))(defmethod bind (x (e1 environment) y e2) "(BIND X E1 Y E2)  BIND takes a variable, an environment, an expression, and another environment  as arguments.  It binds the specified variable in its specified environment  to have as value the sepcified expression with variable values defined in the  second specified environment."  (let (dum)    (cond ((setq dum (assq x (alist e1))) (setoldbdg dum y e2))          (t (setnewbdg x e1 y e2)))))(defmethod unbind (x (env environment)) "(UNBIND X ENV)  UNBIND takes a variable and an environment as arguments and removes the  binding of the specified variable from the specified environment."  (let (dum)    (if (setq dum (getbdg x env)) (rplacd dum nil))))(defmethod binding (x (env environment)) "(BINDING X ENV)  BINDING takes a variable and an environmen as arguments ans returns as values  the expression associated with the variable and the environment in which its  variables are bound.  PLUG is a recursive version of BINDING."  (let (dum)    (if (setq dum (assq x (alist env))) (values (cadr dum) (cddr dum)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Plugging values from alist or environment into expression.  Note that;;; unbound variables from other environments are gensymed to avoid conflicts.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defgeneric plug (x env) (:documentation "(PLUG X ENV)  PLUG takes an expression and an alist or environment as arguments, substitutes  the associated bindings into the expression, and returns the result.  WARNING:  If the environment is empty, the original expression is returned, i.e. no copy  is made in this case."));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;