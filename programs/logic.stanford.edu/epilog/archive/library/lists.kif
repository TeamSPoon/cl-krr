;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Lists;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defrelation list  (<= (list ?x) (= ?x (listof @l)))  (<= (not (list ?x)) (number ?x)))(defobject nil :=  (listof))(defrelation null (?l) :=  (= ?l (listof)))(defrelation single (?l) :=  (exists (?x) (= ?l (listof ?x))))(defrelation double (?l) :=  (exists (?x ?y) (= ?l (listof ?x ?y))))(defrelation triple (?l) :=  (exists (?x ?y ?z) (= ?l (listof ?x ?y ?z))))(deffunction first (?l) :=  (if (= ?l (listof ?x @items)) ?x))(deffunction rest (?l) :=  (cond ((null ?l) nil)        ((= ?l (listof ?x @items)) (listof @items))))(deffunction last (?l) :=  (cond ((null ?l) bottom)        ((null (rest ?l)) (first ?l))        (true (last (rest ?l)))))(deffunction butlast (?l) :=  (cond ((null ?l) bottom)        ((null (rest ?l)) (listof))        (true (cons (first ?l) (butlast (rest ?l))))))(defrelation item (?x ?l) :=  (and (list ?l) (not (null ?l))       (or (= ?x (first ?l)) (item ?x (rest ?l)))))(defrelation sublist (?l1 ?l2) :=  (and (list ?l1) (list ?l2) (or (= ?l1 ?l2) (sublist ?l1 (rest ?l2)))))(deffunction cons (?x ?l) :=  (if (= ?l (listof @items)) (listof ?x @items)))(deffunction append (?l1 ?l2) :=  (if (null ?l1) (if (list ?l2) ?l2)      (cons (first ?l1) (append (rest ?l1) ?l2))))(deffunction revappend (?l1 ?l2) :=  (if (null ?l1) (if (list ?l2) ?l2)      (revappend (rest ?l1) (cons (first ?l1) ?l2))))(deffunction reverse (?l) :=  (revappend ?l (listof)))(deffunction adjoin (?x ?l) :=  (if (item ?x ?l) ?l (cons ?x ?l)))(deffunction remove (?x ?l) :=  (cond ((null ?l) (listof))        ((= ?x (first ?l)) (remove ?x (rest ?l)))        ((list ?l) (cons (first ?l) (remove ?x (rest ?l))))))(deffunction subst (?x ?y ?z) :=  (cond ((= ?y ?z) ?x)        ((null ?z) (listof))        ((list ?z) (cons (subst ?x ?y (first ?z)) (subst ?x ?y (rest ?z))))        (true ?z)))(deffunction length (?l) :=  (cond ((null ?l) 0)        ((list ?l) (1+ (length (rest ?l))))))(deffunction nth (?l ?n) :=  (cond ((= ?n 1) (first ?l))        ((positive ?n) (nth (rest ?l) (1- ?n)))))(deffunction nthrest (?l ?n) :=  (cond ((= ?n 0) ?l)        ((positive ?n) (nthrest (rest ?l) (1- ?n)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;