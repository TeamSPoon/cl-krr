;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; full.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; fullfindp, fullfindx, fullfinds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(integer 2) 'global)t(fullfindp '(integer 1/2) 'global)nil(fullfindp '(integer 3.2) 'global)nil(fullfindp '(integer #c(1 2)) 'global)nil(fullfindp '(integer a) 'global)nil(fullfindp '(even 2) 'global)t(fullfindp '(even a) 'global)nil(fullfindp '(odd 3) 'global)t(fullfindp '(odd a) 'global)nil(fullfindp '(positive 3) 'global)t(fullfindp '(positive a) 'global)nil(fullfindp '(negative -1) 'global)t(fullfindp '(negative a) 'global)nil(fullfindp '(zero 0) 'global)t(fullfindp '(gcd 2 6 2) 'global)t(fullfindp '(lcm 2 3 6) 'global)t(fullfindp '(isqrt 5 2) 'global)t(fullfindp '(mod 7 2 1) 'global)t(fullfindp '(rem 3 2 1) 'global)t(fullfindp '(ash 1 1 2) 'global)t(fullfindp '(boole 6 1 1 1) 'global)t(fullfindp '(logbit 2 6) 'global)t(fullfindp '(logand 1 1 1) 'global)t(fullfindp '(logandc1 0 1 1) 'global)t(fullfindp '(logandc2 1 0 1) 'global)t(fullfindp '(logcount 3 2) 'global)t(fullfindp '(logeqv 1 1 -1) 'global)t(fullfindp '(logior 1 1 1) 'global)t(fullfindp '(lognand 0 1 -1) 'global)t(fullfindp '(lognor 0 0 -1) 'global)t(fullfindp '(lognot -4 3) 'global)t(fullfindp '(logorc1 0 0 -1) 'global)t(fullfindp '(logorc2 0 0 -1) 'global)t(fullfindp '(logxor 0 1 1) 'global)t(fullfindp '(zero a) 'global)nil(fullfindp '(logbit 0 6) 'global)nil(fullfindp '(logtest 2 6) 'global)t(fullfindp '(logtest 2 -3) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(rationalnumber 1) 'global)t(fullfindp '(rationalnumber 1/2) 'global)t(fullfindp '(rationalnumber 3.2) 'global)nil(fullfindp '(rationalnumber #c(1 2)) 'global)nil(fullfindp '(rationalnumber a) 'global)nil(fullfindp '(numerator 1/2 1) 'global)t(fullfindp '(denominator 1/2 2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(realnumber 1) 'global)t(fullfindp '(realnumber 1/2) 'global)t(fullfindp '(realnumber 3.2) 'global)t(fullfindp '(realnumber #c(1 2)) 'global)nil(fullfindp '(realnumber a) 'global)nil(fullfindp '(< 2 3) 'global)t(fullfindp '(< 3 3) 'global)nil(fullfindp '(< a b) 'global)nil(fullfindp '(=< 2 3) 'global)t(fullfindp '(=< 3 2) 'global)nil(fullfindp '(=< a b) 'global)nil(fullfindp '(> 3 2) 'global)t(fullfindp '(> 3 3) 'global)nil(fullfindp '(> a b) 'global)nil(fullfindp '(>= 3 2) 'global)t(fullfindp '(>= 2 3) 'global)nil(fullfindp '(>= a b) 'global)nil(fullfindp '(+ 1 2 3) 'global)t(fullfindp '(- 3 2 1) 'global)t(fullfindp '(* 2 3 6) 'global)t(fullfindp '(/ 4 2 2) 'global)t(fullfindp '(1+ 1 2) 'global)t(fullfindp '(1- 2 1) 'global)t(fullfindp '(abs -1 1) 'global)t(fullfindp '(exp 0 1) 'global)t(fullfindp '(expt 2 3 8) 'global)t(fullfindp '(log 8 2 3) 'global)t(fullfindp '(sqrt 4 2) 'global)t(fullfindp '(max 1 2 3 3) 'global)t(fullfindp '(min 1 2 3 1) 'global)t(fullfindp '(signum 23 1) 'global)t(fullfindp '(acos 1 0) 'global)t(fullfindp '(acosh 1 0) 'global)t(fullfindp '(asin 0 0) 'global)t(fullfindp '(asinh 0 0) 'global)t(fullfindp '(atan 0 0) 'global)t(fullfindp '(atanh 0 0) 'global)t(fullfindp '(cos 0 1) 'global)t(fullfindp '(cosh 0 1) 'global)t(fullfindp '(sin 0 0) 'global)t(fullfindp '(sinh 0 0) 'global)t(fullfindp '(tan 0 0) 'global)t(fullfindp '(tanh 0 0) 'global)t(fullfindp '(ceiling 1.6 2) 'global)t(fullfindp '(floor 1.6 1) 'global)t(fullfindp '(round 1.6 2) 'global)t(fullfindp '(truncate 1.6 1) 'global)t(fullfindp '(rationalize 0.5 1/2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(complexnumber 1) 'global)nil ;;; t?(fullfindp '(complexnumber 1/2) 'global)nil ;;; t?(fullfindp '(complexnumber 3.2) 'global)nil ;;; t?(fullfindp '(complexnumber #c(1 2)) 'global)t(fullfindp '(complexnumber a) 'global)nil(fullfindp '(conjugate #c(1 1) #c(1 -1)) 'global)t(fullfindp '(complex 1 1 #c(1 1)) 'global)t(fullfindp '(realpart #c(1 2) 1) 'global)t(fullfindp '(imagpart #c(1 2) 2) 'global)t(fullfindp '(cis 0 #c(1 0)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(number 1) 'global)t(fullfindp '(number 1/2) 'global)t(fullfindp '(number 3.2) 'global)t(fullfindp '(number #c(1 2)) 'global)t(fullfindp '(number a) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(character #\a) 'test)t(fullfindp '(character "a") 'test)nil(fullfindp '(character a) 'test)nil(fullfindp '(alphabetic #\a) 'test)t(fullfindp '(alphabetic #\1) 'test)nil(fullfindp '(uppercase #\A) 'test)t(fullfindp '(uppercase #\a) 'test)nil(fullfindp '(lowercase #\a) 'test)t(fullfindp '(lowercase #\A) 'test)nil(fullfindp '(digit #\1) 'test)t(fullfindp '(digit #\a) 'test)nil(fullfindp '(alphanumeric #\a) 'test)t(fullfindp '(alphanumeric #\1) 'test)t(fullfindp '(alphanumeric #\.) 'test)nil(fullfindp '(chargreater #\b #\a) 'test)t(fullfindp '(chargreater #\a #\b) 'test)nil(fullfindp '(charless #\a #\b) 'test)t(fullfindp '(charless #\b #\a) 'test)nil(fullfindp '(charupcase #\a #\A) 'test)t(fullfindp '(chardowncase #\A #\a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(string #\a) 'test)nil(fullfindp '(string "a") 'test)t(fullfindp '(string a) 'test)nil(fullfindp '(stringgreater "bbc" "abc") 'test)t(fullfindp '(stringgreater "abc" "bbc") 'test)nil(fullfindp '(stringless "abc" "bbc") 'test)t(fullfindp '(stringless "bbc" "abc") 'test)nil(fullfindp '(substring "bc" "abcd") 'test)t(fullfindp '(substring "abcd" "ab") 'test)nil(fullfindp '(stringlength "abc" 3) 'test)t(fullfindp '(stringelement "abc" 2 #\b) 'test)t(fullfindp '(stringsubseq "abcd" 2 3 "bc") 'test)t(fullfindp '(stringalphanumeric " a bc'd-e " "abcde") 'test)t(fullfindp '(stringappend "abc" "def" "ghi" "abcdefghi") 'test)t(fullfindp '(stringappend "" "") 'test)t(fullfindp '(stringcharpos #\b "abc" 2) 'test)t(fullfindx '?x '(stringcharpos #\d "abc" ?x) 'test)nil(fullfindp '(stringposition "bc" "abcd" 2) 'test)t(fullfindx '?x '(stringposition "cb" "abcd" ?x) 'test)nil(fullfindp '(stringsubstitute #\a #\b "abab" "aaaa") 'test)t(fullfindp '(stringupcase "abc" "ABC") 'test)t(fullfindp '(stringdowncase "ABC" "abc") 'test)t(fullfindp '(stringcapitalize "abc.def" "Abc.Def") 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(charstring #\a "a") 'test)t(fullfindp '(stringify a "A") 'test)t(fullfindp '(symbolize "a" a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(word 'a) 'global)t(fullfindp '(word a) 'global)nil(fullfindp '(indvar '?x) 'global)t(fullfindp '(indvar a) 'global)nil(fullfindp '(seqvar '@l) 'global)t(fullfindp '(seqvar a) 'global)nil(fullfindp '(variable '?x) 'global)t(fullfindp '(variable '@l) 'global)t(fullfindp '(variable a) 'global)nil(fullfindp '(same a a) 'global)t(fullfindp '(same a b) 'global)nil(fullfindp '(distinct a a) 'global)nil(fullfindp '(distinct a b) 'global)t(fullfindp '(oneof b a b c) 'global)t(fullfindp '(oneof d a b c) 'global)nil(fullfindp '(choose ?x (oneof ?x a b c) a) 'global)t(fullfindp '(choose ?x (oneof ?x a b c) b) 'global)nil(fullfindp '(bagofall ?x (oneof ?x a b c) (listof a b c)) 'global)t(fullfindp '(bagofall ?x (oneof ?x a b c) (listof a)) 'global)nil(fullfindp '(ground a) 'global)t(fullfindp '(ground ?x) 'global)nil(fullfindp '(nonground a) 'global)nil(fullfindp '(nonground ?x) 'global)t(fullfindp '(execute (member 'b '(a b c)) '(b c)) 'global)t(fullfindp '(evaluate (member b (a b c)) (b c)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp 'true 'global)t(fullfindp 'false 'global)nil(fullfindp '(not true) 'global)nil(fullfindp '(not false) 'global)t(fullfindp '(and true true) 'global)t(fullfindp '(and true false) 'global)nil(fullfindp '(and false true) 'global)nil(fullfindp '(and false false) 'global)nil(fullfindp '(or true true) 'global)t(fullfindp '(or true false) 'global)t(fullfindp '(or false true) 'global)t(fullfindp '(or false false) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory partial  (<= (p a) (not (q a)))  (<= (q a) (not (p a)))  (<= (r ?x) (p ?x))  (<= (not (p ?x)) (not (r ?x)))  (<= (r ?x) (q ?x))  (<= (not (q ?x)) (not (r ?x))))*(fullfindp '(r a) 'partial)T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (parent art bob)  (parent bob cal)  (parent bob coe)  (<= (grandparent ?x ?z) (parent ?x ?y) (parent ?y ?z)))*(fullfindp '(grandparent art cal) 'global)T(fullfindx '?x '(grandparent ?x cal) 'global)ART(fullfindx '?y '(grandparent art ?y) 'global)CAL(fullfinds '?y '(grandparent art ?y) 'global)(CAL COE)(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (= (append (listof) ?m) ?m)  (<= (= (append (listof ?x @l) ?m) (listof ?x @n))      (= (append (listof @l) ?m) (listof @n))))*(fullfindx '?z '(= (append (listof 1 2) (listof 3 4)) ?z) 'global)(listof 1 2 3 4)(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory group        (<= (= (* ?x ?y) ?x) (= ?y e))        (<= (= (* ?y ?x) ?x) (= ?y e))        (<= (= (* ?x ?y) e) (= ?y (inv ?x)))        (<= (= (* ?x ?v) ?w)            (= (* ?y ?z) ?v)            (= (* ?x ?y) ?u)            (= (* ?u ?z) ?w)))GROUP(deftheory equality        (= ?x ?x)        (<= (= ?x ?y) (= ?y ?x))        (<= (= ?x ?z) (= ?x ?y) (= ?y ?z)))EQUALITY(includes 'group 'equality)T(let ((*depth* 5)) (fullfindp '(= (* (inv x) x) e) 'group))T(= *inferences* 421)T(= *unifications* 1230)T(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global        (p a)        (p b)        (q b)        (<= (r ?x) (p ?x) (q ?x)))GLOBAL(let ((*depth* 0)) (fullfindp '(p a) 'global))NIL*termination*T(let ((*depth* 1)) (fullfindp '(p a) 'global))T(let ((*depth* 1)) (fullfindp '(r b) 'global))NIL*termination*T(let ((*depth* 2)) (fullfindp '(r b) 'global))T(let ((*depth* 1)) (fullfindp '(s b) 'global))NIL*termination*NIL(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (<= (t ?x) (t ?x)))*(let ((*depth* 10) (*ancestry* nil)) (fullfindp '(t a) 'global))NIL*termination*T(let ((*depth* 10) (*ancestry* t)) (fullfindp '(t a) 'global))NIL*termination*NIL(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; fullresidue;;; fullresidues;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global    (NOT (DOIT P NOW))    (NOT (DOIT Q NOW))    (NOT (DOIT (not Q) NOW))    (<= (true p (next ?s))        (doit p ?s))    (<= (true q (next ?s))        (doit q ?s))    (<= (true p (next ?s))        (true p ?s)        (not (doit (not p) ?s)))    (<= (true q (next ?s))        (true q ?s)        (not (doit (not q) ?s)))    (<= (not (true p (next ?s)))        (not (true p ?s))        (not (doit p ?s)))    (<= (not (true q (next ?s)))        (not (true q ?s))        (not (doit q ?s)))    (<= (true p ?s)        (true p (next ?s))        (not (doit p ?s)))    (<= (good now))    (<= (good (next ?s)) (great (next ?s)) (good ?s))    (<= (great now))    (<= (great ?s) (true q ?s))    (<= (great ?s) (not (true p ?s)))    (<= (true p ?s)        (not (great ?s)))    (<= (not (great ?s))        (true p ?s)        (not (true q ?s)))    (<= (not (true p ?s))        (great ?s)        (not (true q ?s)))    (<= (true q ?s)        (great ?s)        (true p ?s)))*(let ((*depth* 6)) (fullfindp '(great (next now)) 'global))T(let ((*depth* 6)) (fullresidue '(great (next now)) 'global  #'failure  #'(lambda (x) (eq x 'doit))  #'(lambda (x) (or (atom x)                    (and (eq 'not (car x))                         (listp (cadr x))                         (eq 'doit (caadr x)))))))(DOIT Q NOW)(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; deffulltheory;;; define-fulltheory;;; fullassume;;; fullprovep;;; fullprovex;;; fullproves;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defcontratheory global  (<= (r ?x) (p ?x) (q ?x)))global(contents 'global)((<= (R ?X) (P ?X) (Q ?X)) (<= (NOT (P ?X)) (NOT (R ?X)) (Q ?X)) (<= (NOT (Q ?X)) (NOT (R ?X)) (P ?X)))(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullinsert '(<= (r ?x) (p ?x) (q ?x)) 'global)DONE(contents 'global)((<= (R ?X) (P ?X) (Q ?X)) (<= (NOT (P ?X)) (NOT (R ?X)) (Q ?X)) (<= (NOT (Q ?X)) (NOT (R ?X)) (P ?X)))(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fullfindp '(or p (not p)) 'global)nil(fullprovep '(or p (not p)) 'global)T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;