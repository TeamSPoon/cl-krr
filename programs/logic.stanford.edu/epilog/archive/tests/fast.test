;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; data.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; fastfindp,, fastfindx, fastfinds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(integer 2) 'global)t(fastfindp '(integer 1/2) 'global)nil(fastfindp '(integer 3.2) 'global)nil(fastfindp '(integer #c(1 2)) 'global)nil(fastfindp '(integer a) 'global)nil(fastfindp '(even 2) 'global)t(fastfindp '(even a) 'global)nil(fastfindp '(odd 3) 'global)t(fastfindp '(odd a) 'global)nil(fastfindp '(positive 3) 'global)t(fastfindp '(positive a) 'global)nil(fastfindp '(negative -1) 'global)t(fastfindp '(negative a) 'global)nil(fastfindp '(zero 0) 'global)t(fastfindp '(gcd 2 6 2) 'global)t(fastfindp '(lcm 2 3 6) 'global)t(fastfindp '(isqrt 5 2) 'global)t(fastfindp '(mod 7 2 1) 'global)t(fastfindp '(rem 3 2 1) 'global)t(fastfindp '(ash 1 1 2) 'global)t(fastfindp '(boole 6 1 1 1) 'global)t(fastfindp '(logbit 2 6) 'global)t(fastfindp '(logand 1 1 1) 'global)t(fastfindp '(logandc1 0 1 1) 'global)t(fastfindp '(logandc2 1 0 1) 'global)t(fastfindp '(logcount 3 2) 'global)t(fastfindp '(logeqv 1 1 -1) 'global)t(fastfindp '(logior 1 1 1) 'global)t(fastfindp '(lognand 0 1 -1) 'global)t(fastfindp '(lognor 0 0 -1) 'global)t(fastfindp '(lognot -4 3) 'global)t(fastfindp '(logorc1 0 0 -1) 'global)t(fastfindp '(logorc2 0 0 -1) 'global)t(fastfindp '(logxor 0 1 1) 'global)t(fastfindp '(zero a) 'global)nil(fastfindp '(logbit 0 6) 'global)nil(fastfindp '(logtest 2 6) 'global)t(fastfindp '(logtest 2 -3) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(rationalnumber 1) 'global)t(fastfindp '(rationalnumber 1/2) 'global)t(fastfindp '(rationalnumber 3.2) 'global)nil(fastfindp '(rationalnumber #c(1 2)) 'global)nil(fastfindp '(rationalnumber a) 'global)nil(fastfindp '(numerator 1/2 1) 'global)t(fastfindp '(denominator 1/2 2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(realnumber 1) 'global)t(fastfindp '(realnumber 1/2) 'global)t(fastfindp '(realnumber 3.2) 'global)t(fastfindp '(realnumber #c(1 2)) 'global)nil(fastfindp '(realnumber a) 'global)nil(fastfindp '(< 2 3) 'global)t(fastfindp '(< 3 3) 'global)nil(fastfindp '(< a b) 'global)nil(fastfindp '(=< 2 3) 'global)t(fastfindp '(=< 3 2) 'global)nil(fastfindp '(=< a b) 'global)nil(fastfindp '(> 3 2) 'global)t(fastfindp '(> 3 3) 'global)nil(fastfindp '(> a b) 'global)nil(fastfindp '(>= 3 2) 'global)t(fastfindp '(>= 2 3) 'global)nil(fastfindp '(>= a b) 'global)nil(fastfindp '(+ 1 2 3) 'global)t(fastfindp '(- 3 2 1) 'global)t(fastfindp '(* 2 3 6) 'global)t(fastfindp '(/ 4 2 2) 'global)t(fastfindp '(1+ 1 2) 'global)t(fastfindp '(1- 2 1) 'global)t(fastfindp '(abs -1 1) 'global)t(fastfindp '(exp 0 1) 'global)t(fastfindp '(expt 2 3 8) 'global)t(fastfindp '(log 8 2 3) 'global)t(fastfindp '(sqrt 4 2) 'global)t(fastfindp '(max 1 2 3 3) 'global)t(fastfindp '(min 1 2 3 1) 'global)t(fastfindp '(signum 23 1) 'global)t(fastfindp '(acos 1 0) 'global)t(fastfindp '(acosh 1 0) 'global)t(fastfindp '(asin 0 0) 'global)t(fastfindp '(asinh 0 0) 'global)t(fastfindp '(atan 0 0) 'global)t(fastfindp '(atanh 0 0) 'global)t(fastfindp '(cos 0 1) 'global)t(fastfindp '(cosh 0 1) 'global)t(fastfindp '(sin 0 0) 'global)t(fastfindp '(sinh 0 0) 'global)t(fastfindp '(tan 0 0) 'global)t(fastfindp '(tanh 0 0) 'global)t(fastfindp '(ceiling 1.6 2) 'global)t(fastfindp '(floor 1.6 1) 'global)t(fastfindp '(round 1.6 2) 'global)t(fastfindp '(truncate 1.6 1) 'global)t(fastfindp '(rationalize 0.5 1/2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(complexnumber 1) 'global)nil ;;; t?(fastfindp '(complexnumber 1/2) 'global)nil ;;; t?(fastfindp '(complexnumber 3.2) 'global)nil ;;; t?(fastfindp '(complexnumber #c(1 2)) 'global)t(fastfindp '(complexnumber a) 'global)nil(fastfindp '(conjugate #c(1 1) #c(1 -1)) 'global)t(fastfindp '(complex 1 1 #c(1 1)) 'global)t(fastfindp '(realpart #c(1 2) 1) 'global)t(fastfindp '(imagpart #c(1 2) 2) 'global)t(fastfindp '(cis 0 #c(1 0)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(number 1) 'global)t(fastfindp '(number 1/2) 'global)t(fastfindp '(number 3.2) 'global)t(fastfindp '(number #c(1 2)) 'global)t(fastfindp '(number a) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(character #\a) 'test)t(fastfindp '(character "a") 'test)nil(fastfindp '(character a) 'test)nil(fastfindp '(alphabetic #\a) 'test)t(fastfindp '(alphabetic #\1) 'test)nil(fastfindp '(uppercase #\A) 'test)t(fastfindp '(uppercase #\a) 'test)nil(fastfindp '(lowercase #\a) 'test)t(fastfindp '(lowercase #\A) 'test)nil(fastfindp '(digit #\1) 'test)t(fastfindp '(digit #\a) 'test)nil(fastfindp '(alphanumeric #\a) 'test)t(fastfindp '(alphanumeric #\1) 'test)t(fastfindp '(alphanumeric #\.) 'test)nil(fastfindp '(chargreater #\b #\a) 'test)t(fastfindp '(chargreater #\a #\b) 'test)nil(fastfindp '(charless #\a #\b) 'test)t(fastfindp '(charless #\b #\a) 'test)nil(fastfindp '(charupcase #\a #\A) 'test)t(fastfindp '(chardowncase #\A #\a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(string #\a) 'test)nil(fastfindp '(string "a") 'test)t(fastfindp '(string a) 'test)nil(fastfindp '(stringgreater "bbc" "abc") 'test)t(fastfindp '(stringgreater "abc" "bbc") 'test)nil(fastfindp '(stringless "abc" "bbc") 'test)t(fastfindp '(stringless "bbc" "abc") 'test)nil(fastfindp '(substring "bc" "abcd") 'test)t(fastfindp '(substring "abcd" "ab") 'test)nil(fastfindp '(stringlength "abc" 3) 'test)t(fastfindp '(stringelement "abc" 2 #\b) 'test)t(fastfindp '(stringsubseq "abcd" 2 3 "bc") 'test)t(fastfindp '(stringalphanumeric " a bc'd-e " "abcde") 'test)t(fastfindp '(stringappend "abc" "def" "ghi" "abcdefghi") 'test)t(fastfindp '(stringappend "" "") 'test)t(fastfindp '(stringcharpos #\b "abc" 2) 'test)t(fastfindx '?x '(stringcharpos #\d "abc" ?x) 'test)nil(fastfindp '(stringposition "bc" "abcd" 2) 'test)t(fastfindx '?x '(stringposition "cb" "abcd" ?x) 'test)nil(fastfindp '(stringsubstitute #\a #\b "abab" "aaaa") 'test)t(fastfindp '(stringupcase "abc" "ABC") 'test)t(fastfindp '(stringdowncase "ABC" "abc") 'test)t(fastfindp '(stringcapitalize "abc.def" "Abc.Def") 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(charstring #\a "a") 'test)t(fastfindp '(stringify a "A") 'test)t(fastfindp '(symbolize "a" a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfindp '(same a a) 'global)t(fastfindp '(same a b) 'global)nil(fastfindp '(distinct a a) 'global)nil(fastfindp '(distinct a b) 'global)t(fastfindp '(word 'a) 'global)t(fastfindp '(word a) 'global)nil(fastfindp '(indvar '?x) 'global)t(fastfindp '(indvar a) 'global)nil(fastfindp '(seqvar '@l) 'global)t(fastfindp '(seqvar a) 'global)nil(fastfindp '(variable '?x) 'global)t(fastfindp '(variable '@l) 'global)t(fastfindp '(variable a) 'global)nil(fastfindp '(execute (member 'b '(a b c)) '(b c)) 'global)t(fastfindp '(evaluate (member b (a b c)) (b c)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;