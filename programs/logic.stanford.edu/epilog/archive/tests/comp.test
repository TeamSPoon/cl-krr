;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; comp.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; compfindp, compfindx, compfinds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(integer 2) nil nil)t(compfindp '(integer 1/2) nil nil)nil(compfindp '(integer 3.2) nil nil)nil(compfindp '(integer #c(1 2)) nil nil)nil(compfindp '(integer a) nil nil)nil(compfindp '(even 2) nil nil)t(compfindp '(even a) nil nil)nil(compfindp '(odd 3) nil nil)t(compfindp '(odd a) nil nil)nil(compfindp '(positive 3) nil nil)t(compfindp '(positive a) nil nil)nil(compfindp '(negative -1) nil nil)t(compfindp '(negative a) nil nil)nil(compfindp '(zero 0) nil nil)t(compfindp '(gcd 2 6 2) nil nil)t(compfindp '(lcm 2 3 6) nil nil)t(compfindp '(isqrt 5 2) nil nil)t(compfindp '(mod 7 2 1) nil nil)t(compfindp '(rem 3 2 1) nil nil)t(compfindp '(ash 1 1 2) nil nil)t(compfindp '(boole 6 1 1 1) nil nil)t(compfindp '(logbit 2 6) nil nil)t(compfindp '(logand 1 1 1) nil nil)t(compfindp '(logandc1 0 1 1) nil nil)t(compfindp '(logandc2 1 0 1) nil nil)t(compfindp '(logcount 3 2) nil nil)t(compfindp '(logeqv 1 1 -1) nil nil)t(compfindp '(logior 1 1 1) nil nil)t(compfindp '(lognand 0 1 -1) nil nil)t(compfindp '(lognor 0 0 -1) nil nil)t(compfindp '(lognot -4 3) nil nil)t(compfindp '(logorc1 0 0 -1) nil nil)t(compfindp '(logorc2 0 0 -1) nil nil)t(compfindp '(logxor 0 1 1) nil nil)t(compfindp '(zero a) nil nil)nil(compfindp '(logbit 0 6) nil nil)nil(compfindp '(logtest 2 6) nil nil)t(compfindp '(logtest 2 -3) nil nil)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(rationalnumber 1) nil nil)t(compfindp '(rationalnumber 1/2) nil nil)t(compfindp '(rationalnumber 3.2) nil nil)nil(compfindp '(rationalnumber #c(1 2)) nil nil)nil(compfindp '(rationalnumber a) nil nil)nil(compfindp '(numerator 1/2 1) nil nil)t(compfindp '(denominator 1/2 2) nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(realnumber 1) nil nil)t(compfindp '(realnumber 1/2) nil nil)t(compfindp '(realnumber 3.2) nil nil)t(compfindp '(realnumber #c(1 2)) nil nil)nil(compfindp '(realnumber a) nil nil)nil(compfindp '(< 2 3) nil nil)t(compfindp '(< 3 3) nil nil)nil(compfindp '(< a b) nil nil)nil(compfindp '(=< 2 3) nil nil)t(compfindp '(=< 3 2) nil nil)nil(compfindp '(=< a b) nil nil)nil(compfindp '(> 3 2) nil nil)t(compfindp '(> 3 3) nil nil)nil(compfindp '(> a b) nil nil)nil(compfindp '(>= 3 2) nil nil)t(compfindp '(>= 2 3) nil nil)nil(compfindp '(>= a b) nil nil)nil(compfindp '(+ 1 2 3) nil nil)t(compfindp '(- 3 2 1) nil nil)t(compfindp '(* 2 3 6) nil nil)t(compfindp '(/ 4 2 2) nil nil)t(compfindp '(1+ 1 2) nil nil)t(compfindp '(1- 2 1) nil nil)t(compfindp '(abs -1 1) nil nil)t(compfindp '(exp 0 1) nil nil)t(compfindp '(expt 2 3 8) nil nil)t(compfindp '(log 8 2 3) nil nil)t(compfindp '(sqrt 4 2) nil nil)t(compfindp '(max 1 2 3 3) nil nil)t(compfindp '(min 1 2 3 1) nil nil)t(compfindp '(signum 23 1) nil nil)t(compfindp '(acos 1 0) nil nil)t(compfindp '(acosh 1 0) nil nil)t(compfindp '(asin 0 0) nil nil)t(compfindp '(asinh 0 0) nil nil)t(compfindp '(atan 0 0) nil nil)t(compfindp '(atanh 0 0) nil nil)t(compfindp '(cos 0 1) nil nil)t(compfindp '(cosh 0 1) nil nil)t(compfindp '(sin 0 0) nil nil)t(compfindp '(sinh 0 0) nil nil)t(compfindp '(tan 0 0) nil nil)t(compfindp '(tanh 0 0) nil nil)t(compfindp '(ceiling 1.6 2) nil nil)t(compfindp '(floor 1.6 1) nil nil)t(compfindp '(round 1.6 2) nil nil)t(compfindp '(truncate 1.6 1) nil nil)t(compfindp '(rationalize 0.5 1/2) nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(complexnumber 1) nil nil)nil ;;; t?(compfindp '(complexnumber 1/2) nil nil)nil ;;; t?(compfindp '(complexnumber 3.2) nil nil)nil ;;; t?(compfindp '(complexnumber #c(1 2)) nil nil)t(compfindp '(complexnumber a) nil nil)nil(compfindp '(conjugate #c(1 1) #c(1 -1)) nil nil)t(compfindp '(complex 1 1 #c(1 1)) nil nil)t(compfindp '(realpart #c(1 2) 1) nil nil)t(compfindp '(imagpart #c(1 2) 2) nil nil)t(compfindp '(cis 0 #c(1 0)) nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(number 1) nil nil)t(compfindp '(number 1/2) nil nil)t(compfindp '(number 3.2) nil nil)t(compfindp '(number #c(1 2)) nil nil)t(compfindp '(number a) nil nil)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(character #\a) nil nil)t(compfindp '(character "a") nil nil)nil(compfindp '(character a) nil nil)nil(compfindp '(alphabetic #\a) nil nil)t(compfindp '(alphabetic #\1) nil nil)nil(compfindp '(uppercase #\A) nil nil)t(compfindp '(uppercase #\a) nil nil)nil(compfindp '(lowercase #\a) nil nil)t(compfindp '(lowercase #\A) nil nil)nil(compfindp '(digit #\1) nil nil)t(compfindp '(digit #\a) nil nil)nil(compfindp '(alphanumeric #\a) nil nil)t(compfindp '(alphanumeric #\1) nil nil)t(compfindp '(alphanumeric #\.) nil nil)nil(compfindp '(chargreater #\b #\a) nil nil)t(compfindp '(chargreater #\a #\b) nil nil)nil(compfindp '(charless #\a #\b) nil nil)t(compfindp '(charless #\b #\a) nil nil)nil(compfindp '(charupcase #\a #\A) nil nil)t(compfindp '(chardowncase #\A #\a) nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(string #\a) nil nil)nil(compfindp '(string "a") nil nil)t(compfindp '(string a) nil nil)nil(compfindp '(stringgreater "bbc" "abc") nil nil)t(compfindp '(stringgreater "abc" "bbc") nil nil)nil(compfindp '(stringless "abc" "bbc") nil nil)t(compfindp '(stringless "bbc" "abc") nil nil)nil(compfindp '(substring "bc" "abcd") nil nil)t(compfindp '(substring "abcd" "ab") nil nil)nil(compfindp '(stringlength "abc" 3) nil nil)t(compfindp '(stringelement "abc" 2 #\b) nil nil)t(compfindp '(stringsubseq "abcd" 2 3 "bc") nil nil)t(compfindp '(stringalphanumeric " a bc'd-e " "abcde") nil nil)t(compfindp '(stringappend "abc" "def" "ghi" "abcdefghi") nil nil)t(compfindp '(stringappend "" "") nil nil)t(compfindp '(stringcharpos #\b "abc" 2) nil nil)t(compfindx '?x '(stringcharpos #\d "abc" ?x) nil nil)nil(compfindp '(stringposition "bc" "abcd" 2) nil nil)t(compfindx '?x '(stringposition "cb" "abcd" ?x) nil nil)nil(compfindp '(stringsubstitute #\a #\b "abab" "aaaa") nil nil)t(compfindp '(stringupcase "abc" "ABC") nil nil)t(compfindp '(stringdowncase "ABC" "abc") nil nil)t(compfindp '(stringcapitalize "abc.def" "Abc.Def") nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(charstring #\a "a") nil nil)t(compfindp '(stringify a "A") nil nil)t(compfindp '(symbolize "a" a) nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp '(word 'a) nil nil)t(compfindp '(word a) nil nil)nil(compfindp '(indvar '?x) nil nil)t(compfindp '(indvar a) nil nil)nil(compfindp '(seqvar '@l) nil nil)t(compfindp '(seqvar a) nil nil)nil(compfindp '(variable '?x) nil nil)t(compfindp '(variable '@l) nil nil)t(compfindp '(variable a) nil nil)nil(compfindp '(same a a) nil nil)t(compfindp '(same a b) nil nil)nil(compfindp '(distinct a a) nil nil)nil(compfindp '(distinct a b) nil nil)t(compfindp '(oneof b a b c) nil nil)t(compfindp '(oneof d a b c) nil nil)nil(compfindp '(choose ?x (oneof ?x a b c) a) nil nil)t(compfindp '(choose ?x (oneof ?x a b c) b) nil nil)nil(compfindp '(bagofall ?x (oneof ?x a b c) (listof a b c)) nil nil)t(compfindp '(bagofall ?x (oneof ?x a b c) (listof a)) nil nil)nil(compfindp '(ground a) nil nil)t(compfindp '(ground ?x) nil nil)nil(compfindp '(nonground a) nil nil)nil(compfindp '(nonground ?x) nil nil)t(compfindp '(execute (member 'b '(a b c)) '(b c)) nil nil)t(compfindp '(evaluate (member b (a b c)) (b c)) nil nil)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(compfindp 'true nil nil)t(compfindp 'false nil nil)nil(compfindp '(not true) nil nil)nil(compfindp '(not false) nil nil)t(compfindp '(and true true) nil nil)t(compfindp '(and true false) nil nil)nil(compfindp '(and false true) nil nil)nil(compfindp '(and false false) nil nil)nil(compfindp '(or true true) nil nil)t(compfindp '(or true false) nil nil)t(compfindp '(or false true) nil nil)t(compfindp '(or false false) nil nil)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory data  (p a)  (p b)  (p c)  (q b)  (q c))*(compfindp '(and (p b) (q b)) 'data nil)t(compfindp '(or (p a) (q a)) 'data nil)t(compfindx '?x '(and (p ?x) (q ?x)) 'data nil)b(compfindx '?x '(or (p ?x) (q ?x)) 'data nil)a(compfinds '?x '(and (p ?x) (q ?x)) 'data nil)(b c)(compfinds '?x '(or (p ?x) (q ?x)) 'data nil)(a b c);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory data  (pp a a)  (pp a b)  (qq b c))*(deftheory rules  (<= (r ?x ?y ?z) (pp ?x ?y) (qq ?y ?z)))*(compfindp '(and (pp a b) (qq b c)) 'data 'rules)t(compfindx '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'data 'rules)(a b c)(compfinds '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'data 'rules)((a b c))(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;