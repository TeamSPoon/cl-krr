;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; overview.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; save, drop;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent art bea) 'global)(PARENT ART BEA)(save '(parent art bess) 'global)(PARENT ART BESS);;;;(knownp '(parent art bob) 'global)T(knownp '(parent ?x bob) 'global)T(knownp '(parent @l) 'global)T;;;;(knownx '?x '(parent ?x bob) 'global)ART(knownx '?y '(parent art ?y) 'global)BOB(knownx '(related @l) '(parent @l) 'global)(RELATED ART BOB);;;;(knowns '?y '(parent art ?y) 'global)(BOB BEA BESS)(knowns '(related ?x ?y) '(parent ?x ?y) 'global)((RELATED ART BOB) (RELATED ART BEA) (RELATED ART BESS));;;;(setq gen (knowng '?y '(parent art ?y) 'global))*(funcall gen)BOB(funcall gen)BEA(funcall gen)BESS(funcall gen)NIL;;;;(drop '(parent art bess) 'global)T(knowns '?y '(parent art ?y) 'global)(BOB BEA);;;;(save '(parent art bill) 'mytheory)(PARENT ART BILL)(save '(parent art betty) 'mytheory)(PARENT ART BETTY)(knowns '?y '(parent art ?y) 'mytheory)(BILL BETTY);;;;(deftheory another  (parent art ben)  (parent art barbara))ANOTHER(knowns '?y '(parent art ?y) 'another)(BEN BARBARA);;;;(knowns '?y '(parent art ?y) 'global)(BOB BEA);;;;(includes 'mytheory 'global)T(knowns '?y '(parent art ?y) 'mytheory)(BILL BETTY BOB BEA)(includees 'mytheory)(GLOBAL)*includers*(MYTHEORY);;;;*theories*(ANOTHER MYTHEORY GLOBAL)(empty 'global)GLOBAL*theories*(ANOTHER MYTHEORY)(reset)*;;;;(knownp '(> 3 2) 'global)NIL(findp '(> 3 2) 'global)T;;;;(save '(<= (grandparent ?x ?z) (parent ?x ?y) (parent ?y ?z))            'global)(<= (GRANDPARENT ?X ?Z) (PARENT ?X ?Y) (PARENT ?Y ?Z))(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent bob cal) 'global)(PARENT BOB CAL)(save '(parent bob coe) 'global)(PARENT BOB COE)(knownp '(grandparent art cal) 'global)NIL(findp '(grandparent art cal) 'global)T(findx '?x '(grandparent ?x cal) 'global)ART(findx '?y '(grandparent art ?y) 'global)CAL(finds '?y '(grandparent art ?y) 'global)(CAL COE)(setq gen (findg '?y '(grandparent art ?y) 'global))*(funcall gen)CAL(funcall gen)COE(funcall gen)NIL;;;;(setq *saves* '(family))(FAMILY)(save '(=> (family ?x ?z) (parent ?x ?y) (family ?y ?z)) 'global)(=> (FAMILY ?X ?Z) (PARENT ?X ?Y) (FAMILY ?Y ?Z))(assume '(family art garfunkel) 'global)T(knowns '?x '(family ?x garfunkel) 'global)(ART BOB CAL COE);;;;(save '(= (append (listof) ?m) ?m) 'global)*(save '(<= (= (append (listof ?x @l) ?m) (listof ?x @n))                 (= (append (listof @l) ?m) (listof @n)))            'global)*;;;;(findx '?z '(= (append (listof 1 2) (listof 3 4)) ?z) 'global)(listof 1 2 3 4);;;;(save '(believes john '(material moon stilton)) 'global)(BELIEVES JOHN '(MATERIAL MOON STILTON));;;;(save '(<= (believes mary ?p) (believes john ?p)) 'global)(<= (BELIEVES MARY ?P) (BELIEVES JOHN ?P))(findp '(believes mary '(material moon stilton)) 'global)T;;;;(findp '(believes mary (listof 'material 'moon 'stilton)) 'global)T(findx '?y '(believes mary (listof 'material 'moon ?y)) 'global)'STILTON;;;;(findx '?y '(believes mary ^(material moon ,?y)) 'global)'STILTON;;;;(save '(<= (believes lisa ^(material moon ,?y))           (believes john ^(material moon ,?y))) 'global)*(findp '(believes lisa '(material moon stilton)) 'global)T;;;;(save '(<= (resolution ^(or ,?p ,@l) ^(or (not ,?p) ,@m) ^(or ,@n))           (= (append (listof @l) (listof @m)) (listof @n)))      'global)*;;;;(findx '?r '(resolution '(or p q) '(or (not p) (not r)) ?r) 'global)(LISTOF 'OR 'Q '(NOT R));;;;(findp '(> 3 2) 'global)T;;;;(deftheory global        (p art bob)        (p art bea)        (p art bess)        (= (length (listof)) 0)        (<= (= (length (listof ?x @l)) ?n)               (= (length (listof @l)) ?n1)               (+ ?n1 1 ?n))        (<= (numchildren ?x ?z)            (execute (finds '?y '(p art ?y) 'global) ?y)            (= (length ?y) ?z)))GLOBAL(findx '?x '(numchildren art ?x) 'global)3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;