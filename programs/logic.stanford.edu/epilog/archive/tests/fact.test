;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; fact.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; factfindp, factfindx, factfinds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(integer 2) 'global)t(factfindp '(integer 1/2) 'global)nil(factfindp '(integer 3.2) 'global)nil(factfindp '(integer #c(1 2)) 'global)nil(factfindp '(integer a) 'global)nil(factfindp '(even 2) 'global)t(factfindp '(even a) 'global)nil(factfindp '(odd 3) 'global)t(factfindp '(odd a) 'global)nil(factfindp '(positive 3) 'global)t(factfindp '(positive a) 'global)nil(factfindp '(negative -1) 'global)t(factfindp '(negative a) 'global)nil(factfindp '(zero 0) 'global)t(factfindp '(gcd 2 6 2) 'global)t(factfindp '(lcm 2 3 6) 'global)t(factfindp '(isqrt 5 2) 'global)t(factfindp '(mod 7 2 1) 'global)t(factfindp '(rem 3 2 1) 'global)t(factfindp '(ash 1 1 2) 'global)t(factfindp '(boole 6 1 1 1) 'global)t(factfindp '(logbit 2 6) 'global)t(factfindp '(logand 1 1 1) 'global)t(factfindp '(logandc1 0 1 1) 'global)t(factfindp '(logandc2 1 0 1) 'global)t(factfindp '(logcount 3 2) 'global)t(factfindp '(logeqv 1 1 -1) 'global)t(factfindp '(logior 1 1 1) 'global)t(factfindp '(lognand 0 1 -1) 'global)t(factfindp '(lognor 0 0 -1) 'global)t(factfindp '(lognot -4 3) 'global)t(factfindp '(logorc1 0 0 -1) 'global)t(factfindp '(logorc2 0 0 -1) 'global)t(factfindp '(logxor 0 1 1) 'global)t(factfindp '(zero a) 'global)nil(factfindp '(logbit 0 6) 'global)nil(factfindp '(logtest 2 6) 'global)t(factfindp '(logtest 2 -3) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(rationalnumber 1) 'global)t(factfindp '(rationalnumber 1/2) 'global)t(factfindp '(rationalnumber 3.2) 'global)nil(factfindp '(rationalnumber #c(1 2)) 'global)nil(factfindp '(rationalnumber a) 'global)nil(factfindp '(numerator 1/2 1) 'global)t(factfindp '(denominator 1/2 2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(realnumber 1) 'global)t(factfindp '(realnumber 1/2) 'global)t(factfindp '(realnumber 3.2) 'global)t(factfindp '(realnumber #c(1 2)) 'global)nil(factfindp '(realnumber a) 'global)nil(factfindp '(< 2 3) 'global)t(factfindp '(< 3 3) 'global)nil(factfindp '(< a b) 'global)nil(factfindp '(=< 2 3) 'global)t(factfindp '(=< 3 2) 'global)nil(factfindp '(=< a b) 'global)nil(factfindp '(> 3 2) 'global)t(factfindp '(> 3 3) 'global)nil(factfindp '(> a b) 'global)nil(factfindp '(>= 3 2) 'global)t(factfindp '(>= 2 3) 'global)nil(factfindp '(>= a b) 'global)nil(factfindp '(+ 1 2 3) 'global)t(factfindp '(- 3 2 1) 'global)t(factfindp '(* 2 3 6) 'global)t(factfindp '(/ 4 2 2) 'global)t(factfindp '(1+ 1 2) 'global)t(factfindp '(1- 2 1) 'global)t(factfindp '(abs -1 1) 'global)t(factfindp '(exp 0 1) 'global)t(factfindp '(expt 2 3 8) 'global)t(factfindp '(log 8 2 3) 'global)t(factfindp '(sqrt 4 2) 'global)t(factfindp '(max 1 2 3 3) 'global)t(factfindp '(min 1 2 3 1) 'global)t(factfindp '(signum 23 1) 'global)t(factfindp '(acos 1 0) 'global)t(factfindp '(acosh 1 0) 'global)t(factfindp '(asin 0 0) 'global)t(factfindp '(asinh 0 0) 'global)t(factfindp '(atan 0 0) 'global)t(factfindp '(atanh 0 0) 'global)t(factfindp '(cos 0 1) 'global)t(factfindp '(cosh 0 1) 'global)t(factfindp '(sin 0 0) 'global)t(factfindp '(sinh 0 0) 'global)t(factfindp '(tan 0 0) 'global)t(factfindp '(tanh 0 0) 'global)t(factfindp '(ceiling 1.6 2) 'global)t(factfindp '(floor 1.6 1) 'global)t(factfindp '(round 1.6 2) 'global)t(factfindp '(truncate 1.6 1) 'global)t(factfindp '(rationalize 0.5 1/2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(complexnumber 1) 'global)nil ;;; t?(factfindp '(complexnumber 1/2) 'global)nil ;;; t?(factfindp '(complexnumber 3.2) 'global)nil ;;; t?(factfindp '(complexnumber #c(1 2)) 'global)t(factfindp '(complexnumber a) 'global)nil(factfindp '(conjugate #c(1 1) #c(1 -1)) 'global)t(factfindp '(complex 1 1 #c(1 1)) 'global)t(factfindp '(realpart #c(1 2) 1) 'global)t(factfindp '(imagpart #c(1 2) 2) 'global)t(factfindp '(cis 0 #c(1 0)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(number 1) 'global)t(factfindp '(number 1/2) 'global)t(factfindp '(number 3.2) 'global)t(factfindp '(number #c(1 2)) 'global)t(factfindp '(number a) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(character #\a) 'global)t(factfindp '(character "a") 'global)nil(factfindp '(character a) 'global)nil(factfindp '(alphabetic #\a) 'global)t(factfindp '(alphabetic #\1) 'global)nil(factfindp '(uppercase #\A) 'global)t(factfindp '(uppercase #\a) 'global)nil(factfindp '(lowercase #\a) 'global)t(factfindp '(lowercase #\A) 'global)nil(factfindp '(digit #\1) 'global)t(factfindp '(digit #\a) 'global)nil(factfindp '(alphanumeric #\a) 'global)t(factfindp '(alphanumeric #\1) 'global)t(factfindp '(alphanumeric #\.) 'global)nil(factfindp '(chargreater #\b #\a) 'global)t(factfindp '(chargreater #\a #\b) 'global)nil(factfindp '(charless #\a #\b) 'global)t(factfindp '(charless #\b #\a) 'global)nil(factfindp '(charupcase #\a #\A) 'global)t(factfindp '(chardowncase #\A #\a) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(string #\a) 'global)nil(factfindp '(string "a") 'global)t(factfindp '(string a) 'global)nil(factfindp '(stringgreater "bbc" "abc") 'global)t(factfindp '(stringgreater "abc" "bbc") 'global)nil(factfindp '(stringless "abc" "bbc") 'global)t(factfindp '(stringless "bbc" "abc") 'global)nil(factfindp '(substring "bc" "abcd") 'global)t(factfindp '(substring "abcd" "ab") 'global)nil(factfindp '(stringlength "abc" 3) 'global)t(factfindp '(stringelement "abc" 2 #\b) 'global)t(factfindp '(stringsubseq "abcd" 2 3 "bc") 'global)t(factfindp '(stringalphanumeric " a bc'd-e " "abcde") 'global)t(factfindp '(stringappend "abc" "def" "ghi" "abcdefghi") 'global)t(factfindp '(stringappend "" "") 'global)t(factfindp '(stringcharpos #\b "abc" 2) 'global)t(factfindx '?x '(stringcharpos #\d "abc" ?x) 'global)nil(factfindp '(stringposition "bc" "abcd" 2) 'global)t(factfindx '?x '(stringposition "cb" "abcd" ?x) 'global)nil(factfindp '(stringsubstitute #\a #\b "abab" "aaaa") 'global)t(factfindp '(stringupcase "abc" "ABC") 'global)t(factfindp '(stringdowncase "ABC" "abc") 'global)t(factfindp '(stringcapitalize "abc.def" "Abc.Def") 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(charstring #\a "a") 'global)t(factfindp '(stringify a "A") 'global)t(factfindp '(symbolize "a" a) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp '(word 'a) 'global)t(factfindp '(word a) 'global)nil(factfindp '(indvar '?x) 'global)t(factfindp '(indvar a) 'global)nil(factfindp '(seqvar '@l) 'global)t(factfindp '(seqvar a) 'global)nil(factfindp '(variable '?x) 'global)t(factfindp '(variable '@l) 'global)t(factfindp '(variable a) 'global)nil(factfindp '(same a a) 'global)t(factfindp '(same a b) 'global)nil(factfindp '(distinct a a) 'global)nil(factfindp '(distinct a b) 'global)t(factfindp '(oneof b a b c) 'global)t(factfindp '(oneof d a b c) 'global)nil(factfindp '(choose ?x (oneof ?x a b c) a) 'global)t(factfindp '(choose ?x (oneof ?x a b c) b) 'global)nil(factfindp '(bagofall ?x (oneof ?x a b c) (listof a b c)) 'global)t(factfindp '(bagofall ?x (oneof ?x a b c) (listof a)) 'global)nil(factfindp '(ground a) 'global)t(factfindp '(ground ?x) 'global)nil(factfindp '(nonground a) 'global)nil(factfindp '(nonground ?x) 'global)t(factfindp '(execute (member 'b '(a b c)) '(b c)) 'global)t(factfindp '(evaluate (member b (a b c)) (b c)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(factfindp 'true 'global)t(factfindp 'false 'global)nil(factfindp '(not true) 'global)nil(factfindp '(not false) 'global)t(factfindp '(and true true) 'global)t(factfindp '(and true false) 'global)nil(factfindp '(and false true) 'global)nil(factfindp '(and false false) 'global)nil(factfindp '(or true true) 'global)t(factfindp '(or true false) 'global)t(factfindp '(or false true) 'global)t(factfindp '(or false false) 'global)nil(deftheory global  (p a)  (p b)  (p c)  (q b)  (q c))*(factfindp '(and (p b) (q b)) 'global)t(factfindp '(or (p a) (q a)) 'global)t(factfindx '?x '(and (p ?x) (q ?x)) 'global)b(factfindx '?x '(or (p ?x) (q ?x)) 'global)a(factfinds '?x '(and (p ?x) (q ?x)) 'global)(b c)(factfinds '?x '(or (p ?x) (q ?x)) 'global)(a b c)(deftheory pp  (pp a a)  (pp a b))*(deftheory qq  (qq b c))*(deftheory global  (<= (r ?x ?y ?z) (pp ?x ?y) (qq ?y ?z)))*(includes 'global 'pp)*(includes 'global 'qq)*(factfindp '(and (pp a b) (qq b c)) 'global)t(factfindx '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'global)(a b c)(factfinds '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'global)((a b c))(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;