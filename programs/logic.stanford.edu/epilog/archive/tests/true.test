;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; true.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; insert;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(insert '(brother ralph sue) 'global)(BROTHER RALPH SUE)(insert '(sister sue ralph) 'global)(SISTER SUE RALPH)(insert '(=> (father ?x ?y) (child ?y ?x)) 'global)(=> (FATHER ?X ?Y) (CHILD ?Y ?X))(insert '(sister sue ralph) 'global)(SISTER SUE RALPH)(indexps 'brother 'global)((BROTHER RALPH SUE))(indexps 'ralph 'global)((BROTHER RALPH SUE) (SISTER SUE RALPH) (SISTER SUE RALPH))(indexps '(brother ralph sue) 'global)((BROTHER RALPH SUE))(indexps '(father jim bill) 'global)((=> (FATHER ?X ?Y) (CHILD ?Y ?X)))(indexps '?x 'global)((BROTHER RALPH SUE) (SISTER SUE RALPH) (=> (FATHER ?X ?Y) (CHILD ?Y ?X)) (SISTER SUE RALPH))(uninsert (car (indexps '?x 'global)) 'global)(BROTHER RALPH SUE)(indexps '?x 'global)((SISTER SUE RALPH) (=> (FATHER ?X ?Y) (CHILD ?Y ?X)) (SISTER SUE RALPH))(uninsert '(sister sue ralph) 'global)(SISTER SUE RALPH)(indexps '?x 'global)((SISTER SUE RALPH) (=> (FATHER ?X ?Y) (CHILD ?Y ?X)) (SISTER SUE RALPH))(uninsert (car (indexps '?x 'global)) 'global)(SISTER SUE RALPH)(indexps '?x 'global)((=> (FATHER ?X ?Y) (CHILD ?Y ?X)) (SISTER SUE RALPH))(reset)*(insert '(mathematician eudoxus) 'global)(MATHEMATICIAN EUDOXUS)(insert '(astronomer menaechmus) 'global)(ASTRONOMER MENAECHMUS)(contents 'global)((MATHEMATICIAN EUDOXUS) (ASTRONOMER MENAECHMUS))(reset)*(insert '(mathematician eudoxus) 'global)(MATHEMATICIAN EUDOXUS)(insert '(astronomer menaechmus) 'global)(ASTRONOMER MENAECHMUS)(empty 'global)GLOBAL(contents 'global)NIL(reset)**theories*NIL(insert 'sunny 'lax)SUNNY(insert 'foggy 'sfo)FOGGY*theories*(SFO LAX)(empty 'LAX)LAX*theories*(SFO)(reset)*(deftheory global        "The sentences for the Global theory"        (father jim ralph)        (father jim sue)        (=> (apple ?x) (fruit ?x)))GLOBAL(contents 'global)((FATHER JIM RALPH)       (FATHER JIM SUE)       (=> (APPLE ?X) (FRUIT ?X)))(documentation 'global 'concept)"The sentences for the Global theory"(reset)*(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent art bob) 'global)NIL(contents 'global)((PARENT ART BOB))(save '(loves ?x ?x) 'global)(LOVES ?X ?X)(save '(loves jill jill) 'global)(LOVES JILL JILL)(save '(loves joe joe) 'global 'unifyp)NIL(save '(loves joe jill) 'global 'unifyp)(LOVES JOE JILL)(contents 'global)((PARENT ART BOB) (LOVES ?X ?X) (LOVES JILL JILL) (LOVES JOE JILL))(reset)*(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent art bea) 'global)(PARENT ART BEA)(save '(parent art bess) 'global)(PARENT ART BESS)(contents 'global)((PARENT ART BOB) (PARENT ART BEA) (PARENT ART BESS))(drop '(parent art bess) 'global)T(contents 'global)((PARENT ART BOB) (PARENT ART BEA))(drop '(parent ?x ?y) 'global)T(contents 'global)((PARENT ART BOB) (PARENT ART BEA))(drop '(parent ?x ?y) 'global 'unifyp)T(contents 'global)NIL(reset)*(deftheory global        (father jim ralph)        (father jim sue)        (mother jill ralph)        (=> (apple ?x) (fruit ?x)))GLOBAL(kill 'father 'global)T(contents 'global)((MOTHER JILL RALPH)       (=> (APPLE ?X) (FRUIT ?X)))(kill '(apple mac) 'global 'unifyp)T(contents 'global)((MOTHER JILL RALPH))(reset)*(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent art bea) 'global)(PARENT ART BEA)(save '(parent art bess) 'global)(PARENT ART BESS)(save '(=> (parent ?x ?y) (not parent ?y ?x)) 'global)(=> (PARENT ?X ?Y) (NOT PARENT ?Y ?X))(truep '(parent art bob) 'global)T(truep '(parent ?x bob) 'global)T(truep '(parent @l) 'global)T(truex '?x '(parent ?x bob) 'global)ART(truex '?y '(parent art ?y) 'global)BOB(truex '(related @l) '(parent @l) 'global)(RELATED ART BOB)(trues '?y '(parent art ?y) 'global)(BOB BEA BESS)(trues '(related ?x ?y) '(parent ?x ?y) 'global)((RELATED ART BOB) (RELATED ART BEA) (RELATED ART BESS))(setq gen (trueg '?y '(parent art ?y) 'global))*(funcall gen)BOB(funcall gen)BEA(funcall gen)BESS(funcall gen)NIL(reset)*(includes 'c 'global)T(includes 'd 'global)T(includes 'a 'c)T(includes 'a 'd)T(includes 'b 'd)T(includees 'a)(C D)(includees 'b)(D)(includees 'c)(GLOBAL)(includees 'd)(GLOBAL)(includees 'global)NIL(includers 'a)NIL(includers 'b)NIL(includers 'c)(A)(includers 'd)(A B)(includers 'global)(C D)(reset)*(includes 'top 'left)T(includes 'top 'right)T(includes 'left 'bottom)T(save '(p a) 'top)(P A)(save '(q a) 'left)(Q A)(save '(r a) 'right)(R A)(save '(s a) 'bottom)(S A)(truep '(p a) 'top)T(truep '(q a) 'top)NIL(knownp '(p a) 'top)T(knownp '(q a) 'top)T(knownp '(r a) 'top)T(knownp '(s a) 'top)T(reset)*(includes 'top 'left)T(includes 'top 'right)T(includes 'left 'bottom)T(save '(p a) 'top)(P A)(save '(p b) 'left)(P B)(save '(p c) 'right)(P C)(save '(p d) 'bottom)(P D)(knowns '?x '(p ?x) 'top)(A B D C)(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; base tests;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(save '(p ?x b) 'global)(p ?x b)(save '(p a b) 'global 'unifyp)nil(drop '(p a b) 'global 'samep)t(truep '(p ?x b) 'global 'samep)t(drop '(p a b) 'global 'unifyp)t(truep '(p ?x b) 'global 'samep)nil(save '(p (f a) b) 'global)(p (f a) b)(kill 'f 'global)t(truep '(p (f a) b) 'global)nil(truep '(> 3 2) 'global)nil(save '(> 2 3) 'global)(> 2 3)(truep '(> 2 3) 'global)t(drop '(> 2 3) 'global)t(truep '(> 2 3) 'global)nil(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(save '(p ?x b) 'global)(p ?x b)(truep '(p ?x b) 'global 'eq)nil(truep '(p ?x b) 'global 'equal)t(truep '(p ?y b) 'global 'equal)nil(truep '(p ?y b) 'global 'samep)t(truep '(p ?x ?y) 'global 'samep)nil(truep '(p a b) 'global 'samep)nil(truep '(p ?x ?y) 'global 'matchp)t(truep '(p a ?y) 'global 'matchp)nil(truep '(p a b) 'global 'instp)t(truep '(p a ?y) 'global 'instp)nil(truep '(p a ?y) 'global 'mgup)t(truep '(p a ?x) 'global 'mgup)nil(truep '(p a ?x) 'global 'unifyp)t(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(save '(p a b) 'global)(p a b)(save '(p a c) 'global)(p a c)(trues '?y '(p a ?y) 'global)(b c)(knownp '(p a ?y) 'global)t(knowns '?y '(p a ?y) 'global)(b c)(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(save '(= (f ?x b) ?x) 'global)(= (f ?x b) ?x)(getval '(f ?x b) 'global 'eq)nil(getval '(f ?x b) 'global 'equal)?x(getval '(f ?y b) 'global 'equal)nil(getval '(f ?y b) 'global 'samep)?y(getval '(f ?x ?y) 'global 'samep)nil(getval '(f a b) 'global 'samep)nil(getval '(f ?x ?y) 'global 'matchp)?x(getval '(f a ?y) 'global 'matchp)nil(getval '(f a b) 'global 'instp)a(getval '(f a ?y) 'global 'instp)nil(getval '(f a ?y) 'global 'mgup)a(getval '(f a ?x) 'global 'mgup)nil(getval '(f a ?x) 'global 'unifyp)a(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(setval '(f a) 1 'global)*(save '(<- (f b) 2) 'global)*(save '(<-- (f c) 3) 'global)*(getval '(f a) 'global)1(getval '(f b) 'global)nil(getval '(f c) 'global)nil(setval '(f a) 2 'global)2(getval '(f a) 'global)2(remval '(f ?x) 'global 'unifyp)t(getval '(f a) 'global)nil(save '(= (f ?x) ?x) 'global)*(value '(f 1) 'global 'instp)1(value '(f 1) 'global 'samep)nil(value '(g 1) 'global 'samep)nil(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;