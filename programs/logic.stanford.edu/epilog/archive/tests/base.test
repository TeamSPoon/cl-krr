;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; base.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; groundp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(groundp 'a)T(groundp '?x)NIL(groundp ''?x)T(groundp '(p a b))T(groundp '(p ?x b))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; primitivep, pseudoprimitivep, pseudosentencep;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(primitivep 1)t(primitivep "abc")t(primitivep #\a)t(primitivep 'pi)nil(primitivep 'a)t(primitivep ''a)t(primitivep '(execute (car '(a))))nil(primitivep '(if true 1 2))nil(primitivep '(cond (true 1)))nil(primitivep '(listof 1 2 3))t(primitivep '(+ 1 2))nil(primitivep '(f a))nil(pseudoprimitivep 1)nil(pseudoprimitivep "abc")nil(pseudoprimitivep #\a)nil(pseudoprimitivep 'pi)t(pseudoprimitivep 'a)nil(pseudoprimitivep ''a)nil(pseudoprimitivep '(execute (car '(a))))nil(pseudoprimitivep '(if true 1 2))nil(pseudoprimitivep '(cond (true 1)))nil(pseudoprimitivep '(listof 1 2 3))nil(pseudoprimitivep '(+ 1 2))nil(pseudoprimitivep '(f a))t(pseudoprimitivep '(f pi))nil(pseudosentencep 'true)nil(pseudosentencep 'cut)nil(pseudosentencep 'false)nil(pseudosentencep 'p)t(pseudosentencep '(not p))t(pseudosentencep '(and p q))nil(pseudosentencep '(or p q))nil(pseudosentencep '(<= p q))nil(pseudosentencep '(<=> p q))nil(pseudosentencep '(=> p q))nil(pseudosentencep '(forall ?x true))nil(pseudosentencep '(exists ?x true))nil(pseudosentencep '(> 3 2))nil(pseudosentencep '(p a))t(pseudosentencep '(p pi))nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; atomicp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(atomicp 'raining)T(atomicp '(p a b))T(atomicp '(> 3 2))T(atomicp '(not (p a b)))NIL(atomicp '(and (p ?x ?y) (q ?x ?y)))NIL(atomicp '(or (p ?x ?y) (q ?x ?y)))NIL(atomicp '(=> (p ?x ?y) (q ?x ?y)))NIL(atomicp '(<= (p ?x ?y) (q ?x ?y)))NIL(atomicp '(<=> (p ?x ?y) (q ?x ?y)))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; literalp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(literalp 'raining)T(literalp '(p a b))T(literalp '(> 3 2))T(literalp '(not (p a b)))T(literalp '(not (not (p a b))))NIL(literalp '(and (p ?x ?y) (q ?x ?y)))NIL(literalp '(or (p ?x ?y) (q ?x ?y)))NIL(literalp '(=> (p ?x ?y) (q ?x ?y)))NIL(literalp '(<= (p ?x ?y) (q ?x ?y)))NIL(literalp '(<=> (p ?x ?y) (q ?x ?y)))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; clausep;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(clausep 'sunny)T(clausep '(not raining))T(clausep '(or raining (not raining)))T(clausep '(<=> (marten ?x) (martin ?x)))NIL(clausep '(forall (?x) (=> (integer ?x) (number ?x))))NIL(clausep '(forall (?x) (or (not (integer ?x)) (number ?x))))NIL(clausep '(or (not (integer ?x)) (number ?x)))T(clausep '(or (not (integer ?x)) (and (number ?x) (rational ?x))))NIL(clausep '(not (> 3 (salary (president hp)))))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; alternativep;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(alternativep 'sunny)T(alternativep '(not raining))T(alternativep '(or raining sunny))NIL(alternativep '(and raining sunny))T(alternativep '(forall (?x) (<=> (p ?x) (q ?x))))NIL(alternativep '(and (or (not p) q) (or p (not q))))NIL(alternativep '(and (not (integer ?x)) (number ?x)))T(alternativep '(not (> 3 (salary (president hp)))))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; booleanp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(booleanp 'bright)T(booleanp '(or (marten ?x) (martin ?x)))T(booleanp '(forall (?x) (=> (integer ?x) (number ?x))))NIL(booleanp '(forall (?x) (or (not (integer ?x)) (number ?x))))T(booleanp '(and (or x (not y) z @s) (not k)))T(booleanp '(term (quote (+ 2 3))))T(booleanp '(> (if true 3 4) 2))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; booleanize;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(booleanize 'bright)BRIGHT(booleanize '(or (marten ?x) (martin ?x)))(OR (MARTEN ?X) (MARTIN ?X))(booleanize '(forall (?x) (=> (integer ?x) (number ?x))))(FORALL (?X) (OR (NOT (INTEGER ?X)) (NUMBER ?X)))(booleanize '(shorter (quote (=> x y)) (quote (or (not x) y))))(SHORTER '(=> X Y) '(OR (NOT X) Y))(booleanize '(=> (red ?x) (=> (round ?x) (apple ?x))))(OR (NOT (RED ?X)) (OR (NOT (ROUND ?X)) (APPLE ?X)))(booleanize '(<= (parasitic ?u) (mistletoe ?x)))(OR (PARASITIC ?U) (NOT (MISTLETOE ?X)))(booleanize '(<=> (coniferous ?x) (bears-cones ?x)))(AND (OR (NOT (CONIFEROUS ?X)) (BEARS-CONES ?X))           (OR (CONIFEROUS ?X) (NOT (BEARS-CONES ?X))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; skolemp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(skolemp '(neighbor bertram sam))T(skolemp '(=> (zebra ?x) (striped ?x)))T(skolemp '(forall (?x) (=> (zebra ?x) (striped ?x))))NIL(skolemp '(nice (quote (exists (?a) (round ?a)))))T(skolemp '(or (not (integer ?x)) (and (number ?x) (rational ?x))))T(skolemp '(exists (?y) (loves ?x ?y)))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; skolemize;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(skolemize 'bright)BRIGHT(skolemize '(or (animal ?x) (vegetable ?x) (mineral ?x)))(OR (ANIMAL ?X) (VEGETABLE ?X) (MINERAL ?X))(samep (skolemize '(forall (?x) (=> (martin ?x) (swallow ?x)))) '(=> (martin ?x) (swallow ?x)))t(samep (skolemize '(forall (?x) (or (liberal ?x) (conservative ?x)))) '(or (liberal ?x) (conservative ?x)))t(instp (skolemize '(forall (?x) (exists (?y) (loves ?x ?y))))       '(LOVES ?X (?F ?X)))T(instp (skolemize '(exists (?y) (forall (?x) (loves ?x ?y))))       '(LOVES ?X (?F)))T(instp (skolemize '(exists (?y) (> ?x ?y)))       '(> ?x (?F ?x)))T(instp (skolemize '(exists (?x) (forall (?y) (exists (?z) (p ?w ?x ?y ?z)))))       '(P ?W (?F ?W) ?Y (?G ?Y ?W)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; cnfp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(cnfp '(apple ?x))T(cnfp '(or (apple ?x) (banana ?x)))T(cnfp '(and (apple ?x) (red ?x)))T(cnfp '(and (and x y) z))NIL(cnfp '(forall (?x) (loves ?x micky)))NIL(cnfp '(exists (?x) (loves ?y ?x)))NIL(cnfp '(=> (apple ?x) (fruit ?x)))NIL(cnfp '(or (not (apple ?x)) (fruit ?x)))T(cnfp '(or (and a b) (and c d)))NIL(cnfp '(and (or a c) (or a d) (or b c) (or b d)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; cnf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(cnf 'true)true(cnf 'false)false(cnf 'p)p(cnf '(and))true(cnf '(and p))p(cnf '(and p q))(and p q)(cnf '(or))false(cnf '(or p))p(cnf '(or p q))(or p q)(cnf '(or (and p q) r))(and (or p r) (or q r))(cnf '(=>))false(cnf '(=> p))p(cnf '(=> p q r))(or (not p) (not q) r)(cnf '(=> (and p q) r))(or (not p) (not q) r)(cnf '(=> (or p q) r))(and (or (not p) r) (or (not q) r))(cnf '(=> p (and q r)))(and (or (not p) q) (or (not p) r))(cnf '(=> p (or q r)))(or (not p) q r)(cnf '(<=))false(cnf '(<= r))r(cnf '(<= r p q))(or r (not p) (not q))(cnf '(<= r (and p q)))(or r (not p) (not q))(cnf '(<= r (or p q)))(and (or r (not p)) (or r (not q)))(cnf '(<= (and q r) p))(and (or q (not p)) (or r (not p)))(cnf '(<= (or q r) p))(or q r (not p))(cnf '(<=>))false(cnf '(<=> r))r(cnf '(<=> p q))(and (or p (not q)) (or (not p) q))(samep (cnf '(forall ?x (p ?x))) '(p ?x))t(consp (cadr (cnf '(exists ?x (p ?x)))))t(instp (cnf '(forall ?x (exists ?y (p ?x ?y ?z)))) '(p ?x (?f ?x ?z) ?z))t(samep (cnf '(forall ?x (and (p ?x) (forall ?x (q ?x))))) '(and (p ?x) (q ?y)))t(samep (cnf '(or (forall ?x (p ?x)) (forall ?x (q ?x)))) '(or (p ?x) (q ?x)))nil(cnf '(not true))false(cnf '(not false))true(cnf '(not p))(not p)(cnf '(not (not p)))p(cnf '(not (and)))false(cnf '(not (and p)))(not p)(cnf '(not (and p q)))(or (not p) (not q))(cnf '(not (or)))true(cnf '(not (or p)))(not p)(cnf '(not (or p q)))(and (not p) (not q))(cnf '(not (=>)))true(cnf '(not (=> p)))(not p)(cnf '(not (=> p q r)))(and p q (not r))(cnf '(not (<=)))true(cnf '(not (<= r)))(not r)(cnf '(not (<= r p q)))(and (not r) p q)(cnf '(not (<=>)))true(cnf '(not (<=> r)))(not r)(consp (cadadr (cnf '(not (forall ?x (p ?x))))))t(samep (cnf '(not (exists ?x (p ?x)))) '(not (p ?x)))t(cnf '(=> (father ?x ?y) (father ?x ?z) (siblings ?y ?z)))(OR (NOT (FATHER ?X ?Y)) (NOT (FATHER ?X ?Z)) (SIBLINGS ?Y ?Z))(cnf '(=> (red ?x) (=> (round ?x) (apple ?x))))(OR (NOT (RED ?X)) (NOT (ROUND ?X)) (APPLE ?X))(cnf '(<= (parent ?x ?y) (father ?x ?y)))(OR (PARENT ?X ?Y) (NOT (FATHER ?X ?Y)))(cnf '(<=> (morning-star ?x) (evening-star ?x)))(AND (OR (MORNING-STAR ?X) (NOT (EVENING-STAR ?X)))     (OR (NOT (MORNING-STAR ?X)) (EVENING-STAR ?X)))(cnf '(or (and ?v ?w) (and ?x ?y)))(AND (OR ?V ?X) (OR ?V ?Y) (OR ?W ?X) (OR ?W ?Y))(cnf '(father jim ralph))(FATHER JIM RALPH)(not (equal (cnf '(exists (?x) (father ?x ralph)))            (cnf '(exists (?x) (father ?x ralph)))))T(cnf '(red ?x))(RED ?X)(unifyp (cnf '(exists (?x) (forall (?y) (exists (?z) (p ?w ?x ?y ?z)))))        '(P ?W (?F ?W) ?Y (?G ?Y ?W)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; clauses;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(clauses 'sunny)(SUNNY)(clauses '(> 3 2))((> 3 2))(clauses '(=> (red ?x) (=> (round ?x) (apple ?x))))((OR (NOT (RED ?X)) (NOT (ROUND ?X)) (APPLE ?X)))(clauses '(or a b))((OR A B))(clauses '(and a b))(A B)(clauses '(<=> (odd ?x) (not (even ?x))))((OR (ODD ?X) (EVEN ?X)) (OR (NOT (ODD ?X)) (NOT (EVEN ?X))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; dnfp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(dnfp '(apple ?x))T(dnfp '(and (apple ?x) (banana ?x)))T(dnfp '(or (apple ?x) (red ?x)))T(dnfp '(or (or x y) z))NIL(dnfp '(forall (?x) (loves ?x micky)))NIL(dnfp '(exists (?x) (loves ?y ?x)))NIL(dnfp '(=> (apple ?x) (fruit ?x)))NIL(dnfp '(or (not (apple ?x)) (fruit ?x)))T(dnfp '(or (and a b) (and c d)))T(dnfp '(and (or a c) (or a d) (or b c) (or b d)))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; dnf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(dnf '(red sky))(RED SKY)(samep (dnf '(forall (?x) (=> (apple ?x) (fruit ?x)))) '(or (not (apple ?x)) (fruit ?x)))t(dnf '(=> (red ?x) (=> (round ?x) (apple ?x))))(OR (NOT (RED ?X)) (NOT (ROUND ?X)) (APPLE ?X))(dnf '(and (apple fred) (round fred)))(AND (APPLE FRED) (ROUND FRED))(dnf '(and (or (alive ?x) (dead ?x)) (or (male ?x) (female ?x))))(OR (AND (ALIVE ?X) (MALE ?X))          (AND (ALIVE ?X) (FEMALE ?X))          (AND (DEAD ?X) (MALE  ?X))          (AND (DEAD ?X) (FEMALE ?X)))(unifyp (dnf '(exists (?x) (forall (?y) (exists (?z) (p ?w ?x ?y ?z)))))        '(P ?W (?F ?W) ?Y (?G ?Y ?W)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; alternatives;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(alternatives 'sunny)(SUNNY)(alternatives '(> 3 2))((> 3 2))(alternatives '(=> (red ?x) (=> (round ?x) (apple ?x))))((NOT (RED ?X)) (NOT (ROUND ?X)) (APPLE ?X))(alternatives '(or a b))(A B)(alternatives '(and a b))((AND A B))(alternatives '(<=> (odd ?x) (not (even ?x))))((AND (ODD ?X) (NOT (ODD ?X)))       (AND (ODD ?X) (NOT (EVEN ?X)))       (AND (EVEN ?X) (NOT (ODD ?X)))       (AND (EVEN ?X) (NOT (EVEN ?X))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; brfp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(brfp '(macintosh fred))T(brfp '(or (not (apple ?x)) (fruit ?x)))NIL(brfp '(forall (?x) (=> (apple ?x) (fruit ?x))))NIL(brfp '(and (apple macintosh) (fruit macintosh)))NIL(brfp '(<= (fruit ?x) (apple ?x)))T(brfp '(<= (apple ?x) (and (round ?x) (red ?x))))NIL(brfp '(<= (apple ?x) (round ?x) (red ?x)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ebrfp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(ebrfp '(blue water))T(ebrfp '(=> (senator ?x) (roman ?x)))NIL(ebrfp '(<=> (even ?x) (not (round ?x))))NIL(ebrfp '(not (even 7)))T(ebrfp '(not (and (even 6) (irrational 6))))NIL(ebrfp '(and (even 6) (rational 6)))NIL(ebrfp '(or (even 5) (odd 5)))NIL(ebrfp '(forall (?x) (bowfin ?x)))NIL(ebrfp '(<= (fruit ?x) (red ?x) (round ?x)))T(ebrfp '(<= (p traveling-salesman) (<= (p ?x) (np ?x))))NIL(ebrfp '(<= (p traveling-salesman) (or (p ?x) (not (np ?x)))))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; brf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(brf '(father john doe))(<= (FATHER JOHN DOE))(brf '(<= (fruit ?x) (apple ?x)))(<= (FRUIT ?X) (APPLE ?X))(brf '(=> (apple ?x) (fruit ?x)))(<= (not (apple ?x)) (not (fruit ?x)))(brf '(<=> (child ?x ?y) (parent ?y ?x)))(AND (<= (CHILD ?X ?Y) (PARENT ?Y ?X))           (<= (NOT (CHILD ?X ?Y)) (NOT (PARENT ?Y ?X))))(brf '(or (not a) b))(<= (NOT A) (NOT B))(brf '(or a (not b)))(<= A B);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; frfp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(frfp '(macintosh fred))T(frfp '(or (not (apple ?x)) (fruit ?x)))NIL(frfp '(forall (?x) (=> (apple ?x) (fruit ?x))))NIL(frfp '(and (apple macintosh) (fruit macintosh)))NIL(frfp '(=> (apple ?x) (fruit ?x)))T(frfp '(=> (and (round ?x) (red ?x)) (apple ?x)))NIL(frfp '(=> (round ?x) (red ?x) (apple ?x)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; efrfp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(efrfp '(blue water))T(efrfp '(=> (senator ?x) (roman ?x)))T(efrfp '(<= (waterspout ?u) (gargoyle ?u)))NIL(efrfp '(<=> (even ?x) (not (round ?x))))NIL(efrfp '(not (even 7)))T(efrfp '(not (and (even 6) (irrational 6))))NIL(efrfp '(and (even 6) (rational 6)))NIL(efrfp '(or (even 5) (odd 5)))NIL(efrfp '(forall (?x) (bowfin ?x)))NIL(efrfp '(=> (red ?x) (round ?x) (fruit ?x)))T(efrfp '(=> (=> (np ?x) (p ?x)) (p traveling-salesman)))NIL(efrfp '(=> (or (not (np ?x)) (p ?x)) (p traveling-salesman)))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; frf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(frf '(father john doe))(=> (FATHER JOHN DOE))(frf '(=> (apple ?x) (fruit ?x)))(=> (APPLE ?X) (FRUIT ?X))(frf '(<= (fruit ?x) (apple ?x)))(=> (NOT (FRUIT ?X)) (NOT (APPLE ?X)))(frf '(<=> (child ?x ?y) (parent ?y ?x)))(AND (=> (NOT (CHILD ?X ?Y)) (NOT (PARENT ?Y ?X)))           (=> (CHILD ?X ?Y) (PARENT ?Y ?X)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reverse-rule;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reverse-rule 'p)p(reverse-rule '(apple macintosh))(APPLE MACINTOSH)(reverse-rule '(or a b))(OR A B)(reverse-rule '(<= r))(=> r)(reverse-rule '(=> r))(<= r)(reverse-rule '(<= r p q))(=> p q r)(reverse-rule '(=> p q r))(<= r p q)(reverse-rule '(=> (apple ?x) (computer ?x)))(<= (COMPUTER ?X) (APPLE ?X))(reverse-rule '(<= (reptile ?a) (pterodactyl ?a)))(=> (PTERODACTYL ?A) (REPTILE ?A))(reverse-rule '(forall (?x) (=> (ferrari ?x) (car ?x))))(FORALL (?X) (=> (FERRARI ?X) (CAR ?X)))(reverse-rule '(=> (car ?x) (=> (num-seats ?x 2) (sporty ?x))))(<= (=> (NUM-SEATS ?X 2) (SPORTY ?X)) (CAR ?X));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; contrapositives;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(contrapositives '(blue water))((BLUE WATER))(contrapositives '(or x y))((<= X (NOT Y)) (<= Y (NOT X)))(contrapositives '(and x y))(X Y)(contrapositives '(=> (apple ?x) (fruit ?x)))((<= (NOT (APPLE ?X)) (NOT (FRUIT ?X)))       (<= (FRUIT ?X) (APPLE ?X)))(contrapositives '(<= (number ?x) (odd ?x)))((<= (NUMBER ?X) (ODD ?X))       (<= (NOT (ODD ?X)) (NOT (NUMBER ?X))))(contrapositives '(<=> (even ?x) (not (odd ?x))))((<= (EVEN ?X) (NOT (ODD ?X)))       (<= (ODD ?X) (NOT (EVEN ?X)))       (<= (NOT (EVEN ?X)) (ODD ?X))       (<= (NOT (ODD ?X)) (EVEN ?X)))(contrapositives '(=> (red ?x) (round ?x) (apple ?x)))((<= (NOT (RED ?X)) (ROUND ?X) (NOT (APPLE ?X)))       (<= (NOT (ROUND ?X)) (RED ?X) (NOT (APPLE ?X)))       (<= (APPLE ?X) (RED ?X) (ROUND ?X)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; varp;;; indvarp;;; seqvarp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(varp 'red)NIL(varp '(p a b))NIL(varp '?x)T(varp '@x)T(indvarp '?x)t(indvarp '@x)nil(seqvarp '@x)t(seqvarp '?x)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; eq;;; eql;;; equal;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(setq a '(one two))(ONE TWO)(setq b '(one two))(ONE TWO)(eql a a)T(equal a a)T(eql a b)NIL(equal a b)T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; identp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(identp '?x '?x)T(identp '@y '@y)T(identp '(quote ?x) '(quote ?y))NIL(identp nil '(quote nil))NIL(identp '(p '(g a) b) '(p (listof 'g 'a) b))T(identp '(p ?x b) '(p a b))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; samep;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(samep '(p ?x b) '(p ?y b))T(samep '(p ?x b) '(p a b))NIL(samep '(p ?x ?y) '(p ?y ?x))T(samep '(p ?x ?y) '(p ?w ?w))NIL(samep '(p ?x @y) '(p ?x ?y))NIL(samep '(p ?x @y) '(p ?y @x))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; samelist;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(samelist '(q e d) '(q e d))((T . T))(samelist '(p ?x b) '(p ?y b))((?X . ?Y) (T . T))(samelist '(p ?x b) '(p a b))NIL(samelist '(p ?x ?y) '(p ?y ?x))((?Y . ?X) (?X . ?Y) (T . T))(samelist '(p ?x ?y) '(p ?a ?b))((?Y . ?B) (?X . ?A) (T . T))(samelist '(p ?x ?y) '(p ?w ?w))NIL(samelist '(p ?x @y) '(p ?x ?y))NIL(samelist'(p ?x @y) '(p ?y @x))((@Y . @X) (?X . ?Y) (T . T));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; matchp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(matchp '(p ?x b) '(p a b))T(matchp '(p ?x ?y) '(p ?y x))T(matchp '(parents bill @x) '(parents bill ralph mary))T(matchp '(p a b) '(p ?x b))NIL(matchp '(p a b) '(p c ?x))NIL(matchp '(p ?x b) '(p a ?x))NIL(matchp '(p ?x b) '(p ?x b))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; matcher;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(matcher '(p ?x b) '(p a b))((?X . A) (T . T))(matcher '(p ?x ?y) '(p ?y x))((?Y . X) (?X . ?Y) (T . T))(matcher '(parents bill @x) '(parents bill ralph mary))((@X RALPH MARY) (T . T))(matcher '(p a b) '(p ?x b))NIL(matcher '(p a b) '(p c ?x))NIL(matcher '(p ?x b) '(p a ?x))NIL(matcher '(p ?x b) '(p ?x b))((?X . ?X) (T . T));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(instp '(p a b) '(p ?x b))T(instp '(p ?x b) '(p a b))NIL(instp '(p a b c)  '(p a @x))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instantiator;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(instantiator '(p a b) '(p ?x b))((?X . A) (T . T))(instantiator '(p ?x b) '(p a b))NIL(instantiator '(p a b c)  '(p a @x))((@x B C) (T . T));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; mgup;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(mgup '(p ?x b) '(p a ?y))T(mgup '(p ?x b) '(p a ?x))NIL(mgup '(p ?x b) '(p ?x b))T(mgup '(p ?x (f ?y)) '(p (g ?u) ?v))T(mgup '(+ (2 ?x) @y) '(+ (?x ?z) 4 5))T(mgup '(+ (2 ?x) @y) '(+ (?x 3) 4 5))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; mgu;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(mgu '(p ?x b) '(p a ?y))((?Y . B) (?X . A) (T . T))(mgu '(p ?x b) '(p a ?x))NIL(mgu '(p ?x b) '(p ?x b))((T . T))(mgu '(p ?x (f ?y)) '(p (g ?u) ?v))((?V F ?Y) (?X G ?U) (T . T))(mgu '(+ (2 ?x) @y) '(+ (?x ?z) 4 5))((@Y 4 5) (?Z . 2) (?X . 2) (T . T))(mgu '(+ (2 ?x) @y) '(+ (?x 3) 4 5))NIL(let ((*occurcheck* nil)) (mgu '(p ?x (f ?x)) '(p (g ?y) ?y)))((?Y F ?X) (?X G ?Y) (T . T))(mgu '(p ?x (f ?x)) '(p (g ?y) ?y))NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; unifyp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(unifyp '(red ?x) '(red @x))T(unifyp '(p ?x) '(?x q))T(unifyp '(p (f x) (q y)) '(p ?x (q ?x)))NIL(unifyp '(+ ?x 3 (* 2 y)) '(+ 2 3 (* 2 ?x)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; stdize;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(samep '(forall (?x) (=> (apple ?x) (fruit ?x)))       (stdize '(forall (?x) (=> (apple ?x) (fruit ?x)))))T(samep '(red ?x @y) (stdize '(red ?x @y)))T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; plug;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(plug '(parent ?x ?y) '((?Y . SAM) (?X . FRED) (T . T)))(PARENT FRED SAM)(plug '(parent ?u jackson) '((?Y . SAM) (?X . FRED) (T . T)))(PARENT ?U JACKSON)(mgu '(father ?x ?y) '(father fred sam))((?Y . SAM) (?X . FRED) (T . T))(plug '(parent ?x ?y) '((?Y . SAM) (?X . FRED) (T . T)))(PARENT FRED SAM);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Match tests;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(identp 1 1)t(identp 1 2)nil(identp '(p 1) '(p '1))t(identp '(p '1) '(p 1))t(identp 'a 'b)nil(identp '(quote (f a b)) '(quote (f a b)))t(identp '(quote (f a b)) '(listof 'f 'a 'b))t(identp '(listof 'f 'a 'b) '(quote (f a b)))t(identp '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(identp '(f (g a b) c) '(f (g a b) c))t(identp '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(identp '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(identp '(f (g ?x b) c) '(f (g a b) c))nil(identp '(f (g a b) c) '(f (g ?x b) c))nil(samep 1 1)t(samep 1 2)nil(samep '(p 1) '(p '1))t(samep '(p '1) '(p 1))t(samep 'a 'b)nil(samep '(quote (f a b)) '(quote (f a b)))t(samep '(quote (f a b)) '(listof 'f 'a 'b))t(samep '(listof 'f 'a 'b) '(quote (f a b)))t(samep '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(samep '(f (g a b) c) '(f (g a b) c))t(samep '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(samep '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(samep '(f (g ?x b) c) '(f (g a b) c))nil(samep '(f (g a b) c) '(f (g ?x b) c))nil(samep '(f ?x ?y ?x) '(f ?y ?z ?y))t(samep '(f ?x ?y ?z) '(f ?y ?z ?y))nil(matchp 1 1)t(matchp 1 2)nil(matchp '(p 1) '(p '1))t(matchp '(p '1) '(p 1))t(matchp 'a 'b)nil(matchp '(quote (f a b)) '(quote (f a b)))t(matchp '(quote (f a b)) '(listof 'f 'a 'b))t(matchp '(listof 'f 'a 'b) '(quote (f a b)))t(matchp '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(matchp '(f (g a b) c) '(f (g a b) c))t(matchp '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(matchp '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(matchp '(f (g ?x b) c) '(f (g a b) c))t(matchp '(f (g ?x ?x) c) '(f (g a b) c))nil(matchp '(f (g a b) c) '(f (g ?x b) c))nil(matchp '(listof 'f ?x 'b @z) '(quote (f a b c d)))t(matchp '(p (f @l) @l) '(p (f quote (g a)) list 'g 'a))nil(matchp '(p (listof 'f ?x) (listof 'g ?x)) '(p '(f 1) '(g 1)))t(mgup 1 1)t(mgup 1 2)nil(mgup '(p 1) '(p '1))t(mgup '(p '1) '(p 1))t(mgup 'a 'b)nil(mgup '(quote (f a b)) '(quote (f a b)))t(mgup '(quote (f a b)) '(listof 'f 'a 'b))t(mgup '(listof 'f 'a 'b) '(quote (f a b)))t(mgup '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(mgup '(f (g a b) c) '(f (g a b) c))t(mgup '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(mgup '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(mgup '(f (g ?x b) c) '(f (g a b) c))t(mgup '(f (g ?x ?x) c) '(f (g a b) c))nil(mgup '(f (g a b) c) '(f (g ?x b) c))t(mgup '(listof 'f ?x 'b @z) '(quote (f a b ?y d)))t(mgup '(f ?x b) '(f a ?x))nil(let ((*occurcheck* t)) (mgup '?x '(f ?x)))nil(let ((*occurcheck* t)) (mgup '(p ?x ?y) '(p ?y ?x)))t(let ((*occurcheck* t)) (mgup '(p ?x ?x ?y ?y) '(p ?u ?v ?v ?u)))t(let ((*occurcheck* t)) (mgup '(p @l) '(p (f @l))))nil(let ((*occurcheck* t)) (mgup '(p @l) '(p (f '@l))))t(let ((*occurcheck* t)) (mgup '(p @l) '(p (f quote @l))))nil(identifyp 1 1)t(identifyp 1 2)nil(identifyp '(p 1) '(p '1))t(identifyp '(p '1) '(p 1))t(identifyp 'a 'b)nil(identifyp '(quote (f a b)) '(quote (f a b)))t(identifyp '(quote (f a b)) '(listof 'f 'a 'b))t(identifyp '(listof 'f 'a 'b) '(quote (f a b)))t(identifyp '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(identifyp '(f (g a b) c) '(f (g a b) c))t(identifyp '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(identifyp '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(identifyp '(f (g ?x b) c) '(f (g a b) c))nil(identifyp '(f (g a b) c) '(f (g ?x b) c))nil(matchifyp 1 1)t(matchifyp 1 2)nil(matchifyp '(p 1) '(p '1))t(matchifyp '(p '1) '(p 1))t(matchifyp 'a 'b)nil(matchifyp '(quote (f a b)) '(quote (f a b)))t(matchifyp '(quote (f a b)) '(listof 'f 'a 'b))t(matchifyp '(listof 'f 'a 'b) '(quote (f a b)))t(matchifyp '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(matchifyp '(f (g a b) c) '(f (g a b) c))t(matchifyp '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(matchifyp '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(matchifyp '(f (g ?x b) c) '(f (g a b) c))t(matchifyp '(f (g ?x ?x) c) '(f (g a b) c))nil(matchifyp '(f (g a b) c) '(f (g ?x b) c))nil(matchifyp '(listof 'f ?x 'b @z) '(quote (f a b c d)))t(matchifyp '(p ?x ?x) '(p (f ?y) (f a)))nil(unifyp 1 1)t(unifyp 1 2)nil(unifyp '(p 1) '(p '1))t(unifyp '(p '1) '(p 1))t(unifyp 'a 'b)nil(unifyp '(quote (f a b)) '(quote (f a b)))t(unifyp '(quote (f a b)) '(listof 'f 'a 'b))t(unifyp '(listof 'f 'a 'b) '(quote (f a b)))t(unifyp '(listof 'f 'a 'b) '(listof 'f 'a 'b))t(unifyp '(f (g a b) c) '(f (g a b) c))t(unifyp '(p quote (f a b)) '(p list (quote f) (quote a) (quote b)))nil(unifyp '(quote (f a (quote b))) '(listof (quote f) (quote a) (quote b)))nil(unifyp '(f (g ?x b) c) '(f (g a b) c))t(unifyp '(f (g ?x ?x) c) '(f (g a b) c))nil(unifyp '(f (g a b) c) '(f (g ?x b) c))t(unifyp '(listof 'f ?x 'b @z) '(quote (f a b ?y d)))t(unifyp '(f ?x b) '(f a ?x))t(unifyp '(p (f 'b @l) (g @m) (listof 'a @m)) '(p (f @n) (g @n) '(a b c)))t(let ((*occurcheck* t)) (unifyp '?x '(f ?x)))t(let ((*occurcheck* t)) (unifyp '(f ?x (g ?x)) '(f (g ?y) ?y)))nil(let ((*occurcheck* t)) (unifyp '(p ?x ?y) '(p ?y ?x)))t(let ((*occurcheck* t)) (unifyp '(p ?x ?x ?y ?y) '(p ?u ?v ?v ?u)))t(let ((*occurcheck* t)) (unifyp '(p ?x ?x) '(p (f @l) (f (g @l)))))nil(let ((*occurcheck* t)) (unifyp '(p ?x ?x) '(p (f @l) (f (g '@l)))))t(let ((*occurcheck* t)) (unifyp '(p ?x ?x) '(p (f @l) (f (g quote @l)))))nil(mgup '(f (h ?1 ?2 ?3) (h ?6 ?7 ?8) ?3 ?6)        '(f (h (g ?4 ?5) ?1 ?2) (h ?7 ?8 ?6) (g ?5 a) ?5))t(mgup '(f ?1 (g ?2 ?3) ?2 b)        '(f (g (h a ?5) ?2) ?1 (h a ?4) ?4))t(mgup '(f ?x (f ?u ?x))        '(f (f ?y a) (f ?z (f b ?z))))t(mgup '(A (B ?v) (C ?u ?v))        '(A (B ?w) (C ?w (D ?x ?y))))t(mgup '(q ?1 (g ?1) ?2 (h ?1 ?2) ?3 (k ?1 ?2 ?3))        '(q ?y1 ?y2 (c ?y2) ?y3 (f ?y2 ?y3) ?y4))t(mgup '(p (f ?x (g ?x ?y)) (h ?z ?y))        '(p ?z (h (f ?u ?v) (f ?d ?c))))t(mgup '(f ?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9)        '(f ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9 a))t(mgup '(p ?w ?y ?x ?u)        '(p (g ?y ?y ?y) (g ?x ?x ?x) (g ?u ?u ?u) (g a a a)))t(mgup '(p ?1 ?3 (g ?2) c (h ?3 ?4 (f ?4 b)) ?4)        '(p (f ?3 ?y1) b ?y1 ?2 ?y2 (l ?y1 b)))t(mgup '(p ?1 ?2 ?3 ?4 ?5 (f ?y) ?7 ?8 ?9 ?10 (f a) ?7)        '(p ?2 ?3 ?4 ?5 ?6 ?6 ?8 ?9 ?10 ?11 ?11 ?1))t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Proprep tests;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(setq foo (insert '(p a a) 'global))(p a a)(contents 'global)((p a a))(uninsert '(p a a) 'global)(p a a)(contents 'global)((p a a))(uninsert foo 'global)(p a a)(contents 'global)NIL(insert '(p a a) 'global)(p a a)(empty 'global)GLOBAL(contents 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(includes 'a 'c)t(includes 'b 'c)t(includes 'c 'd)t(includes 'c 'e)t(includers 'c)(a b)(includees 'c)(d e)(mapcar-theories 'identity 'a)(a c d e)(mapappend-theories 'list 'a)(a c d e)(mapcan-theories 'list 'a)(a c d e)(mapc-theories 'identity 'a)a(mapand-theories 'atom 'a)t(mapand-theories 'listp 'a)nil(mapor-theories 'listp 'a)nil(mapor-theories 'atom 'a)t(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;