;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; data.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; datafindp,, datafindx, datafinds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(integer 2) 'global)t(datafindp '(integer 1/2) 'global)nil(datafindp '(integer 3.2) 'global)nil(datafindp '(integer #c(1 2)) 'global)nil(datafindp '(integer a) 'global)nil(datafindp '(even 2) 'global)t(datafindp '(even a) 'global)nil(datafindp '(odd 3) 'global)t(datafindp '(odd a) 'global)nil(datafindp '(positive 3) 'global)t(datafindp '(positive a) 'global)nil(datafindp '(negative -1) 'global)t(datafindp '(negative a) 'global)nil(datafindp '(zero 0) 'global)t(datafindp '(gcd 2 6 2) 'global)t(datafindp '(lcm 2 3 6) 'global)t(datafindp '(isqrt 5 2) 'global)t(datafindp '(mod 7 2 1) 'global)t(datafindp '(rem 3 2 1) 'global)t(datafindp '(ash 1 1 2) 'global)t(datafindp '(boole 6 1 1 1) 'global)t(datafindp '(logbit 2 6) 'global)t(datafindp '(logand 1 1 1) 'global)t(datafindp '(logandc1 0 1 1) 'global)t(datafindp '(logandc2 1 0 1) 'global)t(datafindp '(logcount 3 2) 'global)t(datafindp '(logeqv 1 1 -1) 'global)t(datafindp '(logior 1 1 1) 'global)t(datafindp '(lognand 0 1 -1) 'global)t(datafindp '(lognor 0 0 -1) 'global)t(datafindp '(lognot -4 3) 'global)t(datafindp '(logorc1 0 0 -1) 'global)t(datafindp '(logorc2 0 0 -1) 'global)t(datafindp '(logxor 0 1 1) 'global)t(datafindp '(zero a) 'global)nil(datafindp '(logbit 0 6) 'global)nil(datafindp '(logtest 2 6) 'global)t(datafindp '(logtest 2 -3) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(rationalnumber 1) 'global)t(datafindp '(rationalnumber 1/2) 'global)t(datafindp '(rationalnumber 3.2) 'global)nil(datafindp '(rationalnumber #c(1 2)) 'global)nil(datafindp '(rationalnumber a) 'global)nil(datafindp '(numerator 1/2 1) 'global)t(datafindp '(denominator 1/2 2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(realnumber 1) 'global)t(datafindp '(realnumber 1/2) 'global)t(datafindp '(realnumber 3.2) 'global)t(datafindp '(realnumber #c(1 2)) 'global)nil(datafindp '(realnumber a) 'global)nil(datafindp '(< 2 3) 'global)t(datafindp '(< 3 3) 'global)nil(datafindp '(< a b) 'global)nil(datafindp '(=< 2 3) 'global)t(datafindp '(=< 3 2) 'global)nil(datafindp '(=< a b) 'global)nil(datafindp '(> 3 2) 'global)t(datafindp '(> 3 3) 'global)nil(datafindp '(> a b) 'global)nil(datafindp '(>= 3 2) 'global)t(datafindp '(>= 2 3) 'global)nil(datafindp '(>= a b) 'global)nil(datafindp '(+ 1 2 3) 'global)t(datafindp '(- 3 2 1) 'global)t(datafindp '(* 2 3 6) 'global)t(datafindp '(/ 4 2 2) 'global)t(datafindp '(1+ 1 2) 'global)t(datafindp '(1- 2 1) 'global)t(datafindp '(abs -1 1) 'global)t(datafindp '(exp 0 1) 'global)t(datafindp '(expt 2 3 8) 'global)t(datafindp '(log 8 2 3) 'global)t(datafindp '(sqrt 4 2) 'global)t(datafindp '(max 1 2 3 3) 'global)t(datafindp '(min 1 2 3 1) 'global)t(datafindp '(signum 23 1) 'global)t(datafindp '(acos 1 0) 'global)t(datafindp '(acosh 1 0) 'global)t(datafindp '(asin 0 0) 'global)t(datafindp '(asinh 0 0) 'global)t(datafindp '(atan 0 0) 'global)t(datafindp '(atanh 0 0) 'global)t(datafindp '(cos 0 1) 'global)t(datafindp '(cosh 0 1) 'global)t(datafindp '(sin 0 0) 'global)t(datafindp '(sinh 0 0) 'global)t(datafindp '(tan 0 0) 'global)t(datafindp '(tanh 0 0) 'global)t(datafindp '(ceiling 1.6 2) 'global)t(datafindp '(floor 1.6 1) 'global)t(datafindp '(round 1.6 2) 'global)t(datafindp '(truncate 1.6 1) 'global)t(datafindp '(rationalize 0.5 1/2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(complexnumber 1) 'global)nil ;;; t?(datafindp '(complexnumber 1/2) 'global)nil ;;; t?(datafindp '(complexnumber 3.2) 'global)nil ;;; t?(datafindp '(complexnumber #c(1 2)) 'global)t(datafindp '(complexnumber a) 'global)nil(datafindp '(conjugate #c(1 1) #c(1 -1)) 'global)t(datafindp '(complex 1 1 #c(1 1)) 'global)t(datafindp '(realpart #c(1 2) 1) 'global)t(datafindp '(imagpart #c(1 2) 2) 'global)t(datafindp '(cis 0 #c(1 0)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(number 1) 'global)t(datafindp '(number 1/2) 'global)t(datafindp '(number 3.2) 'global)t(datafindp '(number #c(1 2)) 'global)t(datafindp '(number a) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(character #\a) 'test)t(datafindp '(character "a") 'test)nil(datafindp '(character a) 'test)nil(datafindp '(alphabetic #\a) 'test)t(datafindp '(alphabetic #\1) 'test)nil(datafindp '(uppercase #\A) 'test)t(datafindp '(uppercase #\a) 'test)nil(datafindp '(lowercase #\a) 'test)t(datafindp '(lowercase #\A) 'test)nil(datafindp '(digit #\1) 'test)t(datafindp '(digit #\a) 'test)nil(datafindp '(alphanumeric #\a) 'test)t(datafindp '(alphanumeric #\1) 'test)t(datafindp '(alphanumeric #\.) 'test)nil(datafindp '(chargreater #\b #\a) 'test)t(datafindp '(chargreater #\a #\b) 'test)nil(datafindp '(charless #\a #\b) 'test)t(datafindp '(charless #\b #\a) 'test)nil(datafindp '(charupcase #\a #\A) 'test)t(datafindp '(chardowncase #\A #\a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(string #\a) 'test)nil(datafindp '(string "a") 'test)t(datafindp '(string a) 'test)nil(datafindp '(stringgreater "bbc" "abc") 'test)t(datafindp '(stringgreater "abc" "bbc") 'test)nil(datafindp '(stringless "abc" "bbc") 'test)t(datafindp '(stringless "bbc" "abc") 'test)nil(datafindp '(substring "bc" "abcd") 'test)t(datafindp '(substring "abcd" "ab") 'test)nil(datafindp '(stringlength "abc" 3) 'test)t(datafindp '(stringelement "abc" 2 #\b) 'test)t(datafindp '(stringsubseq "abcd" 2 3 "bc") 'test)t(datafindp '(stringalphanumeric " a bc'd-e " "abcde") 'test)t(datafindp '(stringappend "abc" "def" "ghi" "abcdefghi") 'test)t(datafindp '(stringappend "" "") 'test)t(datafindp '(stringcharpos #\b "abc" 2) 'test)t(datafindx '?x '(stringcharpos #\d "abc" ?x) 'test)nil(datafindp '(stringposition "bc" "abcd" 2) 'test)t(datafindx '?x '(stringposition "cb" "abcd" ?x) 'test)nil(datafindp '(stringsubstitute #\a #\b "abab" "aaaa") 'test)t(datafindp '(stringupcase "abc" "ABC") 'test)t(datafindp '(stringdowncase "ABC" "abc") 'test)t(datafindp '(stringcapitalize "abc.def" "Abc.Def") 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(charstring #\a "a") 'test)t(datafindp '(stringify a "A") 'test)t(datafindp '(symbolize "a" a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(datafindp '(same a a) 'global)t(datafindp '(same a b) 'global)nil(datafindp '(distinct a a) 'global)nil(datafindp '(distinct a b) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Database inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (p a1 b1)  (p a1 b2)  (p a1 b3)  (p a1 b4)  (p a1 b5)  (q b2 c1)  (q b2 c2)  (q b4 c4)  (q b4 c5))*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; database used alone;;; Speed up should be around factor of 5.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(fastfinds '(?x ?z) '(and (p ?x ?y) (q ?y ?z)) 'global)((a1 c1) (a1 c2) (a1 c4) (a1 c5))(datafinds '(?x ?z) '(and (p ?x ?y) (q ?y ?z)) 'global)((a1 c1) (a1 c2) (a1 c4) (a1 c5));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;