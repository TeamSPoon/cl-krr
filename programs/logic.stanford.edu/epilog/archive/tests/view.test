;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; view.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; viewfindp, viewfindx, viewfinds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(integer 2) 'global)t(viewfindp '(integer 1/2) 'global)nil(viewfindp '(integer 3.2) 'global)nil(viewfindp '(integer #c(1 2)) 'global)nil(viewfindp '(integer a) 'global)nil(viewfindp '(even 2) 'global)t(viewfindp '(even a) 'global)nil(viewfindp '(odd 3) 'global)t(viewfindp '(odd a) 'global)nil(viewfindp '(positive 3) 'global)t(viewfindp '(positive a) 'global)nil(viewfindp '(negative -1) 'global)t(viewfindp '(negative a) 'global)nil(viewfindp '(zero 0) 'global)t(viewfindp '(gcd 2 6 2) 'global)t(viewfindp '(lcm 2 3 6) 'global)t(viewfindp '(isqrt 5 2) 'global)t(viewfindp '(mod 7 2 1) 'global)t(viewfindp '(rem 3 2 1) 'global)t(viewfindp '(ash 1 1 2) 'global)t(viewfindp '(boole 6 1 1 1) 'global)t(viewfindp '(logbit 2 6) 'global)t(viewfindp '(logand 1 1 1) 'global)t(viewfindp '(logandc1 0 1 1) 'global)t(viewfindp '(logandc2 1 0 1) 'global)t(viewfindp '(logcount 3 2) 'global)t(viewfindp '(logeqv 1 1 -1) 'global)t(viewfindp '(logior 1 1 1) 'global)t(viewfindp '(lognand 0 1 -1) 'global)t(viewfindp '(lognor 0 0 -1) 'global)t(viewfindp '(lognot -4 3) 'global)t(viewfindp '(logorc1 0 0 -1) 'global)t(viewfindp '(logorc2 0 0 -1) 'global)t(viewfindp '(logxor 0 1 1) 'global)t(viewfindp '(zero a) 'global)nil(viewfindp '(logbit 0 6) 'global)nil(viewfindp '(logtest 2 6) 'global)t(viewfindp '(logtest 2 -3) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(rationalnumber 1) 'global)t(viewfindp '(rationalnumber 1/2) 'global)t(viewfindp '(rationalnumber 3.2) 'global)nil(viewfindp '(rationalnumber #c(1 2)) 'global)nil(viewfindp '(rationalnumber a) 'global)nil(viewfindp '(numerator 1/2 1) 'global)t(viewfindp '(denominator 1/2 2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(realnumber 1) 'global)t(viewfindp '(realnumber 1/2) 'global)t(viewfindp '(realnumber 3.2) 'global)t(viewfindp '(realnumber #c(1 2)) 'global)nil(viewfindp '(realnumber a) 'global)nil(viewfindp '(< 2 3) 'global)t(viewfindp '(< 3 3) 'global)nil(viewfindp '(< a b) 'global)nil(viewfindp '(=< 2 3) 'global)t(viewfindp '(=< 3 2) 'global)nil(viewfindp '(=< a b) 'global)nil(viewfindp '(> 3 2) 'global)t(viewfindp '(> 3 3) 'global)nil(viewfindp '(> a b) 'global)nil(viewfindp '(>= 3 2) 'global)t(viewfindp '(>= 2 3) 'global)nil(viewfindp '(>= a b) 'global)nil(viewfindp '(+ 1 2 3) 'global)t(viewfindp '(- 3 2 1) 'global)t(viewfindp '(* 2 3 6) 'global)t(viewfindp '(/ 4 2 2) 'global)t(viewfindp '(1+ 1 2) 'global)t(viewfindp '(1- 2 1) 'global)t(viewfindp '(abs -1 1) 'global)t(viewfindp '(exp 0 1) 'global)t(viewfindp '(expt 2 3 8) 'global)t(viewfindp '(log 8 2 3) 'global)t(viewfindp '(sqrt 4 2) 'global)t(viewfindp '(max 1 2 3 3) 'global)t(viewfindp '(min 1 2 3 1) 'global)t(viewfindp '(signum 23 1) 'global)t(viewfindp '(acos 1 0) 'global)t(viewfindp '(acosh 1 0) 'global)t(viewfindp '(asin 0 0) 'global)t(viewfindp '(asinh 0 0) 'global)t(viewfindp '(atan 0 0) 'global)t(viewfindp '(atanh 0 0) 'global)t(viewfindp '(cos 0 1) 'global)t(viewfindp '(cosh 0 1) 'global)t(viewfindp '(sin 0 0) 'global)t(viewfindp '(sinh 0 0) 'global)t(viewfindp '(tan 0 0) 'global)t(viewfindp '(tanh 0 0) 'global)t(viewfindp '(ceiling 1.6 2) 'global)t(viewfindp '(floor 1.6 1) 'global)t(viewfindp '(round 1.6 2) 'global)t(viewfindp '(truncate 1.6 1) 'global)t(viewfindp '(rationalize 0.5 1/2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(complexnumber 1) 'global)nil ;;; t?(viewfindp '(complexnumber 1/2) 'global)nil ;;; t?(viewfindp '(complexnumber 3.2) 'global)nil ;;; t?(viewfindp '(complexnumber #c(1 2)) 'global)t(viewfindp '(complexnumber a) 'global)nil(viewfindp '(conjugate #c(1 1) #c(1 -1)) 'global)t(viewfindp '(complex 1 1 #c(1 1)) 'global)t(viewfindp '(realpart #c(1 2) 1) 'global)t(viewfindp '(imagpart #c(1 2) 2) 'global)t(viewfindp '(cis 0 #c(1 0)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(number 1) 'global)t(viewfindp '(number 1/2) 'global)t(viewfindp '(number 3.2) 'global)t(viewfindp '(number #c(1 2)) 'global)t(viewfindp '(number a) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(character #\a) 'global)t(viewfindp '(character "a") 'global)nil(viewfindp '(character a) 'global)nil(viewfindp '(alphabetic #\a) 'global)t(viewfindp '(alphabetic #\1) 'global)nil(viewfindp '(uppercase #\A) 'global)t(viewfindp '(uppercase #\a) 'global)nil(viewfindp '(lowercase #\a) 'global)t(viewfindp '(lowercase #\A) 'global)nil(viewfindp '(digit #\1) 'global)t(viewfindp '(digit #\a) 'global)nil(viewfindp '(alphanumeric #\a) 'global)t(viewfindp '(alphanumeric #\1) 'global)t(viewfindp '(alphanumeric #\.) 'global)nil(viewfindp '(chargreater #\b #\a) 'global)t(viewfindp '(chargreater #\a #\b) 'global)nil(viewfindp '(charless #\a #\b) 'global)t(viewfindp '(charless #\b #\a) 'global)nil(viewfindp '(charupcase #\a #\A) 'global)t(viewfindp '(chardowncase #\A #\a) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(string #\a) 'global)nil(viewfindp '(string "a") 'global)t(viewfindp '(string a) 'global)nil(viewfindp '(stringgreater "bbc" "abc") 'global)t(viewfindp '(stringgreater "abc" "bbc") 'global)nil(viewfindp '(stringless "abc" "bbc") 'global)t(viewfindp '(stringless "bbc" "abc") 'global)nil(viewfindp '(substring "bc" "abcd") 'global)t(viewfindp '(substring "abcd" "ab") 'global)nil(viewfindp '(stringlength "abc" 3) 'global)t(viewfindp '(stringelement "abc" 2 #\b) 'global)t(viewfindp '(stringsubseq "abcd" 2 3 "bc") 'global)t(viewfindp '(stringalphanumeric " a bc'd-e " "abcde") 'global)t(viewfindp '(stringappend "abc" "def" "ghi" "abcdefghi") 'global)t(viewfindp '(stringappend "" "") 'global)t(viewfindp '(stringcharpos #\b "abc" 2) 'global)t(viewfindx '?x '(stringcharpos #\d "abc" ?x) 'global)nil(viewfindp '(stringposition "bc" "abcd" 2) 'global)t(viewfindx '?x '(stringposition "cb" "abcd" ?x) 'global)nil(viewfindp '(stringsubstitute #\a #\b "abab" "aaaa") 'global)t(viewfindp '(stringupcase "abc" "ABC") 'global)t(viewfindp '(stringdowncase "ABC" "abc") 'global)t(viewfindp '(stringcapitalize "abc.def" "Abc.Def") 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(charstring #\a "a") 'global)t(viewfindp '(stringify a "A") 'global)t(viewfindp '(symbolize "a" a) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp '(word 'a) 'global)t(viewfindp '(word a) 'global)nil(viewfindp '(indvar '?x) 'global)t(viewfindp '(indvar a) 'global)nil(viewfindp '(seqvar '@l) 'global)t(viewfindp '(seqvar a) 'global)nil(viewfindp '(variable '?x) 'global)t(viewfindp '(variable '@l) 'global)t(viewfindp '(variable a) 'global)nil(viewfindp '(same a a) 'global)t(viewfindp '(same a b) 'global)nil(viewfindp '(distinct a a) 'global)nil(viewfindp '(distinct a b) 'global)t(viewfindp '(oneof b a b c) 'global)t(viewfindp '(oneof d a b c) 'global)nil(viewfindp '(choose ?x (oneof ?x a b c) a) 'global)t(viewfindp '(choose ?x (oneof ?x a b c) b) 'global)nil(viewfindp '(bagofall ?x (oneof ?x a b c) (listof a b c)) 'global)t(viewfindp '(bagofall ?x (oneof ?x a b c) (listof a)) 'global)nil(viewfindp '(ground a) 'global)t(viewfindp '(ground ?x) 'global)nil(viewfindp '(nonground a) 'global)nil(viewfindp '(nonground ?x) 'global)t(viewfindp '(execute (member 'b '(a b c)) '(b c)) 'global)t(viewfindp '(evaluate (member b (a b c)) (b c)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewfindp 'true 'global)t(viewfindp 'false 'global)nil(viewfindp '(not true) 'global)nil(viewfindp '(not false) 'global)t(viewfindp '(and true true) 'global)t(viewfindp '(and true false) 'global)nil(viewfindp '(and false true) 'global)nil(viewfindp '(and false false) 'global)nil(viewfindp '(or true true) 'global)t(viewfindp '(or true false) 'global)t(viewfindp '(or false true) 'global)t(viewfindp '(or false false) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory global  (p a)  (p b)  (p c)  (q b)  (q c))*(viewfindp '(and (p b) (q b)) 'global)t(viewfindp '(or (p a) (q a)) 'global)t(viewfindx '?x '(and (p ?x) (q ?x)) 'global)b(viewfindx '?x '(or (p ?x) (q ?x)) 'global)a(viewfinds '?x '(and (p ?x) (q ?x)) 'global)(b c)(viewfinds '?x '(or (p ?x) (q ?x)) 'global)(a b c);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory pp  (pp a a)  (pp a b))*(deftheory qq  (qq b c))*(deftheory global  (<= (r ?x ?y ?z) (pp ?x ?y) (qq ?y ?z)))*(includes 'global 'pp)*(includes 'global 'qq)*(viewfindp '(and (pp a b) (qq b c)) 'global)t(viewfindx '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'global)(a b c)(viewfinds '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'global)((a b c))(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; viewresidue, viewresidues;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(integer 2) 'global)TRUE(viewresidue '(integer 1/2) 'global)NIL(viewresidue '(integer 3.2) 'global)NIL(viewresidue '(integer #c(1 2)) 'global)NIL(viewresidue '(integer a) 'global)NIL(viewresidue '(even 2) 'global)TRUE(viewresidue '(even a) 'global)NIL(viewresidue '(odd 3) 'global)TRUE(viewresidue '(odd a) 'global)NIL(viewresidue '(positive 3) 'global)TRUE(viewresidue '(positive a) 'global)NIL(viewresidue '(negative -1) 'global)TRUE(viewresidue '(negative a) 'global)NIL(viewresidue '(zero 0) 'global)TRUE(viewresidue '(gcd 2 6 2) 'global)TRUE(viewresidue '(lcm 2 3 6) 'global)TRUE(viewresidue '(isqrt 5 2) 'global)TRUE(viewresidue '(mod 7 2 1) 'global)TRUE(viewresidue '(rem 3 2 1) 'global)TRUE(viewresidue '(ash 1 1 2) 'global)TRUE(viewresidue '(boole 6 1 1 1) 'global)TRUE(viewresidue '(logbit 2 6) 'global)TRUE(viewresidue '(logand 1 1 1) 'global)TRUE(viewresidue '(logandc1 0 1 1) 'global)TRUE(viewresidue '(logandc2 1 0 1) 'global)TRUE(viewresidue '(logcount 3 2) 'global)TRUE(viewresidue '(logeqv 1 1 -1) 'global)TRUE(viewresidue '(logior 1 1 1) 'global)TRUE(viewresidue '(lognand 0 1 -1) 'global)TRUE(viewresidue '(lognor 0 0 -1) 'global)TRUE(viewresidue '(lognot -4 3) 'global)TRUE(viewresidue '(logorc1 0 0 -1) 'global)TRUE(viewresidue '(logorc2 0 0 -1) 'global)TRUE(viewresidue '(logxor 0 1 1) 'global)TRUE(viewresidue '(zero a) 'global)NIL(viewresidue '(logbit 0 6) 'global)NIL(viewresidue '(logtest 2 6) 'global)TRUE(viewresidue '(logtest 2 -3) 'global)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(rationalnumber 1) 'global)TRUE(viewresidue '(rationalnumber 1/2) 'global)TRUE(viewresidue '(rationalnumber 3.2) 'global)NIL(viewresidue '(rationalnumber #c(1 2)) 'global)NIL(viewresidue '(rationalnumber a) 'global)NIL(viewresidue '(numerator 1/2 1) 'global)TRUE(viewresidue '(denominator 1/2 2) 'global)TRUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(realnumber 1) 'global)TRUE(viewresidue '(realnumber 1/2) 'global)TRUE(viewresidue '(realnumber 3.2) 'global)TRUE(viewresidue '(realnumber #c(1 2)) 'global)NIL(viewresidue '(realnumber a) 'global)NIL(viewresidue '(< 2 3) 'global)TRUE(viewresidue '(< 3 3) 'global)NIL(viewresidue '(< a b) 'global)NIL(viewresidue '(=< 2 3) 'global)TRUE(viewresidue '(=< 3 2) 'global)NIL(viewresidue '(=< a b) 'global)NIL(viewresidue '(> 3 2) 'global)TRUE(viewresidue '(> 3 3) 'global)NIL(viewresidue '(> a b) 'global)NIL(viewresidue '(>= 3 2) 'global)TRUE(viewresidue '(>= 2 3) 'global)NIL(viewresidue '(>= a b) 'global)NIL(viewresidue '(+ 1 2 3) 'global)TRUE(viewresidue '(- 3 2 1) 'global)TRUE(viewresidue '(* 2 3 6) 'global)TRUE(viewresidue '(/ 4 2 2) 'global)TRUE(viewresidue '(1+ 1 2) 'global)TRUE(viewresidue '(1- 2 1) 'global)TRUE(viewresidue '(abs -1 1) 'global)TRUE(viewresidue '(exp 0 1) 'global)TRUE(viewresidue '(expt 2 3 8) 'global)TRUE(viewresidue '(log 8 2 3) 'global)TRUE(viewresidue '(sqrt 4 2) 'global)TRUE(viewresidue '(max 1 2 3 3) 'global)TRUE(viewresidue '(min 1 2 3 1) 'global)TRUE(viewresidue '(signum 23 1) 'global)TRUE(viewresidue '(acos 1 0) 'global)TRUE(viewresidue '(acosh 1 0) 'global)TRUE(viewresidue '(asin 0 0) 'global)TRUE(viewresidue '(asinh 0 0) 'global)TRUE(viewresidue '(atan 0 0) 'global)TRUE(viewresidue '(atanh 0 0) 'global)TRUE(viewresidue '(cos 0 1) 'global)TRUE(viewresidue '(cosh 0 1) 'global)TRUE(viewresidue '(sin 0 0) 'global)TRUE(viewresidue '(sinh 0 0) 'global)TRUE(viewresidue '(tan 0 0) 'global)TRUE(viewresidue '(tanh 0 0) 'global)TRUE(viewresidue '(ceiling 1.6 2) 'global)TRUE(viewresidue '(floor 1.6 1) 'global)TRUE(viewresidue '(round 1.6 2) 'global)TRUE(viewresidue '(truncate 1.6 1) 'global)TRUE(viewresidue '(rationalize 0.5 1/2) 'global)TRUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(complexnumber 1) 'global)nil ;;; t?(viewresidue '(complexnumber 1/2) 'global)nil ;;; t?(viewresidue '(complexnumber 3.2) 'global)nil ;;; t?(viewresidue '(complexnumber #c(1 2)) 'global)TRUE(viewresidue '(complexnumber a) 'global)NIL(viewresidue '(conjugate #c(1 1) #c(1 -1)) 'global)TRUE(viewresidue '(complex 1 1 #c(1 1)) 'global)TRUE(viewresidue '(realpart #c(1 2) 1) 'global)TRUE(viewresidue '(imagpart #c(1 2) 2) 'global)TRUE(viewresidue '(cis 0 #c(1 0)) 'global)TRUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(number 1) 'global)TRUE(viewresidue '(number 1/2) 'global)TRUE(viewresidue '(number 3.2) 'global)TRUE(viewresidue '(number #c(1 2)) 'global)TRUE(viewresidue '(number a) 'global)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(character #\a) 'global)TRUE(viewresidue '(character "a") 'global)NIL(viewresidue '(character a) 'global)NIL(viewresidue '(alphabetic #\a) 'global)TRUE(viewresidue '(alphabetic #\1) 'global)NIL(viewresidue '(uppercase #\A) 'global)TRUE(viewresidue '(uppercase #\a) 'global)NIL(viewresidue '(lowercase #\a) 'global)TRUE(viewresidue '(lowercase #\A) 'global)NIL(viewresidue '(digit #\1) 'global)TRUE(viewresidue '(digit #\a) 'global)NIL(viewresidue '(alphanumeric #\a) 'global)TRUE(viewresidue '(alphanumeric #\1) 'global)TRUE(viewresidue '(alphanumeric #\.) 'global)NIL(viewresidue '(chargreater #\b #\a) 'global)TRUE(viewresidue '(chargreater #\a #\b) 'global)NIL(viewresidue '(charless #\a #\b) 'global)TRUE(viewresidue '(charless #\b #\a) 'global)NIL(viewresidue '(charupcase #\a #\A) 'global)TRUE(viewresidue '(chardowncase #\A #\a) 'global)TRUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(string #\a) 'global)NIL(viewresidue '(string "a") 'global)TRUE(viewresidue '(string a) 'global)NIL(viewresidue '(stringgreater "bbc" "abc") 'global)TRUE(viewresidue '(stringgreater "abc" "bbc") 'global)NIL(viewresidue '(stringless "abc" "bbc") 'global)TRUE(viewresidue '(stringless "bbc" "abc") 'global)NIL(viewresidue '(substring "bc" "abcd") 'global)TRUE(viewresidue '(substring "abcd" "ab") 'global)NIL(viewresidue '(stringlength "abc" 3) 'global)TRUE(viewresidue '(stringelement "abc" 2 #\b) 'global)TRUE(viewresidue '(stringsubseq "abcd" 2 3 "bc") 'global)TRUE(viewresidue '(stringalphanumeric " a bc'd-e " "abcde") 'global)TRUE(viewresidue '(stringappend "abc" "def" "ghi" "abcdefghi") 'global)TRUE(viewresidue '(stringappend "" "") 'global)TRUE(viewresidue '(stringcharpos #\b "abc" 2) 'global)TRUE(viewfindx '?x '(stringcharpos #\d "abc" ?x) 'global)NIL(viewresidue '(stringposition "bc" "abcd" 2) 'global)TRUE(viewfindx '?x '(stringposition "cb" "abcd" ?x) 'global)NIL(viewresidue '(stringsubstitute #\a #\b "abab" "aaaa") 'global)TRUE(viewresidue '(stringupcase "abc" "ABC") 'global)TRUE(viewresidue '(stringdowncase "ABC" "abc") 'global)TRUE(viewresidue '(stringcapitalize "abc.def" "Abc.Def") 'global)TRUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(charstring #\a "a") 'global)TRUE(viewresidue '(stringify a "A") 'global)TRUE(viewresidue '(symbolize "a" a) 'global)TRUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(viewresidue '(word 'a) 'global)TRUE(viewresidue '(word a) 'global)NIL(viewresidue '(indvar '?x) 'global)TRUE(viewresidue '(indvar a) 'global)NIL(viewresidue '(seqvar '@l) 'global)TRUE(viewresidue '(seqvar a) 'global)NIL(viewresidue '(variable '?x) 'global)TRUE(viewresidue '(variable '@l) 'global)TRUE(viewresidue '(variable a) 'global)NIL(viewresidue '(same a a) 'global)TRUE(viewresidue '(same a b) 'global)NIL(viewresidue '(distinct a a) 'global)NIL(viewresidue '(distinct a b) 'global)TRUE(viewresidue '(oneof b a b c) 'global)(ONEOF B A B C)(viewresidue '(oneof d a b c) 'global)(ONEOF D A B C)(viewresidue '(choose ?x (oneof ?x a b c) a) 'global)(CHOOSE ?X (ONEOF ?X A B C) A)(viewresidue '(choose ?x (oneof ?x a b c) b) 'global)(CHOOSE ?X (ONEOF ?X A B C) B)(viewresidue '(bagofall ?x (oneof ?x a b c) (listof a b c)) 'global)(BAGOFALL ?X (ONEOF ?X A B C) (LISTOF A B C))(viewresidue '(bagofall ?x (oneof ?x a b c) (listof a)) 'global)(BAGOFALL ?X (ONEOF ?X A B C) (LISTOF A))(viewresidue '(ground a) 'global)TRUE(viewresidue '(ground ?x) 'global)NIL(viewresidue '(nonground a) 'global)NIL(viewresidue '(nonground ?x) 'global)TRUE(viewresidue '(execute (member 'b '(a b c)) '(b c)) 'global)(EXECUTE (MEMBER 'B '(A B C)) '(B C))(viewresidue '(evaluate (member b (a b c)) (b c)) 'global)(EVALUATE (MEMBER B (A B C)) (B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;