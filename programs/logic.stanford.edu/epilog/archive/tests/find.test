;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; find.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; findp, findx, finds;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(integer 2) 'global)t(findp '(integer 1/2) 'global)nil(findp '(integer 3.2) 'global)nil(findp '(integer #c(1 2)) 'global)nil(findp '(integer a) 'global)nil(findp '(even 2) 'global)t(findp '(even a) 'global)nil(findp '(odd 3) 'global)t(findp '(odd a) 'global)nil(findp '(positive 3) 'global)t(findp '(positive a) 'global)nil(findp '(negative -1) 'global)t(findp '(negative a) 'global)nil(findp '(zero 0) 'global)t(findp '(gcd 2 6 2) 'global)t(findp '(lcm 2 3 6) 'global)t(findp '(isqrt 5 2) 'global)t(findp '(mod 7 2 1) 'global)t(findp '(rem 3 2 1) 'global)t(findp '(ash 1 1 2) 'global)t(findp '(boole 6 1 1 1) 'global)t(findp '(logbit 2 6) 'global)t(findp '(logand 1 1 1) 'global)t(findp '(logandc1 0 1 1) 'global)t(findp '(logandc2 1 0 1) 'global)t(findp '(logcount 3 2) 'global)t(findp '(logeqv 1 1 -1) 'global)t(findp '(logior 1 1 1) 'global)t(findp '(lognand 0 1 -1) 'global)t(findp '(lognor 0 0 -1) 'global)t(findp '(lognot -4 3) 'global)t(findp '(logorc1 0 0 -1) 'global)t(findp '(logorc2 0 0 -1) 'global)t(findp '(logxor 0 1 1) 'global)t(findp '(zero a) 'global)nil(findp '(logbit 0 6) 'global)nil(findp '(logtest 2 6) 'global)t(findp '(logtest 2 -3) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(rationalnumber 1) 'global)t(findp '(rationalnumber 1/2) 'global)t(findp '(rationalnumber 3.2) 'global)nil(findp '(rationalnumber #c(1 2)) 'global)nil(findp '(rationalnumber a) 'global)nil(findp '(numerator 1/2 1) 'global)t(findp '(denominator 1/2 2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(realnumber 1) 'global)t(findp '(realnumber 1/2) 'global)t(findp '(realnumber 3.2) 'global)t(findp '(realnumber #c(1 2)) 'global)nil(findp '(realnumber a) 'global)nil(findp '(< 2 3) 'global)t(findp '(< 3 3) 'global)nil(findp '(< a b) 'global)nil(findp '(=< 2 3) 'global)t(findp '(=< 3 2) 'global)nil(findp '(=< a b) 'global)nil(findp '(> 3 2) 'global)t(findp '(> 3 3) 'global)nil(findp '(> a b) 'global)nil(findp '(>= 3 2) 'global)t(findp '(>= 2 3) 'global)nil(findp '(>= a b) 'global)nil(findp '(+ 1 2 3) 'global)t(findp '(- 3 2 1) 'global)t(findp '(* 2 3 6) 'global)t(findp '(/ 4 2 2) 'global)t(findp '(1+ 1 2) 'global)t(findp '(1- 2 1) 'global)t(findp '(abs -1 1) 'global)t(findp '(exp 0 1) 'global)t(findp '(expt 2 3 8) 'global)t(findp '(log 8 2 3) 'global)t(findp '(sqrt 4 2) 'global)t(findp '(max 1 2 3 3) 'global)t(findp '(min 1 2 3 1) 'global)t(findp '(signum 23 1) 'global)t(findp '(acos 1 0) 'global)t(findp '(acosh 1 0) 'global)t(findp '(asin 0 0) 'global)t(findp '(asinh 0 0) 'global)t(findp '(atan 0 0) 'global)t(findp '(atanh 0 0) 'global)t(findp '(cos 0 1) 'global)t(findp '(cosh 0 1) 'global)t(findp '(sin 0 0) 'global)t(findp '(sinh 0 0) 'global)t(findp '(tan 0 0) 'global)t(findp '(tanh 0 0) 'global)t(findp '(ceiling 1.6 2) 'global)t(findp '(floor 1.6 1) 'global)t(findp '(round 1.6 2) 'global)t(findp '(truncate 1.6 1) 'global)t(findp '(rationalize 0.5 1/2) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(complexnumber 1) 'global)nil ;;; t?(findp '(complexnumber 1/2) 'global)nil ;;; t?(findp '(complexnumber 3.2) 'global)nil ;;; t?(findp '(complexnumber #c(1 2)) 'global)t(findp '(complexnumber a) 'global)nil(findp '(conjugate #c(1 1) #c(1 -1)) 'global)t(findp '(complex 1 1 #c(1 1)) 'global)t(findp '(realpart #c(1 2) 1) 'global)t(findp '(imagpart #c(1 2) 2) 'global)t(findp '(cis 0 #c(1 0)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(number 1) 'global)t(findp '(number 1/2) 'global)t(findp '(number 3.2) 'global)t(findp '(number #c(1 2)) 'global)t(findp '(number a) 'global)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(character #\a) 'test)t(findp '(character "a") 'test)nil(findp '(character a) 'test)nil(findp '(alphabetic #\a) 'test)t(findp '(alphabetic #\1) 'test)nil(findp '(uppercase #\A) 'test)t(findp '(uppercase #\a) 'test)nil(findp '(lowercase #\a) 'test)t(findp '(lowercase #\A) 'test)nil(findp '(digit #\1) 'test)t(findp '(digit #\a) 'test)nil(findp '(alphanumeric #\a) 'test)t(findp '(alphanumeric #\1) 'test)t(findp '(alphanumeric #\.) 'test)nil(findp '(chargreater #\b #\a) 'test)t(findp '(chargreater #\a #\b) 'test)nil(findp '(charless #\a #\b) 'test)t(findp '(charless #\b #\a) 'test)nil(findp '(charupcase #\a #\A) 'test)t(findp '(chardowncase #\A #\a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(string #\a) 'test)nil(findp '(string "a") 'test)t(findp '(string a) 'test)nil(findp '(stringgreater "bbc" "abc") 'test)t(findp '(stringgreater "abc" "bbc") 'test)nil(findp '(stringless "abc" "bbc") 'test)t(findp '(stringless "bbc" "abc") 'test)nil(findp '(substring "bc" "abcd") 'test)t(findp '(substring "abcd" "ab") 'test)nil(findp '(stringlength "abc" 3) 'test)t(findp '(stringelement "abc" 2 #\b) 'test)t(findp '(stringsubseq "abcd" 2 3 "bc") 'test)t(findp '(stringalphanumeric " a bc'd-e " "abcde") 'test)t(findp '(stringappend "abc" "def" "ghi" "abcdefghi") 'test)t(findp '(stringappend "" "") 'test)t(findp '(stringcharpos #\b "abc" 2) 'test)t(findx '?x '(stringcharpos #\d "abc" ?x) 'test)nil(findp '(stringposition "bc" "abcd" 2) 'test)t(findx '?x '(stringposition "cb" "abcd" ?x) 'test)nil(findp '(stringsubstitute #\a #\b "abab" "aaaa") 'test)t(findp '(stringupcase "abc" "ABC") 'test)t(findp '(stringdowncase "ABC" "abc") 'test)t(findp '(stringcapitalize "abc.def" "Abc.Def") 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(charstring #\a "a") 'test)t(findp '(stringify a "A") 'test)t(findp '(symbolize "a" a) 'test)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp '(same a a) 'global)t(findp '(same a b) 'global)nil(findp '(distinct a a) 'global)nil(findp '(distinct a b) 'global)t(findp '(word 'a) 'global)t(findp '(word a) 'global)nil(findp '(indvar '?x) 'global)t(findp '(indvar a) 'global)nil(findp '(seqvar '@l) 'global)t(findp '(seqvar a) 'global)nil(findp '(variable '?x) 'global)t(findp '(variable '@l) 'global)t(findp '(variable a) 'global)nil(findp '(execute (member 'b '(a b c)) '(b c)) 'global)t(findp '(evaluate (member b (a b c)) (b c)) 'global)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(findp 'true 'global)t(findp 'false 'global)nil(findp '(not true) 'global)nil(findp '(not false) 'global)t(findp '(and true true) 'global)t(findp '(and true false) 'global)nil(findp '(and false true) 'global)nil(findp '(and false false) 'global)nil(findp '(or true true) 'global)t(findp '(or true false) 'global)t(findp '(or false true) 'global)t(findp '(or false false) 'global)nil(deftheory global  (p a)  (p b)  (p c)  (q b)  (q c)  (<= (r ?x) (p ?x) (q ?x))  (<= (s ?x) (p ?x) cut (q ?x))  (<= (s ?x) (q ?x))  (<= (t ?x) (t ?x))  (j a)  (j b)  (k b)  (<= (l ?x) (j ?x) cut (k ?x))  (l c)  (<= (m ?x) (l ?x))  (m d))*(findx '?x '(and (p ?x) (q ?x)) 'global)b(finds '?x '(and (p ?x) (q ?x)) 'global)(b c)(setq foo (findg '?x '(and (p ?x) (q ?x)) 'global))*(funcall foo)b(funcall foo)c(funcall foo)nil(findx '?x '(or (p ?x) (q ?x)) 'global)a(finds '?x '(or (p ?x) (q ?x)) 'global)(a b c)(findx '?x '(r ?x) 'global)b(findx '?x '(s ?x) 'global)nil(findx '?x '(m ?x) 'global)d(deftheory cut  (<= (p ?x) (pp ?x))  (<= (p a))  (<= (q ?x) cut (qq ?x))  (<= (q b))  (<= (r ?x) (+ 1 1 2) cut (rr ?x))  (<= (r c))  (<= (s ?x) (or (ss ?x) (sss ?x)))  (s d)  (ss a)  (ss b)  (sss c)  (<= (t ?x) (or (tt ?x) cut (ttt ?x)))  (t d)  (tt a)  (tt b)  (ttt c))*(finds '?x '(p ?x) 'cut)(a)(finds '?x '(q ?x) 'cut)nil(finds '?x '(r ?x) 'cut)nil(finds '?x '(s ?x) 'cut)(a b c d)(finds '?x '(t ?x) 'cut)(A B ?X C D)(deftheory pp  (pp a a)  (pp a b))*(deftheory qq  (qq b c))*(includes 'global 'pp)*(includes 'global 'qq)*(findx '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) 'global)(a b c)(let ((*depth* 0)) (findp '(p a) 'global))nil(let ((*depth* 1)) (findp '(p a) 'global))t(let ((*depth* 1)) (findp '(r c) 'global))nil(let ((*depth* 2)) (findp '(r c) 'global))t(let ((*depth* 10) (*ancestry* nil)) (or (findp '(t a) 'global) *termination*))t(let ((*depth* 10) (*ancestry* t)) (or (findp '(t a) 'global) *termination*))nil(reset)*(deftheory eq  (length (listof) 0)  (<= (length (listof ?x @l) ?n)      (length (listof @l) ?m)      (+ ?m 1 ?n)))*(findx '?z '(length (listof a b c) ?z) 'eq)3(length (cdr (findx '?l '(length ?l 3) 'eq)))3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mike's tests for epilog forward chaining;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(deftheory save  (qqq a)  (=> (ppp ?x) (qqq ?x) (rrr ?x)))*(includes 'save 'global)*(setq *saves* '(rrr))*(assume '(ppp a) 'save)t(truep '(rrr a) 'save)t(reset)*;;;;(save '(<= (grandparent ?x ?z) (parent ?x ?y) (parent ?y ?z))            'global)(<= (GRANDPARENT ?X ?Z) (PARENT ?X ?Y) (PARENT ?Y ?Z))(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent bob cal) 'global)(PARENT BOB CAL)(save '(parent bob coe) 'global)(PARENT BOB COE)(knownp '(grandparent art cal) 'global)NIL(findp '(grandparent art cal) 'global)T(findx '?x '(grandparent ?x cal) 'global)ART(findx '?y '(grandparent art ?y) 'global)CAL(finds '?y '(grandparent art ?y) 'global)(CAL COE)(setq gen (findg '?y '(grandparent art ?y) 'global))*(funcall gen)CAL(funcall gen)COE(funcall gen)NIL(reset)*;;;;(save '(= (append (listof) ?m) ?m) 'global)*(save '(<= (= (append (listof ?x @l) ?m) (listof ?x @n))           (= (append (listof @l) ?m) (listof @n)))      'global)*(findx '?z '(= (append (listof 1 2) (listof 3 4)) ?z) 'global)(listof 1 2 3 4)(reset)*;;;;(setq *saves* '(family))(FAMILY)(save '(parent art bob) 'global)(PARENT ART BOB)(save '(parent bob cal) 'global)(PARENT BOB CAL)(save '(parent bob coe) 'global)(PARENT BOB COE)(save '(=> (family ?x ?z) (parent ?x ?y) (family ?y ?z)) 'global)(=> (FAMILY ?X ?Z) (PARENT ?X ?Y) (FAMILY ?Y ?Z))(assume '(family art garfunkel) 'global)T(knowns '?x '(family ?x garfunkel) 'global)(ART BOB CAL COE)(setq *saves* nil)*(reset)*;;;;(deftheory global        (p a)        (p b)        (q b)        (<= (r ?x) (p ?x) (q ?x)))GLOBAL(let ((*depth* 0)) (findp '(p a) 'global))NIL*termination*T(let ((*depth* 1)) (findp '(p a) 'global))T(let ((*depth* 1)) (findp '(r b) 'global))NIL*termination*T(let ((*depth* 2)) (findp '(r b) 'global))T(let ((*depth* 1)) (findp '(s b) 'global))NIL*termination*NIL(reset)*;;;;(save '(<= (t ?x) (t ?x)) 'global)(<= (T ?X) (T ?X))(let ((*depth* 10) (*ancestry* nil)) (findp '(t a) 'global))NIL*termination*T(let ((*depth* 10) (*ancestry* t)) (findp '(t a) 'global))NIL*termination*NIL(reset)*;;;;(deftheory global        (p a)        (p b)        (q b)        (<= (r ?x) (p ?x) (q ?x))        (<= (s ?x) (p ?x) cut (q ?x))        (<= (s ?x) (q ?x)))GLOBAL(findx '?x '(r ?x) 'global)B(findx '?x '(s ?x) 'global)NIL(reset)*;;;;(deftheory group        (<= (= (* ?x ?y) ?x) (= ?y e))        (<= (= (* ?y ?x) ?x) (= ?y e))        (<= (= (* ?x ?y) e) (= ?y (inv ?x)))        (<= (= (* ?x ?v) ?w)            (= (* ?y ?z) ?v)            (= (* ?x ?y) ?u)            (= (* ?u ?z) ?w)))GROUP(deftheory equality        (= ?x ?x)        (<= (= ?x ?y) (= ?y ?x))        (<= (= ?x ?z) (= ?x ?y) (= ?y ?z)))EQUALITY(includes 'group 'equality)T(let ((*depth* 5)) (findp '(= (* (inv x) x) e) 'group))T(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;