<html>
<head>
  <title>SIERRA: Smart, Interactive, and Extremely Responsive Rule Authoring</title>
  <meta charset="utf-8">
  <script src="../javascript/epilog.js"></script>
  <script src="../javascript/compiler.js"></script>
  <script src="jquery.min.js"></script>
  <script src="interact.js"></script>
  <style>
    *, input, select
    {
      font-size: 14px;
      font-family: HelveticaNeue-Light, Helvetica Neue, Helvetica, sans-serif;
      outline: 0;
    }
    textarea
    {
      outline: 0;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      border: 1px solid darkgray;
      height: 200px;
      border-radius: 0px 0px 4px 4px;
      font-family: monospace;
      width: 100%;
      min-width: 100%;
      min-height: 200px;
      background: white;
    }
    textarea[readonly]
    {
      background: #EFEFEF;
    }
  	.drag-element
    {
      display: inline-block;
      position: absolute;
      border-radius: 4px;
      min-width: 300px;
    }
    .drag-element[type='library']
    {
      display: inline-block;
      position: absolute;
      border-radius: 4px;
      min-width: 300px;
    }
    .drag-element[type='library'] textarea
    {
      /*min-height: 500px;*/
    }
  	.drag-element table
    {
      background-color: white;
    }
    .handle
    {
      height: 20px;
      background-color: lightgrey;
      text-align: center;
      border-radius: 4px 4px 0px 0px;
      border-color: darkgray;
      border-style: solid;
      border-width: 1px 1px 0px 1px;
    }
    .active .handle
    {
      background-color: #444;
      color: white;
      border-color: #444;
    }
    .editdiv
    {
      width: 100%;
      min-height: 50px;
      outline: none;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
    }
    a
    {
      text-decoration: none;
      cursor: pointer;
    }
    .transform
    {
      min-width: 100%;
      width: 100%;
      resize: both;
      overflow: auto;
      padding: 5px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      clear: both;
      min-height: 50px;
    }
    .transform, .transform div
    {
      font-family: monospace;
    }
    div[type='transform'] > div:nth-child(2), div[type='transform'] > div:nth-child(4), div[type='transform'] > div:nth-child(6)
    {
      border-color: darkgray;
      border-width: 0px 1px 0px 1px; 
      border-style: solid;
    }
    div[type='transform'] > div:nth-child(3), div[type='transform'] > div:nth-child(5), div[type='transform'] > div:nth-child(7)
    {
      border-color: darkgray;
      border-width: 0px 1px 1px 1px; 
      border-style: solid;
    }
    div[type='transform'] > div:nth-child(7)
    {
      border-radius: 0px 0px 4px 4px;
    }
  </style>
</head>
<body style="padding: 0px; width: 100%; overflow: hidden;">
<div style="top: 0px; left:0px; right: 0px; padding: 0px 0px; background: rgba(50,50,50,0.05); position: fixed; width: 100%;">
  
  <select id='_database' style="border-radius: 3px; background-color: transparent; border: none; width: 92px; display: ;" onchange="databasewindow(this)">
    <option>Database</option>
    <option>Show Data</option>
    <option disabled>Base Relations</option>
    <option>New Base Relation</option>
  </select>
  </select>
  <span style="display: ;">&nbsp;&nbsp;</span>
  <select id='_rulebase' style="border-radius: 3px; background-color: transparent; border: none; width: 92px; display: ;" onchange="rulebasewindow(this)">
    <option>Rulebase</option>
    <option>Show Rules</option>
    <option disabled>Views</option>
    <option>New View</option>
  </select>
  <span style="display: ;">&nbsp;&nbsp;</span>
  <select style="border-radius: 3px; background-color: transparent; border: none; width: 92px;" onchange="operationchange(this)">
    <option>Operation</option>
    <!--option id='save'>Save</option-->
    <option>Query</option>
    <option>Trace</option>
    <option>Transform</option>
    <option style="display: ;">Transition</option>
    <option>Profile</option>
    <option>Check Errors</option>
    <!--option>Back to Dashboard</option-->
    <!--option disabled>Optimize</option-->
  </select>
</div>
<div id="_main" style="margin-top: 24px; position: absolute; top: 0px; bottom: 10px; width: 100%; left: 0px; right: 0px; overflow: auto;">
</div>
  
<script>
var zIndex = 0, lambda = seq(), library = seq(), arities = seq(), librarytext = '';
//Start of profiling
var repository;
function profilequery(e)
{
  var d = $(e).closest(".drag-element");
  var relation = d.find("input:first").val().trim();
  var result = d.find("textarea");
  var rels = getallrelations(lambda);
  rels = vniquify(concatenate(rels, getallrelations(library)));
  if (!find(relation, rels))
  {
    result.val('Relation does not exist!');
    return;
  }
  var q = constructquery(relation);

  var content = ''; //this is what'll go into results.
  result.val('Compiling....\n\nPlease wait!');
  //Start profiling....
  
  //1. Initialize Repository
  repository = seq();
  definefacts(repository,lambda);

  var compfindsTime = [], testfindsTime = [], testfindsCompiledTime = [], compUniquifyTime = [], compVniquifyTime = []; 

  var run = setInterval( function(){  
  //2. Compfinds Time
  content = '–––Compfinds–––\n';
  compfindsTime.push(Date.now());
  var r1 = compfinds(q,q,lambda,library); 
  compfindsTime.push(Date.now());
  content += 'Time: ' + (compfindsTime[1] - compfindsTime[0]) + ' ms\n';
  content += '' + r1.length + ' answers\n\n';
  
  //3. Testfinds Time
  content += '–––Testfinds–––\n';
  testfindsTime.push(Date.now());
  var r2 = testfinds(q,q,repository,library);
  testfindsTime.push(Date.now());
  content += 'Time: ' + (testfindsTime[1] - testfindsTime[0]) + ' ms\n';
  content += '' + r1.length + ' answers\n\n';
  
  //4. Compile the Library
  compile(library);

  //5. Compiled Testfinds Time 
  content += '–––Testfinds (compiled)–––\n';
  testfindsCompiledTime.push(Date.now());
  var r3 = testfinds(q,q,repository,library);
  testfindsCompiledTime.push(Date.now());
  content += 'Time: ' + (testfindsCompiledTime[1] - testfindsCompiledTime[0]) + ' ms\n';
  content += '' + r1.length + ' answers\n\n';

  //6. uniquify(comp + relation(Arg1, Arg2 ...)) Time
  content += '–––Uniquified comp'  + relation + '–––\n';
  compUniquifyTime.push(Date.now());
  var r4 = uniquify(window['comp' + relation].apply(null, q.slice(1)));
  compUniquifyTime.push(Date.now());
  content += 'Time: ' + (compUniquifyTime[1] - compUniquifyTime[0]) + ' ms\n';
  content += '' + r1.length + ' answers\n\n';

  //7. vniquify(comp + relation(Arg1, Arg2 ...)) Time
  content += '–––Vniquified comp'  + relation + '–––\n';
  compVniquifyTime.push(Date.now());
  var r5 = vniquify(window['comp' + relation].apply(null, q.slice(1)));
  compVniquifyTime.push(Date.now());
  content += 'Time: ' + (compVniquifyTime[1] - compVniquifyTime[0]) + ' ms\n';
  content += '' + r1.length + ' answers\n\n';

  //8. Decompile the library
  decompile(library);

  result.val(content);
  clearInterval(run);
  }, 100);
  return;
}
//Stagger Windows
function staggerwindow()
{
  var datax = [0], max = 100;
  $("div[type][data-x]").each(
    function()
    {
      var n = parseInt($(this).attr("data-x"));
      datax.push(n);
      max = n > max? n: max;
    }
  );
  do
  {
    var x = parseInt(Math.random() * (max));
  } while(datax.indexOf(x) != -1);
  return x; 
}

function updatemenuoptions()
{
  var databasemenu = $("#_database")[0], rulebasemenu = $("#_rulebase")[0];
  var baserelations = getbases(lambda), views = difference(getviews(library),["transition"]);
  var dataoffset = 4;
  var ruleoffset = 4;
  for (var i = databasemenu.options.length - 1; i >= dataoffset; i--)
  {
    $(databasemenu.options[i]).remove();
  }
  for (var i = 0; i < baserelations.length; i++)
  {
    var option = document.createElement("option");
    option.innerHTML = baserelations[i];
    databasemenu.appendChild(option);
  }

  for (var i = rulebasemenu.options.length - 1; i >= ruleoffset; i--)
  {
    $(rulebasemenu.options[i]).remove();
  }
  for (var i = 0; i < views.length; i++)
  {
    var option = document.createElement("option");
    option.innerHTML = views[i];
    rulebasemenu.appendChild(option);
  }
}

function databasewindow(e)
{
  var value = e.value;
  if (value == 'Show Data')
  {
    if (!$("[type='lambda']").length)
      newLambdaWindow('Dataset: ', displayrules(lambda));
    else
      $("[type='lambda'] div").click();
  }
  else if (value == 'New Base Relation')
  {
    var rel = prompt('Enter Base Relation Name: ');
    var regex = new RegExp(/^[a-z][a-z0-9_\.]*$/g);
    if (rel)
    {
      rel = rel.replace(/[^a-z0-9_\.]/g,'');
      if (regex.test(rel))
      {
        if (rel.length)
        {
          q = constructquery(rel);
          newLambdaWindow(rel, displayrules(compfinds(q,q,lambda,library)));
        }
      }
    }
  }
  else
  {
    var q = constructquery(value);
    newLambdaWindow(value, displayrules(compfinds(q,q,lambda,library)));
  }
  e.selectedIndex = 0;
}

function rulebasewindow(e)
{
  var value = e.value;
  if (value == 'Show Rules')
  {
    if (!$("[type='library']").length)
      newLibraryWindow('Rules: ', librarytext);//displayrules(library));
    else
      $("[type='library'] div").click();
  }
  else if (value == 'New View')
  {
    var rel = prompt('Enter View Name: ');
    var regex = new RegExp(/^[a-z][a-z0-9_\.]*$/g);
    if (rel)
    {
      rel = rel.replace(/[^a-z0-9_\.]/g,'');
      if (regex.test(rel))
      {
        if (rel.length)
        {
          q = constructquery(rel);
          newLibraryWindow(rel, displayrules(compfinds(q,q,lambda,library)));
        }
      }
    }
  }
  else
  {
    var q = constructquery(value);
    newLibraryWindow(value, displayrules(compfinds(q,q,lambda,library)));
  }
  e.selectedIndex = 0;
}

function refreshlambda(e)
{
  var div = $(e).closest(".drag-element")[0];
  if (!div.hasAttribute("data-relation"))
  {
    lambda = seq();
    definefacts(lambda, readdata($(e).val()));
  }
  else
  {
    var rel = div.getAttribute("data-relation"), query = constructquery(rel);
    var data = compfinds(query, query, lambda, library);
    for (var i = 0; i < data.length; i++)
    {
      dropfact(data[i], lambda);
    }
    data = readdata($(e).val());
    for (var i = 0; i < data.length; i++)
    {
      savefact(data[i], lambda);
    }
  }
  updatemenuoptions();
  refresh();
  /*if (!lambdahaschanged) lambdahaschanged = true;
  if ($("[type='lambda']").length)
  {
    var header = $("[type='lambda'] div")[0].childNodes[0].textContent;
    if (header[header.length-1] != '*') 
      $("[type='lambda'] div")[0].childNodes[0].textContent = header + '*';
  }*/
}

function refreshlibrary(e)
{
  librarytext = $(e).val();
  library = seq();
  definerules(library, readdata($(e).val()));
  updatemenuoptions();
  refresh();
  /*if (!libraryhaschanged) libraryhaschanged = true;
  var header = $("[type='library'] div")[0].childNodes[0].textContent;
  if (header[header.length-1] != '*') 
    $("[type='library'] div")[0].childNodes[0].textContent = header + '*';*/
}

function newLambdaWindow(filename, content)
{
  var div = document.createElement("div"), id;
  windowCtr++;
  id = "w" + windowCtr;
  div.setAttribute("id", id);
  div.setAttribute("type", filename.indexOf("Dataset") != 0? 'table': 'lambda');
  if (filename.indexOf("Dataset") != 0)
    div.setAttribute("data-relation", filename);
  /*else 
  {
    if (lambdahaschanged) filename += '*';
  }*/
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var fn = document.createTextNode(filename);
  var closebtn = document.createElement("b");
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;"
  closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';" + (id? "$(\"[data-window='" + id + "']\").remove();" : ""));
  handle.appendChild(fn);
  handle.appendChild(closebtn);
  var textarea = document.createElement("textarea");
  if (content)
    textarea.innerHTML = content;
  
  textarea.setAttribute("onchange", "refreshlambda(this)");
  
  textarea.setAttribute("spellcheck", "false");
  textarea.setAttribute("onmousedown", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  textarea.setAttribute("onmouseup", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  
  div.appendChild(handle);
  div.appendChild(textarea);
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  $(div).click();
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
}

function newLibraryWindow(filename, content)
{
  var div = document.createElement("div"), id;
  windowCtr++;
  id = "w" + windowCtr;
  div.setAttribute("id", id);
  div.setAttribute("type", filename.indexOf("Rules") != 0? 'view': 'library');
  /*if (filename.indexOf("Rules") != 0)
    div.setAttribute("data-relation", filename);
  else 
  {
    if (libraryhaschanged) filename += '*';
  }*/
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var fn = document.createTextNode(filename);
  var closebtn = document.createElement("b");
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;";
  var txt = '';
  if (filename.indexOf("Rules") == 0) txt = "librarytext = $(this).closest('.drag-element').find('textarea').val(); ";
  closebtn.setAttribute("onclick", txt + "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';" + (id? "$(\"[data-window='" + id + "']\").remove();" : ""));
  handle.appendChild(fn);
  handle.appendChild(closebtn);
  var textarea = document.createElement("textarea");
  if (content)
    textarea.innerHTML = content;
  
  if (filename.indexOf("Rules") == 0)
    textarea.setAttribute("onchange", "refreshlibrary(this)");
  else
    textarea.setAttribute("readonly", true);

  textarea.setAttribute("spellcheck", "false");
  textarea.setAttribute("onmousedown", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  textarea.setAttribute("onmouseup", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  
  div.appendChild(handle);
  div.appendChild(textarea);
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  $(div).click();
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
}

function refresh()
{
  arities = seq();
  arities = computearities();
  var errorlocal = $("[type='error'][data-window]"), view = $("[type='view']"), trace = $("[type='trace']"), c = $("[type='console']"), table = $("[type='table']"), lambdael = $("[type='lambda']"), libraryel = $("[type='library']");
  if (errorlocal.length)
  {
    for (var i = 0; i < errorlocal.length; i++)
    {
      var wid = $(errorlocal[i]).attr("data-window"), w = $("#" + wid);
      if (w.length)
      {
        var localtheory = seq();
        definetheory(localtheory, readdata(w.find("textarea").val()));
        var errors = finderrors(localtheory).join("\n");
        $(errorlocal[i]).find("textarea").val(errors);
      }  
    }
  }

  if (view.length)
  {
    for (var i = 0; i < view.length; i++)
    {
      var rel = $(view[i]).find(".handle")[0].childNodes[0].nodeValue.trim();
      var q = constructquery(rel);
      var r = grindem(compfinds(q, q, lambda, library));
      $(view[i]).find("textarea").val(r);  
    }
  }

  if (table.length)
  {
    for (var i = 0; i < table.length; i++)
    {
      var rel = $(table[i]).find(".handle")[0].childNodes[0].nodeValue.trim();
      var q = constructquery(rel);
      var r = grindem(compfinds(q, q, lambda, library));
      $(table[i]).find("textarea").val(r);  
    }
  }

  if (lambdael.length)
  {
    for (var i = 0; i < lambdael.length; i++)
    {
      $(lambdael[i]).find("textarea").val(grindem(lambda));  
    }
  }

  if (libraryel.length)
  {
    for (var i = 0; i < libraryel.length; i++)
    {
      $(libraryel[i]).find("textarea").val(librarytext);  
    }
  }

  if (trace.length)
  {
    for (var i = 0; i < trace.length; i++)
    {
      var q = $(trace[i]).find("input:first").val().trim();
      var p = $(trace[i]).find("input:last").val().trim();
      if (q.length)
      {
       	p = p.length? p: q;
        _trace = [];
        tracefinds(read(p), read(q), lambda, library);
        $(trace[i]).find("textarea").val(_trace.join("\n"));
      }
    }
  }
  if (c.length)
  {
    for (var i = 0; i < c.length; i++)
    {
      var q = $(c[i]).find("input:first").val().trim();
      var p = $(c[i]).find("input:last").val().trim();
      if (q.length)
      {
       	p = p.length? p: q;
        var r = grindem(compfinds(read(p), read(q), lambda, library));
        $(c[i]).find("textarea").val(r);
      }
    }
  }
}
  
function operationchange(e)
{
	var selected = e.value;
  //console.log(selected);
  if (selected == 'Query')
  {
    newConsole();
  }  
  else if (selected == 'Trace')
  {
    newConsole(true);
  }  
  else if (selected == 'Transform')
  {
    newTransform();
  }
  else if (selected == 'Transition')
  {
    newTransition();
  }
  else if (selected == 'Profile')
  {
    newProfile();
  }
  else if (selected == 'Check Errors')
  {
    var isactive = $(".active").length;
    if (!isactive)
    {
      e.selectedIndex = 0;
      return;
    }
    var active = $(".active").attr("id");
    if (typeof active == "undefined")
    {
      e.selectedIndex = 0;
      return;
    }  
    newErrorWindow(active);
    refresh();
  }
  e.selectedIndex = 0;  
}

function finderrors(data)
{
  var arityerrors = findarityerrors(data);
  var safetyerrors = findsafetyerrors(data);
  var stratificationerrors = findstratificationerrors(data);
  if (!arityerrors.length)
    arityerrors[arityerrors.length] = "Arity Errors: none";
  if (!safetyerrors.length)
    safetyerrors[safetyerrors.length] = "Safety Errors: none";
  if (!stratificationerrors.length)
    stratificationerrors[stratificationerrors.length] = "Stratification Errors: none";
  return arityerrors.concat(safetyerrors).concat(stratificationerrors);
}

function grindem (data)
 {var exp = '';
  var n = data.length;
  for (var i=0; i<n; i++)
      {exp = exp + grind(data[i]) + '\n'}
  return exp}


function transformit(e)
{
  var d = $(e).closest(".drag-element");
  var conditions = readdata($(d.find(".transform")[0]).text());
  var additions = readdata($(d.find(".transform")[1]).text());
  var deletions = readdata($(d.find(".transform")[2]).text()); 
  transform(conditions,additions,deletions,lambda,library);
  updatemenuoptions();
  refresh();
  /*if (!lambdahaschanged) lambdahaschanged = true;
  if ($("[type='lambda']").length)
  {
    var header = $("[type='lambda'] div")[0].childNodes[0].textContent;
    if (header[header.length-1] != '*') 
      $("[type='lambda'] div")[0].childNodes[0].textContent = header + '*';
  }*/
}

function newTransform()
{
  var div = document.createElement("div");
  div.setAttribute("type", "transform");
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var fn = document.createTextNode("Transform");
  var closebtn = document.createElement("b");
  
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;"
  closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';")
  
  handle.appendChild(closebtn);
  div.appendChild(handle);
  
  div.style.minWidth = "200px";
  //div.style.border = "1px solid darkgray";
  div.style.borderRadius = "4px";
  div.style.backgroundColor = "white";
  
  var button = document.createElement("button");
  button.style.backgroundColor = "white";
  button.style.borderColor = "white";
  button.style.color = "black";
  button.style.borderRadius = "4px";
  button.style.cursor = "pointer";
  button.setAttribute("onclick", "transformit(this)");
  button.innerHTML = "Transform";
  button.style.display = "block";
  button.style.padding = "0px 5px";
  button.style.margin = "0px auto";
  button.style.fontSize = "12px";
  handle.appendChild(button);
  for (var i = 0; i < 3; i++)
  {
    var t = document.createElement("div");
    var p = document.createElement("div");
    p.innerHTML = !i? "Conditions": i == 1? "Additions": "Deletions";
    t.setAttribute("spellcheck", "false");
    t.setAttribute("class", "transform");
    t.setAttribute("contenteditable", "true");
    t.setAttribute("onmousedown", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
    t.setAttribute("onmouseup", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
    div.appendChild(p);
    div.appendChild(t);
  }
  
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
} 

function newErrorWindow(local)
{
  local = typeof local == 'undefined'? '': local;
  var div = document.createElement("div");
  if (local.length)
  {
    div.setAttribute("data-window", local);
  }
  div.setAttribute("type", "error");
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var fn = document.createTextNode("Error");
  var closebtn = document.createElement("b");
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;"
  if (local.length)
  {
    closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default'; $('#" + local +"').css('box-shadow','none');");
  }
  else 
    closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';");
  handle.appendChild(fn);
  handle.appendChild(closebtn);
  var textarea = document.createElement("textarea");
  textarea.setAttribute("readonly", true);
  textarea.setAttribute("spellcheck", "false");
  textarea.setAttribute("onmousedown", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  textarea.setAttribute("onmouseup", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  div.appendChild(handle);
  div.appendChild(textarea);
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  $(div).click();
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
}  

var status = 'ready'; 

function react(action)
{
  hypoupdate(readdata(action),seq(),lambda,library);
  updatemenuoptions();
  refresh();
}

function run(action)
{
  if (!action.trim().length)
  {
    return true;
  }
  $(".stepper").attr("disabled",true);
  $(".stepper")[0].style.backgroundColor = "#EFEFEF";
  $(".pauser").removeAttr("disabled");
  $(".pauser")[0].style.backgroundColor = "white";
  $(".player").attr("disabled",true);
  $(".player")[0].style.backgroundColor = "#EFEFEF";
  react(action);
  status = setTimeout(run(action),500);
  return true;
}

function step(action)
{
  if (!action.trim().length)
  {
    return true;
  }
  react(action);
  return true;
}  

function pause()
{
  $(".stepper").removeAttr("disabled");
  $(".stepper")[0].style.backgroundColor = "white";
  $(".pauser").attr("disabled",true);
  $(".pauser")[0].style.backgroundColor = "#EFEFEF";
  $(".player").removeAttr("disabled");
  $(".player")[0].style.backgroundColor = "white";
  if (status !== 'ready') clearTimeout(status);
  return true;
}

function newTransition()
{
  var div = document.createElement("div");
  div.setAttribute("type", "transition");
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var fn = document.createTextNode("Transition");
  var closebtn = document.createElement("b");
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;"
  closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';")
  handle.appendChild(closebtn);
  handle.appendChild(fn);
  
  var params = document.createElement("table");
  params.style.width = "100%";
  params.style.borderStyle = "solid";
  params.style.borderWidth = "0px 1px 1px 1px";
  params.style.borderColor = "darkgray";
  params.setAttribute("cellpadding", "0");
  params.setAttribute("cellspacing", "0");
  var r1 = params.insertRow(0);
  var c11 = r1.insertCell(0), c12 = r1.insertCell(1);
  c11.style.width = "60px";
  c11.style.padding = "0px 2px";
  c11.innerHTML = "Action:";
  var input = document.createElement("input");
  input.setAttribute("type", "text");
  input.style.backgroundColor = 'transparent';
  input.style.boxSizing = 'border-box';
  input.style.width = '100%';
  input.style.border = 'none';
  //input.setAttribute("onchange","if ($(this).val().trim().length) { $(this).closest('.drag-element').find('button').removeAttr('disabled'); $(this).closest('.drag-element').find('textarea').val(''); } else { $(this).closest('.drag-element').find('button').attr('disabled',true); $(this).closest('.drag-element').find('textarea').val('Please specify a relation name...'); }");
  c12.appendChild(input);
  var r2 = params.insertRow(1);
  var c21 = r2.insertCell(0);
  c21.setAttribute("colspan","2");
  c21.style.textAlign = "center";
  c21.appendChild(document.createElement("br"));
  var button = document.createElement("button");
  button.style.backgroundColor = "white";
  button.style.borderColor = "lightgrey";
  button.style.borderWidth = "1px";
  button.style.color = "black";
  button.style.width = "75px";
  button.setAttribute("class","player");
  button.setAttribute("onclick","run($(this).closest('.drag-element').find('input').val())");
  button.style.borderRadius = "4px";
  button.style.cursor = "pointer";
  button.innerHTML = "Run";
  button.style.padding = "2px";
  button.style.margin = "0px auto";
  button.style.fontSize = "13px";
  c21.appendChild(button);
  c21.appendChild(document.createTextNode(" "));
  button = document.createElement("button");
  button.style.backgroundColor = "#EFEFEF";
  button.style.borderColor = "lightgrey";
  button.style.borderWidth = "1px";
  button.style.color = "black";
  button.style.width = "75px";
  button.setAttribute("class","pauser");
  button.setAttribute("onclick","pause()");
  button.style.borderRadius = "4px";
  button.style.cursor = "pointer";
  button.innerHTML = "Pause";
  button.style.padding = "2px";
  button.style.margin = "0px auto";
  button.style.fontSize = "13px";
  button.setAttribute("disabled",true);
  c21.appendChild(button);
  c21.appendChild(document.createTextNode(" "));
  button = document.createElement("button");
  button.style.backgroundColor = "white";
  button.style.borderColor = "lightgrey";
  button.style.borderWidth = "1px";
  button.style.color = "black";
  button.style.width = "75px";
  button.setAttribute("class","stepper");
  button.setAttribute("onclick","step($(this).closest('.drag-element').find('input').val())");
  button.style.borderRadius = "4px";
  button.style.cursor = "pointer";
  button.innerHTML = "Step";
  button.style.padding = "2px";
  button.style.margin = "0px auto";
  button.style.fontSize = "13px";
  c21.appendChild(button);
  c21.appendChild(document.createElement("br"));
  c21.appendChild(document.createElement("br"));
  params.style.borderRadius = "0px 0px 5px 5px";

  div.appendChild(handle);
  div.appendChild(params);
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
} 

function newProfile()
{
  var div = document.createElement("div");
  div.setAttribute("type", "profile");
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var closebtn = document.createElement("b");
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;"
  closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';")
  handle.appendChild(closebtn);
  var button = document.createElement("button");
  button.style.backgroundColor = "white";
  button.style.borderColor = "white";
  button.style.color = "black";
  button.style.borderRadius = "4px";
  button.style.cursor = "pointer";
  button.setAttribute("onclick", "profilequery(this)");
  button.innerHTML = "Profile Query";
  button.style.display = "block";
  button.style.padding = "0px 5px";
  button.style.margin = "0px auto";
  button.style.fontSize = "12px";
  button.setAttribute("disabled","true");
  handle.appendChild(button);
  
  var params = document.createElement("table");
  params.style.width = "100%";
  params.style.borderStyle = "solid";
  params.style.borderWidth = "0px 1px 0px 1px";
  params.style.borderColor = "darkgray";
  params.setAttribute("cellpadding", "0");
  params.setAttribute("cellspacing", "0");
  var r1 = params.insertRow(0);
  var c11 = r1.insertCell(0), c12 = r1.insertCell(1);
  c11.style.width = "60px";
  c11.style.padding = "0px 2px";
  c11.innerHTML = "Relation:";
  var input = document.createElement("input");
  input.setAttribute("type", "text");
  input.style.backgroundColor = 'transparent';
  input.style.boxSizing = 'border-box';
  input.style.width = '100%';
  input.style.border = 'none';
  input.setAttribute("onchange","if ($(this).val().trim().length) { $(this).closest('.drag-element').find('button').removeAttr('disabled'); $(this).closest('.drag-element').find('textarea').val(''); } else { $(this).closest('.drag-element').find('button').attr('disabled',true); $(this).closest('.drag-element').find('textarea').val('Please specify a relation name...'); }");
  c12.appendChild(input);
  var textarea = document.createElement("textarea");
  textarea.setAttribute("readonly", true);
  textarea.setAttribute("spellcheck", "false");
  textarea.setAttribute("onmousedown", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  textarea.setAttribute("onmouseup", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  textarea.value = "Please specify a relation name...";
  div.appendChild(handle);
  div.appendChild(params);
  div.appendChild(textarea);
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
}  

function newConsole(trace)
{
  trace = typeof trace == 'undefined'? false: true;
  var div = document.createElement("div");
  div.setAttribute("type", trace? "trace": "console");
  zIndex++;
  div.style.zIndex = zIndex;
  div.setAttribute("onclick", "$('.drag-element').removeClass('active'); $(this).addClass('active'); if (this.style.zIndex != zIndex){ zIndex++; this.style.zIndex = zIndex;}");
  var handle = document.createElement("div");
  handle.setAttribute("class", "handle text-handle");
  var fn = document.createTextNode(trace? "Trace": "Query");
  var closebtn = document.createElement("b");
  closebtn.style.cursor = "pointer";
  closebtn.style.position = "absolute";
  closebtn.style.right = "2px";
  closebtn.style.fontSize = "18px"; closebtn.style.lineHeight = "15px";
  closebtn.innerHTML = "&times;"
  closebtn.setAttribute("onclick", "$(this).closest('.drag-element').remove(); document.body.style.cursor = 'default';")
  handle.appendChild(fn);
  handle.appendChild(closebtn);
  
  var params = document.createElement("table");
  params.style.width = "100%";
  params.style.borderStyle = "solid";
  params.style.borderWidth = "0px 1px 0px 1px";
  params.style.borderColor = "darkgray";
  params.setAttribute("cellpadding", "0");
  params.setAttribute("cellspacing", "0");
  var r1 = params.insertRow(0), r2 = params.insertRow(1);
  var c11 = r1.insertCell(0), c12 = r1.insertCell(1);
  var c21 = r2.insertCell(0), c22 = r2.insertCell(1);
  c11.style.width = "60px";
  c11.style.padding = "0px 2px";
  c21.style.width = "60px";
  c21.style.padding = "0px 2px";
  c11.innerHTML = "Query:";
  c21.innerHTML = "Pattern:";
  var input = document.createElement("input");
  input.setAttribute("type", "text");
  input.style.backgroundColor = 'transparent';
  input.style.boxSizing = 'border-box';
  input.style.width = '100%';
  input.style.border = 'none';
  input.setAttribute("onchange", "refresh()");
  c12.appendChild(input);
  input = document.createElement("input");
  input.setAttribute("type", "text");
  input.style.backgroundColor = 'transparent';
  input.style.boxSizing = 'border-box';
  input.style.width = '100%';
  input.style.border = 'none';
  input.setAttribute("onchange", "refresh()");
  c22.appendChild(input);
  
  var textarea = document.createElement("textarea");
  textarea.setAttribute("readonly", true);
  textarea.setAttribute("spellcheck", "false");
  textarea.setAttribute("onmousedown", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  textarea.setAttribute("onmouseup", "$('.drag-element').removeClass('active'); $(this).closest('.drag-element').addClass('active'); if ($(this).closest('.drag-element')[0].style.zIndex != zIndex){ zIndex++; $(this).closest('.drag-element')[0].style.zIndex = zIndex;}");
  div.appendChild(handle);
  div.appendChild(params);
  div.appendChild(textarea);
  $('.drag-element').removeClass('active'); 
  div.setAttribute("class", "text-container drag-element active");
  var x = staggerwindow();
  div.setAttribute("data-x", x);
  div.setAttribute("data-y", "20px");
  div.style.transform = "translate(" + x + "px, 20px)";
  div.style['-webkit-transform'] = "translate(" + x + "px, 20px)";
  div.style['-ms-transform'] = "translate(" + x + "px, 20px)";
  document.querySelector("#_main").appendChild(div);
  interact(div).draggable({
        inertia: false,
        restrict: {
          restriction: "parent",
          endOnly: false,
          elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
        },
        autoScroll: true,
        onmove: dragMoveListener
    })
    .allowFrom('.handle');
}  

var windowCtr = -1;  

function dragMoveListener(event) 
{
	var target = event.target,// keep the dragged position in the data-x/data-y attributes
 			x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
    	y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;
  
  if (!target.classList.contains('active'))
  {
    $('.drag-element').removeClass('active'); 
    target.classList.add('active');
    if (target.style.zIndex != zIndex)
    { 
      zIndex++; 
      target.style.zIndex = zIndex;
    }
  }
  // translate the element
  target.style.webkitTransform =
  target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';
  // update the posiion attributes
  target.setAttribute('data-x', x);
  target.setAttribute('data-y', y);
}

window.dragMoveListener = dragMoveListener;
/*window.onresize = function(e)
{
	var t = document.querySelectorAll("textarea");
  for (var i = 0; i < t.length; i++)
  {
    //t[i].style.maxHeight = window.innerHeight - 70 + 6;
    //t[i].style.maxWidth = window.innerWidth - 20;
  }
}
window.onresize();*/
</script>
<script>
function traceall (x,xl,p,pl,al,cont,results,facts,rules)
{
  inferences = inferences + 1;
  if (symbolp(p)) return traceallatom(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='same') return traceallsame(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='distinct') return tracealldistinct(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='matches') return traceallmatches(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='submatches') return traceallsubmatches(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='plus') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='times') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='min') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='max') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='symbolize') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='newsymbolize') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='stringappend') return traceallcall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='setofall') return traceallsetofall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='countofall') return traceallcountofall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='sumofall') return traceallsumofall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='avgofall') return traceallavgofall(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='not') return traceallnot(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='and') return tracealland(x,xl,p,pl,al,cont,results,facts,rules);
  if (p[0]==='or') return traceallor(x,xl,p,pl,al,cont,results,facts,rules);
  //if (pseudogroundp(p,al)) return traceallground(x,xl,p,pl,al,cont,results,facts,rules);
  tracealldb(x,xl,p,pl,al,cont,results,facts,rules);
  return false;
}

function traceone (x,xl,p,pl,al,cont,facts,rules)
{
  inferences = inferences + 1;
  var answer = false;
  if (symbolp(p)) return traceoneatom(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='same') return traceonesame(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='distinct') return traceonedistinct(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='matches') return traceonematches(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='submatches') return traceonesubmatches(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='plus') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='times') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='min') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='max') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='symbolize') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='newsymbolize') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='stringappend') return traceonecall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='setofall') return traceonesetofall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='countofall') return traceonecountofall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='sumofall') return traceonesumofall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='avgofall') return traceoneavgofall(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='not') return traceonenot(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='and') return traceoneand(x,xl,p,pl,al,cont,facts,rules);
  if (p[0]==='or') return traceoneor(x,xl,p,pl,al,cont,facts,rules);
  //if (pseudogroundp(p,al)) return traceoneground(x,xl,p,pl,al,cont,facts,rules);
  return traceonedb(x,xl,p,pl,al,cont,facts,rules);
}

function traceallsumofall (x,xl,p,pl,al,cont,results,facts,rules)
{
  tracecall(p,al,xl,cont);
  p = pluug(p,al,al);
  var vars = freevarsexp(p[2],al,seq(p[1]));
  var answers = seq();
  traceall(vars,al,p[2],seq(),al,nil,answers,facts,rules);
  answers = vniquify(answers);
  var total = '';
  var ol = seq();
  for (var i=0; i<answers.length; i++)
    total = total + answers[i][0].slice(1,-1);
  var result = '"' + total + '"';
  if (vnifyp(p[3],al,result,al,ol))
  {
    traceallexit(x,xl,p,pl,al,cont,results,facts,rules);
    backup(ol);
    return false;
  }
  return false;
}

function traceonesumofall (x,xl,p,pl,al,cont,facts,rules)
{
  tracecall(p,al,xl,cont);
  p = pluug(p,al,al);
  var vars = freevarsexp(p[2],al,seq(p[1]));
  var answers = seq();
  traceall(vars,al,p[2],seq(),al,nil,answers,facts,rules);
  answers = vniquify(answers);
  var total = '';
  var ol = seq();
  for (var i=0; i < answers.length; i++)
    total = total + answers[i][0].slice(1,-1);
  var result = '"' + total + '"';
  if (vnifyp(p[3],al,result,al,ol))
  {
    var answer = traceoneexit(x,xl,p,pl,al,cont,facts,rules);
    if (answer) 
    {
      backup(ol); 
      return answer;
    }
    backup(ol);
  }
  return false;
}

var _trace = [];

function tracecall (p,al,xl,cont)
{
  _trace.push(grindspaces(len(cont)) + 'Call: ' + grind(pluug(p,al,xl)));
}

function traceexit (p,al,xl,cont)
{
  _trace.push(grindspaces(len(cont)) + 'Exit: ' + grind(pluug(p,al,xl)));
}

function traceredo (p,al,xl,cont)
{
  _trace.push(grindspaces(len(cont)) + 'Redo: ' + grind(pluug(p,al,xl)));
}

function tracefail (p,al,xl,cont)
{
  _trace.push(grindspaces(len(cont)) + 'Fail: ' + grind(pluug(p,al,xl)));
}

function computearities()
{
  var arities = seq();
  for (var i = 0; i < library.length; i++)
	{
		arities = getarities(library[i], arities);
	}
  for (var i = 0; i < lambda.length; i++)
  {
    arities = getarities(lambda[i], arities);
  }
  return arities;
}

function constructquery(rel)
{
	var arity = arities[rel];
	var query = [rel];
	for (var i = 1; i <= arity; i++)
  {
		query.push('X' + i);
  }
	return query;
}  

$(document).click(
  function(e)
  {
    var target = $(e.target).closest(".drag-element"), widget;
    if (!target.length) return;
    if (!target.parent()[0]) return;
    var wid = target.attr("data-window");
    $(".drag-element").css("box-shadow", "none");
    if (typeof wid == 'undefined')
    {
      wid = target.attr("id");
      if (typeof wid == 'undefined') return;
      widget = $("[data-window='" + wid + "']");
      if (!widget.length) return;
    } 
    else widget = $("#" + wid);
    widget.css("box-shadow", "0px 0px 4px 5px rgba(239,72,54,0.8)");
    widget.css("z-index", zIndex - 1);
  }
);
</script>
<script>
  var lambdahaschanged = false, libraryhaschanged = false;
</script>
</body>
</html>