

:INSTANCE
 
(ontology-info has
       (instance-of (Thing))
       (ontology-version-number (0.1)))
(*salmon has
         (instance-of (Color-Constant)))
(*abnormal has
           (instance-of (Temperature-Constant)))
(*ACDT has
       (instance-of (Time-Zone-Constant))
       (name ("ACDT")))
(*acidic has
         (instance-of (PH-Constant)))
(*acidic-buffer has
                (instance-of (Buffer-Status-Constant)))
(*ACST has
       (instance-of (Time-Zone-Constant))
       (name ("ACST")))
(*acute has
        (instance-of (Angle-Constant)))
(*adolescent has
             (instance-of (Age-Constant)))
(*ADT has
      (instance-of (Time-Zone-Constant))
      (name ("ADT")))
(*AEDT has
       (instance-of (Time-Zone-Constant))
       (name ("AEDT")))
(*AEST has
       (instance-of (Time-Zone-Constant))
       (name ("AEST")))
(*aggressive has
             (instance-of (Trait-Constant)))
(*AKDT has
       (instance-of (Time-Zone-Constant))
       (name ("AKDT")))
(*AKST has
       (instance-of (Time-Zone-Constant))
       (name ("AKST")))
(*aliceBlue has
            (instance-of (Color-Constant)))
(*ampere has
         (instance-of (UoM-Electric-Current)))
(*animate has
          (instance-of (Animacy-Constant)))
(*annihilated has
              (instance-of (Combat-Strength-Constant)))
(*annihilated-full-scale has
                         (instance-of (Combat-Strength-Scale))
                         (element-type (Combat-Strength-Constant))
                         (element
                          ((:seq
                            *annihilated
                            *destroyed
                            *defeated
                            *neutralized
                            *effective
                            *full))))
(*antiqueWhite has
               (instance-of (Color-Constant)))
(*aqua has
       (instance-of (Color-Constant)))
(*aquamarine has
             (instance-of (Color-Constant)))
(*aqueous has
          (instance-of (State-Constant)))
(*Arabic has
         (instance-of (Natural-Language)))
(*arcminute has
            (instance-of (UoM-Coordinate UoM-Angle))
            (wn20-synset
             ((:set
               (:triple "arcminute" 0 "n")
               (:triple "arcminutes" 0 "n")
               (:triple "arcmin" 0 "n")))))
(*arcsecond has
            (instance-of (UoM-Coordinate UoM-Angle))
            (wn20-synset
             ((:set
               (:triple "arcsecond" 0 "n")
               (:triple "arcseconds" 0 "n")
               (:triple "arcs" 0 "n")))))
(*arid has
       (instance-of (Wetness-Constant)))
(*AST has
      (instance-of (Time-Zone-Constant))
      (name ("AST")))
(*auburn has
         (instance-of (Color-Constant)))
(*average has
          (instance-of (Height-Constant)))
(*AWST has
       (instance-of (Time-Zone-Constant))
       (name ("AWST")))
(*azure has
        (instance-of (Color-Constant)))
(*basic has
        (instance-of (PH-Constant)))
(*basic-acidic-scale has
                     (instance-of (PH-Scale))
                     (element-type (PH-Constant))
                     (element ((:seq *basic *neutral *acidic))))
(*basic-buffer has
               (instance-of (Buffer-Status-Constant)))
(*beat-per-minute has
                  (instance-of (UoM-Rate))
                  (wn20-synset
                   ((:set
                     (:triple "beat per minute" 0 "n")
                     (:triple "beats per minute" 0 "n")
                     (:triple "bpm" 0 "n")))))
(*beige has
        (instance-of (Color-Constant)))
(*Bengali has
          (instance-of (Natural-Language)))
(*big has
      (instance-of (Size-Constant)))
(*bisque has
         (instance-of (Color-Constant)))
(*bitter has
         (instance-of (Taste-Constant)))
(*black has
        (instance-of (Color-Constant)))
(*blanchedAlmond has
                 (instance-of (Color-Constant)))
(*blinding has
           (instance-of (Brightness-Constant)))
(*blond has
        (instance-of (Color-Constant)))
(*blonde has
         (instance-of (Color-Constant)))
(*blue has
       (instance-of (Color-Constant)))
(*Blue has
       (instance-of (Allegiance-Constant)))
(*blueViolet has
             (instance-of (Color-Constant)))
(*boiling has
          (instance-of (Temperature-Constant)))
(*boney has
        (instance-of (Consistency-Constant)))
(*breakable has
            (instance-of (Breakability-Constant)))
(*breakable-unbreakable-scale has
                              (instance-of (Breakability-Scale))
                              (element-type (Breakability-Constant))
                              (element
                               ((:seq
                                 *breakable
                                 *fragile
                                 *delicate
                                 *brittle
                                 *unbreakable))))
(*brief has
        (instance-of (Duration-Constant)))
(*bright has
         (instance-of (Brightness-Constant)))
(*britishpound has
               (instance-of (UoM-Worth))
               (wn20-synset ((:set (:triple "bp" 0 "n")))))
(*brittle has
          (instance-of (Breakability-Constant)))
(*brown has
        (instance-of (Color-Constant)))
(*brunette has
           (instance-of (Color-Constant)))
(*btu has
      (instance-of (UoM-Energy)))
(*buffer has
         (instance-of (Buffer-Status-Constant)))
(*burlyWood has
            (instance-of (Color-Constant)))
(*buttery has
          (instance-of (Taste-Constant)))
(*cadetBlue has
            (instance-of (Color-Constant)))
(*calorie has
          (instance-of (UoM-Energy)))
(*canadiandollar has
                 (instance-of (UoM-Worth))
                 (wn20-synset ((:set (:triple "cad" 0 "n")))))
(*candela has
          (instance-of (UoM-Luminous-Intensity UoM-Brightness))
          (wn20-synset
           ((((:set
               (:triple "candela" 0 "n")
               (:triple "candelas" 0 "n")
               (:triple "cd" 0 "n")))
             &&
             ((:set
               (:triple "candela" 0 "n")
               (:triple "candelas" 0 "n")))))))
(*candela-per-centimeter-squared has
                                 (instance-of (UoM-Luminance))
                                 (wn20-synset
                                  ((:set
                                    (:triple
                                     "candela per centimeter squared"
                                     0
                                     "n")
                                    (:triple
                                     "candelas per centimeter squared"
                                     0
                                     "n")))))
(*candela-per-foot-squared has
                           (instance-of (UoM-Luminance))
                           (wn20-synset
                            ((:set
                              (:triple
                               "candela per foot squared"
                               0
                               "n")
                              (:triple
                               "candelas per foot squared"
                               0
                               "n")))))
(*candela-per-meter-squared has
                            (instance-of (UoM-Luminance))
                            (wn20-synset
                             ((:set
                               (:triple
                                "candela per meter squared"
                                0
                                "n")
                               (:triple
                                "candelas per meter squared"
                                0
                                "n")))))
(*Cantonese has
            (instance-of (Natural-Language)))
(*capacious has
            (instance-of (Capacity-Constant)))
(*CDT has
      (instance-of (Time-Zone-Constant))
      (name ("CDT")))
(*celsius has
          (instance-of (UoM-Temperature))
          (wn20-synset ((:set (:triple "celsius" 0 "n")))))
(*centimeter has
             (instance-of (UoM-Length))
             (wn20-synset
              ((:set
                (:triple "centimeter" 0 "n")
                (:triple "centimeters" 0 "n")
                (:triple "cm" 0 "n")))))
(*centimeter-per-second has
                        (instance-of (UoM-Velocity))
                        (wn20-synset
                         ((:set
                           (:triple "centimeter_per_second" 0 "n")
                           (:triple "centimeters_per_second" 0 "n")
                           (:triple "cm/s" 0 "n")))))
(*centimeter-per-second-squared has
                                (instance-of (UoM-Acceleration))
                                (wn20-synset
                                 ((:set
                                   (:triple
                                    "centimeter per second squared"
                                    0
                                    "n")
                                   (:triple
                                    "centimeters per second squared"
                                    0
                                    "n")
                                   (:triple "cm/s^2" 0 "n")))))
(*CEST has
       (instance-of (Time-Zone-Constant))
       (name ("CEST")))
(*CET has
      (instance-of (Time-Zone-Constant))
      (name ("CET")))
(*chartreuse has
             (instance-of (Color-Constant)))
(*cheap has
        (instance-of (Worth-Constant)))
(*chocolate has
            (instance-of (Color-Constant)))
(*circle has
         (instance-of (Shape-Constant)))
(*class-description has
                    (instance-of (Viewpoint-Query-Type)))
(*cold has
       (instance-of (Temperature-Constant)))
(*cold-hot-scale has
                 (instance-of (Temperature-Scale))
                 (element-type (Temperature-Constant))
                 (element ((:seq *cold *warm *hot))))
(*colorless has
            (instance-of (Color-Constant)))
(*concentrated has
               (instance-of (Concentration-Constant)))
(*cool has
       (instance-of (Temperature-Constant)))
(*coral has
        (instance-of (Color-Constant)))
(*cornflowerBlue has
                 (instance-of (Color-Constant)))
(*cornsilk has
           (instance-of (Color-Constant)))
(*creamy has
         (instance-of (Taste-Constant)))
(*crimson has
          (instance-of (Color-Constant)))
(*critique-score-scale has
                       (instance-of (Critique-Score-Scale))
                       (element-type (Critique-Score-Constant))
                       (element
                        ((:seq
                          *rating-verypoor
                          *rating-poor
                          *rating-good
                          *rating-verygood))))
(*crystalline has
              (instance-of (Consistency-Constant)))
(*CST has
      (instance-of (Time-Zone-Constant))
      (name ("CST")))
(*CXT has
      (instance-of (Time-Zone-Constant))
      (name ("CXT")))
(*cyan has
       (instance-of (Color-Constant)))
(*daily has
        (instance-of (UoM-Frequency))
        (wn20-synset ((:set (:triple "daily" 0 "n")))))
(*dalton has
         (instance-of (UoM-Mass))
         (wn20-synset
          ((:set (:triple "dalton" 0 "n") (:triple "daltons" 0 "n")))))
(*damp has
       (instance-of (Wetness-Constant)))
(*dark has
       (instance-of (Brightness-Constant)))
(*dark-blinding-scale has
                      (instance-of (Brightness-Scale))
                      (element-type (Brightness-Constant))
                      (element ((:seq *dark *dim *bright *blinding))))
(*darkBlue has
           (instance-of (Color-Constant)))
(*darkCyan has
           (instance-of (Color-Constant)))
(*darkGoldenRod has
                (instance-of (Color-Constant)))
(*darkGray has
           (instance-of (Color-Constant)))
(*darkGreen has
            (instance-of (Color-Constant)))
(*darkKhaki has
            (instance-of (Color-Constant)))
(*darkMagenta has
              (instance-of (Color-Constant)))
(*darkOliveGreen has
                 (instance-of (Color-Constant)))
(*darkorange has
             (instance-of (Color-Constant)))
(*darkOrchid has
             (instance-of (Color-Constant)))
(*darkRed has
          (instance-of (Color-Constant)))
(*darkSalmon has
             (instance-of (Color-Constant)))
(*darkSeaGreen has
               (instance-of (Color-Constant)))
(*darkSlateBlue has
                (instance-of (Color-Constant)))
(*darkSlateGray has
                (instance-of (Color-Constant)))
(*darkTurquoise has
                (instance-of (Color-Constant)))
(*darkViolet has
             (instance-of (Color-Constant)))
(*day has
      (instance-of (UoM-Time UoM-Duration))
      (wn20-synset
       ((((:set (:triple "day" 0 "n") (:triple "days" 0 "n")))
         &&
         ((:set (:triple "day" 0 "n") (:triple "day" 0 "n")))))))
(*deep has
       (instance-of (Depth-Constant Primary-Constant)))
(*deepPink has
           (instance-of (Color-Constant)))
(*deepSkyBlue has
              (instance-of (Color-Constant)))
(*defeated has
           (instance-of (Combat-Strength-Constant)))
(*degree has
         (instance-of (UoM-Coordinate UoM-Angle))
         (wn20-synset
          ((:set (:triple "degree" 0 "n") (:triple "degrees" 0 "n")))))
(*dejectedly has
             (instance-of (Manner-Constant)))
(*delicate has
           (instance-of (Breakability-Constant)))
(*dense has
        (instance-of (Density-Constant)))
(*destroyed has
            (instance-of (Combat-Strength-Constant)))
(*dilute has
         (instance-of (Concentration-Constant)))
(*dim has
      (instance-of (Brightness-Constant)))
(*dimGray has
          (instance-of (Color-Constant)))
(*dishonest has
            (instance-of (Trait-Constant)))
(*dodgerBlue has
             (instance-of (Color-Constant)))
(*dozen has
        (instance-of (UoM-Quantity))
        (wn20-synset
         ((:set (:triple "dozen" 0 "n") (:triple "dozens" 0 "n")))))
(*dry has
      (instance-of (Wetness-Constant)))
(*dry-wet-scale has
                (instance-of (Wetness-Scale))
                (element-type (Wetness-Constant))
                (element ((:seq *dry *arid *damp *moist *wet))))
(*EDT has
      (instance-of (Time-Zone-Constant))
      (name ("EDT")))
(*EEST has
       (instance-of (Time-Zone-Constant))
       (name ("EEST")))
(*EET has
      (instance-of (Time-Zone-Constant))
      (name ("EET")))
(*effective has
            (instance-of (Combat-Strength-Constant)))
(*elderly has
          (instance-of (Age-Constant)))
(*electronic-charge has
                    (instance-of (UoM-Charge)))
(*English has
          (instance-of (Natural-Language)))
(*EST has
      (instance-of (Time-Zone-Constant))
      (name ("EST")))
(*euro has
       (instance-of (UoM-Worth))
       (wn20-synset
        ((:set (:triple "euro" 0 "n") (:triple "euros" 0 "n")))))
(*expensive has
            (instance-of (Worth-Constant)))
(*fahrenheit has
             (instance-of (UoM-Temperature))
             (wn20-synset ((:set (:triple "fahrenheit" 0 "n")))))
(*false has
        (instance-of (Truth-Constant)))
(*far has
      (instance-of (Distance-Constant)))
(*fast has
       (instance-of (Rate-Constant)))
(*feldspar has
           (instance-of (Color-Constant)))
(*female has
         (instance-of (Sex-Constant)))
(*fireBrick has
            (instance-of (Color-Constant)))
(*floralWhite has
              (instance-of (Color-Constant)))
(*flowery has
          (instance-of (Smell-Constant)))
(*foot has
       (instance-of (UoM-Length))
       (wn20-synset
        ((:set
          (:triple "foot" 0 "n")
          (:triple "feet" 0 "n")
          (:triple "ft" 0 "n")))))
(*foot-per-second has
                  (instance-of (UoM-Velocity))
                  (wn20-synset
                   ((:set
                     (:triple "foot_per_second" 0 "n")
                     (:triple "feet_per_second" 0 "n")
                     (:triple "ft/s" 0 "n")))))
(*foot-per-second-squared has
                          (instance-of (UoM-Acceleration))
                          (wn20-synset
                           ((:set
                             (:triple "foot per second squared" 0 "n")
                             (:triple "feet per second squared" 0 "n")
                             (:triple "ft/s^2" 0 "n")))))
(*footlambert has
              (instance-of (UoM-Luminance))
              (wn20-synset
               ((:set
                 (:triple "footlambert" 0 "n")
                 (:triple "footlamberts" 0 "n")))))
(*forestGreen has
              (instance-of (Color-Constant)))
(*forever has
          (instance-of (Duration-Constant)))
(*forever-brief-scale has
                      (instance-of (Duration-Scale))
                      (element-type (Duration-Constant))
                      (element ((:seq *forever *brief))))
(*foul has
       (instance-of (Smell-Constant)))
(*fragile has
          (instance-of (Breakability-Constant)))
(*freezing has
           (instance-of (Temperature-Constant)))
(*freezing-boiling-scale has
                         (instance-of (Temperature-Scale))
                         (element-type (Temperature-Constant))
                         (element
                          ((:seq *freezing *cold *warm *hot *boiling))))
(*French has
         (instance-of (Natural-Language)))
(*fresh has
        (instance-of (Smell-Constant)))
(*Friday has
         (instance-of (Day-Constant))
         (name ("Friday")))
(*fruity has
         (instance-of (Smell-Constant)))
(*fuchsia has
          (instance-of (Color-Constant)))
(*full has
       (instance-of (Combat-Strength-Constant)))
(*G has
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "G" 0 "n")))))
(*gainsboro has
            (instance-of (Color-Constant)))
(*gallon has
         (instance-of (UoM-Volume))
         (wn20-synset
          ((:set (:triple "gallon" 0 "n") (:triple "gallons" 0 "n")))))
(*gas has
      (instance-of (State-Constant)))
(*German has
         (instance-of (Natural-Language)))
(*GEST has
       (instance-of (Time-Zone-Constant))
       (name ("GEST")))
(*GET has
      (instance-of (Time-Zone-Constant))
      (name ("GET")))
(*ghostWhite has
             (instance-of (Color-Constant)))
(*gigahertz has
            (instance-of (UoM-Frequency))
            (wn20-synset
             ((:set (:triple "gigahertz" 0 "n") (:triple "GHz" 0 "n")))))
(*gigantic has
           (instance-of (Size-Constant)))
(*glassy has
         (instance-of (Consistency-Constant)))
(*GMT has
      (instance-of (Time-Zone-Constant))
      (name ("GMT")))
(*gold has
       (instance-of (Color-Constant)))
(*goldenRod has
            (instance-of (Color-Constant)))
(*grad has
       (instance-of (UoM-Angle))
       (wn20-synset
        ((:set (:triple "grad" 0 "n") (:triple "grads" 0 "n")))))
(*gradual has
          (instance-of (Slope-Constant)))
(*grainy has
         (instance-of (Consistency-Constant)))
(*gram has
       (instance-of (UoM-Mass))
       (wn20-synset
        ((:set
          (:triple "gram" 0 "n")
          (:triple "grams" 0 "n")
          (:triple "g" 0 "n")))))
(*gram/liter has
             (instance-of (UoM-Density))
             (wn20-synset
              ((:set
                (:triple "gram/liter" 0 "n")
                (:triple "gram per liter" 0 "n")
                (:triple "g/l" 0 "n")
                (:triple "grams/liter" 0 "n")
                (:triple "grams per liter" 0 "n")))))
(*granitic has
           (instance-of (Consistency-Constant)))
(*Gravity has
          (instance-of (Acceleration-Value))
          (value ((:pair 9.8 *meter-per-second-squared))))
(*gray has
       (instance-of (Color-Constant)))
(*green has
        (instance-of (Color-Constant)))
(*greenYellow has
              (instance-of (Color-Constant)))
(*gritty has
         (instance-of (Consistency-Constant)))
(*gross has
        (instance-of (UoM-Quantity))
        (wn20-synset
         ((:set (:triple "gross" 0 "n") (:triple "grosses" 0 "n")))))
(*happily has
          (instance-of (Manner-Constant)))
(*hazel has
        (instance-of (Color-Constant)))
(*hefty has
        (instance-of (Mass-Constant)))
(*hertz has
        (instance-of (UoM-Frequency))
        (wn20-synset
         ((:set (:triple "hertz" 0 "n") (:triple "Hz" 0 "n")))))
(*high has
       (instance-of (Intensity-Constant Priority-Constant)))
(*high-conductivity has
                    (instance-of (Conductivity-Constant)))
(*Hindi has
        (instance-of (Natural-Language)))
(*hollow-volume has
                (instance-of (Shape-Constant)))
(*honest has
         (instance-of (Trait-Constant)))
(*honeyDew has
           (instance-of (Color-Constant)))
(*horizontal has
             (instance-of (Orientation-Constant Slope-Constant)))
(*horizontal-vertical-scale has
                            (instance-of (Slope-Scale))
                            (element-type (Slope-Constant))
                            (element
                             ((:seq
                               *horizontal
                               *gradual
                               *steep
                               *vertical))))
(*horsepower has
             (instance-of (UoM-Power))
             (wn20-synset
              ((:set
                (:triple "horsepower" 0 "n")
                (:triple "horsepowers" 0 "n")
                (:triple "hp" 0 "n")))))
(*hot has
      (instance-of (Temperature-Constant)))
(*hotPink has
          (instance-of (Color-Constant)))
(*hour has
       (instance-of (UoM-Time UoM-Duration))
       (wn20-synset
        ((((:set
            (:triple "hour" 0 "n")
            (:triple "hours" 0 "n")
            (:triple "h" 0 "n")))
          &&
          ((:set (:triple "hour" 0 "n") (:triple "hours" 0 "n")))))))
(*hourly has
         (instance-of (UoM-Frequency))
         (wn20-synset ((:set (:triple "hourly" 0 "n")))))
(*HST has
      (instance-of (Time-Zone-Constant))
      (name ("HST")))
(*huge has
       (instance-of (Area-Constant Size-Constant)))
(*IDLE has
       (instance-of (Time-Zone-Constant))
       (name ("IDLE")))
(*IDLW has
       (instance-of (Time-Zone-Constant))
       (name ("IDLW")))
(*impermeable has
              (instance-of (Integrity-Constant)))
(*impermeable-permeable-scale has
                              (instance-of (Integrity-Scale))
                              (element-type (Integrity-Constant))
                              (element
                               ((:seq
                                 *impermeable
                                 *semi-permeable
                                 *permeable))))
(*important has
            (instance-of (Importance-Constant)))
(*inch has
       (instance-of (UoM-Length))
       (wn20-synset
        ((:set
          (:triple "inch" 0 "n")
          (:triple "inches" 0 "n")
          (:triple "in" 0 "n")))))
(*indianRed has
            (instance-of (Color-Constant)))
(*indigo has
         (instance-of (Color-Constant)))
(*Indonesian has
             (instance-of (Natural-Language)))
(*inexpensive has
              (instance-of (Worth-Constant)))
(*insoluble has
            (instance-of (Solubility-Constant)))
(*IST has
      (instance-of (Time-Zone-Constant))
      (name ("IST")))
(*Italian has
          (instance-of (Natural-Language)))
(*ivory has
        (instance-of (Color-Constant)))
(*Japanese has
           (instance-of (Natural-Language)))
(*joule has
        (instance-of (UoM-Energy)))
(*JST has
      (instance-of (Time-Zone-Constant))
      (name ("JST")))
(*juicy has
        (instance-of (Taste-Constant)))
(*juvenile has
           (instance-of (Age-Constant)))
(*KDT has
      (instance-of (Time-Zone-Constant))
      (name ("KDT")))
(*kelvin has
         (instance-of (UoM-Temperature))
         (wn20-synset ((:set (:triple "kelvin" 0 "n")))))
(*KGST has
       (instance-of (Time-Zone-Constant))
       (name ("KGST")))
(*KGT has
      (instance-of (Time-Zone-Constant))
      (name ("KGT")))
(*khaki has
        (instance-of (Color-Constant)))
(*kilogram has
           (instance-of (UoM-Mass))
           (wn20-synset
            ((:set
              (:triple "kilogram" 0 "n")
              (:triple "kilograms" 0 "n")
              (:triple "kg" 0 "n")))))
(*kilogram-meter-per-second has
                            (instance-of (UoM-Momentum))
                            (wn20-synset
                             ((:set
                               (:triple
                                "kilogram meter per second"
                                0
                                "n")
                               (:triple
                                "kilograms meter per second"
                                0
                                "n")))))
(*kilogram-meter-squared has
                         (instance-of (UoM-Moment-of-Inertia))
                         (wn20-synset
                          ((:set
                            (:triple "kilogram meter squared" 0 "n")
                            (:triple "kilograms meter squared" 0 "n")))))
(*kilohertz has
            (instance-of (UoM-Frequency))
            (wn20-synset
             ((:set (:triple "kilohertz" 0 "n") (:triple "kHz" 0 "n")))))
(*kilometer has
            (instance-of (UoM-Length))
            (wn20-synset
             ((:set
               (:triple "kilometer" 0 "n")
               (:triple "kilometers" 0 "n")
               (:triple "km" 0 "n")))))
(*kilometer-per-hour has
                     (instance-of (UoM-Velocity))
                     (wn20-synset
                      ((:set
                        (:triple "kilometer_per_hour" 0 "n")
                        (:triple "kilometers_per_hour" 0 "n")
                        (:triple "km/h" 0 "n")))))
(*kilometer-per-hour-minute has
                            (instance-of (UoM-Acceleration))
                            (wn20-synset
                             ((:set
                               (:triple
                                "kilometer per hour minute"
                                0
                                "n")
                               (:triple
                                "kilometers per hour minute"
                                0
                                "n")))))
(*kilometer-per-second has
                       (instance-of (UoM-Velocity))
                       (wn20-synset
                        ((:set
                          (:triple "kilometer_per_second" 0 "n")
                          (:triple "kilometers_per_second" 0 "n")
                          (:triple "km/s" 0 "n")))))
(*kilometer-per-second-squared has
                               (instance-of (UoM-Acceleration))
                               (wn20-synset
                                ((:set
                                  (:triple
                                   "kilometer per second squared"
                                   0
                                   "n")
                                  (:triple
                                   "kilometers per second squared"
                                   0
                                   "n")
                                  (:triple "km/s^2" 0 "n")))))
(*kilowatt has
           (instance-of (UoM-Power))
           (wn20-synset
            ((:set
              (:triple "kilowatt" 0 "n")
              (:triple "kilowatts" 0 "n")
              (:triple "kW" 0 "n")))))
(*Korean has
         (instance-of (Natural-Language)))
(*KST has
      (instance-of (Time-Zone-Constant))
      (name ("KST")))
(*lambert has
          (instance-of (UoM-Luminance))
          (wn20-synset
           ((:set
             (:triple "lambert" 0 "n")
             (:triple "lamberts" 0 "n")))))
(*large has
        (instance-of (Volume-Constant)))
(*lavender has
           (instance-of (Color-Constant)))
(*lavenderBlush has
                (instance-of (Color-Constant)))
(*lawnGreen has
            (instance-of (Color-Constant)))
(*lazy has
       (instance-of (Trait-Constant)))
(*lemonChiffon has
               (instance-of (Color-Constant)))
(*light has
        (instance-of (Mass-Constant)))
(*light-hefty-scale has
                    (instance-of (Mass-Scale))
                    (element-type (Mass-Constant))
                    (element ((:seq *light *hefty))))
(*lightBlue has
            (instance-of (Color-Constant)))
(*lightCoral has
             (instance-of (Color-Constant)))
(*lightCyan has
            (instance-of (Color-Constant)))
(*lightGoldenRodYellow has
                       (instance-of (Color-Constant)))
(*lightGreen has
             (instance-of (Color-Constant)))
(*lightGrey has
            (instance-of (Color-Constant)))
(*lightPink has
            (instance-of (Color-Constant)))
(*lightSalmon has
              (instance-of (Color-Constant)))
(*lightSeaGreen has
                (instance-of (Color-Constant)))
(*lightSkyBlue has
               (instance-of (Color-Constant)))
(*lightSlateBlue has
                 (instance-of (Color-Constant)))
(*lightSlateGray has
                 (instance-of (Color-Constant)))
(*lightSteelBlue has
                 (instance-of (Color-Constant)))
(*lightYellow has
              (instance-of (Color-Constant)))
(*lime has
       (instance-of (Color-Constant)))
(*limeGreen has
            (instance-of (Color-Constant)))
(*linen has
        (instance-of (Color-Constant)))
(*liquid has
         (instance-of (State-Constant)))
(*liter has
        (instance-of (UoM-Volume))
        (wn20-synset
         ((:set
           (:triple "liter" 0 "n")
           (:triple "liters" 0 "n")
           (:triple "l" 0 "n")))))
(*little has
         (instance-of (Size-Constant)))
(*little-gigantic-scale has
                        (instance-of (Size-Scale))
                        (element-type (Size-Constant))
                        (element
                         ((:seq
                           *little
                           *undersized
                           *oversized
                           *gigantic))))
(*long has
       (instance-of
        (Distance-Constant
         Primary-Constant
         Duration-Constant
         Length-Constant)))
(*low has
      (instance-of (Intensity-Constant Priority-Constant)))
(*low-conductivity has
                   (instance-of (Conductivity-Constant)))
(*low-high-conductivity-scale has
                              (instance-of (Conductivity-Scale))
                              (element-type (Conductivity-Constant))
                              (element
                               ((:seq
                                 *no-conductivity
                                 *low-conductivity
                                 *high-conductivity))))
(*low-urgent-scale has
                   (instance-of (Priority-Scale))
                   (element-type (Priority-Constant))
                   (element ((:seq *low *medium *high *urgent))))
(*lumen has
        (instance-of (UoM-Luminous-Flux))
        (wn20-synset
         ((:set (:triple "lumen" 0 "n") (:triple "lumens" 0 "n")))))
(*magenta has
          (instance-of (Color-Constant)))
(*male has
       (instance-of (Sex-Constant)))
(*Mandarin has
           (instance-of (Natural-Language)))
(*Marathi has
          (instance-of (Natural-Language)))
(*maroon has
         (instance-of (Color-Constant)))
(*match-result has
               (instance-of (Viewpoint-Query-Type)))
(*mavajoWhite has
              (instance-of (Color-Constant)))
(*MDT has
      (instance-of (Time-Zone-Constant))
      (name ("MDT")))
(*medium has
         (instance-of (Intensity-Constant Priority-Constant)))
(*mediumAquaMarine has
                   (instance-of (Color-Constant)))
(*mediumBlue has
             (instance-of (Color-Constant)))
(*mediumOrchid has
               (instance-of (Color-Constant)))
(*mediumPurple has
               (instance-of (Color-Constant)))
(*mediumSeaGreen has
                 (instance-of (Color-Constant)))
(*mediumSlateBlue has
                  (instance-of (Color-Constant)))
(*mediumSpringGreen has
                    (instance-of (Color-Constant)))
(*mediumTurquoise has
                  (instance-of (Color-Constant)))
(*mediumVioletRed has
                  (instance-of (Color-Constant)))
(*megahertz has
            (instance-of (UoM-Frequency))
            (wn20-synset
             ((:set (:triple "megahertz" 0 "n") (:triple "MHz" 0 "n")))))
(*megawatt has
           (instance-of (UoM-Power))
           (wn20-synset
            ((:set
              (:triple "megawatt" 0 "n")
              (:triple "megawatts" 0 "n")
              (:triple "MW" 0 "n")))))
(*meter has
        (instance-of (UoM-Length))
        (wn20-synset
         ((:set
           (:triple "meter" 0 "n")
           (:triple "meters" 0 "n")
           (:triple "m" 0 "n")))))
(*meter-per-second has
                   (instance-of (UoM-Velocity))
                   (wn20-synset
                    ((:set
                      (:triple "meter_per_second" 0 "n")
                      (:triple "meters_per_second" 0 "n")
                      (:triple "m/s" 0 "n")))))
(*meter-per-second-squared has
                           (instance-of (UoM-Acceleration))
                           (wn20-synset
                            ((:set
                              (:triple
                               "meter per second squared"
                               0
                               "n")
                              (:triple
                               "meters per second squared"
                               0
                               "n")
                              (:triple "m/s^2" 0 "n")))))
(*micrometer has
             (instance-of (UoM-Length))
             (wn20-synset
              ((:set
                (:triple "micrometer" 0 "n")
                (:triple "micrometers" 0 "n")))))
(*microscopic has
              (instance-of (Size-Constant)))
(*microscopic-gigantic-scale has
                             (instance-of (Size-Scale))
                             (element-type (Size-Constant))
                             (element
                              ((:seq
                                *microscopic
                                *tiny
                                *little
                                *undersized
                                *average
                                *oversized
                                *big
                                *huge
                                *gigantic))))
(*microsecond has
              (instance-of (UoM-Duration))
              (wn20-synset
               ((:set
                 (:triple "microsecond" 0 "n")
                 (:triple "microseconds" 0 "n")))))
(*middle-aged has
              (instance-of (Age-Constant)))
(*midnightBlue has
               (instance-of (Color-Constant)))
(*mild has
       (instance-of (Temperature-Constant)))
(*mile has
       (instance-of (UoM-Length))
       (wn20-synset
        ((:set
          (:triple "mile" 0 "n")
          (:triple "miles" 0 "n")
          (:triple "mi" 0 "n")))))
(*mile-per-hour has
                (instance-of (UoM-Velocity))
                (wn20-synset
                 ((:set
                   (:triple "mile_per_hour" 0 "n")
                   (:triple "miles_per_hour" 0 "n")
                   (:triple "mph" 0 "n")))))
(*mile-per-second has
                  (instance-of (UoM-Velocity))
                  (wn20-synset
                   ((:set
                     (:triple "mile_per_second" 0 "n")
                     (:triple "miles_per_second" 0 "n")))))
(*mile-per-second-squared has
                          (instance-of (UoM-Acceleration))
                          (wn20-synset
                           ((:set
                             (:triple "mile per second squared" 0 "n")
                             (:triple "miles per second squared" 0 "n")
                             (:triple "mi/s^2" 0 "n")))))
(*milliampere has
              (instance-of (UoM-Electric-Current)))
(*millilambert has
               (instance-of (UoM-Luminance))
               (wn20-synset
                ((:set
                  (:triple "millilambert" 0 "n")
                  (:triple "millilamberts" 0 "n")))))
(*milliliter has
             (instance-of (UoM-Volume))
             (wn20-synset
              ((:set
                (:triple "milliliter" 0 "n")
                (:triple "milliliters" 0 "n")
                (:triple "ml" 0 "n")))))
(*millimeter has
             (instance-of (UoM-Length))
             (wn20-synset
              ((:set
                (:triple "millimeter" 0 "n")
                (:triple "millimeters" 0 "n")
                (:triple "mm" 0 "n")))))
(*millisecond has
              (instance-of (UoM-Duration))
              (wn20-synset
               ((:set
                 (:triple "millisecond" 0 "n")
                 (:triple "milliseconds" 0 "n")
                 (:triple "ms" 0 "n")))))
(*milliwatt has
            (instance-of (UoM-Power))
            (wn20-synset
             ((:set
               (:triple "milliwatt" 0 "n")
               (:triple "milliwatts" 0 "n")
               (:triple "mW" 0 "n")))))
(*mintCream has
            (instance-of (Color-Constant)))
(*minus-strength has
                 (instance-of (Troop-Strength-Constant)))
(*minus-strength-plus-strength-scale has
                                     (instance-of
                                      (Troop-Strength-Scale))
                                     (element-type
                                      (Troop-Strength-Constant))
                                     (element
                                      ((:seq
                                        *minus-strength
                                        *regular-strength
                                        *plus-strength))))
(*minute has
         (instance-of (UoM-Time UoM-Duration))
         (wn20-synset
          ((((:set
              (:triple "minute" 0 "n")
              (:triple "minutes" 0 "n")
              (:triple "min" 0 "n")))
            &&
            ((:set
              (:triple "minute" 0 "n")
              (:triple "minutes" 0 "n")))))))
(*mistyRose has
            (instance-of (Color-Constant)))
(*moccasin has
           (instance-of (Color-Constant)))
(*moderately-important has
                       (instance-of (Importance-Constant)))
(*moist has
        (instance-of (Wetness-Constant)))
(*molar has
        (instance-of (UoM-Concentration)))
(*mole has
       (instance-of (UoM-Quantity))
       (wn20-synset
        ((:set (:triple "mole" 0 "n") (:triple "moles" 0 "n")))))
(*Monday has
         (instance-of (Day-Constant))
         (name ("Monday")))
(*month has
        (instance-of (UoM-Time UoM-Duration))
        (wn20-synset
         ((:set (:triple "month" 0 "n") (:triple "months" 0 "n")))))
(*monthly has
          (instance-of (UoM-Frequency))
          (wn20-synset ((:set (:triple "monthly" 0 "n")))))
(*MSD has
      (instance-of (Time-Zone-Constant))
      (name ("MSD")))
(*MSK has
      (instance-of (Time-Zone-Constant))
      (name ("MSK")))
(*MST has
      (instance-of (Time-Zone-Constant))
      (name ("MST")))
(*musky has
        (instance-of (Smell-Constant)))
(*nanometer has
            (instance-of (UoM-Length))
            (wn20-synset
             ((:set (:triple "nanometer" 0 "n") (:triple "nm" 0 "n")))))
(*nanosecond has
             (instance-of (UoM-Duration))
             (wn20-synset
              ((:set
                (:triple "nanosecond" 0 "n")
                (:triple "nanoseconds" 0 "n")
                (:triple "ns" 0 "n")))))
(*narrow has
         (instance-of (Width-Constant)))
(*narrow-wide-scale has
                    (instance-of (Width-Scale))
                    (element-type (Width-Constant))
                    (element ((:seq *narrow *wide))))
(*navy has
       (instance-of (Color-Constant)))
(*NDT has
      (instance-of (Time-Zone-Constant))
      (name ("NDT")))
(*near has
       (instance-of (Distance-Constant)))
(*near-far-scale has
                 (instance-of (Distance-Scale))
                 (element-type (Distance-Constant))
                 (element ((:seq *near *far))))
(*negative has
           (instance-of (Polarity-Constant)))
(*negligible has
             (instance-of (Intensity-Constant)))
(*neutral has
          (instance-of (PH-Constant)))
(*neutralized has
              (instance-of (Combat-Strength-Constant)))
(*never has
        (instance-of (Frequency-Constant)))
(*nit has
      (instance-of (UoM-Luminance))
      (wn20-synset
       ((:set (:triple "nit" 0 "n") (:triple "nits" 0 "n")))))
(*no-conductivity has
                  (instance-of (Conductivity-Constant)))
(*non has
      (instance-of (Electrolyte-Status-Constant)))
(*non-buffer has
             (instance-of (Buffer-Status-Constant)))
(*none has
       (instance-of (Capacity-Constant)))
(*none-unlimited-scale has
                       (instance-of (Capacity-Scale))
                       (element-type (Capacity-Constant))
                       (element
                        ((:seq *none *roomy *capacious *unlimited))))
(*normal has
         (instance-of (Temperature-Constant)))
(*not-animate has
              (instance-of (Animacy-Constant)))
(*not-known-to-be-soluble has
                          (instance-of (Solubility-Constant)))
(*not-sentient has
               (instance-of (Sentience-Constant)))
(*NST has
      (instance-of (Time-Zone-Constant))
      (name ("NST")))
(*ntdollar has
           (instance-of (UoM-Worth))
           (wn20-synset ((:set (:triple "ntdollar" 0 "n")))))
(*NZDT has
       (instance-of (Time-Zone-Constant))
       (name ("NZDT")))
(*NZST has
       (instance-of (Time-Zone-Constant))
       (name ("NZST")))
(*obtuse has
         (instance-of (Angle-Constant)))
(*odorless has
           (instance-of (Smell-Constant)))
(*often has
        (instance-of (Frequency-Constant)))
(*often-never-scale has
                    (instance-of (Frequency-Scale))
                    (element-type (Frequency-Constant))
                    (element ((:seq *often *rarely *never))))
(*ohm has
      (instance-of (UoM-Electric-Resistance)))
(*old has
      (instance-of (Age-Constant Primary-Constant)))
(*oldLace has
          (instance-of (Color-Constant)))
(*olive has
        (instance-of (Color-Constant)))
(*oliveDrab has
            (instance-of (Color-Constant)))
(*orange has
         (instance-of (Color-Constant)))
(*orangeRed has
            (instance-of (Color-Constant)))
(*orchid has
         (instance-of (Color-Constant)))
(*oval has
       (instance-of (Shape-Constant)))
(*oversized has
            (instance-of (Size-Constant)))
(*pair has
       (instance-of (UoM-Quantity))
       (wn20-synset
        ((:set (:triple "pair" 0 "n") (:triple "pairs" 0 "n")))))
(*paleGoldenRod has
                (instance-of (Color-Constant)))
(*paleGreen has
            (instance-of (Color-Constant)))
(*paleTurquoise has
                (instance-of (Color-Constant)))
(*paleVioletRed has
                (instance-of (Color-Constant)))
(*papayaWhip has
             (instance-of (Color-Constant)))
(*parallelogram has
                (instance-of (Shape-Constant)))
(*PDT has
      (instance-of (Time-Zone-Constant))
      (name ("PDT")))
(*peachPuff has
            (instance-of (Color-Constant)))
(*per-day has
          (instance-of (UoM-Frequency))
          (wn20-synset ((:set (:triple "per day" 0 "n")))))
(*per-hour has
           (instance-of (UoM-Frequency))
           (wn20-synset ((:set (:triple "per hour" 0 "n")))))
(*per-minute has
             (instance-of (UoM-Frequency))
             (wn20-synset ((:set (:triple "per minute" 0 "n")))))
(*per-month has
            (instance-of (UoM-Frequency))
            (wn20-synset ((:set (:triple "per month" 0 "n")))))
(*per-second has
             (instance-of (UoM-Frequency))
             (wn20-synset ((:set (:triple "per second" 0 "n")))))
(*per-week has
           (instance-of (UoM-Frequency))
           (wn20-synset ((:set (:triple "per week" 0 "n")))))
(*per-year has
           (instance-of (UoM-Frequency))
           (wn20-synset ((:set (:triple "per year" 0 "n")))))
(*permeable has
            (instance-of (Integrity-Constant)))
(*peru has
       (instance-of (Color-Constant)))
(*pink has
       (instance-of (Color-Constant)))
(*plum has
       (instance-of (Color-Constant)))
(*plus-strength has
                (instance-of (Troop-Strength-Constant)))
(*politely has
           (instance-of (Manner-Constant)))
(*polygon has
          (instance-of (Shape-Constant)))
(*Portugese has
            (instance-of (Natural-Language)))
(*positive has
           (instance-of (Polarity-Constant)))
(*powderBlue has
             (instance-of (Color-Constant)))
(*PST has
      (instance-of (Time-Zone-Constant))
      (name ("PST")))
(*Punjabi has
          (instance-of (Natural-Language)))
(*purple has
         (instance-of (Color-Constant)))
(*R has
    (instance-of (Trafficability-Constant)))
(*radian has
         (instance-of (UoM-Angle))
         (wn20-synset
          ((:set
            (:triple "radian" 0 "n")
            (:triple "radians" 0 "n")
            (:triple "rad" 0 "n")))))
(*rancid has
         (instance-of (Smell-Constant)))
(*rare has
       (instance-of (Density-Constant)))
(*rare-dense-scale has
                   (instance-of (Density-Scale))
                   (element-type (Density-Constant))
                   (element ((:seq *rare *dense))))
(*rarely has
         (instance-of (Frequency-Constant)))
(*rating-good has
              (instance-of (Critique-Score-Constant)))
(*rating-poor has
              (instance-of (Critique-Score-Constant)))
(*rating-verygood has
                  (instance-of (Critique-Score-Constant)))
(*rating-verypoor has
                  (instance-of (Critique-Score-Constant)))
(*rectangle has
            (instance-of (Shape-Constant)))
(*red has
      (instance-of (Color-Constant)))
(*Red has
      (instance-of (Allegiance-Constant)))
(*redhead has
          (instance-of (Color-Constant)))
(*reflex has
         (instance-of (Angle-Constant)))
(*regular-strength has
                   (instance-of (Troop-Strength-Constant)))
(*revolution-per-minute has
                        (instance-of (UoM-Rotational-Rate))
                        (wn20-synset
                         ((:set
                           (:triple "revolution per minute" 0 "n")
                           (:triple "revolutions per minute" 0 "n")
                           (:triple "rpm" 0 "n")))))
(*right has
        (instance-of (Angle-Constant)))
(*ringgit has
          (instance-of (UoM-Worth))
          (wn20-synset ((:set (:triple "ringit" 0 "n")))))
(*rmb has
      (instance-of (UoM-Worth))
      (wn20-synset ((:set (:triple "rmb" 0 "n")))))
(*rocky has
        (instance-of (Consistency-Constant)))
(*rol has
      (instance-of (UoM-Worth))
      (wn20-synset ((:set (:triple "rol" 0 "n")))))
(*roomy has
        (instance-of (Capacity-Constant)))
(*rosyBrown has
            (instance-of (Color-Constant)))
(*rough has
        (instance-of (Texture-Constant)))
(*royalBlue has
            (instance-of (Color-Constant)))
(*Russian has
          (instance-of (Natural-Language)))
(*saddleBrown has
              (instance-of (Color-Constant)))
(*salt has
       (instance-of (Salt-Status-Constant)))
(*sandyBrown has
             (instance-of (Color-Constant)))
(*Saturday has
           (instance-of (Day-Constant))
           (name ("Saturday")))
(*score has
        (instance-of (UoM-Quantity))
        (wn20-synset
         ((:set (:triple "score" 0 "n") (:triple "scores" 0 "n")))))
(*seaGreen has
           (instance-of (Color-Constant)))
(*seaShell has
           (instance-of (Color-Constant)))
(*second has
         (instance-of (UoM-Time UoM-Duration))
         (wn20-synset
          ((:set
            (:triple "second" 0 "n")
            (:triple "seconds" 0 "n")
            (:triple "s" 0 "n")))))
(*semi-permeable has
                 (instance-of (Integrity-Constant)))
(*sentient has
           (instance-of (Sentience-Constant)))
(*sgdollar has
           (instance-of (UoM-Worth))
           (wn20-synset ((:set (:triple "sgdollar" 0 "n")))))
(*shallow has
          (instance-of (Depth-Constant)))
(*shallow-deep-scale has
                     (instance-of (Depth-Scale))
                     (element-type (Depth-Constant))
                     (element ((:seq *shallow *deep))))
(*short has
        (instance-of (Height-Constant Length-Constant)))
(*short-long-scale has
                   (instance-of (Length-Scale))
                   (element-type (Length-Constant))
                   (element ((:seq *short *long))))
(*short-tall-scale has
                   (instance-of (Height-Scale))
                   (element-type (Height-Constant))
                   (element ((:seq *short *average *tall))))
(*sienna has
         (instance-of (Color-Constant)))
(*silver has
         (instance-of (Color-Constant)))
(*skyBlue has
          (instance-of (Color-Constant)))
(*slateBlue has
            (instance-of (Color-Constant)))
(*slateGray has
            (instance-of (Color-Constant)))
(*slot-query has
             (instance-of (Viewpoint-Query-Type)))
(*slot-value has
             (instance-of (Viewpoint-Query-Type)))
(*slow has
       (instance-of (Rate-Constant)))
(*slow-fast-scale has
                  (instance-of (Rate-Scale))
                  (element-type (Rate-Constant))
                  (element ((:seq *slow *fast))))
(*slug has
       (instance-of (UoM-Mass))
       (wn20-synset
        ((:set (:triple "slug" 0 "n") (:triple "slugs" 0 "n")))))
(*small has
        (instance-of (Size-Constant Volume-Constant)))
(*small-large-scale has
                    (instance-of (Volume-Scale))
                    (element-type (Volume-Constant))
                    (element ((:seq *small *large))))
(*smokey has
         (instance-of (Smell-Constant)))
(*smooth has
         (instance-of (Texture-Constant)))
(*snow has
       (instance-of (Color-Constant)))
(*solid has
        (instance-of (State-Constant)))
(*soluble has
          (instance-of (Solubility-Constant)))
(*sour has
       (instance-of (Taste-Constant)))
(*Spanish has
          (instance-of (Natural-Language)))
(*spicy has
        (instance-of (Smell-Constant)))
(*springGreen has
              (instance-of (Color-Constant)))
(*square has
         (instance-of (Shape-Constant)))
(*square-foot has
              (instance-of (UoM-Area))
              (wn20-synset
               ((:set
                 (:triple "square foot" 0 "n")
                 (:triple "square feet" 0 "n")
                 (:triple "ft^2" 0 "n")))))
(*square-inch has
              (instance-of (UoM-Area))
              (wn20-synset
               ((:set
                 (:triple "square inch" 0 "n")
                 (:triple "square inches" 0 "n")
                 (:triple "in^2" 0 "n")))))
(*square-meter has
               (instance-of (UoM-Area))
               (wn20-synset
                ((:set
                  (:triple "square meter" 0 "n")
                  (:triple "square meters" 0 "n")
                  (:triple "m^2" 0 "n")))))
(*SR has
     (instance-of (Trafficability-Constant)))
(*SR-UR-scale has
              (instance-of (Trafficability-Scale))
              (element-type (Trafficability-Constant))
              (element ((:seq *SR *R *UR))))
(*steelBlue has
            (instance-of (Color-Constant)))
(*steep has
        (instance-of (Slope-Constant)))
(*stilb has
        (instance-of (UoM-Luminance))
        (wn20-synset
         ((:set (:triple "stilb" 0 "n") (:triple "stilbs" 0 "n")))))
(*stinky has
         (instance-of (Smell-Constant)))
(*stony has
        (instance-of (Consistency-Constant)))
(*straight has
           (instance-of (Angle-Constant)))
(*strong has
         (instance-of (Intensity-Constant Electrolyte-Status-Constant)))
(*submissive has
             (instance-of (Trait-Constant)))
(*Sunday has
         (instance-of (Day-Constant))
         (name ("Sunday")))
(*sweet has
        (instance-of (Taste-Constant)))
(*tall has
       (instance-of (Height-Constant Primary-Constant)))
(*Tamil has
        (instance-of (Natural-Language)))
(*tan has
      (instance-of (Color-Constant)))
(*tasteless has
            (instance-of (Taste-Constant)))
(*teal has
       (instance-of (Color-Constant)))
(*teenage has
          (instance-of (Age-Constant)))
(*Telugu has
         (instance-of (Natural-Language)))
(*thick has
        (instance-of (Thickness-Constant Primary-Constant)))
(*thin has
       (instance-of (Thickness-Constant)))
(*thin-thick-scale has
                   (instance-of (Thickness-Scale))
                   (element-type (Thickness-Constant))
                   (element ((:seq *thin *thick))))
(*thistle has
          (instance-of (Color-Constant)))
(*Thursday has
           (instance-of (Day-Constant))
           (name ("Thursday")))
(*tiny has
       (instance-of (Area-Constant Size-Constant)))
(*tiny-huge-scale has
                  (instance-of (Area-Scale))
                  (element-type (Area-Constant))
                  (element ((:seq *tiny *huge))))
(*tireless has
           (instance-of (Trait-Constant)))
(*tomato has
         (instance-of (Color-Constant)))
(*triangle has
           (instance-of (Shape-Constant)))
(*true has
       (instance-of (Truth-Constant)))
(*Tuesday has
          (instance-of (Day-Constant))
          (name ("Tuesday")))
(*turquoise has
            (instance-of (Color-Constant)))
(*unbreakable has
              (instance-of (Breakability-Constant)))
(*undersized has
             (instance-of (Size-Constant)))
(*unimportant has
              (instance-of (Importance-Constant)))
(*unimportant-important-scale has
                              (instance-of (Importance-Scale))
                              (element-type (Importance-Constant))
                              (element
                               ((:seq
                                 *unimportant
                                 *moderately-important
                                 *important))))
(*unity has
        (instance-of (UoM-Unitless))
        (wn20-synset
         ((:set (:triple "no unit" 0 "n") (:triple "unity" 0 "n")))))
(*unlimited has
            (instance-of (Capacity-Constant)))
(*upright has
          (instance-of (Orientation-Constant)))
(*UR has
     (instance-of (Trafficability-Constant)))
(*Urdu has
       (instance-of (Natural-Language)))
(*urgent has
         (instance-of (Priority-Constant)))
(*usdollar has
           (instance-of (UoM-Worth))
           (wn20-synset ((:set (:triple "usd" 0 "n")))))
(*UTC has
      (instance-of (Time-Zone-Constant))
      (name ("UTC")))
(*vertical has
           (instance-of (Orientation-Constant Slope-Constant)))
(*violet has
         (instance-of (Color-Constant)))
(*violetRed has
            (instance-of (Color-Constant)))
(*volt has
       (instance-of (UoM-Voltage))
       (wn20-synset
        ((:set (:triple "volt" 0 "n") (:triple "volts" 0 "n")))))
(*vulnerable has
             (instance-of (Trait-Constant)))
(*warm has
       (instance-of (Temperature-Constant)))
(*watery has
         (instance-of (Taste-Constant)))
(*watt has
       (instance-of (UoM-Power))
       (wn20-synset
        ((:set
          (:triple "watt" 0 "n")
          (:triple "watts" 0 "n")
          (:triple "W" 0 "n")))))
(*weak has
       (instance-of (Intensity-Constant Electrolyte-Status-Constant)))
(*weak-strong-scale has
                    (instance-of (Intensity-Scale))
                    (element-type (Intensity-Constant))
                    (element ((:seq *negligible *weak *strong))))
(*Wednesday has
            (instance-of (Day-Constant))
            (name ("Wednesday")))
(*week has
       (instance-of (UoM-Duration))
       (wn20-synset
        ((:set (:triple "week" 0 "n") (:triple "weeks" 0 "n")))))
(*weekly has
         (instance-of (UoM-Frequency))
         (wn20-synset ((:set (:triple "weekly" 0 "n")))))
(*WEST has
       (instance-of (Time-Zone-Constant))
       (name ("WEST")))
(*WET has
      (instance-of (Time-Zone-Constant))
      (name ("WET")))
(*wet has
      (instance-of (Wetness-Constant)))
(*wheat has
        (instance-of (Color-Constant)))
(*white has
        (instance-of (Color-Constant)))
(*whiteSmoke has
             (instance-of (Color-Constant)))
(*wide has
       (instance-of (Width-Constant Primary-Constant)))
(*yard has
       (instance-of (UoM-Length))
       (wn20-synset
        ((:set (:triple "yard" 0 "n") (:triple "yards" 0 "n")))))
(*year has
       (instance-of (UoM-Time UoM-Duration))
       (wn20-synset
        ((((:set (:triple "year" 0 "n") (:triple "years" 0 "n")))
          &&
          ((:set (:triple "year" 0 "n") (:triple "year" 0 "n")))))))
(*yearly has
         (instance-of (UoM-Frequency))
         (wn20-synset ((:set (:triple "yearly" 0 "n")))))
(*yellow has
         (instance-of (Color-Constant)))
(*yellowGreen has
              (instance-of (Color-Constant)))
(*yen has
      (instance-of (UoM-Worth))
      (wn20-synset ((:set (:triple "yen" 0 "n")))))
(*yes-no-question has
                  (instance-of (Viewpoint-Query-Type)))
(*young has
        (instance-of (Age-Constant)))
(*young-old-scale has
                  (instance-of (Age-Scale))
                  (element-type (Age-Constant))
                  (element
                   ((:seq
                     *young
                     *adolescent
                     *juvenile
                     *teenage
                     *middle-aged
                     *old))))
(UoM-Intensity has
               (cardinal-unit-class-of (intensity))
               (superclasses (Unit-of-Measurement))
               (instance-of (*kilocalorie/mole))
               (wn20-synset
                ((:set
                  (:triple "kilocalorie per mole" 0 "n")
                  (:triple "kilocalories per mole" 0 "n")))))
(_Partition1 has
             (instance-of (Partition))
             (members (Event Entity)))
(_Partition2 has
             (instance-of (Partition))
             (members (Animal Plant)))
(_Partition3 has
             (instance-of (Partition))
             (members (Nonrenewable-Resource Renewable-Resource)))
(_Partition4 has
             (instance-of (Partition))
             (members (Tangible-Entity Place)))
(_Partition5 has
             (instance-of (Partition))
             (members (Substance Chemical-Entity)))
(_Partition6 has
             (instance-of (Partition))
             (members (Animal Virus)))
(_Partition7 has
             (instance-of (Partition))
             (members (Military-Unit Terrain)))
(_Partition8 has
             (instance-of (Partition))
             (members
              (Army
               Battalion
               Battery
               Brigade
               Military-Company
               Corps
               Crew
               Detachment
               Division
               Military-Group
               Platoon
               Regiment
               Section
               Squad
               Squadron
               Military-Team
               Troop)))
(_Partition9 has
             (instance-of (Partition))
             (members (Salt-Substance Base Acid H2O-Substance)))