

:CLASS
 
(Comments has  
    (superclasses (Thing )) 
    (members ((
               (comment [Acid-Base-Complete-Neutralization-result-1]
                        (:seq "The result of the reaction of"
                            (the text-gen of (the Acid raw-material of Self)) "and"
                            (the text-gen of (the Base raw-material of Self)) "is thus"
                            (andify (the text-gen of (the result of Self))))
                        "In a complete acid-base neutralization, the result is water and a salt consisting of the cation of the base reactant and the anion of the acid reactant")


               (comment [Acid-Base-Exchange-w-Gas-a-instance-of-1]
                        "Therefore, this is an acid-base exchange reaction (with gas)"
                        "By definition, a reaction between an acid and a carbonate is an acid-base exchange reaction (with gas)")


               (comment [Acid-Base-Exchange-w-Gas-a-result-1]
                        (:seq "The products of the reaction of"
                            (andify (the text-gen of (the raw-material of Self))) "are thus"
                            (andify (the text-gen of (the result of Self))))
                        "When an acid reacts with a carbonate, the products are water, CO2(g), and a salt formed by the acid's anion and the carbonate metal")


               (comment [Acid-Base-Exchange-w-Gas-b-instance-of-1]
                        "Therefore, this is an acid-base exchange reaction (with gas)"
                        "By definition, a reaction between an acid and a bicarbonate is an acid-base
exchange reaction (with gas)")


               (comment [Acid-Base-Exchange-w-Gas-b-result-1]
                        (:seq "The products of the reaction of"
                            (andify (the text-gen of (the raw-material of Self))) "are thus"
                            (andify (the text-gen of (the result of Self))))
                        "When an acid reacts with a bicarbonate, the products are water, CO2(g), and a salt formed by the acid's anion and the bicarbonate metal")


               (comment [Acid-Base-Exchange-w-Gas-c-instance-of-1]
                        "Therefore, this is an acid-base exchange reaction (with gas)"
                        "By definition, a reaction between an acid and a sulfide is an acid-base exchange reaction (with gas)")


               (comment [Acid-Base-Exchange-w-Gas-c-result-1]
                        (:seq "The products of the reaction of"
                            (andify (the text-gen of (the raw-material of Self))) "are thus"
                            (andify (the text-gen of (the result of Self))))
                        "When an acid reacts with a sulfide, the products are H2S and a salt formed by the acid's anion and the bicarbonate metal")


               (comment [Acid-can-be-Oxidized-output-1]
                        (:seq (the text-gen of (the input of Self)) "contains the anion"
                            (the text-gen of
                                (the Anion has-part of
                                    (the has-basic-structural-unit of (the input of Self))))
                            "nospace" "; there is a known anion,"
                            (the text-gen of
                                (the Anion has-part of
                                    (the has-basic-structural-unit of (the output of Self))))
                            "with more oxygen atoms than the anion"
                            (the text-gen of
                                (the Anion has-part of
                                    (the has-basic-structural-unit of (the input of Self))))
                            "nospace" "; therefore" (the text-gen of (the input of Self))
                            "can be oxidized to" (the text-gen of (the output of Self)))
                        "An oxyacid of the form HxYOz can be oxidized if more oxygen atoms can be added to it; oxygen can only be added if there is a known anion YOw where w > z")


               (comment [Acid-can-be-Oxidized-output-2]
                        (:seq (the text-gen of (the input of Self)) "contains the anion"
                            (the text-gen of
                                (the Anion has-part of
                                    (the has-basic-structural-unit of (the input of Self))))
                            "nospace" "; there is no known anion with the same central atom as"
                            (the text-gen of
                                (the Anion has-part of
                                    (the has-basic-structural-unit of (the input of Self))))
                            "but with more oxygen atoms; therefore" (the text-gen of (the input of Self))
                            "cannot be oxidized")
                        "An oxyacid of the form HxYOz can be oxidized if more oxygen atoms can be added to it; oxygen can only be added if there is a known anion YOw where w > z")


               (comment [Activate-add-1] (:seq (the object of Self) " becomes active.")
                        "When something is activated, it becomes active.")


               (comment [Activate-pcs-1]
                        (:seq (the object of Self) " must not yet be activated.")
                        "Things can't be activated if they are already active.")


               (comment [Add-add-1]
                        (:seq (the object of Self) " is added to, and is now part of, "
                            (the base of Self))
                        "When something is added to a base, it becomes part of the base.")


               (comment [Add-Volumes-output-1]
                        (:seq "the sum of "
                            (andify
                                (forall (the input of Self)
                                    (:seq (the1 of (the value of It)) (the2 of (the value of It)))))
                            "=" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "To find total volume, add the component volumes:")


               (comment [Admit-del-1]
                        (:seq (the object of Self) " is no longer shut out of " (the base of Self))
                        "An admit stops something from being shut out of something else.")


               (comment [Admit-del-2]
                        (:seq (the base of Self) " no longer shuts out " (the object of Self))
                        "An admit stops something from being shut out of something else.")


               (comment [Admit-ncs-1]
                        (:seq (the object of Self) " cannot be already inside " (the base of Self))
                        "Something must be outside something else to be admitted into it.")


               (comment [Admit-pcs-1]
                        (:seq (the object of Self) " must be shut out of " (the base of Self))
                        "Only something that is shut out of something else can be admitted to it.")


               (comment [Allocate-Resource-del-1]
                        (:seq (the object of Self) " is now unavailable.")
                        "A Allocate-Resource allocates a resource and makes it unavailable.")


               (comment [Ambush-pcs-1] (:seq (the agent of Self) " must be concealed")
                        "Ambush cannot happen unless the agents are hidden")


               (comment [Amphoteric-Anion-Substance-instance-of-1]
                        (:seq (the text-gen of Self)
                            "has ionizable protons and is therefore amphoteric")
                        "Any anion that has ionizable protons is amphoteric")


               (comment [Amphoteric-Substance-capability-1]
                        (if (Self isa H2O-Substance) then
                            "Water is known to be amphoteric and can thus act as both an acid and a base"
                            else
                            (:seq "Since" (the text-gen of Self)
                                "is amphoteric, it can act as both an acid and a base"))
                        "An amphoteric substance can both lose and gain a proton, meaning it can act as a base when combined with something more acidic and as an acid when combined with something more basic"
                        (:triple Self instance-of *))


               (comment [Attach-add-1]
                        (:seq (the object of Self) " is attached to " (the base of Self))
                        "An attach causes two things to be attached to each other.")


               (comment [Attach-add-2]
                        (:seq (the base of Self) " is attached to " (the object of Self))
                        "An attach causes two things to be attached to each other.")


               (comment [Binary-Ionic-Compound-Decomposition-instance-of-1]
                        "Therefore, this reaction is a Binary-Ionic Compound Decomposition reaction"
                        "By definition, a Binary Ionic-Compound Decomposition Reaction occurs when a binary ionic compound is heated")


               (comment [Binary-Ionic-Compound-Decomposition-result-1]
                        (:seq "In this reaction," (the text-gen of (the raw-material of Self))
                            "reacts to produce" (andify (the text-gen of (the result of Self))))
                        "In general, a Binary Ionic-Compound Decomposition Reaction converts a binary
ionic-compound into basic elements")


               (comment [Block-add-1] (:seq (the object of Self) " is now blocked.")
                        "A block causes a place to be blocked.")


               (comment [Block-add-2]
                        (:seq (the instrument of Self) " is used to block " (the object of Self))
                        "An instrument can be used to block a place.")


               (comment [Block-Avenue-of-Approach-add-1]
                        (:seq (the object of Self) " is now blocked.")
                        "Block-Avenue-of-Approach prevents a unit from moving along an AoA.")


               (comment [Block-Military-Unit-add-1]
                        (:seq (the base of Self) " is now blocked.")
                        "Block-Military-Unit prevents a unit from moving along an AoA.")


               (comment [Breach-add-1]
                        (:seq (the result of Self) " has been created in " (the object of Self))
                        "A breach creates a portal in a barrier.")


               (comment [Break-add-1] (:seq (the object of Self) " is broken.")
                        "A break causes something to be broken.")


               (comment [Break-Contact-del-1]
                        (:seq (the object of Self) " is no longer touching " (the base of Self))
                        "A break-contact stops something from touching something else.")


               (comment [Break-Contact-del-2]
                        (:seq (the base of Self) " no longer abuts " (the object of Self))
                        "A break-contact stops something from touching something else.")


               (comment [Break-Contact-del-3]
                        (:seq (the object of Self) " no longer abuts " (the base of Self))
                        "A break-contact stops something from touching something else.")


               (comment [Chemical-concentration-1]
                        (:seq "The concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the concentration of Self)))
                            (the2 of (the value of (the concentration of Self))))
                        "The concentration of a chemical can be computed from its quantity and volume"
                        (:triple
                            (a Compute-Concentration-from-Quantity-and-Volume with
                                (input
                                    ((the quantity of Self) (the volume of (the Mixture is-part-of of Self)))))
                            output *))


               (comment [Chemical-concentration-2]
                        (:seq "The concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the concentration of Self)))
                            (the2 of (the value of (the concentration of Self))))
                        "The concentration of a chemical can be computed from its quantity and volume"
                        (:triple
                            (a Compute-Concentration-from-Quantity-and-Volume with
                                (input
                                    ((the quantity of Self) (the volume of (the Mixture base-of of Self)))))
                            output *))


               (comment [Chemical-concentration-3]
                        (:seq "The initial concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the concentration of Self)))
                            (the2 of (the value of (the concentration of Self))))
                        "The initial concentration of a reactant in an equilibrium reaction is equal to its equilibrium concentration plus the product of multiplying its coefficient by the concentration change constant for the reaction"
                        (:set (:triple Self equilibrium-concentration *)
                            (:triple
                                (a Compute-Concentration-Change-Constant with
                                    (input ((the Equilibrium-Reaction raw-material-of of Self))))
                                output *)))


               (comment [Chemical-concentration-4]
                        (:seq "The initial concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the concentration of Self)))
                            (the2 of (the value of (the concentration of Self))))
                        "The initial concentration of a product in an equilibrium reaction is equal to its equilibrium concentration minus the product of multiplying its coefficient by the concentration change constant for the reaction"
                        (:set (:triple Self equilibrium-concentration *)
                            (:triple
                                (a Compute-Concentration-Change-Constant with
                                    (input ((the Equilibrium-Reaction result-of of Self))))
                                output *)))


               (comment [Chemical-concentration-5]
                        (:seq "The initial concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the concentration of Self)))
                            (the2 of (the value of (the concentration of Self))))
                        "In a hydrolysis and complete dissociation reactions, the initial concentrations of the products are zero")


               (comment [Chemical-Entity-oxidation-state-1]
                        (:seq "Therefore, the oxidation states for" (the text-gen of Self) "are"
                            (andify
                                (forall (the value of (the oxidation-state of Self))
                                    (:seq (the text-gen of (an instance of (the2 of It))) "nospace" ":"
                                        "nospace" (the1 of It)))))
                        (:seq "Computing the oxidation states for" (the text-gen of Self))
                        (:triple (a Compute-Oxidation-State with (input (Self))) output *))


               (comment [Chemical-equilibrium-concentration-1]
                        (:seq "The equilibrium concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the equilibrium-concentration of Self)))
                            (the2 of (the value of (the equilibrium-concentration of Self))))
                        "The equilibrium concentration of a reactant in an equilibrium reaction is equal to its initial concentration minus the product of multiplying its coefficient by the concentration change constant for the reaction"
                        (:set (:triple Self concentration *)
                            (:triple
                                (a Compute-Concentration-Change-Constant with
                                    (input ((the Equilibrium-Reaction raw-material-of of Self))))
                                output *)))


               (comment [Chemical-equilibrium-concentration-2]
                        (:seq "The equilibrium concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the equilibrium-concentration of Self)))
                            (the2 of (the value of (the equilibrium-concentration of Self))))
                        "The equilibrium concentration of strong acid reactants in equilibrium reactions is zero")


               (comment [Chemical-equilibrium-concentration-3]
                        (:seq "The equilibrium concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the equilibrium-concentration of Self)))
                            (the2 of (the value of (the equilibrium-concentration of Self))))
                        "The equilibrium concentration of a reactant in an equilibrium reaction is equal to its initial concentration plus the product of multiplying its coefficient by the concentration change constant for the reaction"
                        (:set (:triple Self concentration *)
                            (:triple
                                (a Compute-Concentration-Change-Constant with
                                    (input ((the Equilibrium-Reaction result-of of Self))))
                                output *)))


               (comment [Chemical-equilibrium-concentration-4]
                        (:seq "The equilibrium concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the equilibrium-concentration of Self)))
                            (the2 of (the value of (the equilibrium-concentration of Self))))
                        "In hydrolysis and complete dissociation reactions that do not involve strong acid reactants, the equilibrium concentrations of the products are equal to the concentration change constant for the reaction"
                        (:triple
                            (a Compute-Concentration-Change-Constant with
                                (input ((the Equilibrium-Reaction result-of of Self))))
                            output *))


               (comment [Chemical-equilibrium-concentration-5]
                        (:seq "The equilibrium concentration of" (the text-gen of Self) "is thus"
                            (the1 of (the value of (the equilibrium-concentration of Self)))
                            (the2 of (the value of (the equilibrium-concentration of Self))))
                        "In hydrolysis and complete dissociation reactions that involve a strong acid reactant, the equilibrium concentrations of the products are equal to the initial concentration of the non-H2O reactants"
                        (:triple
                            (oneof (the raw-material of (the result-of of Self)) where
                                ((not (It isa H2O-Substance)) and
                                 (the1 of (the value of (the concentration of It)))))
                            concentration *))


               (comment [Chemical-Oxidation-instance-of-1]
                        (:seq (the text-gen of (the donor of Self))
                            "loses electrons and is therefore oxidized")
                        "When an atom loses electrons it is said to be oxidized")


               (comment [Chemical-plays-1]
                        (:seq (the text-gen of Self) "gains a proton and is thus acting as a base")
                        "In an acid-base reaction, a chemical that gains a proton acts as a base")


               (comment [Chemical-plays-2]
                        (:seq (the text-gen of Self) "loses a proton and is thus acting as an acid")
                        "In an acid-base reaction, a chemical that loses a proton acts as an acid")


               (comment [Chemical-Reduction-instance-of-1]
                        (:seq (the text-gen of (the donor of Self))
                            "gains electrons and is therefore reduced")
                        "When an atom gains electrons it is said to be reduced")


               (comment [Close-add-1] (:seq (the object of Self) " is closed.")
                        "A close causes something to be closed.")


               (comment [Close-add-2]
                        (:seq (the object of Self) " is now blocked by " (the instrument of Self))
                        "An opening is closed by blocking it with something.")


               (comment [Close-add-3]
                        (:seq (the instrument of Self) " is now blocking " (the object of Self))
                        "An opening is closed by blocking it with something.")


               (comment [Close-del-1] (:seq (the object of Self) " is no longer open.")
                        "A close stops something from being open.")


               (comment [Close-del-2] (:seq (the object of Self) " is no longer a portal.")
                        "A close stops something from being a portal through a barrier.")


               (comment [Close-pcs-1] (:seq (the object of Self) " cannot be closed already.")
                        "Something that is already closed cannot be closed again.")


               (comment [Close-pcs-2] (:seq (the object of Self) " must be open.")
                        "Something must be open if it is to be closed.")


               (comment [Close-pcs-3] (:seq (the object of Self) " cannot be blocked.")
                        "Something cannot be blocked if it is to be closed.")


               (comment [Communicate-add-1]
                        (:seq (the object of Self) " is the object of the state of "
                            (the resulting-state of Self))
                        "The Information become known.")


               (comment [Communicate-add-2]
                        (:seq (the recipient of Self) " experiences the state of "
                            (the resulting-state of Self))
                        "The Information becomes known to the recipient of the Communication.")


               (comment [Communicate-pcs-1]
                        (:seq (the object of Self) " must be known by " (the agent of Self))
                        "The agent must know Information before it can be Communicated.")


               (comment [Compare-Oxyacid-Strength-output-1]
                        (:seq "Both chemicals are" (the text-gen of (the input of Self)) "nospace"
                            ", so neither is stronger than the other")
                        "For oxyacids (acids of the form HxYOz) with the same central (non-oxygen) atom Y, acid strength increases with the number of oxygen atoms attached to Y")


               (comment [Compare-Oxyacid-Strength-output-2]
                        (:seq (the text-gen of (the output of Self))
                            "is an oxyacid with the same central atom as the oxyacid"
                            (the text-gen of
                                (oneof (the input of Self) where (It /= (the output of Self))))
                            "but with a greater number of oxygen atoms;"
                            (the text-gen of (the output of Self)) "is therefore the stronger oxyacid")
                        "For oxyacids (acids of the form HxYOz) with the same central (non-oxygen) atom Y, acid strength increases with the number of oxygen atoms attached to Y")


               (comment [Compare-Relative-Strengths-of-Acids-output-1]
                        (:seq (the text-gen of (the first of (the input of Self)))
                            "is known to be a stronger acid than"
                            (the text-gen of (the second of (the input of Self))))
                        "Checking the strength of acids...")


               (comment [Compare-Relative-Strengths-of-Acids-output-2]
                        (:seq (the text-gen of (the second of (the input of Self)))
                            "is known to be a stronger acid than"
                            (the text-gen of (the first of (the input of Self))))
                        "Checking the strength of acids...")


               (comment [Compare-Relative-Strengths-of-Acids-output-3]
                        (:seq (the text-gen of (the first of (the input of Self)))
                            "is known to be a weak acid, but the strength of"
                            (the text-gen of (the second of (the input of Self))) "is negligible;"
                            (the text-gen of (the first of (the input of Self)))
                            "is therefore the stronger acid")
                        "Checking the strength of acids...")


               (comment [Compare-Relative-Strengths-of-Acids-output-4]
                        (:seq (the text-gen of (the second of (the input of Self)))
                            "is known to be a weak acid, but the strength of"
                            (the text-gen of (the first of (the input of Self))) "is negligible;"
                            (the text-gen of (the second of (the input of Self)))
                            "is therefore the stronger acid")
                        "Checking the strength of acids...")


               (comment [Compare-Relative-Strengths-of-Acids-output-5]
                        (:seq "Both" (the text-gen of (the first of (the input of Self))) "and"
                            (the text-gen of (the second of (the input of Self)))
                            "are known to be strong acids, but" (the text-gen of (the output of Self))
                            "is stronger")
                        "Checking the strength of acids...")


               (comment [Compare-Relative-Strengths-of-Acids-output-6]
                        (:seq "The strength of both"
                            (the text-gen of (the first of (the input of Self))) "and"
                            (the text-gen of (the second of (the input of Self))) "is negligible, but"
                            (the text-gen of (the output of Self)) "is considered stronger")
                        "Checking the strength of acids...")


               (comment [Compare-Relative-Strengths-of-Bases-output-1]
                        (:seq (the text-gen of (the first of (the input of Self)))
                            "is known to be a stronger base than"
                            (the text-gen of (the second of (the input of Self))))
                        "Checking the strength of bases...")


               (comment [Compare-Relative-Strengths-of-Bases-output-2]
                        (:seq (the text-gen of (the second of (the input of Self)))
                            "is known to be a stronger base than"
                            (the text-gen of (the first of (the input of Self))))
                        "Checking the strength of bases...")


               (comment [Compare-Relative-Strengths-of-Bases-output-3]
                        (:seq (the text-gen of (the first of (the input of Self)))
                            "is known to be a weak base, but the strength of"
                            (the text-gen of (the second of (the input of Self))) "is negligible;"
                            (the text-gen of (the first of (the input of Self)))
                            "is therefore the stronger base")
                        "Checking the strength of bases...")


               (comment [Compare-Relative-Strengths-of-Bases-output-4]
                        (:seq (the text-gen of (the second of (the input of Self)))
                            "is known to be a weak base, but the strength of"
                            (the text-gen of (the first of (the input of Self))) "is negligible;"
                            (the text-gen of (the second of (the input of Self)))
                            "is therefore the stronger base")
                        "Checking the strength of bases...")


               (comment [Compare-Relative-Strengths-of-Bases-output-5]
                        (:seq "Both" (the text-gen of (the first of (the input of Self))) "and"
                            (the text-gen of (the second of (the input of Self)))
                            "are known to be strong bases, but" (the text-gen of (the output of Self))
                            "is stronger")
                        "Checking the strength of bases...")


               (comment [Compare-Relative-Strengths-of-Bases-output-6]
                        (:seq "The strength of both"
                            (the text-gen of (the first of (the input of Self))) "and"
                            (the text-gen of (the second of (the input of Self))) "is negligible, but"
                            (the text-gen of (the output of Self)) "is considered stronger")
                        "Checking the strength of bases...")


               (comment [Complete-Dissociation-Reaction-ka-1]
                        (:seq "Therefore, Ka =" (the1 of (the value of (the ka of Self))))
                        "In a complete dissociation reaction the acid dissociation constant Ka is equal to the equilibrium constant Keq"
                        (:triple Self keq *))


               (comment [Complete-Dissociation-Reaction-ka-expression-1]
                        (:seq "Therefore, the Ka expression is"
                            (:seq "{"
                                (forall (the1 of (the term of (the ka-expression of Self)))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}/{"
                                (forall (the2 of (the term of (the ka-expression of Self)))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}"))
                        "In a complete dissociation reaction the acid dissociation constant expression Ka is equal to the equilibrium constant expression Keq"
                        (:triple Self keq-expression *))


               (comment [Complete-Dissociation-Reaction-keq-1]
                        (:seq "Ka is known, therefore, Keq ="
                            (the1 of (the value of (the keq of Self))))
                        "In a complete dissociation reaction the equilibrium constant Keq is equal to the acid dissociation constant Ka")


               (comment [Complete-Dissociation-Reaction-keq-2]
                        (:seq "Ka is known, therefore, Keq ="
                            (the1 of (the value of (the keq of Self))))
                        "In a complete dissociation reaction the equilibrium constant Keq is equal to the acid dissociation constant Ka")


               (comment [Complete-Dissociation-Reaction-keq-3]
                        (:seq "Keq =" (the1 of (the value of (the keq of Self))))
                        "The equilibrium constant Keq must be computed from the Keq expression"
                        (:set (:triple Self keq-expression *)
                            (:triple (a Compute-Equilibrium-Constant with (input (Self))) output *)))


               (comment [Complete-Dissociation-Reaction-keq-4]
                        (:seq "Keq =" (the1 of (the value of (the first of (the ki of Self))))
                            (forall (the ki of Self) where (It /= (the first of (the ki of Self)))
                                (:seq "*" (the1 of (the value of It))))
                            "=" (the1 of (the value of (the keq of Self))))
                        "The overall equilibrium constant Keq of a combined reaction is equal to the product of the equilibrium constants for each individual reaction")


               (comment [Complete-Dissociation-Reaction-pka-1]
                        (:seq "The pKa of this reaction is thus = -log(" "nospace"
                            (the1 of (the value of (the ka of Self))) "nospace" ") ="
                            (the1 of (the value of (the pka of Self))))
                        "The pKa of a reaction = -log(Ka)")


               (comment [Complete-Dissociation-Reaction-pka-2]
                        (:seq "The pKa of this reaction is thus = -log(" "nospace"
                            (the1 of (the value of (the ka of Self))) "nospace" ") ="
                            (the1 of (the value of (the pka of Self))))
                        "The pKa of a reaction = -log(Ka)")


               (comment [Compute-Acidity-Basicity-of-Solution-output-1]
                        (:seq "The pH of" (the text-gen of (the input of Self)) "="
                            (the1 of
                                (oneof (the value of (the pH of (the input of Self))) where
                                    (numberp (the1 of It))))
                            "nospace" ";" (the text-gen of (the input of Self)) "is thus neutral")
                        "A solution with pH = 7 is neutral" (:triple (the input of Self) pH *))


               (comment [Compute-Acidity-Basicity-of-Solution-output-2]
                        (:seq "The pH of" (the text-gen of (the input of Self)) "="
                            (the1 of
                                (oneof (the value of (the pH of (the input of Self))) where
                                    (numberp (the1 of It))))
                            "nospace" ";" (the text-gen of (the input of Self)) "is thus basic")
                        "A solution with pH > 7 is basic" (:triple (the input of Self) pH *))


               (comment [Compute-Acidity-Basicity-of-Solution-output-3]
                        (:seq "The pH of" (the text-gen of (the input of Self)) "="
                            (the1 of
                                (oneof (the value of (the pH of (the input of Self))) where
                                    (numberp (the1 of It))))
                            "nospace" ";" (the text-gen of (the input of Self)) "is thus acidic")
                        "A solution with pH < 7 is acidic" (:triple (the input of Self) pH *))


               (comment [Compute-Activity-Series-output-1]
                        (:seq "Based on the activity series,"
                            (the text-gen of (the first of (the input of Self))) "is more active than"
                            (the text-gen of (the second of (the input of Self))))
                        "The activity series can be used to predict the outcome of reactions between
 metals and metal salts or acids")


               (comment [Compute-Activity-Series-output-2]
                        (:seq "Based on the activity series,"
                            (the text-gen of (the second of (the input of Self))) "is more active than"
                            (the text-gen of (the first of (the input of Self))))
                        "The activity series can be used to predict the outcome of reactions between
 metals and metal salts or acids")


               (comment [Compute-Balanced-Equation-output-1]
                        (:seq "the balanced equation is:"
                            (if
                                ((the1 of
                                     (the value of
                                         (the coefficient of
                                             (the1 of (the seq of (the raw-material of (the output of Self)))))))
                                 > 1)
                                then
                                (:seq
                                    (the1 of
                                        (the value of
                                            (the coefficient of
                                                (the1 of (the seq of (the raw-material of (the output of Self)))))))
                                    "nospace"))
                            (the text-gen of
                                (the1 of (the seq of (the raw-material of (the output of Self)))))
                            (forall-seq (the seq of (the raw-material of (the output of Self))) where
                                (It /= (the1 of (the seq of (the raw-material of (the output of Self)))))
                                (:seq "+"
                                    (if ((the1 of (the value of (the coefficient of It))) > 1) then
                                        (:seq (the1 of (the value of (the coefficient of It))) "nospace"))
                                    (the text-gen of It)))
                            "->"
                            (if
                                ((the1 of
                                     (the value of
                                         (the coefficient of
                                             (the1 of (the seq of (the result of (the output of Self)))))))
                                 > 1)
                                then
                                (:seq
                                    (the1 of
                                        (the value of
                                            (the coefficient of
                                                (the1 of (the seq of (the result of (the output of Self)))))))
                                    "nospace"))
                            (the text-gen of (the1 of (the seq of (the result of (the output of Self)))))
                            (forall-seq (the seq of (the result of (the output of Self))) where
                                (It /= (the1 of (the seq of (the result of (the output of Self)))))
                                (:seq "+"
                                    (if ((the1 of (the value of (the coefficient of It))) > 1) then
                                        (:seq (the1 of (the value of (the coefficient of It))) "nospace"))
                                    (the text-gen of It))))
                        (:seq "Given the unbalanced equation:"
                            (the text-gen of
                                (the1 of (the seq of (the raw-material of (the input of Self)))))
                            (forall-seq (the seq of (the raw-material of (the input of Self))) where
                                (It /= (the1 of (the seq of (the raw-material of (the input of Self)))))
                                (:seq "+" (the text-gen of It)))
                            "->"
                            (the text-gen of (the1 of (the seq of (the result of (the input of Self)))))
                            (forall-seq (the seq of (the result of (the input of Self))) where
                                (It /= (the1 of (the seq of (the result of (the input of Self)))))
                                (:seq "+" (the text-gen of It)))))


               (comment [Compute-Chemical-Formula-of-Ionic-Compound-output-1]
                        (:seq (the Anion input of Self) "+" (the Cation input of Self) "="
                            (the string-name of (the has-chemical-formula of (the output of Self))))
                        "")


               (comment [Compute-Complete-Atomic-Chemical-Formula-output-1]
                        (:seq "In its original form, " (the text-gen of (the input of Self))
                            "has/have the following composition,"
                            (forall-seq
                                (the term of
                                    (the atomic-chemical-formula of
                                        (the has-basic-structural-unit of (the input of Self))))
                                (:set (make-phrase (the1 of It)) (make-phrase (the2 of It)) "atom/s,"))
                            " only."
                            (if ((the multiplier of Self) = 1) then
                                "Since the coefficient value is 1, thus the atomic composition is not changed."
                                else
                                (:set "We proceed to account for the coefficient value."
                                    "The complete atomic chemical formula for "
                                    (the text-gen of (the input of Self)) "having coefficient "
                                    (the multiplier of Self) "is/are"
                                    (forall-seq (the term of (the output of Self))
                                        (:set (make-phrase (the1 of It)) (make-phrase (the2 of It)) "atom/s,"))
                                    "only.")))
                        "The complete atomic chemical formula of a chemical is derived by multiplying each atom's cardinality by the coefficient associated with the chemical.")


               (comment [Compute-Concentration-Change-Constant-output-1]
                        (:seq "In the hydrolysis of"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "nospace" ", [H+] = " (the output of Self) "molar")
                        (:seq "In the hydrolysis of"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "nospace" ", [H+] can be computed from pH")
                        (:triple (a Compute-Concentration-H-Plus with (input ((the input of Self))))
                            output *))


               (comment [Compute-Concentration-Change-Constant-output-2]
                        (:seq "In the hydrolysis of"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "nospace" ", [OH-] = " (the output of Self) "molar")
                        (:seq "In the hydrolysis of"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "nospace" ", [OH-] can be computed from pH and [H+]")
                        (:triple (a Compute-Concentration-OH-Minus with (input ((the input of Self))))
                            output *))


               (comment [Compute-Concentration-Change-Constant-output-3]
                        (if
                            (the Acid-Role plays of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            then
                            (:seq "Given that Ka ="
                                (the1 of (the value of (the keq of (the input of Self)))) "and [" "nospace"
                                (the text-gen of
                                    ((the raw-material of (the input of Self)) called "Reactant"))
                                "nospace" "] ="
                                (the1 of
                                    (the value of
                                        (the concentration of
                                            ((the raw-material of (the input of Self)) called "Reactant"))))
                                "nospace" ", solving for [H+] gives" (the output of Self))
                            else
                            (if
                                (the Base-Role plays of
                                    ((the raw-material of (the input of Self)) called "Reactant"))
                                then
                                (:seq "Given that Kb ="
                                    (the1 of (the value of (the keq of (the input of Self)))) "and [" "nospace"
                                    (the text-gen of
                                        ((the raw-material of (the input of Self)) called "Reactant"))
                                    "nospace" "] ="
                                    (the1 of
                                        (the value of
                                            (the concentration of
                                                ((the raw-material of (the input of Self)) called "Reactant"))))
                                    "nospace" ", solving for [OH-] gives" (the output of Self))))
                        (:seq "In the hydrolysis of"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "nospace"
                            (if
                                (the Acid-Role plays of
                                    ((the raw-material of (the input of Self)) called "Reactant"))
                                then
                                (:seq ", [H+] can be computed from the formula: Ka = [H+]^2 / ([" "nospace"
                                    (the text-gen of
                                        ((the raw-material of (the input of Self)) called "Reactant"))
                                    "nospace" "]initial - [H+])")
                                else
                                (if
                                    (the Base-Role plays of
                                        ((the raw-material of (the input of Self)) called "Reactant"))
                                    then
                                    (:seq ", [OH-] can be computed from the formula: Kb = [OH-]^2 / (["
                                        "nospace"
                                        (the text-gen of
                                            ((the raw-material of (the input of Self)) called "Reactant"))
                                        "nospace" "]initial - [OH-])")))))


               (comment [Compute-Concentration-Change-Constant-output-4]
                        (:seq "In the hydrolysis of"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "nospace" ", the concentration change constant is" (the output of Self))
                        (:seq
                            "In hydrolysis and complete dissociation reactions, the concentration of"
                            (the text-gen of
                                (oneof (the result of (the input of Self)) where
                                    (((the has-basic-structural-unit of It) isa H-Plus) or
                                     ((the has-basic-structural-unit of It) isa H3O-Plus) or
                                     ((the has-basic-structural-unit of It) isa OH-Minus))))
                            "is equal to the concentration change constant of the reaction")
                        (:triple
                            (oneof (the result of (the input of Self)) where
                                (((the has-basic-structural-unit of It) isa H-Plus) or
                                 ((the has-basic-structural-unit of It) isa H3O-Plus) or
                                 ((the has-basic-structural-unit of It) isa OH-Minus)))
                            equilibrium-concentration *))


               (comment [Compute-Concentration-from-Quantity-and-Volume-output-1]
                        (:seq (the1 of (the value of (the Quantity-Value input of Self)))
                            (the2 of (the value of (the Quantity-Value input of Self))) "/"
                            (the1 of (the value of (the Volume-Value input of Self)))
                            (the2 of (the value of (the Volume-Value input of Self))) "="
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "To find the concentration of a Chemical in a mixture, divide the quantity of the chemical by the volume of the mixture:"
                        (:set
                            (:triple (the Quantity-Value input of Self) value
                                (the value of (the Quantity-Value input of Self)))
                            (:triple (the Volume-Value input of Self) value
                                (the value of (the Volume-Value input of Self)))))


               (comment [Compute-Concentration-H-Plus-output-1]
                        (:seq "Therefore, [H+] = (10^-14)/" "nospace"
                            (the1 of
                                (the value of
                                    (the equilibrium-concentration of
                                        (oneof
                                            (:set (the raw-material of (the input of Self))
                                                (the result of (the input of Self)))
                                            where
                                            (((the has-basic-structural-unit of It) isa OH-Minus) and
                                             (the1 of (the value of (the equilibrium-concentration of It))))))))
                            "=" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "Since [OH-] is known, [H+] = (10^-14)/[OH-]")


               (comment [Compute-Concentration-H-Plus-output-2]
                        (:seq "Therefore, [H+] = 10^(" "nospace"
                            (0 -
                               (the1 of
                                   (oneof
                                       (the value of
                                           (the pH of
                                               (the Solution base-of of
                                                   ((the raw-material of (the input of Self)) called "Reactant"))))
                                       where (numberp (the1 of It)))))
                            "nospace" ") =" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "Since the pH is known, [H+] = 10^(-pH)")


               (comment [Compute-Concentration-H-Plus-output-3]
                        (:seq
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "is a strong base, so [OH-] =" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "For strong bases, the concentration of OH- is equal to the concentration of base"
                        (:triple ((the raw-material of (the input of Self)) called "Reactant")
                            equilibrium-concentration *))


               (comment [Compute-Concentration-H-Plus-output-5]
                        (:seq "Therefore, [H+] =" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "[H+] must be computed"
                        (:triple
                            (a Compute-Concentration-Change-Constant with (input ((the input of Self))))
                            output *))


               (comment [Compute-Concentration-of-Ions-output-1]
                        (:seq "The concentration of ions in" (the text-gen of (the input of Self))
                            "is" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "If a solute is a strong electrolyte, the concentration of ions is maximal"
                        (:set (:triple (the input of Self) electrolyte-status *)))


               (comment [Compute-Concentration-of-Ions-output-2]
                        (:seq "The concentration of ions in" (the text-gen of (the input of Self))
                            "is dilute")
                        "If a solute is a weak electrolyte, the concentration of ions is less than maximal"
                        (:triple (the input of Self) electrolyte-status *))


               (comment [Compute-Concentration-of-Ions-output-3]
                        (:seq "The concentration of ions in" (the text-gen of (the input of Self))
                            "is 0")
                        "If a solute is a non electrolyte, the concentration of ions is less than maximal"
                        (:triple (the input of Self) electrolyte-status *))


               (comment [Compute-Concentration-OH-Minus-output-1]
                        (:seq "Therefore, [OH-] = (10^-14)/" "nospace"
                            (the1 of
                                (the value of
                                    (the equilibrium-concentration of
                                        (oneof
                                            (:set (the raw-material of (the input of Self))
                                                (the result of (the input of Self)))
                                            where
                                            ((((the has-basic-structural-unit of It) isa H-Plus) or
                                              ((the has-basic-structural-unit of It) isa H3O-Plus))
                                             and (the1 of (the value of (the equilibrium-concentration of It))))))))
                            "=" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "Since [H+] is known, [OH-] = (10^-14)/[H+]")


               (comment [Compute-Concentration-OH-Minus-output-2]
                        (:seq "In this equilibrium reaction, [OH-] ="
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "Since the pH is known, [OH-] = [H+]/(10^-14)"
                        (:triple (a Compute-Concentration-H-Plus with (input ((the input of Self))))
                            output *))


               (comment [Compute-Concentration-OH-Minus-output-5]
                        (:seq "In this equilibrium reaction, [OH-] ="
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "[OH-] must be computed"
                        (:triple
                            (a Compute-Concentration-Change-Constant with (input ((the input of Self))))
                            output *))


               (comment [Compute-Conductivity-of-Ionic-Compound-in-Water-output-1]
                        (:seq (the text-gen of (the input of Self))
                            "is a strong electrolyte and thus has high conductivity")
                        "Strong electrolytes have high conductivity"
                        (:triple (the input of Self) electrolyte-status *))


               (comment [Compute-Conductivity-of-Ionic-Compound-in-Water-output-2]
                        (:seq (the text-gen of (the input of Self))
                            "is a weak electrolyte and thus has low conductivity")
                        "Weak electrolytes have low conductivity"
                        (:triple (the input of Self) electrolyte-status *))


               (comment [Compute-Conductivity-of-Ionic-Compound-in-Water-output-3]
                        (:seq (the text-gen of (the input of Self))
                            "is a non-electrolyte and thus has no conductivity")
                        "Non-electrolytes have no conductivity"
                        (:triple (the input of Self) electrolyte-status *))


               (comment [Compute-Conductivity-of-Ionic-Compound-in-Water-output-4]
                        (:seq "The conductivity of" (the text-gen of (the input of Self))
                            "is thus proportional to"
                            (the1 of
                                (oneof (the value of (the output of Self)) where (numberp (the1 of It)))))
                        "The conductivity of a solution is proportional to the sum of the concentrations of all ions in the solution"
                        (:triple (a Compute-Concentration-of-Ions with (input ((the input of Self))))
                            output *))


               (comment [Compute-Conjugate-Acid-output-1]
                        (:seq "Therefore, the conjugate acid of" (the text-gen of (the input of Self))
                            "is" (the text-gen of (the output of Self)))
                        "In acid-base equilibrium reactions, both the forward and the backward reaction involve proton transfers, so the reactant acid is the conjugate acid of the product base and the product acid is the conjugate acid of the reactant base")


               (comment [Compute-Conjugate-Base-output-1]
                        (:seq "Therefore, the conjugate base of" (the text-gen of (the input of Self))
                            "is" (the text-gen of (the output of Self)))
                        "In acid-base equilibrium reactions, both the forward and the backward reaction involve proton transfers, so the reactant base is the conjugate base of the product acid and the product base is the conjugate base of the reactant acid")


               (comment [Compute-Electrolyte-Status-output-1]
                        (:seq (the text-gen of (the input of Self)) "is a weak"
                            (if
                                ((the1 of
                                     (the value of
                                         (the intensity of (the Base-Role plays of (the input of Self)))))
                                 = *weak)
                                then "base" else "acid")
                            "and is therefore a weak electrolyte")
                        "Weak acids and bases are weak electrolytes")


               (comment [Compute-Electrolyte-Status-output-2]
                        (:seq (the text-gen of (the input of Self)) "is a strong"
                            (if
                                ((the1 of
                                     (the value of
                                         (the intensity of (the Base-Role plays of (the input of Self)))))
                                 = *strong)
                                then "base" else "acid")
                            "and is therefore a strong electrolyte")
                        "Strong acids and bases are strong electrolytes")


               (comment [Compute-Electrolyte-Status-output-3]
                        (:seq (the text-gen of (the input of Self))
                            "is a soluble salt and is therefore a strong electrolyte")
                        "Soluble salts are strong electrolytes")


               (comment [Compute-Electrolyte-Status-output-4]
                        (:seq (the text-gen of (the input of Self)) "is not an electrolyte") "")


               (comment [Compute-Equilibrium-Constant-output-1]
                        (:seq "The equilibrium constant of" (the input of Self) "is thus Keq ="
                            (if ((the input of Self) isa Hydrolysis) then
                                (:seq "{(" "nospace"
                                    (the output of
                                        (a Compute-Concentration-Change-Constant with
                                            (input ((the input of Self)))))
                                    "nospace" ")^2}/{" "nospace"
                                    (the1 of
                                        (the value of
                                            (the concentration of
                                                ((the raw-material of (the input of Self)) called "Reactant"))))
                                    "-"
                                    (the output of
                                        (a Compute-Concentration-Change-Constant with
                                            (input ((the input of Self)))))
                                    "nospace" "} ="))
                            (the1 of (the value of (the output of Self))))
                        (if ((the input of Self) isa Hydrolysis) then
                            (if
                                (has-value
                                    (the Acid-Role plays of
                                        ((the raw-material of (the input of Self)) called "Reactant")))
                                then
                                (:seq "In the hydrolysis of an acid, Keq = {[H+]^2}/{[" "nospace"
                                    (the text-gen of
                                        ((the raw-material of (the input of Self)) called "Reactant"))
                                    "nospace" "]initial - [H+]}")
                                else
                                (if
                                    (has-value
                                        (the Base-Role plays of
                                            ((the raw-material of (the input of Self)) called "Reactant")))
                                    then
                                    (:seq "In the hydrolysis of an acid, Keq = {[OH-]^2}/{[" "nospace"
                                        (the text-gen of
                                            ((the raw-material of (the input of Self)) called "Reactant"))
                                        "nospace" "] - [OH-]}")))
                            else
                            "In a general equilibrium reaction the equilibrium constant Keq is computed by solving the Keq expression")
                        (:triple
                            (a Compute-Concentration-Change-Constant with (input ((the input of Self))))
                            output *))


               (comment [Compute-Equilibrium-Expression-output-1]
                        (:seq "The equilibrium expression for" (the input of Self) "is thus"
                            (:seq "{"
                                (forall (the1 of (the term of (the keq-expression of (the input of Self))))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}/{"
                                (forall (the2 of (the term of (the keq-expression of (the input of Self))))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}"))
                        (if ((the input of Self) isa Hydrolysis) then
                            (if
                                (oneof
                                    (the elements of
                                        (the term of
                                            (the atomic-chemical-formula of
                                                (the has-basic-structural-unit of
                                                    ((the raw-material of (the input of Self)) called "Reactant")))))
                                    where ((the2 of It) = H))
                                then
                                "For the hydrolysis of an acid (aHX + H2O <--> cX + dH3O+) the equilibrium expression is {[X]^c [H3O+]^d}/{[HX]^a}"
                                else
                                "For the hydrolysis of a base (aX + H2O <--> cHX + dOH-) the equilibrium expression is {[HX]^c [OH-]^d}/{[X]^a}")
                            else
                            "For a general equilibrium reaction (aA + bB <--> cC + dD) the equilibrium expression is {[C]^c [D]^d}/{[A]^a [B]^b}"))


               (comment [Compute-Equilibrium-Position-output-1]
                        (:seq "The equilibrium constant, Keq, is "
                            (if ((the1 of (the value of (the keq of (the input of Self)))) > 1) then
                                "> 1, therefore, the equilibrium lies to the right" else
                                "< 1, therefore, the equilibrium lies to the left"))
                        "In a chemical reaction, the side on which equilibrium lies is related to the equilibrium constant as follows: if Keq > 1, the equilibrium lies to the right; whereas if Keq < 1, the equilibrium lies to the left."
                        (:set
                            (:triple (the Equilibrium-Reaction input of Self) keq
                                (the keq of (the Equilibrium-Reaction input of Self)))))


               (comment [Compute-Equilibrium-Position-output-2]
                        (:seq "The strong acid and base are"
                            (if ((the output of Self) = (the result of (the input of Self))) then
                                "reactants in the reaction, so equilibrium lies to the right" else
                                "products of the reaction, so equilibrium lies to the left"))
                        "In a chemical reaction, equilibrium lies on the side opposite the strong acid and base"
                        (:set
                            (:triple
                                (a Compare-Relative-Strengths-of-Acids with
                                    (input
                                        ((oneof (the raw-material of (the input of Self)) where
                                             (the Acid-Role plays of It))
                                         (oneof (the result of (the input of Self)) where
                                             (the Acid-Role plays of It)))))
                                output *)
                            (:triple
                                (a Compare-Relative-Strengths-of-Bases with
                                    (input
                                        ((oneof (the raw-material of (the input of Self)) where
                                             (the Base-Role plays of It))
                                         (oneof (the result of (the input of Self)) where
                                             (the Base-Role plays of It)))))
                                output *)))


               (comment [Compute-Hydrolysis-Result-output-10]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        "In the hydrolysis of an acid, the acid loses an H")


               (comment [Compute-Hydrolysis-Result-output-11]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        "In the hydrolysis of a base, the base gains an H+")


               (comment [Compute-Hydrolysis-Result-output-1]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        (:seq "The hydrolysis of" (the text-gen of (the input of Self))
                            "is exceptional: although it contains H, it gains another H in hydrolysis"))


               (comment [Compute-Hydrolysis-Result-output-2]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        "In the hydrolysis of a base, the base gains an H+")


               (comment [Compute-Hydrolysis-Result-output-3]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        "In the hydrolysis of a base, the base gains an H+")


               (comment [Compute-Hydrolysis-Result-output-4]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        "In the hydrolysis of a base, the base gains an H+")


               (comment [Compute-Hydrolysis-Result-output-5]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        (:seq "The hydrolysis of" (the text-gen of (the input of Self))
                            "is exceptional: although it contains H, it gains another H in hydrolysis"))


               (comment [Compute-Hydrolysis-Result-output-6]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        (:seq "The hydrolysis of" (the text-gen of (the input of Self))
                            "is exceptional: although it contains H, it gains another H in hydrolysis"))


               (comment [Compute-Hydrolysis-Result-output-7]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        (:seq "The hydrolysis of" (the text-gen of (the input of Self))
                            "is exceptional: although it contains H, it gains another H in hydrolysis"))


               (comment [Compute-Hydrolysis-Result-output-8]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        (:seq "The hydrolysis of" (the text-gen of (the input of Self))
                            "is exceptional: although it contains H, it gains another H in hydrolysis"))


               (comment [Compute-Hydrolysis-Result-output-9]
                        (:seq "The product of hydrolysis of" (the text-gen of (the input of Self))
                            "is therefore" (andify (the text-gen of (the output of Self))))
                        "In the hydrolysis of an acid, the acid loses an H+")


               (comment [Compute-Ionization-Percentage-output-1]
                        (if (the Acid-Role plays of (the input of Self)) then
                            (:seq (the text-gen of (the input of Self))
                                "is a strong acid and therefore dissociates completely (100%)")
                            else
                            (if (the Base-Role plays of (the input of Self)) then
                                (:seq (the text-gen of (the input of Self))
                                    "is a strong base and therefore ionizes completely (100%)")))
                        (if (the Acid-Role plays of (the input of Self)) then
                            "Strong acids dissociate completely" else
                            (if (the Base-Role plays of (the input of Self)) then
                                "Strong bases ionize completely")))


               (comment [Compute-Ionization-Percentage-output-2]
                        (if (the Acid-Role plays of (the input of Self)) then
                            (:seq "The percent dissociation of the weak acid"
                                (the text-gen of (the input of Self)) "is thus (" "nospace"
                                (the output of
                                    ((a Compute-Concentration-Change-Constant with
                                         (input ((the raw-material-of of (the input of Self)))))))
                                "nospace" "/" "nospace"
                                (the1 of (the value of (the concentration of (the input of Self))))
                                "nospace" ") x 100 =" (the output of Self) "nospace" "%")
                            else
                            (if (the Base-Role plays of (the input of Self)) then
                                (:seq "The percent ionization of the weak base"
                                    (the text-gen of (the input of Self)) "is thus (" "nospace"
                                    (the output of
                                        ((a Compute-Concentration-Change-Constant with
                                             (input ((the raw-material-of of (the input of Self)))))))
                                    "nospace" "/" "nospace"
                                    (the1 of (the value of (the concentration of (the input of Self))))
                                    "nospace" ") x 100 =" (the output of Self) "nospace" "%")))
                        (if (the Acid-Role plays of (the input of Self)) then
                            (:seq
                                "For a weak acid whose concentration and dissociation constant Ka are known, the percent dissociation is ([H+]/["
                                "nospace" (the text-gen of (the input of Self)) "nospace" "]) x 100")
                            else
                            (if (the Base-Role plays of (the input of Self)) then
                                (:seq
                                    "For a weak base whose concentration and ionization constant Kb are known, the percent dissociation is ([OH-]/["
                                    "nospace" (the text-gen of (the input of Self)) "nospace" "]) x 100")))
                        (:set (:triple (the input of Self) concentration *)
                            (:triple
                                (a Compute-Concentration-Change-Constant with
                                    (input ((the raw-material-of of (the input of Self)))))
                                output *)))


               (comment [Compute-Oxidation-State-a-output-1]
                        (:seq "Therefore, the oxidation number of F in"
                            (the text-gen of (the input of Self)) "is -1")
                        "The oxidation number of Fluorine is always -1")


               (comment [Compute-Oxidation-State-a-output-2]
                        (:seq "Therefore, the alkali metal atoms (" "nospace"
                            (andify
                                (forall
                                    (the2 of
                                        (the elements of
                                            (the term of (the atomic-chemical-formula of (the input of Self)))))
                                    where
                                    ((oneof2 (the all-subclasses of Alkali-Metal-Element) where (It = It2)) and
                                     (It /= H))
                                    (the text-gen of (an instance of It))))
                            "nospace" ") in" (the text-gen of (the input of Self))
                            "have an oxidation number of +1")
                        "Alkali metal atoms within compounds have an oxidation number of +1")


               (comment [Compute-Oxidation-State-a-output-3]
                        (:seq "Therefore, the alkali earth atoms (" "nospace"
                            (andify
                                (forall
                                    (the2 of
                                        (the elements of
                                            (the term of (the atomic-chemical-formula of (the input of Self)))))
                                    where
                                    ((oneof2 (the all-subclasses of Alkaline-Earth-Metal-Element) where
                                         (It = It2))
                                     or (oneof2 (the all-subclasses of IIA-Element) where (It = It2)))
                                    (the text-gen of (an instance of It))))
                            "nospace" ") in" (the text-gen of (the input of Self))
                            "have an oxidation number of +2")
                        "Alkali earth atoms within compounds have an oxidation number of +2")


               (comment [Compute-Oxidation-State-a-output-4]
                        (:seq (the text-gen of (the input of Self))
                            (if
                                (forall (the output of Self) where ((the2 of It) = H) ((the1 of It) = -1))
                                then "is a metal hydride compound, so the oxidation number of H is -1" else
                                "is not a metal hydride compound, so the oxidation number of H is +1"))
                        "Hydrogen has an oxidation number of -1 in a metal hydride compound, otherwise it is +1")


               (comment [Compute-Oxidation-State-a-output-5]
                        (:seq (the text-gen of (the input of Self))
                            "does not contain oxygen or another halogen, so the oxidation number of the halogen"
                            (forall (the output of Self) where
                                (oneof2 (the all-subclasses of Halogen-Element) where ((the2 of It) = It2))
                                (:seq (the text-gen of (an instance of (the2 of It))) "is" (the1 of It))))
                        "A halogen (other than Fluorine) within a compound that does not contain oxygen or another halogen has an oxidation number of -1")


               (comment [Compute-Oxidation-State-output-0]
                        (:seq
                            "Bruce or Ken needs to explain the special case of VOCl's oxidation numbers"))


               (comment [Compute-Oxidation-State-output-1]
                        (:seq "Therefore, the oxidation number of"
                            (the text-gen of (the input of Self)) "is"
                            (the1 of (the value of (the charge of (the input of Self)))))
                        (if ((the1 of (the value of (the charge of (the input of Self)))) = 0) then
                            "The oxidation number of an element is 0" else
                            "For monatomic ions the oxidation number is the charge on the ion"))


               (comment [Compute-Oxidation-State-output-2]
                        (if ((the number of (the context of Self)) > 0) then
                            (:seq "Found rules to determine that:"
                                (andify
                                    (forall (the context of Self)
                                        (:seq "the oxidation number of"
                                            (the text-gen of (an instance of (the2 of It))) "is" (the1 of It)))))
                            else "No rules found")
                        (:seq "Finding rules for computing the oxidation numbers for the atoms in"
                            (the text-gen of (the input of Self)))
                        (:triple (a Compute-Oxidation-State-a with (input ((the input of Self))))
                            output *))


               (comment [Compute-Oxidation-State-output-3]
                        (:seq
                            (if ((the number of (the context of Self)) > 0) then
                                (:seq "Found rules to determine that:"
                                    (andify
                                        (forall (the context of Self)
                                            (:seq "the oxidation number of"
                                                (the text-gen of (an instance of (the2 of It))) "is" (the1 of It))))
                                    "nospace" ".")
                                else "No rules found.")
                            "Since no rules were found for O and one other atom, the oxidation state of O is -2."
                            "The oxidation state O(x) of"
                            (forall
                                (the elements of
                                    (the term of (the atomic-chemical-formula of (the input of Self))))
                                where
                                ((not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2))))
                                 and ((the2 of It) /= O))
                                (the text-gen of (an instance of (the2 of It))))
                            "in" (the text-gen of (the input of Self))
                            "can be computed from the formula O(x) = C - (Z(x) / S(x)), where C is the compound charge, S(x) is the subscript of atom x and Z(x) is the sum of the products of the other atoms in the compound and their subscripts;"
                            "the oxidation state of"
                            (forall (the value of (the output of Self)) where
                                ((not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2))))
                                 and ((the2 of It) /= O))
                                (:seq (the text-gen of (an instance of (the2 of It))) "in"
                                    (the text-gen of (the input of Self)) "is thus"
                                    (the1 of (the value of (the charge of (the input of Self)))) "- ("
                                    "nospace"
                                    ((forall2
                                         (the elements of
                                             (the term of (the atomic-chemical-formula of (the input of Self))))
                                         where ((the2 of It2) = (the2 of It)) (the1 of It2))
                                     *
                                     ((the1 of (the value of (the charge of (the input of Self)))) -
                                      (the1 of It)))
                                    "/"
                                    (forall2
                                        (the elements of
                                            (the term of (the atomic-chemical-formula of (the input of Self))))
                                        where ((the2 of It2) = (the2 of It)) (the1 of It2))
                                    "nospace" ") =" (the1 of It))))
                        (:seq "Finding rules for computing the oxidation numbers for the atoms in"
                            (the text-gen of (the input of Self)))
                        (:triple (a Compute-Oxidation-State-a with (input ((the input of Self))))
                            output *))


               (comment [Compute-Oxidation-State-output-4]
                        (:seq
                            (if ((the number of (the context of Self)) > 0) then
                                (:seq "Found rules to determine that:"
                                    (andify
                                        (forall (the context of Self)
                                            (:seq "the oxidation number of"
                                                (the text-gen of (an instance of (the2 of It))) "is" (the1 of It))))
                                    "nospace" ".")
                                else "No rules found.")
                            "The oxidation state O(x) of"
                            (forall
                                (the elements of
                                    (the term of (the atomic-chemical-formula of (the input of Self))))
                                where
                                (not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2))))
                                (the text-gen of (an instance of (the2 of It))))
                            "in" (the text-gen of (the input of Self))
                            "can be computed from the formula O(x) = C - (Z(x) / S(x)), where C is the compound charge, S(x) is the subscript of atom x and Z(x) is the sum of the products of the other atoms in the compound and their subscripts;"
                            "the oxidation state of"
                            (forall (the value of (the output of Self)) where
                                (not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2))))
                                (:seq (the text-gen of (an instance of (the2 of It))) "in"
                                    (the text-gen of (the input of Self)) "is thus"
                                    (the1 of (the value of (the charge of (the input of Self)))) "- ("
                                    "nospace"
                                    ((forall2
                                         (the elements of
                                             (the term of (the atomic-chemical-formula of (the input of Self))))
                                         where ((the2 of It2) = (the2 of It)) (the1 of It2))
                                     *
                                     ((the1 of (the value of (the charge of (the input of Self)))) -
                                      (the1 of It)))
                                    "/"
                                    (forall2
                                        (the elements of
                                            (the term of (the atomic-chemical-formula of (the input of Self))))
                                        where ((the2 of It2) = (the2 of It)) (the1 of It2))
                                    "nospace" ") =" (the1 of It))))
                        (:seq "Finding rules for computing the oxidation numbers for the atoms in"
                            (the text-gen of (the input of Self)))
                        (:triple (a Compute-Oxidation-State-a with (input ((the input of Self))))
                            output *))


               (comment [Compute-pH-for-Solution-output-1]
                        (:seq "The pH of a solution of"
                            (the text-gen of (the base of (the input of Self))) "is therefore -log10("
                            "nospace"
                            (the1 of
                                (the value of
                                    (the output of
                                        (a Compute-Concentration-H-Plus with
                                            (input
                                                ((oneof
                                                     (the Equilibrium-Reaction raw-material-of of
                                                         (the base of (the input of Self)))
                                                     where
                                                     (oneof2 (the result of It) where
                                                         (((the has-basic-structural-unit of It2) isa H-Plus) or
                                                          ((the has-basic-structural-unit of It2) isa H3O-Plus))))))))))
                            "nospace" ") =" (the1 of (the value of (the output of Self))))
                        "The pH can be computed as -log10[H+]"
                        (:triple
                            (a Compute-Concentration-H-Plus with
                                (input
                                    ((oneof
                                         (the Equilibrium-Reaction raw-material-of of
                                             (the base of (the input of Self)))
                                         where
                                         (oneof2 (the result of It) where
                                             (((the has-basic-structural-unit of It2) isa H-Plus) or
                                              ((the has-basic-structural-unit of It2) isa H3O-Plus)))))))
                            output *))


               (comment [Compute-pH-for-Solution-output-2]
                        (:seq "The pH of" (the text-gen of (the input of Self)) "is therefore -log10("
                            "nospace"
                            (the1 of
                                (the value of
                                    (the output of
                                        (a Compute-Concentration-OH-Minus with
                                            (input
                                                ((oneof
                                                     (the Equilibrium-Reaction raw-material-of of
                                                         (the base of (the input of Self)))
                                                     where
                                                     (oneof2 (the result of It) where
                                                         ((the has-basic-structural-unit of It2) isa OH-Minus)))))))))
                            "nospace" "/10^-14) =" (the1 of (the value of (the output of Self))))
                        "The pH can be computed as -log10[H+], where [H+] = [OH-]/10^-14"
                        (:triple
                            (a Compute-Concentration-OH-Minus with
                                (input
                                    ((oneof
                                         (the Equilibrium-Reaction raw-material-of of
                                             (the base of (the input of Self)))
                                         where
                                         (oneof2 (the result of It) where
                                             ((the has-basic-structural-unit of It2) isa OH-Minus))))))
                            output *))


               (comment [Compute-Quantity-from-Concentration-and-Volume-output-1]
                        (:seq (the1 of (the value of (the Concentration-Value input of Self)))
                            (the2 of (the value of (the Concentration-Value input of Self))) "*"
                            (the1 of (the value of (the Volume-Value input of Self)))
                            (the2 of (the value of (the Volume-Value input of Self))) "="
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        (:seq "To find the quantity of"
                            (the text-gen of
                                (the concentration-of of (the Concentration-Value input of Self)))
                            "multiply its concentration and volume:")
                        (:set
                            (:triple (the Concentration-Value input of Self) value
                                (the value of (the Concentration-Value input of Self)))
                            (:triple (the Volume-Value input of Self) value
                                (the value of (the Volume-Value input of Self)))))


               (comment [Compute-Quantity-from-Reaction-output-1]
                        (:seq "The quantity of"
                            (the text-gen of
                                (the coefficient-of of (the Coefficient-Value input of Self)))
                            (forall (the Chemical input of Self) where
                                ((((the1 of (the value of (the quantity of It))) /
                                   (the1 of (the value of (the coefficient of It))))
                                  * (the1 of (the value of (the Coefficient-Value input of Self))))
                                 = (the1 of (the value of (the output of Self))))
                                (:seq "=" (the1 of (the value of (the Coefficient-Value input of Self)))
                                    "* (" (the1 of (the value of (the quantity of It)))
                                    (the2 of (the value of (the quantity of It))) ") /"
                                    (the1 of (the value of (the coefficient of It)))))
                            "=" (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        (:seq "Given that the coefficient of"
                            (the text-gen of
                                (the coefficient-of of (the Coefficient-Value input of Self)))
                            "is" (the1 of (the value of (the Coefficient-Value input of Self)))
                            (forall (the Chemical input of Self) where
                                ((((the1 of (the value of (the quantity of It))) /
                                   (the1 of (the value of (the coefficient of It))))
                                  * (the1 of (the value of (the Coefficient-Value input of Self))))
                                 = (the1 of (the value of (the output of Self))))
                                (:seq "and given that the quantity of" (the text-gen of It) "is"
                                    (the1 of (the value of (the quantity of It)))
                                    (the2 of (the value of (the quantity of It))) "and its coefficient is"
                                    (the1 of (the value of (the coefficient of It)))))))


               (comment [Compute-Quantity-of-Chemical-in-Chemical-output-1]
                        (:seq "the quantity of"
                            (the text-gen of (an instance of (the Class input of Self))) "is"
                            (if
                                (not
                                    ((the has-basic-structural-unit of (the Chemical input of Self)) isa
                                     (the Class input of Self)))
                                then
                                (:seq "thus"
                                    (the1 of (the value of (the quantity of (the Chemical input of Self)))) "*"
                                    (the1 of
                                        (theoneof
                                            (the elements of
                                                (the term of
                                                    (the has-chemical-formula of
                                                        (the has-basic-structural-unit of (the Chemical input of Self)))))
                                            where ((the2 of It) = (the Class input of Self))))
                                    "="))
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        (if
                            (not
                                ((the has-basic-structural-unit of (the Chemical input of Self)) isa
                                 (the Class input of Self)))
                            then
                            (:seq "In" (the text-gen of (the Chemical input of Self)) "the quantity of"
                                (the text-gen of (an instance of (the Class input of Self)))
                                "is the quantity of" (the text-gen of (the Chemical input of Self))
                                "* the coefficient of"
                                (the text-gen of (an instance of (the Class input of Self)))))
                        (:triple (the quantity of (the Chemical input of Self)) value *))


               (comment [Compute-Quantity-of-Chemical-in-Chemicals-output-1]
                        (:seq "the quantity of"
                            (the text-gen of (an instance of (the Class input of Self))) "in"
                            (andify (the text-gen of (the Chemical input of Self))) "is thus"
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        (:seq "In" (andify (the text-gen of (the Chemical input of Self)))
                            ", the quantity of"
                            (the text-gen of (an instance of (the Class input of Self)))
                            "is the sum of the quantity of"
                            (the text-gen of (an instance of (the Class input of Self))) "in its parts:")
                        (forall (the Chemical input of Self)
                            (:triple
                                (a Compute-Quantity-of-Chemical-in-Chemical with
                                    (input ((the Class input of Self) It)))
                                output *)))


               (comment [Compute-Quantity-of-Chemical-Object-output-1]
                        (:seq "the quantity of" (the Class input of Self) "in"
                            (andify (the text-gen of (the Chemical-Entity input of Self))) "is thus"
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        (:seq "In" (andify (the text-gen of (the Chemical-Entity input of Self)))
                            ", the quantity of" (the Class input of Self) "is the sum of the quantity of"
                            (the Class input of Self) "in its parts:")
                        (forall (the Chemical input of Self)
                            (if (It isa (the Class input of Self)) then (:triple It quantity *) else
                                (if (has-value (the has-part of It)) then
                                    (forall2 (the has-part of It)
                                        (:triple
                                            (a Compute-Quantity-of-Chemical-Object with
                                                (input ((the Class input of Self) It2)))
                                            output *))))))


               (comment [Compute-Quantity-of-Chemical-Substance-output-1]
                        (:seq "the quantity of" (the Class input of Self) "in"
                            (andify (the text-gen of (the Chemical input of Self))) "is thus"
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        (:seq "In" (andify (the text-gen of (the Chemical input of Self)))
                            ", the quantity of" (the Class input of Self) "is the sum of the quantity of"
                            (the Class input of Self) "in its parts:")
                        (forall (the Chemical input of Self)
                            (if (It isa (the Class input of Self)) then (:triple It quantity *) else
                                (if (has-value (the has-part of It)) then
                                    (forall2 (the has-part of It)
                                        (:triple
                                            (a Compute-Quantity-of-Chemical-Substance with
                                                (input ((the Class input of Self) It2)))
                                            output *))))))


               (comment [Compute-Relative-Acidity-output-1]
                        (:seq "Among"
                            (andify
                                (forall (the input of Self)
                                    (:seq (the text-gen of It) "(pH ="
                                        (the1 of
                                            (oneof2 (the value of (the pH of It)) where (numberp (the1 of It2))))
                                        "nospace" ")")))
                            "nospace" "," (the text-gen of (the output of Self)) "is the most acidic")
                        "When comparing solutions, the one with the lowest pH is the most acidic"
                        (forall (the input of Self) (:triple It pH *)))


               (comment [Compute-Relative-Basicity-output-1]
                        (:seq "Among"
                            (andify
                                (forall (the input of Self)
                                    (:seq (the text-gen of It) "(pH ="
                                        (the1 of
                                            (oneof2 (the value of (the pH of It)) where (numberp (the1 of It2))))
                                        "nospace" ")")))
                            "nospace" "," (the text-gen of (the output of Self)) "is the most basic")
                        "When comparing solutions, the one with the highest pH is the most basic"
                        (forall (the input of Self) (:triple It pH *)))


               (comment [Compute-Solubility-of-Ionic-Compound-in-Water-output-1]
                        (:seq
                            "According to Table 4.1 of Brown, LeMay and Bursten (2003), an Ionic Compound containing"
                            (the text-gen of (the Cation input of Self)) "and"
                            (the text-gen of (the Anion input of Self)) "is"
                            (the1 of (the value of (the output of Self))) "in water")
                        "")


               (comment [Compute-Strong-Acid-and-Base-output-1]
                        (:seq "Therefore, the strongest acid and base are "
                            (andify
                                (the text-gen of (the has-basic-structural-unit of (the output of Self)))))
                        "In an acid-base reaction, the weakest acid and base are those on the side of the reaction where equilibrium lies, and thus the strongest acid and base lie on the opposite side of the equilibrium"
                        (:set
                            (:triple (a Compute-Equilibrium-Position with (input ((the input of Self))))
                                output *)))


               (comment [Compute-Volume-from-Concentration-and-Quantity-output-1]
                        (:seq (the1 of (the value of (the Quantity-Value input of Self)))
                            (the2 of (the value of (the Quantity-Value input of Self))) "/"
                            (the1 of (the value of (the Concentration-Value input of Self)))
                            (the2 of (the value of (the Concentration-Value input of Self))) "="
                            (the1 of (the value of (the output of Self)))
                            (the2 of (the value of (the output of Self))))
                        "Divide the quantity by the concentration:"
                        (:set (:triple (the Concentration-Value input of Self) value *)
                            (:triple (the Quantity-Value input of Self) value *)))


               (comment [Conceal-add-1]
                        (:seq (the base of Self) " is concealing " (the object of Self))
                        "A conceal causes something to be concealed by something else.")


               (comment [Conceal-add-2]
                        (:seq (the object of Self) " is concealed by " (the base of Self))
                        "A conceal causes something to be concealed by something else.")


               (comment [Confine-add-1]
                        (:seq (the object of Self) " is confined in " (the base of Self))
                        "A confine causes something to be confined in something else.")


               (comment [Confine-add-2]
                        (:seq (the base of Self) " is confining " (the object of Self))
                        "A confine causes something to be confined in something else.")


               (comment [Confine-pcs-1]
                        (:seq (the object of Self) " must be inside " (the base of Self))
                        "A thing must be inside something else before it can be confined in it.")


               (comment [Conjugate-Acid-Base-Pair-context-1]
                        (:seq "The conjugate base of" (the text-gen of (the element of Self))
                            "is thus" (the text-gen of (the complement of Self)))
                        (:seq "Finding the conjugate base of" (the text-gen of (the element of Self))
                            "nospace" ":")
                        (:triple (a Compute-Conjugate-Base with (input ((the element of Self))))
                            output *))


               (comment [Conjugate-Acid-Base-Pair-context-2]
                        (:seq "The conjugate acid of" (the text-gen of (the element of Self))
                            "is thus" (the text-gen of (the complement of Self)))
                        (:seq "Finding the conjugate acid of" (the text-gen of (the element of Self))
                            "nospace" ":")
                        (:triple (a Compute-Conjugate-Acid with (input ((the element of Self))))
                            output *))


               (comment [Copy-add-1]
                        (:seq "Another copy of " (the object of Self) " has been created.")
                        "A copy creates a duplicate instance of something.")


               (comment [Create-add-1] (:seq (the object of Self) " has been created.")
                        "A create makes a new instance of something.")


               (comment [Deactivate-del-1]
                        (:seq (the object of Self) " is no longer activated.")
                        "A deactivate stops something from being activated.")


               (comment [Deactivate-pcs-1]
                        (:seq (the object of Self) " must be activated to be deactivated.")
                        "Something must be active for it to be deactivated.")


               (comment [Decrease-add-1]
                        (:seq (the property-slot of Self) " of " (the object of Self)
                            " has a new, lesser value.")
                        "A decrease lessens the value for a property.")


               (comment [Decrease-del-1]
                        (:seq "The old value of " (the property-slot of Self) " is no longer valid.")
                        "A decrease changes the old value of a property.")


               (comment [Decrease-pcs-1]
                        (:seq "The " (the property-slot of Self) " of " (the object of Self)
                            " must be in the range of " (the property-slot of Self))
                        "One cannot decrease an improperly-valued property.")


               (comment [Divide-add-1]
                        (:seq "A new, smaller instance of "                      " has been created.")
                        "A divide creates two new, smaller instances of something.")


               (comment [Divide-add-2]
                        (:seq "A new, smaller instance of " (the object of Self) " has been created.")
                        "A divide creates two new, smaller instances of something.")


               (comment [Duplicate-add-1] (:seq (the object of Self) " has been duplicated.")
                        "A duplicate creates a new, identical instance of something.")


               (comment [Electron-Pair-Acceptor-instance-of-1]
                        (:seq "Therefore," (the text-gen of Self) "is a Lewis Acid")
                        "By definition, a chemical entity that accepts a pair of electrons is a Lewis
Acid")


               (comment [Electron-Pair-Donor-instance-of-1]
                        (:seq "Therefore," (the text-gen of Self) "is a Lewis Base")
                        "By definition, a chemical entity that donates a pair of electrons is a Lewis
Base")


               (comment [Engagement-Military-Task-pcs-1]
                        (:seq "The available force ratio of " Self
                            " must be greater or equal to the required force ratio.")
                        "Required force ratio cannot be less than available ratio.")


               (comment [Entity-instance-of] "" (the text-sentence of Self))


               (comment [Equilibrium-Reaction-keq-1]
                        (:seq "Keq =" (the1 of (the value of (the keq of Self))))
                        "The equilibrium constant Keq of a reaction must be computed from the Keq expression"
                        (:triple (a Compute-Equilibrium-Constant with (input (Self))) output *))


               (comment [Equilibrium-Reaction-keq-2]
                        (:seq "Keq =" (the1 of (the value of (the first of (the ki of Self))))
                            (forall (the ki of Self) where (It /= (the first of (the ki of Self)))
                                (:seq "*" (the1 of (the value of It))))
                            "=" (the1 of (the value of (the keq of Self))))
                        "The overall equilibrium constant Keq of a combined reaction is equal to the product of the equilibrium constants for each individual reaction")


               (comment [Equilibrium-Reaction-keq-expression-1] ""
                        "The equilibrium constant expression for an equilibrium reaction is a ratio of product concentrations and reactant concentrations"
                        (:triple (a Compute-Equilibrium-Expression with (input (Self))) output *))


               (comment [Expose-del-1] (:seq (the object of Self) " is no longer concealed.")
                        "An expose stops something from being concealed.")


               (comment [Express-pcs-1]
                        (:seq (the object of Self) " must be known by " (the agent of Self))
                        "Something that is not known cannot be expressed.")


               (comment [Find-Species-in-Greatest-Concentration-output-1]
                        (:seq "The dissociation constants for the reactant"
                            (the text-gen of
                                ((the raw-material of (the input of Self)) called "Reactant"))
                            "are not known. However, since it is a strong acid,
        the highest concentration corresponds to the protons,"
                            (the text-gen of (the output of Self)))
                        "Finding the species in greatest concentration in a dissociation reaction.")


               (comment [Forget-del-1] (:seq (the object of Self) " is no longer known.")
                        "Something forgot something, now it does not know that something.")


               (comment [Forget-del-2]
                        (:seq (the agent of Self) " is no knows the information.")
                        "When someone forgets something it is no longer known by them.")


               (comment [Forget-pcs-1]
                        (:seq (the object of Self) "must be known by" (the agent of Self) " before "
                            (the agent of Self) " can forget it.")
                        "Must be known before it can be forgotten.")


               (comment [Gas-Solution-Reaction-a-instance-of-1]
                        "Therefore, ions exchange between the metal compound and carbonic acid produced by CO2 in the water"
                        "This is a reaction between CO2(g) and a metal compound solution")


               (comment [Gas-Solution-Reaction-a-result-1]
                        (:seq "The products of the reaction of"
                            (andify (the text-gen of (the raw-material of Self))) "are thus"
                            (andify (the text-gen of (the result of Self))))
                        "When CO2(g) (which in water produces H2CO3(aq)) reacts with a metal compound, the products are an insoluble metal carbonate and a compound consisting of H and the anion from the metal compound")


               (comment [Gas-Solution-Reaction-b-instance-of-1]
                        "Therefore, ions exchange between the metal compound and the hydrogen sulfide"
                        "This is a reaction between hydrogen sulfide gas and a metal compound of group III-A")


               (comment [Gas-Solution-Reaction-b-result-1]
                        (:seq "The products of the reaction of"
                            (andify (the text-gen of (the raw-material of Self))) "are thus"
                            (andify (the text-gen of (the result of Self))))
                        "When H2S(g) reacts with a metal compound, the products are an insoluble metal sulfide and a compound consisting of H and the anion from the metal compound")


               (comment [Gas-Water-Reaction-a-instance-of-1]
                        "This is a reaction with CO2 (gas) and water"
                        "A gas-water reaction involves gaseous SO2 or CO2 reacting with water")


               (comment [Gas-Water-Reaction-a-result-1]
                        (:seq "The result of the reaction is H2CO3, which dissociates into"
                            (andify (the text-gen of (the result of Self))))
                        "The reactants are CO2 (gas) and water")


               (comment [Gas-Water-Reaction-b-instance-of-1]
                        "This is a reaction with SO2 (gas) and water"
                        "A gas-water reaction involves gaseous SO2 or CO2 reacting with water")


               (comment [Gas-Water-Reaction-b-result-1]
                        (:seq "The result of the reaction is H2SO3, which dissociates into"
                            (andify (the text-gen of (the result of Self))))
                        "The reactants are SO2 (gas) and water")


               (comment [Hold-add-1] (:seq (the agent of Self) " is now holding.")
                        "A holder will continue holding something until it is let go.")


               (comment [Hold-dcs-1] (:seq (the agent of Self) " abuts " (the object of Self))
                        "A holder must be next to something it holds.")


               (comment [Hold-interrupted-1]
                        (:seq (the agent of Self) " let go of " (the object of Self))
                        "A let go of stops a holder from holding something.")


               (comment [Hydrocarbon-Combustion-Reaction-instance-of-1]
                        "Therefore, this reaction is a hydrocarbon combustion reaction"
                        "By definition, a Hydrocarbon Combustion Reaction occurs when a hydrocarbon reacts with oxygen in air")


               (comment [Hydrocarbon-Combustion-Reaction-result-1]
                        (:seq "In this reaction" (andify (the text-gen of (the raw-material of Self)))
                            "react to produce" (andify (the text-gen of (the result of Self))))
                        "A hydrocarbon combustion reaction produces water and carbon dioxide")


               (comment [Hydrolysis-acid-dissociation-ratio-1]
                        (:seq "The pH for this hydrolysis is"
                            (the1 of (the value of (the pH of Self)))
                            "and the pKa for this hydrolysis is"
                            (the1 of (the value of (the pka of Self))) "."
                            "Hence the dissociation ratio, [conjugate base]/[acid], is thus = 10^(pH -pKa) = 10^("
                            ((the1 of (the value of (the pH of Self))) -
                             (the1 of (the value of (the pka of Self))))
                            ") = " (the acid-dissociation-ratio of Self))
                        "The Henderson-Hasselbalch equation is as follows, pH = pKa + log[conjugate base]/log[acid].")


               (comment [Hydrolysis-base-dissociation-ratio-1]
                        (:seq "The pOH for this hydrolysis is"
                            (the1 of (the value of (the pOH of Self)))
                            "and the pKb for this hydrolysis is"
                            (the1 of (the value of (the pkb of Self))) "."
                            "Hence the dissociation ratio, [conjugate acid]/[base], is thus = 10^(pOH - pKb) = 10^("
                            ((the1 of (the value of (the pOH of Self))) -
                             (the1 of (the value of (the pkb of Self))))
                            ") = " (the acid-dissociation-ratio of Self))
                        "The Henderson-Hasselbalch equation is as follows, pOH = pKb + log[conjugate acid]/log[base].")


               (comment [Hydrolysis-ka-1]
                        (:seq "Therefore, Ka =" (the1 of (the value of (the ka of Self))))
                        "In a hydrolysis reaction the acid dissociation constant Ka is equal to the equilibrium constant Keq"
                        (:triple Self keq *))


               (comment [Hydrolysis-ka-expression-1]
                        (:seq "Therefore, the Ka expression is"
                            (:seq "{"
                                (forall (the1 of (the term of (the ka-expression of Self)))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}/{"
                                (forall (the2 of (the term of (the ka-expression of Self)))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}"))
                        "In a hydrolysis reaction the acid dissociation constant expression Ka is equal to the equilibrium constant expression Keq"
                        (:triple Self keq-expression *))


               (comment [Hydrolysis-kb-1]
                        (:seq "Therefore, Kb =" (the1 of (the value of (the kb of Self))))
                        "In a hydrolysis reaction the base ionization constant Kb is equal to the equilibrium constant Keq"
                        (:triple Self keq *))


               (comment [Hydrolysis-kb-expression-1]
                        (:seq "Therefore, the Kb expression is"
                            (:seq "{"
                                (forall (the1 of (the term of (the kb-expression of Self)))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}/{"
                                (forall (the2 of (the term of (the kb-expression of Self)))
                                    (:seq "nospace" "[" "nospace" (the text-gen of (the2 of It)) "nospace" "]"
                                        (if ((the1 of It) > 1) then (:seq "nospace" "^" "nospace" (the1 of It)))))
                                "nospace" "}"))
                        "In a hydrolysis reaction the base ionization constant expression Kb is equal to the equilibrium constant expression Keq"
                        (:triple Self keq-expression *))


               (comment [Hydrolysis-keq-1]
                        (:seq "Ka is known, therefore, Keq ="
                            (the1 of (the value of (the keq of Self))))
                        "In a hydrolysis reaction the equilibrium constant Keq is equal to the acid dissociation constant Ka")


               (comment [Hydrolysis-keq-2]
                        (:seq "Kb is known, therefore, Keq ="
                            (the1 of (the value of (the keq of Self))))
                        "In a hydrolysis reaction the equilibrium constant Keq is equal to the base ionization constant Kb")


               (comment [Hydrolysis-keq-3]
                        (:seq "Ka is known, therefore, Keq ="
                            (the1 of (the value of (the keq of Self))))
                        "In a hydrolysis reaction the equilibrium constant Keq is equal to the acid dissociation constant Ka")


               (comment [Hydrolysis-keq-4]
                        (:seq "Kb is known, therefore, Keq ="
                            (the1 of (the value of (the keq of Self))))
                        "In a hydrolysis reaction the equilibrium constant Keq is equal to the base ionization constant Kb")


               (comment [Hydrolysis-keq-5]
                        (:seq "Keq =" (the1 of (the value of (the keq of Self))))
                        "The equilibrium constant Keq of a reaction must be computed from the Keq expression"
                        (:set (:triple Self keq-expression *)
                            (:triple (a Compute-Equilibrium-Constant with (input (Self))) output *)))


               (comment [Hydrolysis-keq-6]
                        (:seq "Keq =" (the1 of (the value of (the first of (the ki of Self))))
                            (forall (the ki of Self) where (It /= (the first of (the ki of Self)))
                                (:seq "*" (the1 of (the value of It))))
                            "=" (the1 of (the value of (the keq of Self))))
                        "The overall equilibrium constant Keq of a combined reaction is equal to the product of the equilibrium constants for each individual reaction")


               (comment [Hydrolysis-pH-1]
                        (:seq "Thus pH = " (the1 of (the value of (the pH of Self)))
                            (the2 of (the value of (the pH of Self))))
                        ""
                        (:triple
                            (a Compute-pH-for-Solution with
                                (input
                                    ((a Aqueous-Solution with
                                         (base (((the raw-material of Self) called "Reactant")))))))
                            output *))


               (comment [Hydrolysis-pka-1]
                        (:seq "The pKa of this reaction is thus = -log(" "nospace"
                            (the1 of (the value of (the ka of Self))) "nospace" ") ="
                            (the1 of (the value of (the pka of Self))))
                        "The pKa of a reaction = -log(Ka)")


               (comment [Hydrolysis-pka-2]
                        (:seq "The pKa of this reaction is thus = -log(" "nospace"
                            (the1 of (the value of (the ka of Self))) "nospace" ") ="
                            (the1 of (the value of (the pka of Self))))
                        "The pKa of a reaction = -log(Ka)")


               (comment [Hydrolysis-pka-3]
                        (:seq "The pKa of this reaction is thus = "
                            (the1 of (the value of (the pH of Self))))
                        "For strong acids which dissociate completely, where [conjugate base] = [acid], pKa = pH.")


               (comment [Hydrolysis-pkb-1]
                        (:seq "The pKb of this reaction is thus = -log(" "nospace"
                            (the1 of (the value of (the kb of Self))) "nospace" ") ="
                            (the1 of (the value of (the pkb of Self))))
                        "The pKb of a reaction = -log(Kb)")


               (comment [Hydrolysis-pkb-2]
                        (:seq "The pKb of this reaction is thus = -log(" "nospace"
                            (the1 of (the value of (the kb of Self))) "nospace" ") ="
                            (the1 of (the value of (the pkb of Self))))
                        "The pKb of a reaction = -log(Kb)")


               (comment [Hydrolysis-pkb-3]
                        (:seq "The pKb of this reaction is thus = "
                            (the1 of (the value of (the pH of Self))))
                        "For strong bases which dissociate completely, [conjugate acid] = [base], pKb = pOH.")


               (comment [Hydrolysis-pOH-1]
                        (:seq "Thus pOH = 14 - " (the1 of (the value of (the pH of Self))) " = "
                            (the1 of (the value of (the pOH of Self)))
                            (the2 of (the value of (the pOH of Self))))
                        "pOH = 14 - pH."
                        (:triple
                            (a Compute-pH-for-Solution with
                                (input
                                    ((a Aqueous-Solution with
                                         (base (((the raw-material of Self) called "Reactant")))))))
                            output *))


               (comment [Hydrolysis-result-1]
                        (:seq "The result of this hydrolysis is therefore"
                            (andify (the text-gen of (the result of Self))))
                        "In the hydrolysis of a substance the substance either gains a proton from water or loses one to water"
                        (:triple
                            (a Compute-Hydrolysis-Result with
                                (input (((the raw-material of Self) called "Reactant"))))
                            output *))


               (comment [Increase-add-1]
                        (:seq (the property-slot of (the object of Self))
                            " has a new, greater value.")
                        "An increase grows the value for a property.")


               (comment [Increase-del-1]
                        (:seq "The old value of " (the property-slot of Self) " is no longer valid.")
                        "An increase changes the old value of a property.")


               (comment [Increase-pcs-1]
                        (:seq (the property-slot of (the object of Self))
                            " must be in the range of the property.")
                        "One cannot increase an improperly-valued property.")


               (comment [Interpret-add-1] (:seq (the object of Self) " is interpreted.")
                        "An interpret causes some information to be known.")


               (comment [Interpret-add-2] (:seq (the agent of Self) " interprets.")
                        "Some information becomes known to some entity.")


               (comment [Ionic-Compound-has-chemical-formula-1]
                        (:seq "the chemical formula of the ionic compound consisting of"
                            (the text-gen of (the Cation has-part of Self)) "and"
                            (the text-gen of (the Anion has-part of Self)) "is" (the text-gen of Self))
                        "When an anion is combined with a cation to form an ionic compound, the subscript of each ion is equal to the charge magnitude of the other ion.")


               (comment [Ionic-Compound-instance-of-1]
                        (:seq (the text-gen of Self) "is made up of"
                            (the text-gen of (the Anion has-part of Self)) "and"
                            (the text-gen of (the Cation has-part of Self)))
                        "A chemical is an ionic compound if it is made up of a cation and an anion")


               (comment [Ionic-Compound-oxidation-state-1]
                        (:seq "Therefore, the oxidation states for" (the text-gen of Self) "are"
                            (andify
                                (forall (the value of (the oxidation-state of Self))
                                    (:seq (the text-gen of (an instance of (the2 of It))) "nospace" ":"
                                        "nospace" (the1 of It)))))
                        (:seq "Computing the oxidation states for the ionic parts of"
                            (the text-gen of Self))
                        (forall (the has-part of Self)
                            (:triple (a Compute-Oxidation-State with (input (It))) output *)))


               (comment [Ionic-Compound-Substance-conductivity-1]
                        (:seq "Therefore, an aqueous solution of" (the text-gen of Self) "has"
                            (if
                                (has-value
                                    (oneof (the value of (the conductivity of Self)) where
                                        (not (numberp (the1 of It)))))
                                then
                                (the1 of
                                    (oneof (the value of (the conductivity of Self)) where
                                        (not (numberp (the1 of It)))))
                                else
                                (if
                                    (has-value
                                        (oneof (the value of (the conductivity of Self)) where
                                            (numberp (the1 of It))))
                                    then
                                    (:seq "conductivity proportional to"
                                        (the1 of
                                            (oneof (the value of (the conductivity of Self)) where
                                                (numberp (the1 of It))))))))
                        "Conductivity depends on the electrolyte status of a chemical"
                        (:triple
                            (a Compute-Conductivity-of-Ionic-Compound-in-Water with (input (Self)))
                            output *))


               (comment [Ionic-Compound-Substance-electrolyte-status-1]
                        (:seq (the text-gen of Self) "is thus a"
                            (the1 of (the value of (the electrolyte-status of Self))) "electrolyte")
                        (:seq "Checking the electrolyte status of" (the text-gen of Self))
                        (:triple (a Compute-Electrolyte-Status with (input (Self))) output *))


               (comment [Ionic-Compound-Substance-instance-of-1]
                        (:seq (the text-gen of Self) "is made up of"
                            (the text-gen of
                                (the Anion has-part of (the has-basic-structural-unit of Self)))
                            "and"
                            (the text-gen of
                                (the Cation has-part of (the has-basic-structural-unit of Self))))
                        "A chemical is an ionic compound if it is made up of a cation and an anion")


               (comment [Ionic-Compound-Substance-solubility-1]
                        (:seq "Therefore," (the text-gen of Self) "is"
                            (the1 of (the value of (the solubility of Self))) "in water")
                        (:seq (the text-gen of Self) "contains"
                            (the text-gen of
                                (the Cation has-part of (the has-basic-structural-unit of Self)))
                            "and"
                            (the text-gen of
                                (the Anion has-part of (the has-basic-structural-unit of Self))))
                        (:triple
                            (a Compute-Solubility-of-Ionic-Compound-in-Water with
                                (input
                                    ((the Cation has-part of (the has-basic-structural-unit of Self))
                                     (the Anion has-part of (the has-basic-structural-unit of Self)))))
                            output *))


               (comment [Let-Fall-del-1]
                        (:seq (the object of Self) " is no longer being supported.")
                        "A let-fall stops something from being supported.")


               (comment [Let-Fall-pcs-1]
                        (:seq (the object of Self) " must be supported before it can fall.")
                        "Something must be supported by something else before it can fall.")


               (comment [Let-Go-Of-dcs-1]
                        (:seq "The location of " (the agent of Self)
                            " is the same as the location of " (the object of Self))
                        "Something that is held is in the same place as that which is holding it.")


               (comment [Let-Go-Of-del-1] (:seq (the object of Self) " is no longer held.")
                        "A let-go-of stops something from being held.")


               (comment [Let-Go-Of-del-2]
                        (:seq (the agent of Self) " is no longer holding " (the object of Self))
                        "A let-go-of stops something from holding something else.")


               (comment [Let-Go-Of-interrupted-1] "A hold interrupts a let-go-of"
                        "A hold stops a let-go-of.")


               (comment [Lewis-Acid-Role-lewis-acid-strength-1]
                        (:seq (the text-gen of (the played-by of Self))
                            "is a metal cation with charge"
                            (the1 of (the value of (the charge of (the played-by of Self))))
                            "and will be a stronger Lewis acid than a metal cation with charge <"
                            (the1 of (the value of (the charge of (the played-by of Self)))))
                        "Only cations can be Lewis acids; if a cation is a metal, its strength as a Lewis acid increases with the cation charge")


               (comment [Make-Accessible-del-1]
                        (:seq (the object of Self) " is now accessible.")
                        "A make-accessible stops something from being inaccessible.")


               (comment [Make-Contact-add-1]
                        (:seq (the object of Self) " now touches " (the base of Self))
                        "Things that make contact touch.")


               (comment [Make-Contact-add-2]
                        (:seq (the base of Self) " now touches " (the object of Self))
                        "Things that make contact touch.")


               (comment [Make-Contact-add-3]
                        (:seq (the base of Self) " now abuts " (the object of Self))
                        "Things that make contact must be next to each other.")


               (comment [Make-Contact-add-4]
                        (:seq (the object of Self) " now abuts " (the base of Self))
                        "Things that make contact must be next to each other.")


               (comment [Make-Contact-pcs-1]
                        (:seq (the object of Self) " cannot already be touching " (the base of Self))
                        "Things that are to come in contact cannot already be touching.")


               (comment [Make-Contact-pcs-2]
                        (:seq (the base of Self) " cannot already be touching " (the object of Self))
                        "Things that are to come in contact cannot already be touching.")


               (comment [Make-Inaccessible-add-1]
                        (:seq (the base of Self) " now cannot access " (the object of Self))
                        "Something that is made inaccessible cannot be accessed.")


               (comment [Make-Inaccessible-add-2]
                        (:seq (the object of Self) " is now inaccessible.")
                        "Something that is made inaccessible cannot be accessed.")


               (comment [Make-Inaccessible-add-3]
                        (:seq (the agent of Self) " made " (the object of Self) " inaccessible.")
                        "A thing can make something else inaccessible.")


               (comment [Metal-Acid-Displacement-Reaction-instance-of-1]
                        "Therefore, this reaction is a Metal-Acid displacement reaction"
                        "By definition, a reaction between a metal and an acid is a Metal-Acid displacement reaction")


               (comment [Metal-Acid-Displacement-Reaction-result-1]
                        (if
                            ((the output of
                                 (a Compute-Activity-Series with
                                     (input
                                         ((the Metal-Atom has-basic-structural-unit of (the raw-material of Self))
                                          (a H-Plus)))))
                             = "yes")
                            then
                            (:seq "Therefore, the reaction occurs, and it produces"
                                (andify (the text-gen of (the result of Self))))
                            else (:seq "Therefore, no reaction occurs"))
                        "Whether a reaction occurs depends on the activity series of the reactants"
                        (:triple
                            (a Compute-Activity-Series with
                                (input
                                    ((the Metal-Atom has-basic-structural-unit of (the raw-material of Self))
                                     (a H-Plus))))
                            output *))


               (comment [Metal-Carbonate-Decomposition-Reaction-instance-of-1]
                        "Therefore, this reaction is a Metal-Carbonate decomposition reaction"
                        "By definition, a Metal-Atom Carbonate Decomposition Reaction occurs when a metal carbonate is heated")


               (comment [Metal-Carbonate-Decomposition-Reaction-result-1]
                        (:seq "In this reaction," (the text-gen of (the raw-material of Self))
                            "reacts to produce"
                            (the text-gen of (the Ionic-Compound-Substance result of Self)))
                        "In general, the reaction produces a metal oxide (an ionic compound) along with carbon dioxide")


               (comment [Metal-Hydride-Water-Reaction-instance-of-1]
                        (:seq "This reaction involves" "water and"
                            (the text-gen of (the Salt-Substance raw-material of Self))
                            "(an ionic hydride) and is therefore a metal hydride-water reaction")
                        "A reaction involving water and an ionic hydride is a metal hydride-water reaction")


               (comment [Metal-Hydride-Water-Reaction-result-1]
                        (:seq "In this reaction water and"
                            (the text-gen of (the Salt-Substance raw-material of Self)) "react to give"
                            (andify (the text-gen of (the result of Self))))
                        "Ionic hydrides react with water to give H2(g) and a hydroxide species")


               (comment [Metal-Nonmetal-Reaction-instance-of-1]
                        "Therefore, this reaction is a metal-nonmetal reaction"
                        "By definition, a reaction of a metal and a nonmetal is a metal-nonmetal reaction")


               (comment [Metal-Nonmetal-Reaction-result-1] ""
                        (:seq
                            "<ul>
"
                            (forall ?x in (the raw-material of Self)
                                (:seq "<li>" (the text-sentence of ?x)
                                    "</li>
"))
                            "</ul>
"
                            "<ul>
"
                            (forall ?x in (the result of Self)
                                (:seq "<li>" (the text-sentence of ?x)
                                    "</li>
"))
                            "</ul>
"))


               (comment [Metal-Salt-Displacement-Reaction-instance-of-1]
                        "Therefore, this reaction is a Metal-Salt displacement reaction"
                        "By definition, a reaction between a metal and a salt is a Metal-Salt displacement reaction")


               (comment [Metal-Salt-Displacement-Reaction-result-1]
                        (if
                            ((the output of
                                 (a Compute-Activity-Series with
                                     (input
                                         ((the Metal-Atom has-basic-structural-unit of (the raw-material of Self))
                                          (the Cation has-part of
                                              (the has-basic-structural-unit of
                                                  (the Salt-Substance raw-material of Self)))))))
                             = "yes")
                            then
                            (:seq "Therefore, the reaction occurs, and it produces"
                                (andify (the text-gen of (the result of Self))))
                            else (:seq "Therefore, no reaction occurs"))
                        "Whether a reaction occurs depends on the activity series of the reactants"
                        (:triple
                            (a Compute-Activity-Series with
                                (input
                                    ((the Metal-Atom has-basic-structural-unit of (the raw-material of Self))
                                     (the Cation has-part of
                                         (the has-basic-structural-unit of
                                             (the Salt-Substance raw-material of Self))))))
                            output *))


               (comment [Metathesis-Reaction-instance-of-1]
                        "Therefore, this reaction is a metathesis reaction"
                        "By definition, a reaction involving ionic reactants is a metathesis reaction")


               (comment [Metathesis-Reaction-result-1]
                        (:seq "The products of a metathesis reaction of"
                            (andify (the text-gen of (the raw-material of Self))) "are thus"
                            (andify (the text-gen of (the result of Self))))
                        "In a metathesis reaction, the cation of each reactant is combined with the anion of the other reactant")


               (comment [Military-Task-pcs-1]
                        (:seq (the path of Self) " must not be severely restricted to "
                            (the object of Self))
                        "Objects cannot be moved through severely restricted paths.")


               (comment [Mix-result-has-part-quantity-1]
                        (:seq "Therefore, the quantity of" (the has-part of (the result of Self)) "="
                            (the1 of
                                (the value of (the quantity of (the has-part of (the result of Self)))))
                            (the2 of
                                (the value of (the quantity of (the has-part of (the result of Self))))))
                        "By the Law of Conservation of Mass, the quantity of a chemical in a mixture is the sum of the quantities of that chemical in the parts of the mix."
                        (:set (:triple (the result of Self) has-part *)
                            (:triple (the quantity of (the has-part of (the result of Self))) value *)))


               (comment [Monoprotic-Acid-instance-of-1]
                        (:seq "Because each molecule of" (the text-gen of Self)
                            "contains one H+ ion, it is a monoprotic acid")
                        "By definition, an ionic compound is a monoprotic acid if it yields one H+ per molecule of acid")


               (comment [Move-Into-add-1]
                        (:seq (the base of Self) " now contains " (the object of Self))
                        "Something is contained by the thing it moves into.")


               (comment [Move-Into-add-2]
                        (:seq (the object of Self) " is in the state of Be-Contained.")
                        "After being moved into something is in the state of being contained")


               (comment [Move-Into-pcs-1]
                        (:seq (the object of Self) " cannot be shut out of " (the base of Self))
                        "Something cannot move into something else if it has been shut out of it.")


               (comment [Move-Out-Of-del-1]
                        (:seq (the base of Self) " no longer contains " (the object of Self))
                        "A move out of stops something from being contained by something else.")


               (comment [Move-Out-Of-del-2]
                        (:seq (the object of Self) " is no longer in the Be-Contained State.")
                        "A move out of takes somthing out of the state of being contained")


               (comment [Move-Out-Of-pcs-1]
                        (:seq (the object of Self) " must not be confined in " (the base of Self))
                        "Only an unconfined thing can move out of the thing that contains it.")


               (comment [Obstruct-add-1] (:seq (the object of Self) " is obstructed.")
                        "An obstruct causes something to be obstructed.")


               (comment [Obstruct-add-2] (:seq (the agent of Self) " caused the obstruction.")
                        "Somthing can cause something else to be obstructed.")


               (comment [Open-add-1] (:seq (the object of Self) " is now a portal.")
                        "An open results in a portal.")


               (comment [Open-del-1] (:seq (the object of Self) " is no longer closed.")
                        "When something is opened, it is no longer closed.")


               (comment [Open-del-2] (:seq "The blockage is no longer a portal covering")
                        "Something is only a portal covering when it is blocking the portal.")


               (comment [Open-del-3]
                        (:seq "The portal cover no longer blocks " (the object of Self))
                        "An open removes the portal covering from the portal.")


               (comment [Open-pcs-1] (:seq (the object of Self) " must not be open yet.")
                        "Something that is open cannot be opened again.")


               (comment [Open-pcs-2] (:seq (the object of Self) " must be closed.")
                        "Something must be closed before it can be opened.")


               (comment [Oxidation-Reduction-Reaction-instance-of-1]
                        "Therefore, this is an oxidation reduction reaction"
                        "By definition, oxidation-reduction reactions occur when electrons are transferred from the atom that is oxidized to the atom that is reduced.  We
need to look for changes in the oxidation states of the elements in the reaction."
                        (:triple Self oxidation-state-changes *))


               (comment [Polyprotic-Acid-instance-of-1]
                        (:seq "Because each molecule of" (the text-gen of Self)
                            "contains multiple H+ ion, it is a polyprotic acid")
                        "By definition, an ionic compound is a polyprotic acid if it yields more than one H+ per molecule of acid")


               (comment [Precipitate-instance-of-1]
                        (:seq "Therefore," (the text-gen of Self) "is a precipitate")
                        "By definition, the result of a reaction is a precipitate if it is insoluble in water"
                        (:triple Self solubility *))


               (comment [Produce-add-1]
                        (:seq (the result of Self) " was created from " (the raw-material of Self))
                        "A produce consumes raw material substances to create a Tangible-Entity.")


               (comment [Produce-add-2]
                        (:seq (the raw-material of Self) " is part of " (the result of Self))
                        "A produce uses raw material parts to create a Tangible-Entity.")


               (comment [Produce-add-3]
                        (:seq (the result of Self) " was created from " (the raw-material of Self))
                        "A produce consumes raw material substances to create a Tangible-Entity.")


               (comment [Produce-add-4]
                        (:seq (the raw-material of Self) " is part of " (the result of Self))
                        "A produce uses raw material parts to create a Tangible-Entity.")


               (comment [Reaction-complete-ionic-equation-1]
                        (:seq "The complete ionic equation for this reaction is therefore"
                            (the output of
                                (a Format-Equation with (input ((the complete-ionic-equation of Self))))))
                        "The complete ionic equation of a reaction is the chemical equation with all soluble strong electrolytes shown as ions"
                        (:set
                            (forall (the raw-material of Self)
                                (if (It isa Strong-Electrolyte) then
                                    (:set (:triple It solubility *) (:triple It electrolyte-status *)) else
                                    (:triple It electrolyte-status *)))
                            (forall (the result of Self)
                                (if (It isa Strong-Electrolyte) then
                                    (:set (:triple It solubility *) (:triple It electrolyte-status *)) else
                                    (:triple It electrolyte-status *)))))


               (comment [Reaction-direction-1]
                        (:seq "Therefore, this reaction proceeds to the"
                            (the value of (the direction of Self)))
                        "In acid/base equilibrium reactions, the reaction proceeds in the direction of the side where equilibrium lies"
                        (:triple (a Compute-Equilibrium-Position with (input (Self))) output *))


               (comment [Reaction-Material-quantity-1]
                        (:seq "Therefore, the quantity of" (the text-gen of Self) "="
                            (the1 of (the value of (the quantity of Self)))
                            (the2 of (the value of (the quantity of Self))))
                        "The quantity of a reactant of a reaction can be computed from its coefficient in the balanced equation and the quantity and coefficient of some other reactant or product in the reaction"
                        (:set
                            (:triple
                                (a Compute-Quantity-from-Reaction with
                                    (input
                                        ((allof
                                             (:set (the raw-material of (the raw-material-of of Self))
                                                 (the result of (the raw-material-of of Self)))
                                             where (It /= Self))
                                         (the coefficient of Self))))
                                output *)))


               (comment [Reaction-net-ionic-equation-1]
                        (:seq "The net ionic equation for this reaction is therefore"
                            (the output of
                                (a Format-Equation with (input ((the net-ionic-equation of Self))))))
                        "The net ionic equation of a reaction is the complete ionic equation with ions that appear in both reactants and products omitted"
                        (:triple Self complete-ionic-equation *))


               (comment [Reaction-oxidation-state-changes-1]
                        (if ((the oxidation-state-changes of Self) = "yes") then
                            "Therefore, the reaction causes a change in oxidation state" else
                            "Therefore, the reaction causes no change in oxidation state")
                        (if ((the oxidation-state-changes of Self) = "no") then
                            "None of the elements in this reaction undergo a change in oxidation state"
                            else
                            (:seq "In the reactants, the oxidation state(s) of the element"
                                (the text-gen of
                                    (an instance of
                                        (the2 of
                                            (oneof
                                                (the value of
                                                    (the oxidation-state of
                                                        (the has-basic-structural-unit of (the result of Self))))
                                                where
                                                (oneof2
                                                    (the value of
                                                        (the oxidation-state of
                                                            (the has-basic-structural-unit of (the raw-material of Self))))
                                                    where
                                                    (((the2 of It2) = (the2 of It)) and
                                                     ((the1 of It2) /= (the1 of It))))))))
                                "is/are" "(" "nospace"
                                (forall ?ox1 in
                                    (the value of
                                        (the oxidation-state of
                                            (the has-basic-structural-unit of (the raw-material of Self))))
                                    where
                                    ((the2 of ?ox1) =
                                     (the2 of
                                         (oneof ?ox2 in
                                             (the value of
                                                 (the oxidation-state of
                                                     (the has-basic-structural-unit of (the result of Self))))
                                             where
                                             (oneof ?ox3 in
                                                 (the value of
                                                     (the oxidation-state of
                                                         (the has-basic-structural-unit of (the raw-material of Self))))
                                                 where
                                                 (((the2 of ?ox3) = (the2 of ?ox2)) and
                                                  ((the1 of ?ox3) /= (the1 of ?ox2)))))))
                                    (the1 of ?ox1))
                                "nospace" ")." "In the product, the oxidation state(s) is/are" "(" "nospace"
                                (forall ?ox1 in
                                    (the value of
                                        (the oxidation-state of
                                            (the has-basic-structural-unit of (the result of Self))))
                                    where
                                    ((the2 of ?ox1) =
                                     (the2 of
                                         (oneof ?ox2 in
                                             (the value of
                                                 (the oxidation-state of
                                                     (the has-basic-structural-unit of (the result of Self))))
                                             where
                                             (oneof ?ox3 in
                                                 (the value of
                                                     (the oxidation-state of
                                                         (the has-basic-structural-unit of (the raw-material of Self))))
                                                 where
                                                 (((the2 of ?ox3) = (the2 of ?ox2)) and
                                                  ((the1 of ?ox3) /= (the1 of ?ox2)))))))
                                    (the1 of ?ox1))
                                "nospace" ")")))


               (comment [Reaction-Result-quantity-1]
                        (:seq "Therefore, the quantity of" (the text-gen of Self) "="
                            (the1 of (the value of (the quantity of Self)))
                            (the2 of (the value of (the quantity of Self))))
                        "The quantity of the product of a reaction can be computed from its coefficient in the balanced equation and the quantity and coefficient of some other product or reactant in the reaction"
                        (:set
                            (:triple (a Compute-Balanced-Equation with (input ((the result-of of Self))))
                                output *)
                            (:triple
                                (a Compute-Quantity-from-Reaction with
                                    (input
                                        ((allof
                                             (:set (the raw-material of (the result-of of Self))
                                                 (the result of (the result-of of Self)))
                                             where (It /= Self))
                                         (the coefficient of Self))))
                                output *)))


               (comment [Release-del-1]
                        (:seq (the object of Self) " is no longer confined in " (the base of Self))
                        "A release stops something from being confined in something else.")


               (comment [Release-del-2]
                        (:seq (the object of Self) " is no longer confined in " (the base of Self))
                        "A release stops something from being confined in something else.")


               (comment [Release-pcs-1]
                        (:seq (the object of Self) " must be confined in " (the base of Self))
                        "Something must be confined before it can be released.")


               (comment [Release-Resource-add-1]
                        (:seq (the base of Self) " now can access " (the object of Self))
                        "Something that is made available can be accessed.")


               (comment [Release-Resource-add-2]
                        (:seq (the object of Self) " is now available.")
                        "Something that is released is available.")


               (comment [Release-Resource-add-3]
                        (:seq (the agent of Self) " made " (the object of Self) " available.")
                        "A thing can make something else available.")


               (comment [Remove-del-1]
                        (:seq (the object of Self) " is no longer part of " (the base of Self))
                        "A remove stops something from being a part of something else.")


               (comment [Remove-pcs-1]
                        (:seq (the object of Self) " must be part of " (the base of Self))
                        "Only parts of something can be removed from it.")


               (comment [Repair-del-1] (:seq (the object of Self) " is no longer broken.")
                        "A repair stops something from being broken.")


               (comment [Repair-pcs-1]
                        (:seq (the object of Self) " must be broken to be repaired.")
                        "Only broken objects need repair.")


               (comment [Repair-pcs-2] (:seq (the object of Self) " must not be ruined.")
                        "Ruined objects cannot be repaired.")


               (comment [Retain-pcs-1]
                        (:seq (the agent of Self) " must be in control of " (the object of Self))
                        "Retain cannot happen unless the agent controls the object.")


               (comment [Ruin-add-1] (:seq (the object of Self) " is ruined.")
                        "A ruin causes a Tangible-Entity to be ruined.")


               (comment [Salt-Substance-instance-of-1]
                        (:seq (the text-gen of Self) "is made up of"
                            (the text-gen of
                                (the Anion has-part of (the has-basic-structural-unit of Self)))
                            "and"
                            (the text-gen of
                                (the Cation has-part of (the has-basic-structural-unit of Self)))
                            "nospace" ", and is therefore a salt")
                        "A chemical is a salt if it is made up of a cation that comes from a base and an anion that comes from an acid")


               (comment [Salt-Substance-state-1]
                        (:seq (the text-gen of Self) "is made up of the metal"
                            (the text-gen of
                                (the Cation has-part of (the has-basic-structural-unit of Self)))
                            "and the nonmetal"
                            (the text-gen of
                                (the Anion has-part of (the has-basic-structural-unit of Self)))
                            "and is therefore a solid at room temperature")
                        "Ionic compounds made of a metal and a nonmetal are solids at room temperature")


               (comment [Shut-Out-add-1]
                        (:seq (the object of Self) " is now shut out of " (the base of Self))
                        "A shut out causes a Tangible-Entity to be shut out of another Tangible-Entity.")


               (comment [Shut-Out-add-2]
                        (:seq (the base of Self) " now shuts out " (the object of Self))
                        "A shut out causes a Tangible-Entity to be shut out of another Tangible-Entity.")


               (comment [Shut-Out-ncs-1]
                        (:seq (the object of Self) " cannot be inside something.")
                        "A Tangible-Entity cannot be shut out of another Tangible-Entity if it is already inside of it.")


               (comment [Sit-Down-add-1] (:seq (the agent of Self) " is now sitting")
                        "A Sit-Down causes an Entity to be sitting.")


               (comment [Sit-Down-del-1] (:seq (the agent of Self) " is no longer standing")
                        "If an Entity is standing, a Sit-Down stops the Entity from standing.")


               (comment [Sit-Down-pcs-1]
                        (:seq (the agent of Self) " must not be sitting already.")
                        "Something cannot sit down if it is already sitting.")


               (comment [Solute-instance-of-1]
                        (:seq "Therefore," (the text-gen of Self) "is not a precipitate")
                        "By definition, the result of a reaction is a precipitate if it is insoluble in water"
                        (:triple Self solubility *))


               (comment [Solution-pH-1]
                        (:seq "The pH of" (the text-gen of Self) "is therefore"
                            (the1 of (the value of (the pH of Self))))
                        "The pH of a chemical depends on the concentration of H+"
                        (:triple (a Compute-pH-for-Solution with (input (Self))) output *))


               (comment [Solution-volume-1]
                        (:seq "The volume of" (the text-gen of Self) "is therefore"
                            (the1 of (the value of (the volume of Self)))
                            (the2 of (the value of (the volume of Self))))
                        "The volume of a solution can be computed from the quantity and concentration of its solute"
                        (:triple
                            (a Compute-Volume-from-Concentration-and-Quantity with
                                (input
                                    ((the quantity of (the first of (the base of Self)))
                                     (the concentration of (the first of (the base of Self))))))
                            output *))


               (comment [Spill-defeated-by-1]
                        "The bicarbonate or carbonate salt is added until the fizzing due to formation of CO2 stops"
                        "Both NaHCO3 and Na2CO3 are used as acid neutralizers in acid spills")


               (comment [Stand-Up-add-1] (:seq (the agent of Self) " is now standing")
                        "A Stand-Up causes an Entity to be standing.")


               (comment [Stand-Up-del-1] (:seq (the agent of Self) " is no longer sitting")
                        "If an Entity is sitting, a Stand-Up stops the Entity from sitting.")


               (comment [Stand-Up-pcs-1]
                        (:seq (the agent of Self) " must not be standing already.")
                        "Something cannot stand up if it is already standing.")


               (comment [Store-add-1]
                        (:seq (the base of Self) " now contains " (the object of Self))
                        "A store causes an Entity to be stored inside a Tangible-Entity.")


               (comment [Store-add-2]
                        (:seq (the object of Self) " is now stored in " (the base of Self))
                        "A store causes an Entity to be stored inside a Tangible-Entity.")


               (comment [Store-add-3]
                        (:seq (the base of Self) " now has " (the object of Self)
                            " stored inside it.")
                        "A store causes an Entity to be stored inside a Tangible-Entity.")


               (comment [Store-pcs-1]
                        (:seq (the object of Self) " must not be stored already.")
                        "Something cannot be stored more than once.")


               (comment [Strong-Electrolyte-quantity-of-Anion-Substance-has-part-1]
                        (:seq "The quantity of" (the Anion has-part of Self)
                            "in the strong electrolyte" Self "is"
                            (the subscript of (the Anion has-part of Self)) "*"
                            (the1 of (the value of (the quantity of Self)))
                            (the2 of (the value of (the quantity of Self))) "="
                            (the1 of (the value of (the quantity of (the Anion has-part of Self))))
                            (the2 of (the value of (the quantity of (the Anion has-part of Self)))))
                        "To find the quantity of the Anion in a strong electrolyte, multiply the Anio
n subscript by the quantity of the electrolyte."
                        (:set (:triple (the Anion has-part of Self) subscript *)
                            (:triple (the quantity of Self) value *)))


               (comment [Strong-Electrolyte-quantity-of-Cation-Substance-has-part-1]
                        (:seq "The quantity of" (the Cation has-part of Self)
                            "in the strong electrolyte" Self "is"
                            (the subscript of (the Cation has-part of Self)) "*"
                            (the1 of (the value of (the quantity of Self)))
                            (the2 of (the value of (the quantity of Self))) "="
                            (the1 of (the value of (the quantity of (the Cation has-part of Self))))
                            (the2 of (the value of (the quantity of (the Cation has-part of Self)))))
                        "To find the quantity of the Cation in a strong electrolyte, multiply the Cat
ion subscript by the quantity of the electrolyte."
                        (:set (:triple (the Cation has-part of Self) subscript *)
                            (:triple (the quantity of Self) value *)))


               (comment [Support-add-1] (:seq (the object of Self) " is now supported.")
                        "A support causes the object to be supported.")


               (comment [Support-add-2]
                        (:seq (the instrument of Self) " is now used to support "
                            (the object of Self))
                        "A Tangible-Entity can be used to support the object.")


               (comment [Take-Apart-del-1]
                        (:seq (the object of Self) " no longer has "
                            (the has-part of (the object of Self)))
                        "A take-apart removes parts from something.")


               (comment [Take-Control-add-1]
                        (:seq (the agent of Self) " now controls " (the object of Self))
                        "The agent of a Take-Control is subsequently in control of the object.")


               (comment [Take-Control-add-2]
                        (:seq (the object of Self) " is now controlled by " (the agent of Self))
                        "If something takes control of X, X is now controlled.")


               (comment [Take-Control-del-1]
                        (:seq (the object of Self) " is no longer controlled by someone else.")
                        "An object taken control of is no longer controlled by someone else.")


               (comment [Take-Control-del-2]
                        (:seq "The original controller no longer controls" (the object of Self))
                        "An object taken control of is no longer controlled by someone else.")


               (comment [Tap-Water-base-1] ""
                        "Tap water contains fluoride.  Fluoride is added to water by introducing hydrofluosilicic acid (H2SiF6) in very small parts, resulting in a very dilute
acid with concentration 1.0e-13 molar. The source for this information is:
   http://www.geocities.com/CapeCanaveral/3000/fluoride.htm
   http://www.npwa.freeserve.co.uk/cooking_the_books.html"
                        NIL)


               (comment [Transfer-add-1]
                        (:seq (the recipient of Self) " now possesses " (the object of Self))
                        "A transfer moves possessions from the donor to the recipient.")


               (comment [Transfer-del-1]
                        (:seq (the donor of Self) " no longer possesses " (the object of Self))
                        "A transfer moves possessions from the donor to the recipient.")


               (comment [Transfer-pcs-1]
                        (:seq (the donor of Self) " must possess " (the object of Self))
                        "The donor must have the object to transfer it.")


               (comment [Unblock-del-1] (:seq (the object of Self) " is no longer blocked.")
                        "An unblock stops something from being blocked.")


               (comment [Unblock-del-2]
                        (:seq (the instrument of Self) " is no longer being used to block "
                            (the object of Self))
                        "An unblock stops something from being used to block something else.")


               (comment [Unblock-pcs-1]
                        (:seq (the object of Self) " must be blocked to be unblocked.")
                        "Only a blocked object can be unblocked.")


               (comment [Unobstruct-del-1]
                        (:seq (the object of Self) " is no longer obstructed.")
                        "An unobstruct removes an obstruction from something.")


               (comment [Unrestrain-del-1]
                        (:seq (the object of Self) " is no longer restrained.")
                        "An unrestrain removes restraints on something.")


               (comment [Withdraw-del-2]
                        (:seq (the object of Self) " is no longer stored in " (the base of Self))
                        "When something is withdrawn from a container, it is no longer stored in the container.")


               (comment [Withdraw-del-3]
                        (:seq (the object of Self) " is no longer stored in " (the base of Self))
                        "When something is withdrawn from a container, it is no longer stored in the container.")


               ))))
(Zr has 
    (superclasses (Metal-Atom
                      IVB-Element)))

(every Zr has 
    (atomic-symbol ((Zr)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 40 ()))))))
    (chemical-period (5)))
(Zn-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Zn-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("zinc"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Zn))))))))
(Zn has 
    (superclasses (Metal-Atom
                      IIB-Element)))

(every Zn has 
    (atomic-symbol ((Zn)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 30 ()))))))
    (chemical-period (4)))
(Yes-No-Viewpoint has 
    (superclasses (Viewpoint)))

(every Yes-No-Viewpoint has 
    (viewpoint-question (((?vaqtrips == (the elements of (the2 of (allof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and (((the3 of It) = *yes) or ((the3 of It) = *no))))))) and (?vaqprtrips == (allof ?trip in ?vaqtrips where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = value) or ((the2 of ?trip) = value-of) or ((the2 of ?trip) = instance-of)))) and (?numtrips == (the number of (allof ?trip in ?vaqprtrips where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of))))) and (if (has-value ?vaqprtrips) then (make-phrase (:seq "Is it true that" (forall ?trip in ?vaqprtrips where ((the2 of ?trip) = instance-of) ((?fr == (the1 of ?trip)) and (?fclass == (the3 of ?trip)) and (:seq (if (?numtrips > 1) then "<li>") (the text-def-head of ?fr) "is" (the text-indef-head of (an instance of ?fclass)) (if (?numtrips > 1) then "</li>
")))) (forall ?trip in ?vaqprtrips where ((the2 of ?trip) isa Relation) ((?fr == (the1 of ?trip)) and (?sl == (the2 of ?trip)) and (?val == (the3 of ?trip)) and (:seq (if (?numtrips > 1) then "<li>") (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (the text-def-head of ?val) (if (?numtrips > 1) then "</li>
")))) (forall ?trip in ?vaqprtrips where ((the2 of ?trip) isa Property) ((?fr == (if ((the1 of ?trip) isa Property-Value) then (the3 of ?trip) else (the1 of ?trip))) and (?pr == (if ((the1 of ?trip) isa Property-Value) then (the inverse of (the2 of ?trip)) else (the2 of ?trip))) and (?pv == (if ((the1 of ?trip) isa Property-Value) then (the1 of ?trip) else (the3 of ?trip))) and (?valtrip == (oneof ?tr in ?vaqprtrips where ((((the1 of ?tr) = ?pv) and ((the2 of ?tr) = value)) or (((the3 of ?tr) = ?pv) and ((the2 of ?tr) = value-of))))) and (?vpair == (if ((the1 of ?valtrip) = ?pv) then (the3 of ?valtrip) else (the1 of ?valtrip))) and (:seq (if (?numtrips > 1) then "<li>") (if (has-value ?vpair) then (:seq "the" ?pr "of" (the text-def-head of ?fr) (if ((the1 of ?vpair) isa Constant) then (:seq "is" (the1 of ?vpair))) (if ((the1 of ?vpair) isa Number) then (:seq "=" (the1 of ?vpair) (if ((the2 of ?vpair) /= *unity) then (the2 of ?vpair))))) else (:seq (the text-def-head of ?fr) "has some" ?pr)) (if (?numtrips > 1) then "</li>
") "<br>
")))))))))
    (viewpoint-answer (((?vtrueall == (the elements of (the2 of (oneof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and ((the3 of It) = *yes)))))) and (?vfalseall == (the elements of (the2 of (oneof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and ((the3 of It) = *no)))))) and (?vtrue == (allof ?trip in ?vtrueall where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of)))) and (?vfalse == (allof ?trip in ?vfalseall where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of)))) and (?vfval == (allof ?trip in ?vfalseall where (((the2 of ?trip) = value) or ((the2 of ?trip) = value-of)))) and (make-phrase (:seq (if ((has-value ?vfalse) and (has-value ?vtrue)) then "No.<br><br>
While it is true that" else (if (has-value ?vfalse) then "No.
" else (if (has-value ?vtrue) then "Yes.<br><br>
It is true that" else "No.<br>
"))) (if (has-value ?vtrue) then (:seq (forall ?truetrip in ?vtrue where ((the2 of ?truetrip) = instance-of) ((?fr == (the1 of ?truetrip)) and (?fclass == (the3 of ?truetrip)) and (:seq (if ((the number of ?vtrue) > 1) then "<li>") (the text-def-head of ?fr) "is" (the text-indef-head of (an instance of ?fclass)) (if ((the number of ?vtrue) > 1) then "</li>
")))) (forall ?truetrip in ?vtrue where ((the2 of ?truetrip) isa Relation) ((?fr == (the1 of ?truetrip)) and (?sl == (the2 of ?truetrip)) and (?val == (the3 of ?truetrip)) and (:seq (if ((the number of ?vtrue) > 1) then "<li>") (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (the text-def-head of ?val) (if ((the number of ?vtrue) > 1) then "</li>
")))) (forall ?truetrip in ?vtrue where ((the2 of ?truetrip) isa Property) ((?fr == (if ((the1 of ?truetrip) isa Property-Value) then (the3 of ?truetrip) else (the1 of ?truetrip))) and (?pr == (if ((the1 of ?truetrip) isa Property-Value) then (the inverse of (the2 of ?truetrip)) else (the2 of ?truetrip))) and (:seq (if ((the number of ?vtrue) > 1) then "<li>") (the text-description of (the ?pr of ?fr)) (if ((the number of ?vtrue) > 1) then "</li>
")))))) (if (has-value ?vfalse) then (:seq "<br><br>
It is not true that" (forall ?falsetrip in ?vfalse where ((the2 of ?falsetrip) = instance-of) ((?fr == (the1 of ?falsetrip)) and (?fclass == (the3 of ?falsetrip)) and (:seq (if ((the number of ?vfalse) > 1) then "<li>") (the text-def-head of ?fr) "is" (the text-indef-head of (an instance of ?fclass)) (if ((the number of ?vfalse) > 1) then "</li>
")))) (forall ?falsetrip in ?vfalse where ((the2 of ?falsetrip) isa Relation) ((?fr == (the1 of ?falsetrip)) and (?sl == (the2 of ?falsetrip)) and (?val == (the3 of ?falsetrip)) and (:seq (if ((the number of ?vfalse) > 1) then "<li>") (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (the text-def-head of ?val) (if ((the number of ?vfalse) > 1) then "</li>
")))) (forall ?falsetrip in ?vfalse where ((the2 of ?falsetrip) isa Property) ((?fr == (if ((the1 of ?falsetrip) isa Property-Value) then (the3 of ?falsetrip) else (the1 of ?falsetrip))) and (?pr == (if ((the1 of ?falsetrip) isa Property-Value) then (the inverse of (the2 of ?falsetrip)) else (the2 of ?falsetrip))) and (?pv == (if ((the1 of ?falsetrip) isa Property-Value) then (the1 of ?falsetrip) else (the3 of ?falsetrip))) and (?valtrip == (oneof ?tr in ?vfval where ((((the1 of ?tr) = ?pv) and ((the2 of ?tr) = value)) or (((the3 of ?tr) = ?pv) and ((the2 of ?tr) = value-of))))) and (?vpair == (if ((the1 of ?valtrip) = ?pv) then (the3 of ?valtrip) else (the1 of ?valtrip))) and (:seq (if ((the number of ?vfalse) > 1) then "<li>") (if (has-value ?vpair) then (:seq "the" ?pr "of" (the text-def-head of ?fr) (if ((the1 of ?vpair) isa Constant) then (:seq "is" (the1 of ?vpair))) (if ((the1 of ?vpair) isa Number) then (:seq "=" (the1 of ?vpair) (if ((the2 of ?vpair) /= *unity) then (the2 of ?vpair))))) else (:seq (the text-def-head of ?fr) "has some" ?pr)) (if ((the number of ?vfalse) > 1) then "</li>
")))))))))))
    (viewpoint-detail (((?vaqtrips == (the elements of (the2 of (allof (the elements of (the viewpoint-answerable-query of Self)) where (((the1 of It) = *yes-no-question) and (((the3 of It) = *yes) or ((the3 of It) = *no))))))) and (?vaqprtrips == (allof ?trip in ?vaqtrips where (((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property) or ((the2 of ?trip) = instance-of)))) and (?vaqjustifs == (forall ?trip in ?vaqptrips (get-justification (:triple (the1 of ?trip) (the2 of ?trip) *)))) and (forall ?justif in ?vaqjustifs (:seq "<li>" ?justif "</li>
"))))))
(Y has 
    (superclasses (Metal-Atom
                      IIIB-Element)))

(every Y has 
    (atomic-symbol ((Y)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 39 ()))))))
    (chemical-period (5)))
(Xe has 
    (superclasses (Non-Metal-Atom
                      Noble-Gas-Element)))

(every Xe has 
    (atomic-symbol ((Xe)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 54 ()))))))
    (chemical-period (5)))
(Write has 
    (superclasses (Express))
    (description ("encode information into a document in a language (to be embodied as symbols)"))
    (wn20-synset ((:set (:triple "write" 2 "v") (:triple "write" 1 "v") (:triple "compose" 3 "v") (:triple "pen" 1 "v") (:triple "indite" 1 "v")))))

(every Write has 
    (result ((a Document)))
    (text-nominalization ("writing")))
(Worth-Value has 
    (range-of (worth))
    (domain-of (worth-of))
    (superclasses (Property-Value))
    (test-case ('((new-situation) (*BomberOfStoneIPA has (instance-of (Tangible-Entity))) (*Bubba has (instance-of (Tangible-Entity))) (*GrapevineMarket has (instance-of (Tangible-Entity))) (a Buy with (agent (*Bubba)) (donor (*GrapevineMarket)) (object (*BomberOfStoneIPA)) (instrument ((a Money with (worth ((a Worth-Value with (value ((:pair 3.99 *usdollar) (:pair *cheap Tangible-Entity)))))))))) (do-and-next (thelast Buy)) ((the possesses of *Bubba) includes (*BomberOfStoneIPA)) (*MyCar has (instance-of (Tangible-Entity))) (Camel has (superclasses (Tangible-Entity))) (*MyCar has (worth ((the worth of (a Aggregate with (element ((exactly 10 Camel))))))))))))
(Worth-Scale has 
    (scale-class-of (worth))
    (superclasses (Scale)))
(Worth-Constant has 
    (scalar-constant-class-of (worth))
    (superclasses (Constant))
    )
(Workgroup has 
                          
    (superclasses (Team)))
(Wood has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "wood" 1 "n")))))
(Withdraw has 
    (defeated-by-class-of (Be-Stored))
    (superclasses (Move-Out-Of))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "the thing being withdrawn")
                          (:seq base "the thing withdrawed from")
                          (:seq agent "the agent")
                          (:seq instrument "the instrument used")))
    (wn16-synset ((:set (:triple "withdraw" 9 "v") (:triple "draw" 14 "v") (:triple "take_out" 2 "v") (:triple "take_out" 6 "v") (:triple "take_out" 8 "v") (:triple "unpack" 1 "v"))))
    (wn20-synset ((:set (:triple "withdraw" 10 "v") (:triple "draw" 13 "v") (:triple "take_out" 2 "v") (:triple "take_out" 6 "v") (:triple "take_out" 8 "v") (:triple "unpack" 1 "v")))))

(every Withdraw has 
    (object ((a Entity)))
    (base ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
    (agent ((must-be-a Entity)))
    (instrument ((must-be-a Entity)))
    (defeats ((allof (the object-of of (the base of Self)) where (((the classes of It) = Be-Stored) and ((the object of It) includes (the object of Self))))))
    (soft-pcs-list ((:triple (the base of Self) object-of (a Be-Accessible))
                    (if (has-value (the agent of Self)) then (:triple (the base of Self) object (mustnt-be-a Be-Inaccessible with (base ((the agent of Self))))))
                    (:triple (the base of Self) encloses (the object of Self))))
    (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Withdraw-del-2]) (:triple It base (the base of Self) [Withdraw-del-3])))))
    (preparatory-event ((:default (a Store with (object ((the object of Self)))) (a Open with (base ((the base of Self))) (agent ((the agent of Self)))))))
    (text-active-verbseq-sg ("withdraws"))
    (text-active-verbseq-pl ("withdraw"))
    (text-passive-verbseq-sg ("gets withdrawn"))
    (text-passive-verbseq-pl ("get withdrawn"))
    (text-base ((if (has-value (the base of Self)) then ("from"))))
    (text-nominalization ("withdrawal")))
(Width-Scale has 
                                  
    (scale-class-of (width))
    (superclasses (Scale)))
(Width-Constant has 
    (element-type-of (*narrow-wide-scale))
    (scalar-constant-class-of (width))
    (superclasses (Constant))
    )
(Widen has 
    (superclasses (Increase))
    (test-case ('((*myroad has (instance-of (Physical-Object)) (width (*myroadwidth))) (*myroadwidth has (instance-of (Length-Value)) (value ((:pair 30 *foot)))) (a Increase with (object (*myroad)) (property-slot (width))) ((thelast Increase) isa Widen) (do-and-next (thelast Widen)) ((the greater-than of (the width of *myroad)) includes *myroadwidth))))
    (wn20-synset ((:set (:triple "widen" 1 "v") (:triple "widen" 3 "v")))))

(every Widen has 
    (text-nominalization ("widening")))

(every Widen has-definition 
    (instance-of (Increase))
    (property-slot ((width))))
(Wetness-Value has 
    (range-of (wetness))
    (domain-of (wetness-of))
    (superclasses (Property-Value))
    (test-case ('((Towel has (superclasses (Physical-Object))) (Bone has (superclasses (Physical-Object))) (*wettowel has (instance-of (Towel)) (wetness ((a Wetness-Value)))) (*freshtowel has (instance-of (Towel)) (wetness ((a Wetness-Value with (value ((:pair *dry Towel) (:pair *wet Bone))) (less-than ((the wetness of *wettowel))))))) (the value of (the wetness of *freshtowel)) ((the less-than of (the wetness of *freshtowel)) includes (the wetness of *wettowel)) ((the greater-than of (the wetness of *wettowel)) includes (the wetness of *freshtowel))))))
(Wetness-Scale has 
                              
    (scale-class-of (wetness))
    (superclasses (Scale)))
(Wetness-Constant has 
    (element-type-of (*dry-wet-scale))
    (scalar-constant-class-of (wetness))
    (superclasses (Constant))
    )
(Wet has 
    (superclasses (Increase))
    (test-case ('((*mytowel has (instance-of (Physical-Object)) (wetness (*mytowelwetness))) (*mytowelwetness has (instance-of (Wetness-Value)) (value ((:pair *dry Physical-Object)))) (a Increase with (object (*mytowel)) (property-slot (wetness))) ((thelast Increase) isa Wet) (do-and-next (thelast Wet)) ((the greater-than of (the wetness of *mytowel)) includes *mytowelwetness))))
    (wn20-synset ((:set (:triple "wet" 1 "v")))))

(every Wet has 
    (text-nominalization ("wetting")))

(every Wet has-definition 
    (instance-of (Increase))
    (property-slot ((wetness))))
(Weapon has 
    (superclasses (Role)))

(every Weapon has 
    (in-event ((must-be-a Military-Task)))
    (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self)))))))
(Weak-Electrolyte-Solute-Species has 
    (superclasses (Solute-Species-Entity)))

(every Weak-Electrolyte-Solute-Species has-definition 
    (instance-of (Solute-Species-Entity))
    (is-part-of ((a Weak-Electrolyte-Entity))))
(Weak-Electrolyte-Entity has 
    (superclasses (Electrolyte-Entity)))

(every Weak-Electrolyte-Entity has-definition 
    (instance-of (Ionic-Compound))
    (is-basic-structural-unit-of ((a Weak-Electrolyte))))
(Weak-Electrolyte has 
    (superclasses (Electrolyte)))

(every Weak-Electrolyte has 
    (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a Cation) (a Anion)))))))

(every Weak-Electrolyte has-definition 
    (instance-of (Ionic-Compound-Substance))
    (electrolyte-status ((a Electrolyte-Status-Value with (value ((:pair *weak nil)))))))
(Water-Solution has 
                        
    (superclasses (Chemical-Solution))
    (description ("A solution in which water is the solvent for dissolved
                        particles. Souther.")))

(every Water-Solution has 
    (material ((a Water)
               (a Substance)
               (at-least 2 Substance))))
(Water-Molecule has 
    (superclasses (Inorganic-Molecule))
    (description ("Molecule made up of two hydrogen atoms each covalently
                        bonded to the same oxygen atom.  Souther.")))

(every Water-Molecule has 
    (has-part ((a Hydrogen-Atom called "one hydrogen")
               (a Hydrogen-Atom called "the other hydrogen")
               (a Oxygen-Atom with (object-of ((a Be-Attached-To with (object (((the Hydrogen-Atom has-part of Self) called "one hydrogen"))) (instrument ((a Covalent-OH-Bond)))) (a Be-Attached-To with (object (((the Hydrogen-Atom has-part of Self) called "the other hydrogen"))) (instrument ((a Covalent-OH-Bond))))))))))
(Water has 
    (superclasses (Liquid-Substance))
    (wn20-synset ((:set (:triple "water" 1 "n")))))
(Wall has 
    (superclasses (Architectural-Structure))
    (description ("a vertical architectural structure that acts as a barrier"))
    (wn20-synset ((:set (:triple "wall" 1 "n") (:triple "wall" 4 "n")))))

(every Wall has 
    (orientation ((a Angle-Value with (value ((:pair *vertical Entity))))))
    (plays ((a Barrier))))
(Walk has 
    (description ("A type of Locomotion in which an agent, typically an Animal, uses at least two legs to move."))
    (superclasses (Locomotion))
    (wn20-synset ((:set (:triple "walk" 1 "v") (:triple "walk" 2 "v")))))

(every Walk has 
    (agent ((:default (a Animal))))
    (text-active-verbseq-sg ("walks"))
    (text-active-verbseq-pl ("walk"))
    (text-nominalization ("walk")))
(W has 
    (superclasses (Metal-Atom
                      VIB-Element)))

(every W has 
    (atomic-symbol ((W)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 74 ()))))))
    (chemical-period (6)))
(Volume-Value has 
    (range-of (volume))
    (domain-of (volume-of))
    (superclasses (Property-Value))
    (test-case ('((Drink has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (volume ((a Volume-Value)))) (*mybeer has (instance-of (Drink)) (volume ((a Volume-Value with (value ((:pair 0.5 *liter) (:pair *small Drink))) (less-than ((the volume of *mycoffee))))))) (the value of (the volume of *mybeer)) ((the less-than of (the volume of *mybeer)) includes (the volume of *mycoffee)) ((the greater-than of (the volume of *mycoffee)) includes (the volume of *mybeer))))))
(Volume-Scale has 
                                  
    (scale-class-of (volume))
    (superclasses (Scale)))
(Volume-Constant has 
    (element-type-of (*small-large-scale))
    (scalar-constant-class-of (volume))
    (superclasses (Constant))
    )
(Voltage-Value has 
    (range-of (voltage))
    (domain-of (voltage-of))
    (superclasses (Property-Value)))
(Voltage-Constant has 
    (scalar-constant-class-of (voltage))
    (superclasses (Constant)))
(VOCl-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every VOCl-Substance has 
    (has-basic-structural-unit ((a VOCl))))
(VOCl has 
    (superclasses (Molecular-Compound)))

(every VOCl has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 V) (:pair 1 O) (:pair 1 Cl))))))))
(Virus-Invades-Cell has 
    (superclasses (Action))
    (test-case ('((*cell has (instance-of (Cell)) (has-part (*cytoplasm *plasma-membrane))) (*plasma-membrane has (instance-of (Plasma-Membrane))) (*virus has (instance-of (Virus)) (has-part (*protein-coat *viral-nucleic-acid))) (*cytoplasm has (instance-of (Cytoplasm))) (*protein-coat has (instance-of (Protein-Coat))) (*viral-nucleic-acid has (instance-of (Viral-Nucleic-Acid))) (*invade-scenario has (instance-of (Virus-Invades-Cell)) (agent (*virus)) (object (*cell))) (do-script *invade-scenario) ((the plays of (the has-region of *plasma-membrane)) isa Portal) ((the has-region of *plasma-membrane) = (the path of ((the Penetrate subevent of *invade-scenario) called "PenetrateCell")))))))

(every Virus-Invades-Cell has 
    (agent ((a Virus)))
    (object ((a Cell)))
    (first-subevent ((a Attach called "AdhereToCell" with (object ((the Virus agent of Self))) (base ((the Cell object of Self))) (next-event (((the Penetrate subevent of Self) called "PenetrateCell"))))))
    (subevent ((a Penetrate called "PenetrateCell" with (agent ((the Virus agent of Self))) (object ((the Plasma-Membrane has-part of (the Cell object of Self)))) (next-event (((the Release subevent of Self) called "Uncoat"))))
               (a Release called "Uncoat" with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (base ((the Protein-Coat has-part of (the Virus agent of Self)))) (next-event (((the Move subevent of Self) called "MoveIntoCytoplasm"))))
               (a Move called "MoveIntoCytoplasm" with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (destination ((the Cytoplasm has-part of (the Cell object of Self))))))))
(Virus has 
                          
    (superclasses (Living-Entity))
    (member-of (_Partition6))
    (description ("Infectious particle consisting of nucleic acid (RNA or
                         DNA) enclosed in a protein coat; replicates by 
                         parasitizing the reproductive machinery of a host
                         cell, from which new virus particles ar released to 
                         infect other cells.  Often the cause of disease.
                         (Alberts:ECB:G-18.)")))

(every Virus has 
    (has-part ((a Protein-Coat)
               (a Viral-Nucleic-Acid with (is-inside ((the Protein-Coat has-part of Self))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Viral-Nucleic-Acid has 
                          
    (superclasses (Nucleic-Acid))
    (description ("The hereditary material of a virus, either DNA or RNA.")))
(Viral-DNA has 
    (superclasses (Viral-Nucleic-Acid
                      DNA-Molecule))
    (description ("The DNA of a virus.  Souther. ")))

(every Viral-DNA has 
    (is-part-of ((a DNA-Virus))))
(VIIIB-Element has 
                                                                                                                                                                                                       
    (superclasses (Atom)))
(VIIB-Element has 
                                                                         
    (superclasses (Atom)))
(Viewpoint-Query-Type has 
    (superclasses (KM-Class))
    )
(Viewpoint has 
    (domain-of (viewpoint-answer-page
                   viewpoint-answer
                   viewpoint-answerable-query
                   viewpoint-correspondence
                   viewpoint-detail
                   viewpoint-eq-solver-info
                   viewpoint-filter
                   viewpoint-model-graph
                   viewpoint-multislot-type
                   viewpoint-parent
                   viewpoint-query
                   viewpoint-question
                   viewpoint-scenario
                   viewpoint-score
                   viewpoint-source
                   viewpoint-target))
    (range-of (viewpoint-answer-page-of
                  viewpoint-answer-of
                  viewpoint-answerable-query-of
                  viewpoint-correspondence-of
                  viewpoint-detail-of
                  viewpoint-eq-solver-info-of
                  viewpoint-filter-of
                  viewpoint-model-graph-of
                  viewpoint-multislot-type-of
                  viewpoint-child
                  viewpoint-query-of
                  viewpoint-question-of
                  viewpoint-scenario-of
                  viewpoint-score-of
                  viewpoint-source-of
                  viewpoint-target-of))
                                                                                                                                                                                                                                                                 
    (superclasses (KM-Class)))

(every Viewpoint has 
    (skolem-string ((#'(LAMBDA () (STRING-TRIM "()" (FORMAT () "~A" (KM0 'Self)))))))
    (viewpoint-eq-solver-info ((make-phrase (:seq (#'(LAMBDA () (EQ-SOLVER-INFO-OUTPUT 'Self)))))))
    (viewpoint-answer-page ((make-phrase (:seq "<html><body>
<h3>Question</h3>
" (the viewpoint-question of Self) "
<h3>Answer</h3>
" (the viewpoint-answer of Self) (if ((has-value (the viewpoint-detail of Self)) and ((the viewpoint-detail of Self) /= "")) then "
<h3>Explanation</h3>
") (the viewpoint-detail of Self) (if (has-value (the1 of (the viewpoint-target of (the viewpoint-parent of Self)))) then (:seq "<br><br>More info on" (forall ?vp-parent in (the (viewpoint-parent *) of Self) where (has-value (the viewpoint-target of ?vp-parent)) (:seq "<li>" "nospace" "<a href=#" "nospace" (the skolem-string of ?vp-parent) "nospace" ">" (the1 of (the viewpoint-target of ?vp-parent)) "nospace" "...</a></li>")) "<hr><a name=" "nospace" (the skolem-string of (the viewpoint-parent of Self)) "nospace" ">
" "<b><i>" "nospace" (the1 of (the viewpoint-target of (the viewpoint-parent of Self))) "nospace" "</i></b><br><br>
" (the viewpoint-answer-page of (the viewpoint-parent of Self)) "<br><br>")) "
</body></html>
")))))
(View has 
    (superclasses (Aggregate))
    (test-case ('((*myWallet has (instance-of (Physical-Object)) (is-possessed-by (*myWife)) (content (*myDough)) (material (*fakeLeather)) (color ((a Color-Value with (value (*red))))) (is-inside (*myPants))) (*myWife has (instance-of (Physical-Object))) (*myDough has (instance-of (Physical-Object))) (*fakeLeather has (instance-of (Substance))) (*myPants has (instance-of (Physical-Object))) (*myWallet has (viewed-as ((a View called "Spatial View" with (element ((the content of View) (the material of View) (the is-inside of View))))))) (not ((the element of ((the viewed-as of *myWallet) called "Spatial View")) includes *myWife)))))
    (wn20-synset ((:set (:triple "position" 3 "n") (:triple "view" 1 "n") (:triple "perspective" 1 "n")))))
(VIB-Element has 
                                                                        
    (superclasses (Atom)))
(VIA-Element has 
                                                                                         
    (superclasses (Atom)))
(Vesicle has 
    (superclasses (Subcellular-Compartment
                      Organelle))
    (description ("Small, membrane-bounded, spherical organelle in the
                        cytoplasm of a eucaryotic cell. Alberts:ECB:G-18.")))
(Version has 
    (superclasses (KM-Class))
    (description ("Thu Sep 14 15:37:18 CDT 2006")))
(Velocity-Value has 
    (range-of (velocity))
    (domain-of (velocity-of))
    (superclasses (Property-Value))
    (doc-file ("velocity")))

(every Velocity-Value has 
    (primary-slot ((velocity))))
(Velocity-Scale has 
    (scale-class-of (velocity))
    (superclasses (Scale)))
(Velocity-Constant has 
    (scalar-constant-class-of (velocity))
    (superclasses (Constant)))
(Vehicle has 
    (superclasses (Role))
    (description ("The object or medium which transports the object moved
                       during a move event."))
    (wn20-synset ((:set (:triple "vehicle" 1 "n"))
                  (:set (:triple "vehicle" 3 "n"))
                  (:set (:triple "fomite" 1 "n")))))

(every Vehicle has 
    (in-event ((a Carry)))
    (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self)))))))
(VB-Element has 
                                                                        
    (superclasses (Atom)))
(Valine has 
    (superclasses (Essential-Amino-Acid
                      Nonpolar-Amino-Acid))
    (description ("A nonpolar amino acid with a propyl side chain.
                        Souther")))

(every Valine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Isopropyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-2")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Isopropyl-Group)))))))
(VA-Element has 
                                                                                         
    (superclasses (Atom)))
(V-Plus has 
    (superclasses (Metal-Cation)))

(every V-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("vanadium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 V))))))))
(V has 
    (superclasses (Metal-Atom
                      VB-Element)))

(every V has 
    (atomic-symbol ((V)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 23 ()))))))
    (chemical-period (4)))
(UUA has 
    (superclasses (Protein-Stop-Codon))
    (description ("A codon in mRNA which signals the termination point for
                        translation of a polypeptide.  Souther.")))

(every UUA has 
    (element-type ((Ribonucleotide)))
    (first-element (((the UMP element of Self) called "first")))
    (element ((a UMP called "first" with (next-element (((the UMP element of Self) called "second"))))
              (a UMP called "second" with (next-element (((the AMP element of Self) called "third"))))
              (a AMP called "third"))))
(UTP has 
    (superclasses (Ribonucleotide
                      Nucleoside-Triphosphate))
    (description ("Nucleoside triphosphate used in the synthesis of
                        RNA.  Souther.")))

(every UTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Uridine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Uridine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Uridine))))
(Use-of-Terrain has 
    (superclasses (Critique-Dimension)))
(Uridine has 
    (superclasses (Nucleoside))
    (description ("A nucleoside containing uracil that when joined
                          with a monophosphate group forms one of the four
                          nucleotides in RNA.  Souther.")))

(every Uridine has 
    (has-part ((a Uracil with (object-of ((a Be-Attached-To with (object ((the Ribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Ribose has-part of Self)) called "Carbon-1") ((the Nitrogen-Atom has-part of (the Uracil has-part of Self)) called "Nitrogen-1")))))))
               (a Ribose))))
(Uracil has 
    (superclasses (Pyrimidine))
    (description ("A pyrimidine base which combines with a ribose base to
                        form uridine.  Uridine triphosphates are one of the
                        building block monomers for RNA. Souther. ")))

(every Uracil has 
    (complement ((a Adenine)))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "N1-N1H" with (object (((the has-part of Self) uniquely-called "N1-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-C2O" with (object (((the has-part of Self) uniquely-called "C2-Oxygen"))) (instrument ((a Double-Covalent-CO-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To uniquely-called "N3-N3H" with (object (((the has-part of Self) uniquely-called "N3-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C4-C4O" with (object (((the has-part of Self) uniquely-called "C4-Oxygen"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Double-Covalent-CC-Bond)))))))
               (a Oxygen-Atom uniquely-called "C2-Oxygen")
               (a Oxygen-Atom uniquely-called "C4-Oxygen")
               (a Hydrogen-Atom uniquely-called "N1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N3-Hydrogen"))))
(UoM-Worth has 
    (cardinal-unit-class-of (worth))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Volume has 
    (cardinal-unit-class-of (volume))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Voltage has 
    (cardinal-unit-class-of (voltage))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Velocity has 
    (cardinal-unit-class-of (velocity))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Unitless has 
    (cardinal-unit-class-of (importance
                                priority
                                slope
                                agent-attrition-rate
                                available-force-ratio
                                combat-power-ratio
                                default-combat-power
                                enemy-attrition-rate
                                nuSketch-X-coordinate
                                nuSketch-Y-coordinate
                                relative-combat-power
                                remaining-strength
                                required-force-ratio
                                atomic-number
                                buffer-capacity
                                buffer-status
                                default-ka
                                default-kb
                                electrolyte-status
                                electronegativity
                                ka
                                kb
                                keq
                                ki
                                lewis-acid-strength
                                pH
                                pOH
                                pka
                                pkb
                                salt-status
                                solute-species))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Time has 
    (superclasses (Unit-of-Measurement))
    )
(UoM-Temperature has 
    (cardinal-unit-class-of (temperature))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Rotational-Rate has 
    (cardinal-unit-class-of (rotational-rate))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Rate has 
    (cardinal-unit-class-of (rate))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Quantity has 
    (cardinal-unit-class-of (quantity))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Power has 
    (cardinal-unit-class-of (power))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Momentum has 
    (cardinal-unit-class-of (momentum))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Moment-of-Inertia has 
    (cardinal-unit-class-of (moment-of-inertia))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Mass has 
    (cardinal-unit-class-of (mass
                                atomic-weight))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Luminous-Intensity has 
    (cardinal-unit-class-of (luminous-intensity))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Luminous-Flux has 
    (cardinal-unit-class-of (luminous-flux))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Luminance has 
    (cardinal-unit-class-of (luminance))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Length has 
    (cardinal-unit-class-of (circumference
                                depth
                                diameter
                                distance
                                height
                                length
                                perimeter
                                radius
                                thickness
                                width))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Frequency has 
    (cardinal-unit-class-of (frequency))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Energy has 
    (superclasses (Unit-of-Measurement))
                                                                
    (wn20-synset ((:set (:triple "calorie" 0 "n") (:triple "joule" 0 "n") (:triple "btu" 0 "n") (:triple "calories" 0 "n") (:triple "joules" 0 "n") (:triple "btus" 0 "n"))))
    (cardinal-unit-class-of (energy)))
(UoM-Electric-Resistance has 
    (superclasses (Unit-of-Measurement))
                    
    (wn20-synset ((:set (:triple "ohm" 0 "n") (:triple "ohms" 0 "n"))))
    (cardinal-unit-class-of (electric-resistance)))
(UoM-Electric-Current has 
    (superclasses (Unit-of-Measurement))
                                                  
    (wn20-synset ((:set (:triple "ampere" 0 "n") (:triple "milliampere" 0 "n") (:triple "amperes" 0 "n") (:triple "milliamperes" 0 "n"))))
    (cardinal-unit-class-of (electric-current)))
(UoM-Duration has 
    (cardinal-unit-class-of (age
                                duration))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Density has 
    (cardinal-unit-class-of (density))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Coordinate has 
    (superclasses (Unit-of-Measurement))
                                                                         
    (wn20-synset ((:set (:triple "degree" 0 "n") (:triple "arcminute" 0 "n") (:triple "arcsecond" 0 "n") (:triple "degrees" 0 "n") (:triple "arcminutes" 0 "n") (:triple "arcseconds" 0 "n")))))
(UoM-Concentration has 
    (superclasses (Unit-of-Measurement))
                      
    (wn20-synset ((:set (:triple "molar" 0 "n") (:triple "molars" 0 "n"))))
    (cardinal-unit-class-of (concentration
                                conductivity
                                equilibrium-concentration
                                scalar-concentration)))
(UoM-Charge has 
    (superclasses (Unit-of-Measurement))
                                  
    (wn20-synset ((:set (:triple "electronic charge" 0 "n"))))
    (cardinal-unit-class-of (charge
                                capacitance)))
(UoM-Brightness has 
    (cardinal-unit-class-of (brightness))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Area has 
    (cardinal-unit-class-of (area))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Angle has 
    (cardinal-unit-class-of (angle
                                direction
                                latitude
                                longitude
                                orientation))
    (superclasses (Unit-of-Measurement))
    )
(UoM-Acceleration has 
    (cardinal-unit-class-of (acceleration))
    (superclasses (Unit-of-Measurement))
    )
(Unrestrain has 
    (defeated-by-class-of (Be-Restrained))
    (superclasses (Unobstruct))
    (required-slot (object))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the thing Unrestrained")
                          (:seq agent "the Unrestrainer")
                          (:seq instrument "the thing used to Unrestrain")))
    (test-case ('((*mugger has (instance-of (Physical-Object))) (a Restrain with (object (*mugger))) (do-and-next (thelast Restrain)) (has-value (the Be-Restrained object-of of *mugger)) (a Move with (object (*mugger))) (not (try-do (thelast Move))) (a Unrestrain with (object (*mugger))) (do-and-next (thelast Unrestrain)) (not (has-value (the Be-Restrained object-of of *mugger))) (try-do (thelast Move)))))
    (wn16-synset ((:set (:triple "let_loose" 2 "v") (:triple "loose" 2 "v") (:triple "unleash" 3 "v"))))
    (wn20-synset ((:set (:triple "let_loose" 2 "v") (:triple "loose" 2 "v") (:triple "unleash" 3 "v")))))

(every Unrestrain has 
    (object ((a Tangible-Entity)))
    (defeats ((if (has-value (the agent of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Restrained) and ((the agent of It) = (the agent of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Restrained)))))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Unrestrain-del-1]))))
    (text-active-verbseq-sg ("unrestrains"))
    (text-active-verbseq-pl ("unrestrain"))
    (text-passive-verbseq-sg ("gets unrestrained"))
    (text-passive-verbseq-pl ("get unrestrained"))
    (preparatory-event ((:default (a Restrain with (object ((the object of Self)))))))
    (text-nominalization ("unrestraining")))
(Unobstruct has 
                                                                                                                                             
    (defeated-by-class-of (Be-Obstructed))
    (superclasses (Make-Accessible))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "object")
                          (:seq agent "unobstructor")
                          (:seq instrument "instrument used")))
    (test-case ('((*pedestrian has (instance-of (Physical-Object))) (a Obstruct with (object (*pedestrian))) (do-and-next (thelast Obstruct)) (the text-gen of (thelast Obstruct)) (has-value (the Be-Obstructed object-of of *pedestrian)) (a Move with (object (*car)) (path (*path))) (try-do (thelast Move)) (the text-gen of (thelast Move)) (a Unobstruct with (object (*pedestrian))) (do-and-next (thelast Unobstruct)) (the text-gen of (thelast Unobstruct)) (not (has-value (the Be-Obstructed object-of of *pedestrian))) (try-do (thelast Move)))))
    (wn16-synset ((:set (:triple "disengage" 2 "v") (:triple "free" 7 "v"))))
    (wn20-synset ((:set (:triple "disengage" 2 "v") (:triple "free" 7 "v")))))

(every Unobstruct has 
    (object ((a Entity)))
    (agent ((must-be-a Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Obstructed))))
    (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Unobstruct-del-1]))))
    (text-active-verbseq-sg ("unobstructs"))
    (text-active-verbseq-pl ("unobstruct"))
    (text-passive-verbseq-sg ("gets unobstructed"))
    (text-passive-verbseq-pl ("get unobstructed"))
    (text-argslots ((:seq base instrument path result)))
    (preparatory-event (((:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self))))))))))))
    (text-nominalization ("unobstructing")))
(University has 
    (superclasses (Educational-Institution))
    (description ("a higher-institution of teaching, studying, research, etc."))
    (wn20-synset ((:set (:triple "university" 2 "n") (:triple "university" 3 "n")))))
(Unitless-Value has 
    (range-of (importance
                  priority
                  slope))
    (domain-of (importance-of
                   priority-of
                   slope-of))
    (superclasses (Property-Value))
    (test-case ('((*GetAJob has (instance-of (Activity))) (*LearnToJuggle has (instance-of (Activity))) (Hobby has (superclasses (Activity))) (*GetAJob has (priority ((a Unitless-Value with (value ((:pair 9 ()) (:pair *urgent Activity))))))) (*LearnToJuggle has (priority ((a Unitless-Value with (value ((:pair 1 ()) (:pair *low Activity) (:pair *medium Hobby))) (less-than ((the priority of *GetAJob))))))) (the less-than of (the priority of *LearnToJuggle)) ((the greater-than of (the priority of *GetAJob)) includes (the priority of *LearnToJuggle))))))
(Unit-of-Measurement has 
    (range-of (cardinal-unit-class
                  preferred-unit
                  target-unit
                  unit))
    (domain-of (cardinal-unit-class-of
                   preferred-unit-of
                   target-unit-of
                   unit-of))
    (superclasses (Property-Group))
    )
(Unit-Conversion has 
    (domain-of (target-unit))
    (range-of (target-unit-of))
    (superclasses (Method))
    (description ("converts one property value directed by a given unit of measurement")))

(every Unit-Conversion has 
    (input ((a Property-Value)))
    (target-unit ((a Unit-of-Measurement)))
    (output ((#'(LAMBDA () (CONVERT-CARD-VALS (KM0 '(the input of Self)) (KM0 '(the target-unit of Self))))))))
(Unicellular-Organism has 
                           
    (superclasses (Organism))
    (description ("An organism consisting of a single cell.  Souther.")))

(every Unicellular-Organism has 
    (has-part ((exactly 1 Cell))))
(Uncharged-Polar-Amino-Acid has 
                                                                          
    (superclasses (Polar-Amino-Acid))
    (description ("A polar amino acid with neutral charge. Souther.")))
(Unblock has 
    (defeated-by-class-of (Be-Blocked))
    (caused-by-class-of (Be-Unblocked))
                     
    (superclasses (Make-Accessible))
    (required-slot (object))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the place blocked")
                          (:seq agent "blocker")))
    (test-case ('((*p1 has (instance-of (Place))) (a Block with (object (*p1))) (try-do-and-next (thelast Block)) (the text-gen of (thelast Block)) (has-value (the Be-Blocked object-of of *p1)) (a Move with (object (*c1)) (path (*p1))) (not (try-do (thelast Move))) (the text-gen of (thelast Move)) (a Unblock with (object (*p1))) (try-do-and-next (thelast Unblock)) (the text-gen of (thelast Unblock)) (not (has-value (the Be-Blocked object-of of *p1))) (try-do (thelast Move)) (the text-gen of (thelast Move)))))
    (wn16-synset ((:set (:triple "clear" 2 "v"))))
    (wn20-synset ((:set (:triple "clear" 2 "v")))))

(every Unblock has 
    (object ((a Spatial-Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Blocked)))))
    (pcs-list ((forall (the object of Self) ((:triple (It) object-of (a Be-Blocked) [Unblock-pcs-1])))))
    (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Unblock-del-1]) (if (has-value (the instrument of It)) then (:triple It instrument (the instrument of It) [Unblock-del-2]))))))
    (text-active-verbseq-sg ("unblocks"))
    (text-active-verbseq-pl ("unblock"))
    (text-passive-verbseq-sg ("gets unblocked"))
    (text-passive-verbseq-pl ("get unblocked"))
    (text-argslots ((:seq base instrument path result)))
    (preparatory-event ((:default (a Block with (object ((the object of Self)))))))
    (text-nominalization ("unblocking")))
(Unauthorized has 
                         
    (superclasses (Cliche))
    (test-case ('((new-situation) (Kiss has (superclasses (Action))) (*me has (instance-of (Entity))) (*her has (instance-of (Entity))) (*herFather has (instance-of (Entity)) (has-goal ((a Goal with (prevents ((a Kiss with (agent (*me)) (object (*her))))))))) (the prevents of (the has-goal of *herFather)) ((thelast Kiss) isa Unauthorized))))
    (wn20-synset ((:set (:triple "unauthorized" 1 "a") (:triple "unauthorised" 1 "a") (:triple "unauthorized" 2 "a") (:triple "unauthorised" 2 "a") (:triple "wildcat" 2 "a")))))

(every Unauthorized has 
    (agent ((a Entity)))
    (prevented-by ((a Event with (is-goal-of ((a Entity))))))
    (inhibited-by ((the prevented-by of Self)))
    (text-definition-sentence (()))
    (text-definition-sentence-of (()))
    (text-nominalization (()))
    (text-nominalization-of (()))
    (text-content (()))
    (text-content-of (()))
    (text-existential-there (()))
    (text-existential-there-of (()))
    (text-toward (()))
    (text-toward-of (()))
    (text-subj (()))
    (text-subj-of (()))
    (text-subj-phrase (()))
    (text-subj-phrase-of (()))
    (text-slot (()))
    (text-slot-of (()))
    (text-sentence (()))
    (text-sentence-of (()))
    (text-premodslots (()))
    (text-premodslots-of (()))
    (text-premods (()))
    (text-premods-of (()))
    (text-postmodslots (()))
    (text-postmodslots-of (()))
    (text-postmods (()))
    (text-postmods-of (()))
    (text-phrase (()))
    (text-phrase-of (()))
    (text-passive-verbseq (()))
    (text-passive-verbseq-of (()))
    (text-passive-verbseq-sg (()))
    (text-passive-verbseq-sg-of (()))
    (text-passive-verbseq-pl (()))
    (text-passive-verbseq-pl-of (()))
    (text-passive-sentence (()))
    (text-passive-sentence-of (()))
    (text-passive-phrase (()))
    (text-passive-phrase-of (()))
    (text-particle (()))
    (text-particle-of (()))
    (text-number (()))
    (text-number-of (()))
    (text-nom-sentence (()))
    (text-nom-sentence-of (()))
    (text-indef-head (()))
    (text-indef-head-of (()))
    (text-indef-determiner (()))
    (text-indef-determiner-of (()))
    (text-head (()))
    (text-head-of (()))
    (text-gen (()))
    (text-gen-of (()))
    (text-dobj (()))
    (text-dobj-of (()))
    (text-dobj-phrase (()))
    (text-dobj-phrase-of (()))
    (text-description (()))
    (text-description-of (()))
    (text-def-head (()))
    (text-def-head-of (()))
    (text-def-determiner (()))
    (text-def-determiner-of (()))
    (text-base-phrase (()))
    (text-base-phrase-of (()))
    (text-arguments (()))
    (text-arguments-of (()))
    (text-argslots (()))
    (text-argslots-of (()))
    (text-active-verbseq (()))
    (text-active-verbseq-of (()))
    (text-active-verbseq-sg (()))
    (text-active-verbseq-sg-of (()))
    (text-active-verbseq-pl (()))
    (text-active-verbseq-pl-of (()))
    (text-active-sentence (()))
    (text-active-sentence-of (()))
    (text-active-phrase (()))
    (text-active-phrase-of (()))
    (text-subevent-of (()))
    (text-subevent (()))
    (slot-gloss (()))
    (slot-gloss-of (()))
    (text-site (()))
    (text-site-of (()))
    (text-resulting-state (()))
    (text-resulting-state-of (()))
    (text-result (()))
    (text-result-of (()))
    (text-recipient (()))
    (text-recipient-of (()))
    (text-raw-material (()))
    (text-raw-material-of (()))
    (text-is-possessed-by (()))
    (text-is-possessed-by-of (()))
    (text-path (()))
    (text-path-of (()))
    (text-origin (()))
    (text-origin-of (()))
    (text-object (()))
    (text-object-of (()))
    (text-material (()))
    (text-material-of (()))
    (text-is-west-of (()))
    (text-is-west (()))
    (text-is-east-of (()))
    (text-is-east (()))
    (text-is-southwest-of (()))
    (text-is-southwest (()))
    (text-is-northeast-of (()))
    (text-is-northeast (()))
    (text-is-over (()))
    (text-is-over-of (()))
    (text-is-outside (()))
    (text-is-outside-of (()))
    (text-is-oriented-toward (()))
    (text-is-oriented-toward-of (()))
    (text-is-opposite (()))
    (text-is-opposite-of (()))
    (text-is-on (()))
    (text-is-on-of (()))
    (text-is-northwest-of (()))
    (text-is-northwest (()))
    (text-is-southeast-of (()))
    (text-is-southeast (()))
    (text-is-north-of (()))
    (text-is-north (()))
    (text-is-south-of (()))
    (text-is-south (()))
    (text-is-near (()))
    (text-is-near-of (()))
    (text-is-inside (()))
    (text-is-inside-of (()))
    (text-is-facing (()))
    (text-is-facing-of (()))
    (text-is-between (()))
    (text-is-between-of (()))
    (text-is-beside (()))
    (text-is-beside-of (()))
    (text-is-behind (()))
    (text-is-behind-of (()))
    (text-is-at (()))
    (text-is-at-of (()))
    (text-is-along (()))
    (text-is-along-of (()))
    (text-is-above (()))
    (text-is-above-of (()))
    (text-instrument (()))
    (text-instrument-of (()))
    (text-has-part (()))
    (text-has-part-of (()))
    (text-is-part-of (()))
    (text-is-part (()))
    (text-donor (()))
    (text-donor-of (()))
    (text-destination (()))
    (text-destination-of (()))
    (text-causes (()))
    (text-causes-of (()))
    (text-caused-by (()))
    (text-caused-by-of (()))
    (text-beneficiary (()))
    (text-beneficiary-of (()))
    (text-base (()))
    (text-base-of (()))
    (text-away-from (()))
    (text-away-from-of (()))
    (text-agent (()))
    (text-agent-of (()))
    (text-abuts (()))
    (text-abuts-of (())))

(every Unauthorized has-definition 
    (instance-of (Event))
    (agent ((a Entity)))
    (prevented-by ((a Event with (is-goal-of ((a Entity)))))))
(UMP has 
    (superclasses (Ribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Uridine monophosphate. One of the four nucleotides
                       in RNA.  Souther. ")))

(every UMP has 
    (complement ((must-be-a AMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Uridine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Uridine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Uridine))))
(UGA has 
    (superclasses (Protein-Stop-Codon))
    (description ("A codon in mRNA which signals the termination point for
                        translation of a polypeptide.  Souther.")))

(every UGA has 
    (element-type ((Ribonucleotide)))
    (first-element (((the UMP element of Self) called "first")))
    (element ((a UMP called "first" with (next-element (((the GMP element of Self) called "second"))))
              (a GMP called "second" with (next-element (((the AMP element of Self) called "third"))))
              (a AMP called "third"))))
(Ubiquitin-Binding-Enzyme has 
    (superclasses (Enzyme))
    (description ("Specialized enzyme that tags a protein to be degraded
                        with Ubiquitin. Souther. ")))
(Ubiquitin has 
    (superclasses (Protein-Regulatory-Protein))
    (description ("A protein which attaches to other proteins and marks
                        them for degradation by proteasomes.  Souther. ")))
(Ubiquinated-Protein has 
    (superclasses (Protein))
    (description ("Protein which has been tagged with ubiquitin, which
                        marks it for degradation by proteasomes.  Souther. ")))

(every Ubiquinated-Protein has 
    (object-of ((a Be-Attached-To with (object ((a Ubiquitin)))))))
(UAG has 
    (superclasses (Protein-Stop-Codon))
    (description ("A codon in mRNA which signals the termination point for
                        translation of a polypeptide.  Souther.")))

(every UAG has 
    (element-type ((Ribonucleotide)))
    (first-element (((the UMP element of Self) called "first")))
    (element ((a UMP called "first" with (next-element (((the AMP element of Self) called "second"))))
              (a AMP called "second" with (next-element (((the GMP element of Self) called "third"))))
              (a GMP called "third"))))
(Tyrosine has 
    (superclasses (Nonpolar-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("An uncharged polar amino acid with a phenol side chain.
                        Souther")))

(every Tyrosine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methyl-Group with (object-of ((a Be-Attached-To with (object ((the Phenol has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) ((the Carbon-Atom has-part of (the Phenol has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-4")))))))))))))
(Typical-Instance has 
    (description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
    (superclasses (KM-Class)))
(Tubulin-Molecule has 
    (superclasses (Structural-Protein))
    (description ("A globular protein that polymerizes into microtubules.
                        Alberts:ECB:G-18.")))

(every Tubulin-Molecule has 
    (is-basic-structural-unit-of ((a Microtubule))))
(TTTT-Like-Sequence has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA consensus sequence that forms part of the
                    terminator for DNA transcription. Alberts:ECB:217.")))

(every TTTT-Like-Sequence has 
    (element-type ((Deoxyribonucleotide)))
    (first-element (((the D-TMP element of Self) called "first")))
    (element ((a D-TMP called "first" with (next-element (((the D-TMP element of Self) called "second"))))
              (a D-TMP called "second" with (next-element (((the D-TMP element of Self) called "third"))))
              (a D-TMP called "third" with (next-element (((the D-TMP element of Self) called "fourth"))))
              (a D-TMP called "fourth"))))
(TTP has 
    (superclasses (Ribonucleoside-Triphosphate))
    (description ("Nucleoside triphosphate containing the basethymine
                        used in the synthesis of DNA.  Souther.")))

(every TTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Thymidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Thymidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Thymidine))))
(TTGACA-Like-Sequence has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA consensus sequence that forms part of the promoter
                    for DNA transcription. Alberts:ECB:217.")))

(every TTGACA-Like-Sequence has 
    (element-type ((Deoxyribonucleotide)))
    (first-element (((the D-TMP element of Self) called "first")))
    (element ((a D-TMP called "first" with (next-element (((the D-TMP element of Self) called "second"))))
              (a D-TMP called "second" with (next-element (((the D-GMP element of Self) called "third"))))
              (a D-GMP called "third" with (next-element (((the D-AMP element of Self) called "fourth"))))
              (a D-AMP called "fourth" with (next-element (((the D-CMP element of Self) called "fifth"))))
              (a D-CMP called "fifth" with (next-element (((the D-AMP element of Self) called "sixth"))))
              (a D-AMP called "sixth"))))
(Tryptophan has 
    (superclasses (Nonpolar-Amino-Acid
                      Essential-Amino-Acid))
    (description ("A nonpolar amino acid with an indole side chain.
                        Souther")))

(every Tryptophan has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methyl-Group with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) ((the Carbon-Atom has-part of (the Indole has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-3"))))))) (a Indole)))))))
(Truth-Value has 
    (range-of (truth))
    (domain-of (truth-of))
    (superclasses (Property-Value)))
(Truth-Constant has 
    (categorical-constant-class-of (truth))
    (superclasses (Constant))
    )
(Troop-Strength-Value has 
    (superclasses (Property-Value))
    (range-of (troop-strength))
    (domain-of (troop-strength-of)))

(every Troop-Strength-Value has 
    (property-slot ((troop-strength)))
    (intensity-of ((must-be-a Thing)))
    (less-than ((must-be-a Troop-Strength-Value)))
    (greater-than ((must-be-a Troop-Strength-Value)))
    (same-as ((must-be-a Troop-Strength-Value))))
(Troop-Strength-Scale has 
    (superclasses (Scale))
                                                   
    (scale-class-of (troop-strength)))
(Troop-Strength-Constant has 
    (superclasses (Constant))
                                                                                            
    (element-type-of (*minus-strength-plus-strength-scale))
    (scalar-constant-class-of (troop-strength)))
(Troop has 
    (member-of (_Partition8))
    (superclasses (Military-Unit)))
(TRNA-Initiator-Site has 
    (superclasses (Binding-Site)))
(TRNA-Charging has 
    (superclasses (Attach
                      Enzyme-Catalysis))
    (required-slot (object))
    (primary-slot (instrument
                      agent
                      base))
    (description ("The attachment of an amino acid to the appropriate tRNA
                    during RNA translation.  Souther.")))

(every TRNA-Charging has 
    (object ((a Amino-Acid)))
    (agent ((a Cell)))
    (base ((a TRNA)))
    (instrument ((a Amino-Acyl-TRNA-Synthetase)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(TRNA has 
                                                                
    (superclasses (RNA-Transcript))
    (description ("Small RNA molecule used in protein synthesis as an
                        adaptor between a specific codon in mRNA, and specific
                        amino acids.  Each type of tRNA molecule is covalently
                        linked to a particular amino acid and recognizes a
                        particular codon or set of codons by base-pairing.
                        Alberts:ECB:G-18.")))

(every TRNA has 
    (has-part ((a RNA-Anticodon)
               (a Amino-Acid-Binding-Site))))
(Triphosphate has 
                                                                                            
    (superclasses (Phosphoryl-Group))
    (description ("A compound containing a three phosphate groups in a
                            chain. Souther. ")))

(every Triphosphate has 
    (has-part ((a Monophosphate called "Phosphate-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) called "Phosphate-2"))) (site ((the Phosphorus-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-1")) ((the Oxygen-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-2")) called "Oxygen-1"))) (instrument ((a Phosphoanhydride-Bond)))))))
               (a Monophosphate called "Phosphate-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) called "Phosphate-2"))) (site ((the Phosphorus-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-1")) ((the Oxygen-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-2")) called "Oxygen-1"))) (instrument ((a Phosphoanhydride-Bond)))))))
               (a Monophosphate called "Phosphate-3"))))
(Trespass has 
                       
    (superclasses (Go-To
                      Unauthorized))
    (required-slot (agent
                       object
                       destination))
    (test-case ('((new-situation) (*Cletus has (instance-of (Entity))) (*CletusesProperty has (instance-of (Spatial-Entity)) (is-possessed-by (*Cletus))) (*Martian has (instance-of (Entity))) (a Trespass with (agent (*Martian)) (destination (*CletusesProperty))) ((the is-possessed-by of (the destination of (thelast Trespass))) = *Cletus) ((the prevents of (the has-goal of *Cletus)) includes (thelast Trespass)) (do-and-next (thelast Trespass)) ((the location of *Martian) = *CletusesProperty))))
    (wn20-synset ((:set (:triple "trespass" 1 "v") (:triple "intrude" 2 "v") (:triple "transgress" 4 "v") (:triple "trespass" 5 "v") (:triple "overstep" 1 "v")))))

(every Trespass has 
    (destination ((a Spatial-Entity with (is-possessed-by ((the is-goal-of of (the inhibited-by of Self)))))))
    (text-active-verbseq-sg ("trespasses"))
    (text-active-verbseq-pl ("trespass"))
    (text-argslots ((:seq destination)))
    (text-destination ("on"))
    (text-nominalization ("trespassing")))
(Transmit has 
    (superclasses (Move))
    (required-slot (object))
    (primary-slot (agent
                      recipient))
    (test-case ('((*Beep has (instance-of (Entity))) (*Safety-Module has (instance-of (Tangible-Entity))) (*Gary has (instance-of (Tangible-Entity))) (*Transmit has (instance-of (Transmit)) (agent (*Safety-Module)) (recipient (*Gary)) (object (*Beep))) (do-and-next *Transmit) (the text-gen of (thelast Transmit)))))
    (wn16-synset ((:set (:triple "transmit" 1 "v") (:triple "transmit" 2 "v") (:triple "transmit" 4 "v") (:triple "convey" 3 "v") (:triple "convey" 4 "v") (:triple "communicate" 3 "v") (:triple "conduct" 5 "v") (:triple "carry" 3 "v") (:triple "channel" 1 "v") (:triple "transfer" 7 "v") (:triple "transport" 5 "v") (:triple "channel" 3 "v") (:triple "channelize" 1 "v"))))
    (wn20-synset ((:set (:triple "transmit" 1 "v") (:triple "transmit" 2 "v") (:triple "transmit" 4 "v") (:triple "convey" 5 "v") (:triple "communicate" 1 "v") (:triple "conduct" 4 "v") (:triple "carry" 3 "v") (:triple "channel" 1 "v") (:triple "transfer" 7 "v") (:triple "transport" 5 "v") (:triple "channel" 3 "v") (:triple "channelize" 3 "v")))))

(every Transmit has 
    (object ((a Tangible-Entity with (plays ((a Signal))))))
    (recipient ((must-be-a Tangible-Entity)))
    (destination ((the location of (the recipient of Self))))
    (agent ((must-be-a Tangible-Entity)))
    (base ((must-be-a Tangible-Entity with (plays ((a Medium))))))
    (instrument ((must-be-a Tangible-Entity with (plays ((a Carrier))))))
    (text-nominalization ("transmission")))
(Translation-Initiation-Factor has 
    (superclasses (RNA-Regulatory-Protein))
    (description ("A protein involved in the initiation of translation of
                        mRNA into protein. Souther. ")))
(Transfer-Enzyme has 
                                
    (superclasses (Enzyme))
    (description ("A protein that catalyzes the transfer of a group from
                       one molecule to another, e.g. oxido-reductases.
                       Souther.")))
(Transfer has 
                                                                                                                                   
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      donor
                      recipient
                      instrument))
    (cmap-correspondence ((:seq object "the thing transfered")
                          (:seq agent "causer")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*Us has (instance-of (Tangible-Entity))) (*Alaska has (instance-of (Tangible-Entity))) (*Russia has (instance-of (Tangible-Entity)) (possesses (*Alaska))) (a Transfer with (donor (*Russia)) (recipient (*Us)) (object (*Alaska))) (do-and-next (thelast Transfer)) (the text-gen of (thelast Transfer)) ((the is-possessed-by of *Alaska) = *Us) ((the possesses of *Russia) /= *Alaska) (not (*Alaska &? *Russia)))))
    (wn16-synset ((:set (:triple "transfer" 5 "v"))))
    (wn20-synset ((:set (:triple "transfer" 5 "v")))))

(every Transfer has 
    (object ((a Entity)))
    (donor ((must-be-a Tangible-Entity)))
    (recipient ((must-be-a Entity)
                (if (has-value (the donor of Self)) then (excluded-values (the donor of Self)))))
    (soft-pcs-list ((if (has-value (the donor of Self)) then (forall (the donor of Self) (:triple (the donor of Self) abuts (the object of Self))))))
    (pcs-list ((if (has-value (the donor of Self)) then (forall (the donor of Self) ((:triple It possesses (the object of Self) [Transfer-pcs-1]))))))
    (del-list ((if (has-value (the donor of Self)) then (forall (the donor of Self) ((:triple It possesses (the object of Self) [Transfer-del-1]))))))
    (add-list ((if (has-value (the recipient of Self)) then (forall (the recipient of Self) ((:triple It possesses (the object of Self) [Transfer-add-1]))))))
    (text-active-verbseq-sg ("transfers"))
    (text-active-verbseq-pl ("transfer"))
    (text-passive-verbseq-sg ("gets transferred"))
    (text-passive-verbseq-pl ("get transferred"))
    (text-donor ((if (has-value (the donor of Self)) then ("from"))))
    (text-recipient ((if (has-value (the recipient of Self)) then ("to"))))
    (text-argslots ((:seq donor recipient instrument)))
    (preparatory-event ((:default (a Obtain with (recipient ((the donor of Self))) (object ((the object of Self)))))))
    (text-nominalization ("transfer")))
(Transcription-Unit has 
    (superclasses (DNA-Coding-Sequence))
    (description ("A stretch of DNA that is naturally transcribed in a 
                       single operation to produce a single primary transcript.
                       Can be (the coding part of) an operon or a gene. 
                       Strachan:HMG:556.  Includes untranslated regions as 
                       well as the cistron.  Souther")))

(every Transcription-Unit has 
    (has-basic-functional-unit ((a DNA-Codon)))
    (purpose ((a Template with (in-event ((a DNA-Transcription))))))
    (has-part ((a DNA-5prime-UTR)
               (a DNA-3prime-UTR)
               (a Cistron))))
(Trait-Value has 
    (range-of (trait))
    (domain-of (trait-of))
    (superclasses (Property-Value)))
(Trait-Constant has 
    (categorical-constant-class-of (trait))
    (superclasses (Constant))
    )
(Training has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "training" 1 "n") (:triple "preparation" 6 "n") (:triple "grooming" 1 "n") (:triple "activity" 1 "n")))))

(every Training has 
    (text-nominalization ("training")))
(Trafficability-Value has 
    (superclasses (Property-Value))
    (range-of (trafficability))
    (domain-of (trafficability-of)))

(every Trafficability-Value has 
    (property-slot ((trafficability)))
    (trafficability-of ((must-be-a Thing)))
    (less-than ((must-be-a Trafficability-Value)))
    (greater-than ((must-be-a Trafficability-Value)))
    (same-as ((must-be-a Trafficability-Value))))
(Trafficability-Scale has 
                            
    (superclasses (Scale))
    (scale-class-of (trafficability)))
(Trafficability-Constant has 
    (element-type-of (*SR-UR-scale))
    (superclasses (Constant))
                                                      
    (scalar-constant-class-of (trafficability)))
(Toluene has 
    (superclasses (Aromatic-Compound))
    (description ("Methylbenzene. Souther")))

(every Toluene has 
    (has-part ((a Benzene with (object-of ((a Be-Attached-To with (object ((the Methyl-Group has-part of Self))) (instrument ((a Conjugated-Double-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of Self)) (((the has-part of (the Benzene has-part of Self)) called "Carbon-1"))))))))
               (a Methyl-Group))))
(Tl has 
    (superclasses (Metal-Atom
                      IIIA-Element)))

(every Tl has 
    (atomic-symbol ((Tl)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 81 ()))))))
    (chemical-period (6)))
(Tissue has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "tissue" 2 "n") (:triple "tissue_paper" 1 "n")))))
(Time-Zone-Constant has 
    (range-of (time-zone))
    (domain-of (time-zone-of))
    (superclasses (Constant))
    )
(Time-Interval has 
    (domain-of (duration
                   time-begins-or-in
                   time-between
                   time-contains
                   time-inside
                   time-int-before
                   time-int-after
                   time-int-during
                   time-int-contains
                   time-int-equals
                   time-int-finishes
                   time-int-finished-by
                   time-int-meets
                   time-int-met-by
                   time-int-overlaps
                   time-int-overlapped-by
                   time-int-starts
                   time-int-started-by
                   time-of-existence-of))
    (range-of (duration-of
                  time-is-beginning-or-inside
                  time-between-of
                  time-during
                  time-is-inside
                  time-int-before
                  time-int-after
                  time-int-during
                  time-int-contains
                  time-int-equals
                  time-int-finishes
                  time-int-finished-by
                  time-int-meets
                  time-int-met-by
                  time-int-overlaps
                  time-int-overlapped-by
                  time-int-starts
                  time-int-started-by
                  time-of-existence))
    (superclasses (Temporal-Entity))
    (wn20-synset ((:set (:triple "time_interval" 1 "n") (:triple "interval" 1 "n"))))
    (test-case ('((*UT-Thanksgiving-Break-2004-Nov-25th-thru-27th has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 11 *month) (:pair 25 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 11 *month) (:pair 27 *day))))))) (*UT-Spring-Break-2005-March-14th-thru-19th has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 14 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 19 *day))))))) (*UT-Summer-Add-Drop-Period-2005-May-24-thru-26 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 5 *month) (:pair 24 *day))))))) ((the time-before of *UT-Thanksgiving-Break-2004-Nov-25th-thru-27th) includes *UT-Spring-Break-2005-March-14th-thru-19th) ((the time-after of *UT-Summer-Add-Drop-Period-2005-May-24-thru-26) includes *UT-Spring-Break-2005-March-14th-thru-19th) (*2005-March-15-Noon has (instance-of (Time-Instant)) (time-value ((:pair 12 *hour) (:pair 0 *minute) (:pair 0 *second) (:pair 15 *day) (:pair 3 *month) (:pair 2005 *year)))) ((the time-inside of *UT-Spring-Break-2005-March-14th-thru-19th) includes *2005-March-15-Noon) (*UT-Spring-Semester-2005 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 1 *month)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 5 *month))))))) ((the time-int-during of *UT-Spring-Break-2005-March-14th-thru-19th) includes *UT-Spring-Semester-2005) (*UT-Fall-Semester-2004 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 8 *month)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2004 *year) (:pair 12 *month))))))) ((the time-int-contains of *UT-Fall-Semester-2004) includes *UT-Thanksgiving-Break-2004-Nov-25th-thru-27th) (*Time-Overlapping-Start-Of-UT-Spring-Break-2005 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 12 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 15 *day))))))) (*Time-Overlapping-End-Of-UT-Spring-Break-2005 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 17 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2005 *year) (:pair 3 *month) (:pair 21 *day))))))) ((the time-int-overlaps of *Time-Overlapping-Start-Of-UT-Spring-Break-2005) includes *UT-Spring-Break-2005-March-14th-thru-19th) ((the time-int-overlapped-by of *Time-Overlapping-End-Of-UT-Spring-Break-2005) includes *UT-Spring-Break-2005-March-14th-thru-19th) (not ((the time-int-overlaps of *UT-Thanksgiving-Break-2004-Nov-25th-thru-27th) includes *UT-Fall-Semester-2004))))))

(every Time-Interval has 
    (time-begins-or-in ((:set (the time-begins of Self) (the time-inside of Self))))
    (time-between ((:set (the time-begins of Self) (the time-ends of Self))))
    (time-before ((allof (the all-instances of Time-Interval) where ((the time-ends of Self) time-lt (the time-begins of It)))))
    (time-after ((allof (the all-instances of Time-Interval) where ((the time-ends of It) time-lt (the time-begins of Self)))))
    (time-inside ((allof (the all-instances of Time-Instant) where (((the time-begins of Self) time-lte It) and ((the time-ends of Self) time-gte It)))))
    (time-int-during ((allof (the all-instances of Time-Interval) where (((the time-begins of It) time-lt (the time-begins of Self)) and ((the time-ends of It) time-gt (the time-ends of Self))))))
    (time-int-contains ((allof (the all-instances of Time-Interval) where (((the time-begins of Self) time-lt (the time-begins of It)) and ((the time-ends of Self) time-gt (the time-ends of It))))))
    (time-int-overlaps ((allof (the all-instances of Time-Interval) where (((the time-ends of Self) time-gt (the time-begins of It)) and ((the time-ends of It) time-gt (the time-ends of Self)) and ((the time-begins of It) time-gt (the time-begins of Self))))))
    (time-int-overlapped-by ((allof (the all-instances of Time-Interval) where (((the time-ends of It) time-gt (the time-begins of Self)) and ((the time-ends of Self) time-gt (the time-ends of It)) and ((the time-begins of Self) time-gt (the time-begins of It)))))))
(Time-Instant has 
    (range-of (time-at
                  time-begins-or-in
                  time-begins
                  time-between
                  time-ends
                  time-inside
                  time-value-of
                  time-year-of
                  time-month-of
                  time-day-of
                  time-day-of-week-of
                  time-hour-of
                  time-minute-of
                  time-second-of
                  time-zone-of))
    (domain-of (time-of
                   time-is-beginning-or-inside
                   time-beginning-of
                   time-between-of
                   time-end-of
                   time-is-inside
                   time-value
                   time-year
                   time-month
                   time-day
                   time-day-of-week
                   time-hour
                   time-minute
                   time-second
                   time-zone))
    (superclasses (Temporal-Entity))
    (test-case ('((*rightthisminute has (instance-of (Time-Instant)) (time-value ((:pair 15 *hour) (:pair 27 *minute) (:pair 0 *second) (:pair 16 *day) (:pair 12 *month) (:pair 2003 *year) *Tuesday *CST))) (*the-month-of-Dec-2003 has (instance-of (Time-Interval)) (time-begins ((a Time-Instant with (time-value ((:pair 2003 *year) (:pair 12 *month) (:pair 1 *day)))))) (time-ends ((a Time-Instant with (time-value ((:pair 2003 *year) (:pair 12 *month) (:pair 31 *day))))))) ((the time-is-inside of *rightthisminute) includes *the-month-of-Dec-2003))))
    (wn20-synset ((:set (:triple "point_in_time" 1 "n") (:triple "point" 6 "n")))))

(every Time-Instant has 
    (time-begins ((Self)))
    (time-ends ((Self)))
    (time-year ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *year)))))
    (time-month ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *month)))))
    (time-day ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *day)))))
    (time-day-of-week ((oneof (the time-value of Self) where (It isa Day-Constant))))
    (time-hour ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *hour)))))
    (time-minute ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *minute)))))
    (time-second ((the1 of (oneof (the time-value of Self) where ((the2 of It) = *second)))))
    (time-zone ((oneof (the time-value of Self) where (It isa Time-Zone-Constant))))
    (time-value ((((if (has-value (the time-year of Self)) then ((:pair (the time-year of Self) *year)))) && ((if (has-value (the time-month of Self)) then ((:pair (the time-month of Self) *month)))) && ((if (has-value (the time-day of Self)) then ((:pair (the time-day of Self) *day)))) && ((if (has-value (the time-day-of-week of Self)) then (the time-day-of-week of Self))) && ((if (has-value (the time-hour of Self)) then ((:pair (the time-hour of Self) *hour)))) && ((if (has-value (the time-minute of Self)) then ((:pair (the time-minute of Self) *minute)))) && ((if (has-value (the time-second of Self)) then ((:pair (the time-second of Self) *second)))) && ((if (has-value (the time-zone of Self)) then (the time-zone of Self))) && ((constraint ((((the1 of TheValue) isa Number) and ((the2 of TheValue) isa UoM-Time)) or (TheValue isa Day-Constant) or (TheValue isa Time-Zone-Constant)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *year))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *year))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *month))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *month))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *day))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *day))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *hour))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *hour))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *minute))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *minute))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where ((the2 of It) = *second))) then ((the number of (allof (the time-value of Self) where ((the2 of It) = *second))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where (It isa Day-Constant))) then ((the number of (allof (the time-value of Self) where (It isa Day-Constant))) <= 1) else t)))) && ((constraint ((if (has-value (oneof (the time-value of Self) where (It isa Time-Zone-Constant))) then ((the number of (allof (the time-value of Self) where (It isa Time-Zone-Constant))) <= 1) else t)))) && ((constraint ((if ((not (TheValue isa Day-Constant)) and (not (TheValue isa Time-Zone-Constant))) then (if ((the2 of TheValue) = *year) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) >= 1000) and ((the1 of TheValue) <= 9999)) else (if ((the2 of TheValue) = *month) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) <= 12)) else (if ((the2 of TheValue) = *day) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) <= 31)) else (if ((the2 of TheValue) = *hour) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) < 24)) else (if ((the2 of TheValue) = *minute) then (((the1 of TheValue) isa Integer) and ((the1 of TheValue) < 60)) else (if ((the2 of TheValue) = *second) then ((the1 of TheValue) < 60) else t)))))) else t)))))))
    (time-is-inside ((allof (the all-instances of Time-Interval) where (((the time-begins of It) time-lte Self) and ((the time-ends of It) time-gte Self)))))
    (text-gen (((?dow == (the name of (oneof (the time-value of Self) where (It isa Day-Constant)))) and (?tz == (oneof (the time-value of Self) where (It isa Time-Zone-Constant))) and (?day == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *day)))) and (?month == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *month)))) and (?year == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *year)))) and (?hour == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *hour)))) and (?minute == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *minute)))) and (?second == (the1 of (oneof (the time-value of Self) where ((the2 of It) = *second)))) and (make-phrase (:seq ?dow (if ((has-value ?dow) and (has-value (oneof (the time-value of Self) where (the2 of It)))) then (:seq "nospace" ",")) (if (has-value ?month) then (theN ?month of (:seq "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))) (if (has-value ?month) then ?day else (if (has-value ?day) then (:seq "the" (theN ?day of (:seq "1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th" "11th" "12th" "13th" "14th" "15th" "16th" "17th" "18th" "19th" "20th" "21st" "22nd" "23rd" "24th" "25th" "26th" "27th" "28th" "29th" "30th" "31st"))))) (if ((has-value (:set ?month ?day)) and (has-value (:set ?year ?hour ?minute ?second))) then (:seq "nospace" ",")) ?year (if ((has-value ?year) and (has-value (:set ?hour ?minute ?second))) then (:seq "nospace" ",")) ?hour (if (has-value ?hour) then (:seq "nospace" ":" "nospace")) (if (has-value ?minute) then (if (has-value ?hour) then (:seq (if (?minute < 10) then (:seq "0" "nospace")) ?minute) else (:seq ?minute "nospace" "m")) else (if (has-value ?hour) then "00")) (if (has-value ?second) then (if (has-value ?minute) then (if (has-value ?hour) then (:seq "nospace" ":" "nospace" (if (?second < 10) then (:seq "0" "nospace")) ?second) else (:seq "nospace" ?second "nospace" "s")) else (:seq ?second "nospace" "s"))) ?tz))))))
(Time-Constraints has 
    (superclasses (Critique-Dimension)))
(Ti has 
    (superclasses (Metal-Atom
                      IVB-Element)))

(every Ti has 
    (atomic-symbol ((Ti)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 22 ()))))))
    (chemical-period (4)))
(Thymine has 
    (superclasses (Pyrimidine))
    (description ("A pyrimidine base which combines with a ribose base to
                        form thymidine.  Thymidine triphosphates are one of the
                        building block monomers for DNA.
                        Souther. ")))

(every Thymine has 
    (complement ((a Adenine)))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "N1-N1H" with (object (((the has-part of Self) uniquely-called "N1-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-C20" with (object (((the has-part of Self) uniquely-called "C2-Oxygen"))) (instrument ((a Double-Covalent-CO-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To uniquely-called "N3-N3H" with (object (((the has-part of Self) uniquely-called "N3-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C4-C4O" with (object (((the has-part of Self) uniquely-called "C4-Oxygen"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Double-Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C5-MG" with (object ((the Methyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond)))))))
               (a Methyl-Group)
               (a Oxygen-Atom uniquely-called "C2-Oxygen")
               (a Oxygen-Atom uniquely-called "C4-Oxygen")
               (a Hydrogen-Atom uniquely-called "N1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N3-Hydrogen"))))
(Thymidine has 
    (superclasses (Ribonucleoside))
    (description ("A nucleoside containing thymine and ribose. 
                          Souther.")))

(every Thymidine has 
    (has-part ((a Thymine with (object-of ((a Be-Attached-To with (object ((the Ribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Ribose has-part of Self)) called "Carbon-1") ((the Nitrogen-Atom has-part of (the Thymine has-part of Self)) called "Nitrogen-1")))))))
               (a Ribose))))
(Throw has 
    (superclasses (Unobstruct))
    (wn20-synset ((:set (:triple "throw" 1 "v")))))

(every Throw has 
    (first-subevent ((the Propel subevent of Self)))
    (subevent ((a Propel with (agent ((the agent of Self))) (object ((the object of Self))) (destination ((the destination of Self))) (toward ((the toward of Self))) (next-event ((the Let-Go-Of subevent of Self))))
               (a Let-Go-Of with (agent ((the agent of Self))) (object ((the object of Self))) (causes ((a Fall with (object ((the object of Self)))))))))
    (text-active-verbseq-sg ("throws"))
    (text-active-verbseq-pl ("throw"))
    (text-passive-verbseq-sg ("is thrown"))
    (text-passive-verbseq-pl ("are thrown"))
    (text-argslots ((:seq destination)))
    (text-nominalization ("throwing")))
(Threonine has 
    (superclasses (Nonpolar-Amino-Acid
                      Essential-Amino-Acid))
    (description ("An uncharged polar amino acid with an ethanol side 
                        chain.  Souther")))

(every Threonine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Ethanol-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-2")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Ethanol-Group)))))))
(Thiol-Group has 
    (superclasses (Chemical-Group))
    (description ("Chemical group containing sulfur and hydrogen
                             found in the amino acid cysteine and other
                             molecules.  Two sulfhydryls can join to produce a
                             disulfide bond. Alberts:ECB:G-17")))

(every Thiol-Group has 
    (has-part ((a Hydrogen-Atom)
               (a Sulfur-Atom with (object-of ((a Be-Attached-To with (object ((the Hydrogen-Atom has-part of Self))))))))))
(Thioester-Bond has 
    (superclasses (Covalent-Bond))
    (description ("High-energy bond formed by a condensation reaction
                        between an acid (acyl) group and a thiol group (-SH);
                        seen, for example, in acetyl CoA and in many enzyme-
                        substrate complexes. Alberts:ECB:G-17.")))
(Thickness-Scale has 
    (scale-class-of (thickness))
                                 
    (superclasses (Scale)))
(Thickness-Constant has 
    (scalar-constant-class-of (thickness))
    (element-type-of (*thin-thick-scale))
    (superclasses (Constant))
                                          
    (wn20-synset ((:set (:triple "thickness" 1 "n")))))
(Texture-Value has 
    (range-of (texture))
    (domain-of (texture-of))
    (superclasses (Property-Value)))
(Texture-Constant has 
    (categorical-constant-class-of (texture))
    (superclasses (Constant))
    )
(Text-Field has 
    (superclasses (Message-Field))
    (description ("a message field whose content is a text constant")))

(every Text-Field has 
    (information-content ((a String))))

(every Text-Field has-definition 
    (instance-of (Message-Field))
    (information-content ((a String))))
(Territory has 
                                        
    (superclasses (Region))
    (description ("a relatively large Region delineated on some dimension (administrative, strategic, commercial, private, geographical, ...)"))
    (wn20-synset ((:set (:triple "territory" 1 "n") (:triple "district" 1 "n") (:triple "territorial_dominion" 1 "n") (:triple "dominion" 2 "n") (:triple "territory" 3 "n") (:triple "soil" 4 "n")))))
(Terrain has 
                                                                                                                                                                                                                                                                                                                                                          
    (member-of (_Partition7))
    (superclasses (Tangible-Entity)))
(Terminator-Sequence-2 has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA consensus sequence CTGGCGGC that forms part of the 
                    terminator for DNA transcription. Alberts:ECB:217.")))

(every Terminator-Sequence-2 has 
    (is-functional-part-of ((a Terminator))))
(Terminator-Sequence-1 has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA consensus sequence that forms part of the terminator
                    for DNA transcription. Alberts:ECB:217")))

(every Terminator-Sequence-1 has 
    (element-type ((Deoxyribonucleotide)))
    (first-element (((the D-GMP element of Self) called "first")))
    (element ((a D-GMP called "first" with (next-element (((the D-CMP element of Self) called "second"))))
              (a D-CMP called "second" with (next-element (((the D-CMP element of Self) called "third"))))
              (a D-CMP called "third" with (next-element (((the D-GMP element of Self) called "fourth"))))
              (a D-GMP called "fourth" with (next-element (((the D-CMP element of Self) called "fifth"))))
              (a D-CMP called "fifth" with (next-element (((the D-CMP element of Self) called "sixth"))))
              (a D-CMP called "sixth" with (next-element (((the D-AMP element of Self) called "seventh"))))
              (a D-AMP called "seventh" with (next-element (((the D-GMP element of Self) called "eigth"))))
              (a D-GMP called "eight"))))
(Terminator-Region has 
    (superclasses (DNA-Regulatory-Region))
    (description ("The has-region which contains the terminator
                                  sequences.")))

(every Terminator-Region has 
    (location-of ((a Terminator))))
(Terminator has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA sequence that appears at the end of a
                    transcriptional unit and signals the end of transcription.
                    Lehninger:PBC:G-13.")))

(every Terminator has 
    (location ((a Terminator-Region)))
    (element-type ((Sequence)))
    (element ((a Sequence)
              (a Terminator-Sequence-1)
              (a Sequence)
              (a Terminator-Sequence-2)
              (a Sequence)
              (a TTTT-Like-Sequence))))
(Temporal-Entity has 
    (domain-of (time-before
                   time-after
                   time-begins
                   time-ends))
    (range-of (time-before
                  time-after
                  time-beginning-of
                  time-end-of))
    (superclasses (Thing))
    )
(Template has 
    (superclasses (Role))
    (description ("A role played by an object in a copy event, 
                           serving as the thing from which a copy is made.")))

(every Template has 
    (in-event ((a Copy)))
    (played-by ((a Tangible-Entity with (object-of ((the in-event of Self)))))))
(Temperature-Value has 
    (range-of (temperature))
    (domain-of (temperature-of))
    (superclasses (Property-Value))
    (test-case ('((Drink has (superclasses (Substance))) (Ice has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (temperature ((a Temperature-Value)))) (*mybeer has (instance-of (Drink)) (temperature ((a Temperature-Value with (value ((:pair 5 *celsius) (:pair *cool Drink) (:pair *warm Ice))) (less-than ((the temperature of *mycoffee))))))) (the value of (the temperature of *mybeer)) ((the less-than of (the temperature of *mybeer)) includes (the temperature of *mycoffee)) ((the greater-than of (the temperature of *mycoffee)) includes (the temperature of *mybeer))))))
(Temperature-Scale has 
                                                                     
    (scale-class-of (temperature))
    (superclasses (Scale)))
(Temperature-Constant has 
    (element-type-of (*cold-hot-scale
                         *freezing-boiling-scale))
    (scalar-constant-class-of (temperature))
    (superclasses (Constant))
    )
(Team has 
    (superclasses (Group))
    (description ("a relatively small organization of Roles with a goal"))
    (wn20-synset ((:set (:triple "team" 1 "n") (:triple "squad" 2 "n"))))
    )
(Teacher has 
    (superclasses (Role))
    (wn20-synset ((:set (:triple "teacher" 1 "n"))
                  (:set (:triple "instructor" 1 "n")))))

(every Teacher has 
    (in-event ((must-be-a Teach)))
    (played-by ((a Tangible-Entity with (agent-of ((the in-event of Self)))))))
(Teach has 
    (superclasses (Communicate))
    (required-slot (agent
                       object
                       recipient))
    (test-case ('((*Fire-Is-Darn-Hot has (instance-of (Information))) (*Alexander has (instance-of (Tangible-Entity))) (*Aristotle has (instance-of (Tangible-Entity)) (experiencer-of ((a Be-Known with (object (*Fire-Is-Darn-Hot)))))) (*Teach has (instance-of (Teach)) (agent (*Aristotle)) (recipient (*Alexander)) (object (*Fire-Is-Darn-Hot))) (do-script *Teach) (has-value (the recipient of (thelast Teach))) ((the experiencer of (thelast Be-Known)) = *Aristotle) ((the object of (thelast Be-Known)) = *Fire-Is-Darn-Hot) ((the plays of *Aristotle) isa Teacher) ((the plays of *Alexander) isa Pupil))))
    (wn16-synset ((:set (:triple "teach" 1 "v") (:triple "learn" 5 "v") (:triple "instruct" 1 "v"))))
    (wn20-synset ((:set (:triple "teach" 1 "v") (:triple "learn" 5 "v") (:triple "instruct" 1 "v")))))

(every Teach has 
    (agent ((a Tangible-Entity with (plays ((a Teacher))))))
    (recipient ((a Tangible-Entity with (plays ((a Pupil))))))
    (objective ((the Learn subevent of Self)))
    (subevent ((a Express)
               (a Convey)
               (a Learn)))
    (text-nominalization ("teaching")))
(Te has 
    (superclasses (Metalloid
                      VIA-Element)))

(every Te has 
    (atomic-symbol ((Te)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 52 ()))))))
    (chemical-period (5)))
(Tc has 
    (superclasses (Metal-Atom
                      VIIB-Element)))

(every Tc has 
    (atomic-symbol ((Tc)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 43 ()))))))
    (chemical-period (5)))
(TATA-Box has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA consensus sequence that forms part of the promoter 
                    for DNA transcription.  Alberts:ECB:217")))

(every TATA-Box has 
    (element-type ((Deoxyribonucleotide)))
    (first-element (((the D-TMP element of Self) called "first")))
    (element ((a D-TMP called "first" with (next-element (((the D-AMP element of Self) called "second"))))
              (a D-AMP called "second" with (next-element (((the D-TMP element of Self) called "third"))))
              (a D-TMP called "third" with (next-element (((the D-AMP element of Self) called "fourth"))))
              (a D-AMP called "fourth" with (next-element (((the D-TMP element of Self) called "fifth"))))
              (a D-TMP called "fifth" with (next-element (((the D-TMP element of Self) called "sixth"))))
              (a D-TMP called "sixth"))))
(Taste-Value has 
    (range-of (taste))
    (domain-of (taste-of))
    (superclasses (Property-Value)))
(Taste-Constant has 
    (categorical-constant-class-of (taste))
    (superclasses (Constant))
    )
(Task-Organized-Unit has 
                                                                                                                                                                                                                                                                                                                 
    (superclasses (Military-Unit)))
(Task-Organized-Squad has 
    (superclasses (Task-Organized-Unit
                      Squad)))

(every Task-Organized-Squad has-definition 
    (instance-of (Task-Organized-Unit
                     Squad)))
(Task-Organized-Regiment has 
    (superclasses (Task-Organized-Unit
                      Regiment)))

(every Task-Organized-Regiment has-definition 
    (instance-of (Task-Organized-Unit
                     Regiment)))
(Task-Organized-Platoon has 
    (superclasses (Task-Organized-Unit
                      Platoon)))

(every Task-Organized-Platoon has-definition 
    (instance-of (Task-Organized-Unit
                     Platoon)))
(Task-Organized-Division has 
    (superclasses (Task-Organized-Unit
                      Division)))

(every Task-Organized-Division has-definition 
    (instance-of (Task-Organized-Unit
                     Division)))
(Task-Organized-Corps has 
    (superclasses (Task-Organized-Unit
                      Corps)))

(every Task-Organized-Corps has-definition 
    (instance-of (Task-Organized-Unit
                     Corps)))
(Task-Organized-Company has 
    (superclasses (Task-Organized-Unit
                      Military-Company)))

(every Task-Organized-Company has-definition 
    (instance-of (Task-Organized-Unit
                     Military-Company)))
(Task-Organized-Brigade has 
    (superclasses (Task-Organized-Unit
                      Brigade)))

(every Task-Organized-Brigade has-definition 
    (instance-of (Task-Organized-Unit
                     Brigade)))
(Task-Organized-Battalion has 
    (superclasses (Task-Organized-Unit
                      Battalion)))

(every Task-Organized-Battalion has-definition 
    (instance-of (Task-Organized-Unit
                     Battalion)))
(Target has 
    (superclasses (Role)))

(every Target has 
    (in-event ((must-be-a Move)))
    (played-by ((a Spatial-Entity with (toward-of ((the in-event of Self)))))))
(Tap-Water has 
    (superclasses (Aqueous-Solution)))

(every Tap-Water has 
    (base ((a H2SiF6-Substance with (scalar-concentration ((a Scalar-Concentration-Value with (value ((*dilute)))))) [Tap-Water-base-1]))))
(Tank-Unit has 
                                                                                                                                                 
    (superclasses (Armor-Unit)))
(Tank-Regiment has 
    (superclasses (Tank-Unit
                      Regiment)))

(every Tank-Regiment has-definition 
    (instance-of (Tank-Unit
                     Regiment)))
(Tank-Division has 
    (superclasses (Tank-Unit
                      Division)))

(every Tank-Division has 
    (element ((a Mechanized-Infantry-Brigade)
              (a Mechanized-Infantry-Brigade)
              (a Armored-Brigade)
              (a Armored-Brigade)
              (a Artillery-Brigade))))

(every Tank-Division has-definition 
    (instance-of (Tank-Unit
                     Division)))
(Tank-Company has 
    (superclasses (Tank-Unit
                      Military-Company)))

(every Tank-Company has-definition 
    (instance-of (Tank-Unit
                     Military-Company)))
(Tank-Brigade has 
    (superclasses (Tank-Unit
                      Brigade)))

(every Tank-Brigade has-definition 
    (instance-of (Tank-Unit
                     Brigade)))
(Tank-Battalion has 
    (superclasses (Tank-Unit
                      Battalion)))

(every Tank-Battalion has-definition 
    (instance-of (Tank-Unit
                     Battalion)))
(Tank has 
                                                                                                                                                            
    (superclasses (Military-Equipment)))
(Tangible-Entity has 
    (domain-of (breakability
                   brightness
                   consistency
                   text-content
                   density
                   has-basic-structural-unit
                   is-basic-structural-unit-of
                   has-region
                   has-structural-part
                   is-structural-part-of
                   text-information-content
                   integrity
                   mass
                   material
                   material-of
                   text-material
                   polarity
                   quantity
                   raw-material-of
                   text-raw-material-of
                   shape
                   smell
                   substrate-of
                   taste
                   temperature
                   texture
                   wetness
                   trafficability
                   pH
                   pOH))
    (range-of (breakability-of
                  brightness-of
                  consistency-of
                  text-content-of
                  density-of
                  has-basic-structural-unit
                  is-basic-structural-unit-of
                  is-region-of
                  has-structural-part
                  is-structural-part-of
                  text-information-content-of
                  integrity-of
                  mass-of
                  material
                  material-of
                  text-material-of
                  polarity-of
                  quantity-of
                  raw-material
                  text-raw-material
                  shape-of
                  smell-of
                  substrate
                  taste-of
                  temperature-of
                  texture-of
                  wetness-of
                  trafficability-of
                  pH-of
                  pOH-of))
                                                                                                                                                                                                                
    (member-of (_Partition4))
    (superclasses (Spatial-Entity))
    (primary-slot (location)))

(every Tangible-Entity has 
    (location ((must-be-a Place))))
(Take-In has 
                                                                    
    (superclasses (Move-Into))
    (required-slot (agent
                       object
                       destination))
    (primary-slot (agent
                      origin
                      path))
    (cmap-correspondence ((:seq agent "the one causing the take-in")
                          (:seq object "the Tangible-Entity taken-in")
                          (:seq destination "final location")
                          (:seq origin "original location")
                          (:seq path "the portal")))
    (test-case ('((*John has (instance-of (Tangible-Entity))) (*Nasal-Passage has (instance-of (Spatial-Entity))) (*Air has (instance-of (Tangible-Entity)) (is-outside (*John))) (a Take-In with (agent (*John)) (object (*Air)) (path (*Nasal-Passage))) (do-and-next (thelast Take-In)) (the text-gen of (thelast Take-In)) ((the path of (thelast Take-In)) = *Nasal-Passage) ((the content of (the Container plays of *John)) = *Air) ((the is-inside of (the location of *Air)) includes *John) ((the is-outside of (the location of *Lungs)) /= *John))))
    (wn16-synset ((:set (:triple "sorb" 1 "v") (:triple "take_up" 8 "v"))))
    (wn20-synset ((:set (:triple "sorb" 1 "v") (:triple "take_up" 8 "v")))))

(every Take-In has 
    (object ((a Tangible-Entity)))
    (agent ((a Tangible-Entity with (plays ((a Container))))))
    (base ((the agent of Self)))
    (text-active-verbseq-sg ("takes in"))
    (text-active-verbseq-pl ("take in"))
    (text-passive-verbseq-sg ("gets taken in"))
    (text-passive-verbseq-pl ("get taken in"))
    (text-nominalization ("taking")))
(Take-Control has 
    (caused-by-class-of (Be-Controlled))
    (defeated-by-class-of (Be-Controlled))
    (superclasses (Action))
    (required-slot (agent
                       object))
    (cmap-correspondence ((:seq object "the object taken control of")
                          (:seq agent "the agent taking control")))
    (test-case ('((new-situation) (*ShinerBock has (instance-of (Physical-Object))) (*MyOwnSelf has (instance-of (Physical-Object))) (*MyOwnLife has (instance-of (Physical-Object))) (a Be-Controlled with (agent (*ShinerBock)) (object (*MyOwnLife))) (a Take-Control with (agent (*MyOwnSelf)) (object (*MyOwnLife))) ((the agent of (the Be-Controlled object-of of *MyOwnLife)) = *ShinerBock) (do-and-next (thelast Take-Control)) (not ((the agent of (the Be-Controlled object-of of *MyOwnLife)) = *ShinerBock)) ((the agent of (the Be-Controlled object-of of *MyOwnLife)) = *MyOwnSelf))))
    (wn16-synset ((:set (:triple "control" 1 "v") (:triple "command" 5 "v"))))
    (wn20-synset ((:set (:triple "control" 1 "v") (:triple "command" 5 "v") (:triple "take_control" 1 "v") (:triple "take_charge" 1 "v") (:triple "take_hold" 1 "v")))))

(every Take-Control has 
    (object ((a Entity)))
    (agent ((a Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Controlled))))
    (resulting-state ((a Be-Controlled)))
    (add-list ((:triple (the resulting-state of Self) agent (the agent of Self) [Take-Control-add-1])
               (:triple (the resulting-state of Self) object (the object of Self) [Take-Control-add-2])))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Take-Control-del-1]))
               (forall (the defeats of Self) (:triple It agent (the agent of It) [Take-Control-del-2]))))
    (text-active-verbseq-sg ("takes control of"))
    (text-active-verbseq-pl ("take control of"))
    (text-argslots ((:seq instrument path result)))
    (text-nominalization ("taking")))
(Take-Apart has 
    (superclasses (Break))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq agent "the agent")
                          (:seq object "the thing taken apart")
                          (:seq instrument "instrument of used in the take apart")))
    (wn16-synset ((:set (:triple "take_apart" 1 "v") (:triple "break_apart" 1 "v") (:triple "break_up" 8 "v") (:triple "disassemble" 1 "v") (:triple "dismantle" 2 "v"))))
    (wn20-synset ((:set (:triple "take_apart" 1 "v") (:triple "break_apart" 1 "v") (:triple "break_up" 8 "v") (:triple "disassemble" 1 "v") (:triple "dismantle" 2 "v")))))

(every Take-Apart has 
    (object ((a Tangible-Entity)))
    (del-list ((forall (the object of Self) (:triple It has-part (the has-part of It) [Take-Apart-del-1]))))
    (text-active-verbseq-sg ("takes apart"))
    (text-active-verbseq-pl ("take apart"))
    (text-passive-verbseq-sg ("gets taken apart"))
    (text-passive-verbseq-pl ("get taken apart"))
    (text-nominalization ("taking")))
(Take has 
    (superclasses (Obtain))
    (required-slot (donor
                       recipient
                       object))
    (primary-slot (instrument))
    (cmap-correspondence ((:seq object "the thing taken")
                          (:seq agent "taker")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*Book-Taken has (instance-of (Tangible-Entity))) (*John-In-Take has (instance-of (Tangible-Entity)) (possesses (*Book-Taken))) (*Fred-In-Take has (instance-of (Tangible-Entity))) (a Take with (agent (*Fred-In-Take)) (donor (*John-In-Take)) (object (*Book-Taken))) (do-and-next (thelast Take)) (the text-gen of (thelast Take)) ((the possesses of *Fred-In-Take) = *Book-Taken) ((the possesses of *John-In-Take) = nil) ((the is-possessed-by of *Book-Taken) = *Fred-In-Take) ((the agent of (thelast Take)) = (the recipient of (thelast Take))))))
    (wn16-synset ((:set (:triple "take" 8 "v"))))
    (wn20-synset ((:set (:triple "take" 8 "v")))))

(every Take has 
    (donor ((a Tangible-Entity)))
    (text-active-verbseq-sg ("takes"))
    (text-active-verbseq-pl ("take"))
    (text-passive-verbseq-sg ("is taken"))
    (text-passive-verbseq-pl ("are taken"))
    (text-nominalization ("taking")))
(Tactical-Command-Post-Unit has 
                                                                                                                                                                                                                                                                                                                                                                         
    (superclasses (Military-Unit)))
(Tactical-Command-Post-Squad has 
    (superclasses (Tactical-Command-Post-Unit
                      Squad)))

(every Tactical-Command-Post-Squad has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Squad)))
(Tactical-Command-Post-Regiment has 
    (superclasses (Tactical-Command-Post-Unit
                      Regiment)))

(every Tactical-Command-Post-Regiment has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Regiment)))
(Tactical-Command-Post-Platoon has 
    (superclasses (Tactical-Command-Post-Unit
                      Platoon)))

(every Tactical-Command-Post-Platoon has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Platoon)))
(Tactical-Command-Post-Division has 
    (superclasses (Tactical-Command-Post-Unit
                      Division)))

(every Tactical-Command-Post-Division has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Division)))
(Tactical-Command-Post-Corps has 
    (superclasses (Tactical-Command-Post-Unit
                      Corps)))

(every Tactical-Command-Post-Corps has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Corps)))
(Tactical-Command-Post-Company has 
    (superclasses (Tactical-Command-Post-Unit
                      Military-Company)))

(every Tactical-Command-Post-Company has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Military-Company)))
(Tactical-Command-Post-Brigade has 
    (superclasses (Tactical-Command-Post-Unit
                      Brigade)))

(every Tactical-Command-Post-Brigade has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Brigade)))
(Tactical-Command-Post-Battalion has 
    (superclasses (Tactical-Command-Post-Unit
                      Battalion)))

(every Tactical-Command-Post-Battalion has-definition 
    (instance-of (Tactical-Command-Post-Unit
                     Battalion)))
(Ta has 
    (superclasses (Metal-Atom
                      VB-Element)))

(every Ta has 
    (atomic-symbol ((Ta)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 73 ()))))))
    (chemical-period (6)))
(T72 has 
    (superclasses (Tank)))

(every T72 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.75 ())))))))
(T64 has 
    (superclasses (Tank)))

(every T64 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.7 ())))))))
(T62 has 
    (superclasses (Tank)))

(every T62 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.5 ())))))))
(T55 has 
    (superclasses (Tank)))

(every T55 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.44 ())))))))
(System has 
    (domain-of (component
                   equation))
    (range-of (component-of
                  equation-of))
    (superclasses (Thing)))
(Synthase has 
                                                       
    (superclasses (Enzyme))
    (description ("An enzyme involved in the synthesis of large molecules
                        from smaller which requires the input of energy.
                        Souther (see Alberts:ECB:G-2 on anabolic).")))

(every Synthase has 
    (purpose ((a Catalyst with (in-event ((a Produce with (agent ((a Living-Entity))))))))))
(Synchronization has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Swamp has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Swamp has 
    (trafficability ((a Trafficability-Value with (value ((:pair *R Armor-Unit) (:pair *R Infantry-Unit)))))))
(Suppress has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task to degrade the performance of a force or weapon system temporarily")))

(every Suppress has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1 ()))))))
    (text-active-verbseq-sg ("suppresses"))
    (text-active-verbseq-pl ("suppress")))
(Supporting-Attack-Task has 
    (superclasses (Military-Task)))
(Support-by-Fire has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task in which a maneuver force moves to a position where it can engage the enemy by direct fire in support of another maneuvering force")))

(every Support-by-Fire has 
    (agent ((a Military-Unit)))
    (supports ((a Military-Task with (agent ((the object of Self))))))
    (object ((a Military-Unit with (supported-by-military-unit ((the agent of Self))) (allegiance ((the allegiance of (the agent of Self)))) (agent-of ((the supports of Self))))))
    (enemy ((the toward of (the by-means-of of Self))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.8 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1 ()))))))
    (text-active-verbseq-sg ("supports"))
    (text-active-verbseq-pl ("support"))
    (text-particle ("by fire"))
    (text-argslots ((:seq text-particle site path))))
(Support has 
    (caused-by-class-of (Be-Supported))
    (superclasses (Obstruct))
    (required-slot (object))
    (primary-slot (instrument))
    (cmap-correspondence ((:seq object "the thing supported")
                          (:seq instrument "instrument")))
    (test-case ('((*dumb-bell has (instance-of (Tangible-Entity))) (*body-builder has (instance-of (Living-Entity))) (a Support with (object (*dumb-bell)) (agent (*body-builder))) (not (has-value (the Be-Supported object-of of *dumb-bell))) (do-and-next (thelast Support)) (the text-gen of (thelast Support)) (forall (the resulting-state of (thelast Support)) (the text-gen of It)) (has-value (the Be-Supported object-of of *dumb-bell)) (a Fall with (object (*dumb-bell))) (not (try-do (thelast Fall))) (the text-gen of (thelast Fall)) (a Let-Fall with (object (*dumb-bell)) (agent (*body-builder))) (do-and-next (thelast Let-Fall)) (the text-gen of (thelast Let-Fall)) (not (has-value (the Be-Supported object-of of *dumb-bell))) (try-do (thelast Fall)))))
    (wn16-synset ((:set (:triple "support" 4 "v") (:triple "hold" 16 "v") (:triple "hold_up" 1 "v") (:triple "sustain" 5 "v"))))
    (wn20-synset ((:set (:triple "support" 4 "v") (:triple "hold" 15 "v") (:triple "hold_up" 1 "v") (:triple "sustain" 5 "v")))))

(every Support has 
    (object ((a Tangible-Entity)))
    (resulting-state ((a Be-Supported)))
    (instrument ((must-be-a Tangible-Entity)))
    (soft-pcs-list ((forall (the instrument of Self) (forall2 (the object of Self) (:triple It object-of (a Be-Touching with (object (It2))))))))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Support-add-1])
               (if (has-value (the instrument of Self)) then (:triple (the resulting-state of Self) instrument (the instrument of Self) [Support-add-2]))))
    (text-active-verbseq-sg ("supports"))
    (text-active-verbseq-pl ("support"))
    (text-passive-verbseq-sg ("gets supported"))
    (text-passive-verbseq-pl ("get supported"))
    (preparatory-event ((if (has-value (the agent of Self)) then ((:default (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self))))))))))))
    (interrupted-by ((must-be-a Break with (object ((the instrument of Self))))))
    (text-nominalization ("support")))
(Supply has 
                     
    (superclasses (Relinquish))
    (required-slot (agent
                       donor
                       object
                       enables))
    (primary-slot (recipient
                      instrument))
    (cmap-correspondence ((:seq object "the thing Supplied")
                          (:seq agent "the Supplier")
                          (:seq donor "the original possessor")
                          (:seq recipient "the final possessor")
                          (:seq instrument "the thing used to Supply")
                          (:seq enables "enable")))
    (test-case ('((*Money has (instance-of (Physical-Object))) (*Fred has (instance-of (Living-Entity)) (possesses (*Money))) (*Steven has (instance-of (Tangible-Entity))) (*Supply has (instance-of (Supply)) (agent (*Fred)) (recipient (*Steven)) (object (*Money))) (do-and-next *Supply) (the text-gen of (thelast Supply)) ((the enables of *Supply) isa Replenish) ((the object of (the enables of *Supply)) = *Money) ((the possesses of *Fred) /= *Money))))
    (wn16-synset ((:set (:triple "supply" 1 "v") (:triple "supply" 2 "v") (:triple "furnish" 1 "v") (:triple "issue" 2 "v") (:triple "provide" 1 "v") (:triple "render" 2 "v"))))
    (wn20-synset ((:set (:triple "supply" 1 "v") (:triple "supply" 2 "v") (:triple "furnish" 1 "v") (:triple "issue" 2 "v") (:triple "provide" 1 "v") (:triple "render" 2 "v")))))

(every Supply has 
    (agent ((a Tangible-Entity)))
    (object ((a Tangible-Entity)))
    (recipient ((must-be-a Tangible-Entity)))
    (enables ((a Replenish with (object ((the object of Self))))))
    (text-active-verbseq-sg ("supplies"))
    (text-active-verbseq-pl ("supply"))
    (text-passive-verbseq-sg ("is supplied"))
    (text-passive-verbseq-pl ("are supplied"))
    (text-nominalization ("supplying")))
(Supper has 
    (superclasses (Meal))
    (wn20-synset ((:set (:triple "supper" 1 "n"))
                  (:set (:triple "supper" 2 "n")))))

(every Supper has 
    (text-nominalization ("supper")))
(Sulfur-Atom has 
    (superclasses (Atom))
    (description ("A nonmetallic element that occurs either free or 
                        combined especially in sulfides and sulfates, and is a
                        constituent of proteins. Websters 9th NCD:1180.")))

(every Sulfur-Atom has 
    (has-part ((a Proton)
               (exactly 16 Proton)
               (a Neutron)
               (exactly 16 Neutron)
               (a Electron)
               (exactly 16 Electron)))
    (mass ((a Mass-Value with (value ((:pair 32 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Suggestion has 
    (superclasses (Information))
    (wn16-synset ((:set (:triple "suggestion" 1 "n") (:triple "suggestion" 2 "n") (:triple "proposition" 2 "n") (:triple "proffer" 1 "n"))))
    (wn20-synset ((:set (:triple "suggestion" 1 "n") (:triple "suggestion" 2 "n") (:triple "proposition" 2 "n") (:triple "proffer" 1 "n")))))
(Suggest has 
    (superclasses (Communicate))
    (wn20-synset ((:set (:triple "propose" 1 "v") (:triple "suggest" 1 "v") (:triple "advise" 3 "v")))))

(every Suggest has 
    (object ((a Suggestion)))
    (text-nominalization ("suggestion")))
(Substance has 
    (domain-of (physical-state))
    (range-of (physical-state-of))
                                                                                                                                                                             
    (superclasses (Tangible-Entity))
    (member-of (_Partition5))
    (wn16-synset ((:set (:triple "substance" 1 "n") (:triple "matter" 3 "n"))))
    (wn20-synset ((:set (:triple "substance" 1 "n") (:triple "matter" 1 "n")))))

(every Substance has 
    (text-def-determiner ((if (anonymous-instancep Self) then (if (has-value (the is-possessed-by of Self)) then (:seq (the text-def-head of (the is-possessed-by of Self)) "'s") else ()) else ())))
    (text-indef-determiner (())))
(Subscript-Value has 
    (superclasses (Property-Value))
    (range-of (subscript))
    (domain-of (subscript-of)))

(every Subscript-Value has 
    (property-slot ((subscript)))
    (quantity-of ((must-be-a Thing)))
    (less-than ((must-be-a Subscript-Value)))
    (greater-than ((must-be-a Subscript-Value)))
    (same-as ((must-be-a Subscript-Value))))
(Suborganismal-Entity has 
                                                                          
    (superclasses (Living-Entity))
    (description ("Suborganismal 'living' components of organisms, 
                     including systems, organs, tissues, and cells.
                     Souther. ")))

(every Suborganismal-Entity has 
    (is-part-of ((a Organism)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Subcellular-Compartment has 
                                                                                                                                                                   
    (superclasses (Organic-Compartment))
    (description ("A compartment within the cell, surrounded by a
                        membrane.  Examples are mitochondrial matrix,
                        the nucleoplasm, and the compartment within the
                        endoplasmic reticulum. ")))

(every Subcellular-Compartment has 
    (has-part ((a Internal-Membrane))))
(Subatomic-Particle has 
                                                                      
    (superclasses (Chemical-Entity))
    (description ("A particle that is one of the constituents of an atom.
                        Souther. ")))

(every Subatomic-Particle has 
    (is-part-of ((a Atom))))
(Structure has 
    (superclasses (Thing))
    (wn20-synset ((:set (:triple "structure" 0 "n")))))
(Structural-Protein has 
                                                               
    (superclasses (Protein))
    (description ("A protein that provides structure to the cell, such
                        as the proteins forming the cytoskeleton or the
                        nuclear lamina. Souther ")))

(every Structural-Protein has 
    (purpose ((a Instrument-Role with (in-event ((a Be-Supported)))))))
(Strong-Electrolyte-Solution has 
    (superclasses (Aqueous-Solution)))

(every Strong-Electrolyte-Solution has 
    (has-part ((the has-part of (the Strong-Electrolyte base of Self))))
    (base ((forall (the base of Self) ((It) & (a Strong-Electrolyte with (has-part ((a Cation-Substance with (has-basic-structural-unit ((the Cation has-part of (the has-basic-structural-unit of It)))) (concentration ((if (the value of (the concentration of It)) then ((a Concentration-Value with (value ((:pair ((the1 of (the value of (the concentration of It))) * (forall2 (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) where ((an instance of (the2 of It2)) isa Cation) (the1 of It2))) (the2 of (the value of (the concentration of It)))))))) else (if (has-value (the quantity of (the Cation-Substance has-part of It))) then (the output of (a Compute-Concentration-from-Quantity-and-Volume with (input ((the quantity of (the Cation-Substance has-part of It)) (the volume of Self)))))))))) (a Anion-Substance with (concentration ((if (the value of (the concentration of It)) then ((a Concentration-Value with (value ((:pair ((the1 of (the value of (the concentration of It))) * (forall2 (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) where ((an instance of (the2 of It2)) isa Anion) (the1 of It2))) (the2 of (the value of (the concentration of It)))))))) else (if (has-value (the quantity of (the Anion-Substance has-part of It))) then (the output of (a Compute-Concentration-from-Quantity-and-Volume with (input ((the quantity of (the Anion-Substance has-part of It)) (the volume of Self))))))))))))))))))

(every Strong-Electrolyte-Solution has-definition 
    (instance-of (Aqueous-Solution))
    (base ((a Strong-Electrolyte))))
(Strong-Electrolyte-Solute-Species has 
    (superclasses (Solute-Species-Entity)))

(every Strong-Electrolyte-Solute-Species has 
    (concentration ((the concentration of (the Strong-Electrolyte base of (the solute-species-of of Self)))))
    (quantity ((the quantity of (the Strong-Electrolyte base of (the solute-species-of of Self))))))

(every Strong-Electrolyte-Solute-Species has-definition 
    (instance-of (Solute-Species-Entity))
    (is-part-of ((a Strong-Electrolyte-Entity))))
(Strong-Electrolyte-Entity has 
    (superclasses (Electrolyte-Entity)))

(every Strong-Electrolyte-Entity has-definition 
    (instance-of (Ionic-Compound))
    (is-basic-structural-unit-of ((a Strong-Electrolyte))))
(Strong-Electrolyte has 
                                                                                                                                                                     
    (superclasses (Electrolyte))
    (test-case ('(((a NaCl-Substance) isa Strong-Electrolyte)))))

(every Strong-Electrolyte has 
    (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a Cation) (a Anion))))))
    (has-part ((a Cation-Substance with (has-basic-structural-unit ((the Cation has-part of (the has-basic-structural-unit of Self)))) (quantity ((a Quantity-Value with (value ((:pair (if (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of Self)))) then ((forall (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of Self)))) where ((the2 of It) = (the instance-of of (the Cation has-part of (the has-basic-structural-unit of Self)))) (the1 of It)) * (the1 of (the value of (the quantity of Self))))) (the2 of (the value of (the quantity of Self))) [Strong-Electrolyte-quantity-of-Cation-Substance-has-part-1])))))))
               (a Anion-Substance with (has-basic-structural-unit ((the Anion has-part of (the has-basic-structural-unit of Self)))) (quantity ((a Quantity-Value with (value ((:pair (if (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of Self)))) then ((forall (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of Self)))) where ((the2 of It) = (the instance-of of (the Anion has-part of (the has-basic-structural-unit of Self)))) (the1 of It)) * (the1 of (the value of (the quantity of Self))))) (the2 of (the value of (the quantity of Self))) [Strong-Electrolyte-quantity-of-Anion-Substance-has-part-1]))))))))))

(every Strong-Electrolyte has-definition 
    (instance-of (Ionic-Compound-Substance))
    (electrolyte-status ((a Electrolyte-Status-Value with (value ((:pair *strong nil)))))))
(String has 
    (range-of (description
                  doc-file
                  skolem-string
                  slot-gloss
                  text-active-phrase
                  text-active-verbseq-pl
                  text-active-verbseq-sg
                  text-active-verbseq
                  text-definition-sentence
                  text-description
                  text-existential-there
                  text-gen
                  text-gloss
                  text-passive-phrase
                  text-passive-verbseq-pl
                  text-passive-verbseq-sg
                  text-passive-verbseq
                  user-assumption
                  user-comment
                  user-description
                  viewpoint-answer-page
                  viewpoint-answer
                  viewpoint-detail
                  viewpoint-eq-solver-info
                  viewpoint-question
                  has-acid-name
                  has-chemical-name
                  has-molecular-name
                  notes-on-paraphrase-encoding
                  notes-on-solution
                  original-question
                  oxidation-state-changes
                  paraphrase-encoded-question
                  post-hoc-analysis
                  string-name
                  symbol))
    (domain-of (description-of
                   doc-file-of
                   skolem-string-of
                   slot-gloss-of
                   text-active-phrase-of
                   text-active-verbseq-pl-of
                   text-active-verbseq-sg-of
                   text-active-verbseq-of
                   text-definition-sentence-of
                   text-description-of
                   text-existential-there-of
                   text-gen-of
                   text-gloss-of
                   text-passive-phrase-of
                   text-passive-verbseq-pl-of
                   text-passive-verbseq-sg-of
                   text-passive-verbseq-of
                   user-assumption-of
                   user-comment-of
                   user-description-of
                   viewpoint-answer-page-of
                   viewpoint-answer-of
                   viewpoint-detail-of
                   viewpoint-eq-solver-info-of
                   viewpoint-question-of
                   has-acid-name-of
                   has-chemical-name-of
                   has-molecular-name-of
                   notes-on-paraphrase-encoding-of
                   notes-on-solution-of
                   original-question-of
                   paraphrase-encoded-question-of
                   post-hoc-analysis-of
                   string-name-of
                   symbol-of))
    (superclasses (Thing)))
(Store has 
    (caused-by-class-of (Be-Stored))
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "the thing being stored")
                          (:seq base "the thing stored in")
                          (:seq agent "the agent")
                          (:seq instrument "the instrument used")))
    (wn16-synset ((:set (:triple "store" 1 "v") (:triple "store" 2 "v") (:triple "store" 3 "v"))))
    (wn20-synset ((:set (:triple "store" 1 "v") (:triple "store" 2 "v")))))

(every Store has 
    (object ((a Entity)))
    (base ((exactly 1 Tangible-Entity)
           (a Tangible-Entity with (plays ((a Container))))))
    (agent ((must-be-a Entity)))
    (instrument ((must-be-a Entity)))
    (resulting-state ((a Be-Stored)))
    (soft-pcs-list ((forall (the object of Self) (:triple It is-outside (the base of Self)))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Stored with (base ((the base of Self)))) [Store-pcs-1]))))
    (add-list ((:triple (the Container plays of (the base of Self)) content (the object of Self) [Store-add-1])
               (:triple (the resulting-state of Self) object (the object of Self) [Store-add-2])
               (:triple (the resulting-state of Self) base (the base of Self) [Store-add-3])))
    (text-active-verbseq-sg ("stores"))
    (text-active-verbseq-pl ("store"))
    (text-passive-verbseq-sg ("gets stored"))
    (text-passive-verbseq-pl ("get stored"))
    (text-base ((if (has-value (the base of Self)) then ("in"))))
    (preparatory-event ((:default (a Withdraw with (object ((the object of Self)))) (a Open with (base ((the base of Self))) (agent ((the agent of Self)))))))
    (text-nominalization ("storage")))
(Stone has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "stone" 2 "n") (:triple "rock" 2 "n")))))
(State-Value has 
    (range-of (physical-state))
    (domain-of (physical-state-of))
    (superclasses (Property-Value)))
(State-Constant has 
    (categorical-constant-class-of (physical-state))
    (superclasses (Constant))
    )
(State has 
    (range-of (defeats
                  resulting-state
                  text-resulting-state))
    (domain-of (defeated-by
                   resulting-state-of
                   text-resulting-state-of))
                                                                                                                                                                                                                                                                                                                                                                                                                                                    
    (superclasses (Event))
    (primary-slot (object
                      experiencer))
    (cmap-correspondence ((:seq experiencer "the thing experiencing the state")
                          (:seq object "the thing that in the state")))
    (wn16-synset ((:set (:triple "be" 1 "v"))))
    (wn20-synset ((:set (:triple "be" 1 "v")))))

(every State has 
    (time-during ((must-be-a Time-Interval with (time-int-started-by ((the time-during of (the resulting-state-of of Self)))) (time-int-finished-by ((the time-during of (the defeated-by of Self)))))))
    (experiencer ((must-be-a Living-Entity with (time-of-existence ((a Time-Interval with (time-int-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the agent of Self)) then (the time-of-existence of (the agent of Self))) (if (has-value (the instrument of Self)) then (the time-of-existence of (the instrument of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
    (text-active-verbseq-sg ("keeps"))
    (text-active-verbseq-pl ("keep"))
    (text-passive-verbseq-sg ("is"))
    (text-passive-verbseq-pl ("are"))
    (text-particle ((make-phrase (:seq "in a state of" (the instance-of of Self)))))
    (text-argslots ((:seq text-particle base instrument))))
(Stand-Up has 
    (superclasses (Orient))
    (description ("The act of standing up. To go to a state of Be-Standing."))
    (wn20-synset ((:set (:triple "stand" 1 "v") (:triple "stand_up" 4 "v")))))

(every Stand-Up has 
    (agent ((a Entity)))
    (object ((the agent of Self)))
    (resulting-state ((a Be-Standing)))
    (defeats ((allof (the object-of of (the agent of Self)) where (((the classes of It) = Be-Sitting) and ((the object of It) includes (the agent of Self))))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Standing with (object ((the agent of Self)))) [Stand-Up-pcs-1]))))
    (add-list ((:triple (the resulting-state of Self) object (the agent of Self) [Stand-Up-add-1])))
    (del-list ((forall (the defeats of Self) (:triple It object (the agent of Self) [Stand-Up-del-1]))))
    (text-active-verbseq-sg ("stands"))
    (text-active-verbseq-pl ("stand"))
    (text-nominalization ("standing")))
(Sr_OH_2-Substance has 
    (superclasses (Base)))

(every Sr_OH_2-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a Sr_OH_2))))
(Sr_OH_2 has 
    (superclasses (Ionic-Compound)))

(every Sr_OH_2 has 
    (has-part ((a Sr-Plus-2)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Sr-Plus-2) (:pair 2 OH-Minus))))))))
(Sr-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Sr-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("strontium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Sr))))))))
(Sr has 
    (superclasses (Metal-Atom
                      IIA-Element)))

(every Sr has 
    (atomic-symbol ((Sr)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 38 ()))))))
    (chemical-period (5)))
(Squadron has 
                                                                         
    (member-of (_Partition8))
    (superclasses (Military-Unit)))
(Squad has 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
    (member-of (_Partition8))
    (superclasses (Military-Unit)))
(Spill has 
    (superclasses (Fall)))

(every Spill has 
    (object ((a Substance with (physical-state ((a State-Value with (value ((*liquid)))))))))
    (defeated-by ((if (((the object of Self) isa Acid) and ((has-value (the destination of Self)) and ((the destination of Self) isa Skin))) then (:set (a Move with (object ((a Aqueous-Solution with (base ((a Na2CO3-Substance with (scalar-concentration ((a Scalar-Concentration-Value with (value ((*dilute)))))))))))) (destination ((the destination of Self)))) (a Move with (object ((a Aqueous-Solution with (base ((a NaHCO3-Substance with (scalar-concentration ((a Scalar-Concentration-Value with (value ((*dilute)))))))))))) (destination ((the destination of Self))))) [Spill-defeated-by-1])))
    (text-passive-verbseq-sg ("spills"))
    (text-passive-verbseq-pl ("spill")))
(Specify has 
    (superclasses (Action))
    (description ("create a specification (a feature-value description of) some object"))
    (wn20-synset ((:set (:triple "stipulate" 1 "v") (:triple "qualify" 5 "v") (:triple "condition" 3 "v") (:triple "specify" 1 "v") (:triple "specify" 2 "v") (:triple "define" 2 "v") (:triple "delineate" 2 "v") (:triple "delimit" 1 "v") (:triple "delimitate" 1 "v") (:triple "specify" 3 "v") (:triple "set" 3 "v") (:triple "determine" 4 "v") (:triple "fix" 3 "v") (:triple "limit" 3 "v") (:triple "specify" 4 "v") (:triple "particularize" 1 "v") (:triple "particularise" 1 "v") (:triple "specialize" 2 "v") (:triple "specialise" 2 "v") (:triple "pin_down" 1 "v") (:triple "peg_down" 2 "v") (:triple "nail_down" 2 "v") (:triple "narrow_down" 1 "v") (:triple "narrow" 2 "v") (:triple "specify" 5 "v")))))

(every Specify has 
    (object ((a Entity)))
    (result ((a Specification)))
    (text-nominalization ("specification")))
(Specification has 
    (superclasses (Message))
    (description ("A description of something in terms of specific values of its features"))
    (wn20-synset ((:set (:triple "specification" 1 "n") (:triple "spec" 1 "n")))))

(every Specification has 
    (result-of ((a Specify with (object ((a Entity))) (result ((Self))))))
    (information-content (((?object-instance == (the object of (the result-of of Self))) and (forall (the feature-slot of (the instance-of of ?object-instance)) where ((has-value (the range of It)) or (has-value (the It of ?object-instance))) (:triple ?object-instance It (if (has-value (the It of ?object-instance)) then (the It of ?object-instance) else (an instance of (the range of It)))))))))
(Special-Forces-Unit has 
                                                                                                                                                                                                                                                                                                                 
    (superclasses (Military-Unit)))
(Special-Forces-Squad has 
    (superclasses (Special-Forces-Unit
                      Squad)))

(every Special-Forces-Squad has-definition 
    (instance-of (Special-Forces-Unit
                     Squad)))
(Special-Forces-Regiment has 
    (superclasses (Special-Forces-Unit
                      Regiment)))

(every Special-Forces-Regiment has-definition 
    (instance-of (Special-Forces-Unit
                     Regiment)))
(Special-Forces-Platoon has 
    (superclasses (Special-Forces-Unit
                      Platoon)))

(every Special-Forces-Platoon has-definition 
    (instance-of (Special-Forces-Unit
                     Platoon)))
(Special-Forces-Division has 
    (superclasses (Special-Forces-Unit
                      Division)))

(every Special-Forces-Division has-definition 
    (instance-of (Special-Forces-Unit
                     Division)))
(Special-Forces-Corps has 
    (superclasses (Special-Forces-Unit
                      Corps)))

(every Special-Forces-Corps has-definition 
    (instance-of (Special-Forces-Unit
                     Corps)))
(Special-Forces-Company has 
    (superclasses (Special-Forces-Unit
                      Military-Company)))

(every Special-Forces-Company has-definition 
    (instance-of (Special-Forces-Unit
                     Military-Company)))
(Special-Forces-Brigade has 
    (superclasses (Special-Forces-Unit
                      Brigade)))

(every Special-Forces-Brigade has-definition 
    (instance-of (Special-Forces-Unit
                     Brigade)))
(Special-Forces-Battalion has 
    (superclasses (Special-Forces-Unit
                      Battalion)))

(every Special-Forces-Battalion has-definition 
    (instance-of (Special-Forces-Unit
                     Battalion)))
(Speak has 
    (superclasses (Embody))
    (wn20-synset ((:set (:triple "talk" 2 "v") (:triple "speak" 1 "v") (:triple "utter" 3 "v") (:triple "mouth" 1 "v") (:triple "verbalize" 2 "v") (:triple "verbalise" 2 "v")))))

(every Speak has 
    (description ("The physical act of a producing speech sounds."))
    (result ((a Sound)))
    (agent ((must-be-a Tangible-Entity)
            (a Tangible-Entity)))
    (text-nominalization ("speech")))
(Spatial-Entity has 
    (domain-of (abuts
                   text-abuts
                   angle
                   area
                   away-from-of
                   capacity
                   circumference
                   color
                   complement
                   complement-of
                   depth
                   destination-of
                   diameter
                   is-region-of
                   height
                   is-above
                   is-below
                   text-is-above
                   is-along
                   text-is-along
                   is-at
                   is-at-of
                   text-is-at
                   is-behind
                   is-in-front-of
                   text-is-behind
                   is-beside
                   text-is-beside
                   is-between
                   is-between-of
                   text-is-between
                   is-facing
                   is-faced-by
                   text-is-facing
                   is-inside
                   encloses
                   text-is-inside
                   is-near
                   text-is-near
                   is-north-of
                   is-south-of
                   text-is-north-of
                   text-is-south-of
                   is-northwest-of
                   is-southeast-of
                   text-is-northwest-of
                   text-is-southeast-of
                   is-on
                   has-on-it
                   text-is-on
                   is-opposite
                   text-is-opposite
                   is-oriented-toward
                   is-oriented-toward-of
                   text-is-oriented-toward
                   is-outside
                   does-not-enclose
                   text-is-outside
                   is-over
                   is-under
                   text-is-over
                   is-southwest-of
                   is-northeast-of
                   text-is-southwest-of
                   text-is-northeast-of
                   is-west-of
                   is-east-of
                   text-is-west-of
                   text-is-east-of
                   latitude
                   length
                   location
                   longitude
                   luminance
                   luminous-flux
                   luminous-intensity
                   origin-of
                   path-of
                   perimeter
                   power
                   radius
                   site-of
                   text-site-of
                   size
                   slope
                   space-int-contains
                   space-int-inside
                   space-int-covers
                   space-int-coveredby
                   space-int-disjoint
                   space-int-equal
                   space-int-meet
                   space-int-overlap
                   thickness
                   toward-of
                   voltage
                   width))
    (range-of (abuts
                  text-abuts-of
                  angle-of
                  area-of
                  away-from
                  capacity-of
                  circumference-of
                  color-of
                  complement
                  complement-of
                  depth-of
                  destination
                  diameter-of
                  has-region
                  height-of
                  is-above
                  is-below
                  text-is-above-of
                  is-along
                  text-is-along-of
                  is-at
                  is-at-of
                  text-is-at-of
                  is-behind
                  is-in-front-of
                  text-is-behind-of
                  is-beside
                  text-is-beside-of
                  is-between
                  is-between-of
                  text-is-between-of
                  is-facing
                  is-faced-by
                  text-is-facing-of
                  is-inside
                  encloses
                  text-is-inside-of
                  is-near
                  text-is-near-of
                  is-north-of
                  is-south-of
                  text-is-north
                  text-is-south
                  is-northwest-of
                  is-southeast-of
                  text-is-northwest
                  text-is-southeast
                  is-on
                  has-on-it
                  text-is-on-of
                  is-opposite
                  text-is-opposite-of
                  is-oriented-toward
                  is-oriented-toward-of
                  text-is-oriented-toward-of
                  is-outside
                  does-not-enclose
                  text-is-outside-of
                  is-over
                  is-under
                  text-is-over-of
                  is-southwest-of
                  is-northeast-of
                  text-is-southwest
                  text-is-northeast
                  is-west-of
                  is-east-of
                  text-is-west
                  text-is-east
                  latitude-of
                  length-of
                  location-of
                  longitude-of
                  luminance-of
                  luminous-flux-of
                  luminous-intensity-of
                  origin
                  path
                  perimeter-of
                  power-of
                  radius-of
                  site
                  text-site
                  size-of
                  slope-of
                  space-int-contains
                  space-int-inside
                  space-int-covers
                  space-int-coveredby
                  space-int-disjoint
                  space-int-equal
                  space-int-meet
                  space-int-overlap
                  thickness-of
                  toward
                  voltage-of
                  width-of))
                                                     
    (superclasses (Entity)))

(every Spatial-Entity has 
    (location ((must-be-a Place)))
    (is-outside ((must-be-a Spatial-Entity)))
    (does-not-enclose ((must-be-a Spatial-Entity)))
    (is-inside ((must-be-a Spatial-Entity)))
    (encloses ((must-be-a Spatial-Entity)))
    (abuts ((must-be-a Spatial-Entity)
            (excluded-values (Self))))
    (is-above ((must-be-a Spatial-Entity)))
    (is-below ((must-be-a Spatial-Entity)))
    (is-along ((must-be-a Spatial-Entity)))
    (is-at ((must-be-a Spatial-Entity)))
    (is-behind ((must-be-a Spatial-Entity)))
    (is-in-front-of ((must-be-a Spatial-Entity)))
    (is-on ((must-be-a Spatial-Entity)))
    (has-on-it ((must-be-a Spatial-Entity)))
    (is-opposite ((must-be-a Spatial-Entity)))
    (is-over ((must-be-a Spatial-Entity)))
    (is-under ((must-be-a Spatial-Entity)))
    (is-near ((must-be-a Spatial-Entity))))
(Spacer-DNA-Region has 
    (superclasses (DNA-Noncoding-Sequence))
    (description ("The DNA has-region between Genes which is not transcribed.
                        Can be up to 100,000 nucleotides long.
                        Alberts:ECB:218.")))
(SP-Howitzer-155mm has 
    (superclasses (Artillery)))

(every SP-Howitzer-155mm has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 1.02 ())))))))
(SP-Howitzer-152mm has 
    (superclasses (Artillery)))

(every SP-Howitzer-152mm has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.79 ())))))))
(SP-Howitzer-122mm has 
    (superclasses (Artillery)))

(every SP-Howitzer-122mm has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.65 ())))))))
(Sound has 
    (description ("Mechanical energy vibrations that propagate through a solid, liquid, or gas medium."))
    (superclasses (Energy))
    (wn20-synset ((:set (:triple "sound" 1 "n") (:triple "sound" 3 "n")))))

(every Sound has 
    (object-of ((a Move))))
(Solution has 
                                                                                    
    (superclasses (Mixture))
    (domain-of (base
                   buffer-status
                   solute-species))
    (range-of (base-of
                  buffer-status-of
                  solute-species-of)))

(every Solution has 
    (solute-species ((((forall (the base of Self) where (It isa Nonelectrolyte) It)) && ((forall (the base of Self) where (It isa Strong-Electrolyte) (the has-part of (the has-basic-structural-unit of It)))) && ((forall (the base of Self) where (It isa Weak-Electrolyte) (:set (the has-part of (the has-basic-structural-unit of It)) It))))))
    (pH ((((if (((the1 of (the value of (the solubility of (the base of Self)))) /= *insoluble) and (not (the pH of Self)) and (not (the1 of (the value of (the pOH of Self))))) then (the output of (a Compute-pH-for-Solution with (input (Self)))) [Solution-pH-1])) && ((if ((not (the pH of Self)) and (the1 of (the value of (the pOH of Self)))) then (a PH-Value with (value ((:pair (14 - (the1 of (the value of (the pOH of Self)))) ())))))))))
    (pOH ((if ((not (the pOH of Self)) and (the1 of (the value of (the pH of Self)))) then (a POH-Value with (value ((:pair (14 - (the1 of (the value of (the pH of Self)))) ())))))))
    (volume ((if (not (the volume of Self)) then (the output of (a Compute-Volume-from-Concentration-and-Quantity with (input ((the quantity of (the first of (the base of Self))) (the concentration of (the first of (the base of Self))))))) [Solution-volume-1])))
    (buffer-status ((((if ((the atomic-chemical-formula of (the has-basic-structural-unit of (the base of Self))) and (oneof (the1 of (the value of (the intensity of (the Base-Role plays of (the base of Self))))) where (It = *weak)) and (oneof (the base of Self) where (It isa Salt-Substance))) then (if ((((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the output of (a Compute-Conjugate-Acid with (input ((oneof (the base of Self) where ((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak)))))))))) = (the elements of (the term of (the atomic-chemical-formula of (an instance of (the2 of (the2 of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (oneof (the base of Self) where (It isa Salt-Substance)))))))))))) or ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the output of (a Compute-Conjugate-Acid with (input ((oneof (the base of Self) where ((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak)))))))))) = (the elements of (the term of (the atomic-chemical-formula of (an instance of (the2 of (the1 of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (oneof (the base of Self) where (It isa Salt-Substance)))))))))))))) then (a Buffer-Status-Value with (value ((:pair *basic-buffer nil)))) else (a Buffer-Status-Value with (value ((:pair *non-buffer nil))))))) && ((if ((the atomic-chemical-formula of (the has-basic-structural-unit of (the base of Self))) and (oneof (the1 of (the value of (the intensity of (the Acid-Role plays of (the base of Self))))) where (It = *weak)) and (oneof (the base of Self) where (It isa Salt-Substance))) then (if ((((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the output of (a Compute-Conjugate-Base with (input ((oneof (the base of Self) where ((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak)))))))))) = (the elements of (the term of (the atomic-chemical-formula of (an instance of (the2 of (the1 of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (oneof (the base of Self) where (It isa Salt-Substance)))))))))))) or ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the output of (a Compute-Conjugate-Base with (input ((oneof (the base of Self) where ((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak)))))))))) = (the elements of (the term of (the atomic-chemical-formula of (an instance of (the2 of (the2 of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (oneof (the base of Self) where (It isa Salt-Substance)))))))))))))) then (a Buffer-Status-Value with (value ((:pair *acidic-buffer nil)))) else (a Buffer-Status-Value with (value ((:pair *non-buffer nil))))))))))
    (text-phrase ((if (has-value (the text-phrase of (the has-basic-structural-unit of (the base of Self)))) then (:seq (andify (the text-phrase of (the has-basic-structural-unit of (the base of Self)))) Self) else (the text-base-phrase of Self)))))
(Solute-Species-Entity has 
    (superclasses (Chemical-Entity))
    )

(every Solute-Species-Entity has-definition 
    (instance-of (Chemical-Entity))
    (solute-species-of ((a Solution))))
(Solute has 
    (superclasses (Chemical)))

(every Solute has-definition 
    (instance-of (Chemical
                     [Solute-instance-of-1]))
    (result-of ((a Reaction)))
    (solubility ((a Solubility-Value with (value ((:pair *soluble H2O-Substance)))))))
(Soluble-Substance has 
    (superclasses (Chemical))
    (description ("Substance which dissolves in a fluid.")))
(Solubility-Value has 
    (superclasses (Property-Value))
    (range-of (solubility))
    (domain-of (solubility-of)))

(every Solubility-Value has 
    (property-slot ((solubility)))
    (solubility-of ((must-be-a Chemical)))
    (same-as ((must-be-a Solubility-Value))))
(Solubility-Constant has 
    (superclasses (Constant))
                                                                                        
    (scalar-constant-class-of (solubility)))
(Solid-Substance has 
                                                                                                                                                       
    (superclasses (Substance))
    (description ("A substance in the solid state at room temperature"))
    (wn20-synset ((:set (:triple "solid" 1 "n")))))

(every Solid-Substance has 
    (physical-state ((if (not (has-value (the temperature of Self))) then ((a State-Value with (value (*solid))))))))
(Soldier has 
    (superclasses (Tangible-Entity)))
(SO4-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every SO4-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 8.33E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a SO4-Minus-2))))
(SO4-Minus-2 has 
    (superclasses (Anion)))

(every SO4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("sulfate"))
    (has-acid-name ("sulfuric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 S) (:pair 4 O))))))))
(SO3-Minus-2-Substance has 
    (superclasses (Anion-Substance)))
(SO3-Minus-2 has 
    (superclasses (Anion)))

(every SO3-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("sulfite"))
    (has-acid-name ("sulfurous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 S) (:pair 3 O))))))))
(SO2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every SO2-Substance has 
    (has-basic-structural-unit ((a SO2)))
    (physical-state ((a State-Value with (value ((*gas)))))))
(SO2 has 
    (superclasses (Molecular-Compound)))

(every SO2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 S) (:pair 2 O))))))))
(Sn_NO3_2-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Sn_NO3_2-Substance has 
    (has-basic-structural-unit ((a Sn_NO3_2))))
(Sn_NO3_2 has 
    (superclasses (Ionic-Compound)))

(every Sn_NO3_2 has 
    (has-part ((a Sn-Plus-2)
               (a NO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Sn-Plus-2) (:pair 2 NO3-Minus))))))))
(SnRNP-Ensemble has 
    (superclasses (Nucleoprotein-Complex))
    (description ("A complex of nucleoprotein enzymes involved in the 
                        splicing of mRNA.  Alberts:ECB:220")))

(every SnRNP-Ensemble has 
    (element-type ((SnRNP))))
(SnRNP has 
    (superclasses (Nucleoprotein))
    (description ("A nucleoprotein enzyme involved in the splicing of 
                        mRNA.  Alberts:ECB:220")))

(every SnRNP has 
    (has-part ((a Protein)
               (a RNA-Molecule))))
(Sn-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Sn-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("tin"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Sn))))))))
(Sn has 
    (superclasses (Metal-Atom
                      IVA-Element)))

(every Sn has 
    (atomic-symbol ((Sn)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 50 ()))))))
    (chemical-period (5)))
(Smooth-Endoplasmic-Reticulum has 
    (superclasses (Organic-Structure))
    (description ("Region of the endoplasmic reticulum not associated with
                          ribosomes; involved in synthesis of lipids.
                          Alberts:ECB:G-17.")))

(every Smooth-Endoplasmic-Reticulum has 
    (location ((a Place with (location-of ((a Lipid-Synthesis)))))))
(Smell-Value has 
    (range-of (smell))
    (domain-of (smell-of))
    (superclasses (Property-Value)))
(Smell-Constant has 
    (categorical-constant-class-of (smell))
    (superclasses (Constant))
    )
(Slot-Value-Viewpoint has 
    (superclasses (Viewpoint)))

(every Slot-Value-Viewpoint has 
    (viewpoint-question (((?vq == (the1 of (the viewpoint-query of Self))) and (?fr == (the1 of (the2 of ?vq))) and (?sl == (the2 of (the2 of ?vq))) and (make-phrase (:seq "What is" (if ((?fr isa Entity) and (has-value (the text-slot of ?sl))) then (:seq (the text-def-head of ?fr) (the (the text-slot of ?sl) of ?fr)) else (:seq "the" ?sl "of" (the text-def-head of ?fr))) "nospace" "?")))))
    (viewpoint-answer ((if (has-value (the1 of (the viewpoint-query of Self))) then (if ((the1 of (the1 of (the viewpoint-query of Self))) = *slot-value) then ((?vq == (the1 of (the viewpoint-query of Self))) and (?fr == (the1 of (the2 of ?vq))) and (?sl == (the2 of (the2 of ?vq))) and (?filtfill == (if (has-value (the viewpoint-filter of Self)) then (allof (the ?sl of ?fr) where (It isa (the viewpoint-filter of Self))) else (the ?sl of ?fr))) and (if (?sl = related-to) then (:seq (the text-description of ?fr) (the text-description of (the3 of (the2 of ?vq)))) else (:seq (if (?sl isa Property) then (the text-description of (the ?sl of ?fr)) else (if (?fr isa Event) then (if (not (oneof ?filler in ?filtfill where (not (?filler isa Entity)))) then (the text-description of ?filtfill) else (if (not (oneof ?filler in ?filtfill where (not (?filler isa Event)))) then (:seq (the text-gen of ?fr) "<br>
" (the text-phrase of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "has" ?sl))) (if ((?sl = subevent) and (oneof ?se in ?filtfill where ((the first-subevent of ?fr) includes ?se))) then (:seq "<li>First," (the text-gen of (the first-subevent of ?fr)) "</li>
" (forall-seq ?ne in (the seq of (the (next-event *) of (the first-subevent of ?fr))) (:seq "<li>Then," (the text-gen of ?ne) "</li>
")) (forall ?extra in (the subevent of ?fr) where ((not ((the first-subevent of ?fr) includes ?extra)) and (not ((the (next-event *) of (the first-subevent of ?fr)) includes ?extra))) (:seq "<li>Additionally," (the text-gen of ?extra) "</li>
"))) else (forall ?filler in ?filtfill (:seq "<li>" (the text-gen of ?filler) "</li>
")))) else (:seq (the text-gen of ?fr) "<br>
" (the text-description of ?filtfill)))) else (if ((the number of ?filtfill) > 2) then (:seq (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (forall ?i in ?filtfill (:seq "<li>" (the text-gen of ?i) "</li>
"))) else (the text-description of ?filtfill)))) "<br>
" (if (oneof (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 'It)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most")))) then (make-sentence (:seq (the text-indef-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (andify (forall ?c in (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most"))) (:seq (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c))))) (#'(LAMBDA () (CADADR (KM-UNIQUE0 '?c)))) (#'(LAMBDA () (CDDADR (KM-UNIQUE0 '?c)))))))))))))))))
    (viewpoint-detail ((if (has-value (the1 of (the viewpoint-query of Self))) then (if ((the1 of (the1 of (the viewpoint-query of Self))) = *slot-value) then ((?vq-frame == (the1 of (the2 of (the1 of (the viewpoint-query of Self))))) and (?vq-slot == (the2 of (the2 of (the1 of (the viewpoint-query of Self))))) and (make-phrase (:seq (get-justification (:triple ?vq-frame ?vq-slot *)) "<p>
" "<b>" (the instance-of of ?vq-frame) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of ?vq-frame)) or (the description of (the instance-of of ?vq-frame)))) (if (has-value (the user-assumption of (the instance-of of ?vq-frame))) then (:seq "<p><b>Assumptions:</b><br>
" (forall ?as in (the user-assumption of (the instance-of of ?vq-frame)) (:seq "
<li>" ?as "</li>")))) (get-justification (:triple ?vq-frame instance-of *)) "<br>
" (forall ?vq-val in (the ?vq-slot of ?vq-frame) (:seq (get-justification (:triple ?vq-val instance-of *)) "<br>
")) (if (?vq-slot isa Property) then ((?c-order == (oneof ?co in (the all-instances of Property-Class-Order) where (((the property-slot of ?co) = ?vq-slot) and (oneof ?c in (the classes of ?vq-frame) where ((the elements of (the element of ?co)) includes ?c))))) and (?vq-frameclass == (oneof ?c in (the elements of (the element of ?c-order)) where (?vq-frame isa ?c))) and (:seq (if (not ((the1 of (the element of ?c-order)) = ?vq-frameclass)) then (:seq "In general, the" ?vq-slot "of" (the text-indef-head of ?vq-frame) "is greater than the" ?vq-slot "of" (andify (forall ?c in (#'(LAMBDA () (MEMBER (KM-UNIQUE0 '?vq-frameclass) (KM-UNIQUE0 '(reverse (the element of ?c-order)))))) where (not (?c = ?vq-frameclass)) (the text-indef-head of (an instance of ?c)))) "nospace" ".
")) (if (not ((the1 of (reverse (the element of ?c-order))) = ?vq-frameclass)) then (:seq "In general, the" ?vq-slot "of" (the text-indef-head of ?vq-frame) "is less than the" ?vq-slot "of" (andify (forall ?c in (#'(LAMBDA () (MEMBER (KM-UNIQUE0 '?vq-frameclass) (KM-UNIQUE0 '(the element of ?c-order))))) where (not (?c = ?vq-frameclass)) (the text-indef-head of (an instance of ?c)))) "nospace" ".
"))))) (if (has-value (the used-in-equation of (the ?vq-slot of ?vq-frame))) then ((?vars == (forall ?PV in (the equation-uses of (the used-in-equation of (the ?vq-slot of ?vq-frame))) where (not ((the ?vq-slot of ?vq-frame) includes ?PV)) (:seq (if ((the number of (allof ?var-pair in (the equation-symbol of (the used-in-equation of ?PV)) where ((the2 of ?var-pair) = ?PV))) > 1) then (:seq "<li>" (andify (forall ?var-pair in (the equation-symbol of (the used-in-equation of ?PV)) where ((the2 of ?var-pair) = ?PV) (the1 of ?var-pair))) "are the same.
")) (if (has-value (the1 of (the value of ?PV))) then (:seq "<li>" (the text-description of ?PV) "</li>
"))))) and (?eqs == (forall ?eq in (the equation-expression of (the equation of (the component-of of (the elements of (the viewpoint-target of Self))))) (:seq "<li>" (#'(LAMBDA () (PRETTY-PRINT-EQ-HTML (FIRST (KM0 '?eq))))) "</li>
"))) and (:seq (if ?vars then (:seq "Given the values<br>
" ?vars "<br>
")) (if ?eqs then (:seq "Given the equations<br>
" ?eqs "<br>
")) "<br><li>" (the text-description of (the ?vq-slot of ?vq-frame)) "</li>
")))))))))))
(Slot-Query-Viewpoint has 
    (superclasses (Viewpoint)))

(every Slot-Query-Viewpoint has 
    (viewpoint-question ((make-phrase (:seq "What is the relationship between" (the text-def-head of (the2 of (the2 of (the1 of (the viewpoint-query of Self))))) "and" (the text-def-head of (the3 of (the2 of (the1 of (the viewpoint-query of Self))))) "nospace" "?"))))
    (viewpoint-answer (((?concsl == (forall ?trip in (the elements of (the viewpoint-target of Self)) where (((the2 of ?trip) isa Relation) and (?valphrase == (make-phrase (the text-indef-phrase of (the3 of ?trip)))) and (?valphrase /= "") and (not ((:set "an entity" "an event" "a role" "an intangible-entity" "a tangible-entity" "a spatial-entity" "a place") includes ?valphrase))) (:pair (the1 of ?trip) (the2 of ?trip)))) and (:seq (the text-def-head of (the2 of (the2 of (the1 of (the viewpoint-query of Self))))) "and" (the text-def-head of (the3 of (the2 of (the1 of (the viewpoint-query of Self))))) "are related in the following ways:<ul>
" (forall ?cs in ?concsl (:seq "<li>" "nospace" (make-sentence (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the elements of (the viewpoint-target of Self)) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (the3 of ?trip)))))) "</li>
")) "</ul>
")))))
(Slope-Scale has 
                                          
    (scale-class-of (slope))
    (superclasses (Scale)))
(Slope-Constant has 
    (element-type-of (*horizontal-vertical-scale))
    (scalar-constant-class-of (slope))
    (superclasses (Constant))
    )
(Slide has 
    (superclasses (Move))
    (required-slot (object
                       path))
    (primary-slot (agent
                      origin
                      destination))
    (cmap-correspondence ((:seq object "the thing slid")
                          (:seq agent "the mover")
                          (:seq origin "slid from")
                          (:seq destination "slid to")
                          (:seq path "slid along")))
    (test-case ('((*ice has (instance-of (Tangible-Entity))) (*puck has (instance-of (Tangible-Entity))) (*Be-Touching-for-Slide has (instance-of (Be-Touching)) (object (*puck *ice))) (*Slide has (instance-of (Slide)) (object (*puck)) (path (*ice))) (do-and-next *Slide) (the text-gen of (thelast Slide)) ((the path of *Slide) = *ice) ((the object of *Be-Touching-for-Slide) includes *ice) ((the object of *Be-Touching-for-Slide) includes *puck))))
    (wn16-synset ((:set (:triple "slide" 3 "v"))))
    (wn20-synset ((:set (:triple "slide" 3 "v")))))

(every Slide has 
    (path ((a Tangible-Entity)))
    (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Touching with (object ((the path of Self))))))))
    (text-active-verbseq-sg ("slides"))
    (text-active-verbseq-pl ("slide"))
    (text-passive-verbseq-sg ("slides"))
    (text-passive-verbseq-pl ("slide"))
    (text-nominalization ("sliding")))
(Skin has 
    (superclasses (Organic-Structure)))

(every Skin has 
    (is-part-of ((a Organism))))
(Size-Value has 
    (range-of (size))
    (domain-of (size-of))
    (superclasses (Property-Value))
    (test-case ('((Drink has (superclasses (Substance))) (Ocean has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (size ((a Size-Value)))) (*mybeer has (instance-of (Drink)) (size ((a Size-Value with (value ((:pair *big Drink) (:pair *tiny Ocean))) (less-than ((the size of *mycoffee))))))) (the value of (the size of *mybeer)) ((the less-than of (the size of *mybeer)) includes (the size of *mycoffee)) ((the greater-than of (the size of *mycoffee)) includes (the size of *mybeer))))))
(Size-Scale has 
                                                                                
    (scale-class-of (size))
    (superclasses (Scale)))
(Size-Constant has 
    (element-type-of (*little-gigantic-scale
                         *microscopic-gigantic-scale))
    (scalar-constant-class-of (size))
    (superclasses (Constant))
    )
(Sit-Down has 
    (superclasses (Orient))
    (description ("The act of sitting down. To go to a state of Be-Sitting."))
    (wn20-synset ((:set (:triple "sit" 3 "v") (:triple "sit_down" 1 "v")))))

(every Sit-Down has 
    (agent ((a Entity)))
    (object ((the agent of Self)))
    (resulting-state ((a Be-Sitting)))
    (defeats ((allof (the object-of of (the agent of Self)) where (((the classes of It) = Be-Standing) and ((the object of It) includes (the agent of Self))))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Sitting with (object ((the agent of Self)))) [Sit-Down-pcs-1]))))
    (add-list ((:triple (the resulting-state of Self) object (the agent of Self) [Sit-Down-add-1])))
    (del-list ((forall (the defeats of Self) (:triple It object (the agent of Self) [Sit-Down-del-1]))))
    (text-active-verbseq-sg ("sits"))
    (text-active-verbseq-pl ("sit"))
    (text-nominalization ("sitting")))
(Single-Strand-Binding-Protein has 
    (superclasses (DNA-Regulatory-Protein))
    (description ("A protein which binds to single-stranded DNA during DNA
                        replication to prevent it from reforming the double 
                        helix Alberts:ECB:197.")))
(Single-Cation has 
                              
    (superclasses (Ion))
    (description ("A positively charged ion. Alberts:ECB:G-3.")))

(every Single-Cation has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Simplicity has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Signal has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "signal" 1 "n") (:triple "signaling" 1 "n") (:triple "sign" 3 "n"))))
    (wn20-synset ((:set (:triple "signal" 1 "n") (:triple "signaling" 1 "n") (:triple "sign" 3 "n")))))

(every Signal has 
    (in-event ((a Transmit)))
    (played-by ((a Entity with (object-of ((the Transmit in-event of Self)))))))
(Sigma-Factor has 
    (superclasses (Nucleoprotein))
    (description ("A subunit of procaryotic RNA polymerase which interacts
                        with the promoter to signal the polymerase to initiate
                        transcription at a specific sequence in template DNA.
                        Lodish:MCB:347. ")))

(every Sigma-Factor has 
    (purpose ((a Connector with (in-event ((a Attach with (object ((a RNA-Polymerase))) (base ((a Promoter)))))))))
    (is-part-of ((a RNA-Polymerase))))
(SiF6-Minus-2 has 
    (superclasses (Anion)))

(every SiF6-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Si) (:pair 6 F))))))))
(Si has 
    (superclasses (Metalloid
                      IVA-Element)))

(every Si has 
    (atomic-symbol ((Si)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 14 ()))))))
    (chemical-period (3)))
(Shut-Out has 
    (caused-by-class-of (Be-Shut-Out))
    (superclasses (Obstruct))
    (required-slot (object
                       base))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the thing Shut-Out")
                          (:seq base "the enclosure")
                          (:seq agent "the Out-Shutter")))
    (wn16-synset ((:set (:triple "shut_out" 1 "v") (:triple "exclude" 2 "v") (:triple "keep_out" 1 "v") (:triple "shut" 3 "v"))))
    (wn20-synset ((:set (:triple "shut_out" 1 "v") (:triple "exclude" 2 "v") (:triple "keep_out" 1 "v") (:triple "shut" 3 "v")))))

(every Shut-Out has 
    (resulting-state ((a Be-Shut-Out)))
    (base ((a Tangible-Entity with (plays ((a Container))))))
    (object ((a Tangible-Entity)))
    (ncs-list ((forall (the object of Self) (:triple It is-inside (the base of Self) [Shut-Out-ncs-1]))))
    (add-list ((forall (the object of Self) (:triple It object-of (the resulting-state of Self) [Shut-Out-add-1]))
               (:triple (the base of Self) base-of (the resulting-state of Self) [Shut-Out-add-2])))
    (text-active-verbseq-sg ("shuts out"))
    (text-active-verbseq-pl ("shut out"))
    (text-passive-verbseq-sg ("gets shut out"))
    (text-passive-verbseq-pl ("get shut out"))
    (text-base ((if (has-value (the base of Self)) then ("of"))))
    (preparatory-event ((:default (a Admit with (base ((the base of Self))) (object ((the object of Self)))) (a Exit with (base ((the base of Self))) (object ((the object of Self)))))))
    (text-nominalization ("shutting")))
(Shorten has 
    (superclasses (Decrease))
    (test-case ('((*mycarantenna has (instance-of (Substance)) (length (*mycarantennalength))) (*mycarantennalength has (instance-of (Length-Value)) (value ((:pair 10000 *millimeter)))) (a Decrease with (object (*mycarantenna)) (property-slot (length))) ((thelast Decrease) isa Shorten) (do-and-next (thelast Shorten)) ((the less-than of (the length of *mycarantenna)) includes *mycarantennalength))))
    (wn20-synset ((:set (:triple "shorten" 1 "v") (:triple "shorten" 3 "v")))))

(every Shorten has 
    (text-nominalization ("shortening")))

(every Shorten has-definition 
    (instance-of (Decrease))
    (property-slot ((length))))
(Shipping has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "transportation" 5 "n") (:triple "shipping" 1 "n") (:triple "transport" 3 "n")))))

(every Shipping has 
    (text-nominalization ("shipping")))
(Shelf has 
    (superclasses (Furniture))
    (wn20-synset ((:set (:triple "shelf" 1 "n")))))
(Shape-Value has 
    (range-of (shape))
    (domain-of (shape-of))
    (superclasses (Property-Value)))
(Shape-Constant has 
    (categorical-constant-class-of (shape))
    (superclasses (Constant))
    )
(Sg has 
    (superclasses (Metal-Atom
                      VIB-Element)))

(every Sg has 
    (atomic-symbol ((Sg)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 106 ()))))))
    (chemical-period (7)))
(Sex-Value has 
    (range-of (sex))
    (domain-of (sex-of))
    (superclasses (Property-Value)))
(Sex-Constant has 
    (categorical-constant-class-of (sex))
    (superclasses (Constant))
    )
(Session has 
    (superclasses (Interaction))
    (wn20-synset ((:set (:triple "session" 1 "n") (:triple "session" 3 "n")))))

(every Session has 
    (text-nominalization ("session")))
(Service has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "service" 1 "n")))))

(every Service has 
    (donor ((a Entity)))
    (recipient ((a Entity)))
    (object ((must-be-a Entity)))
    (instrument ((must-be-a Entity)))
    (text-nominalization ("service")))
(Serine has 
    (superclasses (Uncharged-Polar-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("An uncharged polar amino acid with a methanol side 
                        chain.  Souther")))

(every Serine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methanol-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methanol-Group)))))))
(Sequence has 
                                     
    (superclasses (Entity))
    (test-case ('((*e1 has (instance-of (Entity)) (next-element (*e2))) (*e2 has (instance-of (Entity)) (next-element (*e3))) (*e3 has (instance-of (Entity))) (*e4 has (instance-of (Entity)) (next-element (*e5))) (*e5 has (instance-of (Entity))) (*e6 has (instance-of (Entity)) (next-element (*e7))) (*e7 has (instance-of (Entity)) (next-element (*e8))) (*e8 has (instance-of (Entity)) (next-element (*e9))) (*e9 has (instance-of (Entity))) (*S1 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*e1)) (element (*e1 *e2 *e3))) (*S2 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*e4)) (element (*e4 *e5))) (*S3 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*e6)) (element (*e6 *e7 *e8 *e9))) (*S4 has (instance-of (Sequence)) (element-type (Entity)) (first-element (*S1)) (element (*S1 *S2 *S3))) ((the element of *S1) = (:set *e1 *e2 *e3)) ((the element of *S4) = (:set *S1 *S2 *S3)))))
    (wn20-synset ((:set (:triple "series" 1 "n")))))

(every Sequence has 
    (first-element ((<> Self)
                    (oneof (the element-type of Self) where ((oneof2 (the classes of It) where (TheValue isa It2)))))))
(SeO4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every SeO4-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 4.55E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a SeO4-Minus-2))))
(SeO4-Minus-2 has 
    (superclasses (Anion)))

(every SeO4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("selenate"))
    (has-acid-name ("selenic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Se) (:pair 4 O))))))))
(SeO3-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every SeO3-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.89E-6 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a SeO3-Minus-2))))
(SeO3-Minus-2 has 
    (superclasses (Anion)))

(every SeO3-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("selenite"))
    (has-acid-name ("selenous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Se) (:pair 3 O))))))))
(Sentience-Value has 
    (range-of (sentience))
    (domain-of (sentience-of))
    (superclasses (Property-Value)))
(Sentience-Constant has 
    (categorical-constant-class-of (sentience))
    (superclasses (Constant))
    )
(Sense has 
                                                            
    (superclasses (Create))
    (required-slot (experiencer
                       object))
    (test-case ('((*Sound-Wave-1 has (instance-of (Entity))) (*Ted has (instance-of (Tangible-Entity))) (*Sense has (instance-of (Sense)) (experiencer (*Ted)) (object (*Sound-Wave-1))) (do-and-next *Sense) (the text-gen of (thelast Sense)))))
    (wn16-synset ((:set (:triple "sense" 1 "v") (:triple "feel" 1 "v"))))
    (wn20-synset ((:set (:triple "sense" 1 "v") (:triple "feel" 1 "v")))))

(every Sense has 
    (object ((a Tangible-Entity)))
    (agent ((constraint (TheValue & (the experiencer of Self)))))
    (experiencer ((a Tangible-Entity)))
    (result ((a Message)))
    (text-active-verbseq-sg ("Senses"))
    (text-active-verbseq-pl ("Sense"))
    (text-argslots ((:seq experiencer object)))
    (text-nominalization ("sensing")))
(Send has 
    (superclasses (Action))
    (required-slot (recipient
                       agent
                       donor
                       object))
    (primary-slot (instrument
                      origin
                      path
                      destination
                      subevent))
    (cmap-correspondence ((:seq recipient "recipient")
                          (:seq agent "sender")
                          (:seq donor "donor")
                          (:seq object "the thing sent")
                          (:seq subevent "subevent")
                          (:seq instrument "instrument")
                          (:seq origin "moved from")
                          (:seq path "moved through")
                          (:seq destination "moved to")))
    (test-case ('((*Fresno has (instance-of (Place))) (*Detroit has (instance-of (Place))) (*Blue-Package has (instance-of (Physical-Object)) (location (*Fresno))) (*Victor has (instance-of (Tangible-Entity)) (possesses (*Blue-Package)) (location (*Fresno))) (*Maurice has (instance-of (Tangible-Entity)) (location (*Detroit))) (*Send has (instance-of (Send)) (agent (*Victor)) (recipient (*Maurice)) (object (*Blue-Package))) (do-script *Send) (the text-gen of (thelast Send)) (forall (the subevent of (thelast Send)) (the text-gen of It)) ((the possesses of *Maurice) = *Blue-Package) ((the location of *Maurice) = *Detroit) ((the possesses of *Victor) /= *Blue-Package) ((the location of *Victor) = *Fresno) ((the location of *Blue-Package) = *Detroit) ((the location of *Blue-Package) /= *Fresno) (new-situation) (*virus has (instance-of (Physical-Object))) (*CDC has (instance-of (Spatial-Entity)) (location (*Atlanta))) (*Atlanta has (instance-of (Place))) (*Bossie has (instance-of (Living-Entity)) (possesses (*virus))) (*river has (instance-of (Tangible-Entity))) (a Send with (object (*virus)) (path (*river)) (donor (*Bossie)) (recipient (*CDC))) (do-script (thelast Send)) ((the is-possessed-by of *virus) = *CDC) ((the is-possessed-by of *virus) /= *Bossie) ((the location of *virus) = *Atlanta))))
    (wn16-synset ((:set (:triple "send" 2 "v") (:triple "send" 3 "v") (:triple "mail" 2 "v") (:triple "post" 9 "v") (:triple "send_out" 1 "v"))))
    (wn20-synset ((:set (:triple "send" 2 "v") (:triple "send" 3 "v") (:triple "mail" 2 "v") (:triple "post" 11 "v") (:triple "send_out" 1 "v")))))

(every Send has 
    (recipient ((a Tangible-Entity)))
    (agent ((a Entity)))
    (donor ((the agent of Self)))
    (object ((a Tangible-Entity)))
    (origin ((the donor of Self)))
    (path ((must-be-a Spatial-Entity)))
    (destination ((the recipient of Self)))
    (first-subevent ((the Relinquish subevent of Self)))
    (subevent ((a Relinquish with (agent ((the agent of Self))) (object ((the object of Self))) (next-event ((the Move subevent of Self))))
               (a Move with (object ((the object of Self))) (origin ((the origin of Self))) (path ((the path of Self))) (destination ((the destination of Self))) (next-event ((the Deliver subevent of Self))))
               (a Deliver with (object ((the object of Self))) (donor ((the donor of Self))) (recipient ((the recipient of Self))))))
    (text-active-verbseq-sg ("sends"))
    (text-active-verbseq-pl ("send"))
    (text-passive-verbseq-sg ("gets sent"))
    (text-passive-verbseq-pl ("get sent"))
    (dcs-list ((if (has-value (the path of Self)) then ((forall (the object of Self) (:triple It location (if ((the path of Self) isa Place) then (the path of Self) else (the location of (the path of Self)))))))))
    (preparatory-event (((:default (forall (the object of Self) (a Move with (object (It)) (destination ((the origin of Self)))))))))
    (text-nominalization ("sending")))
(Selling has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "merchandising" 1 "n") (:triple "marketing" 1 "n") (:triple "commerce" 1 "n")))))

(every Selling has 
    (text-nominalization ("selling")))
(Sell has 
    (superclasses (Relinquish))
    (test-case ('((new-situation) (*Boat has (instance-of (Tangible-Entity))) (*Jack has (instance-of (Tangible-Entity)) (possesses (*Boat))) (*2000-Dollars has (instance-of (Money)) (worth ((a Worth-Value with (value ((:pair 2000 *usdollar))))))) (*Jill has (instance-of (Tangible-Entity)) (possesses (*2000-Dollars))) (a Sell with (agent (*Jack)) (object (*Boat)) (recipient (*Jill)) (instrument (*2000-Dollars))) (do-script (thelast Sell)) (the text-gen of (thelast Sell)) ((the possesses of *Jill) = *Boat) ((the is-possessed-by of *Boat) = *Jill) ((the agent of (thelast Sell)) = (the donor of (thelast Sell))) ((the possesses of *Jack) = *2000-Dollars) ((the is-possessed-by of *2000-Dollars) = *Jack))))
    (wn20-synset ((:set (:triple "sell" 1 "v")))))

(every Sell has 
    (recipient ((a Tangible-Entity)))
    (instrument ((a Money)))
    (first-subevent ((a Transfer with (object ((the instrument of Self))) (agent ((the recipient of Self))) (donor ((the recipient of Self))) (recipient ((the agent of Self))))))
    (subevent ((the first-subevent of Self)))
    (text-active-verbseq-sg ("sells"))
    (text-active-verbseq-pl ("sell"))
    (text-instrument ("for"))
    (text-nominalization ("sale")))
(Self-Propelled-Artillery-Regiment has 
    (superclasses (Artillery-Unit
                      Regiment)))

(every Self-Propelled-Artillery-Regiment has-definition 
    (instance-of (Artillery-Unit
                     Regiment)))
(Select has 
    (superclasses (Action))
    (description ("choose one item from a list"))
    (wn20-synset ((:set (:triple "choose" 1 "v") (:triple "take" 10 "v") (:triple "select" 1 "v") (:triple "pick_out" 1 "v")))))

(every Select has 
    (base ((a Entity)))
    (object ((oneof (the base of Self) where t)))
    (text-nominalization ("selection")))
(Seize has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task to take possession of a designated area")))

(every Seize has 
    (agent ((a Military-Unit)))
    (object ((a Spatial-Entity)))
    (base ((a Military-Unit)
           (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the base of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (resulting-state ((a Be-Controlled with (agent ((the agent of Self))) (object ((the object of Self))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 3 ()))))))
    (text-active-verbseq-sg ("seizes"))
    (text-active-verbseq-pl ("seize"))
    (text-base ("from"))
    (text-argslots ((:seq base site path))))
(See has 
    (superclasses (Sense))
    (wn20-synset ((:set (:triple "see" 1 "v")))))

(every See has 
    (object ((a Light)
             (must-be-a Light)))
    (text-nominalization ("seeing")))
(Security has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Secure has 
    (superclasses (Non-Engagement-Military-Task))
    (description ("a tactical mission task to prevent a unit, facility, or location from being damaged")))

(every Secure has 
    (agent ((a Military-Unit)))
    (object ((must-be-a Spatial-Entity with (allegiance ((the allegiance of (the agent of Self)))))))
    (base ((a Military-Unit)
           (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (text-active-verbseq-sg ("secures"))
    (text-active-verbseq-pl ("secure"))
    (text-base ("against"))
    (text-argslots ((:seq base site path))))
(Section has 
    (member-of (_Partition8))
    (superclasses (Military-Unit)))
(Secreted-Protein has 
    (superclasses (Protein))
    (description ("A protein that is secreted from the cell. Souther.")))
(Seat has 
    (superclasses (Role))
    (wn20-synset ((:set (:triple "seat" 3 "n") (:triple "seat" 4 "n")))))
(Se has 
    (superclasses (Non-Metal-Atom
                      VIA-Element)))

(every Se has 
    (atomic-symbol ((Se)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 34 ()))))))
    (chemical-period (4)))
(Scrub has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Scrub has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit)))))))
(Screen has 
    (superclasses (Engagement-Military-Task))
    (description ("a form of security operation that primarily provides early warning to the protected force")))

(every Screen has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit with (allegiance ((the allegiance of (the agent of Self)))))))
    (base ((a Military-Unit)
           (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the base of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.3 ()))))))
    (text-active-verbseq-sg ("screens"))
    (text-active-verbseq-pl ("screen"))
    (text-base ("from"))
    (text-argslots ((:seq base site path))))
(Scale has 
    (range-of (scale-class))
    (domain-of (scale-class-of))

    (superclasses (Property-Group
                      Aggregate)))
(Scalar-Concentration-Value has 
    (superclasses (Property-Value))
    (range-of (scalar-concentration))
    (domain-of (scalar-concentration-of)))

(every Scalar-Concentration-Value has 
    (property-slot ((scalar-concentration))))
(Scalar has 
    (domain-of (scalar-constant
                   scalar-value-of))
    (range-of (scalar-constant-of
                  scalar-value))
    (superclasses (Property-Group)))
(Sc has 
    (superclasses (Metal-Atom
                      IIIB-Element)))

(every Sc has 
    (atomic-symbol ((Sc)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 21 ()))))))
    (chemical-period (4)))
(Sb has 
    (superclasses (Metalloid
                      VA-Element)))

(every Sb has 
    (atomic-symbol ((Sb)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 51 ()))))))
    (chemical-period (5)))
(Salt-Substance has 
                                                                                                                                                                                               
    (superclasses (Ionic-Compound-Substance))
    (member-of (_Partition9)))

(every Salt-Substance has 
    (physical-state ((a State-Value with (value ((*solid))) [Salt-Substance-state-1]))))

(every Salt-Substance has-definition 
    (instance-of (Chemical
                     [Salt-Substance-instance-of-1]))
    (has-basic-structural-unit ((a Salt))))
(Salt-Status-Value has 
    (superclasses (Property-Value))
    (range-of (salt-status))
    (domain-of (salt-status-of)))

(every Salt-Status-Value has 
    (property-slot ((salt-status))))
(Salt-Status-Constant has 
    (superclasses (Constant))
                     
    (scalar-constant-class-of (salt-status)))
(Salt-Solution has 
    (superclasses (Solution)))

(every Salt-Solution has 
    (pH ((if ((the1 of (the value of (the solubility of (the base of Self)))) /= *insoluble) then ((a PH-Value) & (#'(LAMBDA () (LET* ((BASE (KM-UNIQUE0 (BACKQUOTE (the base of Self)))) (UNID-CATION (KM-UNIQUE0 (BACKQUOTE (the Cation-Substance has-part of (UNQUOTE BASE))))) (CATION (KM-UNIQUE0 (BACKQUOTE ((UNQUOTE UNID-CATION) & (the output of (a Identify-Chemical with (input ((UNQUOTE UNID-CATION))))))))) (CATION-ACID-ROLE (KM-UNIQUE0 (BACKQUOTE (the+ Acid-Role plays of (UNQUOTE CATION))))) (CATION-EFFECT (KM-UNIQUE0 (BACKQUOTE (the output of (a Compute-Effect-of-Hydrolysis-of-Ions with (input (Self (UNQUOTE CATION)))))))) (CATION-KA (KM-UNIQUE0 (BACKQUOTE (the1 of (the value of ((the ka of (UNQUOTE CATION-ACID-ROLE)) or (the default-ka of (UNQUOTE CATION-ACID-ROLE)))))))) (UNID-ANION (KM-UNIQUE0 (BACKQUOTE (the Anion-Substance has-part of (UNQUOTE BASE))))) (ANION (KM-UNIQUE0 (BACKQUOTE ((UNQUOTE UNID-ANION) & (the output of (a Identify-Chemical with (input ((UNQUOTE UNID-ANION))))))))) (ANION-BASE-ROLE (KM-UNIQUE0 (BACKQUOTE (the+ Base-Role plays of (UNQUOTE ANION))))) (ANION-EFFECT (KM-UNIQUE0 (BACKQUOTE (the output of (a Compute-Effect-of-Hydrolysis-of-Ions with (input (Self (UNQUOTE ANION)))))))) (ANION-KB (KM-UNIQUE0 (BACKQUOTE (the1 of (the value of ((the kb of (UNQUOTE ANION-BASE-ROLE)) or (the default-kb of (UNQUOTE ANION-BASE-ROLE))))))))) (IF (AND CATION-EFFECT ANION-EFFECT) (IF (AND CATION-KA ANION-KB) (IF (> CATION-KA ANION-KB) CATION-EFFECT ANION-EFFECT) (KM-UNIQUE0 (BACKQUOTE (a PH-Value with (value ((:pair 7 nil))))))) (IF CATION-EFFECT CATION-EFFECT (IF ANION-EFFECT ANION-EFFECT (KM-UNIQUE0 (BACKQUOTE (a PH-Value with (value ((:pair 7 nil)))))))))))))))))

(every Salt-Solution has-definition 
    (instance-of (Solution))
    (base ((a Salt-Substance)
           (exactly 1 Chemical))))
(Salt has 
                                                                    
    (superclasses (Ionic-Compound))
    (test-case ('(((a NH4Cl) isa Salt) ((a CH3NH3Cl) isa Salt)))))

(every Salt has-definition 
    (instance-of (Compound))
    (salt-status ((a Salt-Status-Value with (value ((:pair *salt nil)))))))
(S-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every S-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 100000 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a S-Minus-2))))
(S-Minus-2 has 
    (superclasses (Anion)))

(every S-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("sulfide"))
    (has-acid-name ("hydrosulfuric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 S))))))))
(S has 
    (superclasses (Non-Metal-Atom
                      VIA-Element)))

(every S has 
    (has-molecular-name ("sulfide"))
    (atomic-symbol ((S)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 16 ()))))))
    (chemical-period (3)))
(Ruin has 
    (caused-by-class-of (Be-Ruined))
    (superclasses (Break))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq agent "the destroyer")
                          (:seq object "the object ruined")
                          (:seq by-means-of "an event necessary to ruining the object")))
    (test-case ('((*House has (instance-of (Tangible-Entity))) (a Ruin with (object (*House))) (do-and-next (thelast Ruin)) (the text-gen of (thelast Ruin)) (forall (the resulting-state of (thelast Ruin)) (the text-gen of It)) (has-value (the Be-Ruined object-of of *House)) (a Repair with (object (*House))) (not (try-do (thelast Repair))) (the text-gen of (thelast Repair)))))
    (wn16-synset ((:set (:triple "ruin" 1 "v") (:triple "destroy" 2 "v"))))
    (wn20-synset ((:set (:triple "ruin" 1 "v") (:triple "destroy" 2 "v")))))

(every Ruin has 
    (object ((a Tangible-Entity)))
    (agent ((must-be-a Tangible-Entity)))
    (instrument ((must-be-a Tangible-Entity)))
    (by-means-of ((must-be-a Event)))
    (resulting-state ((a Be-Ruined)))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Ruin-add-1])))
    (text-active-verbseq-sg ("ruins"))
    (text-active-verbseq-pl ("ruin"))
    (text-passive-verbseq-sg ("gets ruined"))
    (text-passive-verbseq-pl ("get ruined"))
    (text-nominalization ("ruin")))
(Rubber has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "rubber" 1 "n") (:triple "india_rubber" 1 "n") (:triple "gum_elastic" 1 "n") (:triple "caoutchouc" 1 "n")))))
(Ru has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Ru has 
    (atomic-symbol ((Ru)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 44 ()))))))
    (chemical-period (5)))
(RRNA has 
                                                                
    (superclasses (RNA-Transcript))
    (description ("Any one of a number of specific RNA molecules that form
                        part of the structure of a ribosome and participate in
                        the synthesis of proteins.  Alberts:ECB:G-16.")))
(Rough-Endoplasmic-Reticulum has 
    (superclasses (Organic-Structure))
    (description ("Region of the endoplasmic reticulum associated with
                        ribosomes; involved in the synthesis of secreted and
                        membrane-bound proteins.  Alberts:ECB:G-16.")))
(Rotor-Aircraft has 
                                         
    (superclasses (Aircraft)))
(Rotational-Rate-Value has 
    (range-of (rotational-rate))
    (domain-of (rotational-rate-of))
    (superclasses (Property-Value)))
(Rotational-Rate-Constant has 
    (scalar-constant-class-of (rotational-rate))
    (superclasses (Constant)))
(Room has 
                                                                        
    (superclasses (Architectural-Structure))
    (description ("an architectural structure playing a container within a building"))
    (wn20-synset ((:set (:triple "room" 1 "n")))))

(every Room has 
    (plays ((a Container)))
    (has-part ((a Floor)
               (a Wall)
               (a Ceiling)))
    (is-part-of ((a Building))))
(Roof has 
    (superclasses (Architectural-Structure))
    (description ("an architectural structure covering another architectural structure"))
    (test-case ('((*TheSnow has (instance-of (Substance))) (*TheBench has (instance-of (Artifact))) (*TheGazebo has (instance-of (Architectural-Structure)) (has-part ((a Roof))) (plays ((a Container with (content (*TheBench)))))) (*TheWinterSky has (instance-of (Place)) (is-above ((the Roof has-part of *TheGazebo)))) ((the is-above of (the Roof has-part of *TheGazebo)) is-superset-of (:set *TheGazebo *TheBench)) (a Fall with (object (*TheSnow)) (origin (*TheWinterSky)) (destination (*TheBench))) (not (try-do (thelast Fall))))))
    (wn20-synset ((:set (:triple "roof" 1 "n")))))

(every Roof has 
    (is-part-of ((a Architectural-Structure)))
    (plays ((a Cover)))
    (is-above ((((the is-part-of of Self)) && ((if (oneof (the plays of (the Architectural-Structure is-part-of of Self)) where (It isa Container)) then (the content of (the Container plays of (the Architectural-Structure is-part-of of Self)))))))))
(Rolling-Hills has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Rolling-Hills has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit)))))))
(Role has 
    (range-of (capability
                  in-event-of
                  in-organization-of
                  plays
                  purpose
                  time-of-existence-of))
    (domain-of (capability-of
                   in-event
                   in-organization
                   played-by
                   purpose-of
                   time-of-existence))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
    (superclasses (Thing)))

(every Role has 
    (identifier ((((forall (the called of Self) (a Text-Field with (information-content ((It)))))) && ((forall (the uniquely-called of Self) (a Text-Field with (information-content ((It)))))))))
    (name ((if (anonymous-instancep Self) then (oneof ?c1 in (the classes of Self) where (not (oneof ?c2 in (the classes of Self) where ((?c1 /= ?c2) and (?c1 subsumes ?c2))))))))
    (text-gen ((make-phrase (the text-phrase of Self))))
    (text-description ((the text-sentence of Self)))
    (text-head ((if (anonymous-instancep Self) then (:seq Self (if (has-value (the uniquely-called of Self)) then (:seq "(called" (the uniquely-called of Self) ")") else (if (has-value (the called of Self)) then (:seq "(called" (the called of Self) ")")))) else (the name of Self))))
    (text-def-determiner ((if (anonymous-instancep Self) then (if (has-value (the is-possessed-by of Self)) then (:seq (the text-def-head of (the is-possessed-by of Self)) "'s") else (:seq "the")))))
    (text-indef-determiner ((if (anonymous-instancep Self) then (if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (the text-head of Self))) 0))))) then (:seq "an") else (:seq "a")))))
    (text-def-head ((:seq (the text-def-determiner of Self) (the text-head of Self))))
    (text-indef-head ((:seq (the text-indef-determiner of Self) (the text-head of Self))))
    (text-is-above ("above"))
    (text-is-along ("along"))
    (text-is-between ("between"))
    (text-is-behind ("behind"))
    (text-is-opposite ("opposite"))
    (text-is-outside ("outside"))
    (text-is-over ("over"))
    (text-is-beside ("beside"))
    (text-is-near ("near"))
    (text-is-at ("at"))
    (text-is-on ("on"))
    (text-site-of ("site of"))
    (text-abuts ("abutting"))
    (text-is-inside ("inside"))
    (text-is-part-of ("part of"))
    (text-has-part ("made up of"))
    (text-material ("made of"))
    (text-content ("containing"))
    (text-result-of ("result of"))
    (text-raw-material-of ("raw material of"))
    (text-agent-of ("agent of"))
    (text-is-north-of ("north of"))
    (text-is-northeast-of ("northeast of"))
    (text-is-east-of ("east of"))
    (text-is-southeast-of ("southeast of"))
    (text-is-south-of ("south of"))
    (text-is-southwest-of ("southwest of"))
    (text-is-west-of ("west of"))
    (text-is-northwest-of ("northwest of"))
    (text-premodslots ((:seq area length height thickness volume size capacity depth mass density temperature wetness brightness breakability consistency shape smell taste texture trait age color physical-state sex)))
    (text-premods ((if (has-value (the text-premodslots of Self)) then (forall-seq (the text-premodslots of Self) where (has-value (the It of Self)) (if (It isa Property) then (if (has-value (the value of (the It of Self))) then (the text-phrase of (the It of Self))) else (the text-head of (the It of Self)))))))
    (text-postmodslots ((:seq material content is-above is-along is-between is-behind is-opposite is-outside is-over is-beside is-at is-on site-of abuts is-inside is-north-of is-northeast-of is-east-of is-southeast-of is-south-of is-southwest-of is-west-of is-northwest-of)))
    (text-postmods ((if (has-value (the text-postmodslots of Self)) then (forall-seq (the text-postmodslots of Self) where (has-value (the It of Self)) (:seq (the (the text-slot of It) of Self) (andify (the text-def-head of (the It of Self))))))))
    (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
    (text-indef-phrase ((:seq (the text-indef-determiner of Self) (the text-premods of Self) (the text-head of Self))))
    (text-sentence ((make-sentence ((if (has-value (the elements of (the text-postmods of Self))) then (:seq (the text-base-phrase of Self) "is" (andify (the elements of (the text-postmods of Self)))) else (if (has-value (the elements of (the text-premods of Self))) then (:seq (the text-def-head of Self) "is" (andify (the elements of (the text-premods of Self)))) else (if (has-value (the is-possessed-by of Self)) then (:seq (the text-gen of (the is-possessed-by of Self)) "has" (the text-indef-head of Self)) else (the text-existential-there of Self))))))))
    (text-existential-there ((make-sentence (:seq "there is" (if (anonymous-instancep Self) then (the text-indef-head of Self) else (:seq (the text-indef-head of (an instance of (oneof (the classes of Self) where t))) "called" (the text-head of Self)))))))
    (text-definition-sentence ((make-sentence (:seq (the text-indef-head of Self) "is" ((the elements of (andify (forall (the superclasses of (the classes of Self)) (the text-indef-head of (an instance of It))))) or "something") (if ((has-value (the elements of (the text-postmods of Self))) and (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) then ((?sup == (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) and (:seq "that is" (andify (allof (the elements of (the text-postmods of Self)) where (not ((the elements of (the text-postmods of (an instance of ?sup))) includes It)))))))))))
    (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))
(Road has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Road has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit)))))))
(RNA-Untranslated-Region has 
    (superclasses (RNA-Region))
    (description ("Region at either end of the mRNA molecule which is
                        not translated, e.g., the poly-A tail. Souther.")))
(RNA-Translation has 
    (superclasses (Produce
                      Enzyme-Catalysis))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("The synthesis of a protein from amino acids
                                  guided by mRNA. Souther.")))

(every RNA-Translation has 
    (agent ((a Living-Entity)))
    (raw-material ((a Amino-Acid)
                   (at-least 2 Amino-Acid)))
    (result ((a Amino-Acid-Sequence)))
    (instrument ((a Ribosomal-Peptidyl-Transferase)))
    (text-argslots ((:seq raw-material instrument result)))
    (text-active-verbseq-sg ("synthesizes"))
    (text-active-verbseq-pl ("synthesize"))
    (text-passive-verbseq-sg ("gets synthesized"))
    (text-passive-verbseq-pl ("get synthesized"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(RNA-Translated-Region has 
    (superclasses (RNA-Region))
    (description ("Region of the mRNA which directs the selection of
                        amino acids to make up a particular protein.
                        Souther.")))

(every RNA-Translated-Region has 
    (has-part ((a Protein-Initiator-Codon)
               (a Protein-Stop-Codon)
               (a RNA-Coding-Sequence))))
(RNA-Transcript has 
                                                                                                                                                                                                                                            
    (superclasses (RNA-Molecule))
    (description ("RNA product of DNA transcription (Alberts:MBC:1994).")))
(RNA-Sequence has 
                                                                                                                                                                                        
    (superclasses (Nucleotide-Sequence))
    (description ("A nucleotide sequence of ribonucleotides.
                         Souther. ")))

(every RNA-Sequence has 
    (element-type ((Ribonucleotide)))
    (has-part ((a 5-Prime-Ribonucleotide)
               (a Internal-RNA-Sequence)
               (a 3-Prime-Ribonucleotide))))
(RNA-Regulatory-Sequence has 
                                                                                                                                                                                            
    (superclasses (Regulatory-Sequence))
    (description ("A sequence of mRNA ribonucleotides on an RNA transcript
                        that regulates the processing of RNA or translation
                        of RNA.  Souther.")))
(RNA-Regulatory-Protein has 
    (superclasses (Regulatory-Protein))
    (description ("A protein which regulates mRNA processing or
                        translation.  Souther. "))
    )
(RNA-Region has 
                                                                                                                                                   
    (superclasses (Nucleic-Acid-Region))
    (description ("A has-region of an RNA molecule.  In mRNA, includes 
                        untranslated  and coding regions. Souther.")))

(every RNA-Region has 
    (is-region-of ((a RNA-Molecule))))
(RNA-Primer has 
    (superclasses (Oligoribonucleotide))
    (description ("A short RNA sequence containing a free 3' hydroxyl group
                    that forms base pairs with a complementary DNA template
                    strand and functions as the starting point for addition
                    of nucleotides to copy the template strand. modified from
                    Lodish:MCB:G-14")))

(every RNA-Primer has 
    (length ((at-most 15 Nucleotide)))
    (result-of ((must-be-a DNA-Priming))))
(RNA-Polymerase has 
                                                                                  
    (superclasses (Polymerase))
    (description ("Enzyme that catalyzes the synthesis of an RNA
                               molecule on a DNA template from nucleoside 
                               triphosphate precursors (Alberts: ECB:G-16).")))

(every RNA-Polymerase has 
    (purpose ((a Catalyst with (in-event ((a DNA-Transcription)))))))
(RNA-Noncoding-Sequence has 
                                                             
    (superclasses (RNA-Sequence))
    (description ("The part of messenger RNA which is not translated.
                        Souther.")))
(RNA-Non-Coding-Region has 
    (superclasses (RNA-Region))
    (description ("Region of the mRNA which does not code for protein.
                        Includes the untranslated regions at either end and
                        the introns which are spliced out.  Souther.")))
(RNA-Molecule has 
                                                   
    (superclasses (Nucleic-Acid-Molecule))
    (description ("Polymer formed from covalently linked ribonucleotide units.
                    Alberts:ECB:G-16")))

(every RNA-Molecule has 
    (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
    (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))
(RNA-Codon has 
                                                                          
    (superclasses (Codon
                      RNA-Coding-Sequence))
    (description ("Sequence of three nucleotides in a RNA molecule that
                        represents the instruction for incorporation of a
                        specific amino acid into a polypeptide chain.
                        cf Alberts:ECB:G-5 (codon).")))

(every RNA-Codon has 
    (element-type ((Ribonucleotide)))
    (purpose ((a Vehicle with (in-event ((a Gene-Expression with (object ((a RNA-Codon))) (donor ((a DNA-Codon))) (recipient ((a Amino-Acid))))))))))
(RNA-Coding-Sequence has 
    (superclasses (RNA-Sequence
                      Coding-Sequence))
    (description ("A has-region of the RNA which codes for all or part of a
                         protein.  Souther. "))
    )
(RNA-Coding-Region has 
    (superclasses (RNA-Region))
    (description ("Region of the mRNA which codes for a protein.  
                        Souther.")))
(RNA-Anticodon has 
    (superclasses (Codon))
    (description ("Sequence of three nucleotides in a transfer RNA
                        molecule that is complementary to the three
                        nucleotide codon on a messenger RNA molecule; the
                        anti-codon is matched to a specific amino acid
                        covalently attached to the transfer RNA molecule.
                        Alberts:ECB:G-2.")))

(every RNA-Anticodon has 
    (has-part ((exactly 3 Nucleotide))))
(RNA-5prime-UTR has 
    (superclasses (RNA-Noncoding-Sequence))
    (description ("The sequence at the beginning of the mRNA which
                               is not translated.  In eucaryotes, it is partly
                               trimmed and a poly-A tail is  added. Souther.")))
(RNA-3prime-UTR has 
    (superclasses (RNA-Noncoding-Sequence))
    (description ("The sequence at the end of the mRNA which
                                      is not translated.  In eucaryotes, it is
                                      partly trimmed and a poly-A tail is
                                      added. Souther.")))
(Rn has 
    (superclasses (Non-Metal-Atom
                      Noble-Gas-Element)))

(every Rn has 
    (atomic-symbol ((Rn)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 86 ()))))))
    (chemical-period (6)))
(River has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every River has 
    (trafficability ((a Trafficability-Value with (value ((:pair *SR Armor-Unit) (:pair *SR Infantry-Unit)))))))
(Risk has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Ring-Compound has 
                                                                                              
    (superclasses (Organic-Molecule))
    (description ("Compound in which some or all of its member atoms are
                        joined in a ring.")))
(Ridge has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Ridge has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit)))))))
(Ribosome-Release-Factor has 
    (superclasses (RNA-Regulatory-Protein))
    (description ("A protein which participates in the release of the
                        ribosome from the mRNA at the end of translation.
                        Souther. ")))
(Ribosome-Binding-Site has 
    (superclasses (Binding-Site))
    (description ("A binding site on the ribosome that
                                      contains a nucleotide sequence which
                                      matches a complementary sequence on
                                      tRNA or mRNA.  Souther.")))
(Ribosome has 
                                                                                                                                   
    (superclasses (Nucleoprotein-Complex))
    (description ("Particle composed of ribosomal RNAs and ribosomal
                       proteins that associates with messenger RNA and
                       catalyzes the synthesis of protein. Alberts:ECB:G-16.")))
(Ribosomal-Protein has 
                                              
    (superclasses (Protein))
    (description ("A protein that is part of the ribosome.  There are 50
                        or more distinct proteins associated with ribosomal
                        RNA in the ribosome. Souther. ")))
(Ribosomal-Peptidyl-Transferase has 
    (superclasses (Enzyme))
    (description ("The enyzme that catalyzes the transfer of the growing
                        polypeptide chain to the amino acid on the newly docked
                        tRNA during protein synthesis.  The enzyme is part of
                        the ribosomal nuceloprotein complex. Souther. ")))
(Ribose has 
    (superclasses (Pentose))
    (description ("A Ribose which forms the carbohydrate moiety of
                        nucleotides, both when free and when incorporated
                        into RNA.  Souther.")))

(every Ribose has 
    (has-part ((a Oxygen-Atom uniquely-called "Ring-Oxygen" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen-2")
               (a Hydroxyl-Group uniquely-called "C1-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C2-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C3-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C5-Hydroxyl-Group")
               (exactly 5 Carbon-Atom))))
(Ribonucleotide has 
                                                                                                                                                         
    (superclasses (Nucleotide))
    (description ("Nucleotide containing D-ribose as the pentose
                    component.  Lehninger:PBC:G-12.")))

(every Ribonucleotide has 
    (has-part ((at-least 1 Phosphoryl-Group)
               (at-most 3 Phosphoryl-Group)
               (a Phosphoryl-Group)
               (a Nucleoside with (has-part ((a Ribose) (a Nitrogenous-Base with (instance-of ((possible-values Adenine Guanine Uracil Cytosine))))))))))
(Ribonucleoside-Triphosphate has 
                                                                             
    (superclasses (Nucleoside
                      Triphosphate
                      Nucleotide))
    (description ("A Ribonucleotide in which the 5' terminal group 
                        is a triphosphate, e.g. TTP. Souther.")))

(every Ribonucleoside-Triphosphate has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Ribonucleoside has-part of Self))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the Ribonucleoside has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Ribonucleoside))))
(Ribonucleoside-Monophosphate has 
    (superclasses (Nucleoside-Monophosphate))
    (description ("A ribonucleotide in which the 5' terminal group 
                        is a monophosphate, e.g. GMP. Souther.")))

(every Ribonucleoside-Monophosphate has 
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Ribonucleoside has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Ribonucleoside has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Ribonucleoside))))
(Ribonucleoside has 
                                                                                                    
    (superclasses (Nucleoside))
    (description ("Compound composed of a purine or pyrimidine base linked
                        to a ribose sugar. Alberts:ECB:G-13.")))

(every Ribonucleoside has 
    (has-part ((a Pentose)
               (a Nitrogenous-Base with (instance-of ((possible-values Purine Pyrimidine)))))))
(Ribonucleoprotein has 
    (superclasses (Nucleoprotein))
    (description ("A nucleoprotein that makes up part of a 
                                  ribosome. Souther. ")))

(every Ribonucleoprotein has 
    (has-part ((a Protein)
               (a Polyribonucleotide))))
(Ribonucleic-Acid-Degradation has 
    (superclasses (Nucleic-Acid-Degradation))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (description ("The hydrolytic breakdown of Ribonucleic acids.
                          Souther.")))

(every Ribonucleic-Acid-Degradation has 
    (agent ((a Living-Entity)))
    (object ((a RNA-Sequence)))
    (instrument ((a Ribonuclease)))
    (result ((a Aggregate with (element-type ((RNA-Sequence)))))))
(Ribonuclease has 
    (superclasses (Nuclease))
    (description ("Enzyme that cleaves RNA.  Souther.")))

(every Ribonuclease has 
    (purpose ((a Catalyst with (in-event ((a Ribonucleic-Acid-Degradation)))))))
(Rh has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Rh has 
    (atomic-symbol ((Rh)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 45 ()))))))
    (chemical-period (5)))
(Rf has 
    (superclasses (Metal-Atom
                      IVB-Element)))

(every Rf has 
    (atomic-symbol ((Rf)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 104 ()))))))
    (chemical-period (7)))
(Retain has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task to ensures a terrain remains free of enemy occupation or use")))

(every Retain has 
    (agent ((a Military-Unit)))
    (object ((a Terrain)))
    (base ((a Military-Unit)
           (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the base of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.8 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.6 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.3 ()))))))
    (pcs-list ((:triple (the agent of Self) agent-of (a Be-Controlled with (object ((the object of Self)))) [Retain-pcs-1])))
    (text-active-verbseq-sg ("retains"))
    (text-active-verbseq-pl ("retain")))
(Restrain has 
    (caused-by-class-of (Be-Restrained))
    (superclasses (Obstruct))
    (required-slot (object))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "restrainee")
                          (:seq agent "restrainer")))
    (test-case ('((*mugger has (instance-of (Physical-Object))) (a Restrain with (object (*mugger))) (do-and-next (thelast Restrain)) (the text-gen of (thelast Restrain)) (forall (the resulting-state of (thelast Restrain)) (the text-gen of It)) (has-value (the Be-Restrained object-of of *mugger)) (a Move with (object (*mugger))) (not (try-do (thelast Move))) (the text-gen of (thelast Move)))))
    (wn16-synset ((:set (:triple "restrain" 1 "v") (:triple "restrain" 3 "v") (:triple "confine" 6 "v") (:triple "hold" 4 "v") (:triple "hold_back" 2 "v") (:triple "keep" 14 "v") (:triple "keep_back" 1 "v"))))
    (wn20-synset ((:set (:triple "restrain" 1 "v") (:triple "restrain" 3 "v") (:triple "confine" 6 "v") (:triple "hold" 4 "v") (:triple "hold_back" 2 "v") (:triple "keep" 14 "v") (:triple "keep_back" 1 "v")))))

(every Restrain has 
    (object ((a Tangible-Entity)))
    (resulting-state ((a Be-Restrained)))
    (pcs-list ((forall (the object of Self) ((:triple It object-of (mustnt-be-a Be-Restrained with (object ((the object of Self))) (agent ((the agent of Self)))))))))
    (text-active-verbseq-sg ("restrains"))
    (text-active-verbseq-pl ("restrain"))
    (text-passive-verbseq-sg ("gets restrained"))
    (text-passive-verbseq-pl ("get restrained"))
    (preparatory-event ((:default (a Unrestrain with (object ((the object of Self)))))))
    (text-nominalization ("restraining")))
(Resource-Use has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Resource has 
                                                                        
    (superclasses (Role)))

(every Resource has 
    (in-event ((must-be-a Event))))
(Reserve-Task has 
    (superclasses (Military-Task)))
(Research has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "research" 1 "n") (:triple "investigation" 2 "n") (:triple "investigating" 1 "n")))))

(every Research has 
    (text-nominalization ("research")))
(Required-Force-Ratio-Value has 
    (superclasses (Property-Value))
    (range-of (required-force-ratio))
    (domain-of (required-force-ratio-of)))

(every Required-Force-Ratio-Value has 
    (value ((set-filter PAIR-FILTER)))
    (property-slot ((required-force-ratio)))
    (less-than ((constraint ((TheValue isa Required-Force-Ratio-Value) or (TheValue isa Available-Force-Ratio-Value)))))
    (greater-than ((constraint ((TheValue isa Required-Force-Ratio-Value) or (TheValue isa Available-Force-Ratio-Value)))))
    (same-as ((constraint ((TheValue isa Required-Force-Ratio-Value) or (TheValue isa Available-Force-Ratio-Value))))))
(Required-Force-Ratio-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (required-force-ratio)))
(Request has 
    (superclasses (Information))
    (wn16-synset ((:set (:triple "request" 1 "n") (:triple "request" 2 "n"))))
    (wn20-synset ((:set (:triple "request" 1 "n") (:triple "request" 2 "n")))))
(Reporting has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "coverage" 3 "n") (:triple "reportage" 1 "n") (:triple "news" 4 "n")))))

(every Reporting has 
    (text-nominalization ("reporting")))
(Replicon-Replication has 
    (superclasses (DNA-Double-Strand-Replication))
    (required-slot (object
                       result))
    (primary-slot (instrument))
    (description ("A process by which a copy of a replicon within
                               		  a DNA molecule is made. Souther. see 
                               		  Mathews:BC:1160")))

(every Replicon-Replication has 
    (object ((a Replicon)))
    (result ((a DNA-Molecule-Segment called "DNA-Molecule-Segment-1" with (has-part (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-1-segment") (a DNA-Sequence called "Daughter-Strand-Complement of Strand 1 segment" with (complement (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-1-segment")))))))
             (a DNA-Molecule-Segment called "DNA-Molecule-Segment-2" with (has-part (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-2-segment") (a DNA-Sequence called "Daughter-Strand-Complement of Strand 1 segment" with (complement (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-2-segment")))))))
             (exactly 2 DNA-Molecule-Segment)))
    (first-subevent (((the Attach subevent of Self) called "binding of initiator proteins")))
    (subevent ((a Attach called "binding of initiator proteins" with (object ((the Initiator-Proteins instrument of (the Replicon-DNA-Melting subevent of Self)))) (base ((the Replicon object of Self))) (site ((the Replication-Origin has-region of (the Replicon object of Self)))) (next-event ((the Replicon-DNA-Melting subevent of Self))))
               (a Replicon-DNA-Melting with (next-event (((the Half-Replicon-Replication subevent of Self) called "replication of replicon half with strand 2 as leading
                        strand") ((the Half-Replicon-Replication subevent of Self) called "replication of replicon half with strand 1 as leading
                        strand"))))
               (a Half-Replicon-Replication called "replication of replicon half
             with strand 1 as leading strand" with (object ((a DNA-Molecule-Segment with (is-part-of ((the Replicon object of Self))) (has-part ((a DNA-Sequence called "leading strand template" with (is-part-of (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-1")))) (a DNA-Sequence called "lagging strand template" with (is-part-of (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-2"))))))))))
               (a Half-Replicon-Replication called "replication of replicon half
             with strand 2 as leading strand" with (object ((a DNA-Molecule-Segment with (is-part-of ((the Replicon object of Self))) (has-part ((a DNA-Sequence called "leading strand template" with (is-part-of (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-2")))) (a DNA-Sequence called "lagging strand template" with (is-part-of (((the DNA-Sequence has-part of (the Replicon object of Self)) called "DNA-Strand-1"))))))))))
               (exactly 2 Half-Replicon-Replication))))
(Replicon-DNA-Melting has 
    (superclasses (DNA-Melting))
    (required-slot (object))
    (primary-slot (agent
                      result
                      instrument))
    (description ("The separation of the two strands of a DNA molecule at a
                    replication origin by initiator proteins.  Souther.")))

(every Replicon-DNA-Melting has 
    (object ((a Replicon with (has-region ((a Replication-Origin))))))
    (instrument ((a Initiator-Proteins with (element-type ((Initiator-Protein))))))
    (result ((a DNA-Sequence called "DNA-Sequence-1" with (is-part-of ((the Replication-Origin has-region of (the Replicon object of Self)))) (complement (((the DNA-Sequence result of Self) called "DNA-Sequence-2"))))
             (a DNA-Sequence called "DNA-Sequence-2" with (is-part-of ((the Replication-Origin has-region of (the Replicon object of Self)))) (complement (((the DNA-Sequence result of Self) called "DNA-Sequence-1")))))))
(Replicon has 
    (superclasses (DNA-Molecule-Segment))
    (description ("A unit in the genome that consists of an origin of
                         replication and all the DNA that is replicated from
                         that origin. Mathews:BC:1160")))

(every Replicon has 
    (is-part-of ((a DNA-Molecule)))
    (has-part ((a DNA-Sequence called "DNA-Strand-1-segment" with (is-part-of (((the DNA-Strand has-part of (the DNA-Molecule is-part-of of Self)) called "DNA-Strand-1"))) (complement (((the DNA-Sequence has-part of Self) called "DNA-Strand-2-segment"))))
               (a DNA-Sequence called "DNA-Strand-2-segment" with (is-part-of (((the DNA-Strand has-part of (the DNA-Molecule is-part-of of Self)) called "DNA-Strand-2"))) (complement (((the DNA-Sequence has-part of Self) called "DNA-Strand-1-segment")))))))
(Replication-Origin-Sequence has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("A DNA sequence that attracts initiator proteins
                    for DNA replication.  Alberts:ECB:190")))

(every Replication-Origin-Sequence has 
    (element-type ((Deoxyribonucleotide)))
    (first-element (((the D-TMP element of Self) called "first")))
    (element ((a D-TMP called "first" with (next-element (((the D-AMP element of Self) called "second"))))
              (a D-AMP called "second" with (next-element (((the D-TMP element of Self) called "third"))))
              (a D-TMP called "third" with (next-element (((the D-AMP element of Self) called "fourth"))))
              (a D-AMP called "fourth" with (next-element (((the D-TMP element of Self) called "fifth"))))
              (a D-TMP called "fifth" with (next-element (((the D-TMP element of Self) called "sixth"))))
              (a D-TMP called "sixth"))))
(Replication-Origin has 
    (superclasses (DNA-Regulatory-Region))
    (description ("Site on a chromosome at which DNA replication begins.
                    Alberts:ECB:G-16.")))

(every Replication-Origin has 
    (location-of ((a Replication-Origin-Sequence))))
(Replication-Machine has 
    (superclasses (Protein-Complex))
    (description ("The multiprotein complex that promotes DNA synthesis
                        at the replication fork.  Lehninger:PBC:G-12. ")))

(every Replication-Machine has 
    (purpose ((a Catalyst with (in-event ((a DNA-Double-Strand-Replication))))))
    (has-part ((a DNA-Helicase)
               (a DNA-Gyrase)
               (a Aggregate with (element-type ((Single-Strand-Binding-Protein))))
               (a Protein-Sliding-Clamp)
               (a Protein-Sliding-Clamp)
               (a Primase)
               (a DNA-Polymerase-Replication-Enzyme)
               (a DNA-Polymerase-Replication-Enzyme)
               (exactly 2 DNA-Polymerase-Replication-Enzyme))))
(Replication-Fork has 
    (superclasses (DNA-Region))
    (description ("The site on the DNA molecule of DNA replication.
                        Souther.")))

(every Replication-Fork has 
    (location-of ((a DNA-Replication))))
(Replenish has 
    (superclasses (Increase))
    (test-case ('((*Gas has (instance-of (Entity))) (*Replenish has (instance-of (Replenish)) (object (*Gas)) (property-slot (volume))) ((the played-by of (the base of *Replenish)) = *Gas) ((the base of (a Replenish)) isa Renewable-Resource) (do-and-next *Replenish) ((the greater-than of (the volume of *Gas)) includes ((in-situation (the1 prev-situation of (curr-situation)) (the volume of *Gas)))))))
    (wn20-synset ((:set (:triple "replenish" 1 "v") (:triple "refill" 1 "v") (:triple "fill_again" 1 "v")))))

(every Replenish has 
    (base ((mustnt-be-a Nonrenewable-Resource)
           (a Resource with (played-by ((the object of Self))))))
    (object ((a Entity with (plays ((a Resource with (base-of ((Self)))))))))
    (text-nominalization ("replenishing")))
(Replace has 
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot ((instrument agent)))
    (test-case ('((*blownfuse has (instance-of (Physical-Object))) (*newfuse has (instance-of (Physical-Object))) (*socket has (instance-of (Physical-Object))) (a Replace with (object (*blownfuse *newfuse)) (base (*socket))) (do-script (thelast Replace)) ((the resulting-state of (the Attach subevent of (thelast Replace))) isa Be-Attached-To) (the text-gen of (thelast Replace)) (forall (the subevent of (thelast Replace)) (the text-gen of It)) ((the object of (thelast Be-Attached-To)) includes *newfuse) ((the object of (thelast Be-Attached-To)) includes *socket))))
    (wn16-synset ((:set (:triple "replace" 1 "v") (:triple "replace" 4 "v") (:triple "substitute" 1 "v"))))
    (wn20-synset ((:set (:triple "replace" 1 "v") (:triple "replace" 3 "v") (:triple "substitute" 1 "v"))))
    )

(every Replace has 
    (agent ((must-be-a Tangible-Entity)))
    (object ((a Tangible-Entity called "old entity")
             (a Tangible-Entity called "new entity")))
    (base ((a Tangible-Entity)))
    (first-subevent (((the Detach subevent of Self) called "RemoveOld")))
    (subevent ((a Detach called "RemoveOld" with (agent ((the agent of Self))) (object (((the object of Self) called "old entity"))) (base ((the base of Self))) (instrument ((the instrument of Self))) (next-event (((the Attach subevent of Self) called "AttachNew"))))
               (a Attach called "AttachNew" with (agent ((the agent of Self))) (object (((the object of Self) called "new entity"))) (base ((the base of Self))) (instrument ((the instrument of Self))))))
    (text-active-verbseq-sg ("replaces"))
    (text-active-verbseq-pl ("replace"))
    (text-passive-verbseq-sg ("gets replaced"))
    (text-passive-verbseq-pl ("gets replaced"))
    (text-base ((if (has-value (the base of Self)) then ("in"))))
    (text-instrument ((if (has-value (the instrument of Self)) then ("using"))))
    (text-active-sentence ((:seq (the text-subj-phrase of Self) (the text-active-phrase of Self) (the text-phrase of ((the object of Self) called "old entity")) ("with") (the text-phrase of ((the object of Self) called "new entity")) (the text-arguments of Self))))
    (text-passive-sentence ((:seq (the text-phrase of ((the object of Self) called "old entity")) (the text-passive-phrase of Self) ("with") (the text-phrase of ((the object of Self) called "new entity")) (the text-arguments of Self))))
    (text-nominalization ("replacement")))
(Repair has 
    (defeated-by-class-of (Be-Broken))
    (superclasses (Action))
    (required-slot (object))
    (primary-slot ((agent instrument by-means-of)))
    (cmap-correspondence ((:seq object "the thing being repaired")
                          (:seq agent "the one doing the repair")
                          (:seq instrument "the instrument of the repair")
                          (:seq by-means-of "how the repair is achieved")))
    (test-case ('((*Vase has (instance-of (Physical-Object))) (a Break with (object (*Vase))) (do-and-next (thelast Break)) (the text-gen of (thelast Break)) (has-value (the Be-Broken object-of of *Vase)) (a Repair with (object (*Vase))) (do-and-next (thelast Repair)) (the text-gen of (thelast Repair)) (not (has-value (the Be-Broken object-of of *Vase))))))
    (wn16-synset ((:set (:triple "repair" 1 "v") (:triple "bushel" 1 "v") (:triple "doctor" 3 "v") (:triple "furbish_up" 1 "v") (:triple "mend" 1 "v") (:triple "restore" 4 "v") (:triple "touch_on" 3 "v"))))
    (wn20-synset ((:set (:triple "repair" 1 "v") (:triple "bushel" 1 "v") (:triple "doctor" 3 "v") (:triple "furbish_up" 1 "v") (:triple "mend" 1 "v") (:triple "restore" 4 "v") (:triple "touch_on" 3 "v")))))

(every Repair has 
    (object ((a Tangible-Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Broken))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Broken) [Repair-pcs-1]))
               (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Ruined with (object ((the object of Self)))) [Repair-pcs-2]))))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Repair-del-1]))))
    (text-active-verbseq-sg ("repairs"))
    (text-active-verbseq-pl ("repair"))
    (text-passive-verbseq-sg ("gets repaired"))
    (text-passive-verbseq-pl ("get repaired"))
    (preparatory-event ((:default (a Break with (object ((the object of Self)))))))
    (text-nominalization ("repair")))
(Renewable-Resource has 
    (superclasses (Resource))
    (wn20-synset ((:set (:triple "renewable_resource" 1 "n"))))
    (member-of (_Partition3)))

(every Renewable-Resource has-definition 
    (instance-of (Resource))
    (base-of ((a Replenish))))
(Remove has 
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq agent "the remover")
                          (:seq object "the part removed.")
                          (:seq base "the thing from which the part is being removed")
                          (:seq instrument "instrument of the remove")))
    (wn16-synset ((:set (:triple "remove" 1 "v"))))
    (wn20-synset ((:set (:triple "remove" 1 "v"))))
    )

(every Remove has 
    (object ((a Tangible-Entity)))
    (base ((a Tangible-Entity)))
    (soft-pcs-list ((:triple (the base of Self) object-of (mustnt-be-a Be-Inaccessible))))
    (pcs-list ((forall (the object of Self) (:triple It is-part-of (the base of Self) [Remove-pcs-1]))))
    (del-list ((forall (the object of Self) (:triple It is-part-of (the base of Self) [Remove-del-1]))))
    (text-active-verbseq-sg ("removes"))
    (text-active-verbseq-pl ("remove"))
    (text-passive-verbseq-sg ("gets removed"))
    (text-passive-verbseq-pl ("get removed"))
    (text-base ("from"))
    (text-nominalization ("removal")))
(Removal-Enzyme has 
                                                     
    (superclasses (Enzyme))
    (description ("Enzyme that removes a group from a molecule. Examples
                        are phosphatases and deaminases.  Souther.")))
(Remaining-Strength-Value has 
    (superclasses (Property-Value))
    (range-of (remaining-strength))
    (domain-of (remaining-strength-of)))

(every Remaining-Strength-Value has 
    (property-slot ((remaining-strength)))
    (less-than ((must-be-a Remaining-Strength-Value)))
    (greater-than ((must-be-a Remaining-Strength-Value)))
    (same-as ((must-be-a Remaining-Strength-Value))))
(Remaining-Strength-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (remaining-strength)))
(Relinquish has 
                                                               
    (superclasses (Lose))
    (required-slot (agent
                       donor
                       object))
    (primary-slot (recipient
                      instrument))
    (cmap-correspondence ((:seq object "the thing Relinquished")
                          (:seq agent "the Relinquisher")
                          (:seq donor "the original possessor")
                          (:seq recipient "the final possessor")
                          (:seq instrument "the thing used to Relinquish")))
    (test-case ('((*Gold has (instance-of (Tangible-Entity))) (*Bill has (instance-of (Tangible-Entity)) (possesses (*Gold))) (*Relinquish has (instance-of (Relinquish)) (agent (*Bill)) (object (*Gold))) (do-and-next *Relinquish) (the text-gen of (thelast Relinquish)) (((the agent of *Relinquish) = *Bill) and ((the donor of *Relinquish) = *Bill)) ((the possesses of *Bill) = nil) ((the is-possessed-by of *Gold) /= *Bill))))
    (wn16-synset ((:set (:triple "relinquish" 1 "v") (:triple "cede" 2 "v") (:triple "deliver" 11 "v") (:triple "free" 9 "v") (:triple "give_up" 6 "v") (:triple "give_up" 8 "v") (:triple "release" 8 "v") (:triple "surrender" 2 "v"))))
    (wn20-synset ((:set (:triple "relinquish" 1 "v") (:triple "cede" 2 "v") (:triple "deliver" 10 "v") (:triple "free" 9 "v") (:triple "give_up" 6 "v") (:triple "give_up" 8 "v") (:triple "release" 8 "v") (:triple "surrender" 2 "v")))))

(every Relinquish has 
    (agent (((a Tangible-Entity) & (the donor of Self))))
    (donor ((exactly 1 Tangible-Entity)
            (the agent of Self)))
    (text-active-verbseq-sg ("relinquishes"))
    (text-active-verbseq-pl ("relinquish"))
    (text-passive-verbseq-sg ("is relinquished"))
    (text-passive-verbseq-pl ("are relinquished"))
    (text-nominalization ("relinquishing")))
(Release-Resource has 
    (defeated-by-class-of (Be-Available))
    (caused-by-class-of (Be-Unavailable))
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      base))
    (cmap-correspondence ((:seq object "the resource made available")
                          (:seq base "the thing the resource is made available to")
                          (:seq agent "the agent"))))

(every Release-Resource has 
    (object ((a Resource)))
    (base ((must-be-a Thing)))
    (agent ((must-be-a Entity)))
    (resulting-state ((a Be-Available)))
    (add-list ((if (has-value (the base of Self)) then (:triple (the resulting-state of Self) base (the base of Self) [Release-Resource-add-1]))
               (:triple (the resulting-state of Self) object (the object of Self) [Release-Resource-add-2])
               (if (has-value (the agent of Self)) then (:triple (the resulting-state of Self) agent (the agent of Self) [Release-Resource-add-3]))))
    (text-active-verbseq-sg ("releases"))
    (text-active-verbseq-pl ("release"))
    (text-passive-verbseq-sg ("gets released"))
    (text-passive-verbseq-pl ("get released"))
    (text-base ((if (has-value (the base of Self)) then ("from"))))
    (text-argslots ((:seq base instrument)))
    (preparatory-event ((:default (a Allocate-Resource with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("release")))
(Release has 
    (defeated-by-class-of (Be-Confined))
    (superclasses (Unobstruct))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "object")
                          (:seq base "the enclosure")
                          (:seq agent "releaser")
                          (:seq instrument "instrument")))
    (wn16-synset ((:set (:triple "release" 3 "v") (:triple "turn" 13 "v"))))
    (wn20-synset ((:set (:triple "release" 3 "v") (:triple "turn" 14 "v")))))

(every Release has 
    (base ((a Tangible-Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where (((the base of It) = (the base of Self)) and ((the classes of It) = Be-Confined)))))
    (object ((a Tangible-Entity with (is-inside ((the base of Self))))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Confined with (base ((the base of Self)))) [Release-pcs-1]))))
    (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Release-del-1]) (:triple It base (the base of Self) [Release-del-2])))))
    (text-active-verbseq-sg ("releases"))
    (text-active-verbseq-pl ("release"))
    (text-passive-verbseq-sg ("gets released"))
    (text-passive-verbseq-pl ("get released"))
    (text-base ((if (has-value (the base of Self)) then ("from"))))
    (preparatory-event ((:default (a Confine with (base ((the base of Self))) (object ((the object of Self)))))))
    (text-nominalization ("release")))
(Relative-Combat-Power-Value has 
    (superclasses (Property-Value))
    (range-of (relative-combat-power))
    (domain-of (relative-combat-power-of)))

(every Relative-Combat-Power-Value has 
    (property-slot ((relative-combat-power)))
    (less-than ((constraint ((TheValue isa Default-Combat-Power-Value) or (TheValue isa Relative-Combat-Power-Value)))))
    (greater-than ((constraint ((TheValue isa Default-Combat-Power-Value) or (TheValue isa Relative-Combat-Power-Value)))))
    (same-as ((constraint ((TheValue isa Default-Combat-Power-Value) or (TheValue isa Relative-Combat-Power-Value))))))
(Relative-Combat-Power-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (relative-combat-power)))
(Reinforce has 
    (superclasses (Non-Engagement-Military-Task))
    (description ("to strengthen a unit with additional resources")))

(every Reinforce has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit with (allegiance ((the allegiance of (the agent of Self)))))))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (text-active-verbseq-sg ("reinforces"))
    (text-active-verbseq-pl ("reinforce")))
(Regulatory-Site has 
                                    
    (superclasses (Binding-Site))
    (description ("A site on a molecule to which a regulatory ligand
                        binds and alters the activity or function of that
                        molecule. Souther.")))

(every Regulatory-Site has 
    (location-of ((a Attach called "bind" with (object ((a Ligand)))))))
(Regulatory-Sequence has 
                                                                               
    (superclasses (Nucleotide-Sequence))
    (description ("A sequence of nucleotides that regulates the
                         the synthesis of DNA, RNA, or protein.  Souther.")))
(Regulatory-Region has 
                                      
    (superclasses (Region))
    (description ("A has-region or site on DNA, RNA, or a Protein which regulates
                    the processing or activity of the molecule.  Souther")))

(every Regulatory-Region has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Regulatory-Protein has 
                                                                                                                       
    (superclasses (Protein))
    (description ("A protein whose role is to affect the activity of DNA,
                        RNA, or proteins or other cell constituents. 
                        Souther. ")))
(Region has 
    (superclasses (Place))
    (description ("a Place with extent (not a point)"))
    (wn20-synset ((:set (:triple "region" 1 "n") (:triple "part" 2 "n") (:triple "region" 3 "n"))))
    )
(Regiment has 

    (member-of (_Partition8))
    (superclasses (Military-Unit)))
(Reflexive-Cliche has 
                                                                                              
    (superclasses (Cliche))
    (test-case ('((*John has (instance-of (Living-Entity))) (*RC has (instance-of (Reflexive-Cliche)) (agent (*John))) ((the agent of *RC) = (the object of *RC))))))

(every Reflexive-Cliche has 
    (agent ((the object of Self)))
    (object ((the agent of Self)))
    (text-definition-sentence (()))
    (text-definition-sentence-of (()))
    (text-nominalization (()))
    (text-nominalization-of (()))
    (text-content (()))
    (text-content-of (()))
    (text-existential-there (()))
    (text-existential-there-of (()))
    (text-toward (()))
    (text-toward-of (()))
    (text-subj (()))
    (text-subj-of (()))
    (text-subj-phrase (()))
    (text-subj-phrase-of (()))
    (text-slot (()))
    (text-slot-of (()))
    (text-sentence (()))
    (text-sentence-of (()))
    (text-premodslots (()))
    (text-premodslots-of (()))
    (text-premods (()))
    (text-premods-of (()))
    (text-postmodslots (()))
    (text-postmodslots-of (()))
    (text-postmods (()))
    (text-postmods-of (()))
    (text-phrase (()))
    (text-phrase-of (()))
    (text-passive-verbseq (()))
    (text-passive-verbseq-of (()))
    (text-passive-verbseq-sg (()))
    (text-passive-verbseq-sg-of (()))
    (text-passive-verbseq-pl (()))
    (text-passive-verbseq-pl-of (()))
    (text-passive-sentence (()))
    (text-passive-sentence-of (()))
    (text-passive-phrase (()))
    (text-passive-phrase-of (()))
    (text-particle (()))
    (text-particle-of (()))
    (text-number (()))
    (text-number-of (()))
    (text-nom-sentence (()))
    (text-nom-sentence-of (()))
    (text-indef-head (()))
    (text-indef-head-of (()))
    (text-indef-determiner (()))
    (text-indef-determiner-of (()))
    (text-head (()))
    (text-head-of (()))
    (text-gen (()))
    (text-gen-of (()))
    (text-dobj (()))
    (text-dobj-of (()))
    (text-dobj-phrase (()))
    (text-dobj-phrase-of (()))
    (text-description (()))
    (text-description-of (()))
    (text-def-head (()))
    (text-def-head-of (()))
    (text-def-determiner (()))
    (text-def-determiner-of (()))
    (text-base-phrase (()))
    (text-base-phrase-of (()))
    (text-arguments (()))
    (text-arguments-of (()))
    (text-argslots (()))
    (text-argslots-of (()))
    (text-active-verbseq (()))
    (text-active-verbseq-of (()))
    (text-active-verbseq-sg (()))
    (text-active-verbseq-sg-of (()))
    (text-active-verbseq-pl (()))
    (text-active-verbseq-pl-of (()))
    (text-active-sentence (()))
    (text-active-sentence-of (()))
    (text-active-phrase (()))
    (text-active-phrase-of (()))
    (text-subevent-of (()))
    (text-subevent (()))
    (slot-gloss (()))
    (slot-gloss-of (()))
    (text-site (()))
    (text-site-of (()))
    (text-resulting-state (()))
    (text-resulting-state-of (()))
    (text-result (()))
    (text-result-of (()))
    (text-recipient (()))
    (text-recipient-of (()))
    (text-raw-material (()))
    (text-raw-material-of (()))
    (text-is-possessed-by (()))
    (text-is-possessed-by-of (()))
    (text-path (()))
    (text-path-of (()))
    (text-origin (()))
    (text-origin-of (()))
    (text-object (()))
    (text-object-of (()))
    (text-material (()))
    (text-material-of (()))
    (text-is-west-of (()))
    (text-is-west (()))
    (text-is-east-of (()))
    (text-is-east (()))
    (text-is-southwest-of (()))
    (text-is-southwest (()))
    (text-is-northeast-of (()))
    (text-is-northeast (()))
    (text-is-over (()))
    (text-is-over-of (()))
    (text-is-outside (()))
    (text-is-outside-of (()))
    (text-is-oriented-toward (()))
    (text-is-oriented-toward-of (()))
    (text-is-opposite (()))
    (text-is-opposite-of (()))
    (text-is-on (()))
    (text-is-on-of (()))
    (text-is-northwest-of (()))
    (text-is-northwest (()))
    (text-is-southeast-of (()))
    (text-is-southeast (()))
    (text-is-north-of (()))
    (text-is-north (()))
    (text-is-south-of (()))
    (text-is-south (()))
    (text-is-near (()))
    (text-is-near-of (()))
    (text-is-inside (()))
    (text-is-inside-of (()))
    (text-is-facing (()))
    (text-is-facing-of (()))
    (text-is-between (()))
    (text-is-between-of (()))
    (text-is-beside (()))
    (text-is-beside-of (()))
    (text-is-behind (()))
    (text-is-behind-of (()))
    (text-is-at (()))
    (text-is-at-of (()))
    (text-is-along (()))
    (text-is-along-of (()))
    (text-is-above (()))
    (text-is-above-of (()))
    (text-instrument (()))
    (text-instrument-of (()))
    (text-has-part (()))
    (text-has-part-of (()))
    (text-is-part-of (()))
    (text-is-part (()))
    (text-donor (()))
    (text-donor-of (()))
    (text-destination (()))
    (text-destination-of (()))
    (text-causes (()))
    (text-causes-of (()))
    (text-caused-by (()))
    (text-caused-by-of (()))
    (text-beneficiary (()))
    (text-beneficiary-of (()))
    (text-base (()))
    (text-base-of (()))
    (text-away-from (()))
    (text-away-from-of (()))
    (text-agent (()))
    (text-agent-of (()))
    (text-abuts (()))
    (text-abuts-of (())))

(every Reflexive-Cliche has-definition 
    (instance-of (Event))
    (agent ((the object of Self)))
    (object ((the agent of Self))))
(Reduction has 
    (superclasses (Receive))
    (required-slot (object
                       recipient))
    (primary-slot (agent
                      donor
                      instrument))
    (description ("The gain of electrons by an atom or molecule as
                          occurs when hydrogen is added from a molecule or
                          oxygen is removed.  Lodish:MCB:G-15")))

(every Reduction has 
    (donor ((a Chemical-Entity)))
    (recipient ((a Chemical-Entity)))
    (object ((a Electron)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Red-Army has 
    (superclasses (Army)))

(every Red-Army has 
    (allegiance ((a Allegiance-Value with (value ((*Red))))))
    (element ((a Tank-Brigade called "Independent Tank Brigade")
              (a Tank-Division called "The 29th Guards Tank Division" with (element ((a Mechanized-Infantry-Brigade uniquely-called "The 1st Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 1st Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 2nd Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 1st Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 1st Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 2nd Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 3rd Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 4th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 2nd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 2nd Armored Battalion")))) (a Armored-Brigade uniquely-called "The 3rd Brigade" with (element ((a Armored-Battalion uniquely-called "The 3rd Armored Battalion") (a Armored-Battalion uniquely-called "The 4th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 3rd Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 5th Mechanized Infantry Battalion")))) (a Armored-Brigade uniquely-called "The 4th Brigade" with (element ((a Armored-Battalion uniquely-called "The 5th Armored Battalion") (a Armored-Battalion uniquely-called "The 6th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 4th Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 6th Mechanized Infantry Battalion")))) (a Artillery-Brigade uniquely-called "The 5th Brigade" with (element ((a Direct-Support-Artillery-Battalion uniquely-called "The 5th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 6th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 7th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 8th Direct Support Artillery Battalion")))))))
              (a Mechanized-Infantry-Division called "The 7th Motorized Rifle Division" with (element ((a Mechanized-Infantry-Brigade uniquely-called "The 1st Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 1st Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 2nd Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 1st Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 1st Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 2nd Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 3rd Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 4th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 2nd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 2nd Armored Battalion")))) (a Armored-Brigade uniquely-called "The 3rd Brigade" with (element ((a Armored-Battalion uniquely-called "The 3rd Armored Battalion") (a Armored-Battalion uniquely-called "The 4th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 3rd Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 5th Mechanized Infantry Battalion")))) (a Armored-Brigade uniquely-called "The 4th Brigade" with (element ((a Armored-Battalion uniquely-called "The 5th Armored Battalion") (a Armored-Battalion uniquely-called "The 6th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 4th Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 6th Mechanized Infantry Battalion")))) (a Artillery-Brigade uniquely-called "The 5th Brigade" with (element ((a Direct-Support-Artillery-Battalion uniquely-called "The 5th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 6th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 7th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 8th Direct Support Artillery Battalion")))))))
              (a Mechanized-Infantry-Division called "The 20th Motorized Rifle Division" with (element ((a Mechanized-Infantry-Brigade uniquely-called "The 1st Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 1st Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 2nd Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 1st Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 1st Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 2nd Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 3rd Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 4th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 2nd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 2nd Armored Battalion")))) (a Armored-Brigade uniquely-called "The 3rd Brigade" with (element ((a Armored-Battalion uniquely-called "The 3rd Armored Battalion") (a Armored-Battalion uniquely-called "The 4th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 3rd Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 5th Mechanized Infantry Battalion")))) (a Armored-Brigade uniquely-called "The 4th Brigade" with (element ((a Armored-Battalion uniquely-called "The 5th Armored Battalion") (a Armored-Battalion uniquely-called "The 6th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 4th Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 6th Mechanized Infantry Battalion")))) (a Artillery-Brigade uniquely-called "The 5th Brigade" with (element ((a Direct-Support-Artillery-Battalion uniquely-called "The 5th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 6th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 7th Direct Support Artillery Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 8th Direct Support Artillery Battalion"))))))))))
(Recording has 
    (description ("A kind of Message created by a Sensor as the result of a Record event."))
    (superclasses (Message))
    (wn20-synset ((:set (:triple "recording" 1 "n")))))

(every Recording has 
    (result-of ((a Record))))
(Record has 
    (description ("An action involving a Sensor such that a Recording is created as the result."))
    (superclasses (Create))
    (wn20-synset ((:set (:triple "record" 2 "v") (:triple "tape" 3 "v") (:triple "record" 2 "n") (:triple "recording" 2 "n") (:triple "transcription" 5 "n")))))

(every Record has 
    (result ((a Recording)))
    (text-nominalization ("recording")))
(Reconstitute-Unit has 
    (superclasses (Non-Engagement-Military-Task)))

(every Reconstitute-Unit has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit with (allegiance ((the allegiance of (the agent of Self)))))))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (del-list ((:triple (the object of Self) combat-strength (the combat-strength of (the object of Self)))
               (:triple (the object of Self) remaining-strength (the remaining-strength of (the object of Self)))))
    (add-list ((:triple (the object of Self) combat-strength (a Combat-Strength-Value with (value ((:pair *full Military-Unit)))))
               (:triple (the object of Self) remaining-strength (a Remaining-Strength-Value with (value ((:pair 1 ())))))))
    (text-active-verbseq-sg ("reconstitutes"))
    (text-active-verbseq-pl ("reconstitute")))
(Recognize has 
    (superclasses (Perceive))
    (required-slot (object))
    (primary-slot (agent))
    (cmap-correspondence ((:seq agent "the recognizer")
                          (:seq object "the recognized")))
    (wn20-synset ((:set (:triple "acknowledge" 6 "v") (:triple "recognize" 1 "v") (:triple "recognise" 8 "v") (:triple "know" 6 "v") (:triple "recognize" 3 "v") (:triple "recognise" 3 "v") (:triple "distinguish" 2 "v") (:triple "discern" 1 "v") (:triple "pick_out" 2 "v") (:triple "make_out" 1 "v") (:triple "tell_apart" 1 "v") (:triple "acknowledge" 4 "v") (:triple "recognize" 7 "v") (:triple "recognise" 5 "v") (:triple "recognize" 9 "v") (:triple "recognise" 1 "v")))))

(every Recognize has 
    (object ((a Entity)))
    (agent ((must-be-a Tangible-Entity)))
    (soft-pcs-list ((if (has-value (the agent of Self)) then (:triple (the agent of Self) experiencer (a Be-Known with (object ((a Information with (information-content (the object of Self))))))))))
    (text-active-verbseq-sg ("recognizes"))
    (text-active-verbseq-pl ("recognize"))
    (text-passive-verbseq-sg ("is recognized"))
    (text-passive-verbseq-pl ("are recognized"))
    (text-nominalization ("recognition")))
(Recipient-Role has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "recipient" 1 "n") (:triple "receiver" 4 "n"))))
    (wn20-synset ((:set (:triple "recipient" 1 "n") (:triple "receiver" 4 "n")))))

(every Recipient-Role has 
    (in-event ((must-be-a Event)))
    (played-by ((a Entity with (recipient-of ((the in-event of Self)))))))
(Receive has 
                                                                                  
    (superclasses (Transfer))
    (required-slot (recipient
                       object))
    (primary-slot (agent
                      donor
                      instrument))
    (cmap-correspondence ((:seq object "the thing received")
                          (:seq agent "causer")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*Present has (instance-of (Tangible-Entity))) (*Maple has (instance-of (Tangible-Entity))) (*Receive has (instance-of (Receive)) (recipient (*Maple)) (object (*Present))) (do-and-next *Receive) (the text-gen of (thelast Receive)) ((the possesses of *Maple) = *Present) ((the is-possessed-by of *Present) = *Maple))))
    (wn16-synset ((:set (:triple "receive" 1 "v") (:triple "have" 16 "v"))))
    (wn20-synset ((:set (:triple "receive" 1 "v") (:triple "have" 15 "v")))))

(every Receive has 
    (recipient ((a Entity)))
    (text-active-verbseq-sg ("receives"))
    (text-active-verbseq-pl ("receive"))
    (text-passive-verbseq-sg ("is received"))
    (text-passive-verbseq-pl ("are received"))
    (text-subj ((if (has-value (the agent of Self)) then (the agent of Self) else (the recipient of Self))))
    (text-argslots ((:seq donor instrument)))
    (text-active-sentence ((:seq (if ((the text-subj of Self) /= (the recipient of Self)) then (:seq (the text-subj-phrase of Self) (if ((the number of (the text-subj of Self)) = 1) then ("causes") else ("cause")) (andify (the text-phrase of (the recipient of Self))) ("to") (the text-active-verbseq-pl of Self)) else (:seq (the text-subj-phrase of Self) (the text-active-phrase of Self))) (the text-dobj-phrase of Self) (the text-arguments of Self))))
    (text-nominalization ("reception")))
(Rear-Command-Post-Unit has 
                                                                                                                                                                                                                                                                                                                                         
    (superclasses (Military-Unit)))
(Rear-Command-Post-Squad has 
    (superclasses (Rear-Command-Post-Unit
                      Squad)))

(every Rear-Command-Post-Squad has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Squad)))
(Rear-Command-Post-Regiment has 
    (superclasses (Rear-Command-Post-Unit
                      Regiment)))

(every Rear-Command-Post-Regiment has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Regiment)))
(Rear-Command-Post-Platoon has 
    (superclasses (Rear-Command-Post-Unit
                      Platoon)))

(every Rear-Command-Post-Platoon has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Platoon)))
(Rear-Command-Post-Division has 
    (superclasses (Rear-Command-Post-Unit
                      Division)))

(every Rear-Command-Post-Division has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Division)))
(Rear-Command-Post-Corps has 
    (superclasses (Rear-Command-Post-Unit
                      Corps)))

(every Rear-Command-Post-Corps has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Corps)))
(Rear-Command-Post-Company has 
    (superclasses (Rear-Command-Post-Unit
                      Military-Company)))

(every Rear-Command-Post-Company has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Military-Company)))
(Rear-Command-Post-Brigade has 
    (superclasses (Rear-Command-Post-Unit
                      Brigade)))

(every Rear-Command-Post-Brigade has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Brigade)))
(Rear-Command-Post-Battalion has 
    (superclasses (Rear-Command-Post-Unit
                      Battalion)))

(every Rear-Command-Post-Battalion has-definition 
    (instance-of (Rear-Command-Post-Unit
                     Battalion)))
(Rear has 
    (superclasses (Region)))
(Read has 
    (description ("The act of reading a physical written document."))
    (superclasses (Sense))
    (wn20-synset ((:set (:triple "read" 1 "v")))))

(every Read has 
    (object ((a Physical-Document)
             (must-be-a Physical-Document)))
    (text-nominalization ("reading")))
(Reaction-Result has 
    (superclasses (Chemical)))

(every Reaction-Result has 
    (coefficient ((if ((the raw-material of (the result-of of Self)) and (not (oneof (:set (the result of (the result-of of Self)) (the raw-material of (the result-of of Self))) where (not (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It))))))) then ((a Coefficient-Value) & (#'(LAMBDA () (BALANCED-EQUATION-COEFFICIENT (KM-UNIQUE0 '(the result-of of Self)) 'Self)))))))
    (quantity ((if ((not (the quantity of Self)) and (the1 of (the value of (the coefficient of Self))) and (not ((the result-of of Self) isa Equilibrium-Reaction))) then (the output of (a Compute-Quantity-from-Reaction with (input ((allof (:set (the raw-material of (the result-of of Self)) (the result of (the result-of of Self))) where (It /= Self)) (the coefficient of Self)))) [Reaction-Result-quantity-1])))))

(every Reaction-Result has-definition 
    (instance-of (Chemical))
    (result-of ((a Reaction))))
(Reaction-Participant has 
    (superclasses (Role)))

(every Reaction-Participant has 
    (in-event ((must-be-a Reaction)))
    (played-by (((a Chemical) & (constraint (if (has-value (the in-event of Self)) then ((:set (the raw-material-of of TheValue) (the result-of of TheValue)) includes (the in-event of Self)) else (t))))))
    (coefficient ((if (has-value (the in-event of Self)) then #'(LAMBDA () (BALANCED-EQUATION-COEFFICIENT (KM-UNIQUE0 '(the in-event of Self)) (KM-UNIQUE0 '(the played-by of Self))))))))
(Reaction-Material has 
                                                                                 
    (superclasses (Chemical)))

(every Reaction-Material has 
    (coefficient ((if ((the result of (the raw-material-of of Self)) and (not (oneof (:set (the result of (the raw-material-of of Self)) (the raw-material of (the raw-material-of of Self))) where (not (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It))))))) then ((a Coefficient-Value) & (#'(LAMBDA () (BALANCED-EQUATION-COEFFICIENT (KM-UNIQUE0 '(the raw-material-of of Self)) 'Self)))))))
    (quantity ((if ((not (the quantity of Self)) and (the1 of (the value of (the coefficient of Self))) and (not ((the raw-material-of of Self) isa Equilibrium-Reaction))) then (the output of (a Compute-Quantity-from-Reaction with (input ((allof (:set (the raw-material of (the raw-material-of of Self)) (the result of (the raw-material-of of Self))) where (It /= Self)) (the coefficient of Self)))) [Reaction-Material-quantity-1])))))

(every Reaction-Material has-definition 
    (instance-of (Chemical))
    (raw-material-of ((a Reaction))))
(Reaction has 

    (superclasses (Action))
    (test-case ('((*Na2SO4 has (instance-of (Ionic-Compound-Substance)) (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na-Plus) (:pair 1 SO4-Minus-2))))))))))) (*BaCl2 has (instance-of (Ionic-Compound-Substance)) (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ba-Plus-2) (:pair 2 Cl-Minus))))))))))) (*R has (instance-of (Reaction)) (raw-material (*Na2SO4 *BaCl2))))))
    (domain-of (chemical-equation
                   complete-ionic-equation
                   net-ionic-equation
                   oxidation-state-changes))
    (range-of (chemical-equation-of
                  complete-ionic-equation-of
                  net-ionic-equation-of)))

(every Reaction has 
    (raw-material ((a Chemical)))
    (result ((a Chemical)))
    (oxidation-state-changes ((if (allof (the value of (the oxidation-state of (the has-basic-structural-unit of (the result of Self)))) where (oneof2 (the value of (the oxidation-state of (the has-basic-structural-unit of (the raw-material of Self)))) where (((the2 of It2) = (the2 of It)) and ((the1 of It2) /= (the1 of It))))) then "yes" else "no" [Reaction-oxidation-state-changes-1])))
    (chemical-equation ((:seq (:set (forall (the raw-material of Self) (:pair (the1 of (the value of (the coefficient of It))) (the string-name of (the has-chemical-formula of (the has-basic-structural-unit of It)))))) (:set (forall (the result of Self) (:pair (the1 of (the value of (the coefficient of It))) (the string-name of (the has-chemical-formula of (the has-basic-structural-unit of It)))))))))
    (direction ((if (not (the direction of Self)) then (a Direction-Value with (value ((if (the output of (a Compute-Equilibrium-Position with (input (Self)))) then (if ((the output of (a Compute-Equilibrium-Position with (input (Self)))) = (the raw-material of Self)) then *left else *right))))) [Reaction-direction-1])))
    (complete-ionic-equation ((:seq (forall (the raw-material of Self) (if ((It isa Strong-Electrolyte) and (not (It isa Precipitate))) then (forall2 (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) (:pair ((the1 of (the value of (the coefficient of It))) * (the1 of It2)) (the text-gen of (an instance of (the2 of It2))))) else (:pair (the1 of (the value of (the coefficient of It))) (the text-gen of It)))) (forall (the result of Self) (if ((It isa Strong-Electrolyte) and (not (It isa Precipitate))) then (forall2 (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) (:pair ((the1 of (the value of (the coefficient of It))) * (the1 of It2)) (the text-gen of (an instance of (the2 of It2))))) else (:pair (the1 of (the value of (the coefficient of It))) (the text-gen of It)))) [Reaction-complete-ionic-equation-1])))
    (net-ionic-equation ((:seq (allof (the1 of (the complete-ionic-equation of Self)) where (not (oneof2 (the2 of (the complete-ionic-equation of Self)) where (It = It2)))) (allof (the2 of (the complete-ionic-equation of Self)) where (not (oneof2 (the1 of (the complete-ionic-equation of Self)) where (It = It2)))) [Reaction-net-ionic-equation-1]))))
(Re has 
    (superclasses (Metal-Atom
                      VIIB-Element)))

(every Re has 
    (atomic-symbol ((Re)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 75 ()))))))
    (chemical-period (6)))
(RbOH-Substance has 
    (superclasses (Base)))

(every RbOH-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a RbOH))))
(RbOH has 
    (superclasses (Ionic-Compound)))

(every RbOH has 
    (has-part ((a Rb-Plus)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Rb-Plus) (:pair 1 OH-Minus))))))))
(Rb-Plus has 
    (superclasses (Metal-Cation)))

(every Rb-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Rb))))))))
(Rb has 
    (superclasses (Metal-Atom
                      Alkali-Metal-Element)))

(every Rb has 
    (atomic-symbol ((Rb)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 39 ()))))))
    (chemical-period (5)))
(Rate-Value has 
    (range-of (rate))
    (domain-of (rate-of))
    (superclasses (Property-Value))
    (test-case ('((Trip has (superclasses (Event))) (*fly-to-Utah has (instance-of (Trip)) (rate ((a Rate-Value)))) (*drive-to-Utah has (instance-of (Trip)) (rate ((a Rate-Value with (value ((:pair *slow Trip))) (less-than ((the rate of *fly-to-Utah))))))) (the value of (the rate of *drive-to-Utah)) ((the less-than of (the rate of *drive-to-Utah)) includes (the rate of *fly-to-Utah)) ((the greater-than of (the rate of *fly-to-Utah)) includes (the rate of *drive-to-Utah))))))
(Rate-Scale has 
    (scale-class-of (rate))
                                
    (superclasses (Scale)))
(Rate-Constant has 
    (scalar-constant-class-of (rate))
    (element-type-of (*slow-fast-scale))
    (superclasses (Constant))
    )
(Radius-Scale has 
    (scale-class-of (radius))
    (superclasses (Scale)))
(Radius-Constant has 
    (scalar-constant-class-of (radius))
    (superclasses (Constant)))
(Ra-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Ra-Plus-2 has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ra)))))))
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge)))))))
(Ra has 
    (superclasses (Metal-Atom
                      IIA-Element)))

(every Ra has 
    (atomic-symbol ((Ra)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 88 ()))))))
    (chemical-period (7)))
(Question has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "inquiry" 2 "n") (:triple "enquiry" 1 "n") (:triple "query" 1 "n") (:triple "interrogation" 1 "n") (:triple "interrogative_sentence" 1 "n"))))
    (wn20-synset ((:set (:triple "inquiry" 2 "n") (:triple "enquiry" 1 "n") (:triple "query" 1 "n") (:triple "interrogation" 1 "n") (:triple "interrogative_sentence" 1 "n"))))
    (domain-of (auxiliary-questions
                   auxiliary-question-of
                   notes-on-paraphrase-encoding
                   notes-on-solution
                   original-question
                   paraphrase-encoded-question
                   post-hoc-analysis))
    (range-of (auxiliary-questions
                  auxiliary-question-of
                  notes-on-paraphrase-encoding-of
                  notes-on-solution-of
                  original-question-of
                  paraphrase-encoded-question-of
                  post-hoc-analysis-of)))
(Quantity-Value has 
    (range-of (quantity))
    (domain-of (quantity-of))
    (superclasses (Property-Value)))
(Quantity-Constant has 
    (scalar-constant-class-of (quantity))
    (superclasses (Constant)))
(Pyruvic-Acid has 
    (superclasses (Organic-Molecule
                      Acid))
    (description ("An intermediate compound in the metabolism of
                          carbohydrates, proteins, and fats. 
                          PubMed:MeSH:From Stedman, 26th ed.  
                          Formula: CH3COCOOH. Souther.")))

(every Pyruvic-Acid has 
    (has-part ((a Carbonyl-Group with (object-of ((a Be-Attached-To with (object ((the Carboxyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Carbonyl-Group has-part of Self)) (the Carbon-Atom has-part of (the Carboxyl-Group has-part of Self))))) (a Be-Attached-To with (object ((the Methyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Carbonyl-Group has-part of Self)) (the Carbon-Atom has-part of (the Methyl-Group has-part of Self))))))))
               (a Carboxyl-Group)
               (a Methyl-Group)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Pyrophosphate has 
    (superclasses (Phosphoryl-Group))
    (description ("A compound with two phosphate groups in a chain, 
                            linked by phosphoanhydride bonds.  Souther. ")))

(every Pyrophosphate has 
    (has-part ((a Monophosphate called "Phosphate-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) called "Phosphate-2"))) (site ((the Phosphorus-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-1")) ((the Oxygen-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-2")) called "Oxygen-1"))) (instrument ((a Phosphoanhydride-Bond)))))))
               (a Monophosphate called "Phosphate-2"))))
(Pyrimidine has 
                                                                      
    (superclasses (Heterocyclic-Compound
                      Nitrogenous-Base))
    (description ("A nitrogenous compound containing one heterocyclic 
                        ring.  Two pyrimidines, cytosine and thymine, are
                        commonly found in DNA.   Lodish:MCB:G-14.")))

(every Pyrimidine has 
    (complement ((must-be-a Purine)))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-H" with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-H" with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C5-H" with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-H" with (object (((the has-part of Self) uniquely-called "C6-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen"))))
(Purine has 
                                               
    (superclasses (Heterocyclic-Compound
                      Nitrogenous-Base))
    (description ("A nitrogenous compound containing two fused 
                        heterocyclic rings.  Two purines, adenine and guanine,
                        commonly are found in DNA and RNA. Lodish:MCB:G-14.")))

(every Purine has 
    (complement ((must-be-a Pyrimidine)))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-H" with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-N9" with (object (((the has-part of Self) uniquely-called "Nitrogen-9"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C5-N7" with (object (((the has-part of Self) uniquely-called "Nitrogen-7"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-H" with (object (((the has-part of Self) uniquely-called "C6-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-7" with (object-of ((a Be-Attached-To uniquely-called "C5-N7" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C8-N7" with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-8" with (object-of ((a Be-Attached-To uniquely-called "C8-N7" with (object (((the has-part of Self) uniquely-called "Nitrogen-7"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C8-N9" with (object (((the has-part of Self) uniquely-called "Nitrogen-9"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C8-H" with (object (((the has-part of Self) uniquely-called "C8-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-9" with (object-of ((a Be-Attached-To uniquely-called "N9-H" with (object (((the has-part of Self) uniquely-called "N9-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))) (a Be-Attached-To uniquely-called "C4-N9" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C8-N9" with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C8-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N9-Hydrogen"))))
(Pupil has 
    (superclasses (Role))
    (wn20-synset ((:set (:triple "pupil" 1 "n") (:triple "student" 1 "n") (:triple "educatee" 1 "n") (:triple "schoolchild" 1 "n") (:triple "school-age_child" 1 "n") (:triple "pupil" 3 "n")))))

(every Pupil has 
    (in-event ((must-be-a Teach)))
    (played-by ((a Tangible-Entity with (recipient-of ((the in-event of Self)))))))
(Pt-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Pt-Plus-2 has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Pt)))))))
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge)))))))
(Pt has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Pt has 
    (atomic-symbol ((Pt)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 78 ()))))))
    (chemical-period (6)))
(Province has 
    (superclasses (Administrative-District))
    (wn20-synset ((:set (:triple "state" 2 "n") (:triple "province" 1 "n")))))
(Protoplasm has 
                                                     
    (superclasses (Colloid))
    (description ("The organized colloidal complex of organic and 
                            inorganic substances that constitutes the living
                            cell or organelle.  WNCD:947.")))

(every Protoplasm has 
    (has-part ((a Aggregate with (element-type ((Organic-Molecule))))
               (a Aggregate with (element-type ((Inorganic-Molecule)))))))
(Proton has 
    (superclasses (Subatomic-Particle))
    (description ("Positively charged subatomic particle found in atomic
                        nuclei. Also exists as an independent chemical species
                        as a positive hydrogen ion (H+).  Alberts:ECB:G-15.")))
(Proteolysis has 
    (superclasses (Catabolize))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (description ("The catabolic pathway by which lipids are hydrolyzed.
                          Souther.")))

(every Proteolysis has 
    (agent ((a Suborganismal-Entity)))
    (object ((a Protein)))
    (instrument ((a Protease)))
    (result ((a Aggregate with (element-type ((Amino-Acid-Sequence)))))))
(Protein-Stop-Codon has 
                                                                                   
    (superclasses (RNA-Regulatory-Sequence
                      RNA-Codon))
    (description ("A codon in mRNA which signals the termination point for
                        translation of a polypeptide.  Souther.")))
(Protein-Sliding-Clamp has 
    (superclasses (DNA-Regulatory-Protein))
    (description ("A protein which encircles the DNA strand and holds the
                        DNA polymerase in place during replication.
                        Alberts:ECB:197.")))

(every Protein-Sliding-Clamp has 
    (purpose ((a Agent-Role with (in-event ((a Restrain with (location ((a Replication-Fork))) (time-during ((the time-during of (a DNA-Replication)))) (object ((a DNA-Polymerase with (location ((the Replication-Fork location of (the Restrain in-event of (the Agent-Role purpose of Self)))))))))))))))
(Protein-Regulatory-Protein has 
                                                           
    (superclasses (Regulatory-Protein))
    (description ("A protein which regulates the activity of other 
                        proteins, usually by directly attaching to them.
                        Souther. ")))
(Protein-Region has 
                                                                
    (superclasses (Region))
    (description ("Any has-region of a protein, such as the carboxy terminal
                        or amino terminal end.  Souther.")))

(every Protein-Region has 
    (is-region-of ((a Protein)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Protein-Phosphatase has 
    (superclasses (Phosphatase))
    (description ("Enzyme that removes a phosphate group by hydrolysis
                        from a protein, usually with high specificity. 
                        Alberts:ECB:G-15.")))

(every Protein-Phosphatase has 
    (purpose ((a Catalyst with (in-event ((a Dephosphorylation with (base ((a Protein))))))))))
(Protein-Kinase has 
    (superclasses (Kinase))
    (description ("Enzyme that transfers a phosphate group from ATP to a
                        specific amino acid of a target protein.  Cells contain
                        hundreds of different protein kinases, phosphorylating
                        different sets of target proteins. Alberts:ECB:G-15.")))

(every Protein-Kinase has 
    (purpose ((a Catalyst with (in-event ((a Phosphorylation with (base ((a Protein))))))))))
(Protein-Initiator-Codon has 
    (superclasses (RNA-Codon
                      RNA-Regulatory-Sequence))
    (description ("The start codon for translation of mRNA into protein.
                        Sequence is AUG. Souther. ")))

(every Protein-Initiator-Codon has 
    (element-type ((Ribonucleotide)))
    (first-element (((the AMP element of Self) called "first")))
    (element ((a AMP called "first" with (next-element (((the UMP element of Self) called "second"))))
              (a UMP called "second" with (next-element (((the GMP element of Self) called "third"))))
              (a GMP called "third"))))
(Protein-Filament has 
                                                                                               
    (superclasses (Compound-Protein
                      Chemical-Sequence))
    (description ("A linear chain of protein molecules.  As microtubules,
                        actin filaments, and intermediate filaments, they
                        constitute much of the cytoskeleton of all eucaryotic
                        cells and especially abundant in muscle cells.
                        see Alberts:ECB:16.")))

(every Protein-Filament has 
    (element-type ((Protein))))
(Protein-Domain has 
    (superclasses (Polypeptide))
    (description ("Compact and stably folded has-region of polypeptide. 
                        Alberts:ECB:G-6.")))

(every Protein-Domain has 
    (is-part-of ((a Protein))))
(Protein-Complex has 
                                                                                                                                                                                                                
    (superclasses (Molecular-Complex))
    (description ("A group of proteins which act together to provide
                        structure or perform some function.  They are often
                        held together by weak bonds such as hydrogen bonds.
                        Examples: histones and the mitotic spindle. Souther.")))

(every Protein-Complex has 
    (has-part ((a Protein)
               (at-least 2 Protein))))
(Protein-Coat has 
    (superclasses (Protein-Complex))
    (description ("The viral protein(s) which cover and protect
                         the viral nucleic acid.")))

(every Protein-Coat has 
    (is-part-of ((a Virus))))
(Protein-Chaperone has 
    (superclasses (Protein-Regulatory-Protein))
    (description ("A protein which assists in the folding or the membrane
                        transport of another protein.  Souther. ")))
(Protein-Binding-Site has 
    (superclasses (Binding-Site))
    (description ("Region on the surface of a protein - typically a
                        cavity or groove - that is complementary in shape to 
                        another molecule (the ligand) and therefore can bind it
                        through the formation of multiple weak (noncovalent)
                        bonds. Alberts:ECB:G-3.")))

(every Protein-Binding-Site has 
    (location-of ((must-be-a Attach))))
(Protein has 
                                                                                                                                                                                                                                                                                                                                                                                                                             
    (superclasses (Polypeptide))
    (description ("Linear polymer of amino acids linked together in a
                      specific sequence by peptide bonds.  Alberts:ECB-G-15.")))

(every Protein has 
    (element-type ((at-least 50 Amino-Acid)
                   (at-least 1 Protein-Domain))))
(Proteasome has 
    (superclasses (Protein-Complex))
    (description ("Large protein complex in the cytosol that is 
                        responsible for degrading cytosolic proteins that have
                        been marked for destruction by ubiquitination or by
                        some other means.  Alberts:ECB:G-14.")))

(every Proteasome has 
    (purpose ((a Instrument-Role with (in-event ((a Proteolysis))))))
    (has-part ((a Aggregate called "proteases" with (element-type ((Protease))))
               (a Protein-Complex))))
(Protease has 
    (superclasses (Catabolic-Enzyme))
    (description ("Enzyme such as trypsin that degrades proteins by
                        hydrolyzing some of their peptide bonds.
                        Alberts:ECB:G-15.")))

(every Protease has 
    (purpose ((a Catalyst with (in-event ((a Proteolysis)))))))
(Prosecution has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "prosecution" 1 "n") (:triple "criminal_prosecution" 1 "n") (:triple "legal_action" 1 "n")))))

(every Prosecution has 
    (text-nominalization ("prosecution")))
(Propylamine has 
    (superclasses (Chemical-Group))
    (description ("Amine derived from propane. CH3-CH2-CH2-NH3.
                             Souther.")))

(every Propylamine has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Amino-Group)
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-3"))))
(Propyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Hydrophobic chemical group derived from propane.
                             CH3-CH2-CH2-  Souther.")))

(every Propyl-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-3"))))
(Propionic-Group has 
    (superclasses (Chemical-Group))
    (description ("Acidic chemical group derived from propane.
                             CH3-CH2-COO-  Souther.")))

(every Propionic-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object ((the Carboxyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Carboxyl-Group has-part of Self))))))))
               (a Carboxyl-Group)
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2"))))
(Propionamino-Group has 
    (superclasses (Chemical-Group))
    (description ("Amine derived from Propionamino acid.
                             CH2-CH2-CONH3  Souther.")))

(every Propionamino-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object ((the Amido-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Amido-Group has-part of Self))))))))
               (a Amido-Group)
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2"))))
(Property-Value has 
    (domain-of (cardinal-value
                   categorical-value
                   from-value-of
                   greater-than-or-equal-to
                   less-than-or-equal-to
                   greater-than
                   less-than
                   max-value
                   min-value
                   preferred-unit
                   property-of-slot
                   property-slot
                   same-as
                   scalar-value
                   to-value-of
                   subscript))
    (range-of (cardinal-value-of
                  categorical-value-of
                  from-value
                  greater-than-or-equal-to
                  less-than-or-equal-to
                  greater-than
                  less-than
                  max-value-of
                  min-value-of
                  preferred-unit-of
                  property-of-slot-of
                  property-slot-of
                  same-as
                  scalar-value-of
                  to-value
                  subscript-of))

    (superclasses (Property-Group)))

(every Property-Value has 
    (slots-to-opportunistically-evaluate (value))
    (property-slot ((the range-of of (the instance-of of Self))))
    (property-of-slot ((the inverse of (the property-slot of Self))))
    (text-slot (((oneof ?p in (the property-slot of Self) where (has-value (the (the inverse of ?p) of Self))) or (the primary-slot of Self) or (the first of (the property-slot of Self)))))
    (text-premods ((if (has-value (the used-in-equation of Self)) then ((?vsympair == (oneof (the equation-symbol of (the used-in-equation of Self)) where ((the2 of It) = Self))) and (make-phrase (:seq (if (#'(LAMBDA () (LISTP (CADR (KM-UNIQUE0 '?vsympair))))) then (if ((#'(LAMBDA () (CAADR (KM-UNIQUE0 '?vsympair)))) = QUOTE) then (#'(LAMBDA () (STRING (CADADR (KM-UNIQUE0 '?vsympair))))) else "?") else #'(LAMBDA () (STRING (CADR (KM-UNIQUE0 '?vsympair))))) "="))) else (if (has-value (the called of Self)) then (make-phrase (:seq (oneof (the called of Self) where t) "=")) else (make-phrase (:seq (forall ?i in (forall ?ip in (the property-of-slot of Self) (the ?ip of Self)) (:seq "the" (oneof ?p in (the property-slot of Self) where ((the ?p of ?i) = Self)) "of" (the text-def-head of ?i) "="))))))))
    (text-sentence ((if (not ((make-phrase (the text-phrase of Self)) = "")) then (make-phrase (:seq (the text-premods of Self) (the text-head of Self))) else (the text-existential-there of Self))))
    (text-existential-there ((make-sentence (:seq "there is" (the text-indef-head of Self) (if (has-value (the called of Self)) then (:seq "(called" (the called of Self) "nospace" ")"))))))
    (text-def-determiner ((:seq "the")))
    (text-indef-determiner ((if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (the text-slot of Self))) 0))))) then (:seq "an") else (:seq "a"))))
    (text-description ((the text-sentence of Self)))
    (text-gen ((make-phrase (the text-phrase of Self))))
    (text-phrase ((:seq (the text-head of Self) (the text-postmods of Self))))
    (text-def-head ((if (has-value (the text-head of Self)) then (:seq (the text-def-determiner of Self) (the text-slot of Self) "of" (the text-head of Self)) else (:seq "the unknown" (the text-slot of Self)))))
    (text-indef-head ((if (has-value (the text-head of Self)) then (:seq (the text-indef-determiner of Self) (the text-slot of Self) "of" (the text-head of Self)) else (:seq "an unknown" (the text-slot of Self)))))
    (text-head ((if (the categorical-constant-class of (the property-slot of Self)) then (oneof ?val in (the value of Self) where ((the categorical-constant-class of (the property-slot of Self)) includes (the instance-of of ?val))) else ((?scalar-val == ((oneof ?val in (the value of Self) where (((the1 of ?val) and (forall ?ip in (the property-of-slot of Self) ((the instance-of of (the ?ip of Self)) includes (the2 of ?val)))))) or (oneof ?val in (the value of Self) where t))) and (?card-val == (oneof ?val in (the value of Self) where (((the1 of ?val) and ((the1 of ?val) isa Number) and ((oneof ?prop in (the range-of of (the instance-of of Self)) where ((the cardinal-unit-class of ?prop) and ((the2 of ?val) isa (the cardinal-unit-class of ?prop))))))))) and (?conv-card-val == (if ((has-value ?card-val) and (has-value (the preferred-unit of Self))) then (the value of (the output of (a Unit-Conversion with (input (Self)) (target-unit ((the preferred-unit of Self)))))))) and (if ?conv-card-val then (:seq (the1 of ?conv-card-val) (if ((the2 of ?conv-card-val) /= *unity) then (the2 of ?conv-card-val))) else (if ?card-val then (:seq (the1 of ?card-val) (if ((the2 of ?card-val) /= *unity) then (the2 of ?card-val))) else (if ?scalar-val then (if (oneof ?ip in (the property-of-slot of Self) where ((the2 of ?scalar-val) = (the instance-of of (the ?ip of Self)))) then (the1 of ?scalar-val) else (:seq (the1 of ?scalar-val))))))))))
    (text-postmods ((if (has-value (oneof ?val in (the value of Self) where ((the1 of ?val) isa Number))) then (oneof (the all-instances of (the scalar-constant-class of (the text-slot of Self))) where (It isa Primary-Constant)))))
    (greater-than ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-gt TheValue) else t))))
    (greater-than-or-equal-to ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-gte TheValue) else t))))
    (less-than ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-lt TheValue) else t))))
    (less-than-or-equal-to ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-lte TheValue) else t))))
    (same-as ((constraint (if ((has-value (the value of Self)) and (has-value (the value of TheValue))) then (Self property-eq TheValue) else t))))
    (value ((((constraint ((if (has-value (the scalar-constant-class of (the property-slot of Self))) then (((((the1 of TheValue) isa Number) and ((if (has-value (the2 of TheValue)) then (if ((the2 of TheValue) isa Unit-of-Measurement) then (oneof (the cardinal-unit-class of (the property-slot of Self)) where ((the2 of TheValue) isa It)) else (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue)))) else ((the cardinal-unit-class of (the property-slot of Self)) = UoM-Unitless)))) or ((oneof (the scalar-constant-class of (the property-slot of Self)) where ((the1 of TheValue) isa It)) and (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue))))) and (#'(LAMBDA () (VALUECHECK (KM0 'Self) (KM0 'TheValue))))) else ((oneof (the categorical-constant-class of (the property-slot of Self)) where (TheValue isa It)))))) (set-constraint (#'(LAMBDA () (VALUES-CONSISTENT (KM0 'TheValues)))))) && ((forall (the cardinal-value of Self) (:pair (the numeric-value of It) (the unit of It)))) && ((forall (the scalar-value of Self) (:pair (the scalar-constant of It) (the reference-class of It)))) && ((forall (the categorical-value of Self) (the categorical-constant of It))))))
    (max-value ((constraint (sanity-check ((if (has-value (the scalar-constant-class of (the property-slot of Self))) then (((((the1 of TheValue) isa Number) and ((if (has-value (the2 of TheValue)) then (if ((the2 of TheValue) isa Unit-of-Measurement) then (oneof (the cardinal-unit-class of (the property-slot of Self)) where ((the2 of TheValue) isa It)) else (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue)))) else ((the cardinal-unit-class of (the property-slot of Self)) = UoM-Unitless)))) or ((oneof (the scalar-constant-class of (the property-slot of Self)) where ((the1 of TheValue) isa It)) and (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue))))) and (#'(LAMBDA () (VALUECHECK (KM0 'Self) (KM0 'TheValue))))) else ((oneof (the categorical-constant-class of (the property-slot of Self)) where (TheValue isa It)))))))))
    (min-value ((constraint (sanity-check ((if (has-value (the scalar-constant-class of (the property-slot of Self))) then (((((the1 of TheValue) isa Number) and ((if (has-value (the2 of TheValue)) then (if ((the2 of TheValue) isa Unit-of-Measurement) then (oneof (the cardinal-unit-class of (the property-slot of Self)) where ((the2 of TheValue) isa It)) else (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue)))) else ((the cardinal-unit-class of (the property-slot of Self)) = UoM-Unitless)))) or ((oneof (the scalar-constant-class of (the property-slot of Self)) where ((the1 of TheValue) isa It)) and (oneof (the domain of (the property-slot of Self)) where (It subsumes (the2 of TheValue))))) and (#'(LAMBDA () (VALUECHECK (KM0 'Self) (KM0 'TheValue))))) else ((oneof (the categorical-constant-class of (the property-slot of Self)) where (TheValue isa It)))))))))
    (cardinal-value ((((must-be-a Cardinal with (numeric-value ((must-be-a Number))) (unit ((constraint ((oneof (the cardinal-unit-class of (the property-slot of Self)) where (It covers TheValue)) or (TheValue is-subsumed-by (the domain of (the property-slot of Self))))))))) && ((forall (the value of Self) where ((the1 of It) isa Number) (a Cardinal with (numeric-value ((the1 of It))) (unit ((the2 of It)))))))))
    (scalar-value ((((must-be-a Scalar with (scalar-constant ((constraint (oneof (the scalar-constant-class of (the property-slot of Self)) where (It covers TheValue))))))) && ((forall (the value of Self) where (((the1 of It) isa Constant) and (has-value (the2 of It))) (a Scalar with (scalar-constant ((the1 of It))) (reference-class ((the2 of It)))))))))
    (categorical-value ((((must-be-a Categorical with (categorical-constant ((constraint (oneof (the categorical-constant-class of (the property-slot of Self)) where (It covers TheValue))))))) && ((forall (the value of Self) where (has-value (the categorical-constant-class-of of Self)) (a Categorical with (categorical-constant ((It))))))))))
(Property-Group has 
    (domain-of (value))
    (range-of (value-of))
                                                                                                                                                                                                                            
    (superclasses (Thing)))
(Property-Class-Order has 
    (domain-of (property-slot))
    (range-of (property-slot-of))
    (superclasses (Property-Group
                      Aggregate)))
(Propel has 
    (superclasses (Move))
    (wn16-synset ((:set (:triple "propel" 1 "v") (:triple "impel" 2 "v"))))
    (wn20-synset ((:set (:triple "propel" 1 "v") (:triple "impel" 2 "v"))))
    )

(every Propel has 
    (agent ((must-be-a Entity)))
    (object ((a Tangible-Entity with (is-near ((the agent of Self))))))
    (toward ((a Spatial-Entity with (plays ((a Target))))))
    (destination ((the toward of Self)))
    (text-nominalization ("propulsion")))
(Promoter-Region has 
    (superclasses (DNA-Regulatory-Region))
    (description ("The has-region that encompasses the promoter, which is 
                        usually in two separate sequences. Souther.")))

(every Promoter-Region has 
    (encloses ((a Promoter))))
(Promoter has 
    (superclasses (DNA-Regulatory-Sequence))
    (description ("Nucleotide sequence in DNA to which RNA polymerase 
                         binds to begin transcription. Alberts:ECB:G-15.")))

(every Promoter has 
    (element-type ((Sequence)))
    (element ((a TTGACA-Like-Sequence)
              (a Sequence)
              (a TATA-Box)
              (a Sequence))))
(Proline has 
    (superclasses (Nonessential-Amino-Acid
                      Nonpolar-Amino-Acid))
    (description ("A nonpolar amino acid with a propyl side chain whose
                        distal end is attached to the amino group to form a
                        five-membered ring structure.  Souther.")))

(every Proline has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Propyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-1")))))))
               (a Amino-Group with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Propyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-3") (the Nitrogen-Atom has-part of (the Propyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Propyl-Group)))))))
(Projectile has 
    (superclasses (Role)))

(every Projectile has 
    (in-event ((must-be-a Fire)))
    (played-by ((a Tangible-Entity with (object-of ((the in-event of Self)))))))
(Product has 
    (superclasses (Role))
    (wn20-synset ((:set (:triple "product" 2 "n"))
                  (:set (:triple "production" 2 "n")))))

(every Product has 
    (in-event ((a Produce)))
    (played-by ((a Tangible-Entity with (result-of ((the in-event of Self))) (material ((the raw-material of (the in-event of Self))))))))
(Produce has 
                                                                                                                                                                                                        
    (superclasses (Create))
    (required-slot (raw-material))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq raw-material "the raw material/parts")))
    (test-case ('((new-situation) (*metal has (instance-of (Substance))) (a Produce with (raw-material (*metal))) (do-and-next (thelast Produce)) ((the material of (the result of (thelast Produce))) = *metal) (the text-gen of (thelast Produce)) (new-situation) (*brick has (instance-of (Physical-Object))) (a Produce with (raw-material (*brick))) (do-and-next (thelast Produce)) ((the has-part of (the result of (thelast Produce))) = *brick) (the text-gen of (thelast Produce)))))
    (wn16-synset ((:set (:triple "produce" 1 "v") (:triple "bring_forth" 3 "v"))))
    (wn20-synset ((:set (:triple "produce" 1 "v") (:triple "bring_forth" 3 "v")))))

(every Produce has 
    (raw-material ((a Tangible-Entity)))
    (soft-pcs-list ((forall (the raw-material of Self) (:triple It object-of (a Be-Controlled with (agent (the agent of Self)))))))
    (add-list ((if (has-value (the result of Self)) then (if ((the raw-material of Self) isa Substance) then (forall (the result of Self) (:triple It material (the raw-material of Self) [Produce-add-1])) else (forall (the result of Self) (:triple It has-part (the raw-material of Self) [Produce-add-2]))) else (if ((the raw-material of Self) isa Substance) then (:triple Self result (a Tangible-Entity with (material ((the raw-material of Self)))) [Produce-add-3]) else (:triple Self result (a Tangible-Entity with (has-part ((the raw-material of Self)))) [Produce-add-4])))))
    (text-argslots ((:seq raw-material instrument)))
    (text-active-verbseq-sg ("produces"))
    (text-active-verbseq-pl ("produce"))
    (text-passive-verbseq-sg ("gets produced"))
    (text-passive-verbseq-pl ("get produced"))
    (text-nominalization ("production")))
(Procaryotic-TRNA has 
    (superclasses (TRNA))
    (description ("Procaryotic tRNA molecule.  Souther. ")))
(Procaryotic-RRNA has 
    (superclasses (RRNA))
    (description ("Procaryotic rRNA molecule.  Souther. ")))
(Procaryotic-RNA-Transcript has 
    (superclasses (RNA-Transcript))
    (description ("The DNA transcription product in procaryotes, which 
                        can be a single gene product or a transcript of an
                        operon containing multiple gene products.
                        Souther.")))

(every Procaryotic-RNA-Transcript has 
    (result-of ((a Procaryotic-DNA-Transcription))))
(Procaryotic-Ribosome has 
    (superclasses (Ribosome))
    (description ("Ribosome found in cytoplasm of 
                                     procaryotes. Souther.")))

(every Procaryotic-Ribosome has 
    (mass ((must-be-a Mass-Value with (value ((:pair 2500000 *dalton))))))
    (has-part ((a Ribonucleoprotein called "RNP1" with (mass ((a Mass-Value with (value ((:pair 1600000 *dalton)))))) (has-part ((exactly 2 Procaryotic-RRNA) (exactly 34 Procaryotic-Ribosomal-Protein))))
               (a Ribonucleoprotein called "RNP2" with (mass ((a Mass-Value with (value ((:pair 900000 *dalton)))))) (has-part ((a Procaryotic-RRNA) (exactly 21 Procaryotic-Ribosomal-Protein)))))))
(Procaryotic-Ribosomal-Protein has 
    (superclasses (Ribosomal-Protein))
    (description ("A protein that is part of the procaryotic ribosome.
                      There are 50 or more distinct proteins associated with
                      ribosomal RNA in the ribosome. Souther. ")))
(Procaryotic-MRNA has 
    (superclasses (MRNA))
    (description ("RNA molecule that specifies the amino acid sequence of a
                     protein. Made by RNA polymerase as a
                     complementary copy of DNA.  It is translated into protein
                     in a process catalyzed by ribosomes. Alberts:ECB:G-11")))

(every Procaryotic-MRNA has 
    (purpose ((a Vehicle with (in-event ((a Procaryotic-Gene-To-Protein-Expression with (object ((a Aggregate with (element-type ((Cistron))))))))))))
    (has-part ((a RNA-5prime-UTR)
               (a RNA-Translated-Region with (has-part ((a Gene-Transcript with (has-part ((a Protein-Initiator-Codon) (a Protein-Stop-Codon)))))))
               (a RNA-3prime-UTR))))
(Procaryotic-Gene-To-Protein-Expression has 
    (superclasses (Gene-To-Protein-Expression))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("Gene expression of proteins in Procaryotes, which
                           often involves operons containing several linked
                           genes which are transcribed as a single transcript.
                           Souther. ")))

(every Procaryotic-Gene-To-Protein-Expression has 
    (donor ((a Procaryotic-Gene)))
    (recipient ((a Protein)))
    (object ((a Genetic-Information)))
    (instrument ((a Procaryotic-MRNA)))
    (first-subevent ((the Procaryotic-DNA-Transcription subevent of Self)))
    (subevent ((a Procaryotic-DNA-Transcription))))
(Procaryotic-Gene has 
    (superclasses (Gene))
    (description ("Region of procaryotic DNA that controls a
                                discrete hereditary characteristic, usually 
                                corresponding to a single protein or RNA.
                                Most procaryotic genes are part of operons. 
                                Souther. ")))

(every Procaryotic-Gene has 
    (is-part-of ((a Operon))))
(Procaryotic-DNA-Transcription has 
    (superclasses (DNA-Transcription))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("Copying of one strand of DNA into a complementary RNA
                       sequence by the enzyme RNA Polymerase in procaryotes. cf
                       Alberts:ECB:G-18")))

(every Procaryotic-DNA-Transcription has 
    (agent ((a Procaryote)))
    (object ((a Procaryotic-DNA-Strand)))
    (raw-material ((a Aggregate with (element-type ((Ribonucleotide))))))
    (result ((a Procaryotic-RNA-Transcript))))
(Procaryotic-DNA-Synthesis has 
    (superclasses (DNA-Synthesis))
    (required-slot (object
                       result
                       instrument))
    (primary-slot (raw-material
                      destination))
    (description ("A process by which a copy of all or part of a 
                              procaryotic DNA molecule is made. Souther.")))

(every Procaryotic-DNA-Synthesis has 
    (agent ((a Procaryote)))
    (instrument ((a Procaryotic-DNA-Polymerase)
                 (at-least 1 Procaryotic-DNA-Polymerase))))
(Procaryotic-DNA-Strand has 
    (superclasses (DNA-Strand))
    (description ("One of two strands that make up the DNA double helix.
                        The two strands run antiparallel and are held 
                        together by Hydrogen-Bond between the bases.
                        Souther.")))

(every Procaryotic-DNA-Strand has 
    (has-part ((a DNA-Gene-Coding-Sequence with (has-part ((a DNA-Noncoding-Sequence) (at-least 1 DNA-Noncoding-Sequence) (a Procaryotic-Gene) (at-least 1 Procaryotic-Gene)))))))
(Procaryotic-DNA-Polymerase has 
    (superclasses (DNA-Polymerase))
    (description ("Enzyme that catalyzes the synthesis or repair
                        of a DNA molecule from nucleoside triphosphate
                        precursors using a DNA template in procaryotes.
                        Souther. see Alberts: ECB:G-16.")))
(Procaryotic-DNA has 
                                       
    (superclasses (DNA-Molecule))
    (description ("Double-stranded polynucleotide formed from two 
                                separate chains of deoxyribonucleotide units; 
                                serves as the carrier of genetic information in
                                procaryotes. Alberts:ECB:G-6.")))

(every Procaryotic-DNA has 
    (has-part ((at-least 483 Gene)
               (at-most 5570 Gene)
               (exactly 2 DNA-Strand)
               (a DNA-Strand called "DNA-Strand-1" with (has-part ((a Operon with (has-part ((at-least 2 Gene) (a Gene) (a Gene)))))))
               (a DNA-Strand called "DNA-Strand-2" with (has-part ((a Operon with (has-part ((at-least 2 Gene) (a Gene) (a Gene))))))))))
(Procaryotic-Cytoplasm has 
    (superclasses (Cytoplasm))
    (description ("The cytoplasm of procaryotic cell containing the
                         DNA and other cellular constituents such as
                         proteins, lipids, RNA, carbohydrates and their
                         building blocks. Souther. ")))

(every Procaryotic-Cytoplasm has 
    (has-part ((a Procaryotic-DNA))))
(Procaryotes has 
    (superclasses (Biological-Kingdom))
    (description ("The taxonomic division consisting of single-celled
                         non-nucleated organisms (see Procaryote).  Souther.")))
(Procaryote has 
                          
    (superclasses (Unicellular-Organism))
    (description ("Single-celled organism distinguished by the absence
                           of a distinct nucleus. modified Alberts:ECB:G-14.")))

(every Procaryote has 
    (has-part ((a Procaryotic-Cytoplasm)
               (a Plasma-Membrane with (encloses ((the Cytoplasm has-part of Self))))
               (a Cell-Wall with (encloses ((the Plasma-Membrane has-part of Self)))))))
(Priority-Scale has 
                                 
    (scale-class-of (priority))
    (superclasses (Scale)))
(Priority-Constant has 
    (element-type-of (*low-urgent-scale))
    (scalar-constant-class-of (priority))
    (superclasses (Constant))
    )
(Print has 
    (superclasses (Mark))
    (required-slot (object
                       result))
    (description ("To render a written message in physical form"))
    (wn20-synset ((:set (:triple "print" 1 "v") (:triple "publish" 1 "v")))))

(every Print has 
    (object ((a Document)))
    (result ((a Physical-Document)))
    (text-active-verbseq-sg ("prints"))
    (text-active-verbseq-pl ("print"))
    (text-passive-verbseq-sg ("gets printed"))
    (text-passive-verbseq-pl ("get printed"))
    (text-nominalization ("printing")))
(Primase has 
    (superclasses (Polymerase))
    (description ("An RNA polymerase that makes the short RNA primer 
                        needed to initiate DNA chain elongation during DNA 
                        replication.  see Alberts:ECB:195.")))

(every Primase has 
    (purpose ((a Catalyst with (in-event ((a DNA-Replication)))))))
(Primary-RNA-Transcript has 
    (superclasses (Eucaryotic-RNA-Transcript))
    (description ("The newly transcribed RNA molecule 
                                       before any modifications have been made
                                       to it in the nucleus.   Souther.")))

(every Primary-RNA-Transcript has 
    (has-part ((a Cistron)
               (a RNA-3prime-UTR)
               (a RNA-5prime-UTR))))
(Primary-Constant has 
                                                                                                                         
    (superclasses (Constant)))
(Preparedness-for-Enemy-Response has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Precipitate has 
    (superclasses (Chemical))
    (test-case ('(((the text-gen of (oneof (the result of (a Reaction with (raw-material ((the base of (a Aqueous-Solution with (base ((a Sn_NO3_2-Substance))))) (the base of (a Aqueous-Solution with (base ((a NaOH-Substance))))))))) where (It isa Precipitate))) = "Sn(OH)2")))))

(every Precipitate has-definition 
    (instance-of (Chemical
                     [Precipitate-instance-of-1]))
    (result-of ((a Reaction)))
    (solubility ((a Solubility-Value with (value ((:pair *insoluble H2O-Substance)))))))
(Power-Value has 
    (range-of (power))
    (domain-of (power-of))
    (superclasses (Property-Value)))
(Power-Constant has 
    (scalar-constant-class-of (power))
    (superclasses (Constant)))
(Position-for-Follow-On has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Portal-Covering has 
    (superclasses (Barrier))
    (wn16-synset ((:set (:triple "movable_barrier" 1 "n"))))
    (wn20-synset ((:set (:triple "movable_barrier" 1 "n")))))

(every Portal-Covering has 
    (played-by ((a Tangible-Entity with (is-part-of ((a Tangible-Entity with (plays ((a Container))))))))))
(Portal has 
                                               
    (superclasses (Conduit))
    (wn20-synset ((:set (:triple "portal" 1 "n")))))

(every Portal has 
    (in-event ((a Move-Through)))
    (played-by ((a Spatial-Entity with (path-of ((the in-event of Self)))))))
(Polysaccharide has 
                          
    (superclasses (Macromolecule))
    (description ("Linear or branched polymer composed of sugars.
                        Examples are glycogen and cellulose.
                        Alberts:ECB:G-14.")))

(every Polysaccharide has 
    (element-type ((Monosaccharide))))
(Polyribosome has 
    (superclasses (Nucleoprotein-Complex))
    (description ("A mRNA-ribosome complex made up of several
                             ribosomes spaced along a mRNA.  Alberts:ECB:232")))

(every Polyribosome has 
    (has-part ((a MRNA)
               (a Chemical-Sequence with (element-type ((Ribosome))) (object-of ((a Be-Attached-To with (object ((the MRNA has-part of Self))))))))))
(Polyribonucleotide has 
                            
    (superclasses (Polynucleotide))
    (description ("A polymer of ribonucleotides.  Example is RNA. Souther.")))

(every Polyribonucleotide has 
    (element ((at-least 2 Ribonucleotide)))
    (element-type ((Ribonucleoside-Monophosphate))))
(Polyprotic-Acid has 
    (superclasses (Acid)))

(every Polyprotic-Acid has-definition 
    (instance-of (Ionic-Compound-Substance
                     [Polyprotic-Acid-instance-of-1]))
    (has-basic-structural-unit ((a Ionic-Compound)
                                (if (has-value (the has-chemical-formula of Self)) then (constraint ((oneof (the elements of (the term of (the has-chemical-formula of TheValue))) where (((the2 of It) = H-Plus) and ((the1 of It) >= 2)))))))))
(Polypeptide has 
    (superclasses (Amino-Acid-Sequence))
    (description ("Linear polymer composed of multiple amino acids.
                        Proteins are large polypeptides.  Alberts:ECB:G-14."))
    )
(Polynucleotide has 
                                                                          
    (superclasses (Nucleotide-Sequence
                      Macromolecule))
    (description ("A molecular chain of nucleotides chemically bonded by a
                    series of phosphodiester linkages.  Alberts:ECB:G-14.
                    Defined in this KB to be at least 50
                    nucleotides long, shorter nucleotide sequences are called
                    oligonucleotides.  Note: the current lengths are
                    arbitrary.  All sources so far consulted just say a
                    'long' nucleotide sequence.  Souther. ")))

(every Polynucleotide has 
    (has-region ((a 3-Prime-End)
                 (a 5-Prime-End)))
    (has-part ((a 5-Prime-Nucleotide with (object-of ((a Be-Attached-To with (object (((the Nucleotide-Sequence has-part of Self) called "Nucleotide Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 5-Prime-Nucleotide has-part of Self))) called "Carbon-3"))) (instrument ((a Phosphodiester-Bond)))))))
               (a 3-Prime-Nucleotide with (object-of ((a Be-Attached-To with (object (((the Nucleotide-Sequence has-part of Self) called "Nucleotide Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 3-Prime-Nucleotide has-part of Self))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a Nucleotide-Sequence called "Nucleotide Sequence")
               (at-least 50 Nucleotide))))
(Polymerize has 
    (superclasses (Produce
                      Enzyme-Catalysis))
    (required-slot (result
                       raw-material))
    (primary-slot (agent
                      instrument))
    (description ("To link together many identical or similar units
                        (monomers) in a repetitive fashion. Alberts:ECB:G-14;
                        derived from definition of polymer."))
    (wn16-synset ((:set (:triple "polymerize" 1 "v") (:triple "polymerize" 2 "v"))))
    (wn20-synset ((:set (:triple "polymerize" 1 "v") (:triple "polymerize" 2 "v")))))

(every Polymerize has 
    (raw-material ((a Aggregate with (element-type ((Monomer))))))
    (instrument ((a Polymerase)))
    (result ((a Polymer)))
    (text-argslots ((:seq raw-material instrument)))
    (text-active-verbseq-sg ("polymerizes"))
    (text-active-verbseq-pl ("polymerize"))
    (text-passive-verbseq-sg ("gets polymerized"))
    (text-passive-verbseq-pl ("get polymerized"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Polymerase has 
                                                                                    
    (superclasses (Synthase))
    (description ("General term for an enzyme that catalyzes addition of
                        subunits to a polymer.  DNA polymerase, for example,
                        makes DNA, while RNA polymerase makes RNA.
                        Alberts:ECB:G-14.")))

(every Polymerase has 
    (purpose ((a Catalyst with (in-event ((a Polymerize)))))))
(Polymer has 
                              
    (superclasses (Organic-Molecule))
    (description ("Large and usually linear molecule made by linking
                              together multiple identical or similar units
                              (monomers) in a repetitive fashion.
                              Alberts:ECB:G-14")))

(every Polymer has 
    (element-type ((Monomer))))
(Polydeoxyribonucleotide has 
                                                              
    (superclasses (Polynucleotide
                      DNA-Sequence))
    (description ("A molecular chain of 
                                        deoxyribonucleotides chemically bonded 
                                        by a series of phosphodiester linkages.
                                        Alberts:ECB:G-14.")))

(every Polydeoxyribonucleotide has 
    (material ((a DNA-Substance)))
    (has-part ((a Internal-DNA-Sequence with (has-part ((a Deoxyribonucleotide))))))
    (element-type ((a D-GMP)
                   (a D-AMP)
                   (a D-CMP)
                   (a D-TMP))))
(Poly-A-Tail has 
    (superclasses (Polyribonucleotide))
    (description ("The polyadenylate chain added to the end of a
                            newly synthesized mRNA in eucaryotes.  Souther.")))

(every Poly-A-Tail has 
    (is-part-of ((a Functional-MRNA-Transcript)))
    (has-part ((a AMP)
               (at-least 100 AMP)
               (at-most 200 AMP))))
(Political-State has 
    (superclasses (Administrative-District))
    (description ("a state (such as Texas) within a country"))
    (wn20-synset ((:set (:triple "state" 2 "n") (:triple "province" 1 "n")))))
(Polarity-Value has 
    (range-of (polarity))
    (domain-of (polarity-of))
    (superclasses (Property-Value)))
(Polarity-Constant has 
    (categorical-constant-class-of (polarity))
    (superclasses (Constant))
    )
(Polar-Molecule has 
                                 
    (superclasses (Molecule))
    (description ("A molecule in which the bonding electrons are attracted
                        more strongly to some atoms than to others, thereby
                        creating an uneven (or polarized) distribution of
                        electric charge.  Alberts:ECB:G-14.")))

(every Polar-Molecule has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Polar-Amino-Acid has 
    (superclasses (Amino-Acid
                      Polar-Molecule
                      Hydrophilic-Structure))
    (description ("Amino acids with side chains which are hydrophilic.
                        see Alberts:ECB:61."))
    )
(POH-Value has 
    (superclasses (Property-Value))
    (range-of (pOH))
    (domain-of (pOH-of)))

(every POH-Value has 
    (property-slot ((pOH)))
    (pOH-of ((must-be-a Chemical-Entity)))
    (less-than ((must-be-a POH-Value)))
    (greater-than ((must-be-a POH-Value)))
    (same-as ((must-be-a POH-Value))))
(PO4-Minus-3-Substance has 
    (superclasses (Anion-Substance)))

(every PO4-Minus-3-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 0.024 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a PO4-Minus-3))))
(PO4-Minus-3 has 
    (superclasses (Anion)))

(every PO4-Minus-3 has 
    (charge ((a Charge-Value with (value ((:pair -3 *electronic-charge))))))
    (has-chemical-name ("phosphate"))
    (has-acid-name ("phosphoric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 P) (:pair 4 O))))))))
(Po has 
    (superclasses (Metal-Atom
                      VIA-Element)))

(every Po has 
    (atomic-symbol ((Po)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 84 ()))))))
    (chemical-period (6)))
(Platoon has 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
    (member-of (_Partition8))
    (superclasses (Military-Unit)))
(Platform has 
                      
    (superclasses (Architectural-Structure))
    (description ("a horizontal architectural structure supporting everything on it"))
    (test-case ('((*TheOrchestra has (instance-of (Organization))) (*TheChoir has (instance-of (Organization))) (*TheConductor has (instance-of (Person))) (*TheStage has (instance-of (Platform)) (has-on-it (*TheOrchestra *TheChoir *TheConductor))) ((the object of (the Be-Supported instrument-of of *TheStage)) includes *TheOrchestra) ((the instrument of (the Be-Supported object-of of *TheChoir)) = *TheStage))))
    (wn20-synset ((:set (:triple "support" 7 "n") (:triple "support" 10 "n") (:triple "supporting_structure" 1 "n")))))

(every Platform has 
    (orientation ((a Angle-Value with (value ((:pair *horizontal Entity))))))
    (instrument-of ((forall (the has-on-it of Self) (a Be-Supported with (object ((It))) (instrument ((Self))))))))
(Plastic has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "plastic" 1 "n")))))
(Plasma-Membrane has 
                                           
    (superclasses (Biological-Membrane))
    (description ("Membrane that surrounds a living cell. 
                         Alberts:ECB:G-14")))

(every Plasma-Membrane has 
    (is-part-of ((a Cell)))
    (purpose ((a Barrier with (in-event ((a Be-Blocked with (object ((a Tangible-Entity with (is-outside ((the Cell is-part-of of Self))))))))))
              (a Instrument-Role with (in-event ((a Be-Confined with (object ((the content of (the Cell is-part-of of Self))))))) (is-inside ((the Cell is-part-of of Self))))))
    (has-part ((a Lipid-Bilayer)
               (a Aggregate called "plasma membrane proteins" with (element-type ((Protein)))))))
(Plant-Cell has 
    (superclasses (Suborganismal-Entity))
    (description ("The basic unit from which plants are made. Most have a
                     plasma membrane surrounded by a cell wall to provide
                     rigidity.  Souther. ")))

(every Plant-Cell has 
    (is-basic-structural-unit-of ((a Plant)))
    (is-basic-functional-unit-of ((a Plant)))
    (has-part ((a Plasma-Membrane with (encloses ((the Cytoplasm has-part of Self))))
               (a Cell-Wall with (encloses ((the Plasma-Membrane has-part of Self))))
               (a Cytoplasm))))
(Plant has 
    (member-of (_Partition2))
    (superclasses (Eucaryote))
    (description ("a living entity incapable of locomotion"))
    (wn20-synset ((:set (:triple "plant" 2 "n") (:triple "flora" 2 "n") (:triple "plant_life" 1 "n")))))
(Planning has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "preparation" 1 "n") (:triple "planning" 1 "n") (:triple "readying" 1 "n")))))

(every Planning has 
    (text-nominalization ("planning")))
(Plains has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Plains has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit)))))))
(Place-Order has 
    (superclasses (Action))
    (description ("order an entity from a seller"))
    (wn20-synset ((:set (:triple "order" 2 "v")))))

(every Place-Order has 
    (object ((a Entity with (is-possessed-by ((a Entity))))))
    (base ((the is-possessed-by of (the object of Self))))
    (text-nominalization ("placing")))
(Place has 
    (range-of (location))
    (domain-of (location-of))
    (superclasses (Spatial-Entity))
    (wn20-synset ((:set (:triple "location" 1 "n"))))
                                                   
    (member-of (_Partition4)))

(every Place has 
    (location ((exactly 0 Place)))
    (is-near ((forall (the location-of of Self) (the is-near of It))))
    (abuts ((forall (the location-of of Self) (the abuts of It))))
    (is-above ((forall (the location-of of Self) (the is-above of It))))
    (is-below ((forall (the location-of of Self) (the is-below of It))))
    (is-along ((forall (the location-of of Self) (the is-along of It))))
    (is-at ((forall (the location-of of Self) (the is-at of It))))
    (is-at-of ((forall (the location-of of Self) (the is-at-of of It))))
    (is-beside ((forall (the location-of of Self) (the is-beside of It))))
    (is-between ((forall (the location-of of Self) (the is-between of It))))
    (is-behind ((forall (the location-of of Self) (the is-behind of It))))
    (is-in-front-of ((forall (the location-of of Self) (the is-in-front-of of It))))
    (is-inside ((forall (the location-of of Self) (the is-inside of It))))
    (encloses ((forall (the location-of of Self) (the encloses of It))))
    (is-on ((forall (the location-of of Self) (the is-on of It))))
    (has-on-it ((forall (the location-of of Self) (the has-on-it of It))))
    (is-opposite ((forall (the location-of of Self) (the is-opposite of It))))
    (is-outside ((forall (the location-of of Self) (the is-outside of It))))
    (does-not-enclose ((forall (the location-of of Self) (the does-not-enclose of It))))
    (is-over ((forall (the location-of of Self) (the is-over of It))))
    (is-under ((forall (the location-of of Self) (the is-under of It)))))
(PKb-Value has 
    (superclasses (Property-Value))
    (range-of (pkb))
    (domain-of (pkb-of)))

(every PKb-Value has 
    (property-slot ((pkb)))
    (less-than ((must-be-a PKb-Value)))
    (greater-than ((must-be-a PKb-Value)))
    (same-as ((must-be-a PKb-Value))))
(PKa-Value has 
    (superclasses (Property-Value))
    (range-of (pka))
    (domain-of (pka-of)))

(every PKa-Value has 
    (property-slot ((pka)))
    (less-than ((must-be-a PKa-Value)))
    (greater-than ((must-be-a PKa-Value)))
    (same-as ((must-be-a PKa-Value))))
(Pinocytose has 
    (superclasses (Endocytose))
    (required-slot (object
                       destination))
    (primary-slot (agent
                      origin
                      path))
    (description ("Uptake of fluid by a cell by means of endocytosis
                      Alberts:ECB:G-14.")))

(every Pinocytose has 
    (agent ((a Cell)))
    (object ((a Soluble-Substance)))
    (destination ((a Place with (is-inside ((the Cell agent of Self)))))))
(Piece-of-Wood has 
    (superclasses (Piece-of-Substance)))

(every Piece-of-Wood has 
    (material ((a Wood))))
(Piece-of-Tissue has 
    (superclasses (Piece-of-Substance)))

(every Piece-of-Tissue has 
    (material ((a Tissue))))
(Piece-of-Substance has 
                                                                                                                                                                                                                                                                                 
    (superclasses (Inanimate-Object)))

(every Piece-of-Substance has 
    (material ((a Substance))))
(Piece-of-Stone has 
    (superclasses (Piece-of-Substance))
    (wn20-synset ((:set (:triple "stone" 1 "n") (:triple "rock" 1 "n")))))

(every Piece-of-Stone has 
    (material ((a Stone))))
(Piece-of-Rubber has 
    (superclasses (Piece-of-Substance)))

(every Piece-of-Rubber has 
    (material ((a Rubber))))
(Piece-of-Plastic has 
    (superclasses (Piece-of-Substance)))

(every Piece-of-Plastic has 
    (material ((a Plastic))))
(Piece-of-Paper has 
    (superclasses (Piece-of-Substance))
    (wn20-synset ((:set (:triple "paper" 5 "n")))))

(every Piece-of-Paper has 
    (material ((a Paper))))
(Piece-of-Metal has 
    (superclasses (Piece-of-Substance)))

(every Piece-of-Metal has 
    (material ((a Metal))))
(Piece-of-Glass has 
    (superclasses (Piece-of-Substance)))

(every Piece-of-Glass has 
    (material ((a Glass))))
(Physical-Object has 
    (domain-of (moment-of-inertia))
    (range-of (moment-of-inertia-of))
                                                                                                                              
    (superclasses (Tangible-Entity))
    (wn20-synset ((:set (:triple "object" 1 "n")))))
(Physical-Mark has 
    (description ("Any mark created as the result of writing,
sketching, printing, drawing etc (i.e. the result of Mark).  Any
persistant physical mark or set of marks created by depositing or
applying something acting in the role of a writing substance
(e.g. ink, paint, sand, blood) to some kind of writable medium using
something acting in the role of writing implement (e.g. pencil,
marker, finger, paintbrush, spray paint can, printer)."))
    (superclasses (Piece-of-Substance))
    (wn20-synset ((:set (:triple "mark" 4 "n") (:triple "print" 3 "n") (:triple "mark" 10 "n")))))

(every Physical-Mark has 
    (result-of ((a Mark))))
(Physical-Document has 
    (superclasses (Artifact))
    (description ("a physically rendered written message")))

(every Physical-Document has 
    (result-of ((a Print)))
    (has-part ((a Physical-Mark))))
(Phosphorylation has 
                              
    (superclasses (Add
                      Enzyme-Catalysis))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (description ("The transfer of a phosphate to a molecule.
                          The bond formed is high energy and
                          permits the charged molecule to undergo reactions
                          that would otherwise be energetically unfavorable.
                          Souther.")))

(every Phosphorylation has 
    (object ((a Phosphoryl-Group)))
    (substrate ((the Molecule base of Self)))
    (agent ((a Cell)))
    (base ((a Molecule)))
    (instrument ((a Kinase)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Phosphoryl-Group has 
                                                                                                                  
    (superclasses (Phosphate
                      Chemical-Group))
    (description ("A chemical group made up of at least one phosphorus and 
                    4 oxygens. Normally acidic in the cell. Souther. ")))
(Phosphorus-Atom has 
    (superclasses (Atom))
    (description ("A solid, nonmetallic element that is a necessary
                        constituent for bones and nerves, and as a phosphate
                        forms high-energy bonds that provide the energy for
                        all biosynthetic reactions.  Souther. ")))

(every Phosphorus-Atom has 
    (has-part ((a Proton)
               (exactly 15 Proton)
               (a Neutron)
               (exactly 16 Neutron)
               (a Electron)
               (exactly 15 Electron)))
    (mass ((a Mass-Value with (value ((:pair 31 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Phosphodiester-Bond has 
    (superclasses (Covalent-Bond))
    (description ("A covalent chemical bond formed when two hydroxyl
                        groups are linked in ester linkage to the same
                        phosphate group, as in the case of adjacent nucleotides
                        in RNA or DNA. Alberts:ECB:G-14.")))

(every Phosphodiester-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Nucleotide called "N1") (a Nucleotide called "N2") (exactly 2 Nucleotide))))))))))
(Phosphoanhydride-Bond has 
    (superclasses (Covalent-Bond))
    (description ("A chemical bond formed between two phosphate groups.
                        Souther. ")))

(every Phosphoanhydride-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Monophosphate called "MP1") (a Monophosphate called "MP2") (exactly 2 Monophosphate))))))))))
(Phosphate has 
    (superclasses (Inorganic-Molecule))
    (description ("A compound containing phosphate. In cells, they are 
                    normally acidic."))
    )

(every Phosphate has 
    (has-part ((at-least 1 Phosphorus-Atom)
               (at-least 4 Oxygen-Atom))))
(Phosphatase has 
                                                          
    (superclasses (Removal-Enzyme))
    (description ("Enzyme that removes a phosphate group from a
                        molecule. see Alberts:ECB:G-15 for proteins.")))

(every Phosphatase has 
    (purpose ((a Catalyst with (in-event ((a Dephosphorylation)))))))
(Phenylalanine has 
    (superclasses (Nonpolar-Amino-Acid
                      Essential-Amino-Acid))
    (description ("A nonpolar amino acid with a methyl side chain.
                        Souther")))

(every Phenylalanine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methyl-Group with (object-of ((a Be-Attached-To with (object ((the Phenyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) ((the Carbon-Atom has-part of (the Phenyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-1")))))))))))))
(Phenyl-Group has 
    (superclasses (Aromatic-Compound))
    (description ("A six-carbon ring with the carbons attached to each 
                        other by conjugated double bonds.  Souther.")))

(every Phenyl-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen"))))
(Phenol has 
    (superclasses (Aromatic-Compound))
    (description ("A six-carbon ring alcohol with the carbons attached to
                        each other by conjugated double bonds and containing
                        one alcohol group.  Souther.")))

(every Phenol has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydroxyl-Group"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydroxyl-Group)
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen"))))
(Phagocytose has 
    (superclasses (Endocytose))
    (required-slot (object
                       destination))
    (primary-slot (agent
                      origin
                      path))
    (description ("The process by which particulate matter is engulfed by
                      a cell.  Prominent in predatory protozoa, such as Amoeba
                      proteus, and to certain specialized cells of 
                      multicellular animals such as macrophages. 
                      Alberts:ECB:G-14.")))

(every Phagocytose has 
    (agent ((a Cell)))
    (object ((a Particulate-Matter)))
    (destination ((a Spatial-Entity with (is-inside ((the Cell agent of Self)))))))
(PH-Value has 
    (superclasses (Property-Value))
    (test-case ('((Drink has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (pH ((a PH-Value)))) (*mybeer has (instance-of (Drink)) (pH ((a PH-Value with (value ((:pair 300 ()) (:pair *basic Drink) (:pair *acidic Water))) (less-than ((the pH of *mycoffee))))))) (the value of (the pH of *mybeer)) ((the less-than of (the pH of *mybeer)) includes (the pH of *mycoffee)) ((the greater-than of (the pH of *mycoffee)) includes (the pH of *mybeer)))))
    (range-of (pH))
    (domain-of (pH-of)))

(every PH-Value has 
    (property-slot ((pH)))
    (pH-of ((must-be-a Chemical-Entity)))
    (less-than ((must-be-a PH-Value)))
    (greater-than ((must-be-a PH-Value)))
    (same-as ((must-be-a PH-Value))))
(PH-Scale has 
    (superclasses (Scale))
    )
(PH-Constant has 
    (superclasses (Constant))
                                                                   
    (element-type-of (*basic-acidic-scale))
    (scalar-constant-class-of (pH)))
(Person has 
    (superclasses (Animal))
    (description ("human being; a sentient animal"))
    (wn20-synset ((:set (:triple "person" 1 "n") (:triple "individual" 1 "n") (:triple "someone" 1 "n") (:triple "somebody" 1 "n") (:triple "mortal" 1 "n") (:triple "human" 1 "n") (:triple "soul" 2 "n")))))

(every Person has 
    (sentience ((a Sentience-Value with (value ((*sentient)))))))
(Peroxisome has 
    (superclasses (Organelle
                      Subcellular-Compartment))
    (description ("Small, membrane-bounded organelle that uses molecular
                        oxygen to oxidize organic molecules.  Contains some
                        enzymes that produce hydrogen peroxide and others that
                        degrade hydrogen peroxide. Alberts:ECB:G-14.")))

(every Peroxisome has 
    (purpose ((a Container with (in-event ((a Be-Contained with (content ((a Aggregate with (element-type ((Peroxidase)))))))))))))
(Peroxide has 
    (superclasses (Molecule))
    (description ("Molecule containing two covalently bonded oxygen 
                         atoms.  Souther.")))

(every Peroxide has 
    (has-part ((a Oxygen-Atom)
               (a Oxygen-Atom)
               (exactly 2 Oxygen-Atom)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Peroxidase has 
    (superclasses (Oxidase))
    (description ("Enzyme that catalyzes the breakdown of peroxides.
                        see Lehninger:PBC:G-10.")))

(every Peroxidase has 
    (purpose ((a Catalyst with (in-event ((a Oxidation with (donor ((a Peroxide))))))))))
(Perimeter-Scale has 
    (scale-class-of (perimeter))
    (superclasses (Scale)))
(Perimeter-Constant has 
    (scalar-constant-class-of (perimeter))
    (superclasses (Constant)))
(Perceive has 
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent))
    (cmap-correspondence ((:seq agent "the perceiver")
                          (:seq object "the perceived")))
    (wn20-synset ((:set (:triple "perceive" 1 "v") (:triple "comprehend" 2 "v"))))
    )

(every Perceive has 
    (object ((a Entity)))
    (agent ((must-be-a Tangible-Entity)))
    (text-active-verbseq-sg ("perceives"))
    (text-active-verbseq-pl ("perceive"))
    (text-passive-verbseq-sg ("is perceived"))
    (text-passive-verbseq-pl ("are perceived"))
    (text-nominalization ("perception")))
(Peptidyl-Transferase has 
    (superclasses (Enzyme))
    (description ("A protein that catalyzes the transfer of a peptide
                       group from one molecule to another, e.g. 
                       ribosomal peptidyl transferase.")))
(Peptide-Bond has 
    (superclasses (Covalent-CN-Bond))
    (description ("Chemical bond between the carbonyl group of one amino 
                        acid and the amino group of a second amino acid - a
                        special form of amide linkage.  Alberts:ECB:G-14.")))
(Pentose has 
                                                  
    (superclasses (Monosaccharide))
    (description ("A five-carbon monosaccharide. The pentoses deoxyribose
                        and ribose are present in DNA and RNA respectively.  
                        Lodish:MCB:G-13.")))

(every Pentose has 
    (has-part ((a Oxygen-Atom uniquely-called "Ring-Oxygen" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen-2")
               (a Hydroxyl-Group uniquely-called "C1-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C2-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C3-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C5-Hydroxyl-Group")
               (exactly 5 Carbon-Atom))))
(Penetrate-Defenses has 
    (superclasses (Engagement-Military-Task
                      Penetrate))
    (description ("a form of maneuver to seek to rupture enemy defenses on a narrow front")))

(every Penetrate-Defenses has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (site ((must-be-a Spatial-Entity)))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 3 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.7 ()))))))
    (text-nominalization ("penetration"))
    (text-active-verbseq-sg ("penetrates"))
    (text-active-verbseq-pl ("penetrate"))
    (text-path ("through"))
    (text-argslots ((:seq site path))))
(Penetrate has 
    (superclasses (Action))
    (required-slot (agent
                       object))
    (cmap-correspondence ((:seq object "the barrier penetrated")
                          (:seq agent "the penetrator")))
    (test-case ('((*forces has (instance-of (Tangible-Entity)) (is-outside (*castle))) (*castle has (instance-of (Physical-Object)) (has-part (*castle-wall))) (*castle-wall has (instance-of (Physical-Object))) (a Penetrate with (agent (*forces)) (object (*castle-wall))) (do-script (thelast Penetrate)) (the text-gen of (thelast Penetrate)) (forall (the subevent of (thelast Penetrate)) (the text-gen of It)) ((the has-region of *castle-wall) = (the path of (thelast Penetrate))) (not ((the is-outside of *forces) includes *castle)))))
    (wn16-synset ((:set (:triple "penetrate" 1 "v"))))
    (wn20-synset ((:set (:triple "penetrate" 1 "v"))))
    )

(every Penetrate has 
    (agent ((a Tangible-Entity)))
    (object ((a Tangible-Entity with (plays ((a Barrier))))))
    (path ((the result of (the Breach subevent of Self))))
    (first-subevent ((the Breach subevent of Self)))
    (subevent ((a Breach with (agent ((the agent of Self))) (object ((the object of Self))) (next-event ((the Go-Through subevent of Self))))
               (a Go-Through with (agent ((the agent of Self))) (path ((the result of (the Breach subevent of Self)))))))
    (text-active-verbseq-sg ("penetrates"))
    (text-active-verbseq-pl ("penetrate"))
    (text-passive-verbseq-sg ("gets penetrated"))
    (text-passive-verbseq-pl ("get penetrated"))
    (text-path ("through"))
    (text-nominalization ("penetration")))
(Pd has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Pd has 
    (atomic-symbol ((Pd)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 46 ()))))))
    (chemical-period (5)))
(Pb_NO3_2-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Pb_NO3_2-Substance has 
    (has-basic-structural-unit ((a Pb_NO3_2))))
(Pb_NO3_2 has 
    (superclasses (Ionic-Compound)))

(every Pb_NO3_2 has 
    (has-part ((a Pb-Plus-2)
               (a NO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Pb-Plus-2) (:pair 2 NO3-Minus))))))))
(PbSO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every PbSO4-Substance has 
    (has-basic-structural-unit ((a PbSO4))))
(PbSO4 has 
    (superclasses (Ionic-Compound)))

(every PbSO4 has 
    (has-part ((a Pb-Plus-2)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Pb-Plus-2) (:pair 1 SO4-Minus-2))))))))
(PbS-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every PbS-Substance has 
    (has-basic-structural-unit ((a PbS))))
(PbS has 
    (superclasses (Ionic-Compound)))

(every PbS has 
    (has-part ((a Pb-Plus-2)
               (a S-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Pb-Plus-2) (:pair 1 S-Minus-2))))))))
(Pb-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Pb-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("lead"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Pb))))))))
(Pb has 
    (superclasses (Metal-Atom
                      IVA-Element)))

(every Pb has 
    (atomic-symbol ((Pb)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 82 ()))))))
    (chemical-period (6)))
(Pattern-D5 has 
    (superclasses (Pattern)))

(every Pattern-D5 has 
    (has-pattern ((a Attack with (agent ((a Military-Unit with (allegiance ((a Allegiance-Value with (value ((*blue)))))))))))))
(Pattern-D4 has 
    (superclasses (Pattern)))

(every Pattern-D4 has 
    (has-pattern ((a Attack with (object ((a Military-Unit with (allegiance ((a Allegiance-Value with (value ((*red)))))))))))))
(Pattern-D3 has 
    (superclasses (Pattern)))

(every Pattern-D3 has 
    (has-pattern ((a Attack with (time-during ((a Time-Interval with (time-before ((a Time-Interval with (time-contains ((a Attack)))))))))))))
(Pattern-D2 has 
    (superclasses (Pattern)))

(every Pattern-D2 has 
    (has-pattern ((a COA with (objective ((a Military-Task)))))))
(Pattern has 
                                                                                                         
    (superclasses (Critique-Group))
    (domain-of (has-pattern))
    (range-of (is-pattern-of)))

(every Pattern has 
    (critique-score ((a Critique-Score-Value))))
(Partition has 
                                                                                                                                                                                                                                           
    (superclasses (Thing)))
(Particulate-Matter has 
    (superclasses (Substance))
    (description ("Matter made up of particles. Souther.")))

(every Particulate-Matter has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Participant has 
                        
    (superclasses (Agent-Role))
    (wn20-synset ((:set (:triple "participant" 1 "n") (:triple "participant" 2 "n") (:triple "player" 1 "n")))))
(ParkingLot has 
    (superclasses (Architectural-Structure))
    (wn20-synset ((:set (:triple "parking_lot" 1 "n") (:triple "lot" 2 "n") (:triple "car_park" 1 "n") (:triple "park" 5 "n") (:triple "parking_area" 1 "n")))))
(Paper has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "paper" 1 "n")))))
(Pantothenic-Acid has 
    (superclasses (Organic-Acid))
    (description ("An organic acid that is one of the major parts of
                        coenzymeA.  Souther.")))
(P2O7-Minus-4 has 
    (superclasses (Anion)))

(every P2O7-Minus-4 has 
    (charge ((a Charge-Value with (value ((:pair -4 *electronic-charge))))))
    (has-chemical-name ("pyrophosphate"))
    (has-acid-name ("pyrophosphoric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 P) (:pair 7 O))))))))
(P-Site has 
    (superclasses (Binding-Site))
    (description ("The site on the ribosome where the the tRNA holding the
                        growing polypeptide chain binds.  Alberts:ECB:230.")))

(every P-Site has 
    (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
    (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))
(P has 
    (superclasses (Non-Metal-Atom
                      VA-Element)))

(every P has 
    (has-molecular-name ("phosphide"))
    (atomic-symbol ((P)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 15 ()))))))
    (chemical-period (3)))
(Oxygen-Molecule has 
                         
    (superclasses (Inorganic-Molecule))
    (description ("Molecule made up of two or more oxygen atoms.
                        Souther.")))

(every Oxygen-Molecule has 
    (has-part ((at-least 2 Oxygen-Atom))))
(Oxygen-Atom has 
    (superclasses (Atom))
    (description ("An element that is found free as a colorless tasteless
                        odorless gas in the atmosphere of which it forms about
                        21 percent or combined in water, in most rocks and
                        minerals, and in numerous organic compounds, that is
                        capable of combining with all elements except the inert
                        gases, is active in physiological processes, and is
                        involved especially in combustion processes.
                        Websters 9th NCD:843.")))

(every Oxygen-Atom has 
    (has-part ((a Proton)
               (exactly 8 Proton)
               (a Neutron)
               (exactly 8 Neutron)
               (a Electron)
               (exactly 8 Electron)))
    (mass ((a Mass-Value with (value ((:pair 16 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Oxido-Reduction-Reaction has 
    (superclasses (Oxidation))
    (required-slot (object
                       recipient
                       donor))
    (primary-slot (agent
                      instrument))
    (description ("The simultaneous loss of electrons from one molecule
                          (oxidation) and gain of by a second molecule of 
                          electrons (reduction) by transfer from the first to 
                          the second.  Souther.")))

(every Oxido-Reduction-Reaction has 
    (agent ((a Living-Entity)))
    (object ((a Electron)))
    (donor ((a Chemical-Entity)))
    (recipient ((a Chemical-Entity)))
    (instrument ((a Enzyme)))
    (text-gen ((the description of Oxido-Reduction-Reaction))))
(Oxido-Reductase has 
                        
    (superclasses (Transfer-Enzyme))
    (description ("General name for an enzyme that catalyzes reactions
                        in which one molecule is oxidized and the other is
                        reduced.  Enzymes of this type are often called
                        oxidases, reductases, and dehydrogenases.
                        Alberts:ECB:168.")))

(every Oxido-Reductase has 
    (purpose ((a Catalyst with (in-event ((a Oxido-Reduction-Reaction)))))))
(Oxidize-an-Acid has 
    (superclasses (Method))
    (description ("given an acid of the form HaYOb, returns a new acid oxidized from the input"))
    (test-case ('(((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the output of (a Oxidize-an-Acid with (input ((a HClO3-Substance))))))))) = (:set (:pair 1 H-Plus) (:pair 1 ClO4-Minus)))))))

(every Oxidize-an-Acid has 
    (input ((a Acid)))
    (context (((the output of (a Identify-Chemical-Entity with (input ((a Anion with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((forall-seq (the term of (the atomic-chemical-formula of (the Anion has-part of (the has-basic-structural-unit of (the input of Self))))) (if ((the2 of It) = O) then (:pair ((the1 of It) + 1) O) else It)))))))))))) or (the output of (a Identify-Chemical-Entity with (input ((a Anion with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((forall-seq (the term of (the atomic-chemical-formula of (the Anion has-part of (the has-basic-structural-unit of (the input of Self))))) (if ((the2 of It) = O) then (:pair ((the1 of It) + 2) O) else It)))))))))))) or (the output of (a Identify-Chemical-Entity with (input ((a Anion with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((forall-seq (the term of (the atomic-chemical-formula of (the Anion has-part of (the has-basic-structural-unit of (the input of Self))))) (if ((the2 of It) = O) then (:pair ((the1 of It) + 3) O) else It)))))))))))) or (the output of (a Identify-Chemical-Entity with (input ((a Anion with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((forall-seq (the term of (the atomic-chemical-formula of (the Anion has-part of (the has-basic-structural-unit of (the input of Self))))) (if ((the2 of It) = O) then (:pair ((the1 of It) + 4) O) else It)))))))))))))))
    (output ((if (((the number of (the input of Self)) = 1) and (has-value (the context of Self))) then (a Acid with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a H-Plus) (the context of Self)))))))))))
(Oxidative-Phosphorylation has 
    (superclasses (Oxidation))
    (required-slot (object
                       base))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("Process in bacteria and mitochondria in which ATP
                          formation is driven by the transfer of electrons 
                          from food molecules to molecular oxygen.  Involves 
                          the intermediate generation of a pH gradient across 
                          the membrane, which drives ATP synthesis by a 
                          chemiosmotic coupling. Alberts:ECB:G-13p"))
    (domain-of (base)))

(every Oxidative-Phosphorylation has 
    (object ((a Phosphoryl-Group)))
    (substrate ((the Molecule base of Self)))
    (base ((a Molecule)))
    (instrument ((a Kinase)))
    (agent ((a Cell)))
    (first-subevent ((the Oxidation subevent of Self)))
    (subevent ((a Oxidation with (recipient ((a Oxygen-Molecule))) (next-event ((the ATP-Synthesis subevent of Self))))
               (a ATP-Synthesis)))
    (text-gen ((the description of Oxidative-Phosphorylation))))
(Oxidation-State-Value has 
    (superclasses (Property-Value))
    (range-of (oxidation-state))
    (domain-of (oxidation-state-of)))

(every Oxidation-State-Value has 
    (property-slot ((oxidation-state)))
    (quantity-of ((must-be-a Chemical)))
    (less-than ((must-be-a Oxidation-State-Value)))
    (greater-than ((must-be-a Oxidation-State-Value)))
    (same-as ((must-be-a Oxidation-State-Value))))
(Oxidation-Reduction-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((a Reaction with (raw-material ((a Chemical with (has-basic-structural-unit ((a Fe-Plus-3))) (coefficient ((a Coefficient-Value with (value ((:pair 2 ()))))))) (a Chemical with (has-basic-structural-unit ((a I-Minus))) (coefficient ((a Coefficient-Value with (value ((:pair 2 ()))))))))) (result ((a Chemical with (has-basic-structural-unit ((a Fe-Plus-2))) (coefficient ((a Coefficient-Value with (value ((:pair 2 ()))))))) (a Chemical with (has-basic-structural-unit ((a I))))))) isa Oxidation-Reduction-Reaction)))))

(every Oxidation-Reduction-Reaction has-definition 
    (instance-of (Reaction
                     [Oxidation-Reduction-Reaction-instance-of-1]))
    (oxidation-state-changes ("yes")))
(Oxidation has 
                                                                                                                                                       
    (superclasses (Lose))
    (required-slot (object
                       donor))
    (primary-slot (agent
                      recipient
                      instrument))
    (description ("The loss of electrons from an atom or molecule as
                          occurs when hydrogen is removed from a molecule or
                          oxygen is added.  Lodish:MCB:G-13")))

(every Oxidation has 
    (donor ((a Chemical-Entity)))
    (recipient ((a Chemical-Entity)))
    (object ((a Electron)))
    (instrument ((a Oxidase)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Oxidase has 
    (superclasses (Oxido-Reductase))
    (description ("Enzyme that catalyzes oxidation reactions in which
                        in which molecular oxygen serves as the electron
                        acceptor, but neither of the oxygen atoms is 
                        incorporated into the product. Lehninger:PBC:G-9."))
    )

(every Oxidase has 
    (purpose ((a Catalyst with (in-event ((a Oxidation)))))))
(Outlet has 
    (superclasses (Portal))
    (wn20-synset ((:set (:triple "exit" 1 "n"))
                  (:set (:triple "issue" 10 "n"))
                  (:set (:triple "outlet" 3 "n"))
                  (:set (:triple "way_out" 1 "n")))))

(every Outlet has 
    (in-event ((a Move-Out-Of)))
    (played-by ((a Spatial-Entity with (path-of ((the in-event of Self))))))
    (is-between ((the is-inside of Self)
                 (the is-outside of Self))))
(Os has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Os has 
    (atomic-symbol ((Os)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 76 ()))))))
    (chemical-period (6)))
(Orientation-Constant has 
    (scalar-constant-class-of (orientation))
    (superclasses (Constant))
    )
(Orient has 
                                                                                                  
    (superclasses (Action))
    (description ("to change the position or orientation of an object or part of an object"))
    (wn20-synset ((:set (:triple "move" 3 "v")))))

(every Orient has 
    (object ((must-be-a Tangible-Entity)))
    (text-active-verbseq-sg ("orients"))
    (text-active-verbseq-pl ("orient"))
    (text-passive-verbseq-sg ("gets oriented"))
    (text-passive-verbseq-pl ("get oriented"))
    (text-nominalization ("orienting")))
(Organizing has 
    (superclasses (Maintenance))
    (wn20-synset ((:set (:triple "form" 1 "v") (:triple "organize" 1 "v")))))

(every Organizing has 
    (text-nominalization ("organizing")))
(Organization has 
    (range-of (in-organization))
    (domain-of (in-organization-of))
                                                                           
    (superclasses (Aggregate))
    (description ("an aggregate of roles"))
    (test-case ('((BrauMeister has (superclasses (Role))) (MarketingDude has (superclasses (Role))) (*BrauCorp has (instance-of (Organization)) (element ((a BrauMeister) (a MarketingDude)))) (*Gustav has (instance-of (Person)) (plays ((the BrauMeister element of *BrauCorp)))) ((the number-of-elements of *BrauCorp) = 2) (the plays of *Gustav) ((the played-by of (the BrauMeister element of *BrauCorp)) = *Gustav) (the in-organization-of of *BrauCorp) ((the in-organization of (the plays of *Gustav)) = *BrauCorp) (not (the played-by of (the MarketingDude element of *BrauCorp))))))
    (wn20-synset ((:set (:triple "administration" 2 "n") (:triple "governance" 1 "n") (:triple "governing_body" 1 "n") (:triple "establishment" 3 "n") (:triple "brass" 3 "n") (:triple "organization" 3 "n") (:triple "organisation" 2 "n")))))

(every Organization has 
    (element-type ((Role)))
    (in-organization-of ((the element of Self))))
(Organism has 
                                                              
    (superclasses (Living-Entity))
    (description ("Single or multicellular entities which are free living
                         and capable of reproduction.")))

(every Organism has 
    (has-part ((at-least 1 Cell)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Organic-Substance has 
                                                       
    (superclasses (Chemical))
    (description ("Any substance containing hydrocarbons.  Souther.")))

(every Organic-Substance has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Organic-Structure has 
                                                                                                                                                                                                                                                                                                                 
    (superclasses (Physical-Object))
    (description ("A structure made up of organic molecules, such as 
                        the plasma membrane, organelles, etc. Souther.")))

(every Organic-Structure has 
    (has-part ((at-least 2 Organic-Molecule))))
(Organic-Molecule has 
                                                                                                                                                                                                                                                                                                                                   
    (superclasses (Hydrocarbon))
    (description ("Molecule containing hydrocarbon(s).  Souther. ")))
(Organic-Layer has 
                              
    (superclasses (Organic-Structure))
    (description ("A layer made up of organic molecules, such as the
                        bimolecular layer that makes up the plasma membrane.
                        Souther:2001.")))

(every Organic-Layer has 
    (has-part ((at-least 2 Organic-Molecule))))
(Organic-Complex has 
                                                                                                          
    (superclasses (Organic-Structure))
    (description ("A complex of several organic constituents, such as the
                        nucleolus or extracellular matrix, which serves some
                        structural or functional role. Souther:2001.")))
(Organic-Compartment has 
    (superclasses (Organic-Structure))
    (description ("A compartment within a living structure, surrounded
                        by a membrane.  Examples are chambers of the heart,
                        and the nucleus of the cell."))
    )

(every Organic-Compartment has 
    (purpose ((a Container)))
    (is-part-of ((a Eucaryote)))
    (is-inside ((the Eucaryote is-part-of of Self))))
(Organic-Acid has 
                                                             
    (superclasses (Acid))
    (description ("An organic molecule or substance which acts as an 
                          acid (a hydrogen donor).  Souther. ")))

(every Organic-Acid has 
    (has-part ((at-least 1 Carbon-Atom)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Organelle has 
                                                                                                                                                                                                                            
    (superclasses (Organic-Structure))
    (description ("A discrete structure or subcompartment of a eucaryotic
                        cell specialized to carry out a particular function;
                        especially a cellular substructure that is visible in
                        the light microscope.  Examples include mitochondria
                        and the Golgi apparatus. (Alberts:ECB:G-13). Any 
                        membrane bound structure found in the cytoplasm of
                        cells.  Lodish:MCB:G-13.")))

(every Organelle has 
    (is-inside ((a Cytoplasm))))
(Operon has 
    (superclasses (DNA-Gene-Coding-Sequence))
    (description ("A set of contiguous prokaryotic structural genes that
                        are transcribed as a unit, along with the adjacent 
                        regulatory elements that control their expression. 
                        Matthews:Biochemistry:1158.")))

(every Operon has 
    (purpose ((a Container with (in-event ((a Genetic-Information-Storage with (object ((a Aggregate with (element-type ((Cistron)))))))))))))
(Operations has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "operation" 1 "n") (:triple "business_activity" 1 "n") (:triple "commercial_activity" 1 "n")))))

(every Operations has 
    (text-nominalization ("operations")))
(Open has 
    (defeated-by-class-of (Be-Closed))
    (caused-by-class-of (Be-Open))
    (superclasses (Unblock))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "thing opened")
                          (:seq agent "opener")
                          (:seq instrument "portal covering")))
    (test-case ('((*the-Jar-Opening has (instance-of (Spatial-Entity))) (*the-Jar-Lid has (instance-of (Tangible-Entity))) (*the-Cookie-Jar has (instance-of (Tangible-Entity)) (has-region (*the-Jar-Opening)) (has-part (*the-Jar-Lid))) (*Ralf has (instance-of (Living-Entity))) (not (the Be-Open object-of of *the-Jar-Opening)) (a Be-Closed with (object (*the-Jar-Opening)) (instrument (*the-Jar-Lid))) (the text-gen of (thelast Be-Closed)) (a Open with (object (*the-Jar-Opening)) (agent (*Ralf))) (do-and-next (thelast Open)) (the text-gen of (thelast Open)) (forall (the resulting-state of (thelast Open)) (the text-gen of It)) (the Be-Open object-of of *the-Jar-Opening) (not (the Be-Closed object-of of *the-Jar-Opening)) (a Close with (object (*the-Jar-Opening)) (instrument (*the-Jar-Lid)) (agent (*Ralf))) (do-and-next (thelast Close)) (the text-gen of (thelast Close)) (not (the Be-Open object-of of *the-Jar-Opening)) (the Be-Closed object-of of *the-Jar-Opening) (forall (the resulting-state of (thelast Close)) (the text-gen of It)))))
    (wn16-synset ((:set (:triple "open" 6 "v") (:triple "open_up" 3 "v") (:triple "afford" 2 "v") (:triple "unfasten" 2 "v"))))
    (wn20-synset ((:set (:triple "open" 6 "v") (:triple "open_up" 3 "v") (:triple "afford" 2 "v") (:triple "unfasten" 2 "v")))))

(every Open has 
    (object ((a Spatial-Entity with (object-of ((a Be-Closed with (instrument ((a Tangible-Entity with (plays ((a Portal-Covering))))))))))))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Closed))))
    (resulting-state ((a Be-Open)))
    (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Open) [Open-pcs-1])
               (:triple (the object of Self) object-of (a Be-Closed) [Open-pcs-2])))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Open-del-1]))
               (forall (the defeats of Self) (:triple (the instrument of It) plays (a Portal-Covering)) [Open-del-2])
               (forall (the defeats of Self) (:triple It instrument (the instrument of It)) [Open-del-3])))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Open-add-1])
               (:triple (the object of Self) plays (a Portal) [Open-add-2])))
    (text-active-verbseq-sg ("opens"))
    (text-active-verbseq-pl ("open"))
    (text-passive-verbseq-sg ("gets opened"))
    (text-passive-verbseq-pl ("get opened"))
    (text-argslots ((:seq base instrument path result)))
    (preparatory-event ((:default (a Close with (object ((the object of Self))) (base ((the base of Self))) (agent ((the agent of Self))) (instrument ((the instrument of Self)))) (a Unblock with (object ((the object of Self)))))))
    (text-nominalization ("opening")))
(Oligoribonucleotide has 
    (superclasses (RNA-Sequence
                      Oligonucleotide))
    (description ("A short chain of ribonnucleotides, arbitrarily defined in 
                    this KB to be between 3 and 49 nucleotides long.  Note: 
                    the current lengths are arbitrary. see Oligonucleotide.
                    Souther. "))
    )

(every Oligoribonucleotide has 
    (has-region ((a 3-Prime-End)
                 (a 5-Prime-End)))
    (has-part ((a 5-Prime-Ribonucleotide with (object-of ((a Be-Attached-To with (object (((the RNA-Sequence has-part of Self) called "RNA Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 5-Prime-Ribonucleotide has-part of Self))) called "Carbon-3"))) (instrument ((a Phosphodiester-Bond)))))))
               (a 3-Prime-Ribonucleotide with (object-of ((a Be-Attached-To with (object (((the RNA-Sequence has-part of Self) called "RNA Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 3-Prime-Ribonucleotide has-part of Self))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a RNA-Sequence called "RNA Sequence")
               (at-least 3 Ribonucleotide)
               (at-most 49 Ribonucleotide))))
(Oligonucleotide has 
                                                                            
    (superclasses (Nucleotide-Sequence
                      Macromolecule))
    (description ("A molecular chain of nucleotides chemically bonded by a
                    series of phosphodiester linkages.  Alberts:ECB:G-14.
                    Defined in this KB to be between 3 and 49 
                    nucleotides long, longer nucleotide sequences are called
                    polynucleotides.  Note: the current lengths are
                    arbitrary.  All sources so far consulted just say a
                    'short' nucleotide sequence.  Souther. ")))

(every Oligonucleotide has 
    (has-region ((a 3-Prime-End)
                 (a 5-Prime-End)))
    (has-part ((a 5-Prime-Nucleotide with (object-of ((a Be-Attached-To with (object (((the Nucleotide-Sequence has-part of Self) called "Nucleotide Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 5-Prime-Nucleotide has-part of Self))) called "Carbon-3"))) (instrument ((a Phosphodiester-Bond)))))))
               (a 3-Prime-Nucleotide with (object-of ((a Be-Attached-To with (object (((the Nucleotide-Sequence has-part of Self) called "Nucleotide Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 3-Prime-Nucleotide has-part of Self))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a Nucleotide-Sequence called "Nucleotide Sequence")
               (at-least 3 Nucleotide)
               (at-most 49 Nucleotide))))
(Oligodeoxyribonucleotide has 
    (superclasses (DNA-Sequence
                      Oligonucleotide))
    (description ("A short chain of deoxyribonucleotides, arbitrarily defined
                    in this KB to be between 3 and 49 nucleotides long.  Note: 
                    the current lengths are arbitrary. see Oligonucleotide.
                    Souther. ")))

(every Oligodeoxyribonucleotide has 
    (has-region ((a 3-Prime-End)
                 (a 5-Prime-End)))
    (has-part ((a 5-Prime-Deoxyribonucleotide with (object-of ((a Be-Attached-To with (object (((the DNA-Sequence has-part of Self) called "Deoxyribonucleotide Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 5-Prime-Deoxyribonucleotide has-part of Self))) called "Carbon-3"))) (instrument ((a Phosphodiester-Bond)))))))
               (a 3-Prime-Deoxyribonucleotide with (object-of ((a Be-Attached-To with (object (((the DNA-Sequence has-part of Self) called "Deoxyribonucleotide Sequence"))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 3-Prime-Deoxyribonucleotide has-part of Self))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a DNA-Sequence called "DNA Sequence")
               (at-least 3 Deoxyribonucleotide)
               (at-most 49 Deoxyribonucleotide))))
(Okazaki-Fragment-Replication has 
    (superclasses (DNA-Strand-Replication))
    (required-slot (object
                       result))
    (primary-slot (instrument))
    (description ("A process by which an Okazaki fragment is generated during
                 the copying of the lagging strand during 
                 DNA-Lagging-Strand-Replication.  Souther.")))

(every Okazaki-Fragment-Replication has 
    (subevent-of (((the DNA-Strand-Replication subevent of (a Half-Replicon-Replication)) called "lagging strand replication")))
    (object ((a Polydeoxyribonucleotide called "Okazaki fragment template")))
    (origin ((a Replication-Fork)))
    (result ((a DNA-Molecule-Segment with (has-part (((the Polydeoxyribonucleotide object of Self) called "Okazaki fragment template") (a Okazaki-Fragment with (complement (((the Polydeoxyribonucleotide object of Self) called "Okazaki fragment template")))))))))
    (first-subevent ((the DNA-Priming subevent of Self)))
    (subevent ((a DNA-Priming with (object ((a 3-Prime-End called "primer template" with (length ((at-most 15 Nucleotide))) (is-part-of ((a Polydeoxyribonucleotide called "Okazaki fragment template")))))) (next-event ((the DNA-Replication subevent of Self))))
               (a DNA-Replication with (object ((the Polydeoxyribonucleotide object of (the DNA-Strand-Replication subevent of Self)))) (result (((the Polydeoxyribonucleotide has-part of (the Okazaki-Fragment has-part of (the DNA-Molecule-Segment result of Self))) called "Okazaki fragment excluding primer")))))))
(Okazaki-Fragment has 
    (superclasses (DNA-Strand-Fragment))
    (description ("A short length of DNA produced on the lagging strand
                        during DNA replication, discovered by R. Okazaki.  They
                        are rapidly joined by DNA ligase to form a continuous
                        DNA strand.  Alberts:MBC:G-17.")))

(every Okazaki-Fragment has 
    (length (((at-least 100 Nucleotide) & (at-most 200 Nucleotide)))))
(OH-Minus has 
    (superclasses (Anion)))

(every OH-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydroxide"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 O) (:pair 1 H))))))))
(OCl-Minus has 
    (superclasses (Anion)))

(every OCl-Minus has 
    (has-chemical-name ("hypochlorite"))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 O) (:pair 1 Cl)))))))
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge)))))))
(Occupy has 
    (superclasses (Non-Engagement-Military-Task
                      Locomotion))
    (description ("a tactical mission task to move a friendly force into and control an area")))

(every Occupy has 
    (agent ((a Military-Unit)))
    (base ((a Spatial-Entity)))
    (objective ((a Take-Control with (object ((the base of Self))) (agent ((the agent of Self))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (text-nominalization ("occupation"))
    (text-active-verbseq-sg ("occupies"))
    (text-active-verbseq-pl ("occupy"))
    (text-base (""))
    (text-argslots ((:seq base site))))
(Obtain has 
                                        
    (superclasses (Receive))
    (required-slot (recipient
                       object))
    (primary-slot (donor
                      instrument))
    (cmap-correspondence ((:seq object "the thing obtained")
                          (:seq agent "obtainer")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*Johnathan has (instance-of (Tangible-Entity))) (*Big-Green-Book has (instance-of (Tangible-Entity))) (a Obtain with (agent (*Johnathan)) (object (*Big-Green-Book))) (do-and-next (thelast Obtain)) (the text-gen of (thelast Obtain)) ((the possesses of *Johnathan) = *Big-Green-Book) ((the is-possessed-by of *Big-Green-Book) = *Johnathan) ((the agent of (thelast Obtain)) = (the recipient of (thelast Obtain))))))
    (wn16-synset ((:set (:triple "obtain" 1 "v"))))
    (wn20-synset ((:set (:triple "obtain" 1 "v")))))

(every Obtain has 
    (agent ((the recipient of Self)))
    (recipient ((the agent of Self)))
    (text-active-verbseq-sg ("obtains"))
    (text-active-verbseq-pl ("obtain"))
    (text-passive-verbseq-sg ("is obtained"))
    (text-passive-verbseq-pl ("are obtained"))
    (text-nominalization ("obtaining")))
(Obstruct has 
    (caused-by-class-of (Be-Obstructed))
                                                                                                                   
    (superclasses (Make-Inaccessible))
    (required-slot (object))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the thing Obstructed")
                          (:seq agent "the Obstructor")
                          (:seq destination "the place to which the object is Obstructed")))
    (test-case ('((*pedestrian has (instance-of (Physical-Object))) (a Obstruct with (object (*pedestrian))) (do-and-next (thelast Obstruct)) (the text-gen of (thelast Obstruct)) (has-value (the Be-Obstructed object-of of *pedestrian)) (forall (the resulting-state of (thelast Obstruct)) (the text-gen of It)) (a Move with (object (*car)) (path (*path))) (try-do (thelast Move)))))
    (wn16-synset ((:set (:triple "obstruct" 2 "v") (:triple "block" 10 "v") (:triple "close_up" 1 "v") (:triple "jam" 7 "v") (:triple "impede" 2 "v") (:triple "occlude" 1 "v"))))
    (wn20-synset ((:set (:triple "obstruct" 2 "v") (:triple "block" 10 "v") (:triple "close_up" 1 "v") (:triple "jam" 7 "v") (:triple "impede" 2 "v") (:triple "occlude" 1 "v")))))

(every Obstruct has 
    (object ((a Tangible-Entity)))
    (agent ((must-be-a Entity)))
    (resulting-state ((a Be-Obstructed)))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Obstruct-add-1])
               (if (has-value (the agent of Self)) then (forall (the agent of Self) (:triple It agent-of (the resulting-state of Self) [Obstruct-add-2])))))
    (text-active-verbseq-sg ("obstructs"))
    (text-active-verbseq-pl ("obstruct"))
    (text-passive-verbseq-sg ("gets obstructed"))
    (text-passive-verbseq-pl ("get obstructed"))
    (text-argslots ((:seq base instrument path result)))
    (preparatory-event (((:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self))))))))))))
    (text-nominalization ("obstruction")))
(O2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every O2-Substance has 
    (has-basic-structural-unit ((a O2))))
(O2-Minus-2 has 
    (superclasses (Anion)))

(every O2-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("dioxide"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 O))))))))
(O2 has 
    (superclasses (Molecular-Compound)))

(every O2 has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 O)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 O))))))))
(O-Minus-2 has 
    (superclasses (Anion)))

(every O-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("oxide"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 O))))))))
(O has 
    (superclasses (Non-Metal-Atom
                      VIA-Element)))

(every O has 
    (has-molecular-name ("oxide"))
    (atomic-symbol ((O)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 8 ()))))))
    (chemical-period (2)))
(NuSketch-Y-Coordinate-Value has 
    (superclasses (Property-Value))
    (range-of (nuSketch-Y-coordinate))
    (domain-of (nuSketch-Y-coordinate-of)))

(every NuSketch-Y-Coordinate-Value has 
    (property-slot ((nuSketch-Y-coordinate)))
    (less-than ((must-be-a NuSketch-Y-Coordinate-Value)))
    (greater-than ((must-be-a NuSketch-Y-Coordinate-Value)))
    (same-as ((must-be-a NuSketch-Y-Coordinate-Value))))
(NuSketch-Y-Coordinate-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (nuSketch-Y-coordinate)))
(NuSketch-X-Coordinate-Value has 
    (superclasses (Property-Value))
    (range-of (nuSketch-X-coordinate))
    (domain-of (nuSketch-X-coordinate-of)))

(every NuSketch-X-Coordinate-Value has 
    (property-slot ((nuSketch-X-coordinate)))
    (less-than ((must-be-a NuSketch-X-Coordinate-Value)))
    (greater-than ((must-be-a NuSketch-X-Coordinate-Value)))
    (same-as ((must-be-a NuSketch-X-Coordinate-Value))))
(NuSketch-X-Coordinate-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (nuSketch-X-coordinate)))
(Number-Field has 
    (superclasses (Message-Field))
    (description ("a message field whose content is a numeric constant")))

(every Number-Field has 
    (information-content ((a Number))))

(every Number-Field has-definition 
    (instance-of (Message-Field))
    (information-content ((a Number))))
(Number has 
    (range-of (number-of-elements
                  numeric-value
                  text-number
                  viewpoint-score
                  time-year
                  time-month
                  time-day
                  time-hour
                  time-minute
                  time-second
                  chemical-period))
    (domain-of (number-of-elements-of
                   numeric-value-of
                   text-number-of
                   viewpoint-score-of
                   time-year-of
                   time-month-of
                   time-day-of
                   time-hour-of
                   time-minute-of
                   time-second-of
                   chemical-period-of))
    (superclasses (Thing)))
(Nucleus has 
    (superclasses (Organelle
                      Subcellular-Compartment))
    (description ("The major organelle in eucaryotic cells, containing
                        DNA organized into chromosomes. Alberts:ECB:G-13")))

(every Nucleus has 
    (purpose ((a Container with (in-event ((a Be-Contained))) (content ((a Aggregate with (element-type ((Eucaryotic-Chromosome)))))))))
    (is-part-of ((a Eucaryotic-Cell)))
    (is-inside ((the Eucaryotic-Cytoplasm has-part of (the Eucaryotic-Cell is-part-of of Self))))
    (has-part ((a Nucleoplasm)
               (a Nuclear-Envelope with (encloses ((the Nucleoplasm has-part of Self)))))))
(Nucleotide-Sequence has 
                                                                                                                                                                                                                                                                         
    (superclasses (Chemical-Sequence))
    (description ("A sequence of nucleotides which forms a nucleotide
                             polymer.  Souther:2001")))

(every Nucleotide-Sequence has 
    (element-type ((Nucleotide)))
    (has-part ((a 5-Prime-Nucleotide)
               (a 3-Prime-Nucleotide)
               (at-least 1 Nucleotide))))
(Nucleotide has 
                                                                                                                                                                                                                                                                                                             
    (superclasses (Monomer))
    (description ("Nucleoside with one or more phosphate groups joined
                           in ester linkages to the sugar part.  DNA and RNA
                           are polymers of nucleotides. Alberts:ECB:G-13.")))

(every Nucleotide has 
    (has-part ((a Phosphoryl-Group with (object-of ((a Be-Attached-To with (object ((the Nucleoside has-part of Self))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the Nucleoside has-part of Self))) called "Carbon-5") (the Oxygen-Atom has-part of (the Phosphoryl-Group has-part of Self)))) (instrument ((a Covalent-CO-Bond)))))))
               (a Nucleoside with (has-part ((a Hydroxyl-Group)))))))
(Nucleoside-Triphosphate has 
                                                                   
    (superclasses (Nucleotide))
    (description ("A nucleotide in which the 5' terminal group is a
                        triphosphate.  Souther.")))

(every Nucleoside-Triphosphate has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Nucleoside has-part of Self))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the Nucleoside has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Nucleoside))))
(Nucleoside-Monophosphate has 
                                                                                                                                                                                                                                                                                                
    (superclasses (Nucleotide))
    (description ("A nucleotide in which the 5' terminal group is a
                        monophosphate.  Souther.")))

(every Nucleoside-Monophosphate has 
    (has-part ((a Monophosphate)
               (a Nucleoside))))
(Nucleoside has 
                                                                                                                                                                                    
    (superclasses (Organic-Molecule))
    (description ("Compound composed of a purine or pyrimidine base linked
                        to either a ribose or a deoxyribose sugar. 
                        Alberts:ECB:G-13.")))

(every Nucleoside has 
    (has-part ((a Pentose)
               (a Nitrogenous-Base with (instance-of ((possible-values Purine Pyrimidine)))))))
(Nucleoprotein-Complex has 
                                                                                                                                      
    (superclasses (Molecular-Complex))
    (description ("A complex made up of proteins and nucleic acids. 
                        Examples include chromosomes, and the SNRP splicing 
                        complex.  Souther.")))

(every Nucleoprotein-Complex has 
    (has-part ((a Protein)
               (at-least 1 Protein)
               (a Polynucleotide)
               (at-least 1 Polynucleotide))))
(Nucleoprotein has 
    (superclasses (Macromolecule))
    (description ("Organic molecule containing both nucleic acid and
                        protein(s).  Examples are ribosomes and SNRPs.
                        Souther. "))
    )

(every Nucleoprotein has 
    (has-part ((a Protein)
               (a Polynucleotide))))
(Nucleoplasm has 
    (superclasses (Protoplasm))
    (description ("The protoplasm of the nucleus. Souther.")))

(every Nucleoplasm has 
    (encloses ((a Chromosome)
               (a Aggregate with (element-type ((Eucaryotic-DNA-Polymerase))))
               (a Aggregate with (element-type ((Nucleoside-Triphosphate)))))))
(Nucleolus has 
    (superclasses (Nucleoprotein-Complex))
    (description ("Structure in the nucleus where ribosomal RNA is 
                        transcribed and ribosomal subunits are assembled.
                        Alberts:ECB:G-13.")))
(Nucleic-Acid-Region has 
                                                                                                           
    (superclasses (Region))
    (description ("A has-region of a nucleic acid such as the 5' end or
                        3' end.   Souther.")))

(every Nucleic-Acid-Region has 
    (is-region-of ((a Nucleic-Acid-Molecule)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Nucleic-Acid-Molecule has 
    (superclasses (Macromolecule))
    (description ("RNA or DNA; consists of a chain of nucleotides joined
                        together by phosphodiester bonds. Alberts:ECB:G-13."))
    )
(Nucleic-Acid-Degradation has 
    (superclasses (Catabolize))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (description ("The hydrolytic breakdown of nucleic acids.
                          Souther."))
    )

(every Nucleic-Acid-Degradation has 
    (object ((a Nucleotide-Sequence)))
    (instrument ((a Nuclease)))
    (result ((a Aggregate with (element-type ((Nucleotide-Sequence)))))))
(Nucleic-Acid-Complex has 
                                  
    (superclasses (Organic-Complex
                      Nucleic-Acid))
    (description ("A group of nucleic acids which act together to provide
                        structure or perform some function.  They are often
                        held together by weak bonds such as hydrogen bonds.
                        Examples: DNA double helix and base pairs. Souther.")))

(every Nucleic-Acid-Complex has 
    (has-part ((a Nucleotide-Sequence)
               (at-least 2 Nucleotide-Sequence))))
(Nucleic-Acid has 
                                                                       
    (superclasses (Organic-Acid))
    (description ("Acid made up of chains of nucleotides.  Souther.")))
(Nuclease has 
                                                                                                         
    (superclasses (Catabolic-Enzyme))
    (description ("Enzyme that cleaves nucleic acids.  Matthews:BC:1157")))

(every Nuclease has 
    (purpose ((a Catalyst with (in-event ((a Nucleic-Acid-Degradation)))))))
(Nuclear-Pore has 
    (superclasses (Place))
    (description ("Channel through the nuclear envelope that allows 
                        selected molecules to move between the nucleus and 
                        cytoplasm.  Alberts:ECB:G-13.")))

(every Nuclear-Pore has 
    (is-part-of ((a Nuclear-Envelope with (encloses ((a Nucleoplasm))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Nuclear-Envelope has 
    (superclasses (Internal-Membrane))
    (description ("Envelope surrounding the nucleus in a eucaryotic cell.
                         It consists of two lipid bilayer membranes - an outer
                         and an inner - and is perforated by nuclear pores.
                         Alberts:ECB:G-13.")))

(every Nuclear-Envelope has 
    (has-part ((a Aggregate with (element-type ((Nuclear-Pore))))
               (a Lipid-Bilayer called "the outer lipid bilayer" with (encloses (((the has-part of Self) called "the inner lipid bilayer"))))
               (a Lipid-Bilayer called "the inner lipid bilayer")))
    (has-region ((a Nuclear-Pore))))
(Nonrenewable-Resource has 
    (superclasses (Resource))
    (member-of (_Partition3)))

(every Nonrenewable-Resource has 
    (base-of ((mustnt-be-a Replenish))))
(Nonpolar-Molecule has 
                                    
    (superclasses (Molecule
                      Hydrophobic-Structure))
    (description ("Molecule that lacks any local accumulation of positive
                        or negative charge.  Nonpolar molecules are generally
                        insoluble in water.  Alberts:ECB:G-13.")))

(every Nonpolar-Molecule has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Nonpolar-Amino-Acid has 
                                                                                                                                                                                                                                                                                                       
    (superclasses (Nonpolar-Molecule
                      Amino-Acid))
    (description ("Amino acids with side chains which are hydrophobic.
                        see Alberts:ECB:61.")))
(Nonmetal-Nonmetal-Reaction has 
    (superclasses (Reaction)))
(Nonessential-Amino-Acid has 
                                                                                                                                                                                                                                                         
    (superclasses (Amino-Acid))
    (description ("Amino acid that can be made by humans and other 
                        vertebrates from simple precursors, and thus is not
                        required in the diet.  Lehninger:PBC:G-9.")))
(Nonelectrolyte has 
    (superclasses (Chemical)))

(every Nonelectrolyte has-definition 
    (instance-of (Chemical))
    (electrolyte-status ((a Electrolyte-Status-Value with (value ((:pair *non nil)))))))
(Noncovalent-Bond has 
                                                        
    (superclasses (Chemical-Bond))
    (description ("Chemical bond in which, in contrast to a covalent bond,
                        no electrons are shared.  Noncovalent bonds are 
                        relatively weak, but they can sum together to produce
                        strong, highly specific interactions between molecules.
                        Alberts:ECB:G-13")))
(Non-Transcribed-Region has 
    (superclasses (DNA-Noncoding-Sequence))
    (description ("Sequences of DNA which are not transcribed and do not
                        play any role in regulation. The so-described 'junk'
                        or 'spacer' DNA.  Souther. ")))

(every Non-Transcribed-Region has 
    (has-part ((mustnt-be-a Transcription-Unit))))
(Non-Metal-Atom has 
                                                                                                                                                                                                                                                                                                           
    (superclasses (Atom)))
(Non-Engagement-Military-Task has 
                                                                                                                                                                                                                                                                                                                
    (superclasses (Military-Task)))

(every Non-Engagement-Military-Task has 
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 1 ()))))))
    (del-list ((forall (the agent of Self) (:triple It remaining-strength (the remaining-strength of It)))))
    (add-list ((forall (the agent of Self) (:triple It remaining-strength (if (has-value (the remaining-strength of It)) then (a Remaining-Strength-Value with (value ((:pair ((the1 of (the value of (the agent-attrition-rate of Self))) * (the1 of (the value of (the remaining-strength of It)))) ())))) else (a Remaining-Strength-Value with (value ((:pair ((the1 of (the value of (the agent-attrition-rate of Self)))) ()))))))))))
(Noble-Gas-Element has 
                                                                                                             
    (superclasses (Atom)))
(NO3-Minus has 
    (superclasses (Anion)))

(every NO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("nitrate"))
    (has-acid-name ("nitric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 3 O))))))))
(NO2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every NO2-Substance has 
    (has-basic-structural-unit ((a NO2))))
(NO2-Plus has 
    (superclasses (Anion)))

(every NO2-Plus has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 2 O)))))))
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge)))))))
(NO2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every NO2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.22E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a NO2-Minus))))
(NO2-Minus has 
    (superclasses (Anion)))

(every NO2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("nitrite"))
    (has-acid-name ("nitrous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 2 O))))))))
(NO2 has 
    (superclasses (Molecular-Compound)))

(every NO2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 2 O))))))))
(NO-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every NO-Substance has 
    (has-basic-structural-unit ((a NO))))
(NO has 
    (superclasses (Molecular-Compound)))

(every NO has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 1 O))))))))
(Nitrogenous-Base has 
    (superclasses (Chemical-Base
                      Nitrogen-Containing-Molecule))
    (description ("A base containing nitrogen."))
    )

(every Nitrogenous-Base has 
    (has-part ((at-least 1 Nitrogen-Atom))))
(Nitrogen-Molecule has 
                           
    (superclasses (Inorganic-Molecule))
    (description ("Molecule made up of two or more nitrogen atoms.
                        Souther.")))

(every Nitrogen-Molecule has 
    (has-part ((at-least 2 Nitrogen-Atom))))
(Nitrogen-Containing-Molecule has 
    (superclasses (Molecule))
    (description ("A molecule containing at least one nitrogen.
                        Souther. "))
    )

(every Nitrogen-Containing-Molecule has 
    (has-part ((at-least 1 Nitrogen-Atom)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Nitrogen-Atom has 
    (superclasses (Atom))
    (description ("A colorless, odorless element constituting about 4/5ths
                        of the volume of the atmosphere and is present in 
                        combined form in animal and vegetable tissues, 
                        especially in proteins. RHCD:1st Revised:901.")))

(every Nitrogen-Atom has 
    (atomic-symbol ((N)))
    (has-part ((a Proton)
               (exactly 7 Proton)
               (a Neutron)
               (exactly 7 Neutron)
               (a Electron)
               (exactly 7 Electron)))
    (mass ((a Mass-Value with (value ((:pair 14 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Ni-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Ni-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("nickel"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ni))))))))
(Ni has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Ni has 
    (atomic-symbol ((Ni)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 28 ()))))))
    (chemical-period (4)))
(NH4_3_PO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every NH4_3_PO4-Substance has 
    (has-basic-structural-unit ((a NH4_3_PO4))))
(NH4_3_PO4 has 
    (superclasses (Ionic-Compound)))

(every NH4_3_PO4 has 
    (has-part ((a NH4-Plus)
               (a PO4-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 NH4-Plus) (:pair 1 PO4-Minus-3))))))))
(NH4NO3-Substance has 
    (superclasses (Salt-Substance)))

(every NH4NO3-Substance has 
    (has-basic-structural-unit ((a NH4NO3))))
(NH4NO3 has 
    (superclasses (Salt)))

(every NH4NO3 has 
    (has-part ((a NH4-Plus)
               (a NO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 NH4-Plus) (:pair 1 NO3-Minus))))))))
(NH4Cl-Substance has 
    (superclasses (Salt-Substance)))

(every NH4Cl-Substance has 
    (has-basic-structural-unit ((a NH4Cl))))
(NH4Cl has 
    (superclasses (Salt)))

(every NH4Cl has 
    (has-part ((a NH4-Plus)
               (a Cl-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 NH4-Plus) (:pair 1 Cl-Minus)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 4 H) (:pair 1 Cl))))))))
(NH4-Plus-Substance has 
    (superclasses (Cation-Substance)))

(every NH4-Plus-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 5.6E-10)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-basic-structural-unit ((a NH4-Plus))))
(NH4-Plus has 
    (superclasses (Metal-Cation)))

(every NH4-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("ammonium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 4 H))))))))
(NH3CH3-Plus has 
    (superclasses (Cation)))

(every NH3CH3-Plus has 
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 6 H) (:pair 1 C)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 3 H) (:pair 1 C) (:pair 3 H)))))))
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge)))))))
(NH3-Substance has 
    (superclasses (Base)))

(every NH3-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.8E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Ammonia"))
    (has-basic-structural-unit ((a NH3))))
(NH3 has 
    (superclasses (Ionic-Compound)))

(every NH3 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 3 H))))))))
(NH2-Minus has 
    (superclasses (Anion)))

(every NH2-Minus has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 2 H)))))))
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 2 H)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 2 H)))))))
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge)))))))
(Neutron has 
    (superclasses (Subatomic-Particle))
    (description ("Fundamental subatomic particle found in the atomic
                        nucleus; it has a mass similar to that of a proton,
                        but no electric charge. Alberts:ECB:G-12.")))

(every Neutron has 
    (mass ((a Mass-Value with (value ((:pair 1 *dalton))))))
    (is-at ((a Atomic-Nucleus)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Neutralize-Unit has 
    (superclasses (Engagement-Military-Task)))

(every Neutralize-Unit has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.7 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1 ()))))))
    (del-list ((forall (the object of Self) (:triple It combat-strength (the combat-strength of It)))))
    (add-list ((forall (the object of Self) (:triple It combat-strength (a Combat-Strength-Value with (value ((:pair *neutralized Military-Unit))))))))
    (text-active-verbseq-sg ("neutralizes"))
    (text-active-verbseq-pl ("neutralize")))
(Neutralization-Reaction has 
    (superclasses (Reaction)))
(Neutral-Amino-Acid has 
    (superclasses (Amino-Acid))
    (description ("An amino acid that has no charge or whose charges
                        balance each other.  Souther.")))
(Ne has 
    (superclasses (Non-Metal-Atom
                      Noble-Gas-Element)))

(every Ne has 
    (atomic-symbol ((Ne)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 10 ()))))))
    (chemical-period (2)))
(Nb has 
    (superclasses (Metal-Atom
                      VB-Element)))

(every Nb has 
    (atomic-symbol ((Nb)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 41 ()))))))
    (chemical-period (5)))
(Navy has 
    (superclasses (Military-Unit)))
(Natural-Language has 
    (superclasses (Language))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
    (wn20-synset ((:set (:triple "natural_language" 1 "n") (:triple "tongue" 2 "n")))))
(Nascent-Protein has 
    (superclasses (Protein))
    (description ("A newly synthesized protein before any modifications.
                        Souther. ")))

(every Nascent-Protein has 
    (has-region ((a Amino-Terminus with (content ((a Methionine)))))))
(Narrow has 
    (superclasses (Decrease))
    (test-case ('((*myroad has (instance-of (Physical-Object)) (width (*myroadwidth))) (*myroadwidth has (instance-of (Length-Value)) (value ((:pair 30 *foot)))) (a Decrease with (object (*myroad)) (property-slot (width))) ((thelast Decrease) isa Narrow) (do-and-next (thelast Narrow)) ((the less-than of (the width of *myroad)) includes *myroadwidth))))
    (wn20-synset ((:set (:triple "narrow" 1 "v") (:triple "contract" 8 "v")))))

(every Narrow has 
    (text-nominalization ("narrowing")))

(every Narrow has-definition 
    (instance-of (Decrease))
    (property-slot ((width))))
(NaOH-Substance has 
    (superclasses (Base)))

(every NaOH-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a NaOH))))
(NaOH has 
    (superclasses (Ionic-Compound)))

(every NaOH has 
    (has-part ((a Na-Plus)
               (a OH-Minus)))
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na) (:pair 1 O) (:pair 1 H)))))))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 OH-Minus))))))))
(NaOCl-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every NaOCl-Substance has 
    (has-basic-structural-unit ((a NaOCl))))
(NaOCl has 
    (superclasses (Ionic-Compound)))

(every NaOCl has 
    (has-part ((a Na-Plus)
               (a OCl-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 OCl-Minus))))))))
(NaNO3-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every NaNO3-Substance has 
    (has-basic-structural-unit ((a NaNO3))))
(NaNO3 has 
    (superclasses (Ionic-Compound)))

(every NaNO3 has 
    (has-part ((a Na-Plus)
               (a NO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 NO3-Minus))))))))
(NaI-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every NaI-Substance has 
    (has-basic-structural-unit ((a NaI))))
(NaI has 
    (superclasses (Ionic-Compound)))

(every NaI has 
    (has-part ((a Na-Plus)
               (a I-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 I-Minus))))))))
(NaHCO3-Substance has 
    (superclasses (Strong-Electrolyte)))

(every NaHCO3-Substance has 
    (has-basic-structural-unit ((a NaHCO3))))
(NaHCO3-Solution has 
    (superclasses (Aqueous-Solution)))

(every NaHCO3-Solution has 
    (base ((a NaHCO3))))
(NaHCO3 has 
    (superclasses (Ionic-Compound)))

(every NaHCO3 has 
    (has-chemical-name (""))
    (has-part ((a Na-Plus)
               (a HCO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 HCO3-Minus))))))))
(NaF-Substance has 
    (superclasses (Salt-Substance)))

(every NaF-Substance has 
    (has-basic-structural-unit ((a Salt with (has-part ((a Na-Plus) (a F-Minus))) (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na) (:pair 1 F))))))) (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 F-Minus)))))))))))
(NAD-Plus has 
    (superclasses (Electron-Carrier))
    (description ("Molecule that participates in an oxidation reaction by
                        accepting a hydride ion (H-) from a donor molecule 
                        thereby producing NADH, which serves as an activated
                        carrier of electrons; important in the energy-producing
                        breakdown of sugars and fats.  Alberts:ECB:G-12.")))

(every NAD-Plus has 
    (purpose ((a Vehicle with (in-event ((a Electron-Transfer)))))))
(NaCl-Substance has 
    (superclasses (Salt-Substance)))

(every NaCl-Substance has 
    (has-basic-structural-unit ((a Salt with (has-part ((a Na-Plus) (a Cl-Minus))) (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na) (:pair 1 Cl))))))) (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na) (:pair 1 Cl))))))) (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 Cl-Minus)))))))))))
(Na2SO4 has 
    (superclasses (Ionic-Compound)))

(every Na2SO4 has 
    (has-chemical-name (""))
    (has-part ((a Na-Plus)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na-Plus) (:pair 1 SO4-Minus-2))))))))
(Na2S-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Na2S-Substance has 
    (has-basic-structural-unit ((a Na2S))))
(Na2S has 
    (superclasses (Ionic-Compound)))

(every Na2S has 
    (has-part ((a Na-Plus)
               (a S-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na-Plus) (:pair 1 S-Minus-2))))))))
(Na2CO3-Substance has 
    (superclasses (Strong-Electrolyte)))

(every Na2CO3-Substance has 
    (has-basic-structural-unit ((a Na2CO3))))
(Na2CO3-Solution has 
    (superclasses (Aqueous-Solution)))

(every Na2CO3-Solution has 
    (base ((a Na2CO3-Substance))))
(Na2CO3 has 
    (superclasses (Ionic-Compound)))

(every Na2CO3 has 
    (has-chemical-name (""))
    (has-part ((a Na-Plus)
               (a CO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na-Plus) (:pair 1 CO3-Minus-2))))))))
(Na-Substance has 
    (superclasses (Chemical)))

(every Na-Substance has 
    (has-basic-structural-unit ((a Na))))
(Na-Plus has 
    (superclasses (Metal-Cation)))

(every Na-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("sodium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na))))))))
(Na has 
    (superclasses (Metal-Atom
                      Alkali-Metal-Element)))

(every Na has 
    (atomic-symbol ((Na)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 11 ()))))))
    (chemical-period (3)))
(N3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every N3-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 5.26E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a N3-Minus))))
(N3-Minus has 
    (superclasses (Anion)))

(every N3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("azide"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 N))))))))
(N2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every N2-Substance has 
    (has-basic-structural-unit ((a N2))))
(N2 has 
    (superclasses (Molecular-Compound)))

(every N2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 N))))))))
(N-Minus-3 has 
    (superclasses (Anion)))

(every N-Minus-3 has 
    (charge ((a Charge-Value with (value ((:pair -3 *electronic-charge))))))
    (has-chemical-name ("nitride"))
    (has-acid-name ("hydronitric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N))))))))
(N has 
    (superclasses (Non-Metal-Atom
                      VA-Element)))

(every N has 
    (has-molecular-name ("nitride"))
    (atomic-symbol ((N)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 7 ()))))))
    (chemical-period (2)))
(Multislot-Value-Viewpoint has 
    (superclasses (Viewpoint)))

(every Multislot-Value-Viewpoint has 
    (viewpoint-question (((?vaq == (the viewpoint-answerable-query of Self)) and (?fr == (the1 of (the2 of (the1 of ?vaq)))) and (?slotfamily == (the viewpoint-multislot-type of Self)) and (make-phrase (if (?slotfamily = *meronymic-multislot-query*) then (:seq "What are the parts of" (the text-def-head of ?fr) "nospace" "?") else (if (?slotfamily = *participant-multislot-query*) then (:seq "What is the purpose of" (the text-def-head of ?fr) "nospace" "?") else (if (?slotfamily = *spatial-multislot-query*) then (:seq "What is the location of" (the text-def-head of ?fr) "nospace" "?") else (if (?slotfamily = *agentive-multislot-query*) then (if (?fr isa Entity) then (:seq "What does" (the text-def-head of ?fr) "do" "?") else (if (?fr isa Event) then (:seq "What" (the text-active-phrase of ?fr) (the text-dobj-phrase of ?fr) (the text-arguments of ?fr) "nospace" "?") else (if (?fr isa Role) then (:seq "What has" (the text-def-head of ?fr) "as its purpose" "nospace" "?"))))))))))))
    (viewpoint-answer (((?vaq == (allof ?q in (the elements of (the viewpoint-answerable-query of Self)) where (not (((the2 of (the2 of ?q)) = purpose) and ((make-phrase (the text-indef-phrase of (the (the2 of (the2 of ?q)) of (the1 of (the2 of ?q))))) = "a role"))))) and (?fr == (the1 of (the2 of (the1 of (the viewpoint-answerable-query of Self))))) and (make-sentence (:seq (if (oneof ?vaq where ((the2 of (the2 of It)) isa Relation)) then (:seq (the text-def-head of ?fr) (forall ?p in ?vaq where ((the2 of (the2 of ?p)) isa Relation) ((?sl == (the2 of (the2 of ?p))) and (?filtfill == (if (has-value (the viewpoint-filter of Self)) then (allof (the ?sl of ?fr) where (It isa (the viewpoint-filter of Self))) else (the ?sl of ?fr))) and ((the text-head of ?filtfill) /= (:seq (:seq "location of" (the text-gen of ?fr)) ())) and (:seq (if ((the number of ?vaq) > 1) then "<li>") (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (:seq "is" (the (the text-slot of ?sl) of ?fr)) else (:seq "--" ?sl "--"))) (andify (the text-indef-phrase of ?filtfill)) (if ((the number of ?vaq) > 1) then "</li>
")))))) (if (oneof ?vaq where ((the2 of (the2 of It)) isa Property)) then (forall ?vaq where ((the2 of (the2 of It)) isa Property) (:seq (if ((the number of ?vaq) > 1) then "<li>") (the text-description of (the (the2 of (the2 of It)) of ?fr)) (if ((the number of ?vaq) > 1) then "</li>
")))))))))
    (viewpoint-detail (((?vaq == (the viewpoint-answerable-query of Self)) and (?fr == (the1 of (the2 of (the1 of ?vaq)))) and (make-phrase (:seq "<b>" (the instance-of of ?fr) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of ?fr)) or (the description of (the instance-of of ?fr)))) (forall ?as in (the user-assumption of (the instance-of of ?fr)) (:seq "
<li>" ?as "</li>
")) "<p>
" "<ul>
" (forall ?p in (the elements of ?vaq) (:seq "<li>" (get-justification (:triple (the1 of (the2 of ?p)) (the2 of (the2 of ?p)) *)) "</li>
")) "</ul>
"))))))
(Multicellular-Organism has 
                                      
    (superclasses (Thing)))
(Mt has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Mt has 
    (atomic-symbol ((Mt)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 109 ()))))))
    (chemical-period (7)))
(MRNA-Site has 
    (superclasses (Binding-Site))
    (description ("The site on the ribosome where mRNA is bound during
                        translation.  Souther.")))
(MRNA has 
                                                                
    (superclasses (RNA-Molecule))
    (description ("RNA molecule that specifies the amino acid sequence of a
                     protein.  Produced by RNA splicing (in eucaryotes) from
                     a larger RNA molecule made by RNA polymerase as a 
                     complementary copy of DNA.  It is translated into protein
                     in a process catalyzed by ribosomes. Alberts:ECB:G-11")))

(every MRNA has 
    (purpose ((a Vehicle with (in-event ((a Gene-To-Protein-Expression))))))
    (has-part ((a Ribosome-Binding-Site with (location ()))
               (a Protein-Initiator-Codon)
               (a RNA-Translated-Region)
               (a Protein-Stop-Codon))))
(Move-Together has 
    (superclasses (Action))
    (required-slot (object
                       destination))
    (primary-slot (agent
                      subevent))
    (cmap-correspondence ((:seq object "the things Moved-Together")
                          (:seq agent "the Mover")
                          (:seq destination "the place to which the objects are Moved-Together")
                          (:seq subevent "the Move of each object")))
    (test-case ('((*soccer-ball has (instance-of (Physical-Object))) (*soccer-player has (instance-of (Physical-Object))) (*midfield has (instance-of (Place))) (a Move-Together with (object (*soccer-ball *soccer-player)) (destination (*midfield))) (do-script (thelast Move-Together)) ((the location of *soccer-ball) = *midfield) ((the location of *soccer-player) = *midfield) (forall (the subevent of (thelast Move-Together)) ((It isa Move) and ((:set *soccer-player *soccer-ball) includes (the object of It)))) (new-situation) (*comet has (instance-of (Physical-Object))) (*asteroid has (instance-of (Physical-Object)) (is-near (*pluto))) (*earth has (instance-of (Physical-Object))) (*mercury has (instance-of (Physical-Object))) (*pluto has (instance-of (Physical-Object))) (*sun has (instance-of (Physical-Object)) (is-near (*mercury)) (location ((a Place)))) (a Move-Together with (object (*comet *asteroid *earth)) (destination (*sun))) (do-script (thelast Move-Together)) ((the location-of of (the location of *sun)) is-superset-of (:set *comet *asteroid *earth)) ((the is-near of *comet) includes *mercury) ((the is-near of *asteroid) includes *mercury) (not ((the is-near of *asteroid) includes *pluto)) ((the is-near of *earth) includes *mercury))))
    (wn16-synset ((:set (:triple "assemble" 3 "v") (:triple "gather" 7 "v") (:triple "get_together" 1 "v"))))
    (wn20-synset ((:set (:triple "assemble" 3 "v") (:triple "gather" 6 "v") (:triple "get_together" 1 "v")))))

(every Move-Together has 
    (object ((at-least 2 Tangible-Entity)
             (a Tangible-Entity)
             (a Tangible-Entity)))
    (destination ((a Spatial-Entity)))
    (first-subevent ((the subevent of Self)))
    (subevent ((forall (the object of Self) (a Move with (object ((It))) (destination ((the destination of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (origin ((if (has-value (the origin of Self)) then (the origin of Self))))))))
    (text-active-verbseq-sg ("causes to move together"))
    (text-active-verbseq-pl ("cause to move together"))
    (text-passive-verbseq-sg ("moves together"))
    (text-passive-verbseq-pl ("move together"))
    (text-nominalization ("moving together")))
(Move-Through has 
                                                                               
    (superclasses (Move))
    (required-slot (object
                       path
                       base))
    (primary-slot (agent
                      origin
                      destination))
    (cmap-correspondence ((:seq object "the thing moved")
                          (:seq agent "the mover")
                          (:seq origin "moved from")
                          (:seq destination "moved to")
                          (:seq path "moved through")))
    (test-case ('((*Fence has (instance-of (Tangible-Entity))) (*David has (instance-of (Tangible-Entity))) (*Move-Through has (instance-of (Move-Through)) (object (*David)) (base (*Fence))) (do-and-next *Move-Through) (the text-gen of (thelast Move-Through)) ((the is-region-of of (the path of *Move-Through)) = *Fence))))
    (wn16-synset ((:set (:triple "follow" 4 "v") (:triple "travel_along" 1 "v"))))
    (wn20-synset ((:set (:triple "follow" 4 "v") (:triple "travel_along" 1 "v")))))

(every Move-Through has 
    (object ((a Tangible-Entity)))
    (base ((a Tangible-Entity with (plays ((a Barrier))) (has-region ((a Spatial-Entity))))))
    (path ((the has-region of (the base of Self))))
    (soft-pcs-list ((:triple (the base of Self) object-of (mustnt-be-a Be-Inaccessible))))
    (text-active-verbseq-sg ("moves"))
    (text-active-verbseq-pl ("move"))
    (text-passive-verbseq-sg ("moves"))
    (text-passive-verbseq-pl ("move"))
    (text-argslots ((:seq path base)))
    (text-path ("through"))
    (text-base ("in"))
    (text-nominalization ("moving")))
(Move-Out-Of has 
    (defeated-by-class-of (Be-Contained))
                                             
    (superclasses (Move-Through))
    (required-slot (object
                       base
                       origin))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the thing moved")
                          (:seq agent "the mover")
                          (:seq base "the enclosure")
                          (:seq origin "moved from")
                          (:seq destination "moved to")
                          (:seq path "moved through or along")
                          (:seq toward "moved toward")
                          (:seq away-from "moved away from")))
    (test-case ('((*student has (instance-of (Tangible-Entity))) (*bag has (instance-of (Tangible-Entity)) (location ((a Place))) (plays ((a Container with (content (*book)))))) (*book has (instance-of (Tangible-Entity)) (location ((a Place))) (is-inside (*bag))) (*outside has (instance-of (Place)) (is-outside (*bag))) (a Move-Out-Of with (agent (*student)) (object (*book)) (base (*bag)) (destination (*outside)) (origin ((a Place with (is-inside (*bag)))))) (do-and-next (thelast Move-Out-Of)) (the text-gen of (thelast Move-Out-Of)) (the location of *book) (the location of *bag) (the is-outside of *book) (the does-not-enclose of *bag) (not ((the is-inside of (the location of *book)) includes (the location of *bag))) ((the is-outside of (the location of *book)) includes *bag) ((the Container plays of *bag) isa Container))))
    (wn16-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v"))))
    (wn20-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v")))))

(every Move-Out-Of has 
    (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Contained) and ((the base of It) = (the base of Self))))))
    (object ((must-be-a Tangible-Entity)))
    (base ((must-be-a Tangible-Entity with (plays ((a Container with (content ((the object of Self)))))) (encloses ((the origin of Self))) (has-region ((a Spatial-Entity))))))
    (origin ((a Spatial-Entity with (is-inside ((the base of Self))))))
    (destination ((a Spatial-Entity with (is-outside ((the base of Self))))))
    (path ((a Spatial-Entity with (plays ((a Portal))) (is-region-of ((the base of Self))))))
    (soft-pcs-list ((forall (the object of Self) (:triple (It) is-inside (the base of Self)))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Confined with (base ((the base of Self)))) [Move-Out-Of-pcs-1]))
               (if (has-value (the path of Self)) then (forall (the path of Self) (:triple (the path of Self) object-of (mustnt-be-a Be-Closed))))))
    (del-list ((:triple (the Container plays of (the base of Self)) content (the content of (the Container plays of (the base of Self) [Move-Out-Of-del-1])))
               ((forall (the defeats of Self) (:set (:triple It object (the object of Self)) (:triple It base (the base of Self)))) [Move-Out-Of-del-2])))
    (interrupted-by ((must-be-a Move-Into with (object ((the object of Self))) (base ((the base of Self))))))
    (text-active-verbseq-sg ("moves"))
    (text-active-verbseq-pl ("move"))
    (text-passive-verbseq-sg ("gets moved"))
    (text-argslots ((:seq base path)))
    (text-base ("out of"))
    (text-path ("through"))
    (preparatory-event ((:default (a Shut-Out with (object ((the object of Self))) (base ((the base of Self)))) (a Open with (object ((the base of Self)))) (a Move-Into with (object ((the object of Self))) (base ((the base of Self)))))))
    (text-nominalization ("moving")))
(Move-Military-Unit has 
    (superclasses (Non-Engagement-Military-Task
                      Locomotion)))

(every Move-Military-Unit has 
    (object ((a Military-Unit)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.99 ()))))))
    (text-nominalization ("movement"))
    (text-active-verbseq-sg ("moves"))
    (text-active-verbseq-pl ("move"))
    (text-argslots ((:seq origin path destination))))
(Move-Into has 
    (caused-by-class-of (Be-Contained))
                                                                 
    (superclasses (Move-Through))
    (required-slot (object
                       base
                       destination))
    (primary-slot (agent
                      path))
    (cmap-correspondence ((:seq object "the thing moved")
                          (:seq base "the enclosure")
                          (:seq destination "moved to")
                          (:seq agent "the mover")
                          (:seq origin "moved from")
                          (:seq path "moved along or through")
                          (:seq toward "moved toward")
                          (:seq away-from "moved away from")))
    (test-case ('((*Troy has (instance-of (Tangible-Entity))) (*TrojanHorse has (instance-of (Physical-Object)) (is-outside (*Troy))) (a Move-Into with (base (*Troy)) (object (*TrojanHorse))) (do-and-next (thelast Move-Into)) (the text-gen of (thelast Move-Into)) ((the is-inside of *TrojanHorse) includes *Troy) ((the content of (the Container plays of *Troy)) includes *TrojanHorse) ((the Container plays of *Troy) isa Container) (has-value (the Be-Contained object-of of *TrojanHorse)))))
    (wn16-synset ((:set (:triple "move_into" 1 "v") (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v"))))
    (wn20-synset ((:set (:triple "move_into" 1 "v") (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v")))))

(every Move-Into has 
    (resulting-state ((a Be-Contained)))
    (object ((a Tangible-Entity)))
    (base ((a Tangible-Entity with (plays ((a Container))) (encloses ((the destination of Self))) (has-region ((a Spatial-Entity with (plays ((a Portal)))))))))
    (destination ((a Spatial-Entity with (is-inside ((the base of Self))))))
    (origin ((a Spatial-Entity with (is-outside ((the base of Self))))))
    (path ((a Spatial-Entity with (plays ((a Portal))) (is-region-of ((the base of Self))))))
    (soft-pcs-list ((forall (the object of Self) (:triple It is-outside (the base of Self)))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Shut-Out with (base ((the base of Self)))) [Move-Into-pcs-1]))
               (if (has-value (the path of Self)) then (forall (the path of Self) (:triple (the path of Self) object-of (mustnt-be-a Be-Closed))))))
    (add-list ((:triple (the Container plays of (the base of Self)) content (the object of Self) [Move-Into-add-1])
               (:triple (the resulting-state of Self) object (the object of Self) [Move-Into-add-2])))
    (interrupted-by ((must-be-a Move-Out-Of with (object ((the object of Self))) (base ((the base of Self))))))
    (text-active-verbseq-sg ("moves"))
    (text-active-verbseq-pl ("move"))
    (text-passive-verbseq-sg ("gets moved"))
    (text-passive-verbseq-pl ("get moved"))
    (text-argslots ((:seq base path)))
    (text-base ("into"))
    (text-path ("through"))
    (preparatory-event ((:default (a Admit with (object ((the object of Self))) (base ((the base of Self)))) (a Open with (object ((the base of Self)))) (a Move-Out-Of with (object ((the object of Self))) (base ((the base of Self)))))))
    (text-nominalization ("moving")))
(Move-Apart has 
    (superclasses (Action))
    (required-slot (object
                       origin))
    (primary-slot (agent
                      subevent))
    (cmap-correspondence ((:seq object "the things being moved apart")
                          (:seq agent "the doer")
                          (:seq origin "starting point")
                          (:seq subevent "subevents")))
    (test-case ('((*Blue-Cow has (instance-of (Living-Entity))) (*Purple-Cow has (instance-of (Living-Entity))) (*Farmer-Bill has (instance-of (Living-Entity))) (*Prairie has (instance-of (Place))) (*Blue-Cow has (location (*Prairie))) (*Purple-Cow has (location (*Prairie))) (a Move-Apart with (object (*Blue-Cow *Purple-Cow)) (agent (*Farmer-Bill)) (origin (*Prairie))) (do-script (thelast Move-Apart)) ((the location of *Blue-Cow) /= *Prairie) ((the location of *Purple-Cow) /= *Prairie) (forall (the subevent of (thelast Move-Apart)) ((It isa Move) and ((:set *Blue-Cow *Purple-Cow) includes (the object of It)))) (new-situation) (*me has (instance-of (Living-Entity)) (is-near (*my-brother *my-sister *the-folks))) (*my-brother has (instance-of (Living-Entity)) (is-near (*me *my-sister *the-folks))) (*my-sister has (instance-of (Living-Entity)) (is-near (*my-brother *me *the-folks))) (*the-folks has (instance-of (Living-Entity))) (a Move-Apart with (object (*me *my-brother *my-sister)) (origin (*the-folks))) (do-script (thelast Move-Apart)) (not ((the is-near of *me) includes *my-brother)) (not ((the is-near of *me) includes *my-sister)) (not ((the is-near of *me) includes *the-folks)) (not ((the is-near of *my-brother) includes *me)) (not ((the is-near of *my-brother) includes *my-sister)) (not ((the is-near of *my-brother) includes *the-folks)) (not ((the is-near of *my-sister) includes *my-brother)) (not ((the is-near of *my-sister) includes *me)) (not ((the is-near of *my-sister) includes *the-folks)))))
    (wn16-synset ((:set (:triple "separate" 2 "v") (:triple "disunite" 2 "v") (:triple "divide" 5 "v") (:triple "part" 5 "v"))))
    (wn20-synset ((:set (:triple "separate" 2 "v") (:triple "disunite" 2 "v") (:triple "divide" 5 "v") (:triple "part" 5 "v")))))

(every Move-Apart has 
    (object ((at-least 2 Tangible-Entity)
             (a Tangible-Entity)
             (a Tangible-Entity)))
    (origin ((a Spatial-Entity)))
    (soft-pcs-list ((forall (the object of Self) where t (forall2 (the object of Self) where (It2 /= It) (:triple It is-at It2)))))
    (first-subevent ((the subevent of Self)))
    (subevent ((forall (the object of Self) (a Move with (object ((It))) (origin ((the origin of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (destination ((if (has-value (the destination of Self)) then (the destination of Self))))))))
    (text-active-verbseq-sg ("causes to move apart"))
    (text-active-verbseq-pl ("cause to move apart"))
    (text-passive-verbseq-sg ("moves apart"))
    (text-passive-verbseq-pl ("move apart"))
    (text-nominalization ("moving")))
(Move has 
                                                                                                                                                                                                            
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      origin
                      destination
                      path))
    (secondary-slot (toward
                        away-from))
    (cmap-correspondence ((:seq object "the thing moved")
                          (:seq agent "the mover")
                          (:seq origin "moved from")
                          (:seq destination "moved to")
                          (:seq path "moved through")
                          (:seq toward "moved toward")
                          (:seq away-from "moved away from")))
    (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Tangible-Entity))) (*John has (location (*Boston))) (a Move with (object (*John)) (origin (*Boston)) (destination (*Austin))) (do-and-next (thelast Move)) (the text-gen of (thelast Move)) ((the location of *John) = *Austin) ((in-situation (the1 of (the prev-situation of (curr-situation))) (the location of *John)) = *Boston) ((the location of *John) /= *Boston) (not (*Boston &? *Austin)) (new-situation) (*book has (instance-of (Physical-Object)) (is-on (*table)) (is-beside (*mug))) (*table has (instance-of (Physical-Object))) (*mug has (instance-of (Physical-Object))) (*phone has (instance-of (Physical-Object)) (is-on (*table))) (a Move with (object (*book)) (destination (*phone))) (do-and-next (thelast Move)) ((the is-on of *book) = *table) ((the is-beside of *book) /= *mug) ((the location of *book) = (the location of *phone)) (*TheRoof has (instance-of (Architectural-Structure)) (plays ((a Cover)))) (*TheSky has (instance-of (Place)) (is-above (*TheRoof))) (*TheBBQ has (instance-of (Device)) (is-below (*TheRoof))) (*TheRain has (instance-of (Substance))) (a Move with (object (*TheRain)) (origin (*TheSky)) (destination (*TheBBQ))) (not (try-do (thelast Move))))))
    (wn16-synset ((:set (:triple "move" 1 "v") (:triple "move" 2 "v") (:triple "move" 3 "v") (:triple "move" 4 "v") (:triple "move" 7 "v") (:triple "move" 12 "v") (:triple "move" 14 "v") (:triple "move" 15 "v") (:triple "displace" 4 "v") (:triple "go" 1 "v") (:triple "go" 21 "v") (:triple "locomote" 1 "v") (:triple "travel" 1 "v"))))
    (wn20-synset ((:set (:triple "move" 1 "v") (:triple "move" 2 "v") (:triple "move" 3 "v") (:triple "move" 4 "v") (:triple "move" 7 "v") (:triple "move" 12 "v") (:triple "move" 14 "v") (:triple "move" 15 "v") (:triple "displace" 4 "v") (:triple "go" 1 "v") (:triple "go" 21 "v") (:triple "locomote" 1 "v") (:triple "travel" 1 "v") (:triple "motion" 6 "n") (:triple "movement" 3 "n") (:triple "move" 4 "n") (:triple "drive" 1 "v") (:triple "drive" 2 "v") (:triple "drive" 3 "v")))))

(every Move has 
    (object ((a Tangible-Entity)
             (excluded-values (the origin of Self) (the destination of Self) (the away-from of Self) (the toward of Self) (the path of Self))))
    (origin ((must-be-a Spatial-Entity)))
    (destination ((must-be-a Spatial-Entity)))
    (away-from ((must-be-a Spatial-Entity)))
    (toward ((must-be-a Spatial-Entity)))
    (path ((must-be-a Spatial-Entity)))
    (soft-pcs-list ((if (has-value (the destination of Self)) then (:triple (the destination of Self) object-of (mustnt-be-a Be-Blocked)))
                    (if ((has-value (the destination of Self)) and (has-value (the origin of Self))) then (:triple (the origin of Self) object-of (mustnt-be-a Be-Blocked)))))
    (pcs-list ((if (has-value (the origin of Self)) then (forall (the object of Self) (:triple It location (if ((the origin of Self) isa Place) then (the origin of Self) else (the location of (the origin of Self))))))
               (forall (the object of Self) (forall2 (the object-of of It) (if (It2 isa Be-Held) then (:triple It2 agent (the agent of Self)))))
               (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Restrained)))
               (if (has-value (the Be-Held object-of of (the object of Self))) then (forall (the agent of Self) (:triple It agent-of (a Be-Held with (object ((the object of Self))) (agent ((the agent of Self)))))))
               (if (has-value (the path of Self)) then (forall (the path of Self) (:triple (the path of Self) object-of (mustnt-be-a Be-Blocked))))))
    (ncs-list ((forall (the is-below of (the destination of Self)) where (oneof2 (the plays of It) where (It2 isa Cover)) (:triple (the origin of Self) is-above It))))
    (add-list ((if (has-value (the destination of Self)) then (forall (the object of Self) (:set (:triple It is-near (the is-near of (the destination of Self))) (:triple It is-above (the is-above of (the destination of Self))) (:triple It is-below (the is-below of (the destination of Self))) (:triple It is-along (the is-along of (the destination of Self))) (:triple It is-at (the is-at of (the destination of Self))) (:triple It is-at-of (the is-at-of of (the destination of Self))) (:triple It is-beside (the is-beside of (the destination of Self))) (:triple It is-between (the is-between of (the destination of Self))) (:triple It is-behind (the is-behind of (the destination of Self))) (:triple It is-in-front-of (the is-in-front-of of (the destination of Self))) (:triple It is-inside (the is-inside of (the destination of Self))) (:triple It is-on (the is-on of (the destination of Self))) (:triple It is-opposite (the is-opposite of (the destination of Self))) (:triple It is-outside (the is-outside of (the destination of Self))) (:triple It does-not-enclose (the does-not-enclose of (the destination of Self))) (:triple It is-over (the is-over of (the destination of Self))) (:triple It is-under (the is-under of (the destination of Self))) (:triple It location (if ((the destination of Self) isa Place) then (the destination of Self) else ((if ((the destination of Self) isa Tangible-Entity) then (the location of (the destination of Self)) else (the destination of Self))))))))))
    (del-list ((forall (the object of Self) (:set (:triple It location (the location of It)) (forall2 (the is-near of It) (if (not ((the is-near of (the destination of Self)) includes It2)) then (:triple It is-near It2))) (forall2 (the abuts of It) (if (not ((the abuts of (the destination of Self)) includes It2)) then (:triple It abuts It2))) (forall2 (the is-above of It) (if (not ((the is-above of (the destination of Self)) includes It2)) then (:triple It is-above It2))) (forall2 (the is-below of It) (if (not ((the is-below of (the destination of Self)) includes It2)) then (:triple It is-below It2))) (forall2 (the is-along of It) (if (not ((the is-along of (the destination of Self)) includes It2)) then (:triple It is-along It2))) (forall2 (the is-at of It) (if (not ((the is-at of (the destination of Self)) includes It2)) then (:triple It is-at It2))) (forall2 (the is-at-of of It) (if (not ((the is-at-of of (the destination of Self)) includes It2)) then (:triple It is-at-of It2))) (forall2 (the is-beside of It) (if (not ((the is-beside of (the destination of Self)) includes It2)) then (:triple It is-beside It2))) (forall2 (the is-between of It) (if (not ((the is-between of (the destination of Self)) includes It2)) then (:triple It is-between It2))) (forall2 (the is-behind of It) (if (not ((the is-behind of (the destination of Self)) includes It2)) then (:triple It is-behind It2))) (forall2 (the is-in-front-of of It) (if (not ((the is-in-front-of of (the destination of Self)) includes It2)) then (:triple It is-in-front-of It2))) (forall2 (the is-inside of It) (if (not ((the is-inside of (the destination of Self)) includes It2)) then (:triple It is-inside It2))) (forall2 (the encloses of It) (if (not ((the encloses of (the destination of Self)) includes It2)) then (:triple It encloses It2))) (forall2 (the is-on of It) (if (not ((the is-on of (the destination of Self)) includes It2)) then (:triple It is-on It2))) (forall2 (the has-on-it of It) (if (not ((the has-on-it of (the destination of Self)) includes It2)) then (:triple It has-on-it It2))) (forall2 (the is-opposite of It) (if (not ((the is-opposite of (the destination of Self)) includes It2)) then (:triple It is-opposite It2))) (forall2 (the is-outside of It) (if (not ((the is-outside of (the destination of Self)) includes It2)) then (:triple It is-outside It2))) (forall2 (the does-not-enclose of It) (if (not ((the does-not-enclose of (the destination of Self)) includes It2)) then (:triple It does-not-enclose It2))) (forall2 (the is-over of It) (if (not ((the is-over of (the destination of Self)) includes It2)) then (:triple It is-over It2))) (forall2 (the is-under of It) (if (not ((the is-under of (the destination of Self)) includes It2)) then (:triple It is-under It2)))))))
    (dcs-list ((if (has-value (the path of Self)) then ((forall (the object of Self) (:triple It location (if ((the path of Self) isa Place) then (the path of Self) else (the location of (the path of Self)))))))))
    (preparatory-event ((:default (if (has-value (the origin of Self)) then (a Move with (object ((the object of Self))) (destination ((the origin of Self))))) (forall (the object of Self) ((a Release with (object (It))))) (if (has-value (the path of Self)) then ((a Unblock with (object ((the path of Self)))))) (if (has-value (the Be-Held object-of of (the object of Self))) then ((a Hold with (object ((the object of Self))) (agent ((the agent of Self)))))))))
    (interrupted-by ((must-be-a Block with (object ((the path of Self))))))
    (text-active-verbseq-sg ("moves"))
    (text-active-verbseq-pl ("move"))
    (text-passive-verbseq-sg ("moves"))
    (text-passive-verbseq-pl ("move"))
    (text-argslots ((:seq origin path destination base instrument)))
    (text-nominalization ("move")))
(Mountains has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Mountains has 
    (trafficability ((a Trafficability-Value with (value ((:pair *SR Armor-Unit) (:pair *SR Mechanized-Infantry-Unit) (:pair *R Light-Infantry-Unit)))))))
(Monosaccharide has 
                                              
    (superclasses (Monomer
                      Carbohydrate))
    (description ("Any simple sugar with the formula (CH2O)n where n =
                        3-7.  Alberts:MBC:G-16. Monosaccharides are the basic
                        unit of sugars and polysaccharides. Souther. ")))

(every Monosaccharide has 
    (is-basic-structural-unit-of ((must-be-a Polysaccharide))))
(Monoprotic-Acid has 
    (superclasses (Acid)))

(every Monoprotic-Acid has-definition 
    (instance-of (Ionic-Compound-Substance
                     [Monoprotic-Acid-instance-of-1]))
    (has-basic-structural-unit ((a Ionic-Compound)
                                (if (has-value (the has-chemical-formula of Self)) then (constraint (((the elements of (the term of (the has-chemical-formula of TheValue))) includes (:pair 1 H-Plus))))))))
(Monophosphate has 
    (superclasses (Phosphoryl-Group))
    (description ("A compound containing a single phosphate group.
                    Souther. ")))

(every Monophosphate has 
    (has-part ((a Phosphorus-Atom with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Oxygen-1"))) (instrument ((a Covalent-PO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Oxygen-2"))) (instrument ((a Covalent-PO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Oxygen-3"))) (instrument ((a Covalent-PO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Oxygen-4"))) (instrument ((a Covalent-PO-Bond)))))))
               (a Oxygen-Atom uniquely-called "Oxygen-1")
               (a Oxygen-Atom uniquely-called "Oxygen-2")
               (a Oxygen-Atom uniquely-called "Oxygen-3")
               (a Oxygen-Atom uniquely-called "Oxygen-4"))))
(Monomer has 
                                                                                                                 
    (superclasses (Organic-Molecule))
    (description ("Small molecule that can be linked to others of the same
                        type to form a larger molecule. Alberts:ECB:G-12.")))
(Money has 
    (superclasses (Intangible-Entity))
    (wn20-synset ((:set (:triple "money" 1 "n") (:triple "money" 3 "n")))))

(every Money has 
    (purpose ((a Resource with (in-event ((a Buy with (instrument ((Self)))))))
              (a Resource with (in-event ((a Sell with (instrument ((Self)))))))))
    (worth ((a Worth-Value))))
(Momentum-Value has 
    (range-of (momentum))
    (domain-of (momentum-of))
    (superclasses (Property-Value)))
(Moment-of-Inertia-Value has 
    (range-of (moment-of-inertia))
    (domain-of (moment-of-inertia-of))
    (superclasses (Property-Value)))
(Molecule has 
                                                                                                                                                                                                                                                          
    (superclasses (Compound)))

(every Molecule has 
    (charge ((a Charge-Value with (value ((:pair 0 *electronic-charge))))))
    (has-chemical-formula ((must-be-a Chemical-Formula)))
    (has-basic-structural-unit ((a Atom))))
(Molecular-Compound-Substance has 
                                                                                                                                                                                                                                                                                                                                                                 
    (superclasses (Chemical)))

(every Molecular-Compound-Substance has 
    (has-basic-structural-unit ((a Molecular-Compound))))
(Molecular-Compound has 
                                                                                                                                                                                                                                         
    (superclasses (Compound)))

(every Molecular-Compound has 
    (has-part ((mustnt-be-a Ion)))
    (has-chemical-formula ((if (not (the has-chemical-formula of Self)) then (a Chemical-Formula with (term ((the term of (the nested-atomic-chemical-formula of Self)))))))))
(Molecular-Complex has 
                                                                                              
    (superclasses (Organic-Complex))
    (description ("An assembly of molecules, usually macromolecules, held
                        together by noncovalent bonds and performing a specific
                        function, such as DNA replication or the synthesis of
                        phospholipids.  Alberts:ECB:G-12.")))

(every Molecular-Complex has 
    (has-part ((a Molecule)
               (at-least 2 Molecule))))
(Mo has 
    (superclasses (Metal-Atom
                      VIB-Element)))

(every Mo has 
    (atomic-symbol ((Mo)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 42 ()))))))
    (chemical-period (5)))
(MnO4-Minus has 
    (superclasses (Anion)))

(every MnO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("permanganate"))
    (has-acid-name ("permanganic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mn) (:pair 4 O))))))))
(Mn-Plus-3 has 
    (superclasses (Metal-Cation)))

(every Mn-Plus-3 has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mn)))))))
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mn)))))))
    (charge ((a Charge-Value with (value ((:pair 3 *electronic-charge)))))))
(Mn-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Mn-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("manganese"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mn))))))))
(Mn has 
    (superclasses (Metal-Atom
                      VIIB-Element)))

(every Mn has 
    (atomic-symbol ((Mn)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 25 ()))))))
    (chemical-period (4)))
(MLRS has 
    (superclasses (Artillery)))

(every MLRS has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 4.6 ())))))))
(Mixture has 
    (superclasses (Chemical))
    )

(every Mixture has 
    (has-part ((a Chemical with (has-basic-structural-unit ((a Chemical-Entity))))))
    (text-phrase ((if (has-value (the text-phrase of (the has-basic-structural-unit of (the has-part of Self)))) then (:seq (andify (the text-phrase of (the has-basic-structural-unit of (the has-part of Self)))) Self) else (the text-base-phrase of Self)))))
(Mix has 
    (superclasses (Action)))

(every Mix has 
    (raw-material ((a Chemical)))
    (result ((a Mixture with (volume ((the output of (a Add-Volumes with (input ((the volume of (the raw-material of Self))))))))))))
(Mitosis has 
    (superclasses (Divide))
    (required-slot (object))
    (description ("Division of the nucleus of a eucaryotic cell, involving
                       condensation of the DNA into visible chromosomes.
                       Alberts:ECB:G-12.")))

(every Mitosis has 
    (object ((a Nucleus)))
    (result ((a Nucleus)
             (exactly 2 Nucleus)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Mitochondrion has 
    (superclasses (Organelle
                      Subcellular-Compartment))
    (description ("Membrane-bound organelle, about the size of a
                        bacterium, that carries out oxidative phosphorylation
                        and produces most of the ATP in eucaryotic cells.
                        Alberts:ECB:G-11.")))

(every Mitochondrion has 
    (purpose ((a Container with (in-event ((a Be-Contained with (content ((a Aggregate with (element-type ((Oxido-Reductase))))))))))))
    (length ((a Length-Value with (value ((:pair 1 *millimeter)))))))
(Mission-Accomplishment has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Military-Unit has 

    (superclasses (Aggregate
                      Tangible-Entity))
    (member-of (_Partition7))
    (domain-of (combat-strength
                   default-combat-power
                   enemy-of
                   relative-combat-power
                   remaining-strength
                   supports-military-unit
                   supported-by-military-unit
                   troop-strength))
    (range-of (combat-strength-of
                  default-combat-power-of
                  enemy
                  relative-combat-power-of
                  remaining-strength-of
                  supports-military-unit
                  supported-by-military-unit
                  troop-strength-of)))

(every Military-Unit has 
    (allegiance ((the allegiance of (the element-of of Self))))
    (default-combat-power ((if (has-value (the Military-Equipment possesses of Self)) then (a Default-Combat-Power-Value with (value ((:pair (the max of (the bag of (the1 of (the value of (the default-combat-power of (the Military-Equipment possesses of Self)))))) ())))) else (if (has-value (the element of Self)) then (a Default-Combat-Power-Value with (value ((:pair (the sum of (forall-bag (the bag of (the default-combat-power of (the element of Self))) (the1 of (the value of It)))) ())))) else (a Default-Combat-Power-Value with (value ((:pair 1 ()))))))))
    (relative-combat-power ((if (has-value (the remaining-strength of Self)) then ((a Relative-Combat-Power-Value with (value ((:pair ((the1 of (the value of (the remaining-strength of Self))) * (the1 of (the value of (the default-combat-power of Self)))) ()))))) else ((a Relative-Combat-Power-Value with (value ((:pair ((the1 of (the value of (the default-combat-power of Self)))) ()))))))))
    (text-premodslots ((:seq allegiance))))
(Military-Team has 
    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Military-Task has 
                                                                                                                                                                                                                        
    (superclasses (Action))
    (domain-of (base
                   agent-attrition-rate
                   available-force-ratio
                   enemy-attrition-rate
                   required-force-ratio))
    (range-of (agent-attrition-rate-of
                  available-force-ratio-of
                  enemy-attrition-rate-of
                  required-force-ratio-of)))

(every Military-Task has 
    (agent ((set-constraint ((the number of (the value of (the allegiance of TheValues))) <= 1))))
    (pcs-list ((if ((Self isa Move) and (has-value (the trafficability of (the path of Self)))) then (forall (the object of Self) (forall2 (the value of (the trafficability of (the path of Self))) where (It isa (the2 of It2)) (:triple (the1 of It2) /= *SR))) [Military-Task-pcs-1])))
    (soft-pcs-list ((if ((Self isa Move) and (has-value (the trafficability of (the path of Self)))) then (forall (the object of Self) (forall2 (the value of (the trafficability of (the path of Self))) where (It isa (the2 of It2)) (:triple (the1 of It2) = *UR))))))
    (text-argslots ((:seq base path site)))
    (text-base ("with respect to"))
    (text-path ("along"))
    (text-site ("at")))
(Military-Group has 
    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Military-Equipment has 
                                                                                                                                               
    (superclasses (Tangible-Entity))
    (domain-of (default-combat-power))
    (range-of (default-combat-power-of)))

(every Military-Equipment has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0 ())))))))
(Military-Company has 

    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Microtubule has 
    (superclasses (Protein-Filament))
    (description ("Long, stiff, cylindrical intracellular structure, 20
                       nanometers in diameter, composed of the protein tubulin;
                       one of the major components of the cytoskeleton, used
                       by eucaryotic cells to regulate their shape and control
                       their movements. Alberts:ECB:G-11.")))

(every Microtubule has 
    (width ((a Length-Value with (value ((:pair 20 *nanometer))))))
    (element-type ((Tubulin-Molecule))))
(MgSO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every MgSO4-Substance has 
    (has-basic-structural-unit ((a MgSO4))))
(MgSO4 has 
    (superclasses (Ionic-Compound)))

(every MgSO4 has 
    (has-part ((a Mg-Plus-2)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mg-Plus-2) (:pair 1 SO4-Minus-2))))))))
(Mg-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Mg-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("magnesium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mg))))))))
(Mg has 
    (superclasses (Metal-Atom
                      IIA-Element)))

(every Mg has 
    (atomic-symbol ((Mg)))
    (chemical-period (3)))
(Methyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Hydrophobic chemical group derived from methane.
                             Alberts:ECB:G-11.")))

(every Methyl-Group has 
    (has-part ((a Carbon-Atom with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "Hydrogen-3")
               (exactly 3 Hydrogen-Atom))))
(Method has 

    (superclasses (KM-Class)))
(Methionine has 
    (superclasses (Nonpolar-Amino-Acid
                      Essential-Amino-Acid))
    (description ("A nonpolar amino acid with a methyl-thio-ethyl side
                        chain.  Souther")))

(every Methionine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Ethyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-1")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Ethyl-Group with (object-of ((a Be-Attached-To with (object ((the Sulfur-Atom has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CS-Bond))) (site (((the Carbon-Atom has-part of (the Ethyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-2"))))))) (a Sulfur-Atom with (object-of ((a Be-Attached-To with (object ((the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CS-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))))))))) (a Methyl-Group)))))))
(Methanol-Group has 
    (superclasses (Chemical-Group))
    (description ("Alcohol derived from methane. Souther.")))

(every Methanol-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To uniquely-called "C1-H1" with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C1-H2" with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C1-H3" with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C1-OH1" with (object ((the Hydroxyl-Group has-part of Self))) (instrument ((a Covalent-CO-Bond))) (site ((the Oxygen-Atom has-part of (the Hydroxyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-3")
               (a Hydroxyl-Group)
               (exactly 3 Hydrogen-Atom))))
(Metathesis-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((make-phrase (the output of (a Format-Equation with (input ((the chemical-equation of (a Reaction with (raw-material ((the base of (a Aqueous-Solution with (base ((a KI-Substance))))) (the base of (a Aqueous-Solution with (base ((a Pb_NO3_2-Substance)))))))))))))) = "2KI + Pb(NO3)2 --> 2KNO3 + PbI2")))))

(every Metathesis-Reaction has 
    (raw-material ((exactly 2 Ionic-Compound-Substance)))
    (result ((a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((an instance of (the instance-of of (the Cation has-part of (the has-basic-structural-unit of (the first of (the raw-material of Self)))))) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the second of (the raw-material of Self))))))))))))
             (a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((an instance of (the instance-of of (the Cation has-part of (the has-basic-structural-unit of (the second of (the raw-material of Self)))))) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the first of (the raw-material of Self))))))))))) [Metathesis-Reaction-result-1]))))

(every Metathesis-Reaction has-definition 
    (instance-of (Reaction
                     [Metathesis-Reaction-instance-of-1]))
    (raw-material ((a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))))
                   (a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution)))))))
(Metalloid has 
                                                                                                                              
    (superclasses (Atom)))
(Metal-Salt-Displacement-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a Chemical with (has-basic-structural-unit ((a Ba)))) (a NaI-Substance))))) where (((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Ba-Plus-2) (:pair 2 I-Minus))) or ((the has-basic-structural-unit of It) isa Na)))) = 2)))))

(every Metal-Salt-Displacement-Reaction has 
    (result ((if ((the output of (a Compute-Activity-Series with (input ((the Metal-Atom has-basic-structural-unit of (the raw-material of Self)) (the Cation has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))))))) = "yes") then (:set (a Chemical with (has-basic-structural-unit ((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the Cation has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))))))) where ((oneof2 (the superclasses of It) where (It2 = Metal-Atom)) or (It = Metal-Atom)) (an instance of It))))) (a Salt-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((forall (the all-subclasses of Cation) where ((the2 of (the elements of (the term of (the has-chemical-formula of (an instance of It))))) = (allof2 (the instance-of of (the Atom has-basic-structural-unit of (the raw-material of Self))) where (It2 /= Metal-Atom))) (an instance of It)) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))))))))))) [Metal-Salt-Displacement-Reaction-result-1])))))

(every Metal-Salt-Displacement-Reaction has-definition 
    (instance-of (Reaction
                     [Metal-Salt-Displacement-Reaction-instance-of-1]))
    (raw-material ((a Chemical with (has-basic-structural-unit ((a Metal-Atom))))
                   (a Salt-Substance))))
(Metal-Nonmetal-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the result of (a Reaction with (raw-material ((a Chemical with (has-basic-structural-unit ((a Ca)))) (a O2-Substance))))))))) = (:set (:pair 1 Ca-Plus-2) (:pair 1 O-Minus-2)))))))

(every Metal-Nonmetal-Reaction has 
    (name ("metal-nonmetal reaction"))
    (result ((exactly 1 Chemical)
             (if ((not ((the instance-of of (the has-basic-structural-unit of (the raw-material of Self))) includes Metal-Atom)) and (not ((the instance-of of (the has-basic-structural-unit of (the raw-material of Self))) includes Molecular-Compound))) then (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((the first of (forall (the all-subclasses of Cation) where ((the2 of (the elements of (the term of (the has-chemical-formula of (an instance of It))))) = (allof2 (the instance-of of (the Atom has-basic-structural-unit of (the raw-material of Self))) where (It2 /= Metal-Atom))) (an instance of It))) (the first of (forall (the all-subclasses of Anion) where (((the1 of (the elements of (the term of (the has-chemical-formula of (an instance of It))))) = 1) and ((the2 of (the elements of (the term of (the has-chemical-formula of (an instance of It))))) = (the2 of (the elements of (the term of (the has-chemical-formula of (the Molecular-Compound has-basic-structural-unit of (the raw-material of Self)))))))) (an instance of It)))))))) [Metal-Nonmetal-Reaction-result-1])))))

(every Metal-Nonmetal-Reaction has-definition 
    (instance-of (Reaction
                     [Metal-Nonmetal-Reaction-instance-of-1]))
    (raw-material ((a Chemical with (has-basic-structural-unit ((a Metal-Atom))))
                   (a Chemical with (has-basic-structural-unit ((a Molecular-Compound)))))))
(Metal-Hydride-Water-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca-Plus-2) (:pair 1 H-Minus))))))))))) (a H2O-Substance))))) where ((It isa H2-Substance) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Ca-Plus-2) (:pair 2 OH-Minus)))))) = 2)))))

(every Metal-Hydride-Water-Reaction has 
    (result ((if ((the output of (a Compute-Activity-Series with (input ((the Cation has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))) (the Anion has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))))))) = "yes") then (:set (a H2-Substance with (physical-state ((a State-Value with (value ((*gas))))))) (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((the Cation has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))) (a OH-Minus)))))))) [Metal-Hydride-Water-Reaction-result-1]))))

(every Metal-Hydride-Water-Reaction has-definition 
    (instance-of (Reaction
                     [Metal-Hydride-Water-Reaction-instance-of-1]))
    (raw-material ((a H2O-Substance)
                   (a Salt-Substance with (has-basic-structural-unit ((a Salt with (has-part ((a H-Minus) (a Cation))))))))))
(Metal-Cation has 

    (superclasses (Cation)))
(Metal-Carbonate-Decomposition-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a CaCO3-Substance with (object-of ((a Heat)))))))) where ((It isa CO2-Substance) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Ca-Plus-2) (:pair 1 O-Minus-2)))))) = 2)))))

(every Metal-Carbonate-Decomposition-Reaction has 
    (result ((a CO2-Substance)
             (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((the Cation has-part of (the has-basic-structural-unit of (the Salt-Substance raw-material of Self))) (a O-Minus-2)))))) [Metal-Carbonate-Decomposition-Reaction-result-1]))))

(every Metal-Carbonate-Decomposition-Reaction has-definition 
    (instance-of (Reaction
                     [Metal-Carbonate-Decomposition-Reaction-instance-of-1]))
    (raw-material ((a Salt-Substance with (object-of ((a Heat))) (has-basic-structural-unit ((a Salt with (has-part ((a CO3-Minus-2))))))))))
(Metal-Atom has 

    (superclasses (Atom)))
(Metal-Acid-Displacement-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a Chemical with (has-basic-structural-unit ((a Ca)))) (a HCl-Substance))))) where ((It isa H2-Substance) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Ca-Plus-2) (:pair 2 Cl-Minus)))))) = 2)))))

(every Metal-Acid-Displacement-Reaction has 
    (result ((if ((the output of (a Compute-Activity-Series with (input ((the Metal-Atom has-basic-structural-unit of (the raw-material of Self)) (a H-Plus))))) = "yes") then (:set (a H2-Substance with (physical-state ((a State-Value with (value ((*gas))))))) (a Salt-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((forall (the all-subclasses of Cation) where ((the2 of (the elements of (the term of (the has-chemical-formula of (an instance of It))))) = (allof2 (the instance-of of (the Atom has-basic-structural-unit of (the raw-material of Self))) where (It2 /= Metal-Atom))) (an instance of It)) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the Acid raw-material of Self)))))))))))) [Metal-Acid-Displacement-Reaction-result-1]))))

(every Metal-Acid-Displacement-Reaction has-definition 
    (instance-of (Reaction
                     [Metal-Acid-Displacement-Reaction-instance-of-1]))
    (raw-material ((a Chemical with (has-basic-structural-unit ((a Metal-Atom))))
                   (a Acid))))
(Metal has 
    (superclasses (Chemical))
    (wn20-synset ((:set (:triple "metal" 1 "n") (:triple "metallic_element" 1 "n") (:triple "metal" 2 "n") (:triple "alloy" 1 "n")))))

(every Metal has 
    (text-has-part ("made of"))
    (text-result-of ("product of"))
    (text-raw-material-of ("reactant in"))
    (text-premodslots ((:seq)))
    (text-postmodslots ((:seq has-part result-of raw-material-of)))
    (text-gen ((make-phrase (the text-phrase of Self))))
    (text-description ((the text-gen of Self)))
    (text-def-head ((the text-head of Self)))
    (text-head ((the text-head of (the has-basic-structural-unit of Self))))
    (text-base-phrase ((the text-base-phrase of (the has-basic-structural-unit of Self))))
    (text-phrase ((if (has-value (the text-phrase of (the has-basic-structural-unit of Self))) then (the text-phrase of (the has-basic-structural-unit of Self)) else (the text-base-phrase of Self)))))

(every Metal has-definition 
    (instance-of (Chemical))
    (has-basic-structural-unit ((a Metal-Atom))))
(Metabolize has 
    (superclasses (Catabolize))
    (required-slot (result
                       substrate))
    (primary-slot (agent
                      instrument))
    (description ("The sum of processes by which a particular 
                           substance is handled by the body. 
                           Webster's Ninth Collegiate Dictionary - under
                           Metabolism."))
    (wn16-synset ((:set (:triple "metabolize" 2 "v"))))
    (wn20-synset ((:set (:triple "metabolize" 2 "v")))))

(every Metabolize has 
    (agent ((a Living-Entity)))
    (substrate ((a Chemical-Entity)
                (at-least 1 Chemical-Entity)))
    (result ((a Chemical-Entity)
             (at-least 1 Chemical-Entity)))
    (instrument ((a Enzyme))))
(Message-Field has 
    (range-of (identifier))
    (domain-of (identifier-of))
    (superclasses (Message))
    (description ("a message whose content is a single constant"))
    )
(Message has 
    (domain-of (information-language))
    (range-of (information-language-of))
                                                                                                                                     
    (superclasses (Conceptual-Entity))
    (description ("an encoding of information in a language"))
    (wn16-synset ((:set (:triple "message" 1 "n"))))
    (wn20-synset ((:set (:triple "message" 1 "n")))))

(every Message has 
    (information-content ((a Thing)))
    (information-language ((a Language))))
(Membrane has 
                                    
    (superclasses (Organic-Structure))
    (description ("A thin, soft, pliable sheet or layer.  Webster's 9th
                         NCD:741.")))
(Medium has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "medium" 1 "n") (:triple "medium" 3 "n") (:triple "means" 1 "n") (:triple "communication" 1 "n") (:triple "communicating" 1 "n"))))
    (wn20-synset ((:set (:triple "medium" 1 "n") (:triple "medium" 3 "n") (:triple "means" 1 "n") (:triple "communication" 1 "n") (:triple "communicating" 1 "n")))))

(every Medium has 
    (in-event ((a Action)))
    (played-by ((a Tangible-Entity with (base-of ((the in-event of Self)))))))
(Mechanized-Infantry-Unit has 
                                                                                                                                                                                                                                                                                                                                                         
    (superclasses (Infantry-Unit)))
(Mechanized-Infantry-Squad has 
    (superclasses (Mechanized-Infantry-Unit
                      Squad)))

(every Mechanized-Infantry-Squad has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Squad)))
(Mechanized-Infantry-Regiment has 
    (superclasses (Mechanized-Infantry-Unit
                      Regiment)))

(every Mechanized-Infantry-Regiment has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Regiment)))
(Mechanized-Infantry-Platoon has 
    (superclasses (Mechanized-Infantry-Unit
                      Platoon)))

(every Mechanized-Infantry-Platoon has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Platoon)))
(Mechanized-Infantry-Division has 
    (superclasses (Mechanized-Infantry-Unit
                      Division)))

(every Mechanized-Infantry-Division has 
    (element ((if ((the value of (the allegiance of Self)) = *Blue) then (:set (a Mechanized-Infantry-Brigade) (a Mechanized-Infantry-Brigade) (a Mechanized-Infantry-Brigade) (a Armored-Brigade) (a General-Support-Artillery-Battalion)) else (if ((the value of (the allegiance of Self)) = *Red) then (:set (a Mechanized-Infantry-Brigade) (a Mechanized-Infantry-Brigade) (a Armored-Brigade) (a Armored-Brigade) (a Artillery-Brigade)))))))

(every Mechanized-Infantry-Division has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Division)))
(Mechanized-Infantry-Corps has 
    (superclasses (Mechanized-Infantry-Unit
                      Corps)))

(every Mechanized-Infantry-Corps has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Corps)))
(Mechanized-Infantry-Company has 
    (superclasses (Mechanized-Infantry-Unit
                      Military-Company)))

(every Mechanized-Infantry-Company has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Military-Company)))
(Mechanized-Infantry-Brigade has 
    (superclasses (Mechanized-Infantry-Unit
                      Brigade)))

(every Mechanized-Infantry-Brigade has 
    (element ((a Mechanized-Infantry-Battalion)
              (a Mechanized-Infantry-Battalion)
              (a Direct-Support-Artillery-Battalion)
              (a Armored-Battalion))))

(every Mechanized-Infantry-Brigade has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Brigade)))
(Mechanized-Infantry-Battalion has 
    (superclasses (Mechanized-Infantry-Unit
                      Battalion)))

(every Mechanized-Infantry-Battalion has 
    (possesses ((if ((the value of (the allegiance of Self)) = *Blue) then (a M2) else (if ((the value of (the allegiance of Self)) = *Red) then (if (has-value (the element-of of Self)) then (if ((the element-of of Self) isa Mechanized-Infantry-Brigade) then (a BMP-2) else (a BTR-60)) else (a BTR-60)))))))

(every Mechanized-Infantry-Battalion has-definition 
    (instance-of (Mechanized-Infantry-Unit
                     Battalion)))
(Meal has 
                                                                                                                 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "meal" 2 "n")))))

(every Meal has 
    (subevent ((a Eat)))
    (text-nominalization ("meal")))
(Match-Result-Viewpoint has 
    (superclasses (Viewpoint)))

(every Match-Result-Viewpoint has 
    (viewpoint-question ((make-phrase (:seq "What are the" (if ((the1 of (the2 of (the1 of (the viewpoint-query of Self)))) isa Be-Similar) then "similarities" else "differences") "between" (the text-indef-head of (the1 of (the viewpoint-target of Self))) "and" (the text-indef-head of (the viewpoint-source of Self)) "nospace" "?"))))
    (viewpoint-answer ((make-phrase (:seq "
<li><b>" (the instance-of of (the1 of (the viewpoint-target of Self))) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the text-definition-sentence of (the1 of (the viewpoint-target of Self))))) "</li>
<li><b>" (the instance-of of (the viewpoint-source of Self)) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of (the viewpoint-source of Self))) or (the description of (the instance-of of (the viewpoint-source of Self))) or (the text-definition-sentence of (the viewpoint-source of Self)))) "</li>
"))))
    (viewpoint-detail ((if ((the1 of (the2 of (the1 of (the viewpoint-query of Self)))) isa Be-Similar) then (make-phrase ((?i1 == (the1 of (the viewpoint-target of Self))) and (?i2 == (the viewpoint-source of Self)) and (?c1 == (the classes of ?i1)) and (?c2 == (the classes of ?i2)) and (?sc1 == ((?c1) && ((the all-superclasses of ?c1)))) and (?sc2 == ((?c2) && ((the all-superclasses of ?c2)))) and (?usc == ((?sc1) && (?sc2))) and (?isc == (allof ?c in ?usc where ((?sc1 includes ?c) and (?sc2 includes ?c)))) and (?msca == (oneof ?sc in ?isc where (not (oneof ?scsub in ?isc where ((?scsub /= ?sc) and (?sc subsumes ?scsub)))))) and (?commpart == (allof ?vc in (the viewpoint-correspondence of Self) where ((not ((the1 of ?vc) = ?i2)) and ((make-phrase (the text-indef-head of (the1 of ?vc))) = (make-phrase (the text-indef-head of (the2 of ?vc))))))) and (:seq "The concepts" ?i1 "and" ?i2 "have the following in common:
<ul>
" (if (has-value ?msca) then (if ((?c1 includes ?msca) and (not (?c2 includes ?msca))) then (:seq "<li>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "is a specific kind of" (the text-head of ?i1))) "</li>
") else (if ((?c2 includes ?msca) and (not (?c1 includes ?msca))) then (:seq "<li>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "is a specific kind of" (the text-head of ?i2))) "</li>
") else (:seq "<li>They are both a kind of" ?msca "nospace" "." "</li>
")))) (if (has-value ?commpart) then (:seq "<li>They both involve" (andify (the text-indef-phrase of (the1 of ?commpart))) "nospace" "." "</li>
")) "<ul>
" (forall ?vp-pair in ?commpart ((?desc1 == (the text-description of (the1 of ?vp-pair))) and (?desc2 == (the text-description of (the2 of ?vp-pair))) and (?sent1 == (the text-sentence of (the1 of ?vp-pair))) and (?sent2 == (the text-sentence of (the2 of ?vp-pair))) and (?exst1 == (the text-existential-there of (the1 of ?vp-pair))) and (?exst2 == (the text-existential-there of (the2 of ?vp-pair))) and (?text1 == (if ((the1 of ?vp-pair) isa Event) then (if (not (?desc1 = ?exst1)) then ?desc1) else (if (not (?sent1 = ?exst1)) then ?sent1))) and (?text2 == (if ((the2 of ?vp-pair) isa Event) then (if (not (?desc2 = ?exst2)) then ?desc2) else (if (not (?sent2 = ?exst2)) then ?sent2))) and (:seq (if (has-value ?text1) then (:seq "<li>" ?text1 "</li>
")) (if ((has-value ?text2) and (?text2 /= ?text1)) then (:seq "<li>" ?text2 "</li>
"))))) "</ul>
</ul>
"))) else (if ((the1 of (the2 of (the1 of (the viewpoint-query of Self)))) isa Be-Different) then (make-phrase ((?i1 == (the1 of (the viewpoint-target of Self))) and (?i2 == (the viewpoint-source of Self)) and (?c1 == (the classes of ?i1)) and (?c2 == (the classes of ?i2)) and (?sc1 == ((?c1) && ((the all-superclasses of ?c1)))) and (?sc2 == ((?c2) && ((the all-superclasses of ?c2)))) and (?usc == ((?sc1) && (?sc2))) and (?isc == (allof ?c in ?usc where ((?sc1 includes ?c) and (?sc2 includes ?c)))) and (?msca == (oneof ?sc in ?isc where (not (oneof ?scsub in ?isc where ((?scsub /= ?sc) and (?sc subsumes ?scsub)))))) and (?diffc1 == (oneof ?sc in ?sc1 where (((the superclasses of ?sc) includes ?msca) and (not (?c1 includes ?sc)) and (not (?sc2 includes ?sc)) and (not (?c2 includes ?msca))))) and (?diffc2 == (oneof ?sc in ?sc2 where (((the superclasses of ?sc) includes ?msca) and (not (?c2 includes ?sc)) and (not (?sc1 includes ?sc)) and (not (?c1 includes ?msca))))) and (?relconc1 == (if (not ((?c1 includes ?msca) and (not (?c2 includes ?msca)))) then (forall ?trip in (the viewpoint-model-graph of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?i1) and (not ((the2 of (the viewpoint-correspondence of Self)) includes (the1 of ?trip)))) (the1 of ?trip)))) and (?concsl1 == (if (not ((?c1 includes ?msca) and (not (?c2 includes ?msca)))) then (forall ?trip in (the viewpoint-model-graph of Self) where ((the2 of ?trip) /= instance-of) (:pair (the1 of ?trip) (the2 of ?trip))))) and (?relconc2 == (if (not ((?c2 includes ?msca) and (not (?c1 includes ?msca)))) then (forall ?trip in (the viewpoint-scenario of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?i2) and (not ((the1 of (the viewpoint-correspondence of Self)) includes (the1 of ?trip)))) (the1 of ?trip)))) and (?concsl2 == (if (not ((?c2 includes ?msca) and (not (?c1 includes ?msca)))) then (forall ?trip in (the viewpoint-scenario of Self) where ((the2 of ?trip) /= instance-of) (:pair (the1 of ?trip) (the2 of ?trip))))) and (:seq "The concepts" ?i1 "and" ?i2 "differ in the following ways:
<ul>" (if (has-value ?msca) then (if ((?c1 includes ?msca) and (not (?c2 includes ?msca))) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "</i></b>" "is a specific kind of" "<b><i>" (the text-head of ?i1) "</i></b>")) "</li>
") else (if ((?c2 includes ?msca) and (not (?c1 includes ?msca))) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "is a specific kind of" "<b><i>" (the text-head of ?i2) "</i></b>")) "</li>
")))) (if ((has-value ?diffc1) and (has-value ?diffc2)) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "is a kind of" ?diffc1 "whereas" "<b><i>" (the text-indef-head of ?i2) "</i></b>" "is a kind of" ?diffc2)) "</li>
") else (if (has-value ?diffc1) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "is a kind of" ?diffc1 "nospace" ", which is a different kind of" (?msca or "thing") "than <b><i>" (the text-indef-head of ?i2) "</i></b>")) "</li>
") else (if (has-value ?diffc2) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "</i></b>" "is a kind of" ?diffc2 "nospace" ", which is a different kind of" (?msca or "thing") "than <b><i>" (the text-indef-head of ?i1) "</i></b>")) "</li>
")))) (if (has-value ?relconc1) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i1) "</i></b>" "involves" (andify (the text-indef-phrase of ?relconc1)))) "</li>
")) "<ul>
" (forall ?cs in ?concsl1 (:seq "<li>" "nospace" (make-sentence (if ((the2 of ?cs) isa Property) then (the text-description of (the (the2 of ?cs) of (the1 of ?cs))) else (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the viewpoint-model-graph of Self) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (the3 of ?trip))))))) "</li>
")) "</ul>
" (if (has-value ?relconc2) then (:seq "<li><b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?i2) "</i></b>" "involves" (andify (the text-indef-phrase of ?relconc2)))) "</li>
")) "<ul>
" (forall ?cs in ?concsl2 (:seq "<li>" "nospace" (make-sentence (if ((the2 of ?cs) isa Property) then (the text-description of (the (the2 of ?cs) of (the1 of ?cs))) else (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the viewpoint-scenario of Self) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (the3 of ?trip))))))) "</li>
")) "</ul>
</ul>
"))))))))
(Mass-Value has 
    (range-of (mass))
    (domain-of (mass-of))
    (superclasses (Property-Value))
    (test-case ('((Stick has (superclasses (Physical-Object))) (Tree has (superclasses (Physical-Object))) (*mybigstick has (instance-of (Stick)) (mass ((a Mass-Value)))) (*myshortstick has (instance-of (Stick)) (mass ((a Mass-Value with (value ((:pair 43 *gram) (:pair *hefty Stick) (:pair *light Tree))) (less-than ((the mass of *mybigstick))))))) (the value of (the mass of *myshortstick)) ((the less-than of (the mass of *myshortstick)) includes (the mass of *mybigstick)) ((the greater-than of (the mass of *mybigstick)) includes (the mass of *myshortstick))))))
(Mass-Scale has 
                                  
    (scale-class-of (mass))
    (superclasses (Scale)))
(Mass-Constant has 
    (element-type-of (*light-hefty-scale))
    (scalar-constant-class-of (mass))
    (superclasses (Constant))
    )
(Mark has 
    (description ("The act of embodying a message in the form of a
printed ink, a physical mark or sketch, etc.  This includes any action
in which an object playing the role of writing implement (pen, pencil,
printer, magic marker, spray paint can, finger dipped in paint, etc)
writes, sketches, scribbles or sprays some kind of physical mark, set
of markings, or written text."))
    (superclasses (Embody
                      Produce))
    (wn20-synset ((:set (:triple "write" 7 "v"))))
    )

(every Mark has 
    (result ((a Physical-Mark)))
    (instrument ((must-be-a Tangible-Entity)))
    (text-active-verbseq-sg ("marks"))
    (text-active-verbseq-pl ("mark"))
    (text-passive-verbseq-sg ("gets marked"))
    (text-passive-verbseq-pl ("get marked"))
    (text-raw-material ((if (has-value (the raw-material of Self)) then ("in"))))
    (text-argslots ((:seq raw-material)))
    (text-nominalization ("marking")))
(Marines has 
    (superclasses (Military-Unit)))
(Manner-Value has 
    (range-of (manner))
    (domain-of (manner-of))
    (superclasses (Property-Value)))
(Manner-Constant has 
    (categorical-constant-class-of (manner))
    (superclasses (Constant))
    )
(Maneuver-Effectiveness has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Make-Request has 
    (superclasses (Communicate))
    (test-case ('((*Ed has (instance-of (Tangible-Entity))) (*Lucretia has (instance-of (Tangible-Entity))) (*Beer has (instance-of (Tangible-Entity))) (*Get-Me-A-Beer has (instance-of (Request)) (information-content ((a Deliver with (agent (*Lucretia)) (object (*Beer)) (recipient (*Ed)))))) (*Make-Request has (instance-of (Make-Request)) (agent (*Ed)) (recipient (*Lucretia)) (object (*Get-Me-A-Beer))) (do-and-next *Make-Request) (the text-gen of *Make-Request) ((the value of (the manner of *Make-Request)) = *politely) ((the experiencer of (thelast Be-Known)) = *Ed))))
    (wn16-synset ((:set (:triple "request" 1 "v") (:triple "request" 2 "v") (:triple "request" 3 "v") (:triple "bespeak" 2 "v") (:triple "call_for" 1 "v") (:triple "quest" 5 "v"))))
    (wn20-synset ((:set (:triple "request" 1 "v") (:triple "request" 2 "v") (:triple "request" 3 "v") (:triple "bespeak" 2 "v") (:triple "call_for" 1 "v") (:triple "quest" 5 "v")))))

(every Make-Request has 
    (object ((a Request)))
    (manner ((a Manner-Value with (value ((*politely))))))
    (text-nominalization ("making")))

(every Make-Request has-definition 
    (instance-of (Communicate))
    (object ((a Request)))
    (manner ((a Manner-Value with (value ((*politely)))))))
(Make-Inaccessible has 
    (defeated-by-class-of (Be-Accessible))
    (caused-by-class-of (Be-Inaccessible))
                                                                                               
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      base))
    (cmap-correspondence ((:seq object "the object made inaccessible")
                          (:seq base "the thing the object is made inaccessible to")
                          (:seq agent "the agent"))))

(every Make-Inaccessible has 
    (object ((a Entity)))
    (base ((must-be-a Thing)))
    (agent ((must-be-a Entity)))
    (resulting-state ((a Be-Inaccessible)))
    (add-list ((if (has-value (the base of Self)) then (:triple (the resulting-state of Self) base (the base of Self) [Make-Inaccessible-add-1]))
               (:triple (the resulting-state of Self) object (the object of Self) [Make-Inaccessible-add-2])
               (if (has-value (the agent of Self)) then (:triple (the resulting-state of Self) agent (the agent of Self) [Make-Inaccessible-add-3]))))
    (text-active-verbseq-sg ("makes"))
    (text-active-verbseq-pl ("make"))
    (text-passive-verbseq-sg ("gets made"))
    (text-passive-verbseq-pl ("get made"))
    (text-argslots ((:seq text-particle base instrument path result)))
    (text-particle ("inaccessible"))
    (preparatory-event ((:default (a Make-Accessible with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("making")))
(Make-Contact has 
    (caused-by-class-of (Be-Touching))
                        
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the things that Make-Contact")
                          (:seq agent "the Contact-Maker")
                          (:seq base "the place Made-Contact to")))
    (test-case ('((new-situation) (*mylips has (instance-of (Tangible-Entity))) (*yourlips has (instance-of (Tangible-Entity))) (not ((the abuts of *mylips) includes *yourlips)) (a Make-Contact with (object (*mylips)) (base (*yourlips))) (do-and-next (thelast Make-Contact)) (the text-gen of (thelast Make-Contact)) (forall (the resulting-state of (thelast Make-Contact)) (the text-gen of It)) (oneof (the Be-Touching object-of of *mylips) where ((the object of It) includes *yourlips)) ((the abuts of *mylips) includes *yourlips) (a Break-Contact with (object (*yourlips)) (base (*mylips))) (do-and-next (thelast Break-Contact)) (the text-gen of (thelast Break-Contact)) (not ((the abuts of *mylips) includes *yourlips)) (not (has-value (the Be-Touching object-of of *mylips))))))
    (wn16-synset ((:set (:triple "touch" 1 "v"))))
    (wn20-synset ((:set (:triple "touch" 1 "v")))))

(every Make-Contact has 
    (object ((exactly 1 Tangible-Entity)
             (a Tangible-Entity)))
    (base ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
    (resulting-state ((a Be-Touching)))
    (soft-pcs-list ((if (not ((the location of (the base of Self)) = (the location of (the object of Self)))) then (:triple (the object of Self) object-of (a Move with (destination ((the base of Self))))))))
    (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Touching with (object ((the base of Self)))) [Make-Contact-pcs-1])
               (:triple (the base of Self) object-of (mustnt-be-a Be-Touching with (object ((the object of Self)))) [Make-Contact-pcs-2])))
    (add-list ((:set (:triple (the resulting-state of Self) object (the object of Self) [Make-Contact-add-1]) (:triple (the resulting-state of Self) object (the base of Self) [Make-Contact-add-2]) (:triple (the base of Self) abuts (the object of Self) [Make-Contact-add-3]) (:triple (the object of Self) abuts (the base of Self) [Make-Contact-add-4]))))
    (text-active-verbseq-sg ("makes contact between"))
    (text-active-verbseq-pl ("make contact between"))
    (text-passive-verbseq-sg ("makes contact"))
    (text-passive-verbseq-pl ("make contact"))
    (text-base ((if (has-value (the base of Self)) then ("with"))))
    (preparatory-event ((:default (a Break-Contact with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("making")))
(Make-Accessible has 
                                                                                                
    (caused-by-class-of (Be-Accessible))
    (defeated-by-class-of (Be-Inaccessible))
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      base))
    (cmap-correspondence ((:seq object "the thing made accessible")
                          (:seq agent "the entity that makes the object Accessable")
                          (:seq base "what the object is made accessible to")))
    (test-case ('((*Document has (instance-of (Physical-Object))) (a Make-Inaccessible with (object (*Document))) (try-do-and-next (thelast Make-Inaccessible)) (the text-gen of (thelast Make-Inaccessible)) (has-value (the Be-Inaccessible object-of of *Document)) (a Make-Accessible with (object (*Document))) (try-do-and-next (thelast Make-Accessible)) (the text-gen of (thelast Make-Accessible)) (not (has-value (the Be-Inaccessible object-of of *Document)))))))

(every Make-Accessible has 
    (object ((a Entity)))
    (agent ((must-be-a Entity)))
    (base ((must-be-a Thing)))
    (soft-pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Inaccessible)))))
    (defeats ((if (has-value (the base of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Inaccessible) and ((the base of It) = (the base of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Inaccessible)))))
    (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Make-Accessible-del-1]))))
    (text-active-verbseq-sg ("makes"))
    (text-active-verbseq-pl ("make"))
    (text-passive-verbseq-sg ("gets made"))
    (text-passive-verbseq-pl ("get made"))
    (text-argslots ((:seq text-particle base instrument path result)))
    (text-particle ("accessible"))
    (preparatory-event ((:default (a Make-Inaccessible with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("making")))
(Maintenance has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "care" 6 "n") (:triple "upkeep" 1 "n") (:triple "repair" 1 "n"))))
    )

(every Maintenance has 
    (text-nominalization ("maintenance")))
(Main-Command-Post-Unit has 
                                                                                                                                                                                                                                                                                                                                         
    (superclasses (Military-Unit)))
(Main-Command-Post-Squad has 
    (superclasses (Main-Command-Post-Unit
                      Squad)))

(every Main-Command-Post-Squad has-definition 
    (instance-of (Main-Command-Post-Unit
                     Squad)))
(Main-Command-Post-Regiment has 
    (superclasses (Main-Command-Post-Unit
                      Regiment)))

(every Main-Command-Post-Regiment has-definition 
    (instance-of (Main-Command-Post-Unit
                     Regiment)))
(Main-Command-Post-Platoon has 
    (superclasses (Main-Command-Post-Unit
                      Platoon)))

(every Main-Command-Post-Platoon has-definition 
    (instance-of (Main-Command-Post-Unit
                     Platoon)))
(Main-Command-Post-Division has 
    (superclasses (Main-Command-Post-Unit
                      Division)))

(every Main-Command-Post-Division has-definition 
    (instance-of (Main-Command-Post-Unit
                     Division)))
(Main-Command-Post-Corps has 
    (superclasses (Main-Command-Post-Unit
                      Corps)))

(every Main-Command-Post-Corps has-definition 
    (instance-of (Main-Command-Post-Unit
                     Corps)))
(Main-Command-Post-Company has 
    (superclasses (Main-Command-Post-Unit
                      Military-Company)))

(every Main-Command-Post-Company has-definition 
    (instance-of (Main-Command-Post-Unit
                     Military-Company)))
(Main-Command-Post-Brigade has 
    (superclasses (Main-Command-Post-Unit
                      Brigade)))

(every Main-Command-Post-Brigade has-definition 
    (instance-of (Main-Command-Post-Unit
                     Brigade)))
(Main-Command-Post-Battalion has 
    (superclasses (Main-Command-Post-Unit
                      Battalion)))

(every Main-Command-Post-Battalion has-definition 
    (instance-of (Main-Command-Post-Unit
                     Battalion)))
(Main-Attack-Task has 
    (superclasses (Military-Task)))
(Macromolecule has 
    (superclasses (Polymer))
    (description ("Polymer molecule, such as a protein, nucleic 
                              acid, or polysaccharide, with a molecular mass
                              greater than a few thousand daltons. 
                              Alberts:ECB:G-11"))
    )

(every Macromolecule has 
    (element-type ((Monomer))))
(M60A3 has 
    (superclasses (Tank)))

(every M60A3 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.89 ())))))))
(M3 has 
    (superclasses (Cavalry-Fighting-Vehicle)))

(every M3 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 1 ())))))))
(M2 has 
    (superclasses (Infantry-Fighting-Vehicle)))

(every M2 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 1 ())))))))
(M1A2 has 
    (superclasses (Tank)))

(every M1A2 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 1.21 ())))))))
(M1A1 has 
    (superclasses (Tank)))

(every M1A1 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 1.16 ())))))))
(M113 has 
    (superclasses (Armored-Personnel-Carrier)))

(every M113 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.41 ())))))))
(M1 has 
    (superclasses (Tank)))

(every M1 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 1 ())))))))
(Lysosome has 
    (superclasses (Organelle
                      Subcellular-Compartment))
    (description ("Intracellular membrane-bound organelle containing
                        digestive enzymes.  The interior of a lysosome is
                        strongly acidic, and its enzymes are active at an acid
                        pH. Alberts:ECB:G-11.")))

(every Lysosome has 
    (purpose ((a Container with (in-event ((a Be-Confined with (object ((a Aggregate with (element-type ((Catabolic-Enzyme))))))))))))
    (has-part ((a Aggregate with (element-type ((Protease))))
               (a Aggregate with (element-type ((Nuclease))))
               (a Aggregate with (element-type ((Phosphatase))))
               (a Aggregate with (element-type ((Lipase)))))))
(Lysine has 
    (superclasses (Basic-Amino-Acid
                      Essential-Amino-Acid))
    (description ("A basic amino acid with a butylamine side chain.
                        Souther")))

(every Lysine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Amino-Acid-Side-Chain has-part of Self)) called "Carbon-1")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Butylamine)))))))
(Lunch has 
    (superclasses (Meal))
    (wn20-synset ((:set (:triple "lunch" 1 "n"))
                  (:set (:triple "luncheon" 1 "n"))
                  (:set (:triple "tiffin" 1 "n"))
                  (:set (:triple "dejeuner" 1 "n")))))

(every Lunch has 
    (text-nominalization ("lunch")))
(Luminous-Intensity-Value has 
    (range-of (luminous-intensity))
    (domain-of (luminous-intensity-of))
    (superclasses (Property-Value)))
(Luminous-Intensity-Constant has 
    (scalar-constant-class-of (luminous-intensity))
    (superclasses (Constant)))
(Luminous-Flux-Value has 
    (range-of (luminous-flux))
    (domain-of (luminous-flux-of))
    (superclasses (Property-Value)))
(Luminous-Flux-Constant has 
    (scalar-constant-class-of (luminous-flux))
    (superclasses (Constant)))
(Luminance-Value has 
    (range-of (luminance))
    (domain-of (luminance-of))
    (superclasses (Property-Value)))
(Luminance-Constant has 
    (scalar-constant-class-of (luminance))
    (superclasses (Constant)))
(Lu has 
    (superclasses (Metal-Atom
                      IIIB-Element)))

(every Lu has 
    (atomic-symbol ((Lu)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 71 ()))))))
    (chemical-period (6)))
(Lr has 
    (superclasses (Metal-Atom
                      IIIB-Element)))

(every Lr has 
    (atomic-symbol ((Lr)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 103 ()))))))
    (chemical-period (7)))
(Lose has 
    (superclasses (Transfer))
    (required-slot (object
                       donor))
    (primary-slot (agent
                      recipient
                      instrument))
    (cmap-correspondence ((:seq object "the thing lost")
                          (:seq agent "causer")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*Mark has (instance-of (Tangible-Entity))) (*Book has (instance-of (Tangible-Entity))) (*Mark has (instance-of (Tangible-Entity)) (possesses (*Book))) (*Lose has (instance-of (Lose)) (donor (*Mark)) (object (*Book))) (do-and-next *Lose) (the text-gen of (thelast Lose)) ((the possesses of *Mark) = nil) ((the is-possessed-by of *Book) /= *Mark))))
    (wn16-synset ((:set (:triple "lose" 1 "v"))))
    (wn20-synset ((:set (:triple "lose" 1 "v"))))
    )

(every Lose has 
    (donor ((a Tangible-Entity)))
    (text-active-verbseq-sg ("loses"))
    (text-active-verbseq-pl ("lose"))
    (text-passive-verbseq-sg ("is lost"))
    (text-passive-verbseq-pl ("are lost"))
    (text-subj ((if (has-value (the agent of Self)) then (the agent of Self) else (the donor of Self))))
    (text-argslots ((:seq recipient instrument)))
    (text-active-sentence ((:seq (if ((the text-subj of Self) /= (the donor of Self)) then (:seq (the text-subj-phrase of Self) (if ((the number of (the text-subj of Self)) = 1) then ("causes") else ("cause")) (andify (the text-phrase of (the donor of Self))) ("to") (the text-active-verbseq-pl of Self)) else (:seq (the text-subj-phrase of Self) (the text-active-phrase of Self))) (the text-dobj-phrase of Self) (the text-arguments of Self))))
    (text-nominalization ("loss")))
(Longitude-Constant has 
    (scalar-constant-class-of (longitude))
    (superclasses (Constant)))
(Logistics-Support has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Locomotion has 
                                                                                                                                                                                                                                                                                      
    (superclasses (Move
                      Reflexive-Cliche))
    (required-slot (object
                       agent))
    (cmap-correspondence ((:seq agent "the mover")
                          (:seq object "the mover")))
    (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Living-Entity))) (*John has (location (*Boston))) (a Locomotion with (agent (*John)) (origin (*Boston)) (destination (*Austin))) (do-and-next (thelast Locomotion)) (the text-gen of (thelast Locomotion)) ((the location of *John) = *Austin))))
    (wn16-synset ((:set (:triple "locomote" 1 "v") (:triple "travel" 1 "v") (:triple "go" 1 "v") (:triple "move" 1 "v"))))
    (wn20-synset ((:set (:triple "locomote" 1 "v") (:triple "travel" 1 "v") (:triple "go" 1 "v") (:triple "move" 1 "v")))))

(every Locomotion has 
    (text-active-verbseq-sg ("locomotes"))
    (text-active-verbseq-pl ("locomote"))
    (text-nominalization ("locomotion")))
(Load has 
    (superclasses (Move-Into))
    (required-slot (object
                       base))
    (primary-slot (destination
                      origin
                      path))
    (wn16-synset ((:set (:triple "load" 1 "v") (:triple "load" 2 "v") (:triple "load" 3 "v") (:triple "charge" 16 "v") (:triple "lade" 2 "v") (:triple "laden" 2 "v") (:triple "load_up" 1 "v") (:triple "stow" 1 "v"))))
    (wn20-synset ((:set (:triple "load" 1 "v") (:triple "load" 2 "v") (:triple "charge" 16 "v") (:triple "lade" 2 "v") (:triple "laden" 2 "v") (:triple "load_up" 1 "v") (:triple "stow" 1 "v")))))

(every Load has 
    (causes ((a Activate with (object ((the base of Self))))))
    (text-active-verbseq-sg ("loads"))
    (text-active-verbseq-pl ("load"))
    (text-base (("into")))
    (text-nominalization ("loading")))
(Living-Group has 
                                   
    (superclasses (Living-Entity
                      Ensemble))
    (description ("Any functionally related group of living entities,
                         like the cells of an organ, a population of
                         individuals, an ecological community, etc.
                         Souther. ")))

(every Living-Group has 
    (has-part ((a Living-Entity)
               (at-least 2 Living-Entity)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Living-Entity has 
    (domain-of (sentience
                   sex))
    (range-of (sentience-of
                  sex-of))
                                                                                                              
    (superclasses (Physical-Object))
    (description ("Any living organism"))
    (wn20-synset ((:set (:triple "living_thing" 1 "n") (:triple "animate_thing" 1 "n")))))
(Liquid-Substance has 
    (superclasses (Fluid-Substance))
    (description ("A substance in the liquid state at room temperature"))
    (wn20-synset ((:set (:triple "liquid" 1 "n") (:triple "liquid" 3 "n"))))
    )

(every Liquid-Substance has 
    (physical-state ((if (not (has-value (the temperature of Self))) then ((a State-Value with (value (*liquid))))))))
(Lipolysis has 
    (superclasses (Catabolize))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (description ("The catabolic pathway by which lipids are hydrolyzed.
                          Souther.")))

(every Lipolysis has 
    (agent ((a Suborganismal-Entity)))
    (object ((a Lipid)))
    (instrument ((a Lipase))))
(Lipid-Synthesis has 
    (superclasses (Produce
                      Enzyme-Catalysis))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("The synthesis of lipids.  Souther.")))

(every Lipid-Synthesis has 
    (agent ((a Cell)))
    (location ((the location of (a Smooth-Endoplasmic-Reticulum))))
    (result ((a Lipid)))
    (text-argslots ((:seq result)))
    (text-active-verbseq-sg ("synthesizes"))
    (text-active-verbseq-pl ("synthesize"))
    (text-passive-verbseq-sg ("gets synthesized"))
    (text-passive-verbseq-pl ("get synthesized"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Lipid-Bilayer has 
    (superclasses (Organic-Layer))
    (description ("A bimolecular leaflet made up of lipid molecules,
                        forming the basic structure of the plasma membrane,
                        organelle membranes, etc. Souther.")))

(every Lipid-Bilayer has 
    (has-structural-part ((a Organic-Layer called "outer lipid layer" with (has-structural-part ((a Aggregate with (element-type ((Lipid)))))))
                          (a Organic-Layer called "inner lipid layer" with (has-structural-part ((a Aggregate with (element-type ((Lipid))))))))))
(Lipid has 
    (superclasses (Organic-Molecule
                      Hydrophobic-Structure))
    (description ("Organic molecule, generally containing hydrocarbon
                        chains, that is insoluble in water but dissolves
                        readily in nonpolar organic solvents.  One class,
                        phospholipids, forms the structural basis of
                        biological membranes.  Alberts:ECB:G-10.")))
(Lipase has 
    (superclasses (Catabolic-Enzyme))
    (description ("Enzyme that catalyzes the cleavage of fatty acids from
                        from the glycerol moiety.  Alberts:MBC:G-14.")))

(every Lipase has 
    (purpose ((a Catalyst with (in-event ((a Lipolysis)))))))
(LiOH-Substance has 
    (superclasses (Base)))

(every LiOH-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a LiOH))))
(LiOH has 
    (superclasses (Ionic-Compound)))

(every LiOH has 
    (has-part ((a Li-Plus)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Li-Plus) (:pair 1 OH-Minus))))))))
(Light-Infantry-Unit has 
                                                                                                                                                                                                                                                                                                                 
    (superclasses (Infantry-Unit)))
(Light-Infantry-Squad has 
    (superclasses (Light-Infantry-Unit
                      Squad)))

(every Light-Infantry-Squad has-definition 
    (instance-of (Light-Infantry-Unit
                     Squad)))
(Light-Infantry-Regiment has 
    (superclasses (Light-Infantry-Unit
                      Regiment)))

(every Light-Infantry-Regiment has-definition 
    (instance-of (Light-Infantry-Unit
                     Regiment)))
(Light-Infantry-Platoon has 
    (superclasses (Light-Infantry-Unit
                      Platoon)))

(every Light-Infantry-Platoon has-definition 
    (instance-of (Light-Infantry-Unit
                     Platoon)))
(Light-Infantry-Division has 
    (superclasses (Light-Infantry-Unit
                      Division)))

(every Light-Infantry-Division has-definition 
    (instance-of (Light-Infantry-Unit
                     Division)))
(Light-Infantry-Corps has 
    (superclasses (Light-Infantry-Unit
                      Corps)))

(every Light-Infantry-Corps has-definition 
    (instance-of (Light-Infantry-Unit
                     Corps)))
(Light-Infantry-Company has 
    (superclasses (Light-Infantry-Unit
                      Military-Company)))

(every Light-Infantry-Company has-definition 
    (instance-of (Light-Infantry-Unit
                     Military-Company)))
(Light-Infantry-Brigade has 
    (superclasses (Light-Infantry-Unit
                      Brigade)))

(every Light-Infantry-Brigade has-definition 
    (instance-of (Light-Infantry-Unit
                     Brigade)))
(Light-Infantry-Battalion has 
    (superclasses (Light-Infantry-Unit
                      Battalion)))

(every Light-Infantry-Battalion has-definition 
    (instance-of (Light-Infantry-Unit
                     Battalion)))
(Light-Cavalry-Unit has 
                                                                                                                                                                                                                                                                                                         
    (superclasses (Cavalry-Unit)))
(Light-Cavalry-Squad has 
    (superclasses (Light-Cavalry-Unit
                      Squad)))

(every Light-Cavalry-Squad has-definition 
    (instance-of (Light-Cavalry-Unit
                     Squad)))
(Light-Cavalry-Regiment has 
    (superclasses (Light-Cavalry-Unit
                      Regiment)))

(every Light-Cavalry-Regiment has-definition 
    (instance-of (Light-Cavalry-Unit
                     Regiment)))
(Light-Cavalry-Platoon has 
    (superclasses (Light-Cavalry-Unit
                      Platoon)))

(every Light-Cavalry-Platoon has-definition 
    (instance-of (Light-Cavalry-Unit
                     Platoon)))
(Light-Cavalry-Division has 
    (superclasses (Light-Cavalry-Unit
                      Division)))

(every Light-Cavalry-Division has-definition 
    (instance-of (Light-Cavalry-Unit
                     Division)))
(Light-Cavalry-Corps has 
    (superclasses (Light-Cavalry-Unit
                      Corps)))

(every Light-Cavalry-Corps has-definition 
    (instance-of (Light-Cavalry-Unit
                     Corps)))
(Light-Cavalry-Company has 
    (superclasses (Light-Cavalry-Unit
                      Military-Company)))

(every Light-Cavalry-Company has-definition 
    (instance-of (Light-Cavalry-Unit
                     Military-Company)))
(Light-Cavalry-Brigade has 
    (superclasses (Light-Cavalry-Unit
                      Brigade)))

(every Light-Cavalry-Brigade has-definition 
    (instance-of (Light-Cavalry-Unit
                     Brigade)))
(Light-Cavalry-Battalion has 
    (superclasses (Light-Cavalry-Unit
                      Battalion)))

(every Light-Cavalry-Battalion has-definition 
    (instance-of (Light-Cavalry-Unit
                     Battalion)))
(Light has 
    (description ("Electromagnetic energy vibrations in the visible frequency range that propagate through a region."))
    (superclasses (Energy))
    (wn20-synset ((:set (:triple "light" 1 "n") (:triple "visible_light" 1 "n") (:triple "visible_radiation" 1 "n")))))

(every Light has 
    (object-of ((a Move))))
(Ligation has 
                             
    (superclasses (Add
                      Enzyme-Catalysis))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (description ("The joining of the 3' end of one nucleic acid strand with the
                 5' end of another, forming a continuous strand. see
                 Lodish:MCB:G-10. definition for ligase.")))

(every Ligation has 
    (object ((a Nucleotide-Sequence called "5' NA sequence")))
    (base ((a Nucleotide-Sequence called "3' NA sequence")))
    (substrate (((the Nucleotide-Sequence object of Self) called "5' NA sequence")
                ((the Nucleotide-Sequence base of Self) called "3' NA sequence")))
    (instrument ((a Ligase)))
    (resulting-state ((a Be-Attached-To with (object (((the object of Self) called "5' NA sequence") ((the base of Self) called "3' NA sequence"))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Ligase has 
                           
    (superclasses (Enzyme))
    (description ("Enzyme that joins two segments of DNA or RNA together
                        end to end. Alberts:ECB:G-10.")))

(every Ligase has 
    (purpose ((a Catalyst with (in-event ((a Ligation)))))))
(Ligand has 
    (superclasses (Organic-Molecule))
    (description ("Molecule such as a hormone or a neurotransmitter that
                        that binds to a specific site on a protein.
                        Alberts:ECB:G-10.")))

(every Ligand has 
    (object-of ((a Attach with (object ((a Protein)))))))
(Lie has 
                        
    (superclasses (Express))
    (required-slot (agent
                       object))
    (test-case ('((*little-white-lie has (instance-of (Information)) (truth ((a Truth-Value with (value (*false)))))) (*Liar has (instance-of (Tangible-Entity))) (*lie has (instance-of (Lie)) (agent (*Liar)) (object (*little-white-lie))) (do-and-next *lie) (_LieBeKnown == (theoneof                             where ((the object of It) = *little-white-lie))) ((the experiencer of _LieBeKnown) = *Liar) ((the value of (the truth of (the object of _LieBeKnown))) = *false))))
    (wn16-synset ((:set (:triple "lie" 5 "v") (:triple "misinform" 1 "v") (:triple "mislead" 2 "v"))))
    (wn20-synset ((:set (:triple "lie" 5 "v") (:triple "misinform" 1 "v") (:triple "mislead" 2 "v")))))

(every Lie has 
    (object ((a Information with (truth ((a Truth-Value with (value ((*false)))))))))
    (pcs-list ((:triple (the agent of Self) experiencer-of (a Be-Known with (object ((a Information with (information-content ((the truth of (the object of Self))))))) (experiencer ((the agent of Self)))))))
    (text-active-verbseq-sg ("lies"))
    (text-active-verbseq-pl ("lie"))
    (text-nominalization ("lying")))
(Li2CO3-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Li2CO3-Substance has 
    (has-basic-structural-unit ((a Li2CO3))))
(Li2CO3 has 
    (superclasses (Ionic-Compound)))

(every Li2CO3 has 
    (has-part ((a Li-Plus)
               (a CO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Li-Plus) (:pair 1 CO3-Minus-2))))))))
(Li-Plus has 
    (superclasses (Metal-Cation)))

(every Li-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("lithium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Li))))))))
(Li has 
    (superclasses (Metal-Atom
                      Alkali-Metal-Element)))

(every Li has 
    (atomic-symbol ((Li)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 3 ()))))))
    (chemical-period (2)))
(Lewis-Base-Role has 
    (superclasses (Role)))

(every Lewis-Base-Role has 
    (played-by ((must-be-a Anion))))
(Lewis-Acid-Strength-Value has 
    (superclasses (Property-Value))
    (range-of (lewis-acid-strength))
    (domain-of (lewis-acid-strength-of)))

(every Lewis-Acid-Strength-Value has 
    (property-slot ((lewis-acid-strength))))
(Lewis-Acid-Strength-Constant has 
    (superclasses (Constant)))
(Lewis-Acid-Role has 
    (superclasses (Role))
    (domain-of (lewis-acid-strength))
    (range-of (lewis-acid-strength-of)))

(every Lewis-Acid-Role has 
    (lewis-acid-strength ((if (oneof (the elements of (the term of (the atomic-chemical-formula of (the played-by of Self)))) where ((oneof2 (the all-superclasses of (the2 of It)) where (It2 = Metal-Atom)) or ((the2 of It) = Metal-Atom))) then (a Lewis-Acid-Strength-Value with (value ((:pair (the abs of (the1 of (the value of (the charge of (the played-by of Self))))) ())))) [Lewis-Acid-Role-lewis-acid-strength-1]))))
(Leucine has 
    (superclasses (Essential-Amino-Acid
                      Nonpolar-Amino-Acid))
    (description ("A nonpolar amino acid with a isobutyl side chain.
                        Souther")))

(every Leucine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Amino-Acid-Side-Chain has-part of Self)) called "Carbon-1")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Isobutyl-Group)))))))
(Let-Go-Of has 
    (defeated-by-class-of (Be-Held))
    (superclasses (Unobstruct))
    (required-slot (object
                       agent))
    (cmap-correspondence ((:seq object "object")
                          (:seq agent "agent")))
    (wn16-synset ((:set (:triple "let_go_of" 1 "v") (:triple "let_go" 1 "v") (:triple "release" 1 "v"))))
    (wn20-synset ((:set (:triple "let_go_of" 1 "v") (:triple "let_go" 1 "v") (:triple "release" 1 "v")))))

(every Let-Go-Of has 
    (object ((a Tangible-Entity)))
    (agent ((a Tangible-Entity)))
    (soft-pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Held)))))
    (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Held) and ((the agent of It) = (the agent of Self))))))
    (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Let-Go-Of-del-1]) (:triple It agent (the agent of Self) [Let-Go-Of-del-2])))))
    (dcs-list ((forall (the location of (the agent of Self)) (:triple It is-at (the location of (the object of Self)) [Let-Go-Of-dcs-1]))))
    (interrupted-by ((must-be-a Hold with (object ((the object of Self))) (agent ((the agent of Self))) [Let-Go-Of-interrupted-1])))
    (text-active-verbseq-sg ("lets go of"))
    (text-active-verbseq-pl ("let go of"))
    (text-passive-verbseq-sg ("is let go of"))
    (text-passive-verbseq-pl ("are let go of"))
    (text-nominalization ("letting")))
(Let-Fall has 
    (defeated-by-class-of (Be-Supported))
                     
    (superclasses (Unobstruct))
    (required-slot (object
                       agent
                       causes))
    (cmap-correspondence ((:seq object "object")
                          (:seq agent "causer")
                          (:seq causes "causes")))
    (wn16-synset ((:set (:triple "drop" 1 "v"))))
    (wn20-synset ((:set (:triple "drop" 1 "v")))))

(every Let-Fall has 
    (object ((a Tangible-Entity)))
    (agent ((a Tangible-Entity)))
    (causes ((a Fall with (object ((the object of Self))))))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Supported))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Supported) [Let-Fall-pcs-1]))))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Let-Fall-del-1]))))
    (text-active-verbseq-sg ("lets"))
    (text-active-verbseq-pl ("let"))
    (text-passive-verbseq-sg ("is left to"))
    (text-passive-verbseq-pl ("are left to"))
    (text-argslots ((:seq text-particle destination)))
    (text-particle ("fall"))
    (preparatory-event (((:default (:set (a Move with (object ((the agent of Self))) (destination ((a Spatial-Entity with (is-at ((the object of Self))))))) (a Support with (object ((the object of Self))) (agent ((the agent of Self))) (instrument ((the instrument of Self)))))))))
    (interrupted-by ((must-be-a Support with (object ((the object of Self))))))
    (text-nominalization ("letting")))
(Lengthen has 
    (superclasses (Increase))
    (test-case ('((*mycarantenna has (instance-of (Substance)) (length (*mycarantennalength))) (*mycarantennalength has (instance-of (Length-Value)) (value ((:pair 10000 *millimeter)))) (a Increase with (object (*mycarantenna)) (property-slot (length))) ((thelast Increase) isa Lengthen) (do-and-next (thelast Lengthen)) ((the greater-than of (the length of *mycarantenna)) includes *mycarantennalength))))
    (wn20-synset ((:set (:triple "lengthen" 1 "v") (:triple "lengthen" 2 "v")))))

(every Lengthen has 
    (text-nominalization ("lengthening")))

(every Lengthen has-definition 
    (instance-of (Increase))
    (property-slot ((length))))
(Length-Value has 
    (range-of (circumference
                  depth
                  diameter
                  distance
                  height
                  length
                  perimeter
                  radius
                  thickness
                  width))
    (domain-of (circumference-of
                   depth-of
                   diameter-of
                   distance-of
                   height-of
                   length-of
                   perimeter-of
                   radius-of
                   thickness-of
                   width-of))
    (superclasses (Property-Value))
    (doc-file ("length"))
    (test-case ('((Stick has (superclasses (Physical-Object))) (Tree has (superclasses (Physical-Object))) (*mybigstick has (instance-of (Stick)) (height ((a Length-Value))) (length ((a Length-Value)))) (*myshortstick has (instance-of (Stick)) (length ((a Length-Value with (value ((:pair 20 *inch) (:pair *short Stick) (:pair *short Tree))) (less-than ((the length of *mybigstick)))))) (height ((a Length-Value with (value ((:pair 1.5 *foot) (:pair *average Stick) (:pair *short Tree))) (less-than ((the height of *mybigstick))))))) (the value of (the length of *myshortstick)) ((the less-than of (the length of *myshortstick)) includes (the length of *mybigstick)) ((the greater-than of (the length of *mybigstick)) includes (the length of *myshortstick)) (the value of (the height of *myshortstick)) ((the less-than of (the height of *myshortstick)) includes (the height of *mybigstick)) ((the greater-than of (the height of *mybigstick)) includes (the height of *myshortstick)) (Flagpole has (superclasses (Physical-Object))) (*bigflagpole has (instance-of (Flagpole)) (height ((a Length-Value)))) (*shortflagpole has (instance-of (Flagpole)) (height ((a Length-Value with (value ((:pair 1.5 *meter) (:pair *average Stick) (:pair *short Tree))) (less-than ((the height of *bigflagpole))))))) (the less-than of (the height of *shortflagpole)) ((the height-of of (the greater-than of (the height of *bigflagpole))) = (*shortflagpole)) ((the height of *shortflagpole) property-gt (a Length-Value with (value ((:pair 55 *inch))))) (Pool has (superclasses (Physical-Object))) (Ocean has (superclasses (Physical-Object))) (*pacificocean has (instance-of (Ocean)) (depth ((a Length-Value)))) (*gregorygympool has (instance-of (Pool)) (depth ((a Length-Value with (value ((:pair *shallow Ocean) (:pair *deep Pool))) (less-than ((the depth of *pacificocean))))))) (the value of (the depth of *gregorygympool)) ((the less-than of (the depth of *gregorygympool)) includes (the depth of *pacificocean)) ((the greater-than of (the depth of *pacificocean)) includes (the depth of *gregorygympool))))))

(every Length-Value has 
    (primary-slot ((length))))
(Length-Scale has 
    (scale-class-of (length))
                                 
    (superclasses (Scale)))
(Length-Constant has 
    (scalar-constant-class-of (length))
    (element-type-of (*short-long-scale))
    (superclasses (Constant))
    )
(Leave has 
    (superclasses (Locomotion))
    (required-slot (agent
                       object
                       origin))
    (primary-slot (destination
                      path))
    (cmap-correspondence ((:seq object "the thing Left")
                          (:seq agent "the Leaver")
                          (:seq origin "the place Left from")
                          (:seq destination "the place Left to")
                          (:seq path "the place Left along or through")
                          (:seq toward "the place Left toward")
                          (:seq away-from "the place Left away from")))
    (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Living-Entity))) (*John has (location (*Boston))) ((the location of *John) = *Boston) (a Leave with (agent (*John)) (origin ((the location of *John))) (destination (*Austin))) (do-and-next (thelast Leave)) (the text-gen of (thelast Leave)) ((the location of *John) = *Austin) ((the location of *John) /= *Boston))))
    (wn16-synset ((:set (:triple "leave" 1 "v") (:triple "go_away" 2 "v") (:triple "go_forth" 1 "v"))))
    (wn20-synset ((:set (:triple "leave" 1 "v") (:triple "go_away" 2 "v") (:triple "go_forth" 1 "v")))))

(every Leave has 
    (origin ((a Spatial-Entity)))
    (text-active-verbseq-sg ("leaves"))
    (text-active-verbseq-pl ("leave"))
    (text-argslots ((:seq origin)))
    (text-origin (()))
    (preparatory-event ((:default (a Go-To with (destination ((the origin of Self))) (object ((the object of Self)))))))
    (text-nominalization ("leaving")))
(Learning has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "acquisition" 3 "n") (:triple "learning" 1 "n") (:triple "basic_cognitive_process" 1 "n")))))

(every Learning has 
    (text-nominalization ("learning")))
(Learn has 
    (superclasses (Interpret))
    (description ("Someone acquires knowledge not known before"))
    (required-slot (agent
                       object))
    (test-case ('((*Fire-Is-Pretty-Hot has (instance-of (Information))) (*Little-Joe has (instance-of (Tangible-Entity))) (*Learn has (instance-of (Learn)) (agent (*Little-Joe)) (result (*Fire-Is-Pretty-Hot))) (not (the Be-Known experiencer-of of *Little-Joe)) (do-and-next *Learn) ((the object of (the resulting-state of *Learn)) = *Fire-Is-Pretty-Hot) ((the experiencer of (the resulting-state of *Learn)) = *Little-Joe))))
    (wn16-synset ((:set (:triple "learn" 1 "v") (:triple "learn" 2 "v") (:triple "learn" 3 "v") (:triple "learn" 4 "v") (:triple "word" 1 "v") (:triple "pick_up" 5 "v") (:triple "out" 2 "v") (:triple "discover" 2 "v") (:triple "see" 6 "v") (:triple "memorize" 1 "v") (:triple "study" 4 "v"))))
    (wn20-synset ((:set (:triple "learn" 1 "v") (:triple "learn" 2 "v") (:triple "learn" 3 "v") (:triple "learn" 4 "v") (:triple "word" 1 "v") (:triple "pick_up" 5 "v") (:triple "out" 3 "v") (:triple "discover" 3 "v") (:triple "see" 6 "v") (:triple "memorize" 1 "v") (:triple "study" 4 "v")))))

(every Learn has 
    (soft-pcs-list ((:triple (the agent of Self) experiencer-of (mustnt-be-a Be-Known with (object ((the object of Self)))))))
    (dcs-list ((:triple (the agent of Self) experiencer-of (a Be-Known with (object ((the object of Self)))))))
    (text-nominalization ("learning")))
(Latitude-Constant has 
    (scalar-constant-class-of (latitude))
    (superclasses (Constant)))
(Language has 
    (range-of (information-language))
    (domain-of (information-language-of))
    (superclasses (Intangible-Entity))
    (wn16-synset ((:set (:triple "language" 1 "n") (:triple "communication" 1 "n"))))
    (wn20-synset ((:set (:triple "language" 1 "n") (:triple "communication" 1 "n"))))
    )
(Lake has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Lake has 
    (trafficability ((a Trafficability-Value with (value ((:pair *SR Armor-Unit) (:pair *SR Infantry-Unit)))))))
(Kr has 
    (superclasses (Non-Metal-Atom
                      Noble-Gas-Element)))

(every Kr has 
    (atomic-symbol ((Kr)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 36 ()))))))
    (chemical-period (4)))
(KOH-Substance has 
    (superclasses (Base)))

(every KOH-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a KOH))))
(KOH has 
    (superclasses (Ionic-Compound)))

(every KOH has 
    (has-part ((a K-Plus)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 K-Plus) (:pair 1 OH-Minus))))))))
(KM-Class has 
                                                                                                                                                                                                                                                                                                                                           
    (superclasses (Thing)))
(Kinase has 
                                                           
    (superclasses (Enzyme))
    (description ("Enzyme that transfers a phosphate group from ATP (or
                        from another nucleoside triphosphate) onto another
                        molecule. Alberts:ECB:G-10.")))

(every Kinase has 
    (purpose ((a Catalyst with (in-event ((a Phosphorylation)))))))
(KI-Compound-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every KI-Compound-Substance has 
    (has-basic-structural-unit ((a KI-Compound))))
(KI-Compound has 
    (superclasses (Ionic-Compound)))

(every KI-Compound has 
    (has-part ((a K-Plus)
               (a I-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 K-Plus) (:pair 1 I-Minus))))))))
(Keto-Acid has 
    (superclasses (Organic-Molecule
                      Acid))
    (description ("Organic compounds containing the carboxy group
                          (-COOH) attached to a carbonyl group (C=O).  
                          Souther.")))

(every Keto-Acid has 
    (has-part ((a Carbonyl-Group with (object-of ((a Be-Attached-To with (object ((the Carboxyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Carbonyl-Group has-part of Self)) (the Carbon-Atom has-part of (the Carboxyl-Group has-part of Self))))))))
               (a Carboxyl-Group)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(K2SO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every K2SO4-Substance has 
    (has-basic-structural-unit ((a K2SO4))))
(K2SO4 has 
    (superclasses (Ionic-Compound)))

(every K2SO4 has 
    (has-part ((a K-Plus)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 K-Plus) (:pair 1 SO4-Minus-2))))))))
(K2CrO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every K2CrO4-Substance has 
    (has-basic-structural-unit ((a K2CrO4))))
(K2CrO4 has 
    (superclasses (Ionic-Compound)))

(every K2CrO4 has 
    (has-part ((a K2-Plus-2)
               (a CrO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 K2-Plus-2) (:pair 1 CrO4-Minus-2))))))))
(K2CO3-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every K2CO3-Substance has 
    (has-basic-structural-unit ((a K2CO3))))
(K2CO3 has 
    (superclasses (Ionic-Compound)))

(every K2CO3 has 
    (has-part ((a K2-Plus-2)
               (a CO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 K2-Plus-2) (:pair 1 CO3-Minus-2))))))))
(K2-Plus-2 has 
    (superclasses (Metal-Cation)))

(every K2-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 K))))))))
(K-Plus has 
    (superclasses (Metal-Cation)))

(every K-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("potassium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 K))))))))
(K has 
    (superclasses (Metal-Atom
                      Alkali-Metal-Element)))

(every K has 
    (atomic-symbol ((K)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 19 ()))))))
    (chemical-period (4)))
(Jungle has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Jungle has 
    (trafficability ((a Trafficability-Value with (value ((:pair *R Armor-Unit) (:pair *R Infantry-Unit)))))))
(IVB-Element has 
                                                                         
    (superclasses (Atom)))
(IVA-Element has 
                                                                                          
    (superclasses (Atom)))
(Isopropyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Hydrophobic chemical group derived from Isopropane.
                             Souther.")))

(every Isopropyl-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-3")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-3"))))
(Isoleucine has 
    (superclasses (Essential-Amino-Acid
                      Nonpolar-Amino-Acid))
    (description ("A nonpolar amino acid with a 1-methyl-isopropyl side 
                        chain. Souther.")))

(every Isoleucine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Isopropyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-2")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Isopropyl-Group with (object-of ((a Be-Attached-To with (object ((the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Isopropyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-1") (the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))))))))) (a Methyl-Group)))))))
(Isobutyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Hydrophobic chemical group derived from butane.
                             (CH3)2-CH2CH3. Souther. ")))

(every Isobutyl-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-3"))) (Instrument-Role ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-3"))) (Instrument-Role ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-3")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-3"))))
(Ir has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Ir has 
    (atomic-symbol ((Ir)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 77 ()))))))
    (chemical-period (6)))
(Ionic-Substance has 
                                                                
    (superclasses (Chemical)))

(every Ionic-Substance has-definition 
    (instance-of (Chemical))
    (has-basic-structural-unit ((a Ion))))
(Ionic-Compound-Substance has 

    (superclasses (Chemical))
    (test-case ('((*Na2CO3 has (instance-of (Ionic-Compound-Substance)) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a Na-Plus) (a CO3-Minus-2))))))) ((the term of (the has-chemical-formula of (the has-basic-structural-unit of *Na2CO3))) = ((:seq (:pair 2 Na-Plus) (:pair 1 CO3-Minus-2)))))))
    (domain-of (electrolyte-status))
    (range-of (electrolyte-status-of)))

(every Ionic-Compound-Substance has 
    (electrolyte-status ((the output of (a Compute-Electrolyte-Status with (input (Self))) [Ionic-Compound-Substance-electrolyte-status-1])))
    (conductivity ((the output of [Ionic-Compound-Substance-conductivity-1] (a Compute-Conductivity-of-Ionic-Compound-in-Water with (input (Self))))))
    (solubility ((the output of [Ionic-Compound-Substance-solubility-1] (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((the Cation has-part of (the has-basic-structural-unit of Self)) (the Anion has-part of (the has-basic-structural-unit of Self)))))))))

(every Ionic-Compound-Substance has-definition 
    (instance-of (Chemical
                     [Ionic-Compound-Substance-instance-of-1]))
    (has-basic-structural-unit ((a Ionic-Compound)
                                (exactly 1 Ionic-Compound))))
(Ionic-Compound has 

    (superclasses (Compound))
    (test-case ('((*Ionic-Na2CO3 has (instance-of (Ionic-Compound)) (has-part ((a Na-Plus) (a CO3-Minus-2)))) ((the term of (the has-chemical-formula of *Ionic-Na2CO3)) = ((:seq (:pair 2 Na-Plus) (:pair 1 CO3-Minus-2))))))))

(every Ionic-Compound has 
    (has-part ((((if ((the has-chemical-formula of Self) and (allof (the has-part of Self) where (not (has-value (the term of (the has-chemical-formula of It)))))) then (forall (the elements of (the term of (the has-chemical-formula of Self))) (an instance of (the2 of It))))) && ((if ((allof (the has-part of Self) where (not (has-value (the term of (the has-chemical-formula of It))))) and (has-value (the nested-atomic-chemical-formula of Self))) then (the output of (a Compute-Ionic-Compound-Parts-from-Nested-Formula with (input ((the term of (the nested-atomic-chemical-formula of Self)))))))))))
    (oxidation-state ((a Oxidation-State-Value with (value ((forall (the has-part of Self) (the value of (the output of (a Compute-Oxidation-State with (input (It)))))))) [Ionic-Compound-oxidation-state-1])))
    (has-chemical-formula ((if (not (the has-chemical-formula of Self)) then (the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((the Cation has-part of Self) (the Anion has-part of Self))))) [Ionic-Compound-has-chemical-formula-1])))
    (nested-atomic-chemical-formula ((if ((not (the nested-atomic-chemical-formula of Self)) and (the has-chemical-formula of Self)) then (the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((the has-chemical-formula of Self)))))))))

(every Ionic-Compound has-definition 
    (instance-of (Compound
                     [Ionic-Compound-instance-of-1]))
    (has-part ((a Anion)
               (a Cation))))
(Ionic-Bond has 
    (superclasses (Noncovalent-Bond))
    (description ("Attractive force that holds together two ions, one 
                        positive and the other negative.  Alberts:ECB:G-10")))

(every Ionic-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Cation) (a Anion) (exactly 2 Ion)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 3 *kilocalorie/mole))))))
    (length ((a Length-Value with (value ((:pair 0.25 *nanometer)))))))
(Ion has 
                                                                                                    
    (superclasses (Chemical-Entity)))

(every Ion has 
    (has-chemical-formula ((((must-be-a Chemical-Formula)) && ((if ((not (the has-chemical-formula of Self)) and (the nested-atomic-chemical-formula of Self)) then (the nested-atomic-chemical-formula of Self))))))
    (charge ((a Charge-Value)))
    (nested-atomic-chemical-formula ((if ((not (the nested-atomic-chemical-formula of Self)) and (the has-chemical-formula of Self)) then (the has-chemical-formula of Self))))
    (text-postmodslots (())))
(IO6-Minus-5 has 
    (superclasses (Anion)))

(every IO6-Minus-5 has 
    (charge ((a Charge-Value with (value ((:pair -5 *electronic-charge))))))
    (has-chemical-name ("orthoperiodate"))
    (has-acid-name ("orthoperiodic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 I) (:pair 6 O))))))))
(IO3-Minus has 
    (superclasses (Anion)))

(every IO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("iodate"))
    (has-acid-name ("iodic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 I) (:pair 3 O))))))))
(IO-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every IO-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 4.35E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a IO-Minus))))
(IO-Minus has 
    (superclasses (Anion)))

(every IO-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hypoiodite"))
    (has-acid-name ("hypoiodous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 I) (:pair 1 O))))))))
(Invertebrate-Organism has 
    (superclasses (Multicellular-Organism))
    (description ("A multicellular organism lacking a vertebral cord.
                         Souther.")))
(Invade has 
    (superclasses (Trespass
                      Intentional))
    (required-slot (agent
                       object
                       destination))
    (test-case ('((new-situation) (*Dwayne has (instance-of (Entity))) (*DwaynesProperty has (instance-of (Spatial-Entity)) (is-possessed-by (*Dwayne))) (*Venutian has (instance-of (Entity))) (a Invade with (agent (*Venutian)) (destination (*DwaynesProperty))) ((the is-possessed-by of (the destination of (thelast Invade))) = *Dwayne) ((the prevents of (the has-goal of *Dwayne)) includes (thelast Invade)) ((the is-goal-of of (the objective of (thelast Invade))) = *Venutian) ((the has-goal of *Venutian) includes (the objective of (thelast Invade))) (do-and-next (thelast Invade)) ((the location of *Venutian) = *DwaynesProperty))))
    (wn20-synset ((:set (:triple "invade" 1 "v") (:triple "occupy" 7 "v") (:triple "penetrate" 1 "v") (:triple "perforate" 2 "v")))))

(every Invade has 
    (text-active-verbseq-sg ("invades"))
    (text-active-verbseq-pl ("invade"))
    (text-argslots ((:seq destination)))
    (text-destination (""))
    (text-nominalization ("invasion")))
(Intron-End-Sequence has 
    (superclasses (RNA-Regulatory-Sequence))
    (description ("The sequence that identifies the
                                          3' splice site on an intron.
                                          Souther. ")))

(every Intron-End-Sequence has 
    (is-part-of ((a Intron)))
    (location ((the 3-Prime-End has-region of (the Intron is-part-of of Self)))))
(Intron-Branch-Sequence has 
    (superclasses (RNA-Regulatory-Sequence))
    (description ("The conserved sequence within an intron
                                       containing an adenine which attacks and
                                       breaks the bond between the last exon 
                                       nucleotide and the first (5') intron 
                                       nucleotide.  Souther. ")))

(every Intron-Branch-Sequence has 
    (is-part-of ((a Intron)))
    (is-between ((the Intron-Beginning-Sequence has-part of (the Intron is-part-of of Self))
                 (the Intron-End-Sequence has-part of (the Intron is-part-of of Self)))))
(Intron-Beginning-Sequence has 
    (superclasses (RNA-Regulatory-Sequence))
    (description ("The sequence that identifies the
                                          5' splice site on an intron.
                                          Souther. ")))

(every Intron-Beginning-Sequence has 
    (is-part-of ((a Intron)))
    (location ((the 5-Prime-End has-region of (the Intron is-part-of of Self)))))
(Intron has 
    (superclasses (DNA-Noncoding-Sequence))
    (description ("Region of a eucaryotic gene that does not code for
                       protein but is transcribed into an RNA molecule and then
                       excised by RNA splicing to produce mRNA.
                       Alberts:ECB:G-10.")))

(every Intron has 
    (is-part-of ((a Eucaryotic-Gene)))
    (has-part ((a Intron-Beginning-Sequence)
               (a DNA-Noncoding-Sequence called "Intron has-region between beginning and branch point")
               (a Intron-Branch-Sequence)
               (a DNA-Noncoding-Sequence called "Intron has-region between branch point and end of intron")
               (a Intron-End-Sequence))))
(Interpret has 
    (superclasses (Action))
    (required-slot (agent
                       object))
    (test-case ('((*Tale has (instance-of (Information))) (*Bubba has (instance-of (Tangible-Entity))) (*AnExpress has (instance-of (Express)) (object (*Tale))) (*AnInterpret has (instance-of (Interpret)) (agent (*Bubba)) (object ((the result of *AnExpress)))) (do-and-next *AnInterpret) ((the object of (the resulting-state of *AnInterpret)) = *Tale) ((the experiencer of (the resulting-state of *AnInterpret)) = *Bubba))))
    (wn16-synset ((:set (:triple "interpret" 1 "v") (:triple "interpret" 6 "v") (:triple "understand" 1 "v") (:triple "understand" 3 "v"))))
    (wn20-synset ((:set (:triple "interpret" 1 "v") (:triple "interpret" 6 "v") (:triple "understand" 1 "v") (:triple "understand" 3 "v"))))
    )

(every Interpret has 
    (agent ((a Tangible-Entity)))
    (object ((a Message)))
    (result ((the Information object of (the result-of of (the object of Self)))))
    (resulting-state ((a Be-Known)))
    (add-list ((:triple (the resulting-state of Self) object (the result of Self) [Interpret-add-1])
               (:triple (the resulting-state of Self) experiencer (the agent of Self) [Interpret-add-2])))
    (text-nominalization ("interpreting")))
(Internal-RNA-Sequence has 
    (superclasses (RNA-Sequence
                      Internal-Nucleotide-Sequence))
    (description ("A has-region of the RNA which is internal, thus having no free
                     5' or 3' end. Souther. ")))
(Internal-Nucleotide-Sequence has 
                                                                           
    (superclasses (Nucleotide-Sequence))
    (description ("A has-region of a nucleotide sequence which
                                      is internal, thus having no free 5' or 
                                      3' end.  Souther. ")))

(every Internal-Nucleotide-Sequence has 
    (element-type ((Nucleoside-Monophosphate)))
    (object-of ((a Be-Attached-To with (object ((a Nucleotide-Sequence called "Upstream sequence"))) (site ((the 5-Prime-End of Self) ((the 3-Prime-End is-region-of of (the object of (the Be-Attached-To object-of of Self))) called "Upstream sequence"))))
                (a Be-Attached-To with (object ((a Nucleotide-Sequence called "Upstream sequence"))) (site ((the 3-Prime-End of Self) ((the 5-Prime-End is-region-of of (the object of (the Be-Attached-To object-of of Self))) called "Downstream sequence")))))))
(Internal-Membrane has 
    (superclasses (Biological-Membrane))
    (description ("Eucaryotic cell membrane other than the plasma
                         membrane.  The membrane that surrounds an organelle
                         is an example.  Alberts:ECB:G-10"))
    )

(every Internal-Membrane has 
    (is-part-of ((a Subcellular-Compartment)))
    (encloses ((a Spatial-Entity with (is-inside ((the is-part-of of Self)))))))
(Internal-DNA-Sequence has 
    (superclasses (DNA-Sequence
                      Internal-Nucleotide-Sequence))
    (description ("A has-region of the DNA which is internal, thus having no free
                     5' or 3' end.  Souther. ")))
(Intermediate-Filament has 
    (superclasses (Protein-Filament))
    (description ("Fibrous protein filament (10 nm in diameter) that
                        forms ropelike bundles in animal cells.  Often 
                        provides tensile strength to withstand tension applied
                        to the cell from outside. Alberts:ECB:G-10.")))

(every Intermediate-Filament has 
    (purpose ((a Instrument-Role with (in-event ((a Be-Supported with (object ((a Cell)))))))))
    (element-type ((Protein)))
    (width ((a Length-Value with (value ((:pair 10 *nanometer)))))))
(Interdict has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task to prevent, disrupt, or delay the enemy's use of an area or route")))

(every Interdict has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.7 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1 ()))))))
    (text-active-verbseq-sg ("interdicts"))
    (text-active-verbseq-pl ("interdict")))
(Interaction has 
                                                                           
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "interaction" 1 "n")))))

(every Interaction has 
    (text-nominalization ("interaction")))
(Intentional has 
    (superclasses (Cliche))
    (test-case ('((*chicks has (instance-of (Physical-Object))) (Impress has (superclasses (Action))) (Work-Out has (superclasses (Action))) (a Impress with (object (*chicks))) (*Sal has (instance-of (Entity)) (has-goal ((thelast Impress)))) (the has-goal of *Sal) (a Work-Out with (agent (*Sal)) (objective ((thelast Impress)))) ((thelast Work-Out) isa Intentional) ((the has-goal of *Sal) includes (the objective of (thelast Work-Out))))))
    )

(every Intentional has 
    (agent ((a Entity)))
    (objective ((a Event with (is-goal-of ((the agent of Self))))))
    (text-definition-sentence (()))
    (text-definition-sentence-of (()))
    (text-nominalization (()))
    (text-nominalization-of (()))
    (text-content (()))
    (text-content-of (()))
    (text-existential-there (()))
    (text-existential-there-of (()))
    (text-toward (()))
    (text-toward-of (()))
    (text-subj (()))
    (text-subj-of (()))
    (text-subj-phrase (()))
    (text-subj-phrase-of (()))
    (text-slot (()))
    (text-slot-of (()))
    (text-sentence (()))
    (text-sentence-of (()))
    (text-premodslots (()))
    (text-premodslots-of (()))
    (text-premods (()))
    (text-premods-of (()))
    (text-postmodslots (()))
    (text-postmodslots-of (()))
    (text-postmods (()))
    (text-postmods-of (()))
    (text-phrase (()))
    (text-phrase-of (()))
    (text-passive-verbseq (()))
    (text-passive-verbseq-of (()))
    (text-passive-verbseq-sg (()))
    (text-passive-verbseq-sg-of (()))
    (text-passive-verbseq-pl (()))
    (text-passive-verbseq-pl-of (()))
    (text-passive-sentence (()))
    (text-passive-sentence-of (()))
    (text-passive-phrase (()))
    (text-passive-phrase-of (()))
    (text-particle (()))
    (text-particle-of (()))
    (text-number (()))
    (text-number-of (()))
    (text-nom-sentence (()))
    (text-nom-sentence-of (()))
    (text-indef-head (()))
    (text-indef-head-of (()))
    (text-indef-determiner (()))
    (text-indef-determiner-of (()))
    (text-head (()))
    (text-head-of (()))
    (text-gen (()))
    (text-gen-of (()))
    (text-dobj (()))
    (text-dobj-of (()))
    (text-dobj-phrase (()))
    (text-dobj-phrase-of (()))
    (text-description (()))
    (text-description-of (()))
    (text-def-head (()))
    (text-def-head-of (()))
    (text-def-determiner (()))
    (text-def-determiner-of (()))
    (text-base-phrase (()))
    (text-base-phrase-of (()))
    (text-arguments (()))
    (text-arguments-of (()))
    (text-argslots (()))
    (text-argslots-of (()))
    (text-active-verbseq (()))
    (text-active-verbseq-of (()))
    (text-active-verbseq-sg (()))
    (text-active-verbseq-sg-of (()))
    (text-active-verbseq-pl (()))
    (text-active-verbseq-pl-of (()))
    (text-active-sentence (()))
    (text-active-sentence-of (()))
    (text-active-phrase (()))
    (text-active-phrase-of (()))
    (text-subevent-of (()))
    (text-subevent (()))
    (slot-gloss (()))
    (slot-gloss-of (()))
    (text-site (()))
    (text-site-of (()))
    (text-resulting-state (()))
    (text-resulting-state-of (()))
    (text-result (()))
    (text-result-of (()))
    (text-recipient (()))
    (text-recipient-of (()))
    (text-raw-material (()))
    (text-raw-material-of (()))
    (text-is-possessed-by (()))
    (text-is-possessed-by-of (()))
    (text-path (()))
    (text-path-of (()))
    (text-origin (()))
    (text-origin-of (()))
    (text-object (()))
    (text-object-of (()))
    (text-material (()))
    (text-material-of (()))
    (text-is-west-of (()))
    (text-is-west (()))
    (text-is-east-of (()))
    (text-is-east (()))
    (text-is-southwest-of (()))
    (text-is-southwest (()))
    (text-is-northeast-of (()))
    (text-is-northeast (()))
    (text-is-over (()))
    (text-is-over-of (()))
    (text-is-outside (()))
    (text-is-outside-of (()))
    (text-is-oriented-toward (()))
    (text-is-oriented-toward-of (()))
    (text-is-opposite (()))
    (text-is-opposite-of (()))
    (text-is-on (()))
    (text-is-on-of (()))
    (text-is-northwest-of (()))
    (text-is-northwest (()))
    (text-is-southeast-of (()))
    (text-is-southeast (()))
    (text-is-north-of (()))
    (text-is-north (()))
    (text-is-south-of (()))
    (text-is-south (()))
    (text-is-near (()))
    (text-is-near-of (()))
    (text-is-inside (()))
    (text-is-inside-of (()))
    (text-is-facing (()))
    (text-is-facing-of (()))
    (text-is-between (()))
    (text-is-between-of (()))
    (text-is-beside (()))
    (text-is-beside-of (()))
    (text-is-behind (()))
    (text-is-behind-of (()))
    (text-is-at (()))
    (text-is-at-of (()))
    (text-is-along (()))
    (text-is-along-of (()))
    (text-is-above (()))
    (text-is-above-of (()))
    (text-instrument (()))
    (text-instrument-of (()))
    (text-has-part (()))
    (text-has-part-of (()))
    (text-is-part-of (()))
    (text-is-part (()))
    (text-donor (()))
    (text-donor-of (()))
    (text-destination (()))
    (text-destination-of (()))
    (text-causes (()))
    (text-causes-of (()))
    (text-caused-by (()))
    (text-caused-by-of (()))
    (text-beneficiary (()))
    (text-beneficiary-of (()))
    (text-base (()))
    (text-base-of (()))
    (text-away-from (()))
    (text-away-from-of (()))
    (text-agent (()))
    (text-agent-of (()))
    (text-abuts (()))
    (text-abuts-of (())))

(every Intentional has-definition 
    (instance-of (Event))
    (agent ((a Entity)))
    (objective ((a Event with (is-goal-of ((the agent of Self)))))))
(Intensity-Value has 
    (range-of (intensity))
    (domain-of (intensity-of))
    (superclasses (Property-Value))
    (test-case ('((Star has (superclasses (Thing))) (Lightbulb has (superclasses (Thing))) (*whitegiant has (instance-of (Drink)) (intensity ((a Intensity-Value)))) (*browndwarf has (instance-of (Drink)) (intensity ((a Intensity-Value with (value ((:pair *strong Lightbulb) (:pair *weak Star))) (less-than ((the intensity of *whitegiant))))))) (the value of (the intensity of *browndwarf)) ((the less-than of (the intensity of *browndwarf)) includes (the intensity of *whitegiant)) ((the greater-than of (the intensity of *whitegiant)) includes (the intensity of *browndwarf))))))
(Intensity-Scale has 
    (scale-class-of (intensity))
                                  
    (superclasses (Scale)))
(Intensity-Constant has 
    (scalar-constant-class-of (intensity))
    (element-type-of (*weak-strong-scale))
    (superclasses (Constant))
    )
(Integrity-Value has 
    (range-of (integrity))
    (domain-of (integrity-of))
    (superclasses (Property-Value))
    (test-case ('((Cheese has (superclasses (Substance))) (*Romano has (instance-of (Cheese)) (integrity ((a Integrity-Value)))) (*Swiss has (instance-of (Cheese)) (integrity ((a Integrity-Value with (value ((:pair *permeable Cheese))) (less-than ((the integrity of *Romano))))))) (the value of (the integrity of *Swiss)) ((the less-than of (the integrity of *Swiss)) includes (the integrity of *Romano)) ((the greater-than of (the integrity of *Romano)) includes (the integrity of *Swiss))))))
(Integrity-Scale has 
                                            
    (scale-class-of (integrity))
    (superclasses (Scale)))
(Integrity-Constant has 
    (element-type-of (*impermeable-permeable-scale))
    (scalar-constant-class-of (integrity))
    (superclasses (Constant))
    )
(Intangible-Entity has 
                                                                               
    (superclasses (Entity)))
(Instrument-Role has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "instrument" 2 "n") (:triple "instrument" 3 "n") (:triple "tool" 2 "n") (:triple "pawn" 2 "n"))))
    (wn20-synset ((:set (:triple "instrument" 2 "n") (:triple "instrument" 3 "n") (:triple "tool" 2 "n") (:triple "pawn" 2 "n")))))

(every Instrument-Role has 
    (in-event ((must-be-a Event)))
    (played-by ((a Entity with (instrument-of ((the in-event of Self)))))))
(Instruction has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "direction" 6 "n") (:triple "command" 7 "n") (:triple "statement" 6 "n") (:triple "program_line" 1 "n"))))
    (wn20-synset ((:set (:triple "direction" 6 "n") (:triple "command" 7 "n") (:triple "statement" 6 "n") (:triple "program_line" 1 "n")))))

(every Instruction has 
    (in-event ((a Action)))
    (played-by ((a Information with (information-content ((must-be-a Action))) (object-of ((the in-event of Self)))))))
(Institution has 
                                                               
    (superclasses (Organization))
    (description ("a work organization"))
    (wn20-synset ((:set (:triple "institution" 1 "n") (:triple "establishment" 2 "n")))))
(Inquire has 
    (superclasses (Express))
    (required-slot (agent
                       object
                       recipient))
    (test-case ('((*santa has (instance-of (Tangible-Entity))) (*little-timmy has (instance-of (Tangible-Entity))) (*question has (instance-of (Information)) (information-content ("Why does god kill puppies and grandmas?"))) (*inquires has (instance-of (Inquire)) (agent (*little-timmy)) (recipient (*santa)) (object (*question))) (do-and-next *inquires) (the text-gen of (thelast Inquire)) ((the plays of (the object of (thelast Inquire))) isa Question) ((the experiencer of (thelast Be-Known)) = *little-timmy))))
    (wn16-synset ((:set (:triple "inquire" 1 "v") (:triple "ask" 1 "v") (:triple "ask" 3 "v") (:triple "ask" 7 "v") (:triple "enquire" 1 "v"))))
    (wn20-synset ((:set (:triple "inquire" 1 "v") (:triple "ask" 1 "v") (:triple "ask" 3 "v") (:triple "ask" 6 "v") (:triple "enquire" 1 "v")))))

(every Inquire has 
    (object ((must-be-a Information with (plays ((a Question))))))
    (recipient ((a Tangible-Entity)))
    (text-nominalization ("inquiry")))

(every Inquire has-definition 
    (instance-of (Express))
    (object ((a Information with (plays ((a Question)))))))
(Inorganic-Substance has 
    (superclasses (Chemical))
    (description ("Any chemical substance which does not 
                                    contain hydrocarbons.")))

(every Inorganic-Substance has 
    (has-structural-part ((mustnt-be-a Carbohydrate)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Inorganic-Molecule has 
                                                                                                                                                                                   
    (superclasses (Molecule))
    (description ("Molecule lacking a carbohydrate skeleton.  Souther.")))

(every Inorganic-Molecule has 
    (has-structural-part ((mustnt-be-a Hydrocarbon)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Innovation has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "invention" 2 "n") (:triple "creation" 2 "n") (:triple "innovation" 1 "n")))))

(every Innovation has 
    (text-nominalization ("innovation")))
(Initiator-Proteins has 
    (superclasses (Enzyme-Complex))
    (description ("An enzyme complex of proteins that bind to the 
                        replication origin and catalyze the separation of 
                        strands in a DNA molecule before replication. 
                        see Lehninger:PBC:G-6")))

(every Initiator-Proteins has 
    (purpose ((a Catalyst with (in-event ((a Replicon-DNA-Melting)))))))
(Initiator-Protein has 
    (superclasses (DNA-Regulatory-Protein
                      Enzyme))
    (description ("An enzyme that binds to the replication origin and 
                        catalyzes the separation of strands in
                        a DNA molecule before replication. Lehninger:PBC:G-6")))

(every Initiator-Protein has 
    (purpose ((a Catalyst with (in-event ((a Replicon-DNA-Melting)))))))
(Information-Storage has 
                                            
    (superclasses (Be-Stored)))

(every Information-Storage has 
    (object ((a Information))))
(Information-Sequence has 
    (superclasses (Sequence
                      Information))
    (description ("A sequence which encodes information.  Biological
                         examples are DNA, RNA, and the amino acid sequence of
                         proteins (which determines folding)."))
    (wn20-synset ((:set (:triple "string" 5 "n")))))
(Information has 
    (domain-of (truth))
    (range-of (truth-of))
                                                                                                                                                             
    (superclasses (Conceptual-Entity))
    (required-slot (information-content))
    (description ("Knowledge communicated or received concerning a 
                         particular fact or circumstance. RHCD:1st Revised:
                         684."))
    (wn16-synset ((:set (:triple "information" 1 "n") (:triple "info" 1 "n"))))
    (wn20-synset ((:set (:triple "information" 1 "n") (:triple "info" 1 "n")))))

(every Information has 
    (information-content ((a Thing)))
    (truth ((must-be-a Truth-Value))))
(Infantry-Unit has 
    (superclasses (Military-Unit))
    )
(Infantry-Fighting-Vehicle has 
                                        
    (superclasses (Fighting-Vehicle)))
(Indole has 
    (superclasses (Heterocyclic-Compound))
    (description ("An azole ring fused to a benzene ring.  Souther.")))

(every Indole has 
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "N1-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Double-Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Double-Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-9"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-7"))) (instrument ((a Double-Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-7" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C7-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-8" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C8-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-9"))) (instrument ((a Double-Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-9" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C9-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "N1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C7-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C8-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C9-Hydrogen"))))
(Increase has 
    (domain-of (from-value
                   property-slot
                   to-value))
    (range-of (from-value-of
                  property-slot-of
                  to-value-of))
                                                                                                                                                            
    (superclasses (Action))
    (test-case ('((*Beer has (instance-of (Entity))) (*Increase has (instance-of (Increase)) (object (*Beer)) (property-slot (temperature))) (do-and-next *Increase) ((the greater-than of (the temperature of *Beer)) includes ((in-situation (the1 prev-situation of (curr-situation)) (the temperature of *Beer)))))))
    (wn20-synset ((:set (:triple "increase" 1 "v") (:triple "increase" 2 "v")))))

(every Increase has 
    (property-slot ((a Property)))
    (from-value ((in-situation (curr-situation) (the (the property-slot of Self) of (the object of Self)))))
    (pcs-list ((:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self))) [Increase-pcs-1])))
    (del-list ((:triple (the object of Self) (the property-slot of Self) * [Increase-del-1])))
    (add-list ((if (has-value (the to-value of Self)) then (:triple (the object of Self) (the property-slot of Self) ((the to-value of Self) has (greater-than ((the from-value of Self))))) else (:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self)) with (greater-than ((the from-value of Self)))) [Increase-add-1]))))
    (text-nominalization ("increase")))
(Inanimate-Object has 
                                                           
    (superclasses (Physical-Object))
    (description ("A non-living thing")))
(In has 
    (superclasses (Metal-Atom
                      IIIA-Element)))

(every In has 
    (atomic-symbol ((In)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 49 ()))))))
    (chemical-period (5)))
(Importance-Scale has 
    (scale-class-of (importance))
                                            
    (superclasses (Scale)))
(Importance-Constant has 
    (scalar-constant-class-of (importance))
    (element-type-of (*unimportant-important-scale))
    (superclasses (Constant))
    )
(Impair has 
                                           
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq agent "the impairer")
                          (:seq object "the thing impaired"))))

(every Impair has 
    (object ((a Tangible-Entity)))
    (text-active-verbseq-sg ("impairs"))
    (text-active-verbseq-pl ("impair"))
    (text-passive-verbseq-sg ("gets impaired"))
    (text-passive-verbseq-pl ("get impaired"))
    (text-nominalization ("impairment")))
(Imidazole has 
    (superclasses (Heterocyclic-Compound))
    (description ("An imino 5 membered ring.  Souther.")))

(every Imidazole has 
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "N1-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "N3-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Double-Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "N1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen"))))
(IIIB-Element has 
    (superclasses (Atom))
    )
(IIIA-Element has 
                                                                                          
    (superclasses (Atom)))
(IIB-Element has 
                                                       
    (superclasses (Atom)))
(IIA-Element has 
                                                                                                             
    (superclasses (Atom)))
(Identify-Chemical-Entity has 
    (superclasses (Method))
    (description ("given a chemical entity, specialize it into the right class if possible"))
    (test-case ('(((the output of (a Identify-Chemical-Entity with (input ((a Chemical-Entity with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 S) (:pair 4 O)))))))))))) isa HSO4-Minus)))))

(every Identify-Chemical-Entity has 
    (input ((a Chemical-Entity)))
    (output (#'(LAMBDA () (IDENTIFY-CH-ENT-CACHED (KM-UNIQUE0 '(the input of Self)))))))
(Identify-Chemical has 
    (superclasses (Method))
    (description ("given a chemical, specialize it into the right class if possible"))
    (test-case ('(((the output of (a Identify-Chemical with (input ((a Chemical with (has-basic-structural-unit ((a HC2H3O2)))))))) isa HC2H3O2-Substance)))))

(every Identify-Chemical has 
    (input ((a Chemical)))
    (output (#'(LAMBDA () (IDENTIFY-CH-CACHED (KM-UNIQUE0 '(the input of Self)))))))
(I-Minus has 
    (superclasses (Anion)))

(every I-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("iodide"))
    (has-acid-name ("hydroiodic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 I))))))))
(I has 
    (superclasses (Non-Metal-Atom
                      Halogen-Element)))

(every I has 
    (has-molecular-name ("iodide"))
    (atomic-symbol ((I)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 53 ()))))))
    (chemical-period (5)))
(Hydroxyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Chemical group consisting of a hydrogen atom
                             linked to an oxygen, as in an alcohol.
                             Alberts:ECB:G-9.")))

(every Hydroxyl-Group has 
    (has-part ((a Hydrogen-Atom)
               (a Oxygen-Atom with (object-of ((a Be-Attached-To with (object ((the Hydrogen-Atom has-part of Self))))))))))
(Hydrophobic-Structure has 
    (superclasses (Chemical-Entity))
    (description ("Any chemical object which repels water. Souther. "))
    )

(every Hydrophobic-Structure has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Hydrophilic-Structure has 
    (superclasses (Chemical-Entity))
    (description ("Any chemical object which attracts water. Souther. "))
    )

(every Hydrophilic-Structure has 
    (object-of ((a Move-Together with (object ((a Water-Molecule) (at-least 1 Water-Molecule))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Hydronium-Ion has 
    (superclasses (Single-Cation
                      Inorganic-Molecule))
    (description ("The positive ion resulting from the addition of a
                        proton to a water molecule. Souther.")))

(every Hydronium-Ion has 
    (has-part ((a Hydrogen-Atom called "first hydrogen")
               (a Hydrogen-Atom called "second hydrogen")
               (a Hydrogen-Atom called "third hydrogen")
               (a Oxygen-Atom with (object-of ((a Be-Attached-To with (object ((((the Hydrogen-Atom has-part of Self) called "first hydrogen")) (((the Hydrogen-Atom has-part of Self) called "the second hydrogen")) (((the Hydrogen-Atom has-part of Self) called "the third hydrogen")))))))))))
(Hydrolysis-Base-Reactant has 
    (superclasses (Reaction-Material)))

(every Hydrolysis-Base-Reactant has 
    (called ("Reactant"))
    (raw-material-of ((if (not (the raw-material-of of Self)) then (a Hydrolysis with (raw-material ((Self))) (kb ((the kb of Self)))))))
    (plays ((a Base-Role with (kb ((the kb of Self)))))))

(every Hydrolysis-Base-Reactant has-definition 
    (instance-of (Chemical))
    (kb ((a Equilibrium-Constant-Value))))
(Hydrolysis-Acid-Reactant has 
    (superclasses (Reaction-Material)))

(every Hydrolysis-Acid-Reactant has 
    (called ("Reactant"))
    (raw-material-of ((if (not (the raw-material-of of Self)) then (a Hydrolysis with (raw-material ((Self))) (ka ((the ka of Self)))))))
    (plays ((a Acid-Role with (ka ((the ka of Self)))))))

(every Hydrolysis-Acid-Reactant has-definition 
    (instance-of (Chemical))
    (ka ((a Equilibrium-Constant-Value))))
(Hydrolysis has 
    (superclasses (Equilibrium-Reaction))
    (domain-of (ka-expression
                   ka
                   kb-expression
                   kb
                   pka
                   pkb))
    (range-of (ka-expression-of
                  ka-of
                  kb-expression-of
                  kb-of
                  pka-of
                  pkb-of)))

(every Hydrolysis has 
    (keq ((((if ((not (the keq of Self)) and (the value of (the ka of Self))) then (the ka of Self) [Hydrolysis-keq-1])) && ((if ((not (the keq of Self)) and (not (the value of (the ka of Self))) and (the value of (the kb of Self))) then (the kb of Self) [Hydrolysis-keq-2])) && ((if ((not (the keq of Self)) and (not (the value of (the ka of Self))) and (not (the value of (the kb of Self))) and (the value of (the ka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) then (the ka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))) [Hydrolysis-keq-3])) && ((if ((not (the keq of Self)) and (not (the value of (the ka of Self))) and (not (the value of (the kb of Self))) and (not (the value of (the ka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) and (the value of (the kb of (the Base-Role plays of ((the raw-material of Self) called "Reactant"))))) then (the kb of (the Base-Role plays of ((the raw-material of Self) called "Reactant"))) [Hydrolysis-keq-4])) && ((if ((not (the keq of Self)) and (not (the value of (the ka of Self))) and (not (the value of (the kb of Self))) and (not (the value of (the ka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) and (not (the value of (the kb of (the Base-Role plays of ((the raw-material of Self) called "Reactant"))))) and (oneof (the ki of Self) where ((the value of It) = nil))) then ((?keq == (the output of (a Compute-Equilibrium-Constant with (input (Self))))) and (if (has-value ?keq) then ?keq [Hydrolysis-keq-5] else ((the default-ka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))) or (the default-kb of (the Base-Role plays of ((the raw-material of Self) called "Reactant")))))))) && ((if ((not (the keq of Self)) and (not (the value of (the ka of Self))) and (not (the value of (the kb of Self))) and (not (the value of (the ka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) and (not (the value of (the kb of (the Base-Role plays of ((the raw-material of Self) called "Reactant"))))) and (not (oneof (the ki of Self) where ((the value of It) = nil)))) then (a Equilibrium-Constant-Value with (value ((:pair (the product of (forall-bag (the bag of (the ki of Self)) (the1 of (the value of It)))) nil)))) [Hydrolysis-keq-6])))))
    (ka ((if ((not (the ka of Self)) and (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))) then (the keq of Self) [Hydrolysis-ka-1])))
    (pka ((((if ((not (the pka of Self)) and (not (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant")))))) and (the1 of (the value of (the ka of Self)))) then (a PKa-Value with (value ((:pair (0 - ((the log of (the1 of (the value of (the ka of Self)))) / (the log of 10))) nil)))) [Hydrolysis-pka-1])) && ((if ((not (the pka of Self)) and (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) and (not (the1 of (the value of (the ka of Self))))) then (a PKa-Value with (value ((:pair (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) nil)))) [Hydrolysis-pka-2])) && ((if ((not (the pka of Self)) and (not (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant")))))) and (not (the1 of (the value of (the ka of Self))))) then (a PKa-Value with (value ((:pair (the1 of (the value of (the pH of Self))) nil)))) [Hydrolysis-pka-3])))))
    (ka-expression ((if ((not (the ka-expression of Self)) and (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))) then (the keq-expression of Self) [Hydrolysis-ka-expression-1])))
    (kb ((if ((not (the kb of Self)) and (the Base-Role plays of ((the raw-material of Self) called "Reactant"))) then (the keq of Self) [Hydrolysis-kb-1])))
    (pkb ((((if ((not (the pkb of Self)) and (not (the1 of (the value of (the pkb of (the Base-Role plays of ((the raw-material of Self) called "Reactant")))))) and (the1 of (the value of (the kb of Self)))) then (a PKb-Value with (value ((:pair (0 - ((the log of (the1 of (the value of (the kb of Self)))) / (the log of 10))) nil)))) [Hydrolysis-pkb-1])) && ((if ((not (the pkb of Self)) and (the1 of (the value of (the pkb of (the Base-Role plays of ((the raw-material of Self) called "Reactant"))))) and (the1 of (the value of (the kb of Self)))) then (a PKb-Value with (value ((:pair (the1 of (the value of (the pkb of (the Base-Role plays of ((the raw-material of Self) called "Reactant"))))) nil)))) [Hydrolysis-pkb-2])) && ((if ((not (the pkb of Self)) and (not (the1 of (the value of (the pkb of (the Base-Role plays of ((the raw-material of Self) called "Reactant")))))) and (not (the1 of (the value of (the kb of Self))))) then (a PKb-Value with (value ((:pair (the1 of (the value of (the pOH of Self))) nil)))) [Hydrolysis-pkb-3])))))
    (acid-dissociation-ratio ((if (the Acid-Role plays of ((the raw-material of Self) called "Reactant")) then ((the exp of ((the log of 10) * ((the1 of (the value of (the pH of Self))) - (the1 of (the value of (the pka of Self))))))) [Hydrolysis-acid-dissociation-ratio-1])))
    (base-dissociation-ratio ((if (the Base-Role plays of ((the raw-material of Self) called "Reactant")) then ((the exp of ((the log of 10) * ((the1 of (the value of (the pOH of Self))) - (the1 of (the value of (the pkb of Self))))))) [Hydrolysis-base-dissociation-ratio-1])))
    (pH ((if (not (the pH of Self)) then ((the output of (a Compute-pH-for-Solution with (input ((a Aqueous-Solution with (base (((the raw-material of Self) called "Reactant"))))))))) [Hydrolysis-pH-1])))
    (pOH ((if (not (the pOH of Self)) then ((a POH-Value with (value ((:pair (14 - (the1 of (the value of (the pH of Self)))) ()))))) [Hydrolysis-pOH-1])))
    (kb-expression ((if ((not (the kb-expression of Self)) and (the Base-Role plays of ((the raw-material of Self) called "Reactant"))) then (the keq-expression of Self) [Hydrolysis-kb-expression-1])))
    (raw-material ((a Chemical called "Reactant")
                   (a H2O-Substance)))
    (result ((((if (((the raw-material of Self) called "Reactant") isa Nonelectrolyte) then (the raw-material of Self))) && ((if ((not (the result of Self)) and (((the raw-material of Self) called "Reactant") isa Salt-Substance)) then (the output of (a Compute-Hydrolysis-of-Salt-Result with (input (((the raw-material of Self) called "Reactant"))))))) && ((if (not ((the result of Self) or (((the raw-material of Self) called "Reactant") isa Salt-Substance))) then (the output of (a Compute-Hydrolysis-Result with (input (((the raw-material of Self) called "Reactant"))))) [Hydrolysis-result-1]))))))
(Hydrogen-Ion has 
    (superclasses (Cation))
    (description ("A proton in aqueous solution - the basis of acidity.
                        Such protons readily combine with water molecules to
                        form H3O+, so that hydrogen ions in a strict sense are
                        a rarity.  Alberts:ECB:G-9.")))

(every Hydrogen-Ion has 
    (has-part ((a Proton)))
    (mass ((a Mass-Value with (value ((:pair 1 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Hydrogen-Bond has 
    (superclasses (Noncovalent-Bond))
    (description ("A weak chemical bond between an electronegative 
                              atom such as nitrogen or oxygen and a hydrogen 
                              atom bound to another electronegative atom.
                              Alberts:ECB:G-9.")))

(every Hydrogen-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Hydrogen-Atom) (a Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 1 *kilocalorie/mole))))))
    (length ((a Length-Value with (value ((:pair 0.3 *nanometer)))))))
(Hydrogen-Atom has 
    (superclasses (Atom))
    (description ("A colorless, odorless, flammable element that combines
                        with oxygen to form water.  The lightest of all
                        elements. RHCD:1st Revised:649. ")))

(every Hydrogen-Atom has 
    (atomic-symbol ((H)))
    (has-part ((a Proton)
               (a Electron)))
    (mass ((a Mass-Value with (value ((:pair 1 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Hydrocarbon-Combustion-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((make-phrase (the output of (a Format-Equation with (input ((the chemical-equation of (a Reaction with (raw-material ((a CH4-Substance) (a O2-Substance)))))))))) = "CH4 + 2O2 --> 2HOH + CO2")))))

(every Hydrocarbon-Combustion-Reaction has 
    (result ((a H2O-Substance)
             (a CO2-Substance [Hydrocarbon-Combustion-Reaction-result-1]))))

(every Hydrocarbon-Combustion-Reaction has-definition 
    (instance-of (Reaction
                     [Hydrocarbon-Combustion-Reaction-instance-of-1]))
    (raw-material ((a O2-Substance)
                   (a Chemical with (has-basic-structural-unit ((a Chemical-Entity with (atomic-chemical-formula ((a Chemical-Formula) (constraint ((oneof (the elements of (the term of TheValue)) where ((the2 of It) = C)) and (oneof (the elements of (the term of TheValue)) where ((the2 of It) = H)) and (not (oneof (the elements of (the term of TheValue)) where (((the2 of It) /= C) and ((the2 of It) /= H) and ((the2 of It) /= O)))))))))))))))
(Hydrocarbon has 
    (superclasses (Molecule))
    (description ("A molecule or group containing at least one carbon with
                        at least one attached hydrogen. Souther. "))
    )

(every Hydrocarbon has 
    (text-postmodslots ((:seq is-part-of material content is-above is-along is-between is-behind is-opposite is-outside is-over is-beside is-at is-on abuts is-inside is-north-of is-northeast-of is-east-of is-southeast-of is-south-of is-southwest-of is-west-of is-northwest-of))))
(Hydride-Ion has 
    (superclasses (Ion))
    (description ("A negatively charged hydrogen ion. Souther.")))

(every Hydride-Ion has 
    (possesses ((a Electric-Charge with (polarity ((a Polarity-Value with (value ((*negative)))))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(HSO4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HSO4-Minus-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.012 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HSO4-Minus))))
(HSO4-Minus has 
    (superclasses (Anion)))

(every HSO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen sulfate"
                        "bisulfate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 S) (:pair 4 O))))))))
(HSO3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HSO3-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 6.4E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 5.88E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HSO3-Minus))))
(HSO3-Minus has 
    (superclasses (Anion)))

(every HSO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen sulfite"
                        "bisulfite"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 S) (:pair 3 O))))))))
(HSeO4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HSeO4-Minus-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.022 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydrogen selenate ion"))
    (has-basic-structural-unit ((a HSeO4-Minus))))
(HSeO4-Minus has 
    (superclasses (Anion)))

(every HSeO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen selenate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 Se) (:pair 4 O))))))))
(HSeO3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HSeO3-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 5.3E-9 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 4.35E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HSeO3-Minus))))
(HSeO3-Minus has 
    (superclasses (Anion)))

(every HSeO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen selenite"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 Se) (:pair 3 O))))))))
(HS-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HS-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.3E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.05E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HS-Minus))))
(HS-Minus has 
    (superclasses (Anion)))

(every HS-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("bisulfide"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 S))))))))
(Hs has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Hs has 
    (atomic-symbol ((Hs)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 108 ()))))))
    (chemical-period (7)))
(HPO4-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every HPO4-Minus-2-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 4.2E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.69E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HPO4-Minus-2))))
(HPO4-Minus-2 has 
    (superclasses (Anion)))

(every HPO4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("hydrogen phosphate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 P) (:pair 4 O))))))))
(HONH3-Plus has 
    (superclasses (Cation)))

(every HONH3-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("Hydroxylammonium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 O) (:pair 1 N) (:pair 3 H))))))))
(HONH2-Substance has 
    (superclasses (Base)))

(every HONH2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.1E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Hydroxylamine"))
    (has-basic-structural-unit ((a HONH2))))
(HONH2 has 
    (superclasses (Ionic-Compound)))

(every HONH2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 O) (:pair 1 N) (:pair 2 H))))))))
(Hold has 
    (caused-by-class-of (Be-Held))
    (superclasses (Obstruct))
    (required-slot (object
                       agent))
    (cmap-correspondence ((:seq object "the thing Held")
                          (:seq agent "the Holder")))
    (test-case ('((*toy-train has (instance-of (Tangible-Entity))) (*little-johny has (instance-of (Living-Entity))) (a Hold with (object (*toy-train)) (agent (*little-johny))) (not (the Be-Held object-of of *toy-train)) (do-and-next (thelast Hold)) (the text-gen of (thelast Hold)) (has-value (the Be-Held object-of of *toy-train)) (*Move1 has (instance-of (Move)) (object (*toy-train))) (*Move2 has (instance-of (Move)) (object (*toy-train)) (agent (*little-johny))) (try-do *Move2) (the text-gen of (thelast Move)) (a Let-Go-Of with (object (*toy-train)) (agent (*little-johny))) (do-and-next (thelast Let-Go-Of)) (the text-gen of (thelast Let-Go-Of)) (not (has-value (the Be-Held object-of of *toy-train))) (*Move3 has (instance-of (Move)) (object (*toy-train))) (try-do *Move3) (the text-gen of (thelast Move)))))
    (wn16-synset ((:set (:triple "hold" 3 "v") (:triple "hold" 16 "v") (:triple "hold_up" 1 "v") (:triple "support" 4 "v") (:triple "sustain" 5 "v") (:triple "take_hold" 2 "v"))))
    (wn20-synset ((:set (:triple "hold" 3 "v") (:triple "hold" 15 "v") (:triple "hold_up" 1 "v") (:triple "support" 4 "v") (:triple "sustain" 5 "v") (:triple "take_hold" 2 "v")))))

(every Hold has 
    (object ((a Tangible-Entity)))
    (agent ((a Tangible-Entity)))
    (resulting-state ((a Be-Held)))
    (soft-pcs-list ((forall (the object of Self) (forall2 (the agent of Self) (:triple It is-at It2)))))
    (add-list ((:triple (the resulting-state of Self) agent (the agent of Self) [Hold-add-1])))
    (dcs-list ((forall (the agent of Self) (:triple It abuts (the object of Self) [Hold-dcs-1]))))
    (interrupted-by ((must-be-a Let-Go-Of with (object ((the object of Self))) (agent ((the agent of Self))) [Hold-interrupted-1])))
    (text-active-verbseq-sg ("holds"))
    (text-active-verbseq-pl ("hold"))
    (text-passive-verbseq-sg ("gets held"))
    (text-passive-verbseq-pl ("get held"))
    (text-nominalization ("holding")))
(HO2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HO2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 0.04 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HO2-Minus))))
(HO2-Minus has 
    (superclasses (Anion)))

(every HO2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 2 O))))))))
(HNO3-Substance has 
    (superclasses (Acid)))

(every HNO3-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-basic-structural-unit ((a HNO3))))
(HNO3 has 
    (superclasses (Ionic-Compound)))

(every HNO3 has 
    (has-part ((a H-Plus)
               (a NO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 NO3-Minus))))))))
(HNO2-Substance has 
    (superclasses (Acid)))

(every HNO2-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 4.5E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Nitrous"))
    (has-basic-structural-unit ((a HNO2))))
(HNO2 has 
    (superclasses (Ionic-Compound)))

(every HNO2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a NO2-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 NO2-Minus))))))))
(HN3-Substance has 
    (superclasses (Acid)))

(every HN3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.9E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydroazoic"))
    (has-basic-structural-unit ((a HN3))))
(HN3 has 
    (superclasses (Ionic-Compound)))

(every HN3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a N3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 N3-Minus))))))))
(Histone-Complex has 
    (superclasses (Protein-Complex
                      Aggregate))
    (description ("A Aggregate of basic proteins, rich in arginine and
                        lysine, that are associated with DNA in chromosomes.
                        Alberts:ECB:G-9.")))

(every Histone-Complex has 
    (element-type ((Histone)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Histone has 
    (superclasses (DNA-Regulatory-Protein))
    (description ("One of a group of basic proteins, rich in arginine and
                        lysine, that are associated with DNA in chromosomes.
                        Alberts:ECB:G-9.")))
(Histidine has 
    (superclasses (Essential-Amino-Acid
                      Basic-Amino-Acid))
    (description ("A charged polar amino acid with an imidazole derived
                        side chain.  Souther.")))

(every Histidine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methyl-Group with (object-of ((a Be-Attached-To with (object ((the Imidazole has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Imidazole has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-5") (the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))))))))) (a Imidazole)))))))
(HIO3-Substance has 
    (superclasses (Acid)))

(every HIO3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.17 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Iodic"))
    (has-basic-structural-unit ((a HIO3))))
(HIO3 has 
    (superclasses (Ionic-Compound)))

(every HIO3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a IO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 IO3-Minus))))))))
(HIO-Substance has 
    (superclasses (Acid)))

(every HIO-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 2.0E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hypoiodous"))
    (has-basic-structural-unit ((a HIO))))
(HIO has 
    (superclasses (Ionic-Compound)))

(every HIO has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a IO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 IO-Minus))))))))
(Hills has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Hills has 
    (trafficability ((a Trafficability-Value with (value ((:pair *R Armor-Unit) (:pair *R Mechanized-Infantry-Unit) (:pair *UR Light-Infantry-Unit)))))))
(High-Energy-Bond has 
    (superclasses (Chemical-Bond))
    (description ("Covalent bond whose hydrolysis releases an unusually
                        large amount of free energy under the conditions
                        existing in a cell.  Examples include the 
                        phosphodiester bonds in ATP and the thioester linkage
                        in acetyl CoA. Alberts:ECB:G-9")))
(HI-Substance has 
    (superclasses (Acid)))

(every HI-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-basic-structural-unit ((a HI))))
(HI has 
    (superclasses (Ionic-Compound)))

(every HI has 
    (has-part ((a H-Plus)
               (a I-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 I-Minus))))))))
(Hg2-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Hg2-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("mercury(I)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Hg))))))))
(Hg-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Hg-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("mercury(II)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Hg))))))))
(Hg has 
    (superclasses (Metal-Atom
                      IIB-Element)))

(every Hg has 
    (atomic-symbol ((Hg)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 80 ()))))))
    (chemical-period (6)))
(HF-Substance has 
    (superclasses (Acid)))

(every HF-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 6.8E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydrofluoric"))
    (has-basic-structural-unit ((a HF-Compound))))
(HF-Compound has 
    (superclasses (Ionic-Compound)))

(every HF-Compound has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a F-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 F-Minus))))))))
(Hf has 
    (superclasses (Metal-Atom
                      IVB-Element)))

(every Hf has 
    (atomic-symbol ((Hf)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 72 ()))))))
    (chemical-period (6)))
(Hexose has 
                        
    (superclasses (Monosaccharide))
    (description ("A six-carbon monosaccharide. Lodish:MCB:G-8.")))

(every Hexose has 
    (has-part ((exactly 6 Carbon-Atom))))
(Heterocyclic-Compound has 
    (superclasses (Ring-Compound))
    (description ("A ring compound in which there are two or
                                      more ring members.  In organic compounds
                                      the other atom is typically nitrogen or 
                                      oxygen.  Souther."))
    )
(Height-Scale has 
    (scale-class-of (height))
                                 
    (superclasses (Scale)))
(Height-Constant has 
    (scalar-constant-class-of (height))
    (element-type-of (*short-tall-scale))
    (superclasses (Constant))
    )
(Heat has 
    (superclasses (Increase))
    (test-case ('((*mytea has (instance-of (Substance)) (temperature (*myteatemperature))) (*myteatemperature has (instance-of (Temperature-Value)) (value ((:pair *cool Substance)))) (a Increase with (object (*mytea)) (property-slot (temperature))) ((thelast Increase) isa Heat) (do-and-next (thelast Heat)) ((the greater-than of (the temperature of *mytea)) includes *myteatemperature))))
    (wn20-synset ((:set (:triple "heat" 1 "v") (:triple "heat_up" 2 "v") (:triple "heat" 4 "v") (:triple "hot_up" 1 "v") (:triple "heat_up" 1 "v")))))

(every Heat has 
    (text-nominalization ("heating")))

(every Heat has-definition 
    (instance-of (Increase))
    (property-slot ((temperature))))
(Hear has 
    (description ("Sensing a sound auditorily."))
    (superclasses (Sense))
    (wn20-synset ((:set (:triple "hear" 1 "v")))))

(every Hear has 
    (object ((a Sound)
             (must-be-a Sound)))
    (text-nominalization ("hearing")))
(Healing has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "healing" 1 "n")))))

(every Healing has 
    (text-nominalization ("healing")))
(Head-Shake has 
    (superclasses (Gesticulate))
    (description ("The physical act of turning the head side to side, possibly repeatedly, so as to Embody a Gesture indicating dissent."))
    (wn20-synset ((:set (:triple "headshake" 1 "n") (:triple "headshaking" 1 "n")))))

(every Head-Shake has 
    (agent ((:default (a Animal))))
    (text-nominalization ("shaking")))
(Head-Nod has 
    (superclasses (Gesticulate))
    (description ("The physical act of moving the head up and down, possibly repeatedly, so as to Embody a Gesture indicating assent."))
    (wn20-synset ((:set (:triple "nod" 1 "v") (:triple "nod" 2 "v")))))

(every Head-Nod has 
    (agent ((:default (a Animal))))
    (text-nominalization ("nodding")))
(He has 
    (superclasses (Non-Metal-Atom
                      Noble-Gas-Element)))

(every He has 
    (atomic-symbol ((He)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 2 ()))))))
    (chemical-period (1)))
(HCrO4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HCrO4-Minus-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 3.0E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydrogen chromate ion"))
    (has-basic-structural-unit ((a HCrO4-Minus))))
(HCrO4-Minus has 
    (superclasses (Anion)))

(every HCrO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen chromate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 Cr) (:pair 4 O))))))))
(HCO3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HCO3-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 5.6E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.33E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HCO3-Minus))))
(HCO3-Minus has 
    (superclasses (Anion)))

(every HCO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen carbonate"
                        "bicarbonate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 C) (:pair 3 O))))))))
(HCNO-Substance has 
    (superclasses (Acid)))

(every HCNO-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 3.5E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Cyanic"))
    (has-basic-structural-unit ((a HCNO))))
(HCNO has 
    (superclasses (Ionic-Compound)))

(every HCNO has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a CNO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 CNO-Minus))))))))
(HCN-Substance has 
    (superclasses (Acid)))

(every HCN-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 4.9E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydrocyanic"))
    (has-basic-structural-unit ((a HCN))))
(HCN has 
    (superclasses (Ionic-Compound)))

(every HCN has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a CN-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 CN-Minus))))))))
(HClO4-Substance has 
    (superclasses (Acid)))

(every HClO4-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-basic-structural-unit ((a HClO4))))
(HClO4 has 
    (superclasses (Ionic-Compound)))

(every HClO4 has 
    (has-part ((a H-Plus)
               (a ClO4-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 ClO4-Minus))))))))
(HClO3-Substance has 
    (superclasses (Acid)))

(every HClO3-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-basic-structural-unit ((a HClO3))))
(HClO3 has 
    (superclasses (Ionic-Compound)))

(every HClO3 has 
    (has-part ((a H-Plus)
               (a ClO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 ClO3-Minus))))))))
(HClO2 has 
    (superclasses (Ionic-Compound)))

(every HClO2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a ClO2-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 ClO2-Minus))))))))
(HClO-Substance has 
    (superclasses (Acid)))

(every HClO-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 3.0E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hypochlorous"))
    (has-basic-structural-unit ((a HClO))))
(HClO has 
    (superclasses (Ionic-Compound)))

(every HClO has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a ClO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 ClO-Minus))))))))
(HCl-Substance has 
    (superclasses (Acid)))

(every HCl-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-chemical-name ("Hydrochloric"))
    (has-basic-structural-unit ((a HCl))))
(HCl has 
    (superclasses (Ionic-Compound)))

(every HCl has 
    (has-chemical-name (""))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 Cl-Minus))))))))
(HCHO2-Substance has 
    (superclasses (Acid)))

(every HCHO2-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.8E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Formic"))
    (has-basic-structural-unit ((a HCHO2))))
(HCHO2 has 
    (superclasses (Ionic-Compound)))

(every HCHO2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a CHO2-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 CHO2-Minus))))))))
(HC7H5O2-Substance has 
    (superclasses (Acid)))

(every HC7H5O2-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 6.5E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Benzoic"))
    (has-basic-structural-unit ((a HC7H5O2))))
(HC7H5O2 has 
    (superclasses (Ionic-Compound)))

(every HC7H5O2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C7H5O2-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C7H5O2-Minus))))))))
(HC6H7O6 has 
    (superclasses (Ionic-Compound)))

(every HC6H7O6 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C6H7O6-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C6H7O6-Minus))))))))
(HC6H6O6-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HC6H6O6-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.6E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.25E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HC6H6O6-Minus))))
(HC6H6O6-Minus has 
    (superclasses (Anion)))

(every HC6H6O6-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 6 C) (:pair 6 H) (:pair 6 O))))))))
(HC6H5O7-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every HC6H5O7-Minus-2-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 4.0E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 5.88E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HC6H5O7-Minus-2))))
(HC6H5O7-Minus-2 has 
    (superclasses (Anion)))

(every HC6H5O7-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 6 C) (:pair 5 H) (:pair 7 O))))))))
(HC6H5O-Substance has 
    (superclasses (Acid)))

(every HC6H5O-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.3E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Phenol"))
    (has-basic-structural-unit ((a HC6H5O))))
(HC6H5O has 
    (superclasses (Ionic-Compound)))

(every HC6H5O has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C6H5O-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C6H5O-Minus))))))))
(HC4H7O2 has 
    (superclasses (Ionic-Compound)))

(every HC4H7O2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C4H7O2-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C4H7O2-Minus))))))))
(HC4H4O6-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HC4H4O6-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 4.6E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.0E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HC4H4O6-Minus))))
(HC4H4O6-Minus has 
    (superclasses (Anion)))

(every HC4H4O6-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 4 C) (:pair 4 H) (:pair 6 O))))))))
(HC3H5O3-Substance has 
    (superclasses (Acid)))

(every HC3H5O3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.4E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Lactic"))
    (has-basic-structural-unit ((a HC3H5O3))))
(HC3H5O3 has 
    (superclasses (Ionic-Compound)))

(every HC3H5O3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C3H5O3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C3H5O3-Minus))))))))
(HC3H5O2-Substance has 
    (superclasses (Acid)))

(every HC3H5O2-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.3E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Propionic"))
    (has-basic-structural-unit ((a HC3H5O2))))
(HC3H5O2 has 
    (superclasses (Ionic-Compound)))

(every HC3H5O2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C3H5O2-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C3H5O2-Minus))))))))
(HC3H2O4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HC3H2O4-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 2.0E-6 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 6.66E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HC3H2O4-Minus))))
(HC3H2O4-Minus has 
    (superclasses (Anion)))

(every HC3H2O4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 3 C) (:pair 2 H) (:pair 4 O))))))))
(HC2O4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every HC2O4-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 6.4E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.69E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HC2O4-Minus))))
(HC2O4-Minus has 
    (superclasses (Anion)))

(every HC2O4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydrogen oxalate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 2 C) (:pair 4 O))))))))
(HC2H3O2-Substance has 
    (superclasses (Acid)))

(every HC2H3O2-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.8E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Acetic"))
    (has-basic-structural-unit ((a HC2H3O2))))
(HC2H3O2 has 
    (superclasses (Ionic-Compound)))

(every HC2H3O2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a CH3COO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 CH3COO-Minus))))))))
(HC2H2O2Cl-Substance has 
    (superclasses (Acid)))

(every HC2H2O2Cl-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.0014 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Chloroacetic"))
    (has-basic-structural-unit ((a HC2H2O2Cl))))
(HC2H2O2Cl has 
    (superclasses (Ionic-Compound)))

(every HC2H2O2Cl has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C2H2O2Cl-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C2H2O2Cl-Minus))))))))
(HBrO-Substance has 
    (superclasses (Acid)))

(every HBrO-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 2.0E-9 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hypobromous"))
    (has-basic-structural-unit ((a HBrO))))
(HBrO has 
    (superclasses (Ionic-Compound)))

(every HBrO has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a BrO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 BrO-Minus))))))))
(HBr-Substance has 
    (superclasses (Acid)))

(every HBr-Substance has 
    (plays ((a Acid-Role)))
    (has-basic-structural-unit ((a HBr))))
(HBr has 
    (superclasses (Ionic-Compound)))

(every HBr has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 Br-Minus))))))))
(HBO3-Minus-2 has 
    (superclasses (Anion)))

(every HBO3-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("hydrogen borate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 B) (:pair 3 O))))))))
(HAsO4-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every HAsO4-Minus-2-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 3.0E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.0E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a HAsO4-Minus-2))))
(HAsO4-Minus-2 has 
    (superclasses (Anion)))

(every HAsO4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("hydrogen arsenate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 As) (:pair 4 O))))))))
(Harm has 
    (superclasses (Impair))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq agent "the entity doing harm")
                          (:seq object "the thing harmed"))))

(every Harm has 
    (object ((a Living-Entity)))
    (text-active-verbseq-sg ("harms"))
    (text-active-verbseq-pl ("harm"))
    (text-passive-verbseq-sg ("gets harmed"))
    (text-passive-verbseq-pl ("get harmed"))
    (text-nominalization ("harm")))
(Halogen-Element has 
                                                                                         
    (superclasses (Atom)))
(Hallway has 
    (superclasses (Room))
    (wn20-synset ((:set (:triple "hallway" 1 "n")))))
(Half-Replicon-Replication has 
    (superclasses (DNA-Double-Strand-Replication))
    (required-slot (object
                       result))
    (primary-slot (origin
                      destination
                      instrument))
    (description ("A process by which a copy of one half of the
                                replicon is copied by proceeding along one of
                                the two replication forks originating at the
                                replication origin. see Mathews:BC:1160")))

(every Half-Replicon-Replication has 
    (origin ((a Replication-Origin)))
    (destination ((a Base-Pair with (has-part ((the 5-Prime-Deoxyribonucleotide has-part of ((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "leading strand template")) (the 3-Prime-Deoxyribonucleotide has-part of ((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template")))))))
    (object ((a DNA-Molecule-Segment with (is-part-of ((the Replicon object of Self))) (has-part ((a DNA-Sequence called "leading strand template" with (is-part-of ((the DNA-Sequence has-part of (the Replicon object of Self))))) (a DNA-Sequence called "lagging strand template" with (is-part-of ((the DNA-Sequence has-part of (the Replicon object of Self))))))))))
    (result ((a DNA-Molecule-Segment called "leading strand segment" with (has-part (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "leading strand template") (a DNA-Sequence called "Daughter strand complement of leading strand" with (complement (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "leading strand template")))))))
             (a DNA-Molecule-Segment called "lagging strand segment" with (has-part (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template") (a DNA-Sequence called "Daughter strand complement of lagging strand" with (complement (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template")))))))))
    (first-subevent (((the Attach subevent of Self) called "clamp the lagging strand")))
    (subevent ((a Attach called "clamp the lagging strand" with (object ((a DNA-Helicase))) (base (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template"))) (next-event ((the Divide subevent of Self))))
               (a Divide called "DNA strand separation" with (object ((the DNA-Molecule-Segment object of Self))) (origin ((the Replication-Origin origin of Self))) (destination ((the destination of Self))) (result (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "leading strand template") ((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template"))) (next-event (((the Attach subevent of Self) called "binding of SSBPs to leading strand") ((the Attach subevent of Self) called "binding of SSBPs to lagging strand"))) (time-int-overlaps (((the Attach subevent of Self) called "binding of SSBPs to leading strand") ((the Attach subevent of Self) called "binding of SSBPs to lagging strand"))))
               (a Attach called "binding of SSBPs to leading strand" with (object ((a Sequence with (element-type ((Single-Strand-Binding-Protein)))))) (base (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "leading strand template"))) (next-event (((the DNA-Strand-Replication subevent of Self) called "leading strand replication"))) (time-int-overlaps (((the DNA-Strand-Replication subevent of Self) called "leading strand replication"))))
               (a Attach called "binding of SSBP's to lagging strand" with (object ((a Sequence with (element-type ((Single-Strand-Binding-Protein)))))) (base (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template"))) (next-event (((the DNA-Strand-Replication subevent of Self) called "lagging strand replication"))) (time-int-overlaps (((the DNA-Strand-Replication subevent of Self) called "lagging strand replication"))))
               (a DNA-Strand-Replication called "leading strand replication" with (object (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "leading strand template"))) (result (((the DNA-Molecule-Segment result of Self) called "leading strand segment"))) (subevent ((a DNA-Priming with (object ((a 3-Prime-End called "primer template" with (abuts ((a Replication-Fork with (is-at ((the Replication-Origin origin of Self))))))))) (next-event (((the DNA-Strand-Replication subevent of Self) called "lagging strand replication"))) (time-int-overlaps (((the DNA-Strand-Replication subevent of Self) called "lagging strand replication")))))))
               (a DNA-Strand-Replication called "lagging strand replication" with (object (((the DNA-Sequence has-part of (the DNA-Molecule-Segment object of Self)) called "lagging strand template"))) (result (((the DNA-Molecule-Segment result of Self) called "lagging strand segment"))) (subevent ((a Okazaki-Fragment-Replication))) (time-int-overlapped-by (((the DNA-Strand-Replication subevent of Self) called "leading strand replication")))))))
(H5IO6-Substance has 
    (superclasses (Acid)))

(every H5IO6-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.028 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Paraperiodic"))
    (has-basic-structural-unit ((a H5IO6))))
(H5IO6 has 
    (superclasses (Ionic-Compound)))

(every H5IO6 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a IO6-Minus-5)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 5 H-Plus) (:pair 1 IO6-Minus-5))))))))
(H4P2O7-Substance has 
    (superclasses (Acid)))

(every H4P2O7-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.03 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Pyrophosphoric"))
    (has-basic-structural-unit ((a H4P2O7))))
(H4P2O7 has 
    (superclasses (Ionic-Compound)))

(every H4P2O7 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a P2O7-Minus-4)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 4 H-Plus) (:pair 1 P2O7-Minus-4))))))))
(H4IO6-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H4IO6-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 5.3E-9 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 3.57E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H4IO6-Minus))))
(H4IO6-Minus has 
    (superclasses (Anion)))

(every H4IO6-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("tetrahydrogen orthoperiodate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 4 H) (:pair 1 I) (:pair 6 O))))))))
(H3PO4-Substance has 
    (superclasses (Acid)))

(every H3PO4-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.0075 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Phosphoric"))
    (has-basic-structural-unit ((a H3PO4))))
(H3PO4 has 
    (superclasses (Ionic-Compound)))

(every H3PO4 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a PO4-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H-Plus) (:pair 1 PO4-Minus-3))))))))
(H3P2O7-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H3P2O7-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.0044 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 3.33E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H3P2O7-Minus))))
(H3P2O7-Minus has 
    (superclasses (Anion)))

(every H3P2O7-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("trihydrogen pyrophosphate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H) (:pair 2 P) (:pair 7 O))))))))
(H3O-Plus-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every H3O-Plus-Substance has 
    (has-basic-structural-unit ((a H3O-Plus))))
(H3O-Plus has 
    (superclasses (Cation)))

(every H3O-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("hydronium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H) (:pair 1 O))))))))
(H3NOH-Plus has 
    (superclasses (Cation)))

(every H3NOH-Plus has 
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 4 H) (:pair 1 O)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H) (:pair 1 N) (:pair 1 O) (:pair 1 H)))))))
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge)))))))
(H3IO6-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every H3IO6-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.89E-6 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H3IO6-Minus-2))))
(H3IO6-Minus-2 has 
    (superclasses (Anion)))

(every H3IO6-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("trihydrogen orthoperiodate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H) (:pair 1 I) (:pair 6 O))))))))
(H3C6H5O7-Substance has 
    (superclasses (Acid)))

(every H3C6H5O7-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 7.4E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Citric"))
    (has-basic-structural-unit ((a H3C6H5O7))))
(H3C6H5O7 has 
    (superclasses (Ionic-Compound)))

(every H3C6H5O7 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C6H5O7-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H-Plus) (:pair 1 C6H5O7-Minus-3))))))))
(H3BO3-Substance has 
    (superclasses (Acid)))

(every H3BO3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 5.8E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Boric"))
    (has-basic-structural-unit ((a H3BO3))))
(H3BO3 has 
    (superclasses (Ionic-Compound)))

(every H3BO3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a BO3-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H-Plus) (:pair 1 BO3-Minus-3))))))))
(H3AsO4-Substance has 
    (superclasses (Acid)))

(every H3AsO4-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.0056 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Arsenic"))
    (has-basic-structural-unit ((a H3AsO4))))
(H3AsO4 has 
    (superclasses (Ionic-Compound)))

(every H3AsO4 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a AsO4-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H-Plus) (:pair 1 AsO4-Minus-3))))))))
(H3AsO3-Substance has 
    (superclasses (Acid)))

(every H3AsO3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 6.0E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Arsenous"))
    (has-basic-structural-unit ((a H3AsO3))))
(H3AsO3 has 
    (superclasses (Ionic-Compound)))

(every H3AsO3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a AsO3-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 H-Plus) (:pair 1 AsO3-Minus-3))))))))
(H2SO4-Substance has 
    (superclasses (Acid)))

(every H2SO4-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-chemical-name ("Sulfuric"))
    (has-basic-structural-unit ((a H2SO4))))
(H2SO4 has 
    (superclasses (Ionic-Compound)))

(every H2SO4 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 SO4-Minus-2))))))))
(H2SO3-Substance has 
    (superclasses (Acid)))

(every H2SO3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.017 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Sulfurous"))
    (has-basic-structural-unit ((a H2SO3))))
(H2SO3 has 
    (superclasses (Ionic-Compound)))

(every H2SO3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a SO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 SO3-Minus-2))))))))
(H2SiF6-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every H2SiF6-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Acid)))))))))
    (has-basic-structural-unit ((a H2SiF6))))
(H2SiF6 has 
    (superclasses (Ionic-Compound)))

(every H2SiF6 has 
    (has-part ((a H-Plus)
               (a SiF6-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 SiF6-Minus-2))))))))
(H2SeO3-Substance has 
    (superclasses (Acid)))

(every H2SeO3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.0023 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Selenous"))
    (has-basic-structural-unit ((a H2SeO3))))
(H2SeO3 has 
    (superclasses (Ionic-Compound)))

(every H2SeO3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a SeO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 SeO3-Minus-2))))))))
(H2S-Substance has 
    (superclasses (Acid)))

(every H2S-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 5.7E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydrogen sulfide"))
    (has-basic-structural-unit ((a H2S))))
(H2S has 
    (superclasses (Ionic-Compound)))

(every H2S has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a S-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 S-Minus-2))))))))
(H2PO4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H2PO4-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 6.2E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.33E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H2PO4-Minus))))
(H2PO4-Minus has 
    (superclasses (Anion)))

(every H2PO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("dihydrogen phosphate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 P) (:pair 4 O))))))))
(H2P2O7-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every H2P2O7-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.27E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H2P2O7-Minus-2))))
(H2P2O7-Minus-2 has 
    (superclasses (Anion)))

(every H2P2O7-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("dihydrogen pyrophosphate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 2 P) (:pair 7 O))))))))
(H2O2-Substance has 
    (superclasses (Acid)))

(every H2O2-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 2.4E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Hydrogen peroxide"))
    (has-basic-structural-unit ((a H2O2))))
(H2O2 has 
    (superclasses (Ionic-Compound)))

(every H2O2 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a O2-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 O2-Minus-2))))))))
(H2O-Substance has 
    (superclasses (Amphoteric-Substance
                      Ionic-Compound-Substance))
    (member-of (_Partition9)))

(every H2O-Substance has 
    (has-basic-structural-unit ((a H2O))))
(H2O has 
    (superclasses (Ionic-Compound)))

(every H2O has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 OH-Minus))))))))
(H2NNH3-Plus-Substance has 
    (superclasses (Cation-Substance)))

(every H2NNH3-Plus-Substance has 
    (has-basic-structural-unit ((a H2NNH3-Plus))))
(H2NNH3-Plus has 
    (superclasses (Cation)))

(every H2NNH3-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("hydrazinium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 N) (:pair 1 N) (:pair 3 H))))))))
(H2NNH2-Substance has 
    (superclasses (Base)))

(every H2NNH2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.3E-6 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Hydrazine"))
    (has-basic-structural-unit ((a H2NNH2))))
(H2NNH2 has 
    (superclasses (Ionic-Compound)))

(every H2NNH2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 N) (:pair 1 N) (:pair 2 H))))))))
(H2CO3-Substance has 
    (superclasses (Acid)))

(every H2CO3-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 4.3E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Carbonic"))
    (has-basic-structural-unit ((a H2CO3))))
(H2CO3 has 
    (superclasses (Ionic-Compound)))

(every H2CO3 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a CO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 CO3-Minus-2))))))))
(H2C6H6O6-Substance has 
    (superclasses (Acid)))

(every H2C6H6O6-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 8.0E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Ascorbic"))
    (has-basic-structural-unit ((a H2C6H6O6))))
(H2C6H6O6 has 
    (superclasses (Ionic-Compound)))

(every H2C6H6O6 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C6H6O6-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 C6H6O6-Minus-2))))))))
(H2C6H5O7-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H2C6H5O7-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.7E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.35E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H2C6H5O7-Minus))))
(H2C6H5O7-Minus has 
    (superclasses (Anion)))

(every H2C6H5O7-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 6 C) (:pair 5 H) (:pair 7 O))))))))
(H2C4H4O6-Substance has 
    (superclasses (Acid)))

(every H2C4H4O6-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.001 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Tartaric"))
    (has-basic-structural-unit ((a H2C4H4O6))))
(H2C4H4O6 has 
    (superclasses (Ionic-Compound)))

(every H2C4H4O6 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C4H4O6-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 C4H4O6-Minus-2))))))))
(H2C3H2O4-Substance has 
    (superclasses (Acid)))

(every H2C3H2O4-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.0015 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Malonic"))
    (has-basic-structural-unit ((a H2C3H2O4))))
(H2C3H2O4 has 
    (superclasses (Ionic-Compound)))

(every H2C3H2O4 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C3H2O4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 C3H2O4-Minus-2))))))))
(H2C2O4-Substance has 
    (superclasses (Acid)))

(every H2C2O4-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 0.059 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("Oxalic"))
    (has-basic-structural-unit ((a H2C2O4))))
(H2C2O4 has 
    (superclasses (Ionic-Compound)))

(every H2C2O4 has 
    (has-chemical-name (""))
    (has-part ((a H-Plus)
               (a C2O4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H-Plus) (:pair 1 C2O4-Minus-2))))))))
(H2BO3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H2BO3-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.72E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H2BO3-Minus))))
(H2BO3-Minus has 
    (superclasses (Anion)))

(every H2BO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("dihydrogen borate"))
    (has-acid-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 B) (:pair 3 O))))))))
(H2AsO4-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H2AsO4-Minus-Substance has 
    (plays (((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.0E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid))))))))
            ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.79E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H2AsO4-Minus))))
(H2AsO4-Minus has 
    (superclasses (Anion)))

(every H2AsO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("dihydrogen arsenate"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 As) (:pair 4 O))))))))
(H2AsO3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every H2AsO3-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.96E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a H2AsO3-Minus))))
(H2AsO3-Minus has 
    (superclasses (Anion)))

(every H2AsO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("dihydrogen arsenite"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 As) (:pair 3 O))))))))
(H2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every H2-Substance has 
    (has-basic-structural-unit ((a H2))))
(H2 has 
    (superclasses (Molecular-Compound)))

(every H2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H))))))))
(H-Plus has 
    (superclasses (Cation)))

(every H-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("hydrogen"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H))))))))
(H-Minus has 
    (superclasses (Anion)))

(every H-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hydride"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H))))))))
(H has 
    (superclasses (Non-Metal-Atom
                      Alkali-Metal-Element)))

(every H has 
    (atomic-symbol ((H)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 1 ()))))))
    (chemical-period (1)))
(Guard has 
    (superclasses (Engagement-Military-Task))
    (description ("A military task to protect a friendly unit by defeating, causing the withdrawal of or fixing an enemy ground force")))

(every Guard has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit with (allegiance ((the allegiance of (the agent of Self)))))))
    (base ((a Military-Unit)
           (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the base of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.5 ()))))))
    (text-active-verbseq-sg ("guards"))
    (text-active-verbseq-pl ("guard"))
    (text-base ("against"))
    (text-argslots ((:seq base site))))
(Guanosine has 
                                   
    (superclasses (Ribonucleoside))
    (description ("A nucleoside containing guanine and ribose that
                         when joined with a monophosphate forms one of the four
                         nucleotides in RNA.  Souther.")))

(every Guanosine has 
    (has-part ((a Guanine with (object-of ((a Be-Attached-To with (object ((the Ribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site ((((the Carbon-Atom has-part of (the Ribose has-part of Self)) called "Carbon-1")) (((the Nitrogen-Atom has-part of (the Guanine has-part of Self)) called "Nitrogen-9"))))))))
               (a Ribose))))
(Guanine has 
    (superclasses (Purine))
    (description ("A purine base which combines with a ribose base to form
                        guanosine.  Guanosine phosphates are prominent
                        molecules in cells as GTP which participates in cell
                        signaling metabolism and nucleotides.
                        Souther. ")))

(every Guanine has 
    (complement ((a Cytosine)))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "N1-H" with (object (((the has-part of Self) uniquely-called "N1-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-AG" with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Double-Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C4-N9" with (object (((the has-part of Self) uniquely-called "Nitrogen-9"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Double-Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C5-N7" with (object (((the has-part of Self) uniquely-called "Nitrogen-7"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C6-O" with (object ((the Oxygen-Atom has-part of Self))) (instrument ((a Double-Covalent-CO-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-7" with (object-of ((a Be-Attached-To uniquely-called "C5-N7" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C8-N7" with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-8" with (object-of ((a Be-Attached-To uniquely-called "C8-N7" with (object (((the has-part of Self) uniquely-called "Nitrogen-7"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C8-N9" with (object (((the has-part of Self) uniquely-called "Nitrogen-9"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C8-H" with (object (((the has-part of Self) uniquely-called "C8-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-9" with (object-of ((a Be-Attached-To uniquely-called "N9-H" with (object (((the has-part of Self) uniquely-called "N9-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))) (a Be-Attached-To uniquely-called "C4-N9" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C8-N9" with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Oxygen-Atom)
               (a Hydrogen-Atom uniquely-called "C8-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N9-Hydrogen"))))
(GTP has 
    (superclasses (Ribonucleoside-Triphosphate))
    (description ("Major nucleoside triphosphate used in the synthesis of
                        RNA and in some energy-transfer reactions.  Has a
                        special role in microtubule assembly, protein 
                        synthesis, and cell signaling.  Alberts:ECB:G-9.")))

(every GTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Guanosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Guanosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Guanosine))))
(Group has 
                                           
    (superclasses (Organization))
    (description ("a relatively small organization of Roles"))
    (wn20-synset ((:set (:triple "working_group" 1 "n") (:triple "working_party" 1 "n") (:triple "unit" 3 "n")))))
(Golgi-Apparatus has 
    (superclasses (Organelle))
    (description ("Membrane-bounded organelle in eucaryotic cells, where 
                       the proteins and lipids made in the endoplasmic 
                       reticulum are modified and sorted.  Alberts:ECB:G-8.")))

(every Golgi-Apparatus has 
    (has-part ((a Vesicle)
               (at-least 3 Vesicle))))
(Goal has 
    (superclasses (Event))
    (test-case ('((new-situation) (*yourMoney has (instance-of (Physical-Object)) (is-possessed-by (*you))) (*myThievery has (instance-of (Event)) (objective ((a Obtain with (object (*yourMoney)))))) (*you has (instance-of (Physical-Object)) (has-goal ((a Goal with (prevents (*myThievery)))))))))
    (wn20-synset ((:set (:triple "goal" 1 "n") (:triple "end" 4 "n") (:triple "finish" 4 "n") (:triple "destination" 1 "n") (:triple "goal" 4 "n")))))

(every Goal has 
    (text-gen ((make-sentence (:seq "The goal" (if (has-value (the objective-of of Self)) then (:seq "of" (the name of (the objective-of of Self))) else (if (has-value (the is-goal-of of Self)) then (:seq "of" (the text-def-head of (the is-goal-of of Self))))) "is" (if (has-value (the causes of Self)) then (:seq "to cause:" (the text-sentence of (the causes of Self))) else (if (has-value (the prevents of Self)) then (:seq "to prevent:" (the text-sentence of (the prevents of Self))) else (if (has-value (the enables of Self)) then (:seq "to enable:" (the text-sentence of (the enables of Self))) else (if (has-value (the inhibits of Self)) then (:seq "to inhibit:" (the text-sentence of (the inhibits of Self))) else (if (has-value (the supports of Self)) then (:seq "to support:" (the text-sentence of (the supports of Self))) else ("unknown"))))))))))
    (text-description ((the text-gen of Self))))
(Go-To has 
    (superclasses (Locomotion))
    (required-slot (agent
                       object
                       destination))
    (primary-slot (origin
                      path))
    (cmap-correspondence ((:seq object "the thing moved")
                          (:seq agent "the mover")
                          (:seq origin "moved from")
                          (:seq destination "moved to")
                          (:seq path "moved through")
                          (:seq toward "moved toward")
                          (:seq away-from "moved away from")))
    (test-case ('((new-situation) (*Gracie-Lou has (instance-of (Physical-Object))) (*Bass-Hall has (instance-of (Physical-Object))) (a Go-To with (agent (*Gracie-Lou)) (destination (*Bass-Hall))) (do-and-next (thelast Go-To)) (the text-gen of (thelast Go-To)) ((the location of *Gracie-Lou) = (the location of *Bass-Hall)))))
    (wn16-synset ((:set (:triple "go" 1 "v") (:triple "locomote" 1 "v") (:triple "move" 1 "v") (:triple "travel" 1 "v") (:triple "reach" 1 "v"))))
    (wn20-synset ((:set (:triple "go" 1 "v") (:triple "locomote" 1 "v") (:triple "move" 1 "v") (:triple "travel" 1 "v") (:triple "reach" 1 "v"))))
    )

(every Go-To has 
    (destination ((a Spatial-Entity)))
    (text-active-verbseq-sg ("goes"))
    (text-active-verbseq-pl ("go"))
    (text-argslots ((:seq destination)))
    (preparatory-event ((:default (a Leave with (destination ((the origin of Self))) (object ((the object of Self)))))))
    (text-nominalization ("going")))
(Go-Through has 
    (superclasses (Move-Through
                      Reflexive-Cliche))
    (required-slot (agent
                       object
                       path))
    (primary-slot (origin
                      destination))
    (cmap-correspondence ((:seq object "the thing going through")
                          (:seq agent "the thing going through")
                          (:seq path "the barrier gone through")
                          (:seq origin "the place left")
                          (:seq destination "the place gone to")))
    (wn16-synset ((:set (:triple "go_through" 4 "v"))))
    (wn20-synset ((:set (:triple "go_through" 3 "v")))))

(every Go-Through has 
    (text-active-verbseq-sg ("goes"))
    (text-active-verbseq-pl ("go"))
    (text-nominalization ("going")))
(GMP has 
    (superclasses (Ribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Guanosine monophosphate. One of the four nucleotides
                    in RNA.  Souther.")))

(every GMP has 
    (complement ((must-be-a CMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Guanosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Guanosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Guanosine))))
(Glycolysis has 
    (superclasses (Catabolize))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (description ("The catabolic pathway by which a molecule of glucose
                          is broken down into 2 molecules of Pyruvic-Acid.
                          Lehninger:PBC:G-6.")))

(every Glycolysis has 
    (agent ((a Cell)))
    (object ((a Glucose)))
    (instrument ((a Aggregate called "glycolytic enzymes" with (element-type ((Catabolic-Enzyme))))))
    (result ((a Pyruvic-Acid)
             (a Pyruvic-Acid))))
(Glycine has 
    (superclasses (Nonessential-Amino-Acid
                      Nonpolar-Amino-Acid))
    (description ("A nonpolar amino acid.  Glycine is the simplest amino
                        acid with hydrogen atom as the side chain.  Souther")))

(every Glycine has 
    (has-part ((a Amino-Acid-Side-Chain with (has-part ((a Hydrogen-Atom)))))))
(Glutamine has 
    (superclasses (Uncharged-Polar-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("A polar amino acid with a propionamino side chain.
                        Souther")))

(every Glutamine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Propionamino-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) called "Carbon-1")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Propionamino-Group)))))))
(Glutamic-Acid has 
    (superclasses (Acidic-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("A polar amino acid with a propionic side chain.
                        Souther")))

(every Glutamic-Acid has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Propionic-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Propionic-Group)))))))
(Glucose has 
    (superclasses (Hexose))
    (description ("A six-carbon sugar that plays a major role in the metabolism
                  of living cells. Stored in polymeric form as glycogen in
                  animal cells and as starch in plants.  Alberts:ECB:G-8.")))

(every Glucose has 
    (has-part ((a Oxygen-Atom uniquely-called "Ring-Oxygen" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen-2")
               (a Hydroxyl-Group uniquely-called "C1-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C2-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C3-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C4-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C6-Hydroxyl-Group"))))
(Globular-Protein has 
    (superclasses (Protein))
    (description ("Any protein with an approximately rounded shape.  Most
                        enzymes are globular.   Alberts:ECB:G-8.")))
(Glass has 
    (superclasses (Solid-Substance))
    (wn20-synset ((:set (:triple "glass" 1 "n")))))
(Give-Early-Warning has 
    (superclasses (Non-Engagement-Military-Task))
    (description ("a security action to give an early warning to a friendly unit concerning any threats to it")))

(every Give-Early-Warning has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit with (allegiance ((the allegiance of (the agent of Self)))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.99 ()))))))
    (text-active-verbseq-sg ("gives early warning to"))
    (text-active-verbseq-pl ("give early warning to")))
(Give has 
                       
    (superclasses (Relinquish))
    (required-slot (recipient
                       agent
                       donor
                       object))
    (primary-slot (instrument))
    (cmap-correspondence ((:seq object "the thing Given")
                          (:seq agent "the Giver")
                          (:seq donor "the original possessor")
                          (:seq recipient "the final possessor")
                          (:seq instrument "the thing used to Give")))
    (test-case ('((*Purple-Shirt has (instance-of (Tangible-Entity))) (*Randy has (instance-of (Tangible-Entity)) (possesses (*Purple-Shirt))) (*Samuel has (instance-of (Tangible-Entity))) (a Give with (donor (*Randy)) (recipient (*Samuel)) (object (*Purple-Shirt))) (do-and-next (thelast Give)) (the text-gen of (thelast Give)) ((the possesses of *Samuel) = *Purple-Shirt) ((the possesses of *Randy) = nil) ((the is-possessed-by of *Purple-Shirt) = *Samuel) (((the agent of (thelast Give)) = *Randy) and ((the donor of (thelast Give)) = *Randy)))))
    (wn16-synset ((:set (:triple "give" 3 "v"))))
    (wn20-synset ((:set (:triple "give" 3 "v")))))

(every Give has 
    (recipient ((a Tangible-Entity)))
    (text-active-verbseq-sg ("gives"))
    (text-active-verbseq-pl ("give"))
    (text-passive-verbseq-sg ("is given"))
    (text-passive-verbseq-pl ("are given"))
    (text-nominalization ("giving")))
(Gesticulate has 
    (superclasses (Embody
                      Orient))
    (description ("The physical act of making a gesture using a body part (e.g. pointing, looking) or using an object (e.g. a pointer)."))
    (wn20-synset ((:set (:triple "gesticulate" 1 "v") (:triple "gesture" 1 "v") (:triple "motion" 1 "v"))))
    )

(every Gesticulate has 
    (agent ((a Tangible-Entity)))
    (instrument ((a Tangible-Entity)))
    (result ((a Light)))
    (text-nominalization ("gesticulation")))
(Genome has 
    (superclasses (Aggregate
                      Genetic-Information))
    (description ("The total genetic information carried by a cell or
                            an organism (or the DNA molecules that carry this
                            information. Alberts:ECB:G-8."))
    (wn16-synset ((:set (:triple "genome" 1 "n") (:triple "protein_molecule" 1 "n"))))
    (wn20-synset ((:set (:triple "genome" 1 "n") (:triple "protein_molecule" 1 "n")))))

(every Genome has 
    (element-type ((Gene)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Genetic-Information-Transfer has 
                                
    (superclasses (Communicate))
    (required-slot (object))
    (primary-slot (agent
                      donor
                      recipient
                      instrument))
    (description ("The transfer of genetic information from one entity
                          to another.  Souther.")))

(every Genetic-Information-Transfer has 
    (object ((a Genetic-Information)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Genetic-Information-Storage has 
    (superclasses (Information-Storage))
    (description ("The storage of genetic informatin in the static sense,
                    as for example the storing of hereditary material in the
                    genes.")))

(every Genetic-Information-Storage has 
    (object ((a Genetic-Information)))
    (base ((a Genetic-Information-Sequence)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Genetic-Information-Sequence has 
                                     
    (superclasses (Chemical-Information-Sequence))
    (description ("A genetic sequence which encodes information.
                         Examples include genes, cistrons, and codons.
                         Souther.")))

(every Genetic-Information-Sequence has 
    (object-of ((a Genetic-Information-Storage))))
(Genetic-Information has 
                                                                          
    (superclasses (Information))
    (description ("Information in the form of genetic structures, such
                         as the genes in DNA.  Souther.")))

(every Genetic-Information has 
    (object-of ((a Genetic-Information-Storage)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Genetic-Code has 
    (superclasses (Genetic-Information))
    (description ("The correspondence between codons in DNA or RNA and
                        amino acids in proteins.  Alberts:ECB:G-8")))

(every Genetic-Code has 
    (has-basic-functional-unit ((a DNA-Codon)))
    (element-type ((DNA-Codon))))
(General-Support-Artillery-Battalion has 
    (superclasses (Artillery-Battalion)))

(every General-Support-Artillery-Battalion has 
    (possesses ((if ((the value of (the allegiance of Self)) = *Blue) then (a MLRS)))))
(Gene-Transcript has 
    (superclasses (RNA-Transcript))
    (description ("The RNA transcript of a single gene, which is the rule
                        for an mRNA transcript in eucaryotes.  In procaryotes
                        the mRNA transcript may code for several genes.
                        Souther. ")))
(Gene-To-Protein-Expression has 
                                                                                                            
    (superclasses (Gene-Expression))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("The commonest form of gene expression in which 
                          proteins are synthesized as directed by a gene via
                          the intermediary of RNA which is translated into
                          protein.  Souther. ")))

(every Gene-To-Protein-Expression has 
    (agent ((a Suborganismal-Entity)))
    (donor ((a Gene)))
    (recipient ((a Protein)))
    (object ((a Genetic-Information)))
    (instrument ((a MRNA)))
    (first-subevent ((the DNA-Transcription subevent of Self)))
    (subevent ((a DNA-Transcription))))
(Gene-Expression has 
    (superclasses (Genetic-Information-Transfer))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("The process by which a gene exerts its effect on a
                          cell or an organism, usually by directing the 
                          synthesis of an mRNA molecule that can be translated 
                          into a protein with a characteristic activity.
                          Alberts:ECB:G-8.  The product of gene expression may
                          also be rRNA or tRNA.  Souther."))
    )

(every Gene-Expression has 
    (agent ((a Suborganismal-Entity)))
    (donor ((a Gene)))
    (recipient ((a Macromolecule with (instance-of ((possible-values RNA-Molecule Protein))))))
    (object ((a Genetic-Information)))
    (first-subevent ((the DNA-Transcription subevent of Self)))
    (subevent ((a DNA-Transcription))))
(Gene has 
                                                                
    (superclasses (DNA-Coding-Sequence))
    (description ("Region of DNA that controls a discrete hereditary
                     characteristic of an organism, usually corresponding
                     to a single protein or RNA. Alberts:ECB:G8.
                     Genes generally include both transcription units and
                     flanking regulatory regions, but in operons they lack 
                     flanking regions, ie, procaryotic genes include flanking
                     regulatory regions when alone, but not when part of an 
                     operon. Souther.")))

(every Gene has 
    (purpose ((a Container with (in-event ((a Genetic-Information-Storage with (object ((a Cistron)))))))))
    (has-basic-functional-unit ((a DNA-Codon)))
    (is-part-of ((a DNA-Strand))))
(Ge has 
    (superclasses (Metalloid
                      IVA-Element)))

(every Ge has 
    (atomic-symbol ((Ge)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 32 ()))))))
    (chemical-period (4)))
(GCA-Codon has 
    (superclasses (Protein-Stop-Codon))
    (description ("A codon in mRNA which signals the termination point for
                        translation of a polypeptide.  Souther.")))
(Gas-Water-Reaction-b has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a H2O-Substance) (a SO2-Substance))))) where ((It is '(a Cation-Substance with (has-basic-structural-unit ((a H-Plus))))) or (It is '(a Anion-Substance with (has-basic-structural-unit ((a HSO3-Minus)))))))) = 2)))))

(every Gas-Water-Reaction-b has 
    (result ((a Cation-Substance with (has-basic-structural-unit ((a H-Plus))))
             (a Anion-Substance with (has-basic-structural-unit ((a HSO3-Minus))) [Gas-Water-Reaction-b-result-1]))))

(every Gas-Water-Reaction-b has-definition 
    (instance-of (Reaction
                     [Gas-Water-Reaction-b-instance-of-1]))
    (raw-material ((a H2O-Substance)
                   (a SO2-Substance))))
(Gas-Water-Reaction-a has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a H2O-Substance) (a CO2-Substance))))) where ((It is '(a Cation-Substance with (has-basic-structural-unit ((a H-Plus))))) or (It is '(a Anion-Substance with (has-basic-structural-unit ((a HCO3-Minus)))))))) = 2)))))

(every Gas-Water-Reaction-a has 
    (result ((a Cation-Substance with (has-basic-structural-unit ((a H-Plus))))
             (a Anion-Substance with (has-basic-structural-unit ((a HCO3-Minus))) [Gas-Water-Reaction-a-result-1]))))

(every Gas-Water-Reaction-a has-definition 
    (instance-of (Reaction
                     [Gas-Water-Reaction-a-instance-of-1]))
    (raw-material ((a H2O-Substance)
                   (a CO2-Substance))))
(Gas-Substance has 
                    
    (superclasses (Fluid-Substance))
    (description ("A substance in the gaseous state at room temperature"))
    (wn20-synset ((:set (:triple "gas" 2 "n")))))

(every Gas-Substance has 
    (physical-state ((if (not (has-value (the temperature of Self))) then ((a State-Value with (value (*gas))))))))
(Gas-Solution-Reaction-b has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a H2S-Substance) (a Ca_OH_2-Substance with (base-of ((a Aqueous-Solution)))))))) where (((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Ca-Plus-2) (:pair 1 S-Minus-2))) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 H-Plus) (:pair 1 OH-Minus)))))) = 2)))))

(every Gas-Solution-Reaction-b has 
    (result ((:set (if (forall (the raw-material of Self) where (not (It isa H2S-Substance)) ((the Anion has-part of (the has-basic-structural-unit of It)) isa OH-Minus)) then (a H2O-Substance) else (a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((forall (the raw-material of Self) where (not (It isa H2S-Substance)) (the Anion has-part of (the has-basic-structural-unit of It))) (a H-Plus)))))))) (a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((forall (the raw-material of Self) where (not (It isa H2S-Substance)) (the Cation has-part of (the has-basic-structural-unit of It))) (a S-Minus-2)))))) [Gas-Solution-Reaction-b-result-1])))))

(every Gas-Solution-Reaction-b has-definition 
    (instance-of (Reaction
                     [Gas-Solution-Reaction-b-instance-of-1]))
    (raw-material ((a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))))
                   (a H2S-Substance))))
(Gas-Solution-Reaction-a has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a CO2-Substance) (a Ca_OH_2-Substance with (base-of ((a Aqueous-Solution)))))))) where (((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Ca-Plus-2) (:pair 1 CO3-Minus-2))) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 H-Plus) (:pair 1 OH-Minus)))))) = 2)))))

(every Gas-Solution-Reaction-a has 
    (result ((a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((the Cation has-part of (the has-basic-structural-unit of (the Ionic-Compound-Substance raw-material of Self))) (a CO3-Minus-2)))))))
             (a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))) (has-basic-structural-unit ((a Ionic-Compound with (has-part ((the Anion has-part of (the has-basic-structural-unit of (the Ionic-Compound-Substance raw-material of Self))) (a H-Plus)))))) [Gas-Solution-Reaction-a-result-1]))))

(every Gas-Solution-Reaction-a has-definition 
    (instance-of (Reaction
                     [Gas-Solution-Reaction-a-instance-of-1]))
    (raw-material ((a Ionic-Compound-Substance with (base-of ((a Aqueous-Solution))))
                   (a CO2-Substance))))
(Ga has 
    (superclasses (Metal-Atom
                      IIIA-Element)))

(every Ga has 
    (atomic-symbol ((Ga)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 31 ()))))))
    (chemical-period (4)))
(G-C-Base-Pair has 
    (superclasses (Base-Pair))
    (description ("The base pair resulting from the hydrogen bonding of
                          Guanine and Cytosine in RNA molecules.  Souther.")))

(every G-C-Base-Pair has 
    (is-part-of ((a DNA-Molecule)))
    (has-part ((a D-CMP)
               (a D-GMP with (has-part ((a Guanine with (complement ((the Cytosine has-part of (the D-CMP has-part of Self)))) (object-of ((a Be-Attached-To with (object ((the Cytosine has-part of (the D-CMP has-part of Self)))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Guanine has-part of Self)) called "N1-Hydrogen") ((the Nitrogen-Atom has-part of (the Cytosine has-part of Self)) called "Nitrogen-3")))) (a Be-Attached-To with (object ((the Cytosine has-part of (the D-CMP has-part of Self)))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Amino-Group has-part of (the Guanine has-part of Self))) called "Hydrogen-1") (the Oxygen-Atom has-part of (the Cytosine has-part of (the D-CMP has-part of Self)))))) (a Be-Attached-To with (object ((the Cytosine has-part of (the D-CMP has-part of Self)))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Amino-Group has-part of (the Cytosine has-part of (the D-CMP has-part of Self)))) called "Hydrogen-1") (the Oxygen-Atom has-part of (the Guanine has-part of Self))))))))))))))
(Furniture has 
                                                                   
    (superclasses (Furnishing))
    (description ("any artifact that helps make a room usable, though maybe not directly instrumental"))
    (wn20-synset ((:set (:triple "furniture" 1 "n")))))
(Furnishing has 
    (superclasses (Artifact))
    (description ("furniture, fixtures, room accessories, etc."))
    (wn20-synset ((:set (:triple "furnishings" 1 "n"))))
    )
(Functional-Vertebrate-MRNA-Transcript has 
    (superclasses (Functional-MRNA-Transcript))
    (description ("The RNA transcript in vertebrates after all the 
                          post-transcription processing has been completed. 
                          Differs from lower organisms in that the RNA capping
                          involves methylating the ribose of the second 
                          ribonucleotide as well. Souther. ")))

(every Functional-Vertebrate-MRNA-Transcript has 
    (has-part ((a Ribonucleotide called "Second-Ribonucleotide")
               (a Methyl-Group with (object-of ((a Be-Attached-To uniquely-called "MG-SR" with (object (((the Ribonucleotide has-part of Self) called "Second-Ribonucleotide"))) (site ((the Hydroxyl-Group has-part of ((the Carbon-Atom has-part of (the Ribose has-part of ((the Ribonucleotide has-part of Self) called "Second-Ribonucleotide"))) called "Carbon-2")) (the Carbon-Atom has-part of (the Methyl-Group has-part of Self)))) (instrument ((a Covalent-Bond))))))))))
(Functional-RNA-Transcript has 
                                           
    (superclasses (RNA-Transcript))
    (description ("The RNA transcript after all the post-transcription
                        processing has been completed. (Compare with Primary
                        Transcript). Souther. ")))
(Functional-MRNA-Transcript has 
    (superclasses (Functional-RNA-Transcript
                      Eucaryotic-MRNA))
    (description ("The RNA transcript after all the post-transcription
                         processing has been completed, which includes RNA
                         capping, polyadenylation, and splicing. Souther. "))
    )

(every Functional-MRNA-Transcript has 
    (has-part ((a Nucleotide called "First Ribonucleotide")
               (a 7-Methyl-Guanosine with (object-of ((a Be-Attached-To with (object (((the Nucleotide has-part of Self) called "First Ribonucleotide"))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the 7-Methyl-Guanosine has-part of Self))) called "Carbon-5") ((the Carbon-Atom has-part of (the Ribose has-part of (the Nucleoside has-part of ((the has-part of Self) called "First Ribonucleotide")))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a Methyl-Group with (object-of ((a Be-Attached-To uniquely-called "MG-FR" with (object (((the Nucleotide has-part of Self) called "First Ribonucleotide"))) (instrument ((a Covalent-CO-Bond))) (site ((the Hydroxyl-Group has-part of ((the Carbon-Atom has-part of (the Ribose has-part of ((the Ribonucleotide has-part of Self) called "First Ribonucleotide"))) called "Carbon-2")) (the Carbon-Atom has-part of (the Methyl-Group has-part of Self))))))))
               (a Poly-A-Tail with (element-type ((AMP)))))))
(Frequency-Value has 
    (range-of (frequency))
    (domain-of (frequency-of))
    (superclasses (Property-Value))
    (test-case ('((BasketballGame has (superclasses (Event))) (CakeBake has (superclasses (Event))) (*baking-my-cake has (instance-of (CakeBake)) (frequency ((a Frequency-Value)))) (*lakers-vs-6ers has (instance-of (BasketballGame)) (frequency ((a Frequency-Value with (value ((:pair *rarely BasketballGame))) (same-as ((the frequency of *baking-my-cake))))))) (the value of (the frequency of *lakers-vs-6ers)) ((the same-as of (the frequency of *lakers-vs-6ers)) includes (the frequency of *baking-my-cake))))))
(Frequency-Scale has 
    (scale-class-of (frequency))
                                  
    (superclasses (Scale)))
(Frequency-Constant has 
    (scalar-constant-class-of (frequency))
    (element-type-of (*often-never-scale))
    (superclasses (Constant))
    )
(Free-Ribosome has 
    (superclasses (Ribosome))
    (description ("Ribosomes that are free in the cytoplasm.  Souther.")))

(every Free-Ribosome has 
    (is-inside ((a Cytoplasm)))
    (object-of ((mustnt-be-a ((a Be-Attached-To with ((object ((a Endoplasmic-Reticulum))))))))))
(Free-Nucleotide-Sequence has 
                                                                                             
    (superclasses (Nucleotide-Sequence))
    (description ("A nucleotide sequence with a free 5'-triphosphate and 
                        free 3'-OH, i.e. a sequence which is not an internal
                        sequence. Examples include DNA-Strand, Free-Nucleotide.
                        Souther. ")))

(every Free-Nucleotide-Sequence has 
    (has-part ((a 5-Prime-Nucleoside-Triphosphate with (object-of ((mustnt-be-a Be-Attached-To with (object ((a Nucleotide-Sequence))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 5-Prime-Nucleotide has-part of Self))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a 3-Prime-Nucleoside-Monophosphate with (object-of ((mustnt-be-a ((a Be-Attached-To with (object ((a Nucleotide-Sequence))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 3-Prime-Nucleotide has-part of Self))) called "Carbon-3"))) (instrument ((a Phosphodiester-Bond)))))))))
               (a Nucleotide-Sequence called "Nucleotide Sequence"))))
(Free-Nucleotide has 
    (superclasses (Free-Nucleotide-Sequence
                      Nucleotide))
    (description ("A nucleotide which is not part of DNA or RNA, and is
                        free in the medium.  Souther. ")))

(every Free-Nucleotide has 
    (object-of ((mustnt-be-a Be-Attached-To with (object ((a Nucleotide-Sequence))))
                (mustnt-be-a Be-Attached-To with (object ((a Nucleotide)))))))
(Fr-Plus has 
    (superclasses (Metal-Cation)))

(every Fr-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Fr))))))))
(Fr has 
    (superclasses (Metal-Atom
                      Alkali-Metal-Element)))

(every Fr has 
    (atomic-symbol ((Fr)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 87 ()))))))
    (chemical-period (7)))
(Formylmethionine has 
    (superclasses (Amino-Acid))
    (description ("Methionine modified with a formyl group attached to
                        the amino nitrogen.  It is the amino acid which
                        initiates peptide chain formation in bacteria.
                        Souther.  see Alberts:ECB:231")))

(every Formylmethionine has 
    (has-part ((a Methionine with (object-of ((a Be-Attached-To with (object ((the Formyl-Group has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site ((the Carbon-Atom has-part of (the Formyl-Group has-part of Self)) (the Nitrogen-Atom has-part of (the Amino-Group has-part of (the Methionine has-part of Self)))))))))
               (a Formyl-Group))))
(Formyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Chemical group consisting of a carbon atom linked
                             to a hydrogen and to an oxygen by a double bond.
                             Souther.")))

(every Formyl-Group has 
    (has-part ((a Oxygen-Atom)
               (a Hydrogen-Atom)
               (a Carbon-Atom with (object-of ((a Be-Attached-To with (object ((the Oxygen-Atom has-part of Self))) (instrument ((a Double-Covalent-CO-Bond)))) (a Be-Attached-To with (object ((the Hydrogen-Atom has-part of Self))) (instrument ((a Covalent-CH-Bond))))))))))
(Format-Equation has 
    (superclasses (Method)))

(every Format-Equation has 
    (output ((:seq (if ((the1 of (the first of (the1 of (the input of Self)))) /= 1) then (:seq (the1 of (the first of (the1 of (the input of Self)))) "nospace")) (the2 of (the first of (the1 of (the input of Self)))) (forall (the1 of (the input of Self)) where (It /= (the first of (the1 of (the input of Self)))) (:seq "+" (if ((the1 of It) /= 1) then (:seq (the1 of It) "nospace")) (the2 of It))) "-->" (if ((the1 of (the first of (the2 of (the input of Self)))) /= 1) then (:seq (the1 of (the first of (the2 of (the input of Self)))) "nospace")) (the2 of (the first of (the2 of (the input of Self)))) (forall (the2 of (the input of Self)) where (It /= (the first of (the2 of (the input of Self)))) (:seq "+" (if ((the1 of It) /= 1) then (:seq (the1 of It) "nospace")) (the2 of It)))))))
(Forget has 
    (superclasses (Action))
    (required-slot (agent
                       object))
    (test-case ('((*Tim has (instance-of (Living-Entity))) (*loc-of-keys has (instance-of (Information)) (information-content ((*key has (instance-of (Physical-Object)) (possessed-by (*Tim)) (location (*under-sofa)))))) (*forgets has (instance-of (Forget)) (agent (*Tim)) (object (*loc-of-keys))) (do-and-next *forgets) (not (the Be-Known object-of of (the object of (thelast Forget)))) (not ((the experiencer of (thelast Be-Known)) = *Tim)))))
    (wn16-synset ((:set (:triple "forget" 1 "v") (:triple "forget" 2 "v") (:triple "bury" 1 "v") (:triple "block" 13 "v") (:triple "draw_a_blank" 1 "v") (:triple "blank_out" 1 "v"))))
    (wn20-synset ((:set (:triple "forget" 1 "v") (:triple "forget" 2 "v") (:triple "bury" 1 "v") (:triple "block" 13 "v") (:triple "draw_a_blank" 1 "v") (:triple "blank_out" 1 "v")))))

(every Forget has 
    (object ((a Information)))
    (agent ((a Tangible-Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Known) and ((the experiencer of It) = (the agent of Self))))))
    (pcs-list ((:triple (the object of Self) object-of (a Be-Known with (experiencer ((the agent of Self)))) [Forget-pcs-1])))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Forget-del-1]))
               (forall (the defeats of Self) (:triple It experiencer (the agent of Self) [Forget-del-2]))))
    (text-nominalization ("forgetting")))
(Forest has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Forest has 
    (trafficability ((a Trafficability-Value with (value ((:pair *SR Armor-Unit) (:pair *SR Mechanized-Infantry-Unit) (:pair *R Light-Infantry-Unit)))))))
(Food has 
    (superclasses (Role))
    (description ("Substance which provides nourishment to an organism."))
    (wn16-synset ((:set (:triple "food" 1 "n") (:triple "nutrient" 1 "n"))))
    (wn20-synset ((:set (:triple "food" 1 "n") (:triple "food" 2 "n") (:triple "nutrient" 1 "n")))))

(every Food has 
    (in-event ((a Feed)))
    (played-by ((a Tangible-Entity with (object-of ((the in-event of Self)))))))
(Follow-and-Support has 
    (superclasses (Non-Engagement-Military-Task
                      Follow))
    (description ("a tactical mission task to follow and support a lead force conducting an offensive operation")))

(every Follow-and-Support has 
    (agent ((a Military-Unit)))
    (supports ((a Military-Task with (agent ((the base of Self))))))
    (base ((a Military-Unit with (supported-by-military-unit ((the agent of Self))) (allegiance ((the allegiance of (the agent of Self)))) (agent-of ((the supports of Self))))))
    (path ((a Spatial-Entity)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (text-nominalization ("following and supporting"))
    (text-active-verbseq-sg ("follows and supports"))
    (text-active-verbseq-pl ("follow and support"))
    (text-base (""))
    (text-argslots ((:seq base path))))
(Follow-and-Assume has 
    (superclasses (Non-Engagement-Military-Task
                      Follow))
    (description ("a tactical mission task to follow a force conducting an offensive operation and to continue the mission if the lead force is disabled")))

(every Follow-and-Assume has 
    (agent ((a Military-Unit)))
    (base ((a Military-Unit with (allegiance ((the allegiance of (the agent of Self)))) (agent-of ((a Military-Task))))))
    (path ((a Spatial-Entity)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (text-nominalization ("following and assuming"))
    (text-active-verbseq-sg ("is the follow-and-assume force"))
    (text-active-verbseq-pl ("are the follow-and-assume forces"))
    (text-base ("for"))
    (text-argslots ((:seq base path))))
(Follow has 
    (superclasses (Locomotion))
    (required-slot (object
                       agent))
    (cmap-correspondence ((:seq agent "the mover")
                          (:seq object "the mover")))
    (wn20-synset ((:set (:triple "follow" 1 "v"))))
    )

(every Follow has 
    (agent ((a Entity with (is-behind ((the base of Self))))))
    (base ((a Entity with (agent-of ((a Locomotion with (path ((the path of Self))) (destination ((the destination of Self)))))))))
    (path ((a Spatial-Entity)))
    (destination ((a Spatial-Entity)))
    (text-active-verbseq-sg ("follows"))
    (text-active-verbseq-pl ("follow"))
    (text-nominalization ("following")))
(Fluid-Substance has 
    (superclasses (Substance))
    (description ("A substance, as a liquid or a gas, that is capable of
                       flowing and which changes its shape at a steady rate
                       when acted upon by a force. RHCD:508."))
    (wn20-synset ((:set (:triple "fluid" 1 "n") (:triple "fluid" 2 "n"))))
    )
(Floor has 
    (superclasses (Platform))
    (description ("a platform supporting the contents of a container"))
    (test-case ('((*TheGymFloor has (instance-of (Floor))) (*TheGym has (instance-of (Architectural-Structure)) (has-part (*TheGymFloor)) (plays ((a Container)))) (*TheUtilityBall has (instance-of (Artifact)) (is-on (*TheGymFloor))) (*TheBalanceBeam has (instance-of (Artifact)) (is-on (*TheGymFloor))) (the content-of of (the has-on-it of *TheGymFloor)) ((the content of (the Container plays of *TheGym)) is-superset-of (:set *TheUtilityBall *TheBalanceBeam)))))
    (wn20-synset ((:set (:triple "floor" 1 "n")))))

(every Floor has 
    (is-part-of ((a Tangible-Entity with (plays ((a Container))))))
    (has-on-it ((must-be-a Tangible-Entity with (content-of ((the Container plays of (the is-part-of of Self))))))))
(Flank has 
    (superclasses (Region)))
(Fix has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task to prevent the enemy from moving")))

(every Fix has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (base ((must-be-a Spatial-Entity)))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.7 ()))))))
    (resulting-state ((a Be-Restrained)))
    (add-list ((:triple (the object of Self) object-of (the resulting-state of Self))))
    (text-active-verbseq-sg ("fixes"))
    (text-active-verbseq-pl ("fix"))
    (text-base ("at"))
    (text-argslots ((:seq base))))
(Fire-Support-Task has 
    (superclasses (Military-Task)))
(Fire has 
    (superclasses (Propel))
    (description ("Firing a projectile toward a target")))

(every Fire has 
    (agent ((a Military-Unit)))
    (object ((a Tangible-Entity with (plays ((a Projectile))))))
    (toward ((a Spatial-Entity with (plays ((a Target))))))
    (instrument ((a Tangible-Entity with (plays ((a Weapon)))))))
(Find-Species-in-Greatest-Concentration has 
    (superclasses (Method))
    (description ("given a complete-dissociation reaction, finds the species in the greatest concentration")))

(every Find-Species-in-Greatest-Concentration has 
    (input ((a Complete-Dissociation-Reaction)))
    (output ((if ((not (the value of (the ka of (the Acid-Role plays of ((the raw-material of (the input of Self)) called "Reactant"))))) and (not (the value of (the kb of (the Base-Role plays of ((the raw-material of (the input of Self)) called "Reactant")))))) then (if ((the value of (the intensity of (the Acid-Role plays of ((the raw-material of (the input of Self)) called "Reactant")))) = (:pair *strong Acid)) then (oneof (the result of (the input of Self)) where (((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus))) [Find-Species-in-Greatest-Concentration-output-1])))))
(Financing has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "funding" 2 "n") (:triple "financing" 1 "n")))))

(every Financing has 
    (text-nominalization ("financing")))
(Filter has 
    (superclasses (Role))
    (wn20-synset ((:set (:triple "filter" 1 "n")))))

(every Filter has 
    (in-event ((must-be-a Event)))
    (played-by ((a Entity with (instrument-of ((the in-event of Self)))))))
(Fighting-Vehicle has 
                                                                                  
    (superclasses (Military-Equipment)))
(Fidget has 
    (superclasses (Orient))
    (description ("The act of fidgeting."))
    (wn20-synset ((:set (:triple "fidget" 1 "v")))))

(every Fidget has 
    (agent ((a Entity)))
    (object ((the agent of Self)))
    (text-active-verbseq-sg ("fidgets"))
    (text-active-verbseq-pl ("fidget"))
    (text-nominalization ("fidgeting")))
(Fibrous-Protein has 
                         
    (superclasses (Protein))
    (description ("A protein with an elongated shape; typically one such
                        as collagen or intermediate filament protein that is
                        able to associate into long filamentous structures.
                        Alberts:ECB:G-8.")))
(Fe_OH_3-Substance has 
    (superclasses (Strong-Electrolyte)))

(every Fe_OH_3-Substance has 
    (has-basic-structural-unit ((a Fe_OH_3))))
(Fe_OH_3 has 
    (superclasses (Ionic-Compound)))

(every Fe_OH_3 has 
    (has-part ((a Fe-Plus-3)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Fe-Plus-3) (:pair 2 OH-Minus))))))))
(Fe_OH_2-Substance has 
    (superclasses (Strong-Electrolyte)))

(every Fe_OH_2-Substance has 
    (has-basic-structural-unit ((a Fe_OH_2))))
(Fe_OH_2 has 
    (superclasses (Ionic-Compound)))

(every Fe_OH_2 has 
    (has-part ((a Fe-Plus-2)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Fe-Plus-2) (:pair 2 OH-Minus))))))))
(Feed has 
    (superclasses (Supply))
    (required-slot (recipient
                       agent
                       donor
                       object))
    (primary-slot (instrument))
    (cmap-correspondence ((:seq object "food")
                          (:seq agent "feeder")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*Food has (instance-of (Food))) (*cookies has (instance-of (Tangible-Entity)) (plays ((*Food)))) (*Mother-Teresa has (instance-of (Living-Entity)) (possesses (*cookies))) (*Children has (instance-of (Tangible-Entity))) (*Feed has (instance-of (Feed)) (donor (*Mother-Teresa)) (recipient (*Children)) (object (*cookies))) (do-and-next *Feed) ((the possesses of *Mother-Teresa) /= *cookies) ((the possesses of *Children) = *cookies) ((the enables of *Feed) isa Replenish))))
    (wn16-synset ((:set (:triple "feed" 1 "v") (:triple "feed" 2 "v") (:triple "grub" 3 "v") (:triple "give" 24 "v"))))
    (wn20-synset ((:set (:triple "feed" 1 "v") (:triple "feed" 2 "v") (:triple "give" 24 "v")))))

(every Feed has 
    (donor ((a Living-Entity)))
    (recipient ((a Living-Entity)))
    (object ((a Tangible-Entity with (plays ((a Food))))))
    (text-active-verbseq-sg ("feeds"))
    (text-active-verbseq-pl ("feed"))
    (text-passive-verbseq-sg ("is fed"))
    (text-passive-verbseq-pl ("are fed"))
    (text-nominalization ("feeding")))
(Fe-Plus-3 has 
    (superclasses (Metal-Cation)))

(every Fe-Plus-3 has 
    (charge ((a Charge-Value with (value ((:pair 3 *electronic-charge))))))
    (has-chemical-name ("iron(III)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Fe))))))))
(Fe-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Fe-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("iron(II)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Fe))))))))
(Fe has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Fe has 
    (atomic-symbol ((Fe)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 26 ()))))))
    (chemical-period (4)))
(Family has 
    (superclasses (Group))
    (wn20-synset ((:set (:triple "family" 1 "n") (:triple "household" 1 "n") (:triple "house" 4 "n") (:triple "home" 7 "n") (:triple "menage" 1 "n") (:triple "family" 2 "n") (:triple "family_unit" 1 "n")))))
(Fall has 
    (superclasses (Move))
    (required-slot (object))
    (primary-slot (origin
                      destination
                      path))
    (cmap-correspondence ((:seq object "the thing falling")
                          (:seq origin "starting point")
                          (:seq destination "terminal point")
                          (:seq path "moved through")))
    (test-case ('((*meteor has (instance-of (Tangible-Entity)) (location ((a Place)))) (*trailer has (instance-of (Tangible-Entity)) (location ((a Place)))) (a Fall with (object (*meteor)) (destination ((the location of *trailer)))) (do-and-next (thelast Fall)) ((the location of *meteor) = (the location of *trailer)) (new-situation) (*computer has (instance-of (Tangible-Entity)) (location ((a Place)))) (*window has (instance-of (Tangible-Entity))) (*patio has (instance-of (Tangible-Entity)) (location ((a Place))) (is-under (*window))) (a Fall with (object (*computer)) (path (*window)) (destination (*patio))) (do-and-next (thelast Fall)) ((the location of *computer) = (the location of *patio)) ((the is-under of *computer) includes *window))))
    (wn16-synset ((:set (:triple "fall" 1 "v"))))
    (wn20-synset ((:set (:triple "fall" 1 "v"))))
    )

(every Fall has 
    (agent ((exactly 0 Entity)))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Supported)))))
    (duration ((a Duration-Value)))
    (distance ((a Length-Value)))
    (origin ((a Spatial-Entity)))
    (destination ((a Spatial-Entity)))
    (text-passive-verbseq-sg ("falls"))
    (text-passive-verbseq-pl ("fall"))
    (preparatory-event ((:default (a Support with (object ((the object of Self))) (agent ((the agent of Self)))))))
    (text-nominalization ("fall")))
(FADH2 has 
    (superclasses (Electron-Carrier))
    (description ("Major electron carrier in metabolism; produced by
                        reduction of FAD during the oxidation of catabolites
                        such as succinate.  Alberts:ECB:G-7")))

(every FADH2 has 
    (purpose ((a Vehicle with (in-event ((a Electron-Transfer)))))))
(F-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every F-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.471E-12 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a F-Minus))))
(F-Minus has 
    (superclasses (Anion)))

(every F-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("fluoride"))
    (has-acid-name ("hydrofluoric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 F))))))))
(F has 
    (superclasses (Non-Metal-Atom
                      Halogen-Element)))

(every F has 
    (has-molecular-name ("fluoride"))
    (atomic-symbol ((F)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 9 ()))))))
    (chemical-period (2)))
(Extracellular-Matrix has 
    (superclasses (Organic-Complex))
    (description ("Complex network of polysaccharides (such as
                        glycosaminoglycans or cellulose) and proteins (such as
                        collagen) secreted by cells.  A structural component
                        of tissues that also influences their development and
                        physiology. Alberts:ECB:G-7.")))

(every Extracellular-Matrix has 
    (has-part ((a Aggregate with (element-type ((Polysaccharide))))
               (a Aggregate with (element-type ((Protein)))))))
(Express has 
                                                                                       
    (superclasses (Action))
    (required-slot (agent
                       object))
    (test-case ('((*Fact has (instance-of (Information))) (*Bob has (instance-of (Tangible-Entity))) (*Alice has (instance-of (Tangible-Entity))) (*AnExpress has (instance-of (Express)) (agent (*Bob)) (recipient (*Alice)) (object (*Fact))) (do-and-next *AnExpress))))
    (wn16-synset ((:set (:triple "express" 1 "v") (:triple "express" 2 "v") (:triple "express" 3 "v") (:triple "express" 4 "v") (:triple "show" 7 "v") (:triple "evince" 1 "v") (:triple "utter" 1 "v") (:triple "carry" 4 "v") (:triple "convey" 2 "v") (:triple "state" 3 "v"))))
    (wn20-synset ((:set (:triple "express" 1 "v") (:triple "express" 2 "v") (:triple "express" 3 "v") (:triple "express" 4 "v") (:triple "show" 6 "v") (:triple "evince" 1 "v") (:triple "utter" 1 "v") (:triple "carry" 4 "v") (:triple "convey" 2 "v") (:triple "state" 3 "v")))))

(every Express has 
    (recipient ((must-be-a Tangible-Entity)))
    (agent ((a Tangible-Entity)))
    (object ((a Information)))
    (result ((a Message with (result-of ((Self))))))
    (pcs-list ((:triple (the object of Self) object-of (a Be-Known with (experiencer ((the agent of Self)))) [Express-pcs-1])
               (:triple (the agent of Self) experiencer-of (a Be-Known with (object ((the Language information-language of (the result of Self)))) (experiencer ((the agent of Self)))))))
    (text-nominalization ("expression")))
(Expose has 
    (defeated-by-class-of (Be-Concealed))
    (superclasses (Make-Accessible))
    (required-slot (object))
    (primary-slot (agent
                      base))
    (cmap-correspondence ((:seq object "the object Exposed")
                          (:seq agent "the Exposer")
                          (:seq base "the thing to which the object is Exposed")))
    (test-case ('((*Weapon has (instance-of (Physical-Object))) (a Conceal with (object (*Weapon))) (try-do-and-next (thelast Conceal)) (has-value (the Be-Concealed object-of of *Weapon)) (a See with (object (*Weapon))) (a Expose with (object (*Weapon))) (try-do-and-next (thelast Expose)) (not (has-value (the Be-Concealed object-of of *Weapon))) (try-do (thelast See)))))
    (wn16-synset ((:set (:triple "expose" 3 "v") (:triple "expose" 4 "v") (:triple "expose" 5 "v") (:triple "expose" 7 "v") (:triple "disclose" 2 "v") (:triple "display" 1 "v") (:triple "exhibit" 2 "v"))))
    (wn20-synset ((:set (:triple "expose" 3 "v") (:triple "expose" 4 "v") (:triple "expose" 5 "v") (:triple "expose" 7 "v") (:triple "disclose" 2 "v") (:triple "display" 1 "v") (:triple "exhibit" 2 "v")))))

(every Expose has 
    (object ((a Tangible-Entity)))
    (agent ((must-be-a Entity)))
    (base ((must-be-a Thing)))
    (soft-pcs-list ((if (has-value (the agent of Self)) then (forall (the object of Self) (:triple (the location of It) object-of (a Be-Known with (experiencer ((the agent of Self)))))))))
    (defeats ((if (has-value (the base of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Concealed) and ((the base of It) = (the base of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Concealed)))))
    (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Expose-del-1]))))
    (text-active-verbseq-sg ("exposes"))
    (text-active-verbseq-pl ("expose"))
    (text-passive-verbseq-sg ("gets exposed"))
    (text-passive-verbseq-pl ("get exposed"))
    (text-argslots ((:seq base instrument path result)))
    (preparatory-event ((:default (a Conceal with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("exposing")))
(Expand has 
    (superclasses (Increase))
    (test-case ('((*myballon has (instance-of (Physical-Object)) (volume (*myballonsvolume))) (*myballonsvolume has (instance-of (Volume-Value)) (value ((:pair 3 *liter)))) (a Increase with (object (*myballon)) (property-slot (volume))) ((thelast Increase) isa Expand) (do-and-next (thelast Expand)) ((the greater-than of (the volume of *myballon)) includes *myballonsvolume))))
    (wn20-synset ((:set (:triple "expand" 1 "v") (:triple "expand" 2 "v") (:triple "expand" 3 "v") (:triple "spread_out" 4 "v") (:triple "enlarge" 1 "v") (:triple "enlarge" 3 "v")))))

(every Expand has 
    (text-nominalization ("expansion")))

(every Expand has-definition 
    (instance-of (Increase))
    (property-slot ((volume))))
(Exon has 
    (superclasses (DNA-Coding-Sequence))
    (description ("Segment of a eucaryotic gene that is transcribed into
                        RNA and codes for the amino acid sequence of part of a
                        protein. Alberts:ECB:G-7.")))

(every Exon has 
    (is-part-of ((must-be-a Eucaryotic-Gene))))
(Exit has 
    (superclasses (Move-Out-Of
                      Reflexive-Cliche))
    (required-slot (object
                       agent
                       origin))
    (primary-slot (destination
                      path))
    (cmap-correspondence ((:seq agent "the exit'er")
                          (:seq object "the exit'er")
                          (:seq destination "final location")
                          (:seq origin "original location")
                          (:seq path "the portal")))
    (test-case ('((*Johnny-doorway has (instance-of (Spatial-Entity)) (plays ((a Portal)))) (*Johnny-House-Location has (instance-of (Place))) (*Johnny-House has (instance-of (Physical-Object)) (has-part (*Johnny-Door)) (location (*Johnny-House-Location))) (*Inside-The-House has (instance-of (Place)) (is-inside (*Johnny-House))) (*Johnny-boy has (instance-of (Living-Entity)) (location (*Inside-The-House))) (a Exit with (agent (*Johnny-boy)) (base (*Johnny-House))) (the object of (thelast Exit)) ((the content of (the Container plays of (the base of (thelast Exit)))) includes *Johnny-boy) ((the is-inside of (the location of *Johnny-boy)) includes *Johnny-House) (do-and-next (thelast Exit)) (the text-gen of (thelast Exit)) ((the is-outside of *Johnny-boy) includes *Johnny-House) ((the does-not-enclose of *Johnny-House-Location) includes *Johnny-boy) (not ((the content of (the Container plays of *Johnny-House)) includes *Johnny-boy)) ((the is-outside of (the location of *Johnny-boy)) includes *Johnny-House-Location) ((the does-not-enclose of *Johnny-House-Location) includes (the location of *Johnny-boy)))))
    (wn16-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v"))))
    (wn20-synset ((:set (:triple "exit" 1 "v") (:triple "go_out" 1 "v") (:triple "get_out" 1 "v") (:triple "leave" 5 "v")))))

(every Exit has 
    (text-active-verbseq-sg ("exits"))
    (text-active-verbseq-pl ("exit"))
    (text-base (()))
    (text-nominalization ("exit")))

(every Exit has-definition 
    (instance-of (Move-Out-Of
                     Reflexive-Cliche)))
(Event has 
    (domain-of (acceleration
                   actions
                   actions-of
                   agent
                   text-agent
                   all-subevents
                   all-subevents-of
                   away-from
                   text-away-from
                   base
                   text-base
                   beneficiary
                   text-beneficiary
                   by-means-of
                   means-by-which
                   causes
                   caused-by
                   text-causes
                   text-caused-by
                   dcs-list
                   destination
                   text-destination
                   direction
                   disjunctive-next-events
                   disjunctive-next-events-of
                   distance
                   donor
                   text-donor
                   duration
                   enables
                   enabled-by
                   experiencer
                   first-subevent
                   first-subevent-of
                   frequency
                   is-goal-of
                   in-event-of
                   inhibits
                   inhibited-by
                   instrument
                   text-instrument
                   interrupted-by
                   interrupts
                   manner
                   mcs-list
                   momentum
                   next-event
                   prev-event
                   object
                   text-object
                   objective
                   objective-of
                   origin
                   text-origin
                   path
                   text-path
                   preparatory-event
                   preparatory-event-of
                   prevents
                   prevented-by
                   primitive-actions
                   primitive-actions-of
                   rate
                   raw-material
                   text-raw-material
                   recipient
                   text-recipient
                   result
                   text-result
                   resulting-state
                   text-resulting-state
                   rotational-rate
                   site
                   text-site
                   soft-pcs-list
                   subevent
                   subevent-of
                   text-subevent-of
                   substrate
                   supports
                   supported-by
                   text-active-phrase
                   text-active-sentence
                   text-active-verbseq-pl
                   text-active-verbseq-sg
                   text-active-verbseq
                   text-arguments
                   text-dobj
                   text-nom-sentence
                   text-nominalization
                   text-number
                   text-particle
                   text-passive-phrase
                   text-passive-sentence
                   text-passive-verbseq-pl
                   text-passive-verbseq-sg
                   text-passive-verbseq
                   text-subj
                   time-at
                   time-during
                   toward
                   text-toward
                   velocity
                   combat-power-ratio
                   enemy))
    (range-of (acceleration-of
                  actions
                  actions-of
                  agent-of
                  text-agent-of
                  all-subevents
                  all-subevents-of
                  away-from-of
                  text-away-from-of
                  base-of
                  text-base-of
                  beneficiary-of
                  text-beneficiary-of
                  by-means-of
                  means-by-which
                  causes
                  caused-by
                  text-causes-of
                  text-caused-by-of
                  dcs-list-of
                  destination-of
                  text-destination-of
                  direction-of
                  disjunctive-next-events
                  disjunctive-next-events-of
                  distance-of
                  donor-of
                  text-donor-of
                  duration-of
                  enables
                  enabled-by
                  experiencer-of
                  first-subevent
                  first-subevent-of
                  frequency-of
                  has-goal
                  in-event
                  inhibits
                  inhibited-by
                  instrument-of
                  text-instrument-of
                  interrupted-by
                  interrupts
                  manner-of
                  mcs-list-of
                  momentum-of
                  next-event
                  prev-event
                  object-of
                  text-object-of
                  objective
                  objective-of
                  origin-of
                  text-origin-of
                  path-of
                  text-path-of
                  preparatory-event
                  preparatory-event-of
                  prevents
                  prevented-by
                  primitive-actions
                  primitive-actions-of
                  rate-of
                  raw-material-of
                  text-raw-material-of
                  recipient-of
                  text-recipient-of
                  result-of
                  text-result-of
                  resulting-state-of
                  text-resulting-state-of
                  rotational-rate-of
                  site-of
                  text-site-of
                  soft-pcs-list-of
                  subevent
                  subevent-of
                  text-subevent
                  substrate-of
                  supports
                  supported-by
                  text-active-phrase-of
                  text-active-sentence-of
                  text-active-verbseq-pl-of
                  text-active-verbseq-sg-of
                  text-active-verbseq-of
                  text-arguments-of
                  text-dobj-of
                  text-nom-sentence-of
                  text-nominalization-of
                  text-number-of
                  text-particle-of
                  text-passive-phrase-of
                  text-passive-sentence-of
                  text-passive-verbseq-pl-of
                  text-passive-verbseq-sg-of
                  text-passive-verbseq-of
                  text-subj-of
                  time-of
                  time-contains
                  toward-of
                  text-toward-of
                  velocity-of
                  combat-power-ratio-of
                  enemy-of))
                                                                                        
    (superclasses (Thing))
    (primary-slot (time-during))
    (cmap-correspondence ((:seq time-during "when")))
    (member-of (_Partition1))
    (test-case ('((Knife has (superclasses (Physical-Object))) (every Knife has (purpose ((a Instrument-Role with (in-event ((a Cut))))))) (*K has (instance-of (Knife)) (object-of ((a Be-Ruined)))) (Cut has (superclasses (Event))) (every Cut has (instrument ((a Knife)))) (a Cut with (instrument (*K))) (not (try-do (thelast Cut))))))
    (wn20-synset ((:set (:triple "event" 1 "n") (:triple "event" 3 "n")))))

(every Event has 
    (identifier ((((forall (the called of Self) (a Text-Field with (information-content ((It)))))) && ((forall (the uniquely-called of Self) (a Text-Field with (information-content ((It)))))))))
    (subevent ((<> Self)
               (must-be-a Event)
               (the first-subevent of Self)))
    (next-event ((must-be-a Event with (time-during ((a Time-Interval with (time-after ((the time-during of Self)))))))))
    (all-subevents ((the subevent of Self)
                    (the all-subevents of (the subevent of Self))))
    (actions ((:set (forall (the subevent of Self) (the actions of It)) Self)))
    (primitive-actions ((the primitive-actions of (the subevent of Self))
                        (if (not (the subevent of Self)) then Self)))
    (time-during ((a Time-Interval with (time-after ((forall (the subevent of (the subevent-of of Self)) where ((the next-event of It) = Self) (the time-during of It)))) (time-before ((the time-during of (the next-event of Self)))))))
    (site ((must-be-a Spatial-Entity with (is-near ((if (has-value (the object of Self)) then (the location of (the object of Self))))))))
    (agent ((must-be-a Entity with (abuts ((if (has-value (the instrument of Self)) then (the instrument of Self)))))))
    (beneficiary ((must-be-a Living-Entity)))
    (donor ((must-be-a Entity)))
    (instrument ((must-be-a Entity with (abuts ((if (has-value (the agent of Self)) then (the agent of Self)))))))
    (recipient ((must-be-a Entity)))
    (result ((must-be-a Entity)))
    (pcs-list ((if (has-value (the instrument of Self)) then (forall (the instrument of Self) ((:triple (It) instance-of (mustnt-be-a Entity with (plays ((a Instrument-Role))) (object-of ((a Be-Broken with (object (It))))))))))))
    (text-gen ((make-sentence (the text-sentence of Self))))
    (text-description ((the text-nom-sentence of Self)))
    (text-dobj ((if (has-value (the object of Self)) then (the object of Self) else (the result of Self))))
    (text-subj ((if (has-value (the agent of Self)) then (the agent of Self) else (the instrument of Self))))
    (text-subj-phrase ((if (((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the text-subj of Self))) and ((the text-def-head of (the text-subj of Self)) = (:seq (:seq "the") (:seq (the text-subj of Self) ())))) then (:seq "the" (oneof (the all-instances of Relation) where ((the It of Self) = (the text-subj of Self)))) else (andify (the text-def-head of (the text-subj of Self))))))
    (text-dobj-phrase ((if (((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the text-dobj of Self))) and ((the text-def-head of (the text-dobj of Self)) = (:seq (:seq "the") (:seq (the text-dobj of Self) ())))) then (:seq "the" (oneof (the all-instances of Relation) where ((the It of Self) = (the text-dobj of Self)))) else (andify (the text-def-head of (the text-dobj of Self))))))
    (text-number ((if (has-value (the text-subj of Self)) then (the number of (the text-subj of Self)) else (the number of (the text-dobj of Self)))))
    (text-active-verbseq ((if ((the text-number of Self) > 1) then (the text-active-verbseq-pl of Self) else (the text-active-verbseq-sg of Self))))
    (text-passive-verbseq ((if ((the text-number of Self) > 1) then (the text-passive-verbseq-pl of Self) else (the text-passive-verbseq-sg of Self))))
    (text-active-phrase ((if ((the number of (the text-active-verbseq of Self)) = 1) then (the text-active-verbseq of Self) else ((if ((the text-number of Self) = 1) then ((:seq "does" (andify (the instance-of of Self)))) else ((:seq "do" (andify (the instance-of of Self)))))))))
    (text-passive-phrase ((if ((the number of (the text-passive-verbseq of Self)) = 1) then (the text-passive-verbseq of Self) else ((if ((the number of (the text-dobj of Self)) > 1) then ((:seq "have" (andify (the instance-of of Self)) "done to them")) else ((:seq "has" (andify (the instance-of of Self)) "done to it")))))))
    (text-sentence ((:seq (if (oneof (the superclasses of (the classes of Self)) where ((the text-active-verbseq-sg of (an instance of It)) = (the text-active-verbseq-sg of Self))) then (:seq (the name of Self) "nospace" ":")) (if (has-value (the text-subj of Self)) then (the text-active-sentence of Self) else (the text-passive-sentence of Self)))))
    (text-active-sentence ((:seq (the text-subj-phrase of Self) (the text-active-phrase of Self) (if ((the agent of Self) /= (the text-dobj of Self)) then (if (the text-dobj of Self) then (the text-dobj-phrase of Self))) (the text-arguments of Self))))
    (text-passive-sentence ((if (has-value (the text-dobj of Self)) then (:seq (the text-dobj-phrase of Self) (the text-passive-phrase of Self) (the text-arguments of Self)) else (if ((not (has-value (the elements of (the text-arguments of Self)))) and (not (has-value (the text-passive-verbseq of Self)))) then (the text-nom-sentence of Self) else (:seq "something" (the text-passive-phrase of Self) (the text-arguments of Self))))))
    (name ((if (anonymous-instancep Self) then (oneof ?c1 in (the classes of Self) where (not (oneof ?c2 in (the classes of Self) where ((?c1 /= ?c2) and (?c1 subsumes ?c2))))))))
    (text-head ((if (anonymous-instancep Self) then (if (has-value (the text-nominalization of Self)) then (if ((:set "activity" "action") includes (the text-nominalization of Self)) then Self else (the text-nominalization of Self)) else Self) else (the name of Self))))
    (text-def-determiner ((:seq "the")))
    (text-indef-determiner ((if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (the text-head of Self))) 0))))) then (:seq "an") else (:seq "a"))))
    (text-def-head ((:seq (the text-def-determiner of Self) (the text-head of Self))))
    (text-indef-head ((:seq (the text-indef-determiner of Self) (the text-head of Self))))
    (text-indef-phrase ((if (has-value (the text-dobj of Self)) then (:seq (the text-def-head of Self) (if ((the text-dobj of Self) = (the result of Self)) then (the text-result of Self) else (the text-object of Self)) (andify (the text-indef-head of (the text-dobj of Self)))) else (the text-indef-head of Self))))
    (text-premodslots ((:seq manner duration acceleration velocity rotational-rate frequency distance direction rate)))
    (text-premods ((if (has-value (the text-premodslots of Self)) then (forall-seq (the text-premodslots of Self) where ((has-value (the It of Self)) and (not ((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the It of Self))))) (if (It isa Property) then (the text-phrase of (the It of Self)) else (:seq (the text-premods of (the It of Self)) (the text-head of (the It of Self))))))))
    (text-postmodslots ((:seq subevent-of raw-material agent donor recipient beneficiary instrument resulting-state-of caused-by origin destination toward away-from path)))
    (text-postmods ((if (has-value (the text-postmodslots of Self)) then (forall-seq (the text-postmodslots of Self) where (has-value (the It of Self)) (:seq (if (has-value (the text-slot of It)) then (the (the text-slot of It) of Self)) (if (It isa Property) then (the text-phrase of (the It of Self)) else (andify (the text-def-head of (the It of Self)))))))))
    (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self) (if ((the text-dobj of Self) = (the result of Self)) then (the (the text-slot of result) of Self) else (the (the text-slot of object) of Self)) (the text-dobj-phrase of Self)) else (:seq (the text-head of Self)))))
    (text-nom-sentence ((make-sentence ((if (has-value (the elements of (the text-postmods of Self))) then (:seq (the text-base-phrase of Self) "is" (the text-postmods of Self)) else (if (has-value (the elements of (the text-premods of Self))) then (:seq (the text-def-head of Self) "is" (the text-premods of Self)) else (the text-existential-there of Self)))))))
    (text-existential-there ((make-sentence (:seq "there is" (the text-indef-phrase of Self)))))
    (text-definition-sentence ((make-sentence (:seq (the text-indef-phrase of Self) "is" (andify (forall (the superclasses of (the classes of Self)) (the text-indef-head of (an instance of It))))))))
    (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self))))
    (text-argslots ((:seq base instrument)))
    (text-arguments ((forall-seq (the text-argslots of Self) where ((has-value (the It of Self)) and ((the It of Self) /= (the text-subj of Self)) and ((the It of Self) /= (the text-dobj of Self))) (:seq ((if (has-value (the text-slot of It)) then (the1 of (the (the text-slot of It) of Self)))) ((if (((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of (the It of Self))) and ((the text-def-head of (the It of Self)) = (:seq (:seq "the") (:seq (the It of Self) ())))) then (:seq "the" It) else ((if ((the number of (the It of Self)) = 1) then ((if ((the It of Self) isa String) then (the It of Self) else (the text-def-head of (the It of Self)))) else (the text-def-head of (the It of Self))))))))))
    (text-subevent-of ((if (has-value (the subevent-of of Self)) then ("part of"))))
    (text-object ((if (has-value (the object of Self)) then ("of"))))
    (text-result ((if (has-value (the result of Self)) then ("of"))))
    (text-raw-material ((if (has-value (the raw-material of Self)) then ("out of"))))
    (text-agent ((if (has-value (the agent of Self)) then ("by"))))
    (text-donor ((if (has-value (the donor of Self)) then ("from"))))
    (text-recipient ((if (has-value (the recipient of Self)) then ("to"))))
    (text-beneficiary ((if (has-value (the beneficiary of Self)) then ("for"))))
    (text-instrument ((if (has-value (the instrument of Self)) then ("using"))))
    (text-base ((if (has-value (the base of Self)) then ("to"))))
    (text-resulting-state ((if (has-value (the resulting-state of Self)) then ("resulting in"))))
    (text-resulting-state-of ((if (has-value (the resulting-state-of of Self)) then ("resulting from"))))
    (text-causes ((if (has-value (the causes of Self)) then ("causing"))))
    (text-caused-by ((if (has-value (the caused-by of Self)) then ("caused by"))))
    (text-origin ((if (has-value (the origin of Self)) then ("from"))))
    (text-destination ((if (has-value (the destination of Self)) then ("to"))))
    (text-toward ((if (has-value (the toward of Self)) then ("toward"))))
    (text-away-from ((if (has-value (the away-from of Self)) then ("away from"))))
    (text-path ((if (has-value (the path of Self)) then ("along"))))
    (text-site ((if (has-value (the site of Self)) then ("at")))))
(Eucaryotic-TRNA has 
    (superclasses (TRNA))
    (description ("Eucaryotic tRNA molecule.  Souther.")))
(Eucaryotic-RRNA has 
    (superclasses (RRNA))
    (description ("Eucaryotic rRNA molecule.  Souther. ")))
(Eucaryotic-RNA-Transcript has 
    (superclasses (RNA-Transcript))
    (description ("The DNA transcription product in eucaryotes. 
                        Souther."))
    )

(every Eucaryotic-RNA-Transcript has 
    (result-of ((a Eucaryotic-DNA-Transcription))))
(Eucaryotic-RNA-Polymerase has 
    (superclasses (RNA-Polymerase))
    (description ("The RNA polymerase which carries out transcription in
                        in eucaryotic organisms.")))

(every Eucaryotic-RNA-Polymerase has 
    (purpose ((a Catalyst with (in-event ((a Eucaryotic-DNA-Transcription)))))))
(Eucaryotic-Ribosome has 
    (superclasses (Ribosome))
    (description ("Ribosome found in cytoplasm of eucaryotes.
                                    Souther. ")))
(Eucaryotic-Plasma-Membrane has 
    (superclasses (Plasma-Membrane))
    (description ("Membrane that surrounds a eucaryotic cell. 
                         Alberts:ECB:G-14")))
(Eucaryotic-MRNA has 
    (superclasses (MRNA))
    (description ("RNA molecule that specifies the amino acid sequence of a
                     protein, produced by RNA splicing from
                     a larger RNA molecule made by RNA polymerase as a
                     complementary copy of DNA.  It is translated into protein
                     in a process catalyzed by ribosomes. Alberts:ECB:G-11"))
    )

(every Eucaryotic-MRNA has 
    (purpose ((a Vehicle with (in-event ((a Gene-To-Protein-Expression with (object ((a Cistron)))))))))
    (has-part ((a RNA-5prime-UTR)
               (a RNA-Translated-Region)
               (a RNA-3prime-UTR)
               (a Poly-A-Tail))))
(Eucaryotic-Gene-To-Protein-Expression has 
    (superclasses (Gene-To-Protein-Expression))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("Gene expression of proteins in eucaryotes, which
                           often involves post-transcription MRNA processing
                           including splicing to remove introns and 
                           modification of the two ends of the MRNA.
                           Souther. ")))

(every Eucaryotic-Gene-To-Protein-Expression has 
    (donor ((a Eucaryotic-Gene)))
    (recipient ((a Protein)))
    (object ((a Genetic-Information)))
    (instrument ((a Eucaryotic-MRNA)))
    (first-subevent ((the Eucaryotic-DNA-Transcription subevent of Self)))
    (subevent ((a Eucaryotic-DNA-Transcription))))
(Eucaryotic-Gene has 
    (superclasses (DNA-Gene-Coding-Sequence
                      Gene))
    (description ("Region of DNA that controls a discrete 
                                hereditary characteristic, usually 
                                corresponding to a single protein or RNA.
                                This definition includes the entire functional
                                unit, encompassing coding DNA sequences, 
                                noncoding regulatory DNA sequences, and introns
                                Alberts:MBC:G-10.")))
(Eucaryotic-DNA-Transcription has 
    (superclasses (DNA-Transcription))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("Copying of one strand of DNA into a complementary RNA
                       sequence by the enzyme RNA Polymerase in eucaryotes. cf
                       Alberts:ECB:G-18")))

(every Eucaryotic-DNA-Transcription has 
    (agent ((a Eucaryotic-Cell)))
    (object ((a Eucaryotic-DNA-Strand)))
    (raw-material ((a Aggregate with (element-type ((Ribonucleotide))))))
    (result ((a Gene-Transcript))))
(Eucaryotic-DNA-Strand has 
    (superclasses (DNA-Strand))
    (description ("One of two strands that make up the DNA double helix.
                        The two strands run antiparallel and are held 
                        together by Hydrogen-Bond between the bases.
                        Souther.")))

(every Eucaryotic-DNA-Strand has 
    (has-part ((a DNA-Gene-Coding-Sequence with (has-part ((a DNA-Noncoding-Sequence) (at-least 1 DNA-Noncoding-Sequence) (a Eucaryotic-Gene) (at-least 1 Eucaryotic-Gene)))))))
(Eucaryotic-DNA-Polymerase has 
    (superclasses (DNA-Polymerase))
    (description ("Enzyme that catalyzes the synthesis or repair
                        of a DNA molecule from nucleoside triphosphate
                        precursors using a DNA template in eucaryotes.
                        Souther. see Alberts: ECB:G-16.")))
(Eucaryotic-DNA has 
    (superclasses (DNA-Molecule))
    (description ("Double-stranded polynucleotide formed from two
                                separate chains of deoxyribonucleotide units;
                                serves as the carrier of genetic information in
                                eucaryotes. Alberts:ECB:G-6.")))

(every Eucaryotic-DNA has 
    (has-part ((at-least 5885 Gene)
               (at-most 34000 Gene)
               (exactly 2 DNA-Strand)
               (a DNA-Strand called "DS1" with (has-part ((a DNA-Gene-Coding-Sequence with (has-part ((at-least 1 Gene) (a Gene)))))))
               (a DNA-Strand called "DS2" with (has-part ((a DNA-Gene-Coding-Sequence with (has-part ((at-least 1 Gene) (a Gene))))))))))
(Eucaryotic-Cytoplasm has 
    (superclasses (Cytoplasm))
    (description ("The cytoplasm of a eucaryotic cell containing the
                         nucleus and other organelles. Souther. ")))

(every Eucaryotic-Cytoplasm has 
    (has-part ((a Endoplasmic-Reticulum)
               (a Golgi-Apparatus)
               (a Centriole)
               (exactly 2 Centriole)
               (a Cytoskeleton)
               (a Aggregate called "lysosomes" with (element-type ((Lysosome))))
               (a Aggregate called "peroxisomes" with (element-type ((Peroxisome))))
               (a Aggregate called "mitochondria" with (element-type ((Mitochondrion))))
               (a Aggregate called "vesicles" with (element-type ((Vesicle))))
               (a Aggregate called "microtubules" with (element-type ((Microtubule))))
               (a Aggregate called "intermediate-filaments" with (element-type ((Intermediate-Filament))))
               (a Aggregate called "actin-filaments" with (element-type ((Actin-Filament))))
               (a Cytosol with (has-part ((a Aggregate called "Cytoplasmic-Protein" with (element-type ((Cytoplasmic-Protein)))) (a Aggregate called "GTP-Aggregate" with (element-type ((GTP)))) (a Aggregate called "ATP-Aggregate" with (element-type ((ATP)))) (a Aggregate called "CTP-Aggregate" with (element-type ((CTP)))) (a Aggregate called "UTP-Aggregate" with (element-type ((UTP))))))))))
(Eucaryotic-Chromosome has 
    (superclasses (Chromosome))
    (description ("Long, threadlike structure composed of DNA and 
                        associated proteins that carries part or all of the
                        genetic information of an organism.  Alberts:ECB:G-4.
                        Note: Alberts definition for 'chromosome'. ")))

(every Eucaryotic-Chromosome has 
    (material ((a Chromatin)))
    (has-part ((a Eucaryotic-DNA)
               (a Histone-Complex with (element-type ((Histone))) (object-of ((a Be-Attached-To with (object ((a DNA-Molecule))))))))))
(Eucaryotic-Cell has 
    (superclasses (Cell))
    (description ("Cells which contain a nucleus and other organelles
                       in addition to cytoplasm. Modified from Alberts:ECB:9")))

(every Eucaryotic-Cell has 
    (has-part ((a Nucleus)
               (a Eucaryotic-Plasma-Membrane)
               (a Eucaryotic-Cytoplasm))))
(Eucaryote has 
                                            
    (superclasses (Organism))
    (description ("Living organism composed of one or more cells with a
                        distinct nucleus and cytoplasm.  Alberts:ECB:G-7.")))

(every Eucaryote has 
    (element-type ((Eucaryotic-Cell)))
    (has-basic-functional-unit ((a Eucaryotic-Cell))))
(Ethyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Hydrophobic chemical group derived from Ethane.
                             Alberts:ECB:G-11.")))

(every Ethyl-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-3")
               (exactly 5 Hydrogen-Atom))))
(Ethanol-Group has 
    (superclasses (Alcohol
                      Chemical-Group))
    (description ("Alcohol derived from ethane. Souther.")))

(every Ethanol-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To uniquely-called "C1-H1" with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C1-H2" with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C1-H3" with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C1-C2" with (object (((the Carbon-Atom has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-H1" with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C2-H2" with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To uniquely-called "C2-OH1" with (object ((the Hydroxyl-Group has-part of Self))) (instrument ((a Covalent-CO-Bond))) (site ((the Oxygen-Atom has-part of (the Hydroxyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-3")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydroxyl-Group))))
(Essential-Amino-Acid has 
                                                                                                                                                                                                                                                         
    (superclasses (Amino-Acid))
    (description ("Amino acid that cannot be synthesized by humans (and
                        other vertebrates) and must be obtained from the diet.
                        Lehninger:PBC:G-5.")))
(Equilibrium-Reaction has 
                                                                         
    (superclasses (Reaction))
    (domain-of (keq-expression
                   keq
                   ki))
    (range-of (keq-expression-of
                  keq-of
                  ki-of)))

(every Equilibrium-Reaction has 
    (keq ((((if (not (the keq of Self)) then (if (oneof (the ki of Self) where ((the value of It) = nil)) then (the output of (a Compute-Equilibrium-Constant with (input (Self))))) [Equilibrium-Reaction-keq-1])) && ((if (not (the keq of Self)) then (if (not (oneof (the ki of Self) where ((the value of It) = nil))) then (a Equilibrium-Constant-Value with (value ((:pair (the product of (forall-bag (the bag of (the ki of Self)) (the1 of (the value of It)))) nil))))) [Equilibrium-Reaction-keq-2])))))
    (ki ((if ((the ki of Self) and (not (oneof (the ki of Self) where ((the value of It) = nil))) and (the1 of (the value of (the keq of Self))) and ((the product of (forall-bag (the bag of (the ki of Self)) (the1 of (the value of It)))) /= (the1 of (the value of (the keq of Self))))) then (a Equilibrium-Constant-Value with (subscript ((a Subscript-Value))) (value ((:pair ((the1 of (the value of (the keq of Self))) / (the product of (forall-bag (the bag of (the ki of Self)) (the1 of (the value of It))))) nil)))) else (a Equilibrium-Constant-Value with (subscript ((a Subscript-Value)))))))
    (keq-expression ((if ((not (the keq-expression of Self)) and (the result of Self) and (the raw-material of Self)) then (the output of (a Compute-Equilibrium-Expression with (input (Self)))) [Equilibrium-Reaction-keq-expression-1]))))
(Equilibrium-Constant-Value has 
    (superclasses (Property-Value))
    (range-of (default-ka
                  default-kb
                  ka
                  kb
                  keq
                  ki))
    (domain-of (default-ka-of
                   default-kb-of
                   ka-of
                   kb-of
                   keq-of
                   ki-of)))

(every Equilibrium-Constant-Value has 
    (property-slot ((keq)))
    (less-than ((must-be-a Equilibrium-Constant-Value)))
    (greater-than ((must-be-a Equilibrium-Constant-Value)))
    (same-as ((must-be-a Equilibrium-Constant-Value))))
(Equilibrium-Constant-Expression has 
    (superclasses (KM-Class))
    (range-of (ka-expression
                  kb-expression
                  keq-expression
                  term-of))
    (domain-of (ka-expression-of
                   kb-expression-of
                   keq-expression-of
                   term)))

(every Equilibrium-Constant-Expression has 
    (term ((a Thing))))
(Equation-Set has 
    (domain-of (equation-expression
                   equation-symbol
                   equation-uses
                   equation-of))
    (range-of (equation-expression-of
                  equation-symbol-of
                  used-in-equation
                  equation))
    (superclasses (KM-Class)))
(Enzyme-Complex has 
                                                               
    (superclasses (Aggregate
                      Protein-Complex))
    (description ("A group of enzymes which act together to provide
                        structure or perform some function.  Examples are
                        ATP synthesis and oxidative phosphorylation enzymes.
                        Souther.")))

(every Enzyme-Complex has 
    (element-type ((Enzyme)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Enzyme-Catalysis has 
                                                                                                                                                                                                                                                                                                                                                                                                                                
    (superclasses (Catalyze))
    (required-slot (substrate
                       result))
    (primary-slot (agent
                      instrument))
    (description ("A chemical reaction whose rate is 
                                     facilitated by the presence of an enzyme 
                                     which is not altered by the reaction. 
                                     Souther.")))

(every Enzyme-Catalysis has 
    (agent ((a Suborganismal-Entity)))
    (substrate ((a Chemical-Entity)))
    (result ((a Chemical-Entity)
             (at-least 1 Chemical-Entity)))
    (instrument ((a Enzyme))))
(Enzyme-Activation has 
    (superclasses (Activate))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (description ("To put an enzyme into a state where it a can 
                         catalyze a reaction.  Souther.")))

(every Enzyme-Activation has 
    (agent ((a Cell)))
    (object ((a Enzyme)))
    (instrument ((a Coenzyme with (object-of ((a Be-Attached-To with (base ((the Enzyme object of Self)))))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Enzyme has 
                                                                                                                                                                                                                                                                                                                                                                                                                             
    (superclasses (Protein))
    (description ("A protein that catalyzes a specific chemical reaction.
                       Alberts:ECB:G-7.")))

(every Enzyme has 
    (has-functional-part ((a Active-Site)))
    (purpose ((a Catalyst with (in-event ((a Enzyme-Catalysis)))))))
(Entrance has 
    (superclasses (Portal))
    (wn20-synset ((:set (:triple "entrance" 1 "n"))
                  (:set (:triple "entranceway" 1 "n"))
                  (:set (:triple "entryway" 1 "n"))
                  (:set (:triple "entry" 5 "n"))
                  (:set (:triple "entree" 3 "n")))))

(every Entrance has 
    (in-event ((must-be-a Move-Into)))
    (played-by ((a Spatial-Entity with (path-of ((the in-event of Self))))))
    (is-between ((the is-inside of Self)
                 (the is-outside of Self))))
(Entity has 
    (domain-of (age
                   agent-of
                   text-agent-of
                   animacy
                   beneficiary-of
                   capability
                   content-of
                   donor-of
                   experiencer-of
                   first-element-of
                   has-basic-functional-unit
                   is-basic-functional-unit-of
                   has-functional-part
                   is-functional-part-of
                   has-goal
                   has-part
                   is-part-of
                   text-has-part
                   text-is-part-of
                   instrument-of
                   next-element
                   previous-element
                   object-of
                   orientation
                   plays
                   possesses
                   is-possessed-by
                   text-is-possessed-by
                   purpose
                   recipient-of
                   result-of
                   text-result-of
                   text-dobj-of
                   text-subj-of
                   time-of-existence
                   trait
                   worth
                   allegiance
                   capacitance
                   electric-current
                   electric-resistance
                   energy))
    (range-of (age-of
                  agent
                  text-agent
                  animacy-of
                  beneficiary
                  capability-of
                  content
                  donor
                  experiencer
                  first-element
                  has-basic-functional-unit
                  is-basic-functional-unit-of
                  has-functional-part
                  is-functional-part-of
                  is-goal-of
                  has-part
                  is-part-of
                  text-has-part-of
                  text-is-part
                  instrument
                  next-element
                  previous-element
                  object
                  orientation-of
                  played-by
                  possesses
                  is-possessed-by
                  text-is-possessed-by-of
                  purpose-of
                  recipient
                  result
                  text-result
                  text-dobj
                  text-subj
                  time-of-existence-of
                  trait-of
                  worth-of
                  allegiance-of
                  capacitance-of
                  electric-current-of
                  electric-resistance-of
                  energy-of))
                                                                                                                 
    (superclasses (Thing))
    (member-of (_Partition1)))

(every Entity has 
    (identifier ((((forall (the called of Self) (a Text-Field with (information-content ((It)))))) && ((forall (the uniquely-called of Self) (a Text-Field with (information-content ((It)))))))))
    (name ((if (anonymous-instancep Self) then (oneof ?c1 in (the classes of Self) where (not (oneof ?c2 in (the classes of Self) where ((?c1 /= ?c2) and (?c1 subsumes ?c2))))))))
    (text-gen ((make-phrase (the text-phrase of Self))))
    (text-description ((the text-sentence of Self)))
    (text-head ((if (anonymous-instancep Self) then (:seq (if ((:set Thing Entity Intangible-Entity Spatial-Entity Place Tangible-Entity) is-superset-of (the instance-of of Self)) then (if (has-value (the plays of Self)) then (oneof (the plays of Self) where t) else (if (has-value (the location-of of Self)) then (:seq "location of" (the text-gen of (oneof (the location-of of Self) where t))) else Self)) else Self) (if (has-value (the uniquely-called of Self)) then (:seq "(called" (the uniquely-called of Self) ")") else (if (has-value (the called of Self)) then (:seq "(called" (the called of Self) ")")))) else (the name of Self))))
    (text-def-determiner ((if (anonymous-instancep Self) then (if (has-value (the is-possessed-by of Self)) then (:seq (the text-def-head of (the is-possessed-by of Self)) "'s") else (:seq "the")))))
    (text-indef-determiner ((if (anonymous-instancep Self) then (if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (KM-UNIQUE0 '(make-phrase (the text-head of Self))) 0))))) then (:seq "an") else (:seq "a")))))
    (text-def-head ((:seq (the text-def-determiner of Self) (the text-head of Self))))
    (text-indef-head ((:seq (the text-indef-determiner of Self) (the text-head of Self))))
    (text-is-above ("above"))
    (text-is-along ("along"))
    (text-is-between ("between"))
    (text-is-behind ("behind"))
    (text-is-opposite ("opposite"))
    (text-is-outside ("outside"))
    (text-is-over ("over"))
    (text-is-beside ("beside"))
    (text-is-near ("near"))
    (text-is-at ("at"))
    (text-is-on ("on"))
    (text-site-of ("site of"))
    (text-abuts ("abutting"))
    (text-is-inside ("inside"))
    (text-is-part-of ("part of"))
    (text-has-part ("made up of"))
    (text-material ("made of"))
    (text-content ("containing"))
    (text-result-of ("result of"))
    (text-raw-material-of ("raw material of"))
    (text-agent-of ("agent of"))
    (text-is-north-of ("north of"))
    (text-is-northeast-of ("northeast of"))
    (text-is-east-of ("east of"))
    (text-is-southeast-of ("southeast of"))
    (text-is-south-of ("south of"))
    (text-is-southwest-of ("southwest of"))
    (text-is-west-of ("west of"))
    (text-is-northwest-of ("northwest of"))
    (text-premodslots ((:seq area length height thickness volume size capacity depth mass density temperature wetness brightness breakability consistency shape smell taste texture trait age color physical-state sex)))
    (text-premods ((if (has-value (the text-premodslots of Self)) then (forall-seq (the text-premodslots of Self) where (has-value (the It of Self)) (if (It isa Property) then (if (has-value (the value of (the It of Self))) then (the text-phrase of (the It of Self))) else (the text-head of (the It of Self)))))))
    (text-postmodslots ((:seq material content is-above is-along is-between is-behind is-opposite is-outside is-over is-beside is-at is-on site-of abuts is-inside is-north-of is-northeast-of is-east-of is-southeast-of is-south-of is-southwest-of is-west-of is-northwest-of)))
    (text-postmods ((if (has-value (the text-postmodslots of Self)) then (forall-seq (the text-postmodslots of Self) where (has-value (the It of Self)) (:seq (the (the text-slot of It) of Self) (if (Event subsumes (the range of It)) then (andify (the text-indef-phrase of (the It of Self))) else (andify (the text-def-head of (the It of Self)))))))))
    (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
    (text-indef-phrase ((:seq (the text-indef-determiner of Self) (the text-premods of Self) (the text-head of Self))))
    (text-sentence ((make-sentence ((if (has-value (the elements of (the text-postmods of Self))) then (:seq (the text-base-phrase of Self) "is" (andify (the elements of (the text-postmods of Self)))) else (if (has-value (the elements of (the text-premods of Self))) then (:seq (the text-def-head of Self) "is" (andify (the elements of (the text-premods of Self)))) else (if (has-value (the is-possessed-by of Self)) then (:seq (the text-gen of (the is-possessed-by of Self)) "has" (the text-indef-head of Self)) else (the text-existential-there of Self))))))))
    (text-existential-there ((make-sentence (:seq "there is" (if (anonymous-instancep Self) then (the text-indef-head of Self) else (:seq (the text-indef-head of (an instance of (oneof (the classes of Self) where t))) "called" (the text-head of Self)))))))
    (text-definition-sentence ((make-sentence (:seq (the text-indef-head of Self) "is" ((the elements of (andify (forall (the superclasses of (the classes of Self)) (the text-indef-head of (an instance of It))))) or "something") (if ((has-value (the elements of (the text-postmods of Self))) and (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) then ((?sup == (oneof (the superclasses of (the classes of Self)) where ((the elements of (the text-postmods of (an instance of It))) /= (the elements of (the text-postmods of Self))))) and (:seq "that is" (andify (allof (the elements of (the text-postmods of Self)) where (not ((the elements of (the text-postmods of (an instance of ?sup))) includes It)))))))))))
    (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))
(Enter has 
    (superclasses (Move-Into
                      Reflexive-Cliche))
    (required-slot (agent
                       object
                       base))
    (primary-slot (destination
                      origin
                      path))
    (cmap-correspondence ((:seq agent "the enter'er")
                          (:seq object "the enter'er")
                          (:seq base "the enclosure")
                          (:seq destination "final location")
                          (:seq origin "original location")
                          (:seq path "the portal")))
    (test-case ('((*John has (instance-of (Living-Entity)) (is-outside (*House))) (*Enter-doorway has (instance-of (Spatial-Entity))) (*House-Location has (instance-of (Place))) (*House has (instance-of (Physical-Object)) (location (*House-Location))) (a Move-Into with (agent (*John)) (object (*John))) ((thelast Move-Into) isa Enter) (the text-gen of (thelast Enter)) (a Enter with (agent (*John)) (base (*House)) (path (*Enter-doorway))) (do-and-next (thelast Enter)) (the text-gen of (thelast Enter)) ((the path of (thelast Enter)) = *Enter-doorway) ((the content of (the Container plays of *House)) includes *John) ((the is-inside of *John) includes *House) ((the is-outside of (the location of *John)) /= *House-Location))))
    (wn16-synset ((:set (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v") (:triple "move_into" 1 "v"))))
    (wn20-synset ((:set (:triple "enter" 1 "v") (:triple "come_in" 1 "v") (:triple "get_into" 2 "v") (:triple "get_in" 1 "v") (:triple "go_into" 1 "v") (:triple "go_in" 1 "v") (:triple "move_into" 1 "v")))))

(every Enter has 
    (agent ((the object of Self)))
    (text-active-verbseq-sg ("enters"))
    (text-active-verbseq-pl ("enter"))
    (text-base (()))
    (text-nominalization ("entry")))

(every Enter has-definition 
    (instance-of (Move-Into
                     Reflexive-Cliche)))
(Ensemble has 
    (superclasses (Aggregate))
    (description ("A collection of distinct structures which function 
                        together to carry out some task, as the respiratory
                        enzyme complex on mitochondrial membranes."))
    (wn16-synset ((:set (:triple "ensemble" 4 "n") (:triple "tout_ensemble" 1 "n"))))
    (wn20-synset ((:set (:triple "ensemble" 4 "n") (:triple "tout_ensemble" 1 "n"))))
    )
(Engineering has 
    (superclasses (Development))
    (wn20-synset ((:set (:triple "technology" 1 "n") (:triple "application" 2 "n") (:triple "profession" 2 "n")))))

(every Engineering has 
    (text-nominalization ("engineering")))
(Engineer-Unit has 
                                                                                                                                                                                                                                                                 
    (superclasses (Military-Unit)))
(Engineer-Squad has 
    (superclasses (Engineer-Unit
                      Squad)))

(every Engineer-Squad has-definition 
    (instance-of (Engineer-Unit
                     Squad)))
(Engineer-Regiment has 
    (superclasses (Engineer-Unit
                      Regiment)))

(every Engineer-Regiment has-definition 
    (instance-of (Engineer-Unit
                     Regiment)))
(Engineer-Platoon has 
    (superclasses (Engineer-Unit
                      Platoon)))

(every Engineer-Platoon has-definition 
    (instance-of (Engineer-Unit
                     Platoon)))
(Engineer-Division has 
    (superclasses (Engineer-Unit
                      Division)))

(every Engineer-Division has-definition 
    (instance-of (Engineer-Unit
                     Division)))
(Engineer-Corps has 
    (superclasses (Engineer-Unit
                      Corps)))

(every Engineer-Corps has-definition 
    (instance-of (Engineer-Unit
                     Corps)))
(Engineer-Company has 
    (superclasses (Engineer-Unit
                      Military-Company)))

(every Engineer-Company has-definition 
    (instance-of (Engineer-Unit
                     Military-Company)))
(Engineer-Brigade has 
    (superclasses (Engineer-Unit
                      Brigade)))

(every Engineer-Brigade has-definition 
    (instance-of (Engineer-Unit
                     Brigade)))
(Engineer-Battalion has 
    (superclasses (Engineer-Unit
                      Battalion)))

(every Engineer-Battalion has-definition 
    (instance-of (Engineer-Unit
                     Battalion)))
(Engagement-of-Main-Elements-of-Enemy-Combat-Power has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Engagement-Military-Task has 

    (superclasses (Military-Task)))

(every Engagement-Military-Task has 
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 1 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 1 ()))))))
    (available-force-ratio ((a Available-Force-Ratio-Value with (value ((:pair (((the sum of (forall-bag (the bag of (the relative-combat-power of (the agent of Self))) (the1 of (the value of It)))) + (the sum of (forall-bag (the bag of (the relative-combat-power of (the supported-by-military-unit of (the agent of Self)))) (the1 of (the value of It))))) / ((the sum of (forall-bag (the bag of (the relative-combat-power of (the enemy of Self))) (the1 of (the value of It)))) + (the sum of (forall-bag (the bag of (the relative-combat-power of (the supported-by-military-unit of (the enemy of Self)))) (the1 of (the value of It)))))) ()))))))
    (soft-pcs-list ((if (has-value (the required-force-ratio of Self)) then ((if ((the1 of (the value of (the required-force-ratio of Self))) /= 0) then (:triple (the1 of (the value of (the available-force-ratio of Self))) >= (the1 of (the value of (the required-force-ratio of Self)))) [Engagement-Military-Task-pcs-1])))))
    (del-list ((forall (the agent of Self) (:triple It remaining-strength (the remaining-strength of It)))
               (forall (the enemy of Self) (:triple It remaining-strength (the remaining-strength of It)))))
    (add-list ((forall (the agent of Self) (if (has-value (the remaining-strength of It)) then (:triple It remaining-strength (a Remaining-Strength-Value with (value ((:pair ((the1 of (the value of (the agent-attrition-rate of Self))) * (the1 of (the value of (the remaining-strength of It)))) ()))))) else (:triple It remaining-strength (a Remaining-Strength-Value with (value ((:pair ((the1 of (the value of (the agent-attrition-rate of Self)))) ())))))))
               (forall (the enemy of Self) (if (has-value (the remaining-strength of It)) then (:triple It remaining-strength (a Remaining-Strength-Value with (value ((:pair ((the1 of (the value of (the enemy-attrition-rate of Self))) * (the1 of (the value of (the remaining-strength of It)))) ()))))) else (:triple It remaining-strength (a Remaining-Strength-Value with (value ((:pair ((the1 of (the value of (the enemy-attrition-rate of Self)))) ())))))))))
    (test-case ('((new-situation) (*TheGoodGuys has (instance-of (Military-Unit)) (allegiance ((a Allegiance-Value with (value (*Blue))))) (possesses ((a Military-Equipment with (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 3.1 ())))))))))) (*TheBadGuys has (instance-of (Military-Unit)) (allegiance ((a Allegiance-Value with (value (*Red))))) (possesses ((a Military-Equipment with (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 2 ())))))))))) (*TheOtherBadGuys has (instance-of (Military-Unit)) (allegiance ((a Allegiance-Value with (value (*Red))))) (possesses ((a Military-Equipment with (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 2 ())))))))))) (*SomeEngagement has (instance-of (Engagement-Military-Task)) (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ())))))) (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ())))))) (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1.5 ())))))) (agent (*TheGoodGuys)) (enemy (*TheBadGuys))) ((the1 of (the value of (the available-force-ratio of *SomeEngagement))) = 1.55) (do-and-next *SomeEngagement) ((the1 of (the value of (the remaining-strength of *TheGoodGuys))) = 0.9) ((the1 of (the value of (the remaining-strength of *TheBadGuys))) = 0.5) (*SomeOtherEngagement has (instance-of (Engagement-Military-Task)) (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ())))))) (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ())))))) (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1.5 ())))))) (agent (*TheGoodGuys)) (enemy (*TheOtherBadGuys))) ((the1 of (the value of (the available-force-ratio of *SomeOtherEngagement))) < 1.5) (not (try-do *SomeOtherEngagement))))))
(Energy-Value has 
    (superclasses (Property-Value))
    (range-of (energy))
    (domain-of (energy-of)))

(every Energy-Value has 
    (property-slot ((energy)))
    (energy-of ((must-be-a Entity)))
    (less-than ((must-be-a Energy-Value)))
    (greater-than ((must-be-a Energy-Value)))
    (same-as ((must-be-a Energy-Value))))
(Energy-Transfer has 
                                         
    (superclasses (Transfer))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("The transfer of energy from one entity to another.
                          Souther. ")))

(every Energy-Transfer has 
    (donor ((a Tangible-Entity)))
    (recipient ((a Tangible-Entity)))
    (object ((a Energy)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Energy-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (energy)))
(Energy has 
                                                                          
    (superclasses (Tangible-Entity))
    (description ("The capacity to do work."))
    (wn20-synset ((:set (:triple "energy" 1 "n")))))
(Enemy-Vulnerability-Exploitation has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Enemy-Reserve-Force-Engagement has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Enemy-Maneuver-Engagement has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Enemy-Attrition-Rate-Value has 
    (superclasses (Property-Value))
    (range-of (enemy-attrition-rate))
    (domain-of (enemy-attrition-rate-of)))

(every Enemy-Attrition-Rate-Value has 
    (property-slot ((enemy-attrition-rate)))
    (less-than ((constraint ((TheValue isa Agent-Attrition-Rate-Value) or (TheValue isa Enemy-Attrition-Rate-Value)))))
    (greater-than ((constraint ((TheValue isa Agent-Attrition-Rate-Value) or (TheValue isa Enemy-Attrition-Rate-Value)))))
    (same-as ((constraint ((TheValue isa Agent-Attrition-Rate-Value) or (TheValue isa Enemy-Attrition-Rate-Value))))))
(Enemy-Attrition-Rate-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (enemy-attrition-rate)))
(Enemy-Artillery-Engagement has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Endoplasmic-Reticulum has 
    (superclasses (Organelle
                      Subcellular-Compartment))
    (description ("Labyrinthine, membrane-bounded compartment in the
                        cytoplasm of Eucaryotic-Cell, where lipids are
                        secreted and membrane-bound proteins are made.
                        Alberts:ECB:G-7")))

(every Endoplasmic-Reticulum has 
    (has-part ((a Internal-Membrane with (encloses ((the Subcellular-Compartment has-part of Self))))
               (a Subcellular-Compartment))))
(Endocytose has 
    (superclasses (Take-In))
    (required-slot (object
                       destination))
    (primary-slot (agent
                      origin
                      path))
    (description ("Uptake of material into a cell by an invagination of the
                      plasma membrane leading to internalization in a membrane-
                      bounded vesicle.  Alberts:ECB:G-7."))
    )

(every Endocytose has 
    (agent ((a Cell)))
    (object ((a Tangible-Entity)))
    (origin ((a Spatial-Entity with (is-outside ((the Cell agent of Self))))))
    (destination ((a Spatial-Entity with (is-inside ((the Cell agent of Self))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Emit has 
    (superclasses (Move))
    (required-slot (object
                       origin))
    (primary-slot (agent
                      destination
                      path))
    (cmap-correspondence ((:seq object "the thing emitted")
                          (:seq base "the enclosure")
                          (:seq destination "final location")
                          (:seq agent "the mover")
                          (:seq origin "original location")
                          (:seq path "the portal")))
    (test-case ('((*Sun has (instance-of (Physical-Object)) (location ((a Place)))) (*Earth has (instance-of (Physical-Object)) (location ((a Place)))) (*SunLight has (instance-of (Energy)) (location ((a Place)))) (a Emit with (object (*SunLight)) (origin (*Sun)) (destination (*Earth))) (do-and-next (thelast Emit)) (the text-gen of (thelast Emit)) ((the location of *SunLight) = (the location of *Earth)) ((the location of *SunLight) /= (the location of *Sun)) (new-situation) (*stink-bomb has (instance-of (Physical-Object)) (location ((a Place)))) (*noisome-fumes has (instance-of (Fluid-Substance)) (location ((a Place)))) (a Emit with (object (*noisome-fumes)) (instrument (*stink-bomb))) (do-and-next (thelast Emit)) ((the origin of (thelast Emit)) = *stink-bomb) (not ((the location of *noisome-fumes) = (the location of *stink-bomb))))))
    (wn16-synset ((:set (:triple "emit" 2 "v") (:triple "give_out" 1 "v") (:triple "give_off" 2 "v"))))
    (wn20-synset ((:set (:triple "emit" 2 "v") (:triple "give_out" 1 "v") (:triple "give_off" 2 "v")))))

(every Emit has 
    (text-active-verbseq-sg ("emits"))
    (text-active-verbseq-pl ("emit"))
    (text-passive-verbseq-sg ("gets emitted"))
    (text-passive-verbseq-pl ("get emitted"))
    (object ((constraint ((TheValue &? (a Fluid-Substance)) or (TheValue &? (a Energy))))))
    (origin (((a Spatial-Entity) & (if (has-value (the agent of Self)) then (the agent of Self) else (if (has-value (the instrument of Self)) then (the instrument of Self))))))
    (text-nominalization ("emission")))
(Embody has 
    (superclasses (Create))
    (required-slot (object
                       result))
    (wn16-synset ((:set (:triple "embody" 3 "v"))))
    (wn20-synset ((:set (:triple "embody" 3 "v"))))
    )

(every Embody has 
    (object ((a Message)))
    (result ((a Tangible-Entity)))
    (text-nominalization ("embodiment")))
(Elevator has 
    (superclasses (Room))
    (wn20-synset ((:set (:triple "elevator" 1 "n") (:triple "lift" 8 "n")))))
(Electronegativity-Value has 
    (superclasses (Property-Value))
    (range-of (electronegativity))
    (domain-of (electronegativity-of)))

(every Electronegativity-Value has 
    (property-slot ((electronegativity))))
(Electronegativity-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (electronegativity)))
(Electron-Transfer has 
    (superclasses (Transfer))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("The transfer of electrons from one molecule to 
                          another.  Souther.")))

(every Electron-Transfer has 
    (agent ((a Cell)))
    (donor ((a Molecule)))
    (recipient ((a Molecule)))
    (object ((a Electron)))
    (instrument ((a Electron-Carrier)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Electron-Shell has 
    (superclasses (Atomic-Region))
    (description ("An energy level in the atom which corresponds to a
                        discrete orbit.  Each shell can accomodate only a 
                        strictly limited number of electrons. Alberts:ECB:40")))
(Electron-Pair-Donor has 
    (superclasses (Chemical-Entity)))

(every Electron-Pair-Donor has 
    (plays ((a Lewis-Base-Role))))

(every Electron-Pair-Donor has-definition 
    (instance-of (Chemical-Entity
                     [Electron-Pair-Donor-instance-of-1]))
    (donor-of ((a Transfer with (object ((a Electron) (a Electron)))))))
(Electron-Pair-Acceptor has 
    (superclasses (Chemical-Entity)))

(every Electron-Pair-Acceptor has 
    (plays ((a Lewis-Acid-Role))))

(every Electron-Pair-Acceptor has-definition 
    (instance-of (Chemical-Entity
                     [Electron-Pair-Acceptor-instance-of-1]))
    (recipient-of ((a Transfer with (object ((a Electron) (a Electron)))))))
(Electron-Donor has 
    (superclasses (Chemical-Entity))
    (description ("Atom or molecule that gives up electrons readily.
                        In the process, it is said to become oxidized.
                        Alberts:ECB:G-7")))

(every Electron-Donor has 
    (purpose ((a Donor-Role with (in-event ((a Oxidation))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Electron-Carrier has 
    (superclasses (Chemical-Entity))
    (description ("Molecule such as cytochrome C that transfers an 
                        electron from a donor molecule to an acceptor
                        molecule.  Alberts:ECB:G-7"))
    )

(every Electron-Carrier has 
    (purpose ((a Vehicle with (in-event ((a Electron-Transfer))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Electron-Acceptor has 
    (superclasses (Chemical-Entity))
    (description ("Atom or molecule that takes up electrons readily.
                        Upon gaining an electron, it is said to be reduced.
                        Alberts:ECB:G-7")))

(every Electron-Acceptor has 
    (purpose ((a Recipient-Role with (in-event ((a Reduction))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Electron has 
    (superclasses (Subatomic-Particle))
    (description ("Fundamental subatomic particle with a unit negative
                        charge. Alberts:ECB:G-7.")))
(Electrolyte-Status-Value has 
    (superclasses (Property-Value))
    (range-of (electrolyte-status))
    (domain-of (electrolyte-status-of)))

(every Electrolyte-Status-Value has 
    (property-slot ((electrolyte-status))))
(Electrolyte-Status-Constant has 
    (superclasses (Constant))
                                                              
    (scalar-constant-class-of (electrolyte-status)))
(Electrolyte-Solution-Composition has 
    (superclasses (Method)))

(every Electrolyte-Solution-Composition has 
    (context ((a Strong-Electrolyte-Solution)))
    (input ((the quantity of (the Strong-Electrolyte base of (the context of Self)))))
    (output ((the Ion has-part of (the base of (the context of Self))))))
(Electrolyte-Entity has 
    (superclasses (Ionic-Compound))
    )
(Electrolyte has 
    (superclasses (Ionic-Compound-Substance))
    )
(Electric-Resistance-Value has 
    (superclasses (Property-Value))
    (range-of (electric-resistance))
    (domain-of (electric-resistance-of)))

(every Electric-Resistance-Value has 
    (property-slot ((electric-resistance)))
    (electric-resistance-of ((must-be-a Entity)))
    (less-than ((must-be-a Electric-Resistance-Value)))
    (greater-than ((must-be-a Electric-Resistance-Value)))
    (same-as ((must-be-a Electric-Resistance-Value))))
(Electric-Resistance-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (electric-resistance)))
(Electric-Current-Value has 
    (superclasses (Property-Value))
    (range-of (electric-current))
    (domain-of (electric-current-of)))

(every Electric-Current-Value has 
    (property-slot ((electric-current)))
    (electric-current-of ((must-be-a Entity)))
    (less-than ((must-be-a Electric-Current-Value)))
    (greater-than ((must-be-a Electric-Current-Value)))
    (same-as ((must-be-a Electric-Current-Value))))
(Electric-Current-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (electric-current)))
(Electric-Charge has 
    (superclasses (Substance))
    (description ("The positive or negative electrical property of atoms, 
                       molecules, materials, etc, which causes them to be 
                       attracted to others having an opposite value.
                       Souther. ")))

(every Electric-Charge has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Educational-Institution has 
    (superclasses (Institution))
    (description ("an institution for teaching, studying, research, etc."))
    (wn20-synset ((:set (:triple "educational_institution" 1 "n") (:triple "school" 1 "n"))))
    )
(Edit has 
    (superclasses (Action))
    (required-slot (object))
    (description ("To change the content of a document"))
    (wn20-synset ((:set (:triple "edit" 1 "v") (:triple "redact" 2 "v") (:triple "revise" 1 "v") (:triple "rewrite" 1 "v")))))

(every Edit has 
    (object ((a Document)))
    (text-nominalization ("editing")))
(Eat has 
    (superclasses (Take-In))
    (required-slot (agent
                       object))
    (wn20-synset ((:set (:triple "eat" 1 "v") (:triple "eat" 2 "v") (:triple "feed" 6 "v") (:triple "eat" 3 "v")))))

(every Eat has 
    (agent ((a Animal)))
    (object ((a Tangible-Entity with (plays ((a Food))))))
    (text-active-verbseq-sg ("eats"))
    (text-active-verbseq-pl ("eat"))
    (text-nominalization ("eating")))
(E-Site has 
    (superclasses (Binding-Site))
    (description ("The site on the ribosome where the tRNA that has just
                        given up the growing polypeptide chain dissociates
                        from the ribosome.  Alberts:ECB:230.")))
(Duration-Value has 
    (range-of (age
                  duration))
    (domain-of (age-of
                   duration-of))
    (superclasses (Property-Value))
    (doc-file ("duration"))
    (test-case ('((BasketballGame has (superclasses (Event))) (CakeBake has (superclasses (Event))) (*baking-my-cake has (instance-of (CakeBake)) (duration ((a Duration-Value)))) (*lakers-vs-6ers has (instance-of (BasketballGame)) (duration ((a Duration-Value with (value ((:pair 3 *hour) (:pair *brief Event))) (same-as ((the duration of *baking-my-cake))))))) (the value of (the duration of *lakers-vs-6ers)) ((the same-as of (the duration of *lakers-vs-6ers)) includes (the duration of *baking-my-cake)) (Drink has (superclasses (Substance))) (*Coca-cola has (instance-of (Drink)) (age ((a Duration-Value)))) (*LaRoche30year has (instance-of (Drink)) (age ((a Duration-Value with (value ((:pair 30 *year) (:pair *old Drink))) (greater-than ((the age of *Coca-cola))))))) (the value of (the age of *LaRoche30year)) ((the greater-than of (the age of *LaRoche30year)) includes (the age of *Coca-cola)) ((the less-than of (the age of *Coca-cola)) includes (the age of *LaRoche30year))))))

(every Duration-Value has 
    (primary-slot ((duration))))
(Duration-Scale has 
    (scale-class-of (duration))
                                    
    (superclasses (Scale)))
(Duration-Constant has 
    (scalar-constant-class-of (duration))
    (element-type-of (*forever-brief-scale))
    (superclasses (Constant))
    )
(Duplicate has 
    (superclasses (Copy))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of
                      result))
    (cmap-correspondence ((:seq result "the Duplicate")
                          (:seq object "the original")
                          (:seq agent "copier")
                          (:seq instrument "the instrument")
                          (:seq by-means-of "the event needed for the Duplicate")))
    (test-case ('((new-situation) (Sheep has (superclasses (Tangible-Entity))) (*Dolly has (instance-of (Sheep)) (color (*white)) (sex (*female)) (height (*4)) (length (*5)) (mass (*200)) (age (*5))) (a Duplicate with (object (*Dolly))) (do-and-next (thelast Duplicate)) (the text-gen of (thelast Duplicate)) ((the classes of (the result of (thelast Duplicate))) = Sheep) ((the color of (the result of (thelast Duplicate))) = *white) ((the sex of (the result of (thelast Duplicate))) = *female) ((the height of (the result of (thelast Duplicate))) = *4) ((the length of (the result of (thelast Duplicate))) = *5) ((the mass of (the result of (thelast Duplicate))) = *200) ((the age of (the result of (thelast Duplicate))) = *5))))
    (wn16-synset ((:set (:triple "duplicate" 1 "v") (:triple "double" 5 "v") (:triple "repeat" 2 "v") (:triple "replicate" 1 "v"))))
    (wn20-synset ((:set (:triple "duplicate" 1 "v") (:triple "double" 6 "v") (:triple "repeat" 2 "v") (:triple "replicate" 3 "v")))))

(every Duplicate has 
    (object ((a Tangible-Entity)))
    (add-list ((:triple Self result (a Tangible-Entity with (instance-of ((the instance-of of (the object of Self)))) (content ((forall (the content of (the object of Self)) ((an instance of (the instance-of of It)))))) (has-part ((forall (the has-part of (the object of Self)) ((an instance of (the instance-of of It)))))) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (age ((the age of (the object of Self)))) (animacy ((the animacy of (the object of Self)))) (area ((the area of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (capacity ((the capacity of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (depth ((the depth of (the object of Self)))) (height ((the height of (the object of Self)))) (length ((the length of (the object of Self)))) (mass ((the mass of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (shape ((the shape of (the object of Self)))) (size ((the size of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (thickness ((the thickness of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self)))) (width ((the width of (the object of Self)))) (volume ((the volume of (the object of Self))))) [Duplicate-add-1])))
    (instrument ((must-be-a Tangible-Entity)))
    (by-means-of ((must-be-a Event)))
    (text-active-verbseq ("duplicates"))
    (text-passive-verbseq ((if ((the number of (the object of Self)) > 1) then ("get duplicated") else ("gets duplicated"))))
    (text-nominalization ("duplication")))
(Dry has 
    (superclasses (Decrease))
    (test-case ('((*mytowel has (instance-of (Physical-Object)) (wetness (*mytowelwetness))) (*mytowelwetness has (instance-of (Wetness-Value)) (value ((:pair *damp Physical-Object)))) (a Decrease with (object (*mytowel)) (property-slot (wetness))) ((thelast Decrease) isa Dry) (do-and-next (thelast Dry)) ((the less-than of (the wetness of *mytowel)) includes *mytowelwetness))))
    (wn20-synset ((:set (:triple "dry" 1 "v") (:triple "dry_out" 3 "v") (:triple "dry" 2 "v") (:triple "dry_out" 1 "v")))))

(every Dry has 
    (text-nominalization ("drying")))

(every Dry has-definition 
    (instance-of (Decrease))
    (property-slot ((wetness))))
(Drawer has 
    (superclasses (Furniture))
    (wn20-synset ((:set (:triple "drawer" 1 "n")))))
(Double-Covalent-CO-Bond has 
    (superclasses (Double-Covalent-Bond))
    (description ("Double covalent bond between carbon and oxygen. 
                        Souther. ")))

(every Double-Covalent-CO-Bond has 
    (purpose ((a Instrument-Role with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Oxygen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 170 *kilocalorie/mole)))))))
(Double-Covalent-CN-Bond has 
    (superclasses (Double-Covalent-Bond))
    (description ("Double covalent bond between carbon and nitrogen.
                        Souther. ")))

(every Double-Covalent-CN-Bond has 
    (purpose ((a Instrument-Role with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Nitrogen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 147 *kilocalorie/mole)))))))
(Double-Covalent-CC-Bond has 
    (superclasses (Double-Covalent-Bond))
    (description ("Double covalent bond between two carbons. Souther. ")))

(every Double-Covalent-CC-Bond has 
    (purpose ((a Instrument-Role with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Carbon-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 146 *kilocalorie/mole)))))))
(Double-Covalent-Bond has 
                                                                                                                                                            
    (superclasses (Covalent-Bond))
    (description ("A chemical bond formed when two atoms share two pairs
                        of electrons. Alberts:ECB:45")))
(Donor-Role has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "donor" 1 "n") (:triple "donor" 2 "n") (:triple "giver" 2 "n") (:triple "presenter" 1 "n"))))
    (wn20-synset ((:set (:triple "donor" 1 "n") (:triple "donor" 2 "n") (:triple "giver" 2 "n") (:triple "presenter" 3 "n")))))

(every Donor-Role has 
    (in-event ((must-be-a Transfer)))
    (played-by ((a Entity with (donor-of ((the in-event of Self)))))))
(Donate has 
    (superclasses (Give))
    (required-slot (beneficiary
                       recipient
                       agent
                       donor
                       object))
    (primary-slot (instrument))
    (cmap-correspondence ((:seq beneficiary "beneficiary")
                          (:seq object "the thing donated")
                          (:seq agent "donor")
                          (:seq donor "donor")
                          (:seq recipient "recipient")
                          (:seq instrument "instrument")))
    (test-case ('((*TV has (instance-of (Tangible-Entity))) (*Mary has (instance-of (Tangible-Entity)) (possesses (*TV))) (*Salvation-Army has (instance-of (Tangible-Entity))) (*Donate has (instance-of (Donate)) (donor (*Mary)) (recipient (*Salvation-Army)) (beneficiary (*Salvation-Army)) (object (*TV))) (do-and-next *Donate) (the text-gen of (thelast Donate)) ((the possesses of *Mary) /= *TV) ((the possesses of *Salvation-Army) = *TV) ((the possesses of (the beneficiary of *Donate)) = *TV))))
    (wn16-synset ((:set (:triple "donate" 1 "v"))))
    (wn20-synset ((:set (:triple "donate" 1 "v")))))

(every Donate has 
    (beneficiary ((a Tangible-Entity)))
    (text-active-verbseq ("donates"))
    (text-passive-verbseq ((if ((the number of (the object of Self)) > 1) then ("are donated") else ("is donated"))))
    (text-nominalization ("donation")))
(Document has 
    (superclasses (Message))
    (description ("a written message"))
    (wn20-synset ((:set (:triple "document" 1 "n") (:triple "written_document" 1 "n") (:triple "papers" 1 "n") (:triple "document" 2 "n") (:triple "document" 3 "n")))))

(every Document has 
    (result-of ((a Write))))
(DNA-Virus has 
    (superclasses (Virus))
    (description ("A virus which contains DNA (cf RNA viruses) whose 
                         particles contain RNA.  Souther. ")))

(every DNA-Virus has 
    (has-part ((a Protein-Coat)
               (a Viral-DNA))))
(DNA-Transcription has 
    (superclasses (Copy
                      Produce
                      Enzyme-Catalysis))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("Copying of one strand of DNA into a complementary RNA
                       sequence by the enzyme RNA Polymerase.
                       Alberts:ECB:1998."))
    )

(every DNA-Transcription has 
    (agent ((a Cell)))
    (object ((a Transcription-Unit)))
    (raw-material ((a Aggregate with (element-type ((Ribonucleotide))))))
    (result ((a RNA-Transcript)))
    (instrument ((a RNA-Polymerase)))
    (text-argslots ((:seq raw-material instrument result)))
    (text-active-verbseq-sg ("transcribes"))
    (text-active-verbseq-pl ("transcribe"))
    (text-passive-verbseq-sg ("gets transcribed"))
    (text-passive-verbseq-pl ("get transcribed"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-Synthesis has 
    (superclasses (Copy
                      Produce
                      Enzyme-Catalysis))
    (required-slot (object
                       result))
    (primary-slot (raw-material
                      instrument
                      destination))
    (description ("A synthesis of a DNA chain during
                              DNA-Replication or DNA-Repair. Souther."))
    )

(every DNA-Synthesis has 
    (agent ((a Suborganismal-Entity)))
    (object ((a DNA-Sequence)))
    (raw-material ((a Aggregate with (element-type ((Deoxyribonucleotide))))))
    (instrument ((a DNA-Polymerase)))
    (result ((a DNA-Sequence called "newly synthesized sequence" with (complement ((the DNA-Sequence object of Self))))))
    (first-subevent ((the DNA-Chain-Elongation subevent of Self)))
    (subevent ((a DNA-Chain-Elongation)))
    (text-argslots ((:seq raw-material instrument result)))
    (text-active-verbseq-sg ("synthesizes"))
    (text-active-verbseq-pl ("synthesize"))
    (text-passive-verbseq-sg ("gets synthesized"))
    (text-passive-verbseq-pl ("get synthesized"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-Substance has 
    (superclasses (Organic-Substance))
    (description ("DNA as the substance which makes up the hereditary
                          material of the cell. Souther.")))
(DNA-Strand-Replication has 
    (superclasses (DNA-Replication))
    (required-slot (object
                       result))
    (primary-slot (origin
                      instrument
                      destination))
    (description ("The replication of a daughter strand using the
		   strand that runs 3' to 5' as the template, so the
		   daughter strand can be synthesized continuously.
		   Compare with DNA-Lagging-Strand-Replication.
		   Souther."))
    )

(every DNA-Strand-Replication has 
    (object ((a Polydeoxyribonucleotide called "template strand")))
    (result ((a DNA-Molecule-Segment with (has-part (((the Polydeoxyribonucleotide object of Self) called "template strand") (a Polydeoxyribonucleotide called "daughter strand" with (complement (((the Polydeoxyribonucleotide object of Self) called "template strand")))))))))
    (first-subevent ((the DNA-Priming subevent of Self)))
    (subevent ((a DNA-Priming with (next-event ((the DNA-Replication subevent of Self))))
               (a DNA-Replication with (object ((a Polydeoxyribonucleotide called "postprimer part of daughter strand" with (is-part-of ((the Polydeoxyribonucleotide object of Self))) (object-of ((a Be-Attached-To with (object ((the RNA-Primer has-part of (the Nucleic-Acid-Complex result of (the DNA-Priming subevent of Self))))) (instrument ((a Phosphodiester-Bond))) (site ((the 3-Prime-End has-region of (the RNA-Primer has-part of (the Nucleic-Acid-Complex result of (the DNA-Priming subevent of Self)))) (the 5-Prime-End has-region of (the Polydeoxyribonucleotide object of (the DNA-Replication subevent of Self))))))))))) (next-event (((the Replace subevent of Self) called "replace primer"))))
               (a Replace called "replace primer" with (object ((the RNA-Primer has-part of (the Nucleic-Acid-Complex result of (the DNA-Priming subevent of Self))) (a Oligodeoxyribonucleotide with (complement ((the 3-Prime-End object of (the DNA-Priming subevent of Self))))))) (base ((the Polydeoxyribonucleotide object of (the DNA-Replication subevent of Self)))) (instrument ((a DNA-Polymerase-Repair-Enzyme))) (subevent ((a Detach called "remove primer" with (object ((the RNA-Primer has-part of (the Nucleic-Acid-Complex result of (the DNA-Priming subevent of Self))))) (base ((the Polydeoxyribonucleotide object of (the DNA-Replication subevent of Self)))) (instrument ((the instrument of (the Replace subevent of Self))))) (a Attach called "add DNA string in place of primer" with (object ((a Oligodeoxyribonucleotide with (complement ((the 3-Prime-End has-part of (the DNA-Priming subevent of Self))))))) (base ((the Polydeoxyribonucleotide object of (the DNA-Replication subevent of Self)))) (instrument ((the instrument of (the Replace subevent of Self)))))))))))
(DNA-Strand-Fragment has 
    (superclasses (Polydeoxyribonucleotide
                      Free-Nucleotide-Sequence))
    (description ("A part of a DNA strand with free ends. Souther."))
    )
(DNA-Strand has 
    (superclasses (Polydeoxyribonucleotide
                      Free-Nucleotide-Sequence))
    (description ("One of two complementary anti-parallel chains that make
                        up the DNA double helical molecule.  Souther."))
    )

(every DNA-Strand has 
    (purpose ((a Template with (in-event ((a DNA-Replication))))))
    (length ((at-least 3200 Nucleotide)))
    (has-functional-part ((a DNA-Gene-Coding-Sequence)
                          (a DNA-Noncoding-Sequence)))
    (has-structural-part ((a Deoxyribose-Monophosphate called "sugar-phosphate backbone" with (object-of ((a Be-Attached-To with (object ((the Nitrogenous-Base has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-1") (the Nitrogen-Atom has-part of (the Nitrogenous-Base has-part of Self))))))))
                          (a Nitrogenous-Base)))
    (has-region ((a 5-Prime-End)
                 (a 3-Prime-End))))
(DNA-Sequence has 
                                                                                                                                                                                                                                  
    (superclasses (Nucleotide-Sequence))
    (description ("A nucleotide sequence of deoxyribonucleotides.
                         Souther. ")))

(every DNA-Sequence has 
    (element-type ((Deoxyribonucleotide)
                   (at-least 1 Deoxyribonucleotide))))
(DNA-Replication has 
                                                                                    
    (superclasses (Copy))
    (required-slot (object
                       result))
    (primary-slot (instrument))
    (description ("A process by which a copy of all or part of a DNA molecule or
                 DNA strand is made.  Includes the replication of the replicon
                 subunits of DNA and repair of damaged strands. Souther.")))

(every DNA-Replication has 
    (object ((a Macromolecule with (instance-of ((possible-values Polydeoxyribonucleotide DNA-Double-Strand))))))
    (result ((a DNA-Double-Strand with (has-part (((the Polydeoxyribonucleotide has-part of (the DNA-Double-Strand object of Self)) called "template strand") (a Polydeoxyribonucleotide called "daughter strand" with (complement (((the Polydeoxyribonucleotide has-part of (the DNA-Double-Strand object of Self)) called "template strand")))))))
             (at-least 1 DNA-Double-Strand)
             (at-most 2 DNA-Double-Strand)))
    (instrument ((a DNA-Polymerase-Replication-Enzyme)
                 (at-least 1 DNA-Polymerase-Replication-Enzyme)
                 (at-most 4 DNA-Polymerase-Replication-Enzyme)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-Repair has 
                                                                      
    (superclasses (Replace))
    (required-slot (object
                       base))
    (primary-slot ((instrument agent)))
    (description ("Collective term for the enzymatic processes
                           that correct deleterious changes affecting 
                           the continuity or sequence of a DNA 
                           molecule. Alberts:ECB:G-6.")))

(every DNA-Repair has 
    (agent ((a Cell)))
    (object ((a DNA-Sequence called "the defective DNA sequence" with (object-of ((a Be-Attached-To with (object ((a DNA-Sequence called "template" with (is-part-of ((a DNA-Strand called "normal strand" with (complement ((the DNA-Strand base of Self))))))))) (instrument ((a Hydrogen-Bond) (at-least 2 Hydrogen-Bond)))))))
             (a DNA-Sequence called "the new complementary sequence" with (complement (((the DNA-Sequence object of (the Be-Attached-To object-of of ((the DNA-Sequence object of Self) called "the defective DNA sequence"))) called "template"))))))
    (instrument ((a Aggregate called "repair enzymes" with (instance-of (Enzyme)) (element-type ((Enzyme))))))
    (base ((a DNA-Strand called "repaired strand")))
    (first-subevent (((the Detach subevent of Self) called "excision")))
    (subevent ((a Detach called "excision" with (object (((the DNA-Sequence object of Self) called "the defective DNA sequence"))) (base ((the DNA-Strand base of Self))) (instrument ((a Deoxyribonuclease))) (next-event (((the DNA-Synthesis subevent of Self) called "DNA resynthesis"))))
               (a DNA-Synthesis called "DNA resynthesis" with (object (((the DNA-Sequence object of (the Be-Attached-To object-of of ((the DNA-Sequence object of Self) called "the defective DNA sequence"))) called "template"))) (result (((the DNA-Sequence object of Self) called "the new complementary sequence"))) (instrument ((a DNA-Polymerase-Repair-Enzyme))) (next-event ((the DNA-Ligation subevent of Self))))
               (a DNA-Ligation with (object (((the DNA-Sequence object of Self) called "the new complementary sequence"))) (base ((the DNA-Strand base of Self))) (instrument ((a DNA-Ligase))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-Regulatory-Site has 
    (superclasses (Regulatory-Site))
    (description ("A regulatory site on the DNA molecule such as the
                        replication origin or the promoter.  Souther.")))
(DNA-Regulatory-Sequence has 
    (superclasses (Regulatory-Sequence))
    (description ("A sequence of DNA deoxyribonucleotides
                                        on a DNA strand that regulates the 
                                        replication or transcription of DNA.
                                        Souther."))
    )
(DNA-Regulatory-Region has 
    (superclasses (Regulatory-Region))
    (description ("A has-region of the DNA that contains regulatory sequences.
                        Souther."))
    )

(every DNA-Regulatory-Region has 
    (encloses ((a DNA-Regulatory-Sequence))))
(DNA-Regulatory-Protein has 
                                                                                                                                                                       
    (superclasses (Regulatory-Protein))
    (description ("A protein that regulates DNA replication or gene
                        expression.  Souther.")))
(DNA-Region has 
                                                                     
    (superclasses (Nucleic-Acid-Region))
    (description ("A has-region of the DNA, such as the 5' end or the
                        replication origin. Souther")))
(DNA-Priming has 
    (superclasses (Copy))
    (required-slot (object
                       result))
    (primary-slot (instrument))
    (description ("A process by which a short oligoribonucleotide is made at
                 the beginning of DNA replication using the enzyme primase.
                 This RNA primer is later replaced with deoxyribonucleotides.
                 Souther.")))

(every DNA-Priming has 
    (subevent-of ((a DNA-Strand-Replication)))
    (object ((a 3-Prime-End called "primer template" with (length ((at-most 15 Nucleotide))) (is-part-of ((a Polydeoxyribonucleotide called "template strand"))))))
    (result ((a Nucleic-Acid-Complex called "DNA-RNA primer hybrid" with (has-part (((the 3-Prime-End object of Self) called "primer template") (a RNA-Primer with (complement (((the 3-Prime-End object of Self) called "primer template")))))))))
    (instrument ((a Primase)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-Polymerase-Replication-Enzyme has 
    (superclasses (DNA-Polymerase))
    (description ("Enzyme that catalyzes the synthesis of a DNA
                               molecule on a DNA template from nucleoside
                               triphosphate precursors. Alberts: ECB:G-16.")))

(every DNA-Polymerase-Replication-Enzyme has 
    (purpose ((a Catalyst with (in-event ((a DNA-Replication)))))))
(DNA-Polymerase-Repair-Enzyme has 
    (superclasses (DNA-Polymerase))
    (description ("Enzyme that catalyzes the repair of a DNA
                               molecule either because of damage or because
                               of wrong base incorporation.  Also used to
                               replace the RNA primer during DNA replication.
                               Souther.  see Alberts:ECB:196.")))

(every DNA-Polymerase-Repair-Enzyme has 
    (purpose ((a Catalyst with (in-event ((a DNA-Repair)))))))
(DNA-Polymerase has 
                                                                                                                                                                                 
    (superclasses (Polymerase))
    (description ("Enzyme that catalyzes the synthesis or repair 
                               of a DNA molecule from nucleoside triphosphate
                               precursors using a DNA template.  Souther. see 
                               Alberts: ECB:G-16.")))

(every DNA-Polymerase has 
    (purpose ((a Catalyst with (in-event ((a DNA-Synthesis)))))))
(DNA-Noncoding-Sequence has 
                                                                                                                                                          
    (superclasses (DNA-Sequence))
    (description ("A has-region of the DNA which does not code for any known
                         product, either protein or RNA. Souther. ")))
(DNA-Noncoding-Region has 
    (superclasses (DNA-Region))
    (description ("A has-region which does not code for RNA or proteins.
                        Examples include the spacer DNA-Region in 
                        eucaryotes.  Souther. ")))

(every DNA-Noncoding-Region has 
    (encloses ((mustnt-be-a DNA-Coding-Sequence))))
(DNA-Molecule-Segment has 
    (superclasses (DNA-Double-Strand))
    (description ("A segment of a DNA molecule.  Souther."))
    )

(every DNA-Molecule-Segment has 
    (material ((a DNA-Substance)))
    (element-type ((Base-Pair)))
    (has-structural-part ((a DNA-Sequence called "DNA-Strand-1-segment" with (complement (((the DNA-Sequence has-part of Self) called "DNA-Strand-2-segment"))) (object-of ((a Be-Attached-To with (object (((the has-part of Self) called "DNA-Strand-2-segment"))) (instrument ((a Chemical-Sequence with (element-type ((Hydrogen-Bond))))))))))
                          (a DNA-Sequence called "DNA-Strand-2-segment"))))
(DNA-Molecule-Replication has 
    (superclasses (DNA-Double-Strand-Replication))
    (required-slot (object
                       result))
    (primary-slot (instrument))
    (description ("A process by which a copy of a DNA molecule is made.
                 	  Alberts:ECB:G-6.")))

(every DNA-Molecule-Replication has 
    (object ((a DNA-Molecule)))
    (result ((a DNA-Molecule called "DNA-Molecule-1" with (has-part (((the DNA-Strand has-part of (the DNA-Molecule object of Self)) called "DNA-Strand-1") (a DNA-Strand called "Daughter-Strand-Complementary-To-Strand-1" with (complement (((the DNA-Strand has-part of (the DNA-Molecule object of Self)) called "DNA-Strand-1")))))))
             (a DNA-Molecule called "DNA-Molecule-2" with (has-part (((the DNA-Strand has-part of (the DNA-Molecule object of Self)) called "DNA-Strand-2") (a DNA-Strand called "Daughter-Strand-Complementary-To-Strand-2" with (complement (((the DNA-Strand has-part of (the DNA-Molecule object of Self)) called "DNA-Strand-2")))))))
             (exactly 2 DNA-Molecule)))
    (first-subevent ((the Replicon-Replication subevent of Self)))
    (subevent ((a Replicon-Replication)
               (at-least 1 Replicon-Replication))))
(DNA-Molecule has 
    (superclasses (DNA-Double-Strand))
    (description ("Double-stranded polynucleotide formed from two separate
                       chains of deoxyribonucleotide units; serves as the 
                       carrier of genetic information. Alberts:ECB:G-6"))
    )

(every DNA-Molecule has 
    (element-type ((Base-Pair)))
    (purpose ((a Container with (in-event ((a Genetic-Information-Storage with (object ((a Genome)))))))))
    (has-region ((a Replication-Origin)
                 (at-least 1 Replication-Origin)))
    (has-part ((a DNA-Strand called "DNA-Strand-1" with (complement (((the DNA-Strand has-part of Self) called "DNA-Strand-2"))) (object-of ((a Be-Attached-To with (object (((the has-part of Self) called "DNA-Strand-2"))) (instrument ((a Chemical-Sequence with (element-type ((Hydrogen-Bond))))))))))
               (a DNA-Strand called "DNA-Strand-2"))))
(DNA-Mismatch-Repair-Protein has 
    (superclasses (Nuclease))
    (description ("Enzyme that helps repair mismatches in DNA base pairs
                        by removing a sequence which includes the mismatched
                        pairs.   Souther.  see Alberts:ECB:200-201.")))

(every DNA-Mismatch-Repair-Protein has 
    (purpose ((a Catalyst with (in-event ((a DNA-Mismatch-Repair)))))))
(DNA-Mismatch-Repair has 
    (superclasses (DNA-Repair))
    (required-slot (object
                       base))
    (primary-slot ((instrument agent)))
    (description ("A DNA repair system that identifies base pair
                           mismatches, excises a has-region of the DNA strand
                           containing the mismatch(es), and resynthesizes the
                           missing nucleotide pairs.  Paraphrased from
                           Alberts:ECB:200.")))

(every DNA-Mismatch-Repair has 
    (agent ((a Living-Entity)))
    (object ((a DNA-Sequence called "mismatched DNA" with (object-of ((a Be-Attached-To with (object ((a DNA-Sequence called "template" with (is-part-of ((a DNA-Strand called "normal strand" with (complement (((the DNA-Strand base of Self) called "repaired strand"))))))))) (instrument ((a Hydrogen-Bond) (at-least 2 Hydrogen-Bond)))))))
             (a DNA-Sequence called "the new complementary sequence" with (complement (((the DNA-Sequence object of (the Be-Attached-To object-of of ((the DNA-Sequence object of Self) called "mismatched DNA"))) called "template"))))))
    (instrument ((a Aggregate called "repair enzymes" with (instance-of (Enzyme)) (element-type ((Enzyme))))))
    (base ((a DNA-Strand called "repaired strand")))
    (first-subevent (((the Detach subevent of Self) called "excision")))
    (subevent ((a Detach called "excision" with (object (((the DNA-Sequence object of Self) called "mismatched DNA"))) (base ((the DNA-Strand base of Self))) (instrument ((a Deoxyribonuclease))) (next-event (((the DNA-Synthesis subevent of Self) called "DNA resynthesis"))))
               (a DNA-Synthesis called "DNA resynthesis" with (object (((the DNA-Sequence object of (the Be-Attached-To object-of of ((the DNA-Sequence object of Self) called "mismatched DNA"))) called "template"))) (result (((the DNA-Sequence object of Self) called "the new complementary sequence"))) (instrument ((a DNA-Polymerase-Repair-Enzyme))) (next-event ((the DNA-Ligation subevent of Self))))
               (a DNA-Ligation with (object (((the DNA-Sequence object of Self) called "the new complementary sequence"))) (base ((the DNA-Strand base of Self))) (instrument ((a DNA-Ligase)))))))
(DNA-Melting has 
    (superclasses (Divide))
    (required-slot (object))
    (primary-slot (agent
                      result
                      instrument))
    (description ("The separation of the two strands of a DNA molecule.  Can be
                 caused by sufficiently high temperatures or by an enzyme.
                 Souther."))
    )

(every DNA-Melting has 
    (object ((a DNA-Double-Strand with (has-part ((a DNA-Molecule-Segment called "segment containing AT-rich sequences" with (has-part ((a Aggregate called "AT Base Pairs" with (element-type ((A-T-Base-Pair))) (number-of-elements ((constraint TheValue > (the number-of-elements of (the Aggregate has-part of (the DNA-Molecule-Segment object-of (the DNA-Melting subevent of Self)) called "G-C Base Pairs")))))) (a Aggregate called "G-C Base Pairs" with (element-type ((G-C-Base-Pair))))))))))))
    (result ((a DNA-Sequence called "DNA-Sequence-1" with (complement (((the DNA-Sequence result of Self) called "DNA-Sequence-2"))))
             (a DNA-Sequence called "DNA-Sequence-2" with (complement (((the DNA-Sequence result of Self) called "DNA-Sequence-1"))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-Ligation has 
    (superclasses (Ligation))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (description ("The joining of the 3' end of one DNA strand with the
                 5' end of another, forming a continuous strand. see
                 Lodish:MCB:G-10. definition for ligase.")))

(every DNA-Ligation has 
    (object ((a DNA-Sequence called "5' DNA sequence")))
    (base ((a DNA-Sequence called "3' DNA sequence")))
    (instrument ((a Ligase)))
    (resulting-state ((a Be-Attached-To with (object (((the object of Self) called "5' DNA sequence") ((the base of Self) called "3' DNA sequence"))) (site ((the 3-Prime-Deoxyribonucleotide has-part of ((the object of Self) called "5' DNA sequence")) (the 5-Prime-Deoxyribonucleotide has-part of ((the base of Self) called "3' DNA sequence"))))))))
(DNA-Ligase has 
    (superclasses (Ligase))
    (description ("An enzyme that appends nucleotides onto the growing
                        DNA chain during chain elongation or joins two 
                        nucleotide sequences together during repair of strand
                        breaks.  Souther.  see Alberts:ECB:G-10.")))

(every DNA-Ligase has 
    (purpose ((a Catalyst with (in-event ((a DNA-Ligation)))))))
(DNA-Helicase has 
    (superclasses (DNA-Regulatory-Protein
                      Enzyme))
    (description ("An enzyme that catalyzes the separation of strands in
                        a DNA molecule before replication. Lehninger:PBC:G-6")))

(every DNA-Helicase has 
    (purpose ((a Catalyst with (in-event ((a DNA-Replication)))))))
(DNA-Gyrase has 
    (superclasses (Enzyme))
    (description ("A protein which binds to DNA and relieves torsional
                        strain generated by DNA unwinding during replication.
                        see Lehninger:PBC:943.
                        An ATP-requiring enzyme which, in the presence of 
                        magnesium ions, introduces negative supertwists into
                        closed and possibly linear duplex DNA. The enzyme is 
                        implicated in DNA replication and transcription. It
                        causes the storage of mechanical strain energy in the
                        superhelical turns of DNA at the expense of ATP
                        hydrolysis. MeSH-2001")))

(every DNA-Gyrase has 
    (purpose ((a Catalyst with (in-event ((a DNA-Replication)))))))
(DNA-Gene-Coding-Sequence has 
    (superclasses (DNA-Coding-Sequence))
    (description ("Physical and functional unit of heredity, which carries
                        information from one generation to the next.  In
                        molecular terms, it is the entire DNA sequence -
                        including exons, introns, and noncoding transcription
                        control regions - necessary for production of a
                        functional protein or RNA. (Lodish:MCB:G-7).
                        Note: this is the definition for gene, but applies to
                        operons as well."))
    )

(every DNA-Gene-Coding-Sequence has 
    (purpose ((a Container with (in-event ((a Genetic-Information-Storage)))))))
(DNA-Double-Strand-Replication has 
    (superclasses (DNA-Replication))
    (required-slot (object
                       result))
    (primary-slot (instrument))
    (description ("A process by which a copy of all or part of a DNA molecule is
                 	  made.  Includes the replication of the replicon subunits of
                 	  DNA. Souther."))
    )

(every DNA-Double-Strand-Replication has 
    (object ((a DNA-Double-Strand)))
    (instrument ((a Replication-Machine)))
    (result ((a DNA-Double-Strand called "DNA Double Strand 1" with (has-part (((the Polydeoxyribonucleotide has-part of (the DNA-Double-Strand object of Self)) called "Poly-DNA-1") (a Polydeoxyribonucleotide called "Daughter-Poly-DNA-Complement-Of-Poly-DNA-1" with (complement (((the Polydeoxyribonucleotide has-part of (the DNA-Double-Strand object of Self)) called "Poly-DNA-1")))))))
             (a DNA-Double-Strand called "DNA-Double-Strand-2" with (has-part (((the Polydeoxyribonucleotide has-part of (the DNA-Double-Strand object of Self)) called "Poly-DNA-2") (a Polydeoxyribonucleotide called "Daughter-Poly-DNA-Complement-Of-Poly-DNA-2" with (complement (((the Polydeoxyribonucleotide has-part of (the DNA-Double-Strand object of Self)) called "Poly-DNA-2")))))))
             (exactly 2 DNA-Double-Strand))))
(DNA-Double-Strand has 
    (superclasses (Nucleic-Acid-Complex))
    (description ("Two strands of DNA held together by hydrogen bonds.
                        Examples: DNA double helix and replicon. Souther."))
    )

(every DNA-Double-Strand has 
    (has-part ((a DNA-Sequence)
               (at-least 2 DNA-Sequence))))
(DNA-Codon has 
    (superclasses (Codon))
    (description ("Sequence of three nucleotides in a DNA molecule that
                          represents the instruction for incorporation of a
                          specific amino acid into a polypeptide chain.
                          cf Alberts:ECB:G-5 (codon).")))

(every DNA-Codon has 
    (element-type ((Deoxyribonucleotide)))
    (purpose ((a Container with (in-event ((a Genetic-Information-Storage with (object ((Genetic-Code))))))))))
(DNA-Coding-Sequence has 
    (superclasses (DNA-Sequence
                      Coding-Sequence))
    (description ("A has-region of the DNA which codes for all or part of a
                         protein or RNA. It may include noncoding regions,
                         as for example in eucaryotic genes which include
                         regulatory sequences.  Souther. "))
    )

(every DNA-Coding-Sequence has 
    (has-basic-functional-unit ((a DNA-Codon))))
(DNA-Chain-Elongation has 
    (superclasses (Attach
                      Enzyme-Catalysis))
    (required-slot (object))
    (primary-slot (instrument
                      base
                      agent))
    (description ("The process of adding deoxyribonucleotides to 
                              the end of a growing DNA sequence during 
                              DNA-Synthesis.  Souther")))

(every DNA-Chain-Elongation has 
    (object ((a Deoxyribonucleotide)))
    (substrate ((the DNA-Sequence base of Self)))
    (base ((a DNA-Sequence)))
    (instrument ((a DNA-Polymerase)))
    (first-subevent (((the Move subevent of Self) called "move of complementary nucleotide to template strand")))
    (subevent ((a Move called "move of free nucleotide to template strand" with (location ((a Replication-Fork))) (object ((a Deoxyribonucleoside-Triphosphate))) (destination ((a Deoxyribonucleotide with (is-part-of ((the DNA-Sequence object of Self))) (complement ((the Deoxyribonucleotide object of ((the Move subevent of Self) called "move of free nucleotide
                                             to template strand"))))))) (next-event (((the Attach subevent of Self) called "hydrogen bonding of free nucleotide"))))
               (a Attach called "hydrogen bonding of free nucleotide" with (object ((the Deoxyribonucleotide object of ((the Move subevent of Self) called "move of free nucleotide to template strand")))) (base ((the Deoxyribonucleotide destination of ((the Move subevent of Self) called "move of free nucleotide to template strand")))) (instrument ((a Hydrogen-Bond) (at-least 2 Hydrogen-Bond))) (next-event (((the Attach subevent of Self) called "DNA-Chain-Elongation"))))
               (a Attach called "DNA-Chain-Elongation" with (object ((the Deoxyribonucleotide object of ((the Move subevent of Self) called "move of free nucleotide to template strand")))) (base ((the DNA-Sequence result of Self))) (instrument ((a DNA-Polymerase))) (next-event (((the Move subevent of Self) called "move toward 5 prime end"))))
               (a Move called "move toward 5 prime end" with (object ((the Replication-Fork location of ((the Move subevent of Self) called "move of free nucleotide to template strand")))) (toward ((the 5-Prime-End has-region of (the DNA-Sequence object of Self)))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(DNA-5prime-UTR has 
    (superclasses (DNA-Noncoding-Sequence))
    (description ("The sequence at the beginning of the 
                               transcription unit which is not later translated
                               Souther. ")))

(every DNA-5prime-UTR has 
    (is-part-of ((a Transcription-Unit)))
    (location ((a 5-Prime-End with (is-region-of ((the Transcription-Unit is-part-of of Self)))))))
(DNA-3prime-UTR has 
    (superclasses (DNA-Noncoding-Sequence))
    (description ("The sequence at the end of the transcription 
                               unit which is not translated. Souther.")))

(every DNA-3prime-UTR has 
    (is-part-of ((a Transcription-Unit)))
    (location ((a 3-Prime-End with (is-region-of ((the Transcription-Unit is-part-of of Self)))))))
(Division has 

    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Divide has 
    (superclasses (Break))
    (required-slot (object))
    (cmap-correspondence ((:seq agent "the Divider")
                          (:seq object "the thing Divided")
                          (:seq instrument "the thing used to Divide")))
    (wn16-synset ((:set (:triple "divide" 1 "v") (:triple "carve_up" 1 "v") (:triple "dissever" 1 "v") (:triple "separate" 4 "v") (:triple "split" 1 "v") (:triple "split_up" 2 "v"))))
    (wn20-synset ((:set (:triple "divide" 1 "v") (:triple "carve_up" 1 "v") (:triple "dissever" 1 "v") (:triple "separate" 4 "v") (:triple "split" 1 "v") (:triple "split_up" 2 "v"))))
    )

(every Divide has 
    (add-list ((:triple Self result (an instance of (the instance-of of (the object of Self)) with (uniquely-called ("result1")) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (animacy ((the animacy of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self))))) [Divide-add-1])
               (:triple Self result (an instance of (the instance-of of (the object of Self)) with (uniquely-called ("result2")) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (animacy ((the animacy of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self))))) [Divide-add-2])))
    (text-active-verbseq-sg ("divides"))
    (text-active-verbseq-pl ("divide"))
    (text-passive-verbseq-sg ("gets divided"))
    (text-passive-verbseq-pl ("get divided"))
    (text-argslots ((:seq base instrument result)))
    (text-result ("into"))
    (text-nominalization ("division")))
(Dive has 
    (superclasses (Let-Fall))
    (wn20-synset ((:set (:triple "dive" 2 "v")))))

(every Dive has 
    (agent ((a Animal)))
    (object ((the agent of Self)))
    (caused-by ((a Propel with (agent ((the agent of Self))) (object ((the object of Self))) (origin ((the origin of Self))))))
    (text-active-verbseq-sg ("dives"))
    (text-active-verbseq-pl ("dive"))
    (text-argslots ((:seq origin destination)))
    (text-nominalization ("diving")))
(Distribution has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "distribution" 4 "n") (:triple "commerce" 1 "n") (:triple "mercantilism" 2 "n") (:triple "commercialism" 1 "n")))))

(every Distribution has 
    (text-nominalization ("distribution")))
(Distance-Scale has 
    (scale-class-of (distance))
                               
    (superclasses (Scale)))
(Distance-Constant has 
    (scalar-constant-class-of (distance))
    (element-type-of (*near-far-scale))
    (superclasses (Constant))
    )
(Dissolve has 
    (superclasses (Create))
    (domain-of (base)))

(every Dissolve has 
    (object ((a Chemical)))
    (base ((a Chemical)))
    (result ((a Solution with (base ((the object of Self)))))))
(Dissociation-Constant-Value has 
    (superclasses (Property-Value)))

(every Dissociation-Constant-Value has 
    (property-slot ((ki)))
    (less-than ((must-be-a Dissociation-Constant-Value)))
    (greater-than ((must-be-a Dissociation-Constant-Value)))
    (same-as ((must-be-a Dissociation-Constant-Value))))
(Disrupt has 
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task to upset an enemy")))

(every Disrupt has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (inhibits ((a Action with (agent ((the object of Self))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.5 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (text-active-verbseq-sg ("disrupts"))
    (text-active-verbseq-pl ("disrupt")))
(Disperse has 
    (superclasses (Action))
    (required-slot (object
                       origin))
    (primary-slot (subevent))
    (cmap-correspondence ((:seq object "the things dispersing")
                          (:seq origin "dispersed from")
                          (:seq subevent "subevents")))
    (test-case ('((*Tim has (instance-of (Living-Entity))) (*Ken has (instance-of (Living-Entity))) (*Mall has (instance-of (Physical-Object))) (*Tim has (is-at (*Mall))) (*Ken has (is-at (*Mall))) (a Disperse with (object (*Ken *Tim)) (origin (*Mall))) (do-script (thelast Disperse)) (the text-gen of (thelast Disperse)) ((the location of *Tim) /= *Mall) (not ((the is-at of *Tim) includes *Mall)) ((the location of *Ken) /= *Mall) (not ((the is-at of *Ken) includes *Mall)) (forall (the subevent of (thelast Disperse)) ((It isa Leave) and ((:set *Tim *Ken) includes (the object of It)))) (forall (the subevent of (thelast Disperse)) (the text-gen of It)))))
    (wn16-synset ((:set (:triple "disperse" 2 "v") (:triple "disperse" 4 "v") (:triple "break_up" 1 "v") (:triple "dispel" 2 "v") (:triple "dissipate" 1 "v") (:triple "dissipate" 2 "v") (:triple "scatter" 1 "v") (:triple "scatter" 2 "v") (:triple "spread_out" 6 "v"))))
    (wn20-synset ((:set (:triple "disperse" 2 "v") (:triple "disperse" 3 "v") (:triple "break_up" 1 "v") (:triple "dispel" 2 "v") (:triple "dissipate" 1 "v") (:triple "dissipate" 2 "v") (:triple "scatter" 1 "v") (:triple "scatter" 2 "v") (:triple "spread_out" 6 "v"))))
    )

(every Disperse has 
    (object ((at-least 2 Tangible-Entity)
             (a Tangible-Entity)
             (a Tangible-Entity)))
    (origin (((exactly 1 Spatial-Entity) & (a Spatial-Entity))))
    (first-subevent ((the subevent of Self)))
    (subevent ((forall (the object of Self) (a Leave with (object ((It))) (agent ((It))) (origin ((the origin of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (destination ((if (has-value (the destination of Self)) then (the destination of Self))))))))
    (text-active-verbseq-sg ("disperses"))
    (text-active-verbseq-pl ("disperse"))
    (text-passive-verbseq-sg ("gets dispersed"))
    (text-passive-verbseq-pl ("get dispersed"))
    (text-nominalization ("dispersion")))
(Discussion has 
    (superclasses (Interaction))
    (description ("a discourse between two or more conversants with free-flowing dialog on a particular topic or topics"))
    (wn20-synset ((:set (:triple "discussion" 1 "n") (:triple "treatment" 4 "n") (:triple "discourse" 3 "n") (:triple "discussion" 2 "n") (:triple "give-and-take" 1 "n") (:triple "word" 7 "n")))))

(every Discussion has 
    (text-nominalization ("discussion")))
(Discovery has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "discovery" 1 "n") (:triple "find" 2 "n") (:triple "uncovering" 2 "n")))))

(every Discovery has 
    (text-nominalization ("discovery")))
(Discourse has 
    (superclasses (Interaction))
    (description ("a communicative exchange"))
    (wn20-synset ((:set (:triple "discourse" 1 "n")))))

(every Discourse has 
    (text-nominalization ("discourse")))
(Direction-Scale has 
    (superclasses (Scale)))
(Direction-Constant has 
    (scalar-constant-class-of (direction))
    (superclasses (Constant)))
(Direct-Support-Artillery-Battalion has 
    (superclasses (Artillery-Battalion)))

(every Direct-Support-Artillery-Battalion has 
    (possesses ((if ((the value of (the allegiance of Self)) = *Blue) then (a SP-Howitzer-155mm) else (if ((the value of (the allegiance of Self)) = *Red) then (if (has-value (the element-of of Self)) then (if ((the element-of of Self) isa Artillery-Brigade) then (a SP-Howitzer-152mm) else (a SP-Howitzer-122mm)) else (a SP-Howitzer-122mm)))))))
(Diphosphate has 
    (superclasses (Phosphoryl-Group))
    (description ("A compound containing a two phosphate groups in a
                            chain, linked by phosphoanhydride bonds. 
                            Souther. ")))

(every Diphosphate has 
    (has-part ((a Monophosphate called "Phosphate-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) called "Phosphate-2"))) (site ((the Phosphorus-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-1")) ((the Oxygen-Atom has-part of ((the Monophosphate has-part of Self) called "Phosphate-2")) called "Oxygen-1"))) (instrument ((a Phosphoanhydride-Bond)))))))
               (a Monophosphate called "Phosphate-2"))))
(Dioxygen has 
    (superclasses (Oxygen-Molecule))
    (description ("Molecule made up of two covalently bonded oxygen atoms.
                        Souther.")))

(every Dioxygen has 
    (has-part ((a Oxygen-Atom called "Oxygen 1")
               (a Oxygen-Atom called "Oxygen 2" with (object-of ((a Be-Attached-To with (object (((the Oxygen-Atom has-part of Self) called "Oxygen 1"))))))))))
(Dinucleotide has 
    (superclasses (Nucleotide-Sequence))
    (description ("A sequence of two nucleotides.  Larger sequences
                             (3-50) are termed oligonucleotides. Souther")))

(every Dinucleotide has 
    (has-part ((a 5-Prime-Nucleotide with (instance-of (Nucleoside-Triphosphate)) (object-of ((a Be-Attached-To with (object ((the 3-Prime-Nucleotide has-part of Self))) (site (((the Carbon-Atom has-part of (the Pentose has-part of (the 5-Prime-Nucleotide has-part of Self))) called "Carbon-3") ((the Carbon-Atom has-part of (the Pentose has-part of (the 3-Prime-Nucleotide has-part of Self))) called "Carbon-5"))) (instrument ((a Phosphodiester-Bond)))))))
               (a 3-Prime-Nucleotide))))
(Dinner has 
    (superclasses (Meal))
    (wn20-synset ((:set (:triple "dinner" 1 "n"))
                  (:set (:triple "dinner" 2 "n"))
                  (:set (:triple "dinner_party" 1 "n")))))

(every Dinner has 
    (text-nominalization ("dinner")))
(Dinitrogen has 
    (superclasses (Nitrogen-Molecule))
    (description ("Molecule made up of two covalently bonded nitrogen 
                        atoms.  Souther.")))

(every Dinitrogen has 
    (has-part ((a Nitrogen-Atom called "Nitrogen 1")
               (a Nitrogen-Atom called "Nitrogen 2" with (object-of ((a Be-Attached-To with (object (((the Nitrogen-Atom has-part of Self) called "Nitrogen 1")))))))
               (exactly 2 Nitrogen-Atom))))
(Dim has 
    (superclasses (Decrease))
    (test-case ('((*mylamp has (instance-of (Physical-Object)) (brightness (*mylampsbrightness))) (*mylampsbrightness has (instance-of (Brightness-Value)) (value ((:pair *blinding Physical-Object)))) (a Decrease with (object (*mylamp)) (property-slot (brightness))) ((thelast Decrease) isa Dim) (do-and-next (thelast Dim)) ((the less-than of (the brightness of *mylamp)) includes *mylampsbrightness))))
    (wn20-synset ((:set (:triple "dim" 1 "v") (:triple "dip" 5 "v") (:triple "darken" 2 "v") (:triple "dim" 2 "v") (:triple "dim" 3 "v") (:triple "dim" 4 "v")))))

(every Dim has 
    (text-nominalization ("dimming")))

(every Dim has-definition 
    (instance-of (Decrease))
    (property-slot ((brightness))))
(Diffuse has 
    (superclasses (Disperse))
    (required-slot (object
                       origin))
    (primary-slot (agent
                      subevent))
    (description ("The spread of molecules and small particles from one location
                 to another through random, thermally-driven movements.
                 Alberts:ECB:G-6."))
    (wn16-synset ((:set (:triple "diffuse" 1 "v") (:triple "diffuse" 2 "v") (:triple "spread" 8 "v") (:triple "spread_out" 1 "v") (:triple "fan_out" 1 "v") (:triple "permeate" 1 "v") (:triple "pervade" 1 "v") (:triple "imbue" 1 "v"))))
    (wn20-synset ((:set (:triple "diffuse" 1 "v") (:triple "diffuse" 2 "v") (:triple "spread" 8 "v") (:triple "spread_out" 1 "v") (:triple "fan_out" 1 "v") (:triple "permeate" 1 "v") (:triple "pervade" 1 "v") (:triple "imbue" 1 "v")))))

(every Diffuse has 
    (origin ((a Spatial-Entity)))
    (object ((a Molecule)
             (at-least 2 Molecule)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Diameter-Scale has 
    (scale-class-of (diameter))
    (superclasses (Scale)))
(Diameter-Constant has 
    (scalar-constant-class-of (diameter))
    (superclasses (Constant)))
(Device has 
    (superclasses (Artifact))
    (description ("an artifact with an instrumental purpose"))
    (wn20-synset ((:set (:triple "device" 1 "n") (:triple "instrumentality" 3 "n") (:triple "instrumentation" 1 "n")))))

(every Device has 
    (purpose ((a Instrument-Role))))
(Development has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "development" 1 "n") (:triple "improvement" 1 "n"))))
    )

(every Development has 
    (text-nominalization ("development")))
(Detailed-Instance has 
    (description
    (superclasses (KM-Class)))
(Detachment has 
    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Detach has 
    (defeated-by-class-of (Be-Attached-To))
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "the object(s) being detached")
                          (:seq base "the object being detached from")))
    (test-case ('((*bumper has (instance-of (Physical-Object))) (*sticker has (instance-of (Physical-Object))) (a Attach with (object (*sticker)) (base (*bumper))) (not ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper)) (do-and-next (thelast Attach)) (the text-gen of (thelast Attach)) ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper) (a Detach with (object (*sticker)) (base (*bumper))) (do-and-next (thelast Detach)) (the text-gen of (thelast Detach)) ((the defeats of (thelast Detach)) includes ((thelast Be-Attached-To))) (not ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper)))))
    (wn16-synset ((:set (:triple "detach" 1 "v") (:triple "detach" 3 "v") (:triple "come_off" 1 "v") (:triple "come_away" 1 "v"))))
    (wn20-synset ((:set (:triple "detach" 1 "v") (:triple "detach" 3 "v") (:triple "come_off" 1 "v") (:triple "come_away" 1 "v")))))

(every Detach has 
    (object ((exactly 1 Tangible-Entity)
             (a Tangible-Entity)))
    (base ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
    (soft-pcs-list ((forall (the object of Self) where t (:triple It object-of (a Be-Attached-To)))))
    (defeats ((allof (the object-of of (the base of Self)) where (((the classes of It) = Be-Attached-To) and ((the object of It) includes (the object of Self))))))
    (del-list ((forall (the defeats of Self) (:set (forall2 (the object of It) (:triple It2 object-of It)) (:triple It object (the object of It))))))
    (text-base ((if (has-value (the base of Self)) then ("from"))))
    (text-active-verbseq-sg ("detaches"))
    (text-active-verbseq-pl ("detach"))
    (text-passive-verbseq-sg ("gets detached"))
    (text-passive-verbseq-pl ("get detached"))
    (preparatory-event ((:default (a Attach with (object ((the object of Self))) (base ((the base of Self)))))))
    (text-nominalization ("detachment")))
(Destruction has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "destruction" 1 "n") (:triple "termination" 5 "n") (:triple "demolition" 1 "n")))))

(every Destruction has 
    (text-nominalization ("destruction")))
(Destroy-Unit has 
    (superclasses (Engagement-Military-Task))
    (description ("An action in which one military unit destroys another")))

(every Destroy-Unit has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (first-subevent ((if ((has-value (the site of Self)) and (not (oneof (the agent of Self) where (It isa Artillery-Unit)))) then (if (((the location of (the agent of Self)) /= (the site of Self)) and ((the location of (the agent of Self)) /= (the location of (the site of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the site of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the site of Self))))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 5 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.88 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.3 ()))))))
    (del-list ((forall (the object of Self) (:triple It combat-strength (the combat-strength of It)))))
    (add-list ((forall (the object of Self) (:triple It combat-strength (a Combat-Strength-Value with (value ((:pair *destroyed Military-Unit))))))))
    (text-active-verbseq-sg ("destroys"))
    (text-active-verbseq-pl ("destroy")))
(Destroy has 
    (superclasses (Break))
    (wn20-synset ((:set (:triple "destroy" 1 "v") (:triple "destruct" 2 "v") (:triple "destroy" 2 "v") (:triple "ruin" 1 "v") (:triple "demolish" 3 "v") (:triple "destroy" 3 "v") (:triple "destroy" 4 "v")))))

(every Destroy has 
    (text-nominalization ("destruction")))
(Desert has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Desert has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit)))))))
(Depurination has 
    (superclasses (Lose))
    (required-slot (object
                       donor))
    (primary-slot (agent
                      recipient
                      instrument))
    (description ("The spontaneous loss of a purine from a DNA
                               strand.  Souther, see Alberts:ECB:202.")))

(every Depurination has 
    (donor ((a DNA-Strand)))
    (object ((a Purine)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Depth-Scale has 
    (scale-class-of (depth))
                                   
    (superclasses (Scale)))
(Depth-Constant has 
    (scalar-constant-class-of (depth))
    (element-type-of (*shallow-deep-scale))
    (superclasses (Constant))
    )
(Dephosphorylation has 
    (superclasses (Remove
                      Enzyme-Catalysis))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (secondary-slot (result))
    (description ("The removal of a phosphoryl group from a molecule.
                          The resulting molecule is less charged energetically
                          and is said to be deactivated. Souther.")))

(every Dephosphorylation has 
    (agent ((a Living-Entity)))
    (substrate ((the Molecule base of Self)))
    (base ((a Molecule)))
    (object ((a Phosphoryl-Group)))
    (instrument ((a Phosphatase)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Department has 
    (superclasses (Organization))
    (description ("an organization that is part of an institution"))
    (wn20-synset ((:set (:triple "department" 1 "n") (:triple "section" 11 "n")))))

(every Department has 
    (is-part-of ((must-be-a Institution))))
(Deoxythymidine has 
    (superclasses (Deoxyribonucleoside))
    (description ("A nucleoside containing thymine and deoxyribose that
                          when joined with a monophosphate group forms one of
                          the four nucleotides in DNA.  Souther.")))

(every Deoxythymidine has 
    (has-part ((a Thymine with (object-of ((a Be-Attached-To with (object ((the Deoxyribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-1") ((the Nitrogen-Atom has-part of (the Thymine has-part of Self)) called "Nitrogen-1")))))))
               (a Deoxyribose))))
(Deoxyribose-Sugar-Phosphate has 
                                          
    (superclasses (Organic-Molecule))
    (description ("A deoxyribose sugar phosphate.  Souther")))

(every Deoxyribose-Sugar-Phosphate has 
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyribose has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyribose))))
(Deoxyribose-Monophosphate has 
    (superclasses (Deoxyribose-Sugar-Phosphate))
    (description ("A deoxyribose sugar phosphate.  Souther")))

(every Deoxyribose-Monophosphate has 
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyribose has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyribose))))
(Deoxyribose has 
    (superclasses (Pentose))
    (description ("A pentose which forms the carbohydrate moiety of
                        nucleotides which constitute DNA.  Souther.")))

(every Deoxyribose has 
    (has-part ((a Oxygen-Atom uniquely-called "Ring-Oxygen" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen2"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object ((the Methanol-Group has-part of Self))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Ring-Oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydroxyl-Group"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen-2")
               (a Hydroxyl-Group uniquely-called "C1-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C3-Hydroxyl-Group")
               (a Hydroxyl-Group uniquely-called "C5-Hydroxyl-Group"))))
(Deoxyribonucleotide has 
                                                                                                                                                                           
    (superclasses (Nucleotide))
    (description ("Nucleotide containing 2-deoxy-D-ribose as the pentose
                    component.  Lehninger:PBC:G-3.")))

(every Deoxyribonucleotide has 
    (has-part ((a Monophosphate)
               (a Nucleoside with (has-part ((a Deoxyribose) (a Nitrogenous-Base with (instance-of ((possible-values Adenine Guanine Thymine Cytosine))))))))))
(Deoxyribonucleoside-Triphosphate has 
                                                                                     
    (superclasses (Nucleoside
                      Triphosphate
                      Nucleotide))
    (description ("A deoxyribonucleotide in which the 5' terminal group 
                        is a triphosphate, e.g. D-TTP. Souther.")))

(every Deoxyribonucleoside-Triphosphate has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyribonucleoside has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxyribonucleoside has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyribonucleoside))))
(Deoxyribonucleoside-Monophosphate has 
    (superclasses (Nucleoside-Monophosphate))
    (description ("A deoxyribonucleotide in which the 5' terminal group 
                        is a monophosphate, e.g. D-TMP. Souther.")))

(every Deoxyribonucleoside-Monophosphate has 
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyribonucleoside has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxyribonucleoside has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyribonucleoside))))
(Deoxyribonucleoside has 
                                                                                                                        
    (superclasses (Nucleoside))
    (description ("Compound composed of a purine or pyrimidine base linked
                        to a deoxyribose sugar. Alberts:ECB:G-13.")))

(every Deoxyribonucleoside has 
    (has-part ((a Pentose)
               (a Nitrogenous-Base with (instance-of ((possible-values Purine Pyrimidine)))))))
(Deoxyribonuclease has 
    (superclasses (Nuclease))
    (description ("Enzyme that cleaves DNA.  Souther.")))

(every Deoxyribonuclease has 
    (purpose ((a Catalyst with (in-event ((a DNA-Repair)))))))
(Deoxyguanosine has 
    (superclasses (Deoxyribonucleoside))
    (description ("A nucleoside containing guanine and ribose that
                         when joined with a monophosphate forms one of the four
                         nucleotides in RNA.  Souther.")))

(every Deoxyguanosine has 
    (has-part ((a Guanine with (object-of ((a Be-Attached-To with (object ((the Deoxyribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site ((((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-1")) (((the Nitrogen-Atom has-part of (the Guanine has-part of Self)) called "Nitrogen-9"))))))))
               (a Deoxyribose))))
(Deoxycytidine has 
    (superclasses (Deoxyribonucleoside))
    (description ("A nucleoside containing cytosine and deoxyribose that
                          when joined with a monophosphate group forms one of
                          the four nucleotides in DNA.  Souther.")))

(every Deoxycytidine has 
    (has-part ((a Cytosine with (object-of ((a Be-Attached-To with (object ((the Deoxyribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-1") ((the Nitrogen-Atom has-part of (the Cytosine has-part of Self)) called "Nitrogen-1")))))))
               (a Deoxyribose))))
(Deoxyadenosine has 
    (superclasses (Deoxyribonucleoside))
    (description ("A nucleoside containing adenine and deoxyribose that
                         when joined with a monophosphate forms one of the four
                         nucleotides in DNA.  Souther.")))

(every Deoxyadenosine has 
    (has-part ((a Adenine with (object-of ((a Be-Attached-To with (object ((the Deoxyribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of Self)) called "Carbon-1") ((the Nitrogen-Atom has-part of (the Adenine has-part of Self)) called "Nitrogen-9")))))))
               (a Deoxyribose))))
(Density-Value has 
    (range-of (density))
    (domain-of (density-of))
    (superclasses (Property-Value))
    (test-case ('((Drink has (superclasses (Substance))) (Ice has (superclasses (Substance))) (*mycoffee has (instance-of (Drink)) (density ((a Density-Value)))) (*mybeer has (instance-of (Drink)) (density ((a Density-Value with (value ((:pair 23 *gram/liter) (:pair *rare Drink) (:pair *dense Ice))) (less-than ((the density of *mycoffee))))))) (the value of (the density of *mybeer)) ((the less-than of (the density of *mybeer)) includes (the density of *mycoffee)) ((the greater-than of (the density of *mycoffee)) includes (the density of *mybeer))))))
(Density-Scale has 
    (scale-class-of (density))
                                 
    (superclasses (Scale)))
(Density-Constant has 
    (scalar-constant-class-of (density))
    (element-type-of (*rare-dense-scale))
    (superclasses (Constant))
    )
(Deliver has 
    (superclasses (Transfer))
    (required-slot (recipient
                       object))
    (primary-slot (agent
                      donor
                      instrument))
    (cmap-correspondence ((:seq agent "the Deliverer")
                          (:seq donor "the original possessor")
                          (:seq instrument "the thing used to Deliver")
                          (:seq object "the thing Delivered")
                          (:seq recipient "the final possessor")))
    (test-case ('((*Pizza has (instance-of (Tangible-Entity))) (*Dominoes has (instance-of (Tangible-Entity)) (possesses (*Pizza))) (*Delivery-Guy has (instance-of (Tangible-Entity))) (*Albert has (instance-of (Tangible-Entity))) (*Deliver has (instance-of (Deliver)) (donor (*Dominoes)) (agent (*Delivery-Guy)) (recipient (*Albert)) (object (*Pizza))) (do-and-next *Deliver) (the text-gen of (thelast Deliver)) ((the possesses of *Dominoes) = nil) ((the possesses of *Albert) = *Pizza) ((the agent of *Deliver) = *Delivery-Guy) (((the agent of *Deliver) /= (the donor of *Deliver)) and ((the agent of *Deliver) /= (the recipient of *Deliver))))))
    (wn16-synset ((:set (:triple "deliver" 3 "v") (:triple "hand_over" 1 "v") (:triple "get_in" 3 "v") (:triple "render" 9 "v") (:triple "turn_in" 3 "v"))))
    (wn20-synset ((:set (:triple "deliver" 3 "v") (:triple "hand_over" 1 "v") (:triple "get_in" 3 "v") (:triple "render" 8 "v") (:triple "turn_in" 2 "v")))))

(every Deliver has 
    (recipient ((a Tangible-Entity)))
    (agent ((constraint ((not ((the donor of Self) includes TheValue)) and (not ((the recipient of Self) includes TheValue))))))
    (soft-pcs-list ((if (has-value (the agent of Self)) then (:triple (the agent of Self) abuts (the object of Self)))))
    (text-active-verbseq-sg ("delivers"))
    (text-active-verbseq-pl ("deliver"))
    (text-passive-verbseq-sg ("gets delivered"))
    (text-passive-verbseq-pl ("get delivered"))
    (text-nominalization ("delivery")))
(Delay has 
    (superclasses (Engagement-Military-Task))
    (description ("a task to slow enemy advance from reaching a friendly objective")))

(every Delay has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit with (agent-of ((a Advance with (toward ((must-be-a Entity with (allegiance ((the allegiance of (the agent of Self)))))))))))
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.3 ()))))))
    (text-active-verbseq-sg ("delays"))
    (text-active-verbseq-pl ("delay"))
    (text-argslots ((:seq path))))
(Defense has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "defense" 4 "n") (:triple "protection" 1 "n")))))

(every Defense has 
    (text-nominalization ("defense")))
(Defeat-Unit has 
    (superclasses (Engagement-Military-Task))
    (description ("An action in which one military unit defeats another")))

(every Defeat-Unit has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 3 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ()))))))
    (del-list ((forall (the object of Self) (:triple It combat-strength (the combat-strength of It)))))
    (add-list ((forall (the object of Self) (:triple It combat-strength (a Combat-Strength-Value with (value ((:pair *defeated Military-Unit))))))))
    (text-active-verbseq-sg ("defeats"))
    (text-active-verbseq-pl ("defeat")))
(Default-Combat-Power-Value has 
    (superclasses (Property-Value))
    (range-of (default-combat-power))
    (domain-of (default-combat-power-of)))

(every Default-Combat-Power-Value has 
    (property-slot ((default-combat-power)))
    (less-than ((constraint ((TheValue isa Default-Combat-Power-Value) or (TheValue isa Relative-Combat-Power-Value)))))
    (greater-than ((constraint ((TheValue isa Default-Combat-Power-Value) or (TheValue isa Relative-Combat-Power-Value)))))
    (same-as ((constraint ((TheValue isa Default-Combat-Power-Value) or (TheValue isa Relative-Combat-Power-Value))))))
(Default-Combat-Power-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (default-combat-power)))
(Decrease has 
    (domain-of (from-value
                   property-slot
                   to-value))
    (range-of (from-value-of
                  property-slot-of
                  to-value-of))
                                                                                                                                                       
    (superclasses (Action))
    (wn20-synset ((:set (:triple "decrease" 1 "v") (:triple "diminish" 1 "v") (:triple "lessen" 1 "v") (:triple "fall" 7 "v") (:triple "decrease" 2 "v") (:triple "lessen" 2 "v") (:triple "minify" 1 "v")))))

(every Decrease has 
    (property-slot ((a Property)))
    (from-value ((in-situation (curr-situation) (the (the property-slot of Self) of (the object of Self)))))
    (pcs-list ((:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self))))
               [Decrease-pcs-1]))
    (del-list ((:triple (the object of Self) (the property-slot of Self) * [Decrease-del-1])))
    (add-list ((:triple (the object of Self) (the property-slot of Self) (an instance of (the range of (the property-slot of Self)) with (less-than ((in-situation (the before-situation of Self) (the (the property-slot of Self) of (the object of Self)))))))
               [Decrease-add-1]))
    (text-nominalization ("decrease")))
(Decomposition-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((a Reaction with (result ((a CO2-Substance) (a CaO-Substance with (physical-state ((a State-Value with (value (*solid)))))))) (raw-material ((a CaCO3-Substance with (physical-state ((a State-Value with (value (*solid))))))))) isa Decomposition-Reaction)))))
(Deception-Operation-Use has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Deceive has 
    (superclasses (Lie))
    (required-slot (agent
                       object
                       recipient))
    (test-case ('((*big-fat-lie has (instance-of (Information)) (truth ((a Truth-Value with (value (*false)))))) (*Guy has (instance-of (Tangible-Entity))) (*Girl has (instance-of (Tangible-Entity))) (*deceives has (instance-of (Deceive)) (agent (*Guy)) (recipient (*Girl)) (object (*big-fat-lie))) (do-and-next *deceives) (the pcs-list of *deceives) (the experiencer of (the Be-Known object-of of *big-fat-lie)) (oneof (the Be-Known experiencer-of of *Guy) where ((the object of It) = *big-fat-lie)) (do-and-next (the objective of *deceives)) (oneof (the Be-Known experiencer-of of *Girl) where ((the object of It) = *big-fat-lie)) ((the value of (the truth of (the object of (thelast Be-Known)))) = *false))))
    (wn16-synset ((:set (:triple "deceive" 1 "v") (:triple "deceive" 2 "v") (:triple "lead_on" 2 "v") (:triple "delude" 1 "v") (:triple "cozen" 1 "v") (:triple "betray" 6 "v") (:triple "lead_astray" 3 "v"))))
    (wn20-synset ((:set (:triple "deceive" 1 "v") (:triple "deceive" 2 "v") (:triple "lead_on" 2 "v") (:triple "delude" 1 "v") (:triple "cozen" 1 "v") (:triple "betray" 6 "v") (:triple "lead_astray" 3 "v")))))

(every Deceive has 
    (recipient ((a Tangible-Entity)))
    (objective ((a Interpret with (agent ((the recipient of Self))) (object ((the result of Self))))))
    (causes ((the objective of Self)))
    (text-nominalization ("deception")))

(every Deceive has-definition 
    (instance-of (Lie))
    (causes ((the objective of Self))))
(Deamination has 
                                     
    (superclasses (Remove
                      Enzyme-Catalysis))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (description ("The loss or removal of an amino group from a
                               molecule.  Souther.")))

(every Deamination has 
    (agent ((a Living-Entity)))
    (base ((a DNA-Strand)))
    (object ((a Amino-Group)))
    (substrate ((the DNA-Strand base of Self)))
    (instrument ((a Deaminase)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Deaminase has 
    (superclasses (Removal-Enzyme))
    (description ("Enzyme that removes an amino group from a
                        molecule. Souther.")))

(every Deaminase has 
    (purpose ((a Catalyst with (in-event ((a Deamination)))))))
(Deactivate has 
    (defeated-by-class-of (Be-Activated))
    (superclasses (Make-Inaccessible))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "The thing deactivated")
                          (:seq agent "The deactivator")
                          (:seq instrument "instrument")))
    (wn16-synset ((:set (:triple "deactivate" 1 "v") (:triple "disable" 1 "v") (:triple "disenable" 1 "v") (:triple "inactivate" 1 "v") (:triple "incapacitate" 1 "v"))))
    (wn20-synset ((:set (:triple "deactivate" 2 "v") (:triple "disable" 1 "v") (:triple "disenable" 1 "v") (:triple "inactivate" 2 "v") (:triple "incapacitate" 1 "v")))))

(every Deactivate has 
    (preparatory-event ((:default (a Activate with (object ((the object of Self)))))))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Activated))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Activated) [Deactivate-pcs-1]))))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Deactivate-del-1]))))
    (text-active-verbseq-sg ("deactivates"))
    (text-active-verbseq-pl ("deactivate"))
    (text-passive-verbseq-sg ("gets deactivated"))
    (text-passive-verbseq-pl ("get deactivated"))
    (text-argslots ((:seq base instrument path result)))
    (text-nominalization ("deactivation")))
(Db has 
    (superclasses (Metal-Atom
                      VB-Element)))

(every Db has 
    (atomic-symbol ((Db)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 105 ()))))))
    (chemical-period (7)))
(Day-Constant has 
    (superclasses (Constant))
                                                                                                                                                                   
    (range-of (time-day-of-week))
    (domain-of (time-day-of-week-of)))
(Damaged-DNA-Sequence has 
    (superclasses (DNA-Sequence))
    (description ("A has-region of the DNA which has missing, mismatched, or
                         altered bases or base pairs. Souther. ")))
(Damaged-DNA-Repair has 
    (superclasses (DNA-Repair))
    (required-slot (object
                       base))
    (primary-slot (instrument
                      agent))
    (description ("A DNA repair system that identifies DNA 
                                   damaged by environmental stimuli, such as 
                                   UV radiation and repairs it.  Souther, 
                                   see Alberts:ECB:204.")))

(every Damaged-DNA-Repair has 
    (agent ((a Living-Entity)))
    (object ((a DNA-Sequence called "damaged DNA" with (object-of ((a Be-Attached-To with (object ((a DNA-Sequence called "template" with (is-part-of ((a DNA-Strand called "normal strand" with (complement ((the DNA-Strand base of Self))))))))) (instrument ((a Hydrogen-Bond) (at-least 2 Hydrogen-Bond)))))))
             (a DNA-Sequence called "the new complementary sequence" with (complement (((the DNA-Sequence object of ((the Be-Attached-To object-of of (((the DNA-Sequence object of Self) called "damaged DNA"))))) called "template"))))))
    (instrument ((a Aggregate called "repair enzymes" with (instance-of (Enzyme)) (element-type ((Enzyme))))))
    (base ((a DNA-Strand called "repaired strand")))
    (first-subevent ((the Detach subevent of Self)))
    (subevent ((a Detach with (object (((the DNA-Sequence object of Self) called "damaged DNA"))) (base ((the DNA-Sequence base of Self))) (instrument ((a Deoxyribonuclease))) (next-event (((the DNA-Synthesis subevent of Self) called "DNA resynthesis"))))
               (a DNA-Synthesis called "DNA resynthesis" with (object (((the DNA-Sequence object of ((the Be-Attached-To object-of of (((the DNA-Sequence object of Self) called "damaged DNA"))))) called "template"))) (result (((the DNA-Sequence object of Self) called "the new complementary sequence"))) (instrument ((a DNA-Polymerase-Repair-Enzyme))) (next-event ((the DNA-Ligation subevent of Self))))
               (a DNA-Ligation with (object (((the DNA-Sequence object of Self) called "the new complementary sequence"))) (base ((the DNA-Sequence base of Self))) (instrument ((a DNA-Ligase)))))))
(Damage has 
    (caused-by-class-of (Be-Damaged))
                      
    (superclasses (Impair))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq agent "the entity doing damage")
                          (:seq object "the thing damaged"))))

(every Damage has 
    (object ((a Tangible-Entity)))
    (resulting-state ((a Be-Damaged)))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self))))
    (text-active-verbseq-sg ("damages"))
    (text-active-verbseq-pl ("damage"))
    (text-passive-verbseq-sg ("gets damaged"))
    (text-passive-verbseq-pl ("get damaged"))
    (text-nominalization ("damage")))
(D-TTP has 
    (superclasses (Deoxyribonucleoside-Triphosphate))
    (description ("Nucleoside triphosphate containing the base thymine
                        used in the synthesis of DNA.  Souther.")))

(every D-TTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Deoxythymidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxythymidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxythymidine))))
(D-TMP has 
    (superclasses (Deoxyribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Deoxythymidine monophosphate. One of the four nucleotides
                      in DNA, containing deoxyribose and thymine. Souther.")))

(every D-TMP has 
    (complement ((must-be-a D-AMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxythymidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxythymidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxythymidine))))
(D-GTP has 
    (superclasses (Deoxyribonucleoside-Triphosphate))
    (description ("Nucleoside triphosphate containing the base guanine
                        used in the synthesis of DNA.  Souther.")))

(every D-GTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyguanosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxyguanosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyguanosine))))
(D-GMP has 
    (superclasses (Deoxyribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Deoxyguanosine monophosphate. One of the four nucleotides
                      in DNA, containing deoxyribose and guanine. Souther.")))

(every D-GMP has 
    (complement ((must-be-a D-CMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyguanosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxyguanosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyguanosine))))
(D-CTP has 
    (superclasses (Deoxyribonucleoside-Triphosphate))
    (description ("Nucleoside triphosphate containing cytosine used in the
                        synthesis of DNA.  Souther.")))

(every D-CTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Deoxycytidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxycytidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxycytidine))))
(D-CMP has 
    (superclasses (Deoxyribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Deoxycytidine monophosphate. One of the four nucleotides
                      in DNA, containing cytosine and deoxyribose. Souther. ")))

(every D-CMP has 
    (complement ((must-be-a D-GMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxycytidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxycytidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxycytidine))))
(D-ATP has 
    (superclasses (Deoxyribonucleoside-Triphosphate))
    (description ("Deoxyadenosine triphosphate containing the base adenine
                        used in the synthesis of DNA.  Souther.")))

(every D-ATP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyadenosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Adenosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyadenosine)))
    (purpose ((a Donor-Role with (in-event ((a Chemical-Bond-Energy-Transfer with (recipient ((a Molecule))) (instrument ((a Phosphoanhydride-Bond))))))))))
(D-AMP has 
    (superclasses (Deoxyribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Deoxyadenosine monophosphate. One of the four nucleotides
                      in DNA, containing deoxyribose and adenine. Souther.")))

(every D-AMP has 
    (complement ((must-be-a D-TMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Deoxyadenosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Deoxyribose has-part of (the Deoxyadenosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Deoxyadenosine))))
(Cytosol has 
    (superclasses (Water-Solution))
    (description ("Aqueous solution of large and small molecules that 
                        fills the main compartment of the cytoplasm.  Excludes
                        membrane-bounded organelles such as endoplasmic
                        reticulum and mitochondria. Alberts:ECB:G-6.")))
(Cytoskeleton has 
    (superclasses (Organic-Structure))
    (description ("System of protein filaments in the cytoplasm of a
                        eucaryotic cell that gives the cell a polarized shape 
                        and the capacity for directed movement.  Its most
                        abundant components are actin filaments, microtubules,
                        and intermediate filaments. Alberts:ECB:G-5.")))

(every Cytoskeleton has 
    (has-part ((a Aggregate with (element-type ((Actin-Filament))))
               (a Aggregate with (element-type ((Microtubule))))
               (a Aggregate with (element-type ((Intermediate-Filament))))))
    (purpose ((a Instrument-Role with (in-event ((a Be-Supported with (object ((a Cell))))))))))
(Cytosine-Deamination has 
    (superclasses (Deamination))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (description ("The loss of an amino group from a cytosine base
                               in a DNA molecule.  
                               Souther, see Alberts:ECB:202.")))

(every Cytosine-Deamination has 
    (agent ((a Living-Entity)))
    (object ((a Amino-Group)))
    (result ((a Uracil))))
(Cytosine has 
    (superclasses (Pyrimidine))
    (description ("A pyrimidine base which combines with a ribose base to
                        form cytidine.  Cytidine triphosphates are one of the
                        building block monomers for DNA and RNA.
                        Souther. ")))

(every Cytosine has 
    (complement ((a Guanine)))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "N1-N1H" with (object (((the has-part of Self) uniquely-called "N1-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Double-Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C2-OA" with (object ((the Oxygen-Atom has-part of Self))) (instrument ((a Double-Covalent-CO-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3")
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Double-Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To uniquely-called "C4-AG" with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond)))))))
               (a Amino-Group)
               (a Oxygen-Atom)
               (a Hydrogen-Atom uniquely-called "N1-Hydrogen"))))
(Cytoplasmic-Protein has 
    (superclasses (Protein))
    (description ("A protein located in the cytoplasm of the cell.
                       Souther. ")))

(every Cytoplasmic-Protein has 
    (is-inside ((a Cytoplasm))))
(Cytoplasm has 
    (superclasses (Protoplasm))
    (description ("Contents of a cell that are contained within
                         the plasma membrane, but, in the case of
                         eucaryotic cells, outside of the nucleus.
                         Alberts:ECB:G-5"))
    )

(every Cytoplasm has 
    (is-part-of ((must-be-a Cell)))
    (has-part ((a Aggregate with (element-type ((Ribosome)))))))
(Cytidine has 
    (superclasses (Ribonucleoside))
    (description ("A nucleoside containing cytosine that when joined
                          with a monophosphate group forms one of the four
                          nucleotides in RNA.  Souther.")))

(every Cytidine has 
    (has-part ((a Cytosine with (object-of ((a Be-Attached-To with (object ((the Ribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Ribose has-part of Self)) called "Carbon-1") ((the Nitrogen-Atom has-part of (the Cytosine has-part of Self)) called "Nitrogen-1")))))))
               (a Ribose))))
(Cysteine has 
    (superclasses (Nonpolar-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("A nonpolar amino acid with a Thiol-methyl side 
                        chain.  Souther")))

(every Cysteine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methyl-Group with (object-of ((a Be-Attached-To with (object ((the Thiol-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (instrument ((a Covalent-CS-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))) (the Sulfur-Atom has-part of (the Thiol-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))))))))) (a Thiol-Group)))))))
(Cu_CH3COO_2-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Cu_CH3COO_2-Substance has 
    (has-basic-structural-unit ((a Cu_CH3COO_2))))
(Cu_CH3COO_2 has 
    (superclasses (Ionic-Compound)))

(every Cu_CH3COO_2 has 
    (has-part ((a Cu-Plus-2)
               (a CH3COO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cu-Plus-2) (:pair 2 CH3COO-Minus))))))))
(CuSO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every CuSO4-Substance has 
    (has-basic-structural-unit ((a CuSO4))))
(CuSO4 has 
    (superclasses (Ionic-Compound)))

(every CuSO4 has 
    (has-part ((a Cu-Plus-2)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cu-Plus-2) (:pair 1 SO4-Minus-2))))))))
(Cu-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Cu-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("copper(II)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cu))))))))
(Cu-Plus has 
    (superclasses (Metal-Cation)))

(every Cu-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("copper(I)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cu))))))))
(Cu has 
    (superclasses (Metal-Atom
                      Alkaline-Earth-Metal-Element)))

(every Cu has 
    (atomic-symbol ((Cu)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 29 ()))))))
    (chemical-period (4)))
(CTP has 
    (superclasses (Ribonucleoside-Triphosphate))
    (description ("Nucleoside triphosphate containing cytosine used in the
                        synthesis of RNA and DNA.  Souther.")))

(every CTP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Cytidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Cytidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Cytidine))))
(CsOH-Substance has 
    (superclasses (Base)))

(every CsOH-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a CsOH))))
(CsOH has 
    (superclasses (Ionic-Compound)))

(every CsOH has 
    (has-part ((a Cs-Plus)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cs-Plus) (:pair 1 OH-Minus))))))))
(Cs-Plus has 
    (superclasses (Metal-Cation)))

(every Cs-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("caesium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cs))))))))
(Cs has 
    (superclasses (Metal-Atom
                      Alkali-Metal-Element)))

(every Cs has 
    (atomic-symbol ((Cs)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 55 ()))))))
    (chemical-period (6)))
(Cross has 
    (superclasses (Non-Engagement-Military-Task
                      Locomotion))
    (description ("a tactical mission task to move over or across a terrain")))

(every Cross has 
    (agent ((a Military-Unit)))
    (path ((a Spatial-Entity)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.99 ()))))))
    (text-nominalization ("crossing"))
    (text-path (""))
    (text-argslots ((:seq path)))
    (text-active-verbseq-sg ("crosses"))
    (text-active-verbseq-pl ("cross")))
(CrO4-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every CrO4-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 3.33E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a CrO4-Minus-2))))
(CrO4-Minus-2 has 
    (superclasses (Anion)))

(every CrO4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("chromate"))
    (has-acid-name ("chromic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cr) (:pair 4 O))))))))
(Critique-Score-Value has 
    (superclasses (Property-Value))
    (range-of (critique-score))
    (domain-of (critique-score-of)))

(every Critique-Score-Value has 
    (property-slot ((critique-score)))
    (less-than ((must-be-a Critique-Score-Value)))
    (greater-than ((must-be-a Critique-Score-Value)))
    (same-as ((must-be-a Critique-Score-Value))))
(Critique-Score-Scale has 
    (superclasses (Scale))
                                     
    (scale-class-of (critique-score)))
(Critique-Score-Constant has 
    (superclasses (Constant))
                                                                                                                     
    (element-type-of (*critique-score-scale))
    (scalar-constant-class-of (critique-score)))
(Critique-Group has 
                                                          
    (superclasses (KM-Class))
    (domain-of (critique-score))
    (range-of (critique-score-of)))
(Critique-Dimension has 

    (superclasses (Critique-Group)))
(Crew has 
    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Creator has 
    (superclasses (Participant))
    (wn20-synset ((:set (:triple "creator" 2 "n")))))

(every Creator has 
    (in-event ((a Create)))
    (played-by ((a Tangible-Entity with (agent-of ((the in-event of Self)))))))
(Create has 
                                                                                                                                     
    (superclasses (Action))
    (required-slot (result))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq result "the thing created")
                          (:seq agent "the creator")
                          (:seq instrument "the instrument")
                          (:seq by-means-of "the event needed for the create")))
    (test-case ('((new-situation) (a Create with (result (*Cake))) (do-and-next (thelast Create)) (the text-gen of (thelast Create)) ((the result of (thelast Create)) = *Cake) (a Create with (result ((a Aggregate))) (object ((a Entity) (a Entity)))))))
    (wn16-synset ((:set (:triple "create" 1 "v") (:triple "create" 2 "v") (:triple "make" 3 "v"))))
    (wn20-synset ((:set (:triple "create" 1 "v") (:triple "create" 2 "v") (:triple "make" 3 "v")))))

(every Create has 
    (result ((a Entity)))
    (agent ((must-be-a Entity)))
    (instrument ((must-be-a Tangible-Entity)))
    (by-means-of ((must-be-a Event)))
    (add-list ((:triple Self result (the result of Self) [Create-add-1])
               (if (((the result of Self) isa Aggregate) and (has-value (the object of Self))) then (:triple (the result of Self) element (the object of Self)))
               (if (((the result of Self) isa Aggregate) and (has-value (the object of Self))) then (:triple (the result of Self) element-type (the object of Self)))))
    (text-active-verbseq-sg ("creates"))
    (text-active-verbseq-pl ("create"))
    (text-passive-verbseq-sg ("gets created"))
    (text-passive-verbseq-pl ("get created"))
    (text-nominalization ("creation")))
(Cr2O7-Minus-2 has 
    (superclasses (Anion)))

(every Cr2O7-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("dichromate"))
    (has-acid-name ("dichromic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Cr) (:pair 7 O))))))))
(Cr-Plus-3 has 
    (superclasses (Cation)))

(every Cr-Plus-3 has 
    (charge ((a Charge-Value with (value ((:pair 3 *electronic-charge))))))
    (has-chemical-name ("chromium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cr))))))))
(Cr has 
    (superclasses (Metal-Atom
                      VIB-Element)))

(every Cr has 
    (atomic-symbol ((Cr)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 24 ()))))))
    (chemical-period (4)))
(Cover has 
    (superclasses (Barrier))
    (description ("a barrier that prevents movement downward to something from above"))
    (wn20-synset ((:set (:triple "cover" 6 "n"))
                  (:set (:triple "top" 9 "n")))))

(every Cover has 
    (played-by ((a Tangible-Entity with (is-above ((a Spatial-Entity)))))))
(Covalent-Single-Bond has 
                                                                                                                                                                                                                                                                 
    (superclasses (Covalent-Bond))
    (description ("A stable chemical link between two atoms produced by
                        sharing a pair of electrons. cf Alberts:ECB:G-5")))

(every Covalent-Single-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Atom) (a Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 90 *kilocalorie/mole))))))
    (length ((a Length-Value with (value ((:pair 0.15 *nanometer)))))))
(Covalent-PO-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between a phosphorus and a oxygen.
                        Souther. ")))

(every Covalent-PO-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Phosphorus-Atom) (a Oxygen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 100 *kilocalorie/mole)))))))
(Covalent-OH-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between oxygen and hydrogen.
                        Souther. ")))

(every Covalent-OH-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Oxygen-Atom) (a Hydrogen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 110 *kilocalorie/mole)))))))
(Covalent-NH-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between hydrogen and nitrogen.
                        Souther. ")))

(every Covalent-NH-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Nitrogen-Atom) (a Hydrogen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 93 *kilocalorie/mole)))))))
(Covalent-CS-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between a carbon and a sulfur.
                        Souther. ")))

(every Covalent-CS-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Sulfur-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 62 *kilocalorie/mole)))))))
(Covalent-CO-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between a carbon and a oxygen.
                        Souther. ")))

(every Covalent-CO-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Oxygen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 62 *kilocalorie/mole)))))))
(Covalent-CN-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between carbon and nitrogen. 
                        Souther. "))
    )

(every Covalent-CN-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Nitrogen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 70 *kilocalorie/mole)))))))
(Covalent-CH-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between carbon and hydrogen.
                        Souther. ")))

(every Covalent-CH-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Hydrogen-Atom) (exactly 2 Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 99 *kilocalorie/mole)))))))
(Covalent-CC-Bond has 
    (superclasses (Covalent-Single-Bond))
    (description ("Chemical bond between two carbons. Souther. ")))

(every Covalent-CC-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Carbon-Atom) (a Carbon-Atom) (exactly 2 Carbon-Atom)))))))))
    (intensity ((a Intensity-Value with (value ((:pair 83 *kilocalorie/mole)))))))
(Covalent-Bond has 
    (superclasses (Chemical-Bond))
    (description ("A stable chemical link between two atoms produced by
                        sharing one or more electrons. Alberts:ECB:G-5"))
    )

(every Covalent-Bond has 
    (intensity ((a Intensity-Value with (value ((:pair 90 *kilocalorie/mole))))))
    (length ((a Length-Value with (value ((:pair 0.15 *nanometer)))))))
(County has 
    (superclasses (Administrative-District))
    (wn20-synset ((:set (:triple "county" 1 "n") (:triple "county" 2 "n")))))
(Country has 
    (superclasses (Administrative-District))
    (wn20-synset ((:set (:triple "country" 1 "n") (:triple "state" 6 "n") (:triple "land" 5 "n")))))
(Counterattack has 
    (superclasses (Attack))
    (description ("attack by part or all of a defending force against an enemy attacking force")))

(every Counterattack has 
    (agent ((a Military-Unit with (object-of ((the Attack agent-of of (the object of Self)))))))
    (object ((a Military-Unit with (agent-of ((a Attack with (object ((the agent of Self)))))))
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 2 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.85 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ()))))))
    (text-active-verbseq-sg ("counterattacks"))
    (text-active-verbseq-pl ("counterattack")))
(Count-Viewpoint has 
    (superclasses (Viewpoint)))

(every Count-Viewpoint has 
    (viewpoint-question ((make-phrase (:seq "How many" (the viewpoint-filter of Self) (the2 of (the2 of (the viewpoint-query of Self))) "does" (the text-def-head of (the1 of (the2 of (the viewpoint-query of Self)))) "have?"))))
    (viewpoint-answer (((?fr == (the1 of (the2 of (the viewpoint-query of Self)))) and (?sl == (the2 of (the2 of (the viewpoint-query of Self)))) and (?va == (the3 of (the2 of (the viewpoint-query of Self)))) and (if (oneof (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 'It)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most")))) then (make-sentence (:seq (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (the (the text-slot of ?sl) of ?fr) else (:seq "--" ?sl "--"))) (andify (forall ?c in (constraints-for (the ?sl of ?fr)) where ((?constr == (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c)))))) and ((?constr = "at-least") or (?constr = "exactly") or (?constr = "at-most")) and (?filterclass == (#'(LAMBDA () (CDDADR (KM-UNIQUE0 '?c))))) and (if (has-value (the viewpoint-filter of Self)) then (oneof (the viewpoint-filter of Self) where (It subsumes ?filterclass)) else t)) (:seq (#'(LAMBDA () (STRING (CAADR (KM-UNIQUE0 '?c))))) (#'(LAMBDA () (CADADR (KM-UNIQUE0 '?c)))) (#'(LAMBDA () (CDDADR (KM-UNIQUE0 '?c))))))))) else (if (?va isa Number) then (make-sentence (:seq (the text-def-head of ?fr) (if (has-value (the text-gloss of ?sl)) then (the text-gloss of ?sl) else (if (has-value (the text-slot of ?sl)) then (the (the text-slot of ?sl) of ?fr) else (:seq "--" ?sl "--"))) ?va (if (has-value (the viewpoint-filter of Self)) then (oneof (the viewpoint-filter of Self) where t) else (oneof ?sc in (the all-superclasses of (the classes of (the ?sl of ?fr))) where ((not (oneof ?c in (the classes of (the has-part of _Heart)) where (not (?sc subsumes ?c)))) and (?sc /= Thing)))))))))))
    (viewpoint-detail (((?fr == (the1 of (the2 of (the viewpoint-query of Self)))) and (?sl == (the2 of (the2 of (the viewpoint-query of Self)))) and (make-phrase (:seq "<b>" (the instance-of of ?fr) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of ?fr)) or (the description of (the instance-of of ?fr)))) (forall ?as in (the user-assumption of (the instance-of of ?fr)) (:seq "
<li>" ?as "</li>
")) "<p>
" (get-justification (:triple ?fr instance-of *)) (get-justification (:triple ?fr ?sl *))))))))
(Corps has 

    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Corporation has 
    (superclasses (Company))
    (description ("an incorporated company"))
    (wn20-synset ((:set (:triple "corporation" 1 "n") (:triple "corp" 1 "n")))))
(Copy has 
    (superclasses (Create))
    (required-slot (result
                       object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq result "the copy")
                          (:seq object "the original")
                          (:seq agent "copier")
                          (:seq instrument "the instrument")
                          (:seq by-means-of "the event needed for the copy")))
    (wn16-synset ((:set (:triple "copy" 5 "v") (:triple "re-create" 2 "v"))))
    (wn20-synset ((:set (:triple "copy" 4 "v") (:triple "re-create" 2 "v"))))
    )

(every Copy has 
    (object ((a Tangible-Entity)))
    (add-list ((if (not (the result of Self)) then (:triple Self result (an instance of (the instance-of of (the object of Self))) [Copy-add-1]))))
    (instrument ((must-be-a Tangible-Entity)))
    (by-means-of ((must-be-a Event)))
    (text-active-verbseq-sg ("copies"))
    (text-active-verbseq-pl ("copy"))
    (text-passive-verbseq-sg ("gets copied"))
    (text-passive-verbseq-pl ("get copied"))
    (text-nominalization ("copying")))
(Cool has 
    (superclasses (Decrease))
    (test-case ('((*mytea has (instance-of (Substance)) (temperature (*myteatemperature))) (*myteatemperature has (instance-of (Temperature-Value)) (value ((:pair *hot Substance)))) (a Decrease with (object (*mytea)) (property-slot (temperature))) ((thelast Decrease) isa Cool) (do-and-next (thelast Cool)) ((the less-than of (the temperature of *mytea)) includes *myteatemperature))))
    (wn20-synset ((:set (:triple "cool" 1 "v") (:triple "chill" 2 "v") (:triple "cool_down" 1 "v") (:triple "cool" 2 "v") (:triple "chill" 3 "v") (:triple "cool_down" 3 "v")))))

(every Cool has 
    (text-nominalization ("cooling")))

(every Cool has-definition 
    (instance-of (Decrease))
    (property-slot ((temperature))))
(Convey has 
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      recipient))
    (test-case ('((*Commence-Attack has (instance-of (Message))) (*Headquarters has (instance-of (Tangible-Entity))) (*Camp-1 has (instance-of (Tangible-Entity))) (*Convey has (instance-of (Convey)) (agent (*Headquarters)) (recipient (*Camp-1)) (object (*Commence-Attack))) (do-and-next *Convey) (the text-gen of (thelast Convey)))))
    (wn16-synset ((:set (:triple "convey" 1 "v") (:triple "convey" 2 "v") (:triple "convey" 3 "v") (:triple "impart" 4 "v") (:triple "carry" 4 "v") (:triple "express" 3 "v") (:triple "transmit" 1 "v") (:triple "communicate" 3 "v"))))
    (wn20-synset ((:set (:triple "convey" 1 "v") (:triple "convey" 2 "v") (:triple "convey" 3 "v") (:triple "impart" 4 "v") (:triple "carry" 4 "v") (:triple "express" 4 "v") (:triple "transmit" 1 "v") (:triple "communicate" 1 "v")))))

(every Convey has 
    (recipient ((a Tangible-Entity)))
    (agent ((a Tangible-Entity)))
    (object ((a Message)))
    (base ((a Tangible-Entity)))
    (first-subevent ((the Embody subevent of Self)))
    (subevent ((a Embody with (object ((the object of Self))) (agent ((the agent of Self))) (result ((the base of Self))) (next-event ((the Transmit subevent of Self))))
               (a Transmit with (object ((the base of Self))) (destination ((the recipient of Self))) (next-event ((the Receive subevent of Self))))
               (a Sense with (object ((the base of Self))) (experiencer ((the recipient of Self))) (result ((the object of Self))) (agent ((the recipient of Self))))))
    (text-nominalization ("conveying")))
(Contract has 
    (superclasses (Decrease))
    (test-case ('((*myballon has (instance-of (Physical-Object)) (volume (*myballonsvolume))) (*myballonsvolume has (instance-of (Volume-Value)) (value ((:pair 3 *liter)))) (a Decrease with (object (*myballon)) (property-slot (volume))) ((thelast Decrease) isa Contract) (do-and-next (thelast Contract)) ((the less-than of (the volume of *myballon)) includes *myballonsvolume))))
    (wn20-synset ((:set (:triple "shrink" 4 "v") (:triple "contract" 4 "v") (:triple "contract" 6 "v")))))

(every Contract has 
    (text-nominalization ("contraction")))

(every Contract has-definition 
    (instance-of (Decrease))
    (property-slot ((volume)))
    (object ((a Spatial-Entity))))
(Container has 
    (domain-of (content))
    (range-of (content-of))
    (superclasses (Barrier))
    (test-case ('((*SchroedingersCat has (instance-of (Animal))) (*SchroedingersBox has (instance-of (Artifact)) (plays ((a Container with (content (*SchroedingersCat)))))) ((the content of (the plays of *SchroedingersBox)) includes *SchroedingersCat) ((the is-inside of *SchroedingersCat) includes *SchroedingersBox))))
    (wn16-synset ((:set (:triple "container" 1 "n"))))
    (wn20-synset ((:set (:triple "container" 1 "n")))))

(every Container has 
    (played-by ((a Tangible-Entity with (encloses ((a Spatial-Entity with (is-inside ((the played-by of Self)))))) (does-not-enclose ((a Spatial-Entity with (is-outside ((the played-by of Self)))))) (is-between ((the encloses of (the played-by of Self)) (the does-not-enclose of (the played-by of Self)))) (shape ((a Shape-Value with (value ((*hollow-volume)))))))))
    (in-event ((a Be-Contained with (object ((the content of Self))) (instrument ((the played-by of Self))))))
    (content ((must-be-a Tangible-Entity with (is-inside ((the played-by of Self))))))
    (capacity ((must-be-a Capacity-Value))))
(Contain has 
    (superclasses (Engagement-Military-Task
                      Confine))
    (description ("a tactical mission task in which a military unit stops, holds, or surrounds enemy forces")))

(every Contain has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (first-subevent ((the Move-Military-Unit subevent of Self)))
    (subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.5 ()))))))
    (base ((a Terrain with (location ((the site of Self))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.7 ()))))))
    (text-nominalization ("containment"))
    (text-active-verbseq-sg ("contains"))
    (text-active-verbseq-pl ("contain"))
    (text-base ("at"))
    (text-argslots ((:seq base path))))
(Consume has 
    (superclasses (Decrease))
    (test-case ('((*Gas has (instance-of (Entity))) (*Consume has (instance-of (Consume)) (object (*Gas)) (property-slot (volume))) ((the played-by of (the base of *Consume)) = *Gas) (do-and-next *Consume) ((the less-than of (the volume of *Gas)) includes ((in-situation (the1 prev-situation of (curr-situation)) (the volume of *Gas)))))))
    (wn20-synset ((:set (:triple "consume" 5 "v") (:triple "eat_up" 2 "v") (:triple "use_up" 1 "v") (:triple "eat" 4 "v") (:triple "deplete" 1 "v") (:triple "exhaust" 2 "v") (:triple "run_through" 2 "v") (:triple "wipe_out" 1 "v")))))

(every Consume has 
    (base ((a Resource with (played-by ((the object of Self))))))
    (object ((a Entity with (plays ((a Resource with (base-of ((Self)))))))))
    (text-nominalization ("consumption")))
(Construction has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "building" 2 "n") (:triple "creating_from_raw_materials" 1 "n")))))

(every Construction has 
    (text-nominalization ("construction")))
(Constant has 
    (range-of (categorical-constant-class
                  categorical-constant
                  scalar-constant-class
                  scalar-constant))
    (domain-of (categorical-constant-class-of
                   categorical-constant-of
                   scalar-constant-class-of
                   scalar-constant-of))

    (superclasses (Property-Group)))
(Consistency-Value has 
    (range-of (consistency))
    (domain-of (consistency-of))
    (superclasses (Property-Value)))
(Consistency-Constant has 
    (categorical-constant-class-of (consistency))
    (superclasses (Constant))
    )
(Conservation-of-Volume has 
    (superclasses (Method)))

(every Conservation-of-Volume has 
    (context ((a Mix)))
    (input ((the volume of (the raw-material of (the context of Self)))))
    (output ((the volume of (the result of (the context of Self))))))
(Connector has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "connector" 1 "n") (:triple "connection" 3 "n") (:triple "connexion" 4 "n") (:triple "connecter" 1 "n") (:triple "connective" 2 "n") (:triple "fastener" 1 "n") (:triple "fastening" 1 "n") (:triple "holdfast" 1 "n") (:triple "link" 1 "n") (:triple "nexus" 1 "n"))))
    (wn20-synset ((:set (:triple "connector" 1 "n") (:triple "connection" 3 "n") (:triple "connexion" 4 "n") (:triple "connecter" 1 "n") (:triple "connective" 2 "n") (:triple "fastener" 2 "n") (:triple "fastening" 1 "n") (:triple "holdfast" 1 "n") (:triple "link" 1 "n") (:triple "nexus" 1 "n")))))

(every Connector has 
    (in-event ((a Be-Attached-To)))
    (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self)))))))
(Conjugated-Double-Bond has 
    (superclasses (Double-Covalent-Bond))
    (description ("A double bond which exists in alteration with single
                        bonds in a carbon skeleton.  WHS:PBC-5th:61.")))

(every Conjugated-Double-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Atom) (a Carbon-Atom) (exactly 2 Atom))))))))))
(Conjugate-Acid-Base-Pair has 
    (superclasses (Aggregate))
    (test-case ('(((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the complement of (a Conjugate-Acid-Base-Pair with (element ((a Anion-Substance with (has-basic-structural-unit ((a NO2-Minus)))))))))))) = (:set (:pair 1 H) (:pair 1 N) (:pair 2 O))) ((the complement of (a Conjugate-Acid-Base-Pair with (element ((a NO2-Minus-Substance))))) isa HNO2-Substance) ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the complement of (a Conjugate-Acid-Base-Pair with (element ((a Cation-Substance with (has-basic-structural-unit ((a NH4-Plus)))))))))))) = (:set (:pair 1 N) (:pair 3 H))) ((the complement of (a Conjugate-Acid-Base-Pair with (element ((a NH4-Plus-Substance))))) isa NH3-Substance)))))

(every Conjugate-Acid-Base-Pair has 
    (element ((a Chemical)))
    (context ((((if (((the element of Self) isa Acid) or (the Acid-Role plays of (the element of Self)) or (the Lewis-Acid-Role plays of (the element of Self)) or ((the has-basic-structural-unit of (the element of Self)) isa Acid) or (the Acid-Role plays of (the has-basic-structural-unit of (the element of Self))) or (the Lewis-Acid-Role plays of (the has-basic-structural-unit of (the element of Self)))) then (the output of (a Compute-Conjugate-Base with (input ((the element of Self))))) [Conjugate-Acid-Base-Pair-context-1])) && ((if (((the element of Self) isa Base) or (the Base-Role plays of (the element of Self)) or (the Lewis-Base-Role plays of (the element of Self)) or ((the has-basic-structural-unit of (the element of Self)) isa Base) or (the Base-Role plays of (the has-basic-structural-unit of (the element of Self))) or (the Lewis-Base-Role plays of (the has-basic-structural-unit of (the element of Self)))) then (the output of (a Compute-Conjugate-Acid with (input ((the element of Self))))) [Conjugate-Acid-Base-Pair-context-2])))))
    (complement ((if ((the context of Self) /= "none") then (if ((the number of (the context of Self)) > 1) then (the context of Self) else (if (has-value (the output of (a Identify-Chemical with (input ((the context of Self)))))) then ((the output of (a Identify-Chemical with (input ((the context of Self)))))) else (the context of Self)))))))
(Confine has 
    (caused-by-class-of (Be-Confined))
    (superclasses (Obstruct))
    (required-slot (object
                       base))
    (primary-slot (agent
                      location))
    (cmap-correspondence ((:seq object "the object Confined")
                          (:seq agent "the Confiner")
                          (:seq location "the place where the Confine occurs")))
    (test-case ('((*prisoner has (instance-of (Physical-Object))) (*prison-cell has (instance-of (Tangible-Entity))) (a Confine with (object (*prisoner)) (base (*prison-cell))) (not (has-value (the Be-Confined object-of of *prisoner))) (do-and-next (thelast Confine)) (the text-gen of (thelast Confine)) (has-value (the Be-Confined object-of of *prisoner)) (a Move-Out-Of with (object (*prisoner)) (base (*prison-cell))) (not (try-do (thelast Move-Out-Of))) (the text-gen of (thelast Move-Out-Of)) (a Release with (object (*prisoner)) (base (*prison-cell))) (do-and-next (thelast Release)) (the text-gen of (thelast Release)) (not (has-value (the Be-Confined object-of of *prisoner))) (do-and-next (thelast Move-Out-Of)) ((the is-outside of *prisoner) includes *prison-cell))))
    (wn16-synset ((:set (:triple "confine" 3 "v") (:triple "confine" 4 "v") (:triple "enclose" 2 "v") (:triple "hold_in" 1 "v"))))
    (wn20-synset ((:set (:triple "confine" 3 "v") (:triple "confine" 4 "v") (:triple "enclose" 2 "v") (:triple "hold_in" 1 "v"))))
    )

(every Confine has 
    (preparatory-event ((:default (a Admit with (object ((the object of Self))) (base ((the location of Self)))) (a Open with (object ((the location of Self)))) (a Enter with (object ((the object of Self))) (base ((the location of Self)))))))
    (resulting-state ((a Be-Confined)))
    (base ((a Tangible-Entity with (plays ((a Container))))))
    (object ((a Tangible-Entity)))
    (pcs-list ((:triple (the object of Self) is-inside (the base of Self) [Confine-pcs-1])))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Confine-add-1])
               (:triple (the resulting-state of Self) base (the base of Self) [Confine-add-2])))
    (text-active-verbseq-sg ("confines"))
    (text-active-verbseq-pl ("confine"))
    (text-passive-verbseq-sg ("gets confined"))
    (text-passive-verbseq-pl ("get confined"))
    (text-nominalization ("confinement")))
(Conduit has 
    (superclasses (Role))
    (wn20-synset ((:set (:triple "conduit" 1 "n"))))
    )

(every Conduit has 
    (in-event ((a Move)))
    (played-by ((a Spatial-Entity with (path-of ((the in-event of Self)))))))
(Conductivity-Value has 
    (superclasses (Property-Value))
    (range-of (conductivity))
    (domain-of (conductivity-of)))

(every Conductivity-Value has 
    (property-slot ((conductivity)))
    (conductivity-of ((must-be-a Chemical)))
    (less-than ((must-be-a Conductivity-Value)))
    (greater-than ((must-be-a Conductivity-Value)))
    (same-as ((must-be-a Conductivity-Value))))
(Conductivity-Scale has 
    (superclasses (Scale))
    (scale-class-of (conductivity))
    )
(Conductivity-Constant has 
    (superclasses (Constant))
                                                                                                 
    (scalar-constant-class-of (conductivity))
    (element-type-of (*low-high-conductivity-scale)))
(Conceptual-Entity has 
    (domain-of (information-content))
    (range-of (information-content-of))
    (superclasses (Intangible-Entity))
    (description ("An entity bearing conceptual content, such as a message or a bit of information."))
    (wn20-synset ((:set (:triple "abstraction" 6 "n"))))
    )
(Concentration-Value has 
    (superclasses (Property-Value))
    (range-of (concentration
                  equilibrium-concentration))
    (domain-of (concentration-of
                   equilibrium-concentration-of)))

(every Concentration-Value has 
    (property-slot ((concentration)))
    (concentration-of ((must-be-a Chemical)))
    (less-than ((must-be-a Concentration-Value)))
    (greater-than ((must-be-a Concentration-Value)))
    (same-as ((must-be-a Concentration-Value))))
(Concentration-Constant has 
    (superclasses (Constant))
                                                   
    (scalar-constant-class-of (concentration
                                  equilibrium-concentration
                                  scalar-concentration)))
(Conceal has 
    (caused-by-class-of (Be-Concealed))
    (superclasses (Make-Inaccessible))
    (required-slot (object))
    (primary-slot (agent
                      base))
    (cmap-correspondence ((:seq object "the thing Concealed")
                          (:seq base "the thing to which the object is Concealed")
                          (:seq agent "the Concealer")))
    (wn16-synset ((:set (:triple "conceal" 1 "v") (:triple "hide" 1 "v"))))
    (wn20-synset ((:set (:triple "conceal" 1 "v") (:triple "hide" 1 "v")))))

(every Conceal has 
    (object ((a Tangible-Entity)))
    (base ((must-be-a Thing)))
    (agent ((must-be-a Entity)))
    (resulting-state ((a Be-Concealed)))
    (soft-pcs-list ((if (has-value (the agent of Self)) then (:triple (the agent of Self) experiencer-of (a Be-Known with (object ((a Information with (information-content (the location of (the object of Self)))))))))))
    (add-list ((if (has-value (the base of Self)) then (:triple (the resulting-state of Self) base (the base of Self) [Conceal-add-1]))
               (:triple (the resulting-state of Self) object (the object of Self) [Conceal-add-2])))
    (preparatory-event ((:default (a Expose with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-active-verbseq-sg ("conceals"))
    (text-active-verbseq-pl ("conceal"))
    (text-passive-verbseq-sg ("gets concealed"))
    (text-passive-verbseq-pl ("get concealed"))
    (text-base ((if (has-value (the base of Self)) then ("from"))))
    (text-argslots ((:seq base instrument path result)))
    (text-nominalization ("concealment")))
(Compute-Volume-from-Concentration-and-Quantity has 
    (superclasses (Method))
    (description ("given a solution base with a quantity and a concentration, returns its volume")))

(every Compute-Volume-from-Concentration-and-Quantity has 
    (output ((if ((has-value (the Quantity-Value input of Self)) and (has-value (the Concentration-Value input of Self))) then (a Volume-Value with (value ((:pair ((the1 of (the value of (the Quantity-Value input of Self))) / (the1 of (the value of (the output of (a Unit-Conversion with (input ((the Concentration-Value input of Self))) (target-unit (*molar))))))) *liter [Compute-Volume-from-Concentration-and-Quantity-output-1]))))))))
(Compute-Strong-Acid-and-Base has 
    (superclasses (Method))
    (description ("given a reaction, returns the strong acid and base of the reaction")))

(every Compute-Strong-Acid-and-Base has 
    (input ((a Reaction)))
    (output ((if ((the output of (a Compute-Equilibrium-Position with (input ((the input of Self))))) = (the raw-material of (the input of Self))) then (the result of (the input of Self)) else (if ((the output of (a Compute-Equilibrium-Position with (input ((the input of Self))))) = (the result of (the input of Self))) then (the raw-material of (the input of Self))) [Compute-Strong-Acid-and-Base-output-1]))))
(Compute-Solubility-of-Ionic-Compound-in-Water has 
    (superclasses (Method))
    (description ("given the cation and the anion of an ionic compound, return its solubility in water"))
    (test-case ('(((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a NO3-Minus) (a Pb-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a CH3COO-Minus) (a Pb-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a Cl-Minus) (a Ca-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a Cl-Minus) (a Pb-Plus-2))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a Br-Minus) (a Ba-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a Br-Minus) (a Hg2-Plus-2))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a I-Minus) (a Sr-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a I-Minus) (a Ag-Plus))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a SO4-Minus-2) (a Ca-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a SO4-Minus-2) (a Sr-Plus-2))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a S-Minus-2) (a NH4-Plus))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a S-Minus-2) (a Hg2-Plus-2))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a CO3-Minus-2) (a Li-Plus))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a CO3-Minus-2) (a Ba-Plus-2))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a PO4-Minus-3) (a K-Plus))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a PO4-Minus-3) (a Fe-Plus-2))))))) = *insoluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a OH-Minus) (a Sr-Plus-2))))))) = *soluble) ((the1 of (the value of (the output of (a Compute-Solubility-of-Ionic-Compound-in-Water with (input ((a OH-Minus) (a Mg-Plus-2))))))) = *insoluble)))))

(every Compute-Solubility-of-Ionic-Compound-in-Water has 
    (input ((a Cation)
            (a Anion)))
    (output ((if ((has-value (the Cation input of Self)) and (has-value (the Anion input of Self)) and (not (((the Cation input of Self) isa H-Plus) and ((the Anion input of Self) isa OH-Minus)))) then (a Solubility-Value with (value ((:pair (if (((the Anion input of Self) isa NO3-Minus) or ((the Anion input of Self) isa CH3COO-Minus) or ((((the Anion input of Self) isa Cl-Minus) or ((the Anion input of Self) isa Br-Minus) or ((the Anion input of Self) isa I-Minus)) and (not ((the Cation input of Self) isa Ag-Plus)) and (not ((the Cation input of Self) isa Hg2-Plus-2)) and (not ((the Cation input of Self) isa Pb-Plus-2))) or (((the Anion input of Self) isa SO4-Minus-2) and (not ((the Cation input of Self) isa Sr-Plus-2)) and (not ((the Cation input of Self) isa Ba-Plus-2)) and (not ((the Cation input of Self) isa Hg2-Plus-2)) and (not ((the Cation input of Self) isa Pb-Plus-2))) or ((((the Anion input of Self) isa S-Minus-2) or ((the Anion input of Self) isa OH-Minus)) and (((the Cation input of Self) isa NH4-Plus) or (((the2 of (the1 of (the term of (the has-chemical-formula of (the Cation input of Self))))) is-subsumed-by Alkali-Metal-Element) and (not ((the Cation input of Self) isa H-Plus))) or ((the Cation input of Self) isa Ca-Plus-2) or ((the Cation input of Self) isa Sr-Plus-2) or ((the Cation input of Self) isa Ba-Plus-2))) or ((((the Anion input of Self) isa CO3-Minus-2) or ((the Anion input of Self) isa PO4-Minus-3)) and (((the Cation input of Self) isa NH4-Plus) or (((the2 of (the1 of (the term of (the has-chemical-formula of (the Cation input of Self))))) is-subsumed-by Alkali-Metal-Element) and (not ((the Cation input of Self) isa H-Plus)))))) then *soluble else (if (((((the Anion input of Self) isa Cl-Minus) or ((the Anion input of Self) isa Br-Minus) or ((the Anion input of Self) isa I-Minus)) and (((the Cation input of Self) isa Ag-Plus) or ((the Cation input of Self) isa Hg2-Plus-2) or ((the Cation input of Self) isa Pb-Plus-2))) or (((the Anion input of Self) isa SO4-Minus-2) and (((the Cation input of Self) isa Sr-Plus-2) or ((the Cation input of Self) isa Ba-Plus-2) or ((the Cation input of Self) isa Hg2-Plus-2) or ((the Cation input of Self) isa Pb-Plus-2))) or ((((the Anion input of Self) isa S-Minus-2) or ((the Anion input of Self) isa OH-Minus)) and (not ((the Cation input of Self) isa NH4-Plus)) and ((not ((the2 of (the1 of (the term of (the has-chemical-formula of (the Cation input of Self))))) is-subsumed-by Alkali-Metal-Element)) or ((the Cation input of Self) isa H-Plus)) and (not ((the Cation input of Self) isa Ca-Plus-2)) and (not ((the Cation input of Self) isa Sr-Plus-2)) and (not ((the Cation input of Self) isa Ba-Plus-2))) or ((((the Anion input of Self) isa CO3-Minus-2) or ((the Anion input of Self) isa PO4-Minus-3)) and (not ((the Cation input of Self) isa NH4-Plus)) and (((the Cation input of Self) isa H-Plus) or (not ((the2 of (the1 of (the term of (the has-chemical-formula of (the Cation input of Self))))) is-subsumed-by Alkali-Metal-Element))))) then *insoluble else *not-known-to-be-soluble)) H2O-Substance)))) [Compute-Solubility-of-Ionic-Compound-in-Water-output-1]))))
(Compute-Salt-Status has 
    (superclasses (Method))
    (description ("given a chemical entity, determines if it is salt")))

(every Compute-Salt-Status has 
    (output ((if (oneof (the all-superclasses of (the2 of (the1 of (the term of (the has-chemical-formula of (the input of Self)))))) where (It = Metal-Cation)) then (a Salt-Status-Value with (value ((:pair *salt nil))))))))
(Compute-Salt-Solution-with-Highest-pH has 
    (superclasses (Method))
    (description ("given 2 salt solutions, finds the one with the higher PH"))
    (test-case ('((*S1 has (instance-of (Salt-Solution)) (has-part ((a CO3-Minus-2-Substance) (a Cation-Substance))) (pH ((a PH-Value with (to-value-of ((a Increase with (property-slot (pH))))))))) (*S2 has (instance-of (Salt-Solution)) (has-part ((a SO4-Minus-2-Substance) (a Cation-Substance))) (pH ((a PH-Value with (to-value-of ((a Increase with (property-slot (pH))))))))) ((the output of (a Compute-Salt-Solution-with-Highest-pH with (input (*S1 *S2)))) = *S1) (*S3 has (instance-of (Salt-Solution)) (pH ((a PH-Value with (value ((:pair 5 nil))))))) (*S4 has (instance-of (Salt-Solution)) (pH ((a PH-Value with (value ((:pair 7 nil))))))) ((the output of (a Compute-Salt-Solution-with-Highest-pH with (input (*S3 *S4)))) = *S4)))))

(every Compute-Salt-Solution-with-Highest-pH has 
    (input ((a Salt-Solution called "first")
            (a Salt-Solution called "second")
            (exactly 2)))
    (output (((((?first-salt == ((the input of Self) called "first")) and (?second-salt == ((the input of Self) called "second")) and (?pH-first == (the value of (the pH of ?first-salt))) and (?pH-second == (the value of (the pH of ?second-salt))) and (if ((numberp (the1 of ?pH-first)) and (numberp (the1 of ?pH-second))) then (if ((the1 of ?pH-first) > (the1 of ?pH-second)) then (?first-salt) else (?second-salt))))) && (((?first-salt == ((the input of Self) called "first")) and (?second-salt == ((the input of Self) called "second")) and (?first-anion == (the Anion-Substance has-part of ?first-salt)) and (?second-anion == (the Anion-Substance has-part of ?second-salt)) and (?pH-first == (the pH of ?first-salt)) and (?pH-second == (the pH of ?second-salt)) and (?first-kb == (the kb of (the Base-Role plays of ?first-anion))) and (?first-def-kb == (the default-kb of (the Base-Role plays of ?first-anion))) and (?second-kb == (the kb of (the Base-Role plays of ?second-anion))) and (?second-def-kb == (the default-kb of (the Base-Role plays of ?second-anion))) and (if ((has-value (the to-value-of of ?pH-first)) and (has-value (the to-value-of of ?pH-second))) then (if ((the to-value-of of ?pH-first) isa Increase) then (if ((the to-value-of of ?pH-second) isa Increase) then (if ((has-value (the value of ?first-kb)) and (has-value (the value of ?second-kb))) then (if ((the1 of (the value of ?first-kb)) > (the1 of (the value of ?second-kb))) then (?first-salt) else (?second-salt)) else (if ((has-value (the value of ?first-def-kb)) and (has-value (the value of ?second-def-kb))) then (if ((the1 of (the value of ?first-def-kb)) > (the1 of (the value of ?second-def-kb))) then (?first-salt) else (?second-salt)))) else (?first-salt)) else (if ((the to-value-of of ?pH-second) isa Increase) then (?second-salt)))))) && (((?first-salt == ((the input of Self) called "first")) and (?second-salt == ((the input of Self) called "second")) and (?pH-first == (the pH of ?first-salt)) and (?pH-second == (the pH of ?second-salt)) and (?hbsu-first == (the has-chemical-formula of (the has-basic-structural-unit of (the Cation-Substance has-part of ?first-salt)))) and (?hbsu-second == (the has-chemical-formula of (the has-basic-structural-unit of (the Cation-Substance has-part of ?second-salt)))) and (if ((has-value (the to-value-of of ?pH-first)) and (has-value (the to-value-of of ?pH-second))) then (if ((the to-value-of of ?pH-first) isa Decrease) then (if ((the to-value-of of ?pH-second) isa Decrease) then (if (((an instance of (the2 of (the1 of (the term of (the has-chemical-formula of ?hbsu-first))))) isa Metal-Atom) and ((an instance of (the2 of (the1 of (the term of (the has-chemical-formula of ?hbsu-second))))) isa Metal-Atom)) then (if ((the1 (the value of (the charge of ?hbsu-first))) > (the1 (the value of (the charge of ?hbsu-second)))) then (?second-salt) else (?first-salt))) else (?second-salt)) else (if ((the to-value-of of ?pH-second) isa Decrease) then (?first-salt)))))) && (((?first-salt == ((the input of Self) called "first")) and (?second-salt == ((the input of Self) called "second")) and (?first-cation == (the Cation-Substance has-part of ?first-salt)) and (?second-cation == (the Cation-Substance has-part of ?second-salt)) and (?pH-first == (the pH of ?first-salt)) and (?pH-second == (the pH of ?second-salt)) and (?first-conj-base == (the output of (a Compute-Conjugate-Base with (input (?first-salt))))) and (?second-conj-base == (the output of (a Compute-Conjugate-Base with (input (?second-salt))))) and (?first-ka == (the ka of (the Acid-Role plays of ?first-cation))) and (?first-def-ka == (the default-ka of (the Acid-Role plays of ?first-cation))) and (?second-ka == (the ka of (the Acid-Role plays of ?second-cation))) and (?second-def-ka == (the default-ka of (the Acid-Role plays of ?second-cation))) and (if ((has-value (the to-value-of of ?pH-first)) and (has-value (the to-value-of of ?pH-second))) then (if ((the to-value-of of ?pH-first) isa Decrease) then (if ((the to-value-of of ?pH-second) isa Decrease) then (if ((has-value ?first-conj-base) and ((the1 of (the value of (the intensity of (a Base-Role with (played-by ?first-conj-base))))) = *weak) and (has-value ?second-conj-base) and ((the1 of (the value of (the intensity of (a Base-Role with (played-by ?second-conj-base))))) = *weak) and (has-value ?first-plays) and (has-value ?second-plays)) then (if ((has-value (the value of ?first-ka)) and (has-value (the value of ?second-ka))) then (if ((the1 of (the value of ?first-ka)) < (the1 of (the value of ?second-ka))) then (?first-salt) else (?second-salt)) else (if ((has-value (the value of ?first-def-ka)) and (has-value (the value of ?second-def-ka))) then (if ((the1 of (the value of ?first-def-ka)) < (the1 of (the value of ?second-def-ka))) then (?first-salt) else (?second-salt))))) else (?second-salt)) else (if ((the to-value-of of ?pH-second) isa Decrease) then (?first-salt))))))))))
(Compute-Relative-Basicity has 
    (superclasses (Method))
    (description ("given several solutions, find the most basic one")))

(every Compute-Relative-Basicity has 
    (input ((a Solution with (pH ((a PH-Value))))))
    (output (#'(LAMBDA () (LET ((SOLNS (KM0 '(the input of Self))) (MAX 7) MAX-SOLN X) (DOLIST (SOLN SOLNS MAX-SOLN) (SETF X (FIRST (KM0 (BACKQUOTE (the1 of (the value of (oneof (the pH of (UNQUOTE SOLNS)) where (numberp (the1 of (the value of It)))))))))) (IF (AND X (> X MAX)) (SETF MAX X MAX-SOLN SOLN)))) [Compute-Relative-Basicity-output-1]))))
(Compute-Relative-Acidity has 
    (superclasses (Method))
    (description ("given several solutions, find the most acidic one")))

(every Compute-Relative-Acidity has 
    (input ((a Solution with (pH ((a PH-Value))))))
    (output (#'(LAMBDA () (LET ((SOLNS (KM0 '(the input of Self))) (MAX 7) MAX-SOLN X) (DOLIST (SOLN SOLNS MAX-SOLN) (SETF X (FIRST (KM0 (BACKQUOTE (the1 of (the value of (oneof (the pH of (UNQUOTE SOLNS)) where (numberp (the1 of (the value of It)))))))))) (IF (AND X (< X MAX)) (SETF MAX X MAX-SOLN SOLN)))) [Compute-Relative-Acidity-output-1]))))
(Compute-Quantity-of-Chemical-Substance has 
    (superclasses (Method)))

(every Compute-Quantity-of-Chemical-Substance has 
    (input ((a Class)
            (a Chemical)))
    (output ((a Quantity-Value with (value ((:pair (the sum of (forall-bag (the bag of (the Chemical input of Self)) (if ((the has-basic-structural-unit of It) isa (the Class input of Self)) then (the1 of (the value of (the output of (a Unit-Conversion with (input ((the quantity of It))) (target-unit (*mole)))))) else (if (has-value (the has-part of (the has-basic-structural-unit of It))) then ((the1 of (the value of (the output of (a Unit-Conversion with (input ((the quantity of It))) (target-unit (*mole)))))) * (the sum of (forall-bag2 (the bag of (the has-part of (the has-basic-structural-unit of It))) (the1 of (the value of (the output of (a Compute-Quantity-of-Chemical-Object with (input ((the Class input of Self) It2))))))))) else (if (has-value (the has-part of It)) then (the sum of (forall-bag2 (the bag of (the has-part of It)) (the1 of (the value of (the output of (a Compute-Quantity-of-Chemical-Substance with (input ((the Class input of Self) It2)))))))) else 0))))) *mole [Compute-Quantity-of-Chemical-Substance-output-1])))))))
(Compute-Quantity-of-Chemical-Object has 
    (superclasses (Method)))

(every Compute-Quantity-of-Chemical-Object has 
    (input ((a Class)
            (a Chemical-Entity)))
    (output ((a Quantity-Value with (value ((the sum of (forall-bag (the bag of (the Chemical-Entity input of Self)) (if (It isa (the Class input of Self)) then 1 else (if (has-value (the has-part of It)) then (the sum of (forall-bag2 (the bag of (the has-part of It)) (the1 of (the value of (the output of (a Compute-Quantity-of-Chemical-Object with (input ((the Class input of Self) It2)))))))) else 0)))) [Compute-Quantity-of-Chemical-Object-output-1]))))))
(Compute-Quantity-of-Chemical-in-Chemicals has 
    (superclasses (Method)))

(every Compute-Quantity-of-Chemical-in-Chemicals has 
    (input ((a Class)
            (a Chemical)))
    (output ((a Quantity-Value with (value ((:pair (the sum of (forall-bag (the bag of (the Chemical input of Self)) (the1 of (the value of (the output of (a Compute-Quantity-of-Chemical-in-Chemical with (input ((the Class input of Self) It)))))))) *mole [Compute-Quantity-of-Chemical-in-Chemicals-output-1])))))))
(Compute-Quantity-of-Chemical-in-Chemical has 
    (superclasses (Method)))

(every Compute-Quantity-of-Chemical-in-Chemical has 
    (input ((a Class)
            (a Chemical)))
    (output ((a Quantity-Value with (value ((:pair (if ((the has-basic-structural-unit of (the Chemical input of Self)) isa (the Class input of Self)) then (the1 of (the value of (the output of (a Unit-Conversion with (input ((the quantity of (the Chemical input of Self)))) (target-unit (*mole)))))) else ((the1 of (the value of (the output of (a Unit-Conversion with (input ((the quantity of (the Chemical input of Self)))) (target-unit (*mole)))))) * (if (has-value (theoneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the Chemical input of Self))))) where ((the2 of It) = (the Class input of Self)))) then (the1 of (theoneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the Chemical input of Self))))) where ((the2 of It) = (the Class input of Self)))) else 0))) *mole [Compute-Quantity-of-Chemical-in-Chemical-output-1])))))))
(Compute-Quantity-from-Reaction has 
    (superclasses (Method)))

(every Compute-Quantity-from-Reaction has 
    (input ((a Chemical)
            (a Coefficient-Value)))
    (output ((a Quantity-Value with (value ((if (oneof (the Chemical input of Self) where ((the quantity of It) and (the1 of (the value of (the quantity of It))))) then (:pair ((the min of (the bag of (forall (the Chemical input of Self) where ((the quantity of It) and (the1 of (the value of (the quantity of It)))) ((the1 of (the value of (the quantity of It))) / (the1 of (the value of (the coefficient of It))))))) * (the1 of (the value of (the Coefficient-Value input of Self)))) *mole)))) [Compute-Quantity-from-Reaction-output-1]))))
(Compute-Quantity-from-Concentration-and-Volume has 
    (superclasses (Method)))

(every Compute-Quantity-from-Concentration-and-Volume has 
    (output ((if ((has-value (the1 of (the value of (the Concentration-Value input of Self)))) and (has-value (the1 of (the value of (the Volume-Value input of Self))))) then (a Quantity-Value with (value ((:pair ((the1 of (the value of (the output of (a Unit-Conversion with (input ((the Concentration-Value input of Self))) (target-unit (*molar)))))) * (the1 of (the value of (the output of (a Unit-Conversion with (input ((the Volume-Value input of Self))) (target-unit (*liter))))))) *mole [Compute-Quantity-from-Concentration-and-Volume-output-1])))) else (a Quantity-Value)))))
(Compute-Quantitative-Minimum has 
    (superclasses (Method)))

(every Compute-Quantitative-Minimum has 
    (output ((allof (the input of Self) where ((the1 of (the value of It)) includes (the min of (allof2 (the1 of (the value of (the input of Self))) where (numberp It2))))))))
(Compute-Quantitative-Maximum has 
    (superclasses (Method)))

(every Compute-Quantitative-Maximum has 
    (output ((allof (the input of Self) where ((the1 of (the value of It)) includes (the max of (allof2 (the1 of (the value of (the input of Self))) where (numberp It2))))))))
(Compute-Qualitative-Minimum has 
    (superclasses (Method)))

(every Compute-Qualitative-Minimum has 
    (output (((?x == (allof (the input of Self) where ((the value of It) includes #'(LAMBDA () (LIST (FIND-SCALAR-MIN (KM0 '(the value of (the input of Self))))))))) and (if (((the number of ?x) > 1) and (not ((the input of Self) = ?x))) then (the output of (a Compute-Minimum with (input (?x)))) else ?x)))))
(Compute-Qualitative-Maximum has 
    (superclasses (Method)))

(every Compute-Qualitative-Maximum has 
    (output (((?x == (allof (the input of Self) where ((the value of It) includes #'(LAMBDA () (LIST (FIND-SCALAR-MAX (KM0 '(the value of (the input of Self))))))))) and (if (((the number of ?x) > 1) and (not ((the input of Self) = ?x))) then (the output of (a Compute-Maximum with (input (?x)))) else ?x)))))
(Compute-pH-for-Two-Solutions has 
    (superclasses (Method))
    (description ("given a solution with 2 bases (solutes), compute the pH value of the solution"))
    (test-case ('(((the1 of (the value of (the output of (a Compute-pH-for-Two-Solutions with (input ((a Aqueous-Solution with (base ((a HCl-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))) (a HNO3-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar)))))))))))))))) includes 0.69897) ((the1 of (the value of (the output of (a Compute-pH-for-Two-Solutions with (input ((a Aqueous-Solution with (base ((a NaOH-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))) (a Ca_OH_2-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.05 *molar)))))))))))))))) includes 13.30103) ((the1 of (the value of (the output of (a Compute-pH-for-Two-Solutions with (input ((a Aqueous-Solution with (base ((a HCl-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))) (a HF-Substance with (plays ((a Acid-Role with (ka ((a Equilibrium-Constant-Value with (value ((:pair 6.8E-4 nil))))))))) (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar)))))))))))))))) includes 0.9655873) ((the1 of (the value of (the output of (a Compute-pH-for-Two-Solutions with (input ((a Aqueous-Solution with (base ((a Ca_OH_2-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))) (a NH3-Substance with (plays ((a Base-Role with (kb ((a Equilibrium-Constant-Value with (value ((:pair 1.8E-5 nil))))))))) (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar)))))))))))))))) = 13.303934)))))

(every Compute-pH-for-Two-Solutions has 
    (input ((a Solution with (base ((a Chemical) (a Chemical))))))
    (output (((((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the base of (the input of Self))))))) = *strong) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the base of (the input of Self))))))) = *strong)) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X1 (FIRST (KM0 '(the1 of (the value of (the concentration of (the first of (the base of (the input of Self))))))))) (X2 (FIRST (KM0 '(the1 of (the value of (the concentration of (the second of (the base of (the input of Self)))))))))) (IF (NOT (NUMBERP X1)) (SETF X1 0)) (IF (NOT (NUMBERP X2)) (SETF X2 0)) (IF (EQUAL (+ X1 X2) 0) () (- 0 (/ (LOG (+ X1 X2)) (LOG 10)))))) ()))))))) && (((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the base of (the input of Self))))))) = *strong) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the base of (the input of Self))))))) = *strong)) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X1 (FIRST (KM0 '(the1 of (the value of (the concentration of (the Anion-Substance has-part of (the first of (the base of (the input of Self)))))))))) (X2 (FIRST (KM0 '(the1 of (the value of (the concentration of (the Anion-Substance has-part of (the second of (the base of (the input of Self))))))))))) (IF (NOT (NUMBERP X1)) (SETF X1 0)) (IF (NOT (NUMBERP X2)) (SETF X2 0)) (IF (EQUAL (+ X1 X2) 0) () (+ 14 (/ (LOG (+ X1 X2)) (LOG 10)))))) ()))))))) && (((if ((oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *strong))) and (oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak))) and (forall (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak)) (the value of (the ka of (the Acid-Role plays of It))))) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X1 (FIRST (KM0 '(forall (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *strong)) (the1 of (the value of (the concentration of It))))))) (X2 (FIRST (KM0 '(the output of (a Compute-Concentration-Change-Constant with (input ((a Hydrolysis with (raw-material (((oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak))) & (a Chemical called "Reactant"))))))))))))) (IF (NOT (NUMBERP X1)) (SETF X1 0)) (IF (NOT (NUMBERP X2)) (SETF X2 0)) (IF (EQUAL (+ X1 X2) 0) () (- 0 (/ (LOG (+ X1 X2)) (LOG 10)))))) ()))))))) && (((if ((oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *strong))) and (oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak))) and (forall (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak)) (the value of (the kb of (the Base-Role plays of It))))) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X1 (FIRST (KM0 '(forall (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *strong)) (the1 of (the value of (the concentration of (the Anion-Substance has-part of It)))))))) (X2 (FIRST (KM0 '(the output of (a Compute-Concentration-Change-Constant with (input ((a Hydrolysis with (raw-material (((oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak))) & (a Chemical called "Reactant"))))))))))))) (IF (NOT (NUMBERP X1)) (SETF X1 0)) (IF (NOT (NUMBERP X2)) (SETF X2 0)) (IF (EQUAL (+ X1 X2) 0) () (+ 14 (/ (LOG (+ X1 X2)) (LOG 10)))))) ()))))))) && (((if ((((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the base of (the input of Self))))))) = *weak)) and (((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the base of (the input of Self))))))) = *weak)) and (not (oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak) and (not (the value of (the kb of (the Base-Role plays of It)))))))) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X2 (FIRST (KM0 '(the output of (a Compute-Concentration-Change-Constant with (input ((a Hydrolysis with (raw-material (((oneof (the base of (the input of Self)) where ((the kb of (the Base-Role plays of It)) = (the output of (a Compute-Maximum with (input ((the kb of (the Base-Role plays of (the base of (the input of Self)))))))))) & (a Chemical called "Reactant"))))))))))))) (IF (NOT (NUMBERP X2)) (SETF X2 0)) (IF (EQUAL X2 0) () (+ 14 (/ (LOG X2) (LOG 10)))))) ()))))))) && (((if ((oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak))) and (oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak))) and (not (oneof (the base of (the input of Self)) where (((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak) and (not (the value of (the ka of (the Acid-Role plays of It)))))))) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X2 (FIRST (KM0 '(the output of (a Compute-Concentration-Change-Constant with (input ((a Hydrolysis with (raw-material (((oneof (the base of (the input of Self)) where ((the ka of (the Acid-Role plays of It)) = (the output of (a Compute-Maximum with (input ((the ka of (the Acid-Role plays of (the base of (the input of Self)))))))))) & (a Chemical called "Reactant"))))))))))))) (IF (NOT (NUMBERP X2)) (SETF X2 0)) (IF (EQUAL X2 0) () (- 0 (/ (LOG X2) (LOG 10)))))) ())))))))))))
(Compute-pH-for-Solution has 
    (superclasses (Method))
    (description ("given a solution, compute its PH")))

(every Compute-pH-for-Solution has 
    (input ((a Solution)))
    (output ((((if (((the number of (the base of (the input of Self))) = 1) and (oneof (the Equilibrium-Reaction raw-material-of of (the base of (the input of Self))) where (oneof2 (the result of It) where (((the has-basic-structural-unit of It2) isa H-Plus) or ((the has-basic-structural-unit of It2) isa H3O-Plus))))) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X (FIRST (KM0 '((the1 of (the value of (the equilibrium-concentration of (oneof (the result of (the Equilibrium-Reaction raw-material-of of (the base of (the input of Self)))) where (((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus)))))) or (the1 of (the value of (the output of (a Compute-Concentration-H-Plus with (input ((oneof (the Equilibrium-Reaction raw-material-of of (the base of (the input of Self))) where t)))))))))))) (IF (NULL X) () (- 0 (/ (LOG X) (LOG 10)))))) ())))) [Compute-pH-for-Solution-output-1])) && ((if (((the number of (the base of (the input of Self))) = 1) and (oneof (the Equilibrium-Reaction raw-material-of of (the base of (the input of Self))) where (oneof2 (the result of It) where ((the has-basic-structural-unit of It2) isa OH-Minus)))) then (a PH-Value with (value ((:pair #'(LAMBDA () (LET ((X (FIRST (KM0 '((the1 of (the value of (the equilibrium-concentration of (oneof (the Equilibrium-Reaction raw-material-of of (the base of (the input of Self))) where (oneof2 (the result of It) where ((the has-basic-structural-unit of It2) isa OH-Minus)))))) or (the1 of (the value of (the output of (a Compute-Concentration-OH-Minus with (input ((oneof (the Equilibrium-Reaction raw-material-of of (the base of (the input of Self))) where t)))))))))))) (IF (NULL X) () (- 0 (/ (LOG (/ 1.0E-14 X)) (LOG 10)))))) ())))) [Compute-pH-for-Solution-output-2]))))))
(Compute-pH-for-Basic-Buffer has 
    (superclasses (Method))
    (description ("given a basic buffer, compute its PH")))

(every Compute-pH-for-Basic-Buffer has 
    (input ((a Basic-Buffer)))
    (output ((((if ((has-value (the kb of (the plays of (the Base base of (the input of Self))))) and (has-value (the value of (the concentration of (the Base base of (the input of Self))))) and (has-value (the value of (the concentration of (the Salt-Substance base of (the input of Self)))))) then (a PH-Value with (value ((:pair ((14 - (0 - ((the log of (the1 of (the value of (the kb of (the plays of (the Base base of (the input of Self))))))) / (the log of 10)))) + ((the log of ((the1 of (the value of (the concentration of (the Salt-Substance base of (the input of Self))))) / (the1 of (the value of (the concentration of (the Base base of (the input of Self))))))) / (the log of 10))) ())))))) && ((if ((has-value (the default-kb of (the plays of (the Base base of (the input of Self))))) and (not (has-value (the kb of (the plays of (the Base base of (the input of Self)))))) and (has-value (the value of (the concentration of (the Base base of (the input of Self))))) and (has-value (the value of (the concentration of (the Salt-Substance base of (the input of Self)))))) then (a PH-Value with (value ((:pair ((14 - (0 - ((the log of (the1 of (the value of (the default-kb of (the plays of (the Base base of (the input of Self))))))) / (the log of 10)))) + ((the log of ((the1 of (the value of (the concentration of (the Salt-Substance base of (the input of Self))))) / (the1 of (the value of (the concentration of (the Base base of (the input of Self))))))) / (the log of 10))) ())))))) && ((if ((has-value (the kb of (the plays of (the Base base of (the input of Self))))) and (has-value (the value of (the quantity of (the Base base of (the input of Self))))) and (has-value (the value of (the quantity of (the Salt-Substance base of (the input of Self))))) and (not (has-value (the value of (the concentration of (the Base base of (the input of Self)))))) and (not (has-value (the value of (the concentration of (the Salt-Substance base of (the input of Self))))))) then (a PH-Value with (value ((:pair ((14 - (0 - ((the log of (the1 of (the value of (the kb of (the plays of (the Base base of (the input of Self))))))) / (the log of 10)))) + ((the log of ((the1 of (the value of (the quantity of (the Salt-Substance base of (the input of Self))))) / (the1 of (the value of (the quantity of (the Base base of (the input of Self))))))) / (the log of 10))) ()))))))))))
(Compute-pH-for-Acidic-Buffer has 
    (superclasses (Method))
    (description ("given an acidic buffer, compute its PH")))

(every Compute-pH-for-Acidic-Buffer has 
    (input ((a Acidic-Buffer)))
    (output ((((if ((has-value (the ka of (the plays of (the Acid base of (the input of Self))))) and (has-value (the value of (the concentration of (the Acid base of (the input of Self))))) and (has-value (the value of (the concentration of (the Salt-Substance base of (the input of Self)))))) then (a PH-Value with (value ((:pair ((0 - ((the log of (the1 of (the value of (the ka of (the plays of (the Acid base of (the input of Self))))))) / (the log of 10))) + ((the log of ((the1 of (the value of (the concentration of (the Salt-Substance base of (the input of Self))))) / (the1 of (the value of (the concentration of (the Acid base of (the input of Self))))))) / (the log of 10))) ())))))) && ((if ((has-value (the default-ka of (the plays of (the Acid base of (the input of Self))))) and (not (has-value (the ka of (the plays of (the Acid base of (the input of Self)))))) and (has-value (the value of (the concentration of (the Acid base of (the input of Self))))) and (has-value (the value of (the concentration of (the Salt-Substance base of (the input of Self)))))) then (a PH-Value with (value ((:pair ((0 - ((the log of (the1 of (the value of (the default-ka of (the plays of (the Acid base of (the input of Self))))))) / (the log of 10))) + ((the log of ((the1 of (the value of (the concentration of (the Salt-Substance base of (the input of Self))))) / (the1 of (the value of (the concentration of (the Acid base of (the input of Self))))))) / (the log of 10))) ())))))) && ((if ((has-value (the ka of (the plays of (the Acid base of (the input of Self))))) and (has-value (the value of (the quantity of (the Acid base of (the input of Self))))) and (has-value (the value of (the quantity of (the Salt-Substance base of (the input of Self))))) and (not (has-value (the value of (the concentration of (the Acid base of (the input of Self)))))) and (not (has-value (the value of (the concentration of (the Salt-Substance base of (the input of Self))))))) then (a PH-Value with (value ((:pair ((0 - ((the log of (the1 of (the value of (the ka of (the plays of (the Acid base of (the input of Self))))))) / (the log of 10))) + ((the log of ((the1 of (the value of (the quantity of (the Salt-Substance base of (the input of Self))))) / (the1 of (the value of (the quantity of (the Acid base of (the input of Self))))))) / (the log of 10))) ()))))))))))
(Compute-Oxidation-State-a has 
    (superclasses (Method)))

(every Compute-Oxidation-State-a has 
    (input ((a Chemical-Entity)))
    (output ((((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) where (It = F) (:pair -1 F) [Compute-Oxidation-State-a-output-1])) && ((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) where ((oneof2 (the all-subclasses of Alkali-Metal-Element) where (It = It2)) and (It /= H)) (:pair 1 It) [Compute-Oxidation-State-a-output-2])) && ((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) where ((oneof2 (the all-subclasses of Alkaline-Earth-Metal-Element) where (It = It2)) or (oneof2 (the all-subclasses of IIA-Element) where (It = It2))) (:pair 2 It) [Compute-Oxidation-State-a-output-3])) && ((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) where (It = H) (if (not (((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) = 2) and (oneof2 (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((((the2 of It2) is-subsumed-by Alkali-Metal-Element) and ((the2 of It2) /= H)) or ((the2 of It2) is-subsumed-by Alkaline-Earth-Metal-Element) or ((the2 of It2) is-subsumed-by IIA-Element))))) then (:pair 1 H) else (:pair -1 H)) [Compute-Oxidation-State-a-output-4])) && ((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) where ((oneof2 (the all-subclasses of Halogen-Element) where (It = It2)) and (It /= F) and (not (oneof2 (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((the2 of It2) = O))) and ((the number of (allof2 (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((the2 of It2) is-subsumed-by Halogen-Element))) = 1)) (:pair -1 It) [Compute-Oxidation-State-a-output-5]))))))
(Compute-Oxidation-State has 
    (superclasses (Method))
    (test-case ('(((the value of (the output of (a Compute-Oxidation-State with (input ((a Ionic-Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 O))))))))))))) = (:set (:pair 1 H) (:pair -2 O))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a SO4-Minus-2 with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 S) (:pair 4 O))))))))))))) = (:set (:pair -2 O) (:pair 6 S))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a NaHCO3 with (charge ((a Charge-Value with (value ((:pair 0 *electronic-charge)))))))))))) = (:set (:pair 1 Na) (:pair 1 H) (:pair -2 O) (:pair 4 C))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Ionic-Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 1 Se))))))))))))) = (:set (:pair 1 H) (:pair -2 Se))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 O) (:pair 2 F))))))))))))) = (:set (:pair -1 F) (:pair 1 O))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Se) (:pair 6 F))))))))))))) = (:set (:pair -1 F) (:pair 6 Se))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 F))))))))))))) = (:set (:pair 1 H) (:pair -1 F))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 O))))))))))))) = (:set (:pair 0 O))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 Cl) (:pair 3 O))))))))))))) = (:set (:pair 1 H) (:pair -2 O) (:pair 5 Cl))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na) (:pair 1 I) (:pair 3 O))))))))))))) = (:set (:pair 1 Na) (:pair -2 O) (:pair 5 I))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H) (:pair 1 I))))))))))))) = (:set (:pair 1 H) (:pair -1 I))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca) (:pair 2 H))))))))))))) = (:set (:pair 2 Ca) (:pair -1 H))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Cation with (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge)))))) (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 N) (:pair 4 H))))))))))))) = (:set (:pair 1 H) (:pair -3 N))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 2 C) (:pair 4 O))))))))))))) = (:set (:pair 1 H) (:pair -2 O) (:pair 3 C))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 N) (:pair 1 O))))))))))))) = (:set (:pair -2 O) (:pair 1 N))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 K) (:pair 2 O))))))))))))) = (:set (:pair 1 K) (:pair -1/2 O))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Sn) (:pair 4 Br))))))))))))) = (:set (:pair 4 Sn) (:pair -1 Br))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 S) (:pair 2 Cl))))))))))))) = (:set (:pair 2 S) (:pair -1 Cl))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 H) (:pair 2 O))))))))))))) = (:set (:pair 1 H) (:pair -1 O))) ((the value of (the output of (a Compute-Oxidation-State with (input ((a Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 Ca) (:pair 2 P) (:pair 8 O))))))))))))) = (:set (:pair 2 Ca) (:pair -2 O) (:pair 5 P))) ((the value of (the oxidation-state of (a Ionic-Compound with (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Mn-Plus-2) (:pair 1 SO4-Minus-2)))))))))) = (:set (:pair 2 Mn) (:pair -2 O) (:pair 6 S)))))))

(every Compute-Oxidation-State has 
    (input ((a Chemical-Entity)
            (exactly 1 Chemical-Entity)))
    (context ((the output of (a Compute-Oxidation-State-a with (input ((the input of Self)))))))
    (output ((((if ((the input of Self) isa VOCl) then (a Oxidation-State-Value with (value ((:set (:pair 3 V) (:pair -2 O) (:pair -1 Cl))))) [Compute-Oxidation-State-output-0])) && ((if ((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) = 1) then ((a Oxidation-State-Value with (value ((:set (:pair (the1 of (the value of (the charge of (the input of Self)))) (the2 of (the1 of (the term of (the atomic-chemical-formula of (the input of Self))))))))))) [Compute-Oxidation-State-output-1])) && ((if (((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) > 1) and ((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) = (the number of (the context of Self)))) then (a Oxidation-State-Value with (value ((the context of Self)))) [Compute-Oxidation-State-output-2])) && ((if (((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) > 1) and ((the number of (the context of Self)) = ((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) - 2)) and (oneof (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((the2 of It) = O))) then (a Oxidation-State-Value with (value ((:set (the context of Self) (:pair -2 O) (:pair (((the1 of (the value of (the charge of (the input of Self)))) - (the sum of (forall-bag (the bag of (the context of Self)) ((the1 of It) * (forall2 (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((the2 of It2) = (the2 of It)) (the1 of It2))))) - (-2 * (the1 of (oneof (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((the2 of It) = O))))) / (forall (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2)))) and ((the2 of It) /= O)) (the1 of It))) (forall (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2)))) and ((the2 of It) /= O)) (the2 of It))))))) [Compute-Oxidation-State-output-3])) && ((if (((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) > 1) and ((the number of (the context of Self)) = ((the number of (the elements of (the term of (the atomic-chemical-formula of (the input of Self))))) - 1))) then (a Oxidation-State-Value with (value ((:set (the context of Self) (:pair (((the1 of (the value of (the charge of (the input of Self)))) - (the sum of (forall-bag (the bag of (the context of Self)) ((the1 of It) * (forall2 (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where ((the2 of It2) = (the2 of It)) (the1 of It2)))))) / (forall (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where (not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2)))) (the1 of It))) (forall (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) where (not (oneof2 (the context of Self) where ((the2 of It) = (the2 of It2)))) (the2 of It))))))) [Compute-Oxidation-State-output-4]))))))
(Compute-Nested-Formula-from-Has-Chemical-Formula has 
    (superclasses (Method)))

(every Compute-Nested-Formula-from-Has-Chemical-Formula has 
    (input ((a Chemical-Formula)))
    (output ((a Chemical-Formula with (term (#'(LAMBDA () (COMPOSE-COMPONENT-STRUCTURES (KM-UNIQUE0 '(the1 of (the1 of (the term of (the input of Self))))) (KM-UNIQUE0 '(the atomic-chemical-formula of (the2 of (the1 of (the term of (the input of Self)))))) (KM-UNIQUE0 '(the1 of (the2 of (the term of (the input of Self))))) (KM-UNIQUE0 '(the atomic-chemical-formula of (the2 of (the2 of (the term of (the input of Self))))))))))))))
(Compute-Nested-Atomic-Formula-from-Formula has 
    (superclasses (Method)))

(every Compute-Nested-Atomic-Formula-from-Formula has 
    (input ((a Chemical-Formula)))
    (output ((a Chemical-Formula with (term ((#'(LAMBDA () (LET* ((TERMS (KM-UNIQUE0 '(the term of (the input of Self)))) (C1 (IF TERMS (KM-UNIQUE0 (BACKQUOTE (the1 of (the1 of (UNQUOTE TERMS))))))) (F1 (IF TERMS (KM-UNIQUE0 (BACKQUOTE (the term of (the nested-atomic-chemical-formula of (an instance of (the2 of (the1 of (UNQUOTE TERMS)))))))))) (C2 (IF TERMS (KM-UNIQUE0 (BACKQUOTE (the1 of (the2 of (UNQUOTE TERMS))))))) (F2 (IF TERMS (KM-UNIQUE0 (BACKQUOTE (the term of (the nested-atomic-chemical-formula of (an instance of (the2 of (the2 of (UNQUOTE TERMS))))))))))) (IF (AND C1 F1 C2 F2) (COMPOSE-COMPONENT-STRUCTURES C1 F1 C2 F2)))))))))))
(Compute-Molecular-Compound-from-Formula has 
    (superclasses (Method)))

(every Compute-Molecular-Compound-from-Formula has 
    (output ((a Molecular-Compound with (has-part ((an instance of (the2 of (the1 of (the input of Self)))) (an instance of (the2 of (the2 of (the input of Self)))))) (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((the input of Self)))))) (atomic-chemical-formula ((a Chemical-Formula with (term ((the input of Self)))))) (has-chemical-formula ((a Chemical-Formula with (term ((the input of Self)))))) (has-chemical-name ((#'(LAMBDA () (COMPUTE-TWO-COMPONENT-MOLECULE-NAME (KM-UNIQUE0 '(the1 of (the1 of (the input of Self)))) (GET-DB 'SYMBOL (STRING (KM-UNIQUE0 '(the2 of (the1 of (the input of Self))))) 'NAME) (KM-UNIQUE0 '(the1 of (the2 of (the input of Self)))) (KM-UNIQUE0 '(the has-molecular-name of (an instance of (the2 of (the2 of (the input of Self)))))))))))))))
(Compute-Molecular-Compound-from-Chemical-Name has 
    (superclasses (Method)))

(every Compute-Molecular-Compound-from-Chemical-Name has 
    (output ((a Molecular-Compound with (has-part ((:set (an instance of (the2 of (the1 of (#'(LAMBDA () (SPLIT-MOLECULAR-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))) (an instance of (the2 of (the2 of (#'(LAMBDA () (SPLIT-MOLECULAR-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))) (has-chemical-formula ((a Chemical-Formula with (term ((#'(LAMBDA () (SPLIT-MOLECULAR-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))))) (nested-atomic-chemical-formula ((the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((a Chemical-Formula with (term ((#'(LAMBDA () (SPLIT-MOLECULAR-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))))))))) (atomic-chemical-formula ((the output of (a Compute-Atomic-Formula-from-Nested-Formula with (input ((the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((a Chemical-Formula with (term ((#'(LAMBDA () (SPLIT-MOLECULAR-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))))))))))))))
(Compute-Mole-from-Weight-and-Chemical has 
    (superclasses (Method)))

(every Compute-Mole-from-Weight-and-Chemical has 
    (mole-weight ((the output of (a Compute-Atomic-Weight-from-Chemical with (input ((the2 of (the input of Self))))))))
    (output ((a Quantity-Value with (value ((:pair ((the1 of (the value of (the1 of (the input of Self)))) / (the1 of (the value of (the mole-weight of Self)))) *mole)))))))
(Compute-Minimum has 
    (superclasses (Method))
    (description ("given a list of values, return the minimum value")))

(every Compute-Minimum has 
    (output ((#'(LAMBDA () (FIND-MIN-VALUE (KM0 '(the input of Self))))))))
(Compute-Maximum has 
    (superclasses (Method))
    (description ("given a list of values, return the maximum")))

(every Compute-Maximum has 
    (output ((#'(LAMBDA () (FIND-MAX-VALUE (KM0 '(the input of Self))))))))
(Compute-Ionization-Percentage has 
                                                
    (superclasses (Method))
    (description ("given a chemical, compute the percentage of the chemical being ionized")))

(every Compute-Ionization-Percentage has 
    (input ((a Chemical)))
    (output ((((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the input of Self))))) = *strong) or ((the1 of (the value of (the intensity of (the Base-Role plays of (the input of Self))))) = *strong)) then 100 [Compute-Ionization-Percentage-output-1])) && ((if ((oneof (the raw-material-of of (the input of Self)) where (It isa Hydrolysis)) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the input of Self))))) /= *strong) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the input of Self))))) /= *strong)) then (((the output of (a Compute-Concentration-Change-Constant with (input ((the raw-material-of of (the input of Self)))))) / (the1 of (the value of (the concentration of (the input of Self))))) * 100) [Compute-Ionization-Percentage-output-2]))))))
(Compute-Ionic-Compound-Parts-from-Nested-Formula has 
    (superclasses (Method)))

(every Compute-Ionic-Compound-Parts-from-Nested-Formula has 
    (output (#'(LAMBDA () (COMPUTE-IC-PARTS-FROM-NESTED-FORMULA (KM-UNIQUE0 '(the input of Self)))))))
(Compute-Ionic-Compound-from-Formula has 
    (superclasses (Method)))

(every Compute-Ionic-Compound-from-Formula has 
    (has-part ((if ((allof (the has-part of Self) where (not (has-value (the term of (the has-chemical-formula of It))))) and (has-value (the nested-atomic-chemical-formula of Self))) then (the output of (a Compute-Ionic-Compound-Parts-from-Nested-Formula with (input ((the input of Self))))))))
    (has-chemical-formula ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((the Cation has-part of Self) (the Anion has-part of Self)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((the input of Self))))))
    (output ((a Ionic-Compound with (has-part ((the has-part of Self))) (has-chemical-formula ((the has-chemical-formula of Self))) (nested-atomic-chemical-formula ((the nested-atomic-chemical-formula of Self))) (atomic-chemical-formula ((the output of (a Compute-Atomic-Formula-from-Nested-Formula with (input ((the nested-atomic-chemical-formula of Self))))))) (has-chemical-name ((the output of (a Compute-Chemical-Name-from-Formula-of-Ionic-Compound with (input ((the term of (the has-chemical-formula of Self))))))))))))
(Compute-Ionic-Compound-from-Chemical-Name has 
    (superclasses (Method)))

(every Compute-Ionic-Compound-from-Chemical-Name has 
    (output ((a Ionic-Compound with (has-part ((:set (an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the2 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))) (an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))))))))) (has-chemical-formula ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the2 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))) (an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))))))))) (nested-atomic-chemical-formula ((the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the2 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))) (an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))))))))))))) (atomic-chemical-formula ((the output of (a Compute-Atomic-Formula-from-Nested-Formula with (input ((the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the2 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))) (an instance of (the output of (a Compute-Chemical-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))))))))))))))))))))))))
(Compute-Hydrolysis-Result has 
    (superclasses (Method))
    (test-case ('(((the has-basic-structural-unit of (the second of (the output of (a Compute-Hydrolysis-Result with (input ((a NH3-Substance))))))) isa NH4-Plus) ((the term of (the has-chemical-formula of (the has-basic-structural-unit of (the second of (the output of (a Compute-Hydrolysis-Result with (input ((a Chemical with (has-basic-structural-unit ((a HCO3-Minus)))))))))))) = (:seq (:pair 1 C) (:pair 3 O))) ((the term of (the has-chemical-formula of (the has-basic-structural-unit of (the second of (the output of (a Compute-Hydrolysis-Result with (input ((a HCl-Substance))))))))) = (:seq (:pair 1 Cl-Minus))) ((the term of (the has-chemical-formula of (the has-basic-structural-unit of (the second of (the output of (a Compute-Hydrolysis-Result with (input ((a Chemical with (has-basic-structural-unit ((a CO3-Minus-2)))))))))))) = (:seq (:pair 1 H-Plus) (:pair 1 C) (:pair 3 O))) ((the second of (the output of (a Compute-Hydrolysis-Result with (input ((a Chemical with (has-basic-structural-unit ((a Cl-Minus))))))))) isa HCl-Substance)))))

(every Compute-Hydrolysis-Result has 
    (input ((a Chemical)))
    (output ((((if ((the input of Self) isa NH3-Substance) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a Cation-Substance with (has-basic-structural-unit ((a NH4-Plus))))) [Compute-Hydrolysis-Result-output-1])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa Cl-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a HCl-Substance)) [Compute-Hydrolysis-Result-output-2])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa NO3-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a HNO3-Substance)) [Compute-Hydrolysis-Result-output-3])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa F-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a HF-Substance)) [Compute-Hydrolysis-Result-output-4])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa CH3COO-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a HC2H3O2-Substance)) [Compute-Hydrolysis-Result-output-5])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa HS-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a H2S-Substance)) [Compute-Hydrolysis-Result-output-6])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa H-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a H2-Substance)) [Compute-Hydrolysis-Result-output-7])) && ((if (((the input of Self) isa Anion-Substance) and ((the has-basic-structural-unit of (the input of Self)) isa CH3-Minus)) then (:set (a Anion-Substance with (has-basic-structural-unit ((a OH-Minus)))) (a CH4-Substance)) [Compute-Hydrolysis-Result-output-8])) && ((if ((not ((the has-basic-structural-unit of (the input of Self)) and (oneof (:set Cl-Minus NO3-Minus F-Minus CH3COO-Minus HS-Minus H-Minus CH3-Minus) where ((the has-basic-structural-unit of (the input of Self)) isa It)))) and (not ((the input of Self) isa NH3-Substance)) and (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self))))) where ((the2 of It) = H-Plus))) then (:set (a Chemical with (has-basic-structural-unit ((a H3O-Plus)))) (a Chemical with (has-basic-structural-unit ((a Chemical-Entity with (charge ((if (the1 of (the value of (the charge of (the has-basic-structural-unit of (the input of Self))))) then (a Charge-Value with (value ((:pair ((the1 of (the value of (the charge of (the has-basic-structural-unit of (the input of Self))))) - 1) *electronic-charge))))))) (has-chemical-formula ((a Chemical-Formula with (term ((if (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self))))) where (((the2 of It) = H-Plus) and ((the1 of It) = 1))) then (forall-seq (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self)))) where (((the2 of It) /= H-Plus) or ((the1 of It) /= 1)) It) else (forall-seq (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self)))) (if ((the2 of It) = H-Plus) then (:pair ((the1 of It) - 1) H-Plus) else It))))))))))))) [Compute-Hydrolysis-Result-output-9])) && ((if ((not ((the has-basic-structural-unit of (the input of Self)) and (oneof (:set Cl-Minus NO3-Minus F-Minus CH3COO-Minus HS-Minus H-Minus CH3-Minus) where ((the has-basic-structural-unit of (the input of Self)) isa It)))) and (not ((the input of Self) isa NH3-Substance)) and (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self))))) where ((the2 of It) = H))) then (:set (a Chemical with (has-basic-structural-unit ((a H3O-Plus)))) (a Chemical with (has-basic-structural-unit ((a Chemical-Entity with (charge ((if (the1 of (the value of (the charge of (the has-basic-structural-unit of (the input of Self))))) then (a Charge-Value with (value ((:pair ((the1 of (the value of (the charge of (the has-basic-structural-unit of (the input of Self))))) - 1) *electronic-charge))))))) (has-chemical-formula ((a Chemical-Formula with (term ((if (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self))))) where (((the2 of It) = H) and ((the1 of It) = 1))) then (forall-seq (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self)))) where (((the2 of It) /= H) or ((the1 of It) /= 1)) It) else (forall-seq (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self)))) (if ((the2 of It) = H) then (:pair ((the1 of It) - 1) H) else It))))))))))))) [Compute-Hydrolysis-Result-output-10])) && ((if ((not ((the has-basic-structural-unit of (the input of Self)) and (oneof (:set Cl-Minus HSO4-Minus NO3-Minus H2PO4-Minus F-Minus CH3COO-Minus HCO3-Minus HS-Minus H-Minus CH3-Minus) where ((the has-basic-structural-unit of (the input of Self)) isa It)))) and (not ((the input of Self) isa NH3-Substance)) and (not (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self))))) where (((the2 of It) = H-Plus) or ((the2 of It) = H))))) then (:set (a Chemical with (has-basic-structural-unit ((a OH-Minus)))) (a Chemical with (has-basic-structural-unit ((a Chemical-Entity with (charge ((if (the1 of (the value of (the charge of (the has-basic-structural-unit of (the input of Self))))) then (a Charge-Value with (value ((:pair ((the1 of (the value of (the charge of (the has-basic-structural-unit of (the input of Self))))) + 1) *electronic-charge))))))) (has-chemical-formula ((a Chemical-Formula with (term ((the append of (:seq (:seq (:pair 1 H-Plus)) (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the input of Self)))))))))))))))) [Compute-Hydrolysis-Result-output-11]))))))
(Compute-Hydrolysis-of-Salt-Result has 
    (superclasses (Method))
    (test-case ('((*H1 has (instance-of (Compute-Hydrolysis-of-Salt-Result)) (input ((a Chemical with (has-basic-structural-unit ((a Salt with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na) (:pair 1 Cl) (:pair 1 O)))))))))))))) (oneof (the output of *H1) where ((the has-basic-structural-unit of It) isa OH-Minus)) (oneof (the output of *H1) where ((the has-basic-structural-unit of It) isa Na-Plus)) (oneof (the output of *H1) where (It isa Acid)) (*H2 has (instance-of (Compute-Hydrolysis-of-Salt-Result)) (input ((a Chemical with (has-basic-structural-unit ((a Salt with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 N) (:pair 3 H) (:pair 1 Cl)))))))))))))) (oneof (the output of *H2) where ((the has-basic-structural-unit of It) isa H3O-Plus)) (oneof (the output of *H2) where ((the has-basic-structural-unit of It) isa Cl-Minus)) (oneof (the output of *H2) where (It isa CH3NH2-Substance)) (*H3 has (instance-of (Compute-Hydrolysis-of-Salt-Result)) (input ((a Chemical with (has-basic-structural-unit ((a Ionic-Compound with (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Fe) (:pair 3 (:seq (:pair 1 N) (:pair 3 O))))))))))))))))))))

(every Compute-Hydrolysis-of-Salt-Result has 
    (input ((a Salt-Substance)))
    (output (((?cation-subst == (the Cation-Substance has-part of (the input of Self))) and (?anion-subst == (the Anion-Substance has-part of (the input of Self))) and (?salt-solution == (the+ Salt-Solution base-of of (the input of Self))) and (?pH == (the pH of ?salt-solution)) and (?cation-hbsu == (the has-basic-structural-unit of ?cation-subst)) and (?cation-hbsu-chf == (the has-chemical-formula of ?cation-hbsu)) and (if ((the input of (the output-of of ?pH)) includes ?cation-subst) then (if (((has-value ?cation-hbsu-chf) and (?cation-elem == (an instance of (the2 of (the1 of (the term of ?cation-hbsu-chf))))) and ((the number of (the elements of (the term of ?cation-hbsu-chf))) = 1) and (?cation-elem isa Metal-Atom))) then (:set (a Ionic-Substance with (has-part (?cation-subst (a Chemical with (has-basic-structural-unit ((a Chemical with (has-basic-structural-unit ((a OH-Minus)))))))))) ?anion-subst (a Chemical with (has-basic-structural-unit ((a H-Plus))))) else (if (((the number of (the elements of (the term of ?cation-hbsu-chf))) > 1) and (oneof (the elements of (the term of ?cation-hbsu-chf)) where (((the2 of It) = H) and (the1 of It) >= 1))) then (:set (the complement of (a Conjugate-Acid-Base-Pair with (element (?cation-subst)))) ?anion-subst (a Cation-Substance with (has-basic-structural-unit ((a H3O-Plus))))))) else (if ((the input of (the output-of of ?pH)) includes ?anion-subst) then (:set ?cation-substance (a Acid with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a H-Plus) (the has-basic-structural-unit of ?anion-subst))))))) (a Chemical with (has-basic-structural-unit ((a OH-Minus)))))))))))
(Compute-Equilibrium-Position has 
    (superclasses (Method)))

(every Compute-Equilibrium-Position has 
    (input ((a Reaction)))
    (output ((((if (((the input of Self) isa Equilibrium-Reaction) and (has-value (the1 of (the value of (the keq of (the input of Self)))))) then (if ((the1 of (the value of (the keq of (the input of Self)))) > 1) then (the result of (the input of Self)) else (the raw-material of (the input of Self))) [Compute-Equilibrium-Position-output-1])) && ((if ((not (the1 of (the value of (the keq of (the input of Self))))) and (oneof (the raw-material of (the input of Self)) where (the Acid-Role plays of It)) and (oneof (the result of (the input of Self)) where (the Acid-Role plays of It)) and (oneof (the raw-material of (the input of Self)) where (the Base-Role plays of It)) and (oneof (the result of (the input of Self)) where (the Base-Role plays of It))) then (if (((the output of (a Compare-Relative-Strengths-of-Acids with (input ((oneof (the raw-material of (the input of Self)) where (the Acid-Role plays of It)) (oneof (the result of (the input of Self)) where (the Acid-Role plays of It)))))) = (oneof (the raw-material of (the input of Self)) where (the Acid-Role plays of It))) and ((the output of (a Compare-Relative-Strengths-of-Bases with (input ((oneof (the raw-material of (the input of Self)) where (the Base-Role plays of It)) (oneof (the result of (the input of Self)) where (the Base-Role plays of It)))))) = (oneof (the raw-material of (the input of Self)) where (the Base-Role plays of It)))) then (the result of (the input of Self)) else (the raw-material of (the input of Self))) [Compute-Equilibrium-Position-output-2]))))))
(Compute-Equilibrium-Expression has 
    (superclasses (Method)))

(every Compute-Equilibrium-Expression has 
    (input ((a Equilibrium-Reaction)))
    (output ((a Equilibrium-Constant-Expression with (term ((:pair (forall (the result of (the input of Self)) (:pair ((the1 of (the value of (the coefficient of It))) or 1) It)) (forall (if (((the input of Self) isa Hydrolysis) or ((the input of Self) isa Complete-Dissociation-Reaction)) then ((the raw-material of (the input of Self)) called "Reactant") else (the raw-material of (the input of Self))) (:pair ((the1 of (the value of (the coefficient of It))) or 1) It))))) [Compute-Equilibrium-Expression-output-1]))))
(Compute-Equilibrium-Constant has 
    (superclasses (Method)))

(every Compute-Equilibrium-Constant has 
    (input ((a Equilibrium-Reaction)))
    (output (#'(LAMBDA () (CALC-EQUILIBRIUM-CONSTANT (KM0 '(the term of (the keq-expression of (the input of Self)))) (FIRST (KM0 '(the output of (a Compute-Concentration-Change-Constant with (input ((the input of Self))))))) (KM0 '(the instance-of of (the input of Self)))) [Compute-Equilibrium-Constant-output-1]))))
(Compute-Element-from-Name has 
    (superclasses (Method)))

(every Compute-Element-from-Name has 
    (output (#'(LAMBDA () (LET ((RESULT (INTERN (GET-DB 'NAME (STRING-CAPITALIZE (KM-UNIQUE0 '(the input of Self))) 'SYMBOL) :KM))) (WHEN (CLASSP RESULT) (LIST RESULT)))))))
(Compute-Element-from-Molecular-Name has 
    (superclasses (Method)))

(every Compute-Element-from-Molecular-Name has 
    (output ((oneof (the all-subclasses of Atom) where ((the has-molecular-name of It) = (the input of Self))))))
(Compute-Electrolyte-Status has 
    (superclasses (Method)))

(every Compute-Electrolyte-Status has 
    (output ((((if ((has-value (the input of Self)) and (((the1 of (the value of (the intensity of (the Base-Role plays of (the input of Self))))) = *weak) or ((the1 of (the value of (the intensity of (the Acid-Role plays of (the input of Self))))) = *weak))) then (a Electrolyte-Status-Value with (value ((:pair *weak nil)))) [Compute-Electrolyte-Status-output-1])) && ((if ((has-value (the input of Self)) and (((the1 of (the value of (the intensity of (the Base-Role plays of (the input of Self))))) = *strong) or ((the1 of (the value of (the intensity of (the Acid-Role plays of (the input of Self))))) = *strong))) then (a Electrolyte-Status-Value with (value ((:pair *strong nil)))) [Compute-Electrolyte-Status-output-2])) && ((if ((has-value (the input of Self)) and ((the input of Self) isa Salt-Substance) and ((the1 of (the value of (the solubility of (the input of Self)))) /= *insoluble)) then (a Electrolyte-Status-Value with (value ((:pair *strong nil)))) [Compute-Electrolyte-Status-output-3])) && ((if ((has-value (the input of Self)) and ((not ((the input of Self) isa Salt-Substance)) or ((the1 of (the value of (the solubility of (the input of Self)))) = *insoluble)) and (not (the value of (the intensity of (the Base-Role plays of (the input of Self))))) and (not (the value of (the intensity of (the Acid-Role plays of (the input of Self)))))) then (a Electrolyte-Status-Value with (value ((:pair *non nil)))) [Compute-Electrolyte-Status-output-4]))))))
(Compute-Effect-of-Hydrolysis-of-Ions has 
    (superclasses (Method))
    (test-case ('((*Cation-Subst has (instance-of (Cation-Substance)) (has-basic-structural-unit ((a Na-Plus)))) (*Anion-Subst has (instance-of (Anion-Substance)) (has-basic-structural-unit ((a CO3-Minus-2)))) (*Salt-Sol has (instance-of (Salt-Solution)) (base ((a Salt-Substance with (has-basic-structural-unit ((a Na2CO3))) (has-part (*Cation-Subst *Anion-Subst)) (concentration ((a Concentration-Value with (value ((:pair 1 *molar)))))))))) (*C1 has (instance-of (Compute-Effect-of-Hydrolysis-of-Ions)) (input (*Salt-Sol *Cation-Subst))) (*C2 has (instance-of (Compute-Effect-of-Hydrolysis-of-Ions)) (input (*Salt-Sol *Anion-Subst))) ((the to-value-of of (the output of *C2)) isa Increase) (*C3 has (instance-of (Compute-Effect-of-Hydrolysis-of-Ions)) (input ((a Aqueous-Solution) (a CH3COO-Minus-Substance)))) ((the to-value-of of (the output of *C3)) isa Increase)))))

(every Compute-Effect-of-Hydrolysis-of-Ions has 
    (input ((a Salt-Solution)
            (a Ionic-Substance)))
    (output (((((?ion == (the Ionic-Substance input of Self)) and (?salt == (the Salt-Solution input of Self)) and (if ((has-value (the1 of (the value of (the concentration of ?ion)))) and (has-value (the plays of ?ion)) and (((?ion isa Cation-Substance) and (numberp (the1 of (the value of ((the ka of (the+ Acid-Role plays of ?ion)) or (the default-ka of (the+ Acid-Role plays of ?ion))))))) or ((?ion isa Anion-Substance) and (numberp (the1 of (the value of ((the kb of (the+ Base-Role plays of ?ion)) or (the default-kb of (the+ Base-Role plays of ?ion))))))))) then (the pH of (a Solution with (base (((a Chemical called "Reactant" with (raw-material-of ((a Hydrolysis)))) & ?ion)))))))) && (((?ion == (the Ionic-Substance input of Self)) and (?ion-hbsu == (the has-basic-structural-unit of ?ion)) and (?ion-hbsu-class == (the instance-of of ?ion-hbsu)) and (?ion-hbsu-chf == (the has-chemical-formula of ?ion-hbsu)) and (?ion-elem == (if (has-value ?ion-hbsu-chf) then (an instance of (the2 of (the1 of (the term of ?ion-hbsu-chf)))))) and (if ((?ion isa Cation-Substance) and (has-value ?ion-hbsu-chf) and ((the number of (the elements of (the term of ?ion-hbsu-chf))) = 1) and (?ion-elem isa Metal-Atom) and (not (?ion-elem isa Alkali-Metal-Element)) and (not (?ion-hbsu-class includes Ca-Plus-2)) and (not (?ion-hbsu-class includes Sr-Plus-2)) and (not (?ion-hbsu-class includes Ba-Plus-2))) then (a PH-Value with (to-value-of ((a Decrease with (property-slot (pH))))))))) && (((?ion == (the Ionic-Substance input of Self)) and (?ion-hbsu == (the has-basic-structural-unit of ?ion)) and (?ion-hbsu-chf == (the has-chemical-formula of ?ion-hbsu)) and (if ((?ion isa Cation-Substance) and (has-value ?ion-hbsu-chf) and ((the number of (the elements of (the term of ?ion-hbsu-chf))) > 1) and (oneof (the elements of (the term of ?ion-hbsu-chf)) where (((the2 of It) = H) and (the1 of It) >= 1))) then (a PH-Value with (to-value-of ((a Decrease with (property-slot (pH))))))))) && (((?ion == (the Ionic-Substance input of Self)) and (?ion-conj-acid == (the complement of (a Conjugate-Acid-Base-Pair with (element (?ion))))) and (if ((?ion isa Anion-Substance) and (has-value ?ion-conj-acid) and (?ion-conj-acid /= "none")) then (if ((the1 of (the value of (the intensity of (the+ Acid-Role plays of ?ion-conj-acid)))) = *weak) then (a PH-Value with (to-value-of ((a Increase with (property-slot (pH)))))) else nil)))) && (((?ion == (the Ionic-Substance input of Self)) and (?ion-hbsu == (the has-basic-structural-unit of ?ion)) and (?ion-hbsu-chf == (the has-chemical-formula of ?ion-hbsu)) and (?acid == (a Acid with (has-basic-structural-unit ((a Chemical-Entity with (has-part ((a H-Plus) (the output of (a Identify-Chemical-Entity with (nested-atomic-chemical-formula ((a Chemical-Formula with (term (forall-seq (the term of ?ion-hbsu-chf) where ((the2 of It) /= H) It)))))))))))))) and (?is-int-prod == (forall-seq (the term of ?ion-hbsu-chf) where ((the2 of It) = H) It)) and (if ((?ion isa Anion-Substance) and (?acid isa Polyprotic-Acid) and (has-value ?is-int-prod)) then (if ((has-value (the plays of ?ion)) then (if ((the1 of (the value of ((the ka of (the+ Acid-Role plays of ?ion)) or (the default-ka of (the+ Acid-Role plays of ?ion))))) > (the1 of (the value of ((the kb of (the+ Base-Role plays of ?ion)) or (the default-kb of (the+ Base-Role plays of ?ion)))))) then (a PH-Value with (to-value-of ((a Decrease with (property-slot (pH)))))) else (a PH-Value with (to-value-of ((a Increase with (property-slot (pH))))))))))))))))
(Compute-Dissociation-Percentage has 
    (superclasses (Compute-Ionization-Percentage)))
(Compute-Conjugate-Base has 
    (superclasses (Method))
    (test-case ('(((the output of (an instance of Compute-Conjugate-Base with (input ((a H2SO4-Substance))))) isa HSO4-Minus-Substance)))))

(every Compute-Conjugate-Base has 
    (input ((a Chemical with (plays ((a Acid-Role))))))
    (parent_formula ((the term of (the nested-atomic-chemical-formula of (the has-basic-structural-unit of (the input of Self))))))
    (target-unit ((if (the parent_formula of Self) then (:set (#'(LAMBDA () (GET-CONJUGATE-BASE-ATOMIC-FORMULA-BACK (KM0 '(the parent_formula of Self))))) (#'(LAMBDA () (GET-CONJUGATE-BASE-ATOMIC-FORMULA-FRONT (KM0 '(the parent_formula of Self)))))))))
    (output ((if (oneof (the input of Self) where (It isa H3O-Plus-Substance)) then (a H2O-Substance) else ((forall (allof2 (the target-unit of Self) where ((not (It2 = (the parent_formula of Self))))) (the output of (a Identify-Chemical with (input ((a Chemical with (has-basic-structural-unit ((the output of (a Identify-Chemical-Entity with (input ((a Chemical-Entity with (nested-atomic-chemical-formula ((a Chemical-Formula with (term (It))))))))))))))))))) [Compute-Conjugate-Base-output-1]))))
(Compute-Conjugate-Acid has 
    (superclasses (Method))
    (test-case ('(((the output of (an instance of Compute-Conjugate-Acid with (input ((a NH3-Substance))))) isa NH4-Plus-Substance)))))

(every Compute-Conjugate-Acid has 
    (input ((a Chemical with (plays ((a Base-Role))))))
    (parent_formula ((the term of (the nested-atomic-chemical-formula of (the has-basic-structural-unit of (the input of Self))))))
    (target-unit ((if (the parent_formula of Self) then (:set (#'(LAMBDA () (GET-CONJUGATE-ACID-ATOMIC-FORMULA-BACK (KM0 '(the parent_formula of Self))))) (#'(LAMBDA () (GET-CONJUGATE-ACID-ATOMIC-FORMULA-FRONT (KM0 '(the parent_formula of Self)))))))))
    (output ((if (oneof (the input of Self) where (It isa H2O-Substance)) then (a H3O-Plus-Substance) else ((forall (allof2 (the target-unit of Self) where ((not (It2 = (the parent_formula of Self))))) (the output of (a Identify-Chemical with (input ((a Chemical with (has-basic-structural-unit ((the output of (a Identify-Chemical-Entity with (input ((a Chemical-Entity with (nested-atomic-chemical-formula ((a Chemical-Formula with (term (It))))))))))))))))))) [Compute-Conjugate-Acid-output-1]))))
(Compute-Conductivity-of-Ionic-Compound-in-Water has 
    (superclasses (Method))
    (test-case ('(((the value of (the conductivity of (a HCl-Substance with (base-of ((a Aqueous-Solution)))))) includes (:pair *high-conductivity Ionic-Compound-Substance)) ((the value of (the conductivity of (a NH3-Substance with (base-of ((a Aqueous-Solution)))))) includes (:pair *low-conductivity Ionic-Compound-Substance)) ((the value of (the conductivity of (a CaCO3-Substance with (base-of ((a Aqueous-Solution)))))) includes (:pair *no-conductivity Ionic-Compound-Substance)) ((the value of (the conductivity of (the base of (a Aqueous-Solution with (base ((a NaOH-Substance with (concentration ((a Concentration-Value with (value ((:pair 1 *molar))))))))))))) includes (:pair 2 ())) ((the value of (the conductivity of (the base of (a Aqueous-Solution with (base ((a CaCO3-Substance with (concentration ((a Concentration-Value with (value ((:pair 1 *molar))))))))))))) includes (:pair 0 ()))))))

(every Compute-Conductivity-of-Ionic-Compound-in-Water has 
    (input ((a Chemical)))
    (output ((((if ((the input of Self) isa Strong-Electrolyte) then (a Conductivity-Value with (value ((:pair *high-conductivity Ionic-Compound-Substance)))) [Compute-Conductivity-of-Ionic-Compound-in-Water-output-1])) && ((if ((the input of Self) isa Weak-Electrolyte) then (a Conductivity-Value with (value ((:pair *low-conductivity Ionic-Compound-Substance)))) [Compute-Conductivity-of-Ionic-Compound-in-Water-output-2])) && ((if ((not ((the input of Self) isa Strong-Electrolyte)) and (not ((the input of Self) isa Weak-Electrolyte))) then (a Conductivity-Value with (value ((:pair *no-conductivity Ionic-Compound-Substance)))) [Compute-Conductivity-of-Ionic-Compound-in-Water-output-3])) && ((if ((numberp (the1 of (the value of (the output of (a Compute-Concentration-of-Ions with (input ((the input of Self)))))))) and ((the1 of (the value of (the output of (a Compute-Concentration-of-Ions with (input ((the input of Self))))))) /= 0)) then (a Conductivity-Value with (value ((:pair (the1 of (the value of (the output of (a Compute-Concentration-of-Ions with (input ((the input of Self))))))) nil)))) [Compute-Conductivity-of-Ionic-Compound-in-Water-output-4]))))))
(Compute-Concentration-OH-Minus has 
    (superclasses (Method))
    (test-case ('(((the1 of (the value of (the output of (a Compute-Concentration-OH-Minus with (input ((a Hydrolysis with (raw-material ((a NH3-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))))) (kb ((the default-kb of (the plays of (a NH3-Substance)))))))))))) = 0.0013416408 +/- 1.0E-4) ((the1 of (the value of (the output of (a Compute-Concentration-OH-Minus with (input ((a Hydrolysis with (raw-material ((a NaOH-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))))) (kb ((the default-kb of (the plays of (a NaOH-Substance)))))))))))) = 0.1) ((the1 of (the value of (the output of (a Compute-Concentration-OH-Minus with (input ((a Hydrolysis with (raw-material ((a CH3NH2-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.5 *molar))))))))) (kb ((the default-kb of (the plays of (a CH3NH2-Substance)))))))))))) = 0.014832397 +/- 0.001) ((the1 of (the value of (the output of (a Compute-Concentration-OH-Minus with (input ((a Hydrolysis with (raw-material ((a KOH-Substance with (concentration ((a Concentration-Value with (value ((:pair 0.1 *molar))))))))) (kb ((the default-kb of (the plays of (a KOH-Substance)))))))))))) = 0.1)))))

(every Compute-Concentration-OH-Minus has 
    (input ((a Equilibrium-Reaction)))
    (output ((((if (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus)) and (the1 of (the value of (the equilibrium-concentration of It))))) then (a Concentration-Value with (value ((:pair ((the1 of (the value of (the equilibrium-concentration of (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus)) and (the1 of (the value of (the equilibrium-concentration of It)))))))) / 1.0E-14) *molar)))) [Compute-Concentration-OH-Minus-output-1])) && ((if ((not (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus)) and (the1 of (the value of (the equilibrium-concentration of It)))))) and (not (oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution))) and (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It)))) then (a Concentration-Value with (value ((:pair #'(LAMBDA () (/ (EXPT 10 -14) (EXPT 10 (- 0 (FIRST (KM0 (BACKQUOTE (the1 of (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It))))))))))) *molar)))) [Compute-Concentration-OH-Minus-output-2])) && ((if (((the1 of (the value of (the intensity of (the Base-Role plays of ((the raw-material of (the input of Self)) called "Reactant"))))) = *strong) and (the1 of (the value of (the concentration of ((the raw-material of (the input of Self)) called "Reactant"))))) then (a Concentration-Value with (value ((the value of (the concentration of ((the raw-material of (the input of Self)) called "Reactant")))))) [Compute-Concentration-H-Plus-output-3])) && ((if ((not (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus)) and (the1 of (the value of (the equilibrium-concentration of It)))))) and ((oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution)) or (not (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It))))) and (the Base-Role plays of ((the raw-material of (the input of Self)) called "Reactant")) and ((the1 of (the value of (the intensity of (the Base-Role plays of ((the raw-material of (the input of Self)) called "Reactant"))))) /= *strong)) then (a Concentration-Value with (value ((:pair (the output of (a Compute-Concentration-Change-Constant with (input ((the input of Self))))) *molar)))) [Compute-Concentration-OH-Minus-output-5]))))))
(Compute-Concentration-of-Ions has 
    (superclasses (Method)))

(every Compute-Concentration-of-Ions has 
    (input ((a Chemical)))
    (output ((((if ((the input of Self) isa Strong-Electrolyte) then (a Concentration-Value with (value ((:pair (the sum of (forall-bag (the bag of (the has-part of (the base-of of (the input of Self)))) (the1 of (the value of (the output of (a Unit-Conversion with (input ((the concentration of It))) (target-unit (*molar)))))))) *molar)))) [Compute-Concentration-of-Ions-output-1])) && ((if ((the input of Self) isa Weak-Electrolyte) then (a Concentration-Value with (value ((:pair *dilute Chemical)))) [Compute-Concentration-of-Ions-output-2])) && ((if ((not ((the input of Self) isa Strong-Electrolyte)) and (not ((the input of Self) isa Weak-Electrolyte))) then (a Concentration-Value with (value ((:pair 0 *molar)))) [Compute-Concentration-of-Ions-output-3]))))))
(Compute-Concentration-H-Plus has 
    (superclasses (Method)))

(every Compute-Concentration-H-Plus has 
    (input ((a Equilibrium-Reaction)))
    (output ((((if (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where (((the has-basic-structural-unit of It) isa OH-Minus) and (the1 of (the value of (the equilibrium-concentration of It))))) then (a Concentration-Value with (value ((:pair (1.0E-14 / (the1 of (the value of (the equilibrium-concentration of (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where (((the has-basic-structural-unit of It) isa OH-Minus) and (the1 of (the value of (the equilibrium-concentration of It))))))))) *molar)))) [Compute-Concentration-H-Plus-output-1])) && ((if ((not (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where (((the has-basic-structural-unit of It) isa OH-Minus) and (the1 of (the value of (the equilibrium-concentration of It)))))) and (not (oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution))) and (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It)))) then (a Concentration-Value with (value ((:pair #'(LAMBDA () (EXPT 10 (- 0 (FIRST (KM0 (BACKQUOTE (the1 of (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It)))))))))) *molar)))) [Compute-Concentration-H-Plus-output-2])) && ((if ((not (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where (((the has-basic-structural-unit of It) isa OH-Minus) and (the1 of (the value of (the equilibrium-concentration of It)))))) and ((oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution)) or (not (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It))))) and ((the1 of (the value of (the intensity of (the Acid-Role plays of ((the raw-material of (the input of Self)) called "Reactant"))))) = *strong) and (the1 of (the value of (the concentration of ((the raw-material of (the input of Self)) called "Reactant"))))) then (a Concentration-Value with (value ((the value of (the concentration of ((the raw-material of (the input of Self)) called "Reactant")))))) [Compute-Concentration-H-Plus-output-3])) && ((if ((not (oneof (:set (the raw-material of (the input of Self)) (the result of (the input of Self))) where (((the has-basic-structural-unit of It) isa OH-Minus) and (the1 of (the value of (the equilibrium-concentration of It)))))) and ((oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution)) or (not (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It))))) and (((((the raw-material of (the input of Self)) called "Reactant") isa Monoprotic-Acid) and ((the1 of (the value of (the intensity of (the Acid-Role plays of ((the raw-material of (the input of Self)) called "Reactant"))))) /= *strong)) or (((the raw-material of (the input of Self)) called "Reactant") isa Polyprotic-Acid))) then (a Concentration-Value with (value ((:pair (the output of (a Compute-Concentration-Change-Constant with (input ((the input of Self))))) *molar)))) [Compute-Concentration-H-Plus-output-5]))))))
(Compute-Concentration-from-Quantity-and-Volume has 
    (superclasses (Method)))

(every Compute-Concentration-from-Quantity-and-Volume has 
    (output ((if ((has-value (the1 of (the value of (the Quantity-Value input of Self)))) and (has-value (the1 of (the value of (the Volume-Value input of Self))))) then (a Concentration-Value with (value ((:pair ((the1 of (the value of (the output of (a Unit-Conversion with (input ((the Quantity-Value input of Self))) (target-unit (*mole)))))) / (the1 of (the value of (the output of (a Unit-Conversion with (input ((the Volume-Value input of Self))) (target-unit (*liter))))))) *molar [Compute-Concentration-from-Quantity-and-Volume-output-1])))) else (a Concentration-Value)))))
(Compute-Concentration-Change-Constant has 
    (superclasses (Method))
    (description ("compute the change in concentration constant x")))

(every Compute-Concentration-Change-Constant has 
    (input ((a Equilibrium-Reaction)))
    (output ((((if ((((the input of Self) isa Hydrolysis) or ((the input of Self) isa Complete-Dissociation-Reaction)) and (oneof (the result of (the input of Self)) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus) or ((the has-basic-structural-unit of It) isa OH-Minus)) and (the1 of (the value of (the equilibrium-concentration of It)))))) then (the1 of (the value of (the equilibrium-concentration of (oneof (the result of (the input of Self)) where (((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus) or ((the has-basic-structural-unit of It) isa OH-Minus)))))) [Compute-Concentration-Change-Constant-output-4])) && ((if ((the Acid-Role plays of ((the raw-material of (the input of Self)) called "Reactant")) and (not (oneof (the result of (the input of Self)) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus) or ((the has-basic-structural-unit of It) isa OH-Minus)) and (the1 of (the value of (the equilibrium-concentration of It)))))) and (not (oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution))) and (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It)))) then (the1 of (the value of (the output of (a Compute-Concentration-H-Plus with (input ((the input of Self))))))) [Compute-Concentration-Change-Constant-output-1])) && ((if ((the Base-Role plays of ((the raw-material of (the input of Self)) called "Reactant")) and (not (oneof (the result of (the input of Self)) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus) or ((the has-basic-structural-unit of It) isa OH-Minus)) and (the1 of (the value of (the equilibrium-concentration of It)))))) and (not (oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution))) and (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It)))) then (the1 of (the value of (the output of (a Compute-Concentration-OH-Minus with (input ((the input of Self))))))) [Compute-Concentration-Change-Constant-output-2])) && ((if ((((the input of Self) isa Hydrolysis) or ((the input of Self) isa Complete-Dissociation-Reaction)) and (not (oneof (the result of (the input of Self)) where ((((the has-basic-structural-unit of It) isa H-Plus) or ((the has-basic-structural-unit of It) isa H3O-Plus) or ((the has-basic-structural-unit of It) isa OH-Minus)) and (the1 of (the value of (the equilibrium-concentration of It)))))) and ((oneof (the input-of of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant"))) where (It isa Compute-pH-for-Solution)) or (not (oneof (the value of (the pH of (the Solution base-of of ((the raw-material of (the input of Self)) called "Reactant")))) where (numberp (the1 of It))))) and (the1 of (the value of (the concentration of ((the raw-material of (the input of Self)) called "Reactant")))) and (the value of (the keq of (the input of Self))) and ((((the number of (the ki of (the input of Self))) = 1) and (not (the value of (the ki of (the input of Self))))) or (oneof (the ki of (the input of Self)) where ((the1 of (the value of It)) and ((the1 of (the value of (the subscript of It))) = 1))))) then #'(LAMBDA () (ESTIMATE-X (FIRST (KM0 (BACKQUOTE (the1 of (the value of (the concentration of ((the raw-material of (the input of Self)) called "Reactant"))))))) (FIRST (KM0 (BACKQUOTE (the1 of (the value of (the keq of (the input of Self))))))) (KM0 '((the raw-material of (the input of Self)) called "Reactant")))) [Compute-Concentration-Change-Constant-output-3]))))))
(Compute-Compound-from-Common-Name has 
    (superclasses (Method)))

(every Compute-Compound-from-Common-Name has 
    (output ((#'(LAMBDA () (TRANSLATE-FROM-COMMON-COMPOUND-NAME (KM-UNIQUE0 '(the input of Self))))))))
(Compute-Compound-from-Common-Formula has 
    (superclasses (Method)))

(every Compute-Compound-from-Common-Formula has 
    (output ((#'(LAMBDA () (TRANSLATE-FROM-COMMON-COMPOUND-FORMULA (KM-UNIQUE0 '(the input of Self))))))))
(Compute-Compound-from-Chemical-Name has 
    (superclasses (Method)))

(every Compute-Compound-from-Chemical-Name has 
    (output (((the output of (a Compute-Compound-from-Common-Name with (input ((the input of Self))))) or (the output of (an instance of (the output of (a Compute-Compound-Computing-Method-from-Name with (input ((#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))) with (input ((the input of Self)))))))))
(Compute-Compound-from-Chemical-Formula has 
    (superclasses (Method)))

(every Compute-Compound-from-Chemical-Formula has 
    (output (((the output of (a Compute-Compound-from-Common-Formula with (input ((the input of Self))))) or (the output of (an instance of (the output of (a Compute-Compound-Computing-Method-from-Formula with (input ((the input of Self))))) with (input ((the input of Self)))))))))
(Compute-Compound-Computing-Method-from-Name has 
    (superclasses (Method)))

(every Compute-Compound-Computing-Method-from-Name has 
    (output ((if ((the2 of (the input of Self)) = "acid") then Compute-Acid-Compound-from-Chemical-Name else (if (oneof (the all-subclasses of Cation) where ((the has-chemical-name of (an instance of It)) = (the1 of (the input of Self)))) then Compute-Ionic-Compound-from-Chemical-Name else Compute-Molecular-Compound-from-Chemical-Name)))))
(Compute-Compound-Computing-Method-from-Formula has 
    (superclasses (Method)))

(every Compute-Compound-Computing-Method-from-Formula has 
    (output ((if ((the2 of (the1 of (the input of Self))) = H) then Compute-Acid-Compound-from-Formula else (if (oneof (the all-subclasses of Cation) where (#'(LAMBDA () (REMAINING-FORMULA-IS-ANION-P (KM-UNIQUE0 '(the input of Self)) (KM-UNIQUE0 '(an instance of It)))))) then Compute-Ionic-Compound-from-Formula else Compute-Molecular-Compound-from-Formula)))))
(Compute-Complete-Atomic-Chemical-Formula has 
    (superclasses (Method))
    (description ("compute complete atomic formula of a chemical substance"))
    (test-case ('(((the term of (the output of (an instance of Compute-Complete-Atomic-Chemical-Formula with (input ((a HCl-Substance with (coefficient ((a Coefficient-Value with (value ((:pair 2 nil)))))))))))) = (:seq (:pair 2 H) (:pair 2 Cl)))))))

(every Compute-Complete-Atomic-Chemical-Formula has 
    (input ((a Chemical)))
    (multiplier ((if (the coefficient of (the input of Self)) then (the1 of (the value of (the coefficient of (the input of Self)))) else 1)))
    (output ((a Chemical-Formula with (term ((forall-seq (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of (the input of Self)))) (:pair ((the1 of It) * (the multiplier of Self)) (the2 of It))))) [Compute-Complete-Atomic-Chemical-Formula-output-1]))))
(Compute-Chemical-Name-from-Ion-of-Acid-Compound has 
    (superclasses (Method))
    (description ("compute the name of acid based on its ions")))

(every Compute-Chemical-Name-from-Ion-of-Acid-Compound has 
    (output ((#'(LAMBDA () (CONCATENATE 'STRING (KM-UNIQUE0 '(the has-acid-name of (an instance of (the2 of (the2 of (the input of Self)))))) " acid"))))))
(Compute-Chemical-Name-from-Formula-of-Ionic-Compound has 
    (superclasses (Method))
    (description ("compute the name of a ionic compound based on its formula")))

(every Compute-Chemical-Name-from-Formula-of-Ionic-Compound has 
    (output ((#'(LAMBDA () (CONCATENATE 'STRING (KM-UNIQUE0 '(the first of (the has-chemical-name of (an instance of (the2 of (the1 of (the input of Self))))))) " " (KM-UNIQUE0 '(the first of (the has-chemical-name of (an instance of (the2 of (the2 of (the input of Self)))))))))))))
(Compute-Chemical-Ion-from-Name has 
    (superclasses (Method))
    (description ("a method to compute an ion based on its name")))

(every Compute-Chemical-Ion-from-Name has 
    (output ((oneof (the all-subclasses of Ion) where ((the has-chemical-name of (an instance of It)) includes (the input of Self))))))
(Compute-Chemical-Formula-of-Ionic-Compound has 
    (superclasses (Method))
    (description ("When an anion combines with a cation to form an ionic compound, the subscript of each ion is equal to the charge magnitude of the other ion")))

(every Compute-Chemical-Formula-of-Ionic-Compound has 
    (input ((a Cation)
            (a Anion)))
    (output ((a Chemical-Formula with (term (#'(LAMBDA () (COMPUTE-CHF-OF-IONIC-COMPOUND (KM0 '(the Cation input of Self)) (KM0 '(the1 of (the value of (the charge of (the Cation input of Self))))) (KM0 '(the Anion input of Self)) (KM0 '(the1 of (the value of (the charge of (the Anion input of Self))))))))) [Compute-Chemical-Formula-of-Ionic-Compound-output-1]))))
(Compute-Balanced-Equation has 
    (superclasses (Method))
    (description ("balance the reaction equation")))

(every Compute-Balanced-Equation has 
    (input ((a Reaction)))
    (output ((if ((forall (the raw-material of (the input of Self)) (has-value (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) and (forall (the result of (the input of Self)) (has-value (the atomic-chemical-formula of (the has-basic-structural-unit of It))))) then (a Action with (raw-material ((forall (the raw-material of (the input of Self)) (a Chemical with (has-basic-structural-unit ((the has-basic-structural-unit of It))) (coefficient (#'(LAMBDA () (BALANCED-EQUATION-COEFFICIENT (KM-UNIQUE0 '(the input of Self)) 'It)))))))) (result ((forall (the result of (the input of Self)) (a Chemical with (has-basic-structural-unit ((the has-basic-structural-unit of It))) (coefficient (#'(LAMBDA () (BALANCED-EQUATION-COEFFICIENT (KM-UNIQUE0 '(the input of Self)) 'It)))))))) [Compute-Balanced-Equation-output-1])))))
(Compute-Atomic-Weight-from-Chemical has 
    (superclasses (Method))
    (description ("compute the atomic weight of a particle")))

(every Compute-Atomic-Weight-from-Chemical has 
    (input ((a Chemical-Entity)))
    (output ((a Atomic-Weight-Value with (value ((:pair (the sum of (the bag of (forall2 (forall (the elements of (the term of (the atomic-chemical-formula of (the input of Self)))) (:pair (the1 of It) (the1 of (the value of (the atomic-weight of (an instance of (the2 of It))))))) ((the1 of It2) * (the2 of It2))))) *dalton)))))))
(Compute-Atomic-Formula-from-Nested-Formula has 
    (superclasses (Method))
    (description ("compute the atomic formula based on nested formula")))

(every Compute-Atomic-Formula-from-Nested-Formula has 
    (input ((a Chemical-Formula)))
    (output ((a Chemical-Formula with (term ((#'(LAMBDA () (DENEST-ATOMIC-FORMULA (KM-UNIQUE0 '(the term of (the input of Self))))))))))))
(Compute-Activity-Series has 
    (superclasses (Method))
    (description ("given 2 particles, decide if the first is more active than the second"))
    (test-case ('(((the output of (a Compute-Activity-Series with (input ((a Na) (a Ag-Plus))))) = "yes") ((the output of (a Compute-Activity-Series with (input ((a Sn-Plus-2) (a Au))))) = "yes") ((the output of (a Compute-Activity-Series with (input ((a Pt) (a Fe))))) = "no") ((the output of (a Compute-Activity-Series with (input ((a Mn-Plus-2) (a Ba))))) = "no")))))

(every Compute-Activity-Series has 
    (input ((a Chemical-Entity)
            (a Chemical-Entity)))
    (context (((forall (:set (:pair Li 0) (:pair Li-Plus 0) (:pair K 1) (:pair K-Plus 1) (:pair Ba 2) (:pair Ba-Plus-2 2) (:pair Ca 3) (:pair Ca-Plus-2 3) (:pair Na 4) (:pair Na-Plus 4) (:pair Mg 5) (:pair Mg-Plus-2 5) (:pair Al 6) (:pair Al-Plus-3 6) (:pair Mn 7) (:pair Mn-Plus-2 7) (:pair Zn 8) (:pair Zn-Plus-2 8) (:pair Cr 9) (:pair Cr-Plus-3 9) (:pair Fe 10) (:pair Fe-Plus-2 10) (:pair Co 11) (:pair Co-Plus-2 11) (:pair Ni 12) (:pair Ni-Plus-2 12) (:pair Sn 13) (:pair Sn-Plus-2 13) (:pair Pb 14) (:pair Pb-Plus-2 14) (:pair H 15) (:pair H-Plus 15) (:pair H-Minus 15) (:pair Cu 16) (:pair Cu-Plus-2 16) (:pair Ag 17) (:pair Ag-Plus 17) (:pair Hg 18) (:pair Hg-Plus-2 18) (:pair Pt 19) (:pair Pt-Plus-2 19) (:pair Au 20) (:pair Au-Plus-2 20)) where ((the first of (the input of Self)) isa (the1 of It)) (the2 of It)) < (forall (:set (:pair Li 0) (:pair Li-Plus 0) (:pair K 1) (:pair K-Plus 1) (:pair Ba 2) (:pair Ba-Plus-2 2) (:pair Ca 3) (:pair Ca-Plus-2 3) (:pair Na 4) (:pair Na-Plus 4) (:pair Mg 5) (:pair Mg-Plus-2 5) (:pair Al 6) (:pair Al-Plus-3 6) (:pair Mn 7) (:pair Mn-Plus-2 7) (:pair Zn 8) (:pair Zn-Plus-2 8) (:pair Cr 9) (:pair Cr-Plus-3 9) (:pair Fe 10) (:pair Fe-Plus-2 10) (:pair Co 11) (:pair Co-Plus-2 11) (:pair Ni 12) (:pair Ni-Plus-2 12) (:pair Sn 13) (:pair Sn-Plus-2 13) (:pair Pb 14) (:pair Pb-Plus-2 14) (:pair H 15) (:pair H-Plus 15) (:pair H-Minus 15) (:pair Cu 16) (:pair Cu-Plus-2 16) (:pair Ag 17) (:pair Ag-Plus 17) (:pair Hg 18) (:pair Hg-Plus-2 18) (:pair Pt 19) (:pair Pt-Plus-2 19) (:pair Au 20) (:pair Au-Plus-2 20)) where ((the second of (the input of Self)) isa (the1 of It)) (the2 of It)))))
    (output ((((if (the context of Self) then "yes" [Compute-Activity-Series-output-1])) && ((if (not (the context of Self)) then "no" [Compute-Activity-Series-output-2]))))))
(Compute-Acidity-Basicity-of-Solution has 
    (superclasses (Method))
    (description ("compute the acidity/basicity of a solution")))

(every Compute-Acidity-Basicity-of-Solution has 
    (input ((a Solution with (pH ((a PH-Value))))))
    (output ((((if (oneof (the value of (the pH of (the input of Self))) where ((numberp (the1 of It)) and ((the1 of It) = 7 +/- 0.001))) then (a PH-Value with (pH-of ((the input of Self))) (value ((:pair *neutral Solution)))) [Compute-Acidity-Basicity-of-Solution-output-1])) && ((if (oneof (the value of (the pH of (the input of Self))) where ((numberp (the1 of It)) and (not ((the1 of It) = 7 +/- 0.001)) and ((the1 of It) > 7))) then (a PH-Value with (pH-of ((the input of Self))) (value ((:pair *basic Solution)))) [Compute-Acidity-Basicity-of-Solution-output-2])) && ((if (oneof (the value of (the pH of (the input of Self))) where ((numberp (the1 of It)) and (not ((the1 of It) = 7 +/- 0.001)) and ((the1 of It) < 7))) then (a PH-Value with (pH-of ((the input of Self))) (value ((:pair *acidic Solution)))) [Compute-Acidity-Basicity-of-Solution-output-3]))))))
(Compute-Acid-Ion-from-Name has 
    (superclasses (Method))
    (description ("derive an ion from a name")))

(every Compute-Acid-Ion-from-Name has 
    (output ((oneof (the all-subclasses of Anion) where ((the has-acid-name of (an instance of It)) = (the input of Self))))))
(Compute-Acid-Compound-from-Formula has 
    (superclasses (Method))
    (description ("derive an acid based on a formula")))

(every Compute-Acid-Compound-from-Formula has 
    (has-part ((a H-Plus)
               (an instance of (#'(LAMBDA () (IF (IS-ANONYMOUS-ACID (KM-UNIQUE0 (BACKQUOTE (the input of Self)))) '(Anion) (GET-FORMULA-ANION-COMPONENT (KM-UNIQUE0 '(the input of Self)) (KM-UNIQUE0 '(a H-Plus)))))))))
    (has-chemical-formula ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((the Cation has-part of Self) (the Anion has-part of Self)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((the input of Self))))))
    (output ((a Acid-Compound with (has-part ((the has-part of Self))) (has-chemical-formula ((the has-chemical-formula of Self))) (nested-atomic-chemical-formula ((the nested-atomic-chemical-formula of Self))) (atomic-chemical-formula ((the output of (a Compute-Atomic-Formula-from-Nested-Formula with (input ((the nested-atomic-chemical-formula of Self))))))) (has-chemical-name ((the output of (a Compute-Chemical-Name-from-Ion-of-Acid-Compound with (input ((the term of (the has-chemical-formula of Self))))))))))))
(Compute-Acid-Compound-from-Chemical-Name has 
    (superclasses (Method))
    (description ("derive an acid based on its name")))

(every Compute-Acid-Compound-from-Chemical-Name has 
    (output ((a Acid-Compound with (has-part ((:set (a H-Plus) (an instance of (the output of (a Compute-Acid-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))))))))) (has-chemical-formula ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((a H-Plus) (an instance of (the output of (a Compute-Acid-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))))))))) (nested-atomic-chemical-formula ((the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((a H-Plus) (an instance of (the output of (a Compute-Acid-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self))))))))))))))))))))) (atomic-chemical-formula ((the output of (a Compute-Atomic-Formula-from-Nested-Formula with (input ((the output of (a Compute-Nested-Atomic-Formula-from-Formula with (input ((the output of (a Compute-Chemical-Formula-of-Ionic-Compound with (input ((a H-Plus) (an instance of (the output of (a Compute-Acid-Ion-from-Name with (input ((the1 of (#'(LAMBDA () (SPLIT-COMPOUND-NAME-COMPONENTS (KM-UNIQUE0 '(the input of Self)))))))))))))))))))))))))))))
(Compound-Protein has 
    (superclasses (Protein-Complex))
    (description ("A protein made up of polypeptide subunits held
                        together by noncovalent bonds.  The structure formed
                        by these subunits is called quaternary structure.
                        Examples include microtubules, hemoglobin.  Souther."))
    )

(every Compound-Protein has 
    (element-type ((Polypeptide)
                   (at-least 2 Polypeptide))))
(Compound has 
    (superclasses (Chemical-Entity))
                                                                                         
    (domain-of (salt-status))
    (range-of (salt-status-of)))

(every Compound has 
    (charge ((:default (a Charge-Value with (value ((:pair 0 *electronic-charge)))))))
    (salt-status ((the output of (a Compute-Salt-Status with (input (Self)))))))
(Complete-Dissociation-Reaction has 
    (superclasses (Equilibrium-Reaction))
    (domain-of (ka
                   pka))
    (range-of (ka-of
                  pka-of)))

(every Complete-Dissociation-Reaction has 
    (keq ((if ((not (the keq of Self)) and (not (oneof (the ki of Self) where ((the value of It) = nil)))) then (a Equilibrium-Constant-Value with (value ((:pair (the product of (forall-bag (the bag of (the ki of Self)) (the1 of (the value of It)))) nil)))) [Complete-Dissociation-Reaction-keq-4])))
    (ka ((if (not (the ka of Self)) then (the keq of Self) [Complete-Dissociation-Reaction-ka-1])))
    (ka-expression ((if (not (the ka-expression of Self)) then (the keq-expression of Self) [Complete-Dissociation-Reaction-ka-expression-1])))
    (pka ((((if ((not (the pka of Self)) and (not (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant")))))) and (the1 of (the value of (the ka of Self)))) then (a PKa-Value with (value ((:pair (0 - ((the log of (the1 of (the value of (the ka of Self)))) / (the log of 10))) nil)))) [Complete-Dissociation-Reaction-pka-1])) && ((if ((not (the pka of Self)) and (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) and (not (the1 of (the value of (the ka of Self))))) then (a PKa-Value with (value ((:pair (the1 of (the value of (the pka of (the Acid-Role plays of ((the raw-material of Self) called "Reactant"))))) nil)))) [Complete-Dissociation-Reaction-pka-2])))))
    (subevent ((if (not (the subevent of Self)) then #'(LAMBDA () (COMPUTE-DISSOCIATIONS (KM0 '((the raw-material of Self) called "Reactant")))))))
    (raw-material ((a Polyprotic-Acid called "Reactant")
                   (a H2O-Substance)))
    (result ((if (not (the result of Self)) then (:set (a Chemical with (has-basic-structural-unit ((a H3O-Plus)))) (a Chemical with (has-basic-structural-unit ((a Chemical-Entity with (charge ((if (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of ((the raw-material of Self) called "Reactant"))))) where ((the2 of It) = H-Plus)) then (a Charge-Value with (value ((:pair (((the1 of (the value of (the charge of (the has-basic-structural-unit of ((the raw-material of Self) called "Reactant"))))) or 0) - (the1 of (oneof (the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of ((the raw-material of Self) called "Reactant"))))) where ((the2 of It) = H-Plus)))) *electronic-charge))))))) (has-chemical-formula ((a Chemical-Formula with (term ((forall-seq (the term of (the has-chemical-formula of (the has-basic-structural-unit of ((the raw-material of Self) called "Reactant")))) where ((the2 of It) /= H-Plus) It)))))))))))))))

(every Complete-Dissociation-Reaction has-definition 
    (instance-of (Equilibrium-Reaction))
    (raw-material ((a Polyprotic-Acid with (raw-material-of ((constraint ((not (oneof TheValue where (It isa Hydrolysis)))))))))))
(Compare-Relative-Strengths-of-Bases has 
    (superclasses (Method))
    (description ("compare strengths of two given bases")))

(every Compare-Relative-Strengths-of-Bases has 
    (output ((((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the input of Self)))))) = *strong) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the input of Self)))))) /= *strong)) then (the first of (the input of Self)) [Compare-Relative-Strengths-of-Bases-output-1])) && ((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the input of Self)))))) /= *strong) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the input of Self)))))) = *strong)) then (the second of (the input of Self)) [Compare-Relative-Strengths-of-Bases-output-2])) && ((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the input of Self)))))) = *weak) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the input of Self)))))) = *negligible)) then (the first of (the input of Self)) [Compare-Relative-Strengths-of-Bases-output-3])) && ((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the input of Self)))))) = *negligible) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the input of Self)))))) = *weak)) then (the second of (the input of Self)) [Compare-Relative-Strengths-of-Bases-output-4])) && ((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the input of Self)))))) = *strong) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the input of Self)))))) = *strong)) then (if (the OH-Minus has-basic-structural-unit of (the first of (the input of Self))) then (the second of (the input of Self)) else (if (the OH-Minus has-basic-structural-unit of (the second of (the input of Self))) then (the first of (the input of Self)))) [Compare-Relative-Strengths-of-Bases-output-5])) && ((if (((the1 of (the value of (the intensity of (the Base-Role plays of (the first of (the input of Self)))))) = *negligible) and ((the1 of (the value of (the intensity of (the Base-Role plays of (the second of (the input of Self)))))) = *negligible)) then (if ((the first of (the input of Self)) isa H2O-Substance) then (the first of (the input of Self)) else (if ((the second of (the input of Self)) isa H2O-Substance) then (the second of (the input of Self)))) [Compare-Relative-Strengths-of-Bases-output-6]))))))
(Compare-Relative-Strengths-of-Acids has 
    (superclasses (Method))
    (description ("compare the strengths of two given acid")))

(every Compare-Relative-Strengths-of-Acids has 
    (output ((((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the input of Self)))))) = *strong) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the input of Self)))))) /= *strong)) then (the first of (the input of Self)) [Compare-Relative-Strengths-of-Acids-output-1])) && ((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the input of Self)))))) /= *strong) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the input of Self)))))) = *strong)) then (the second of (the input of Self)) [Compare-Relative-Strengths-of-Acids-output-2])) && ((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the input of Self)))))) = *weak) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the input of Self)))))) = *negligible)) then (the first of (the input of Self)) [Compare-Relative-Strengths-of-Acids-output-3])) && ((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the input of Self)))))) = *negligible) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the input of Self)))))) = *weak)) then (the second of (the input of Self)) [Compare-Relative-Strengths-of-Acids-output-4])) && ((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the input of Self)))))) = *strong) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the input of Self)))))) = *strong)) then (if (the H3O-Plus has-basic-structural-unit of (the first of (the input of Self))) then (the second of (the input of Self)) else (if (the H3O-Plus has-basic-structural-unit of (the second of (the input of Self))) then (the first of (the input of Self)))) [Compare-Relative-Strengths-of-Acids-output-5])) && ((if (((the1 of (the value of (the intensity of (the Acid-Role plays of (the first of (the input of Self)))))) = *negligible) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (the second of (the input of Self)))))) = *negligible)) then (if ((the first of (the input of Self)) isa H2O-Substance) then (the first of (the input of Self)) else (if ((the second of (the input of Self)) isa H2O-Substance) then (the second of (the input of Self)))) [Compare-Relative-Strengths-of-Acids-output-6]))))))
(Compare-Oxyacid-Strength has 
    (superclasses (Method))
    (description ("compute the strength of 2 given oxyacids (of form HmYOn)"))
    (test-case ('(((the output of (a Compare-Oxyacid-Strength with (input ((a HClO-Substance) (a HClO4-Substance))))) isa HClO4-Substance) ((the output of (a Compare-Oxyacid-Strength with (input ((a HClO-Substance) (a HClO-Substance))))) = "0") (not (the output of (a Compare-Oxyacid-Strength with (input ((a HClO-Substance) (a HCN-Substance))))))))))

(every Compare-Oxyacid-Strength has 
    (input ((a Acid uniquely-called "the first acid")
            (a Acid uniquely-called "the second acid")))
    (output ((((if (not (oneof (the input of Self) where (It = "no"))) then (if ((the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid")))) = (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) then "0") [Compare-Oxyacid-Strength-output-1])) && ((if (not (oneof (the input of Self) where (It = "no"))) then (if (((the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid")))) /= (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) and ((allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid"))))) where ((the2 of It) /= O)) = (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) where ((the2 of It) /= O))) and ((the number of (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid"))))) where ((the2 of It) = H))) = 1) and ((the number of (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) where ((the2 of It) = H))) = 1) and ((the number of (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid"))))) where ((the2 of It) = O))) = 1) and ((the number of (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) where ((the2 of It) = O))) = 1) and ((the number of (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid"))))) where (((the2 of It) /= H) and ((the2 of It) /= O)))) = 1) and ((the number of (allof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) where (((the2 of It) /= H) and ((the2 of It) /= O)))) = 1)) then (if ((the1 of (theoneof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the first acid"))))) where ((the2 of It) = O))) > (the1 of (theoneof (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of ((the input of Self) called "the second acid"))))) where ((the2 of It) = O)))) then ((the input of Self) called "the first acid") else ((the input of Self) called "the second acid"))) [Compare-Oxyacid-Strength-output-2]))))))
(Company has 
    (superclasses (Institution))
    (description ("a private business organization"))
    (wn20-synset ((:set (:triple "company" 1 "n") (:triple "business" 1 "n") (:triple "concern" 3 "n") (:triple "business_concern" 1 "n") (:triple "business_organization" 1 "n") (:triple "business_organisation" 1 "n"))))
    )
(Community has 
    (superclasses (Aggregate))
    (description ("a group of people with something in common"))
    (wn20-synset ((:set (:triple "people" 1 "n")))))
(Communicate has 
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      recipient))
    (test-case ('((*John has (instance-of (Tangible-Entity))) (*Paul has (instance-of (Tangible-Entity))) (*Guitar has (instance-of (Tangible-Entity))) (*Story has (instance-of (Information)) (information-content ((a Break with (agent (*John)) (object (*Guitar)))))) ((a Be-Known with (experiencer (*John)) (object (*Story)))) (a Communicate with (donor (*John)) (recipient (*Paul)) (object (*Story))) (do-script (thelast Communicate)) ((the information-content of (the object of (oneof                             where ((the experiencer of It) includes *Paul)))) isa Break))))
    (wn16-synset ((:set (:triple "communicate" 1 "v") (:triple "communicate" 2 "v") (:triple "communicate" 3 "v") (:triple "pass_on" 7 "v") (:triple "pass" 12 "v") (:triple "put_across" 1 "v") (:triple "intercommunicate" 2 "v") (:triple "convey" 3 "v") (:triple "transmit" 1 "v"))))
    (wn20-synset ((:set (:triple "communicate" 1 "v") (:triple "communicate" 2 "v") (:triple "communicate" 3 "v") (:triple "pass_on" 7 "v") (:triple "pass" 12 "v") (:triple "put_across" 1 "v") (:triple "intercommunicate" 2 "v") (:triple "convey" 3 "v") (:triple "transmit" 1 "v"))))
    )

(every Communicate has 
    (object ((a Information)))
    (base ((a Message)))
    (donor (((the agent of Self))
            ((must-be-a Tangible-Entity))))
    (agent ((the donor of Self)))
    (recipient ((a Tangible-Entity)))
    (resulting-state ((a Be-Known)))
    (first-subevent ((the Express subevent of Self)))
    (subevent ((a Express with (object ((the object of Self))) (agent ((the agent of Self))) (result ((the base of Self))) (next-event ((the Convey subevent of Self))))
               (a Convey with (object ((the base of Self))) (agent ((the agent of Self))) (recipient ((the recipient of Self))) (next-event ((the Interpret subevent of Self))))
               (a Interpret with (agent ((the recipient of Self))) (object ((the base of Self))) (result ((the object of Self))))))
    (pcs-list ((:triple (the object of Self) object-of ((a Be-Known with (experiencer ((the agent of Self)))) [Communicate-pcs-1]))))
    (text-active-verbseq-sg ("communicates"))
    (text-active-verbseq-pl ("communicate"))
    (text-passive-verbseq-sg ("gets communicated"))
    (text-passive-verbseq-pl ("get communicated"))
    (text-recipient ("to"))
    (text-argslots ((:seq recipient)))
    (text-nominalization ("communication")))
(Committee has 
    (superclasses (Workgroup))
    (wn20-synset ((:set (:triple "committee" 1 "n") (:triple "commission" 1 "n")))))
(Command-and-Control has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Command has 
    (superclasses (Express))
    (required-slot (agent
                       object
                       recipient))
    (test-case ('((Blow-to-smithereens has (superclasses (Action))) (*Enemy has (instance-of (Tangible-Entity))) (*Commander has (instance-of (Tangible-Entity))) (*Soldier has (instance-of (Tangible-Entity))) (*Orders has (instance-of (Information)) (information-content ((a Blow-to-smithereens with (agent (*Soldier)) (object (*Enemy)))))) (*Command has (instance-of (Command)) (agent (*Commander)) (recipient (*Soldier)) (object (*Orders))) (do-and-next *Command) ((the experiencer of (thelast Be-Known)) = *Commander) (do-and-next (the objective of *Command)) ((the agent of (thelast Action)) = *Soldier))))
    (wn16-synset ((:set (:triple "command" 2 "v") (:triple "command" 3 "v") (:triple "require" 3 "v") (:triple "compel" 2 "v") (:triple "order" 1 "v") (:triple "tell" 4 "v") (:triple "enjoin" 2 "v"))))
    (wn20-synset ((:set (:triple "command" 2 "v") (:triple "command" 3 "v") (:triple "require" 3 "v") (:triple "compel" 2 "v") (:triple "order" 1 "v") (:triple "tell" 4 "v") (:triple "enjoin" 2 "v")))))

(every Command has 
    (object ((must-be-a Information with (plays ((a Instruction))))))
    (recipient ((a Tangible-Entity)))
    (objective ((the Action information-content of (the object of Self))))
    (text-nominalization ("commanding")))
(Come-Together has 
    (superclasses (Action))
    (required-slot (object
                       destination))
    (primary-slot (subevent))
    (cmap-correspondence ((:seq object "the things moved")
                          (:seq destination "moved to")
                          (:seq subevent "the Move of each object")))
    (test-case ('((*safety has (instance-of (Physical-Object)) (location ((a Place)))) (*running-back has (instance-of (Physical-Object)) (location ((a Place)))) (*goal-line has (instance-of (Place))) (a Come-Together with (object (*running-back *safety)) (destination (*goal-line))) (do-script (thelast Come-Together)) (the text-gen of (thelast Come-Together)) ((the location of *safety) = *goal-line) ((the location of *running-back) = *goal-line) (forall (the subevent of (thelast Come-Together)) ((It isa Go-To) and ((:set *running-back *safety) includes (the object of It)))) (new-situation) (*dog has (instance-of (Physical-Object)) (location ((a Place)))) (*cat has (instance-of (Physical-Object)) (location ((a Place)))) (*rat has (instance-of (Physical-Object)) (location ((a Place)))) (*trap has (instance-of (Physical-Object)) (location ((a Place)))) (a Come-Together with (object (*dog *cat *rat)) (destination (*trap))) (do-script (thelast Come-Together)) (the text-gen of (thelast Come-Together)) ((the location of *dog) = (the location of *trap)) ((the location of *cat) = (the location of *trap)) ((the location of *rat) = (the location of *trap)) ((the location-of of (the location of (the destination of (thelast Come-Together)))) is-superset-of (:set *dog *cat *rat *trap)))))
    (wn16-synset ((:set (:triple "meet" 7 "v") (:triple "gather" 2 "v") (:triple "assemble" 2 "v") (:triple "forgather" 1 "v") (:triple "foregather" 1 "v"))))
    (wn20-synset ((:set (:triple "meet" 8 "v") (:triple "gather" 2 "v") (:triple "assemble" 2 "v") (:triple "forgather" 1 "v") (:triple "foregather" 1 "v")))))

(every Come-Together has 
    (object ((at-least 2 Tangible-Entity)
             (a Tangible-Entity)
             (a Tangible-Entity)))
    (destination (((exactly 1 Spatial-Entity) & (a Spatial-Entity))))
    (first-subevent ((the subevent of Self)))
    (subevent ((forall (the object of Self) (a Go-To with (object ((It))) (agent ((It))) (destination ((the destination of Self))) (path ((if (has-value (the path of Self)) then (the path of Self)))) (away-from ((if (has-value (the away-from of Self)) then (the away-from of Self)))) (toward ((if (has-value (the toward of Self)) then (the toward of Self)))) (origin ((if (has-value (the origin of Self)) then (the origin of Self))))))))
    (text-active-verbseq-sg ("causes to come together"))
    (text-active-verbseq-pl ("cause to come together"))
    (text-passive-verbseq-sg ("comes together"))
    (text-passive-verbseq-pl ("come together"))
    (text-nominalization ("coming together")))
(Combination-Reaction has 
    (superclasses (Reaction))
    (test-case ('(((a Reaction with (raw-material ((a CO2-Substance) (a CaO-Substance with (physical-state ((a State-Value with (value (*solid)))))))) (result ((a CaCO3-Substance with (physical-state ((a State-Value with (value (*solid))))))))) isa Combination-Reaction)))))
(Combat-Strength-Value has 
    (superclasses (Property-Value))
    (range-of (combat-strength))
    (domain-of (combat-strength-of)))

(every Combat-Strength-Value has 
    (property-slot ((combat-strength)))
    (combat-strength-of ((must-be-a Thing)))
    (less-than ((must-be-a Combat-Strength-Value)))
    (greater-than ((must-be-a Combat-Strength-Value)))
    (same-as ((must-be-a Combat-Strength-Value))))
(Combat-Strength-Scale has 
    (superclasses (Scale))
                                       
    (scale-class-of (combat-strength)))
(Combat-Strength-Constant has 
    (superclasses (Constant))
                                                                                                                                                     
    (element-type-of (*annihilated-full-scale))
    (scalar-constant-class-of (combat-strength)))
(Combat-Power-Ratio-Value has 
    (superclasses (Property-Value))
    (range-of (combat-power-ratio))
    (domain-of (combat-power-ratio-of)))

(every Combat-Power-Ratio-Value has 
    (property-slot ((combat-power-ratio)))
    (combat-power-ratio-of ((must-be-a Event)))
    (less-than ((must-be-a Combat-Power-Ratio-Value)))
    (greater-than ((must-be-a Combat-Power-Ratio-Value)))
    (same-as ((must-be-a Combat-Power-Ratio-Value))))
(Combat-Power-Ratio-Scale has 
    (superclasses (Scale))
    (scale-class-of (combat-power-ratio)))
(Combat-Power-Ratio-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (combat-power-ratio)))
(Color-Value has 
    (range-of (color))
    (domain-of (color-of))
    (superclasses (Property-Value))
    )
(Color-Constant has 
    (categorical-constant-class-of (color))
    (superclasses (Constant))

    (wn20-synset ((:set (:triple "chromatic_color" 1 "n")))))
(Colloid has 
    (superclasses (Chemical-Mixture))
    (description ("A mixture of a solid, liquid, or gas 
                            in a solid, liquid, or gas that does not separate
                            out upon standing, such as an emulsion, foam, 
                            smoke, or fog. RHCD:264 cf colloidal system."))
    )
(Collide has 
    (superclasses (Make-Contact))
    (required-slot (object))
    (primary-slot (agent
                      base
                      location))
    (cmap-correspondence ((:seq object "the thing(s) Collided")
                          (:seq agent "the Collider")
                          (:seq base "the thing Collided with")
                          (:seq location "the place of the collision")
                          (:seq intensity "the intensity of the collison")))
    (test-case ('((*side-walk has (instance-of (Place))) (*Semi-Truck has (instance-of (Tangible-Entity))) (*Mini-Van has (instance-of (Tangible-Entity)) (location (*side-walk))) (a Collide with (object (*Mini-Van)) (base (*Semi-Truck)) (location (*side-walk))) (do-and-next (thelast Collide)) (the text-gen of (thelast Collide)) (allof (the Be-Touching object-of of *Mini-Van) where ((the object of It) includes *Semi-Truck)) ((the abuts of *Mini-Van) includes *Semi-Truck))))
    (wn16-synset ((:set (:triple "collide" 2 "v") (:triple "collide" 3 "v") (:triple "clash" 1 "v"))))
    (wn20-synset ((:set (:triple "collide" 1 "v") (:triple "collide" 3 "v") (:triple "clash" 1 "v") (:triple "collide_with" 1 "v") (:triple "hit" 2 "v") (:triple "strike" 1 "v") (:triple "impinge_on" 1 "v") (:triple "run_into" 3 "v")))))

(every Collide has 
    (intensity ((*strong)))
    (text-active-verbseq-sg ("causes to collide"))
    (text-active-verbseq-pl ("cause to collide"))
    (text-passive-verbseq-sg ("collides"))
    (text-passive-verbseq-pl ("collide"))
    (text-nominalization ("collision")))
(Collagen has 
    (superclasses (Fibrous-Protein))
    (description ("A fibrous protein rich in glycine and proline that is
                        a major component of the extracellular matrix in animal
                        tissues. Exists in many forms: type I, the most common,
                        is found in skin, tendon, and bone; type II is found in
                        cartilage; type IV is present in basal laminae.
                        Alberts:ECB:G-5.")))
(CoenzymeA has 
    (superclasses (Coenzyme))
    (description ("Small molecule used in the enzymatic transfer of
                              acyl groups in the cell. Alberts:ECB:G-5")))
(Coenzyme has 
    (superclasses (Molecule))
    (description ("Small molecule tightly associated with an enzyme
                         that participates in the reaction that the enzyme
                         catalyzes, often by forming a transient covalent
                         bond to the substrate.  Examples include biotin,
                         NAD+, and coenzymeA.  Alberts:MBC:G-6"))
    )

(every Coenzyme has 
    (purpose ((a Instrument-Role with (in-event ((a Enzyme-Activation))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Coefficient-Value has 
    (superclasses (Property-Value))
    (range-of (coefficient))
    (domain-of (coefficient-of)))

(every Coefficient-Value has 
    (property-slot ((coefficient)))
    (quantity-of ((must-be-a Chemical)))
    (less-than ((must-be-a Coefficient-Value)))
    (greater-than ((must-be-a Coefficient-Value)))
    (same-as ((must-be-a Coefficient-Value))))
(Codon has 
    (superclasses (Coding-Sequence-Type))
    (description ("Sequence of three nucleotides in DNA or mRNA that
                          represents the instruction for incorporation of a
                          specific amino acid into a polypeptide chain.
                          Alberts:ECB:G-5."))
    )

(every Codon has 
    (element-type ((Nucleotide)))
    (number-of-elements (3)))
(Coding-Sequence-Type has 
    (superclasses (Genetic-Information-Sequence))
    (description ("The class of DNA or RNA sequence types which contain
                         genetic information, encoded in nucleotide triplets,
                         termed codons.  Souther."))
    )
(Coding-Sequence has 
    (superclasses (Coding-Sequence-Type))
    (description ("A DNA or RNA sequence which contains genetic 
                         information, encoded in nucleotide triplets, termed
                         codons.  Souther."))
    (has-basic-functional-unit ((a Codon)))
    (element ((at-least 1 Codon)))
    )
(COA-Efficiency has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(COA-Effectiveness has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(COA has 
    (superclasses (Action)))

(every COA has 
    (agent ((a Military-Unit)))
    (subevent ((at-least 1 Event))))
(CO3-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every CO3-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.79E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a CO3-Minus-2))))
(CO3-Minus-2 has 
    (superclasses (Anion)))

(every CO3-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("carbonate"))
    (has-acid-name ("carbonic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 O))))))))
(CO2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every CO2-Substance has 
    (has-basic-structural-unit ((a CO2)))
    (physical-state ((a State-Value with (value ((*gas)))))))
(CO2 has 
    (superclasses (Molecular-Compound)))

(every CO2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 2 O))))))))
(Co-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Co-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("cobalt"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Co))))))))
(Co has 
    (superclasses (Metal-Atom
                      VIIIB-Element)))

(every Co has 
    (atomic-symbol ((Co)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 27 ()))))))
    (chemical-period (4)))
(CNO-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every CNO-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.86E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a CNO-Minus))))
(CNO-Minus has 
    (superclasses (Anion)))

(every CNO-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("cyanate"))
    (has-acid-name ("cyanic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 1 N) (:pair 1 O))))))))
(CN-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every CN-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.04E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a CN-Minus))))
(CN-Minus has 
    (superclasses (Anion)))

(every CN-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("cyanide"))
    (has-acid-name ("hydrocyanic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 1 N))))))))
(CMP has 
    (superclasses (Ribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Cytidine monophosphate. One of the four nucleotides
                        in RNA.  Souther. ")))

(every CMP has 
    (complement ((must-be-a GMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Cytidine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Cytidine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Cytidine))))
(Close has 
    (caused-by-class-of (Be-Closed))
    (defeated-by-class-of (Be-Open))
    (superclasses (Block))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "portal through the barrier")
                          (:seq agent "closer")
                          (:seq instrument "portal covering")))
    (wn16-synset ((:set (:triple "close" 3 "v") (:triple "shut" 1 "v"))))
    (wn20-synset ((:set (:triple "close" 3 "v") (:triple "shut" 1 "v")))))

(every Close has 
    (object ((a Spatial-Entity with (plays ((a Portal))))))
    (instrument ((a Tangible-Entity)))
    (resulting-state ((a Be-Closed)))
    (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Open))))
    (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Closed) [Close-pcs-1])
               (:triple (the object of Self) object-of (a Be-Open) [Close-pcs-2])
               (:triple (the object of Self) object-of (mustnt-be-a Be-Blocked) [Close-pcs-3])))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Close-add-1])
               (:triple (the resulting-state of Self) instrument (the instrument of Self) [Close-add-2])
               (:triple (the instrument of Self) plays (a Portal-Covering with (in-event ((the resulting-state of Self)))) [Close-add-3])))
    (del-list ((forall (the defeats of Self) (:triple It object (the object of Self) [Close-del-1]))
               (:triple (the object of Self) plays (the Portal plays of (the object of Self)) [Close-del-2])))
    (text-active-verbseq-sg ("closes"))
    (text-active-verbseq-pl ("close"))
    (text-passive-verbseq-sg ("gets closed"))
    (text-passive-verbseq-pl ("get closed"))
    (text-argslots ((:seq base instrument path result)))
    (preparatory-event ((:default (a Open with (object ((the object of Self))) (base ((the base of Self))) (agent ((the agent of Self))) (instrument ((the instrument of Self)))) (a Unblock with (object ((the object of Self)))))))
    (text-nominalization ("closing")))
(ClO4-Minus has 
    (superclasses (Anion)))

(every ClO4-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("perchlorate"))
    (has-acid-name ("perchloric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cl) (:pair 4 O))))))))
(ClO3-Minus has 
    (superclasses (Anion)))

(every ClO3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("chlorate"))
    (has-acid-name ("chloric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cl) (:pair 3 O))))))))
(ClO2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every ClO2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 9.09E-13 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a ClO2-Minus))))
(ClO2-Minus has 
    (superclasses (Anion)))

(every ClO2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("chlorite"))
    (has-acid-name ("chlorous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cl) (:pair 2 O))))))))
(ClO-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every ClO-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 3.33E-7 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a ClO-Minus))))
(ClO-Minus has 
    (superclasses (Anion)))

(every ClO-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hypochlorite"))
    (has-acid-name ("hypochlorous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cl) (:pair 1 O))))))))
(Cliche has 
                                                                                                                  
    (superclasses (KM-Class)))
(Clear has 
    (superclasses (Engagement-Military-Task
                      Move))
    (description ("a tactical mission task to remove enemy forces within an assigned area")))

(every Clear has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (base ((a Spatial-Entity)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the base of Self)) and ((the location of (the agent of Self)) /= (the location of (the base of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the base of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the base of Self)))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 3 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ()))))))
    (origin ((the base of Self)))
    (text-nominalization ("clearing"))
    (text-base ("from"))
    (text-argslots ((:seq base site)))
    (text-active-verbseq-sg ("clears"))
    (text-active-verbseq-pl ("clear")))
(Class-Definition-Viewpoint has 
    (superclasses (Viewpoint)))

(every Class-Definition-Viewpoint has 
    (viewpoint-question ((if (has-value (the1 of (the viewpoint-target of Self))) then (make-phrase (:seq "What is" (if ((:set "A" "E" "I" "O" "U" "a" "e" "i" "o" "u") includes (#'(LAMBDA () (STRING (CHAR (STRING (KM-UNIQUE0 '(the1 of (the viewpoint-target of Self)))) 1))))) then (:seq "an") else (:seq "a")) (the1 of (the viewpoint-target of Self)) "nospace" "?")) else "Unable to answer the question.")))
    (viewpoint-answer ((if (has-value (the1 of (the viewpoint-target of Self))) then (if ((the1 of (the1 of (the viewpoint-query of Self))) = *class-description) then (make-phrase (:seq "<b>" (the instance-of of (the1 of (the viewpoint-target of Self))) "nospace" ":</b>" (make-sentence ((the user-description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the description of (the instance-of of (the1 of (the viewpoint-target of Self)))) or (the text-definition-sentence of (the1 of (the viewpoint-target of Self)))))))))))
    (viewpoint-detail ((if (has-value (the1 of (the viewpoint-target of Self))) then (make-phrase ((?targ == (the1 of (the viewpoint-target of Self))) and (?relconc == (forall ?trip in (the viewpoint-model-graph of Self) where (((the2 of ?trip) = instance-of) and ((the1 of ?trip) /= ?targ) and (?instphrase == (make-phrase (the text-indef-phrase of (the1 of ?trip)))) and (?instphrase /= "") and (?concorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(the3 of ?trip)))))) and ((?concorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?concorig includes *CLIB-LIST*)))) (the1 of ?trip))) and (?concsl == (forall ?trip in (the viewpoint-model-graph of Self) where ((((the2 of ?trip) isa Relation) or ((the2 of ?trip) isa Property)) and (?valphrase == (make-phrase (the text-indef-phrase of (the3 of ?trip)))) and (?valphrase /= "") and (not ((:set "an entity" "an event" "a role" "an intangible-entity" "a tangible-entity" "a spatial-entity" "a place") includes ?valphrase)) and (?fconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of (the1 of ?trip)) where t)))))) and ((?fconcorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?fconcorig includes *CLIB-LIST*))) and (?vconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of (the3 of ?trip)) where t)))))) and ((?vconcorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?vconcorig includes *CLIB-LIST*)))) (:pair (the1 of ?trip) (the2 of ?trip)))) and (:seq (get-justification (:triple (the1 of (the viewpoint-target of Self)) instance-of *)) (if (has-value ?relconc) then (:seq "<b><i>" "nospace" (make-sentence (:seq (the text-indef-head of ?targ) "</i></b>" "involves" (andify (forall ?c in ?relconc (make-phrase (the text-indef-phrase of ?c)))))) "
")) "<ul>
" (forall ?cs in ?concsl (:seq "<li>" "nospace" (make-sentence (if ((the2 of ?cs) isa Property) then (the text-description of (the (the2 of ?cs) of (the1 of ?cs))) else (:seq (the text-def-head of (the1 of ?cs)) (if (has-value (the text-gloss of (the2 of ?cs))) then (the text-gloss of (the2 of ?cs)) else (if (has-value (the text-slot of (the2 of ?cs))) then (:seq "is" (the (the text-slot of (the2 of ?cs)) of (the1 of ?cs))) else (:seq "--" (the2 of ?cs) "--"))) (andify (forall ?trip in (the viewpoint-model-graph of Self) where (((the1 of ?trip) = (the1 of ?cs)) and ((the2 of ?trip) = (the2 of ?cs))) (the text-indef-phrase of (allof ?vconc in (the3 of ?trip) where ((?vconcorig == (#'(LAMBDA () (GET-CONCEPT-ORIGIN (KM-UNIQUE0 '(oneof (the classes of ?vconc) where t)))))) and ((?vconcorig includes *BIO-LBR-PUMP-PRIME-LIST*) or (not (?vconcorig includes *CLIB-LIST*))))))))))) "</li>
")) "</ul>
")))))))
(Class has 
    (range-of (range2
                  atomic-symbol))
    (domain-of (range2-of
                   atomic-symbol-of))
    (superclasses (Thing)))
(Cl-Minus has 
    (superclasses (Anion)))

(every Cl-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("chloride"))
    (has-acid-name ("hydrochloric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cl))))))))
(Cl has 
    (superclasses (Non-Metal-Atom
                      Halogen-Element)))

(every Cl has 
    (has-molecular-name ("chloride"))
    (atomic-symbol ((Cl)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 17 ()))))))
    (chemical-period (3)))
(City-Terrain has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every City-Terrain has 
    (trafficability ((a Trafficability-Value with (value ((:pair *R Armor-Unit) (:pair *R Mechanized-Infantry-Unit) (:pair *UR Light-Infantry-Unit)))))))
(City has 
    (superclasses (Administrative-District))
    (wn20-synset ((:set (:triple "city" 1 "n") (:triple "metropolis" 1 "n") (:triple "urban_center" 1 "n") (:triple "city" 2 "n") (:triple "city" 3 "n") (:triple "metropolis" 2 "n")))))
(Citric-Acid-Cycle has 
    (superclasses (Oxidation))
    (required-slot (object
                       donor))
    (primary-slot (agent
                      recipient
                      instrument))
    (description ("Central metabolic pathway in all aerobic organisms
                          that oxidizes acetyl groups derived from food
                          molecules to CO2.  In eucaryotic cells these
                          reactions are located in the mitochondrial matrix.
                          Alberts:ECB:G-4.")))
(Cistron has 
    (superclasses (Genetic-Information))
    (description ("The smallest unit of DNA that must be intact to code 
                        for the amino acid sequence of a polypeptide; thus,
                        the coding part of a gene, minus 5' and 3' untranslated
                        sequences and regulatory elements. Matthews:BC:1150.")))

(every Cistron has 
    (has-basic-functional-unit ((a DNA-Codon))))
(Circumference-Scale has 
    (scale-class-of (circumference))
    (superclasses (Scale)))
(Circumference-Constant has 
    (scalar-constant-class-of (circumference))
    (superclasses (Constant)))
(Chromosome has 
    (superclasses (Nucleoprotein-Complex))
    (description ("Long, threadlike structure composed of DNA and 
                        associated proteins that carries part or all of the
                        genetic information of an organism.  Alberts:ECB:G-4"))
    )

(every Chromosome has 
    (material ((a Chromatin)))
    (has-part ((a Eucaryotic-DNA)
               (a Histone-Complex with (element-type ((Histone))) (object-of ((a Be-Attached-To with (object ((a DNA-Molecule))))))))))
(Chromatin has 
    (superclasses (Organic-Substance))
    (description ("Complex of DNA, histones, and nonhistone proteins found
                        in the nucleus of a eucaryotic cell.  The material of
                        which chromosomes are made. Alberts:ECB:G-4.")))

(every Chromatin has 
    (material-of ((a Chromosome))))
(CHO2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every CHO2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 5.55E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a CHO2-Minus))))
(CHO2-Minus has 
    (superclasses (Anion)))

(every CHO2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("formate"))
    (has-acid-name ("formic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 1 H) (:pair 2 O))))))))
(Chemical-Solution has 
    (superclasses (Chemical))
    (description ("The homogeneous mixture of a solid, liquid, or gas
                        within a liquid or sometimes a solid or gas.
                        WNCD:1123."))
    )

(every Chemical-Solution has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical-Sequence has 
                                                                                                                 
    (superclasses (Chemical-Entity))
    (description ("A sequence of monomers that form a chain, e.g. 
			     polymers. Souther:2001")))

(every Chemical-Sequence has 
    (element-type ((Monomer)))
    (text-postmodslots ((:seq is-part-of is-at))))
(Chemical-Reduction has 
    (superclasses (Receive))
    (test-case ('(((a Receive with (recipient ((a O))) (object ((a Electron)))) isa Chemical-Reduction)))))

(every Chemical-Reduction has 
    (object ((a Electron with (object-of ((a Chemical-Oxidation)))))))

(every Chemical-Reduction has-definition 
    (instance-of (Receive
                     [Chemical-Reduction-instance-of-1]))
    (recipient ((a Atom)))
    (object ((a Electron))))
(Chemical-Oxidation has 
    (superclasses (Lose))
    (test-case ('(((a Lose with (donor ((a Na))) (object ((a Electron)))) isa Chemical-Oxidation)))))

(every Chemical-Oxidation has 
    (object ((a Electron with (object-of ((a Chemical-Reduction)))))))

(every Chemical-Oxidation has-definition 
    (instance-of (Lose
                     [Chemical-Oxidation-instance-of-1]))
    (donor ((a Atom)))
    (object ((a Electron))))
(Chemical-Mixture has 
    (superclasses (Chemical))
    (description ("An aggregate of two or more substances that are not
                            chemically united and that exist in no fixed 
                            proportion to each other. RHCD:856."))
    )

(every Chemical-Mixture has 
    (material ((a Substance)
               (a Substance)
               (at-least 2 Substance)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical-Information-Sequence has 
                                                                                
    (superclasses (Chemical-Sequence))
    (description ("A sequence which encodes information.  Biological
                         examples are DNA, RNA, and the amino acid sequence of
                         proteins (which determines folding). Souther. ")))
(Chemical-Information has 
    (superclasses (Information))
    (description ("Information in the form of chemical structures, such
                         as the sequence of amino acids in a protein.
                         Souther.")))

(every Chemical-Information has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical-Group has 

    (superclasses (Chemical-Entity))
    (description ("Set of covalently linked atoms, such as a hydroxyl
                             group or an amino group, that occurs in many
                             different molecules and has a distinctive chemical
                             character. Alberts:ECB:G-4.")))

(every Chemical-Group has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical-Formula has 
    (superclasses (KM-Class))
    (test-case ('((*Na2CO3 has (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na) (:pair 1 C) (:pair 3 O)))))))) (((the string-name of (the has-chemical-formula of *Na2CO3))) = ("Na2CO3")))))
    (range-of (atomic-chemical-formula
                  has-chemical-formula
                  nested-atomic-chemical-formula
                  string-name-of
                  term-of))
    (domain-of (atomic-chemical-formula-of
                   has-chemical-formula-of
                   nested-atomic-chemical-formula-of
                   string-name
                   term)))

(every Chemical-Formula has 
    (term ((must-be-a Thing)))
    (string-name ((if (has-value (the2 of (the1 of (the term of Self)))) then #'(LAMBDA () (LIST (CHF-TO-STRING (KM0 '(the term of Self)))))))))
(Chemical-Entity has 
    (superclasses (Physical-Object))
    (member-of (_Partition5))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
    (domain-of (atomic-chemical-formula
                   charge
                   has-chemical-formula
                   nested-atomic-chemical-formula
                   oxidation-state))
    (range-of (atomic-chemical-formula-of
                  charge-of
                  has-chemical-formula-of
                  nested-atomic-chemical-formula-of
                  oxidation-state-of)))

(every Chemical-Entity has 
    (atomic-chemical-formula ((if (not (the atomic-chemical-formula of Self)) then (a Chemical-Formula with (term ((:default (if (the term of (the nested-atomic-chemical-formula of Self)) then #'(LAMBDA () (DENEST-ATOMIC-FORMULA (KM-UNIQUE0 '(the term of (the nested-atomic-chemical-formula of Self))))) else (if (the term of (the has-chemical-formula of Self)) then #'(LAMBDA () (LIST (COMPUTE-ATOMIC-CHEMICAL-FORMULA (KM0 '(the term of (the has-chemical-formula of Self)))))))))))))))
    (oxidation-state ((if (not (Self isa Ionic-Compound)) then (the output of (a Compute-Oxidation-State with (input (Self)))) [Chemical-Entity-oxidation-state-1])))
    (text-has-part ("made of"))
    (text-result-of ("product of"))
    (text-raw-material-of ("reactant in"))
    (text-premodslots ((:seq)))
    (text-postmodslots ((:seq has-part result-of raw-material-of)))
    (text-gen ((make-phrase (the text-phrase of Self))))
    (text-description ((the text-gen of Self)))
    (text-head ((((if ((the elements of (the term of (the has-chemical-formula of Self))) = (:set (:pair 1 H-Plus) (:pair 1 OH-Minus))) then (:seq "H2O" ()))) && ((if ((the elements of (the term of (the has-chemical-formula of Self))) /= (:set (:pair 1 H-Plus) (:pair 1 OH-Minus))) then (if (has-value (the string-name of (the has-chemical-formula of Self))) then (:seq (the string-name of (the has-chemical-formula of Self)) (if (has-value (the value of (the charge of Self))) then (if ((the1 of (the value of (the charge of Self))) > 0) then (:seq (if ((the1 of (the value of (the charge of Self))) > 1) then (the1 of (the value of (the charge of Self)))) "nospace" "+") else (if ((the1 of (the value of (the charge of Self))) < 0) then (:seq (if ((the1 of (the value of (the charge of Self))) < -1) then (0 - (the1 of (the value of (the charge of Self))))) "nospace" "-"))))) else (if (has-value (the string-name of (the atomic-chemical-formula of Self))) then (:seq (the string-name of (the atomic-chemical-formula of Self)) (if (has-value (the value of (the charge of Self))) then (if ((the1 of (the value of (the charge of Self))) > 0) then (:seq (if ((the1 of (the value of (the charge of Self))) > 1) then (the1 of (the value of (the charge of Self)))) "nospace" "+") else (if ((the1 of (the value of (the charge of Self))) < 0) then (:seq (if ((the1 of (the value of (the charge of Self))) < -1) then (the1 of (the value of (the charge of Self)))) "nospace" "-"))))) else (if (the called of Self) then (:seq (the called of Self)) else (the name of Self)))))))))
    (text-def-determiner ((if ((has-value (the string-name of (the has-chemical-formula of Self))) or (has-value (the string-name of (the atomic-chemical-formula of Self)))) then (:seq "") else (:seq "the")))))
(Chemical-Energy-Transfer has 
                                              
    (superclasses (Energy-Transfer))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("The transfer of chemical energy from one entity to 
                          another.  Souther. ")))

(every Chemical-Energy-Transfer has 
    (donor ((a Chemical-Entity)))
    (recipient ((a Chemical-Entity)))
    (object ((a Chemical-Energy))))
(Chemical-Energy has 
    (superclasses (Energy))
    (description ("Energy produced by or stored in chemical 
                                properties or property differentials, such as
                                chemical bonds, such as charge gradients, 
                                density gradients, etc."))
    (wn20-synset ((:set (:triple "chemical_energy" 1 "n"))))
    )
(Chemical-Color has 
    (superclasses (Color-Value)))
(Chemical-Bond-Energy-Transfer has 
    (superclasses (Chemical-Energy-Transfer))
    (required-slot (object
                       donor
                       recipient))
    (primary-slot (agent
                      instrument))
    (description ("The transfer of chemical energy from one molecule to
                          another.  Souther. ")))

(every Chemical-Bond-Energy-Transfer has 
    (donor ((a Molecule)))
    (recipient ((a Molecule)))
    (object ((a Chemical-Bond-Energy)))
    (instrument ((a Chemical-Bond))))
(Chemical-Bond-Energy has 
    (superclasses (Chemical-Energy))
    (description ("The strength of the chemical linkage 
                                    between two atoms, measured by the energy
                                    in kilocalories/mole needed to break it.
                                    Alberts:ECB:G-3.")))

(every Chemical-Bond-Energy has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical-Bond has 
    (superclasses (Bond
                      Chemical-Entity))
    (description ("Linkage between two atoms that holds them together
                             in a chemical compound.  Types found in living
                             cells include ionic bonds, covalent bonds, polar
                             bonds, and hydrogen bonds.  Alberts:ECB:G-4."))
    )

(every Chemical-Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To with (object ((a Chemical-Entity) (a Chemical-Entity) (exactly 2 Chemical-Entity)))))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical-Base has 
                                                                 
    (superclasses (Chemical-Entity))
    (description ("Molecule that accepts proton(s) in 
                        solution.  Also used refer to the purines and 
                        pyrimidines in DNA and RNA. see  Alberts:ECB:G-3.")))

(every Chemical-Base has 
    (base-of ((a Add called "protonation" with (object ((a Hydrogen-Ion))) (base ((a Tangible-Entity with (instance-of ((possible-values Chemical-Entity Chemical)))))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Chemical has 
    (domain-of (volume
                   coefficient
                   concentration
                   conductivity
                   equilibrium-concentration
                   ka
                   kb
                   pka
                   pkb
                   scalar-concentration
                   solubility
                   solute-species-of
                   subscript))
    (range-of (volume-of
                  coefficient-of
                  concentration-of
                  conductivity-of
                  equilibrium-concentration-of
                  ka-of
                  kb-of
                  pka-of
                  pkb-of
                  scalar-concentration-of
                  solubility-of
                  solute-species
                  subscript-of))

    (superclasses (Substance))
    (test-case ('((a Hydrolysis with (raw-material ((a NH3-Substance called "Reactant" with (base-of ((a Solution with (pH ((a PH-Value with (value ((:pair 10.75 ()))))))))) (concentration ((a Concentration-Value with (value ((:pair 0.018 *molar))))))) (a H2O-Substance))) (result ((a Chemical with (has-basic-structural-unit ((a OH-Minus)))) (a Chemical with (has-basic-structural-unit ((a NH4-Plus))))))) ((the1 of (the value of (the equilibrium-concentration of ((the raw-material of (thelast Hydrolysis)) called "Reactant")))) = (0.017437657)) ((the1 of (the value of (the equilibrium-concentration of (the first of (the result of (thelast Hydrolysis)))))) = (5.623413E-4)) ((the1 of (the value of (the equilibrium-concentration of (the second of (the result of (thelast Hydrolysis)))))) = (5.623413E-4)) ((the1 of (the value of (the concentration of (the first of (the result of (thelast Hydrolysis)))))) = (0)) ((the1 of (the value of (the concentration of (the second of (the result of (thelast Hydrolysis)))))) = (0))))))

(every Chemical has 
    (has-basic-structural-unit ((a Chemical-Entity)))
    (quantity (((if ((not (has-value (the quantity of Self))) and (has-value (the Mixture is-part-of of Self))) then (the output of (a Compute-Quantity-from-Concentration-and-Volume with (input ((the concentration of Self) (the volume of (the Mixture is-part-of of Self))))))) & (if ((not (has-value (the quantity of Self))) and (has-value (the Mixture base-of of Self))) then (the output of (a Compute-Quantity-from-Concentration-and-Volume with (input ((the concentration of Self) (the volume of (the Mixture base-of of Self))))))) & (if ((not (has-value (the quantity of Self))) and (has-value (the raw-material of (the Mix result-of of (the Mixture is-part-of of Self))))) then (the output of (a Compute-Quantity-of-Chemical-in-Chemicals with (input ((the instance-of of (the has-basic-structural-unit of Self)) (the base of (the raw-material of (the Mix result-of of (the Mixture is-part-of of Self))))))))))))
    (concentration ((((if ((has-value (the Mixture is-part-of of Self)) and (not (the Equilibrium-Reaction raw-material-of of Self)) and (not (the Equilibrium-Reaction result-of of Self))) then (the output of (a Compute-Concentration-from-Quantity-and-Volume with (input ((the quantity of Self) (the volume of (the Mixture is-part-of of Self)))))) [Chemical-concentration-1])) && ((if ((has-value (the Mixture base-of of Self)) and (not (the Equilibrium-Reaction raw-material-of of Self)) and (not (the Equilibrium-Reaction result-of of Self))) then (the output of (a Compute-Concentration-from-Quantity-and-Volume with (input ((the quantity of Self) (the volume of (the Mixture base-of of Self)))))) [Chemical-concentration-2])) && ((if ((not (the concentration of Self)) and (the1 of (the value of (the equilibrium-concentration of Self))) and (the Equilibrium-Reaction raw-material-of of Self)) then (a Concentration-Value with (value ((:pair ((the1 of (the value of (the equilibrium-concentration of Self))) + ((the1 of (the value of (the coefficient of Self))) * ((the output of (a Compute-Concentration-Change-Constant with (input ((the Equilibrium-Reaction raw-material-of of Self))))) or 0))) *molar)))) [Chemical-concentration-3])) && ((if ((not (the concentration of Self)) and (the1 of (the value of (the equilibrium-concentration of Self))) and (the Equilibrium-Reaction result-of of Self) and (not (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Hydrolysis))) and (not (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Complete-Dissociation-Reaction)))) then (a Concentration-Value with (value ((:pair ((the1 of (the value of (the equilibrium-concentration of Self))) - ((the1 of (the value of (the coefficient of Self))) * ((the output of (a Compute-Concentration-Change-Constant with (input ((the Equilibrium-Reaction result-of of Self))))) or 0))) *molar)))) [Chemical-concentration-4])) && ((if ((not (the concentration of Self)) and (the Equilibrium-Reaction result-of of Self) and ((oneof (the Equilibrium-Reaction result-of of Self) where (It isa Hydrolysis)) or (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Complete-Dissociation-Reaction)))) then (a Concentration-Value with (value ((:pair 0 *molar)))) [Chemical-concentration-5])))))
    (equilibrium-concentration ((((if ((not (the equilibrium-concentration of Self)) and (the1 of (the value of (the concentration of Self))) and (the Equilibrium-Reaction raw-material-of of Self) and ((the1 of (the value of (the intensity of (the Acid-Role plays of Self)))) /= *strong)) then (a Concentration-Value with (value ((:pair ((the1 of (the value of (the concentration of Self))) - ((the1 of (the value of (the coefficient of Self))) * ((the output of (a Compute-Concentration-Change-Constant with (input ((the Equilibrium-Reaction raw-material-of of Self))))) or 0))) *molar)))) [Chemical-equilibrium-concentration-1])) && ((if ((not (the equilibrium-concentration of Self)) and (the1 of (the value of (the concentration of Self))) and (the Equilibrium-Reaction raw-material-of of Self) and ((the1 of (the value of (the intensity of (the Acid-Role plays of Self)))) = *strong)) then (a Concentration-Value with (value ((:pair 0 *molar)))) [Chemical-equilibrium-concentration-2])) && ((if ((not (the equilibrium-concentration of Self)) and (the1 of (the value of (the concentration of Self))) and (the Equilibrium-Reaction result-of of Self) and (not (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Hydrolysis))) and (not (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Complete-Dissociation-Reaction)))) then (a Concentration-Value with (value ((:pair ((the1 of (the value of (the concentration of Self))) + ((the1 of (the value of (the coefficient of Self))) * ((the output of (a Compute-Concentration-Change-Constant with (input ((the Equilibrium-Reaction result-of of Self))))) or 0))) *molar)))) [Chemical-equilibrium-concentration-3])) && ((if ((not (the equilibrium-concentration of Self)) and (the Equilibrium-Reaction result-of of Self) and ((oneof (the Equilibrium-Reaction result-of of Self) where (It isa Hydrolysis)) or (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Complete-Dissociation-Reaction))) and ((not (((the has-basic-structural-unit of Self) isa H-Plus) or ((the has-basic-structural-unit of Self) isa H3O-Plus) or ((the has-basic-structural-unit of Self) isa OH-Minus))) or ((((the has-basic-structural-unit of Self) isa H-Plus) or ((the has-basic-structural-unit of Self) isa H3O-Plus) or ((the has-basic-structural-unit of Self) isa OH-Minus)) and (not (oneof (the input-of of (the Equilibrium-Reaction result-of of Self)) where ((It isa Compute-Equilibrium-Constant) or (It isa Compute-Concentration-H-Plus) or (It isa Compute-Concentration-OH-Minus)))) and (not (oneof (the input-of of (the raw-material of (the Equilibrium-Reaction result-of of Self))) where (It isa Compute-Ionization-Percentage))))) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (oneof (the raw-material of (the result-of of Self)) where (not (It isa H2O-Substance))))))) /= *strong)) then (a Concentration-Value with (value ((:pair (the output of (a Compute-Concentration-Change-Constant with (input ((the Equilibrium-Reaction result-of of Self))))) *molar)))) [Chemical-equilibrium-concentration-4])) && ((if ((not (the equilibrium-concentration of Self)) and (the Equilibrium-Reaction result-of of Self) and ((oneof (the Equilibrium-Reaction result-of of Self) where (It isa Hydrolysis)) or (oneof (the Equilibrium-Reaction result-of of Self) where (It isa Complete-Dissociation-Reaction))) and ((the1 of (the value of (the intensity of (the Acid-Role plays of (oneof (the raw-material of (the result-of of Self)) where ((not (It isa H2O-Substance)) and (the1 of (the value of (the concentration of It))))))))) = *strong)) then (a Concentration-Value with (value ((:pair (the1 of (the value of (the concentration of (oneof (the raw-material of (the result-of of Self)) where ((not (It isa H2O-Substance)) and (the1 of (the value of (the concentration of It)))))))) *molar)))) [Chemical-equilibrium-concentration-5])))))
    (physical-state ((a State-Value)))
    (plays ((((if ((the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self))) and (not (the Base-Role plays of Self))) then (if ((has-value (oneof (the result of (the Reaction raw-material-of of Self)) where (((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (forall2 (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self)))) (if ((the2 of It2) = H) then (:pair ((the1 of It2) + 1) H) else It2))) or ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (the elements of (the append of (:seq (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self))) (:seq (:pair 1 H))))))))) or (has-value (oneof (the raw-material of (the Reaction result-of of Self)) where (((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (forall2 (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self)))) (if ((the2 of It2) = H) then (:pair ((the1 of It2) + 1) H) else It2))) or ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (the elements of (the append of (:seq (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self))) (:seq (:pair 1 H)))))))))) then (a Base-Role) [Chemical-plays-1]))) && ((if ((the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self))) and (not (the Acid-Role plays of Self))) then (if ((has-value (oneof (the result of (the Reaction raw-material-of of Self)) where ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (forall2 (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self)))) (if ((the2 of It2) = H) then (if ((the1 of It2) > 1) then (:pair ((the1 of It2) - 1) H)) else It2))))) or (has-value (oneof (the raw-material of (the Reaction result-of of Self)) where ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (forall2 (the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of Self)))) (if ((the2 of It2) = H) then (if ((the1 of It2) > 1) then (:pair ((the1 of It2) - 1) H)) else It2)))))) then (a Acid-Role) [Chemical-plays-2]))))))
    (text-has-part ("made of"))
    (text-result-of ("product of"))
    (text-raw-material-of ("reactant in"))
    (text-premodslots ((:seq)))
    (text-postmodslots ((:seq has-part result-of raw-material-of)))
    (text-gen ((make-phrase (the text-phrase of Self))))
    (text-description ((the text-gen of Self)))
    (text-def-head ((the text-head of Self)))
    (text-head ((the text-head of (the has-basic-structural-unit of Self))))
    (text-base-phrase ((the text-base-phrase of (the has-basic-structural-unit of Self))))
    (text-phrase ((if (has-value (the text-phrase of (the has-basic-structural-unit of Self))) then (the text-phrase of (the has-basic-structural-unit of Self)) else (the text-base-phrase of Self)))))
(Charge-Value has 
    (superclasses (Property-Value))
    (range-of (charge
                  capacitance))
    (domain-of (charge-of
                   capacitance-of)))

(every Charge-Value has 
    (property-slot ((charge)))
    (charge-of ((must-be-a Chemical-Entity)))
    (less-than ((must-be-a Charge-Value)))
    (greater-than ((must-be-a Charge-Value)))
    (same-as ((must-be-a Charge-Value))))
(Charge-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (charge
                                  capacitance)))
(CH4-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every CH4-Substance has 
    (has-chemical-name ("methane"))
    (has-basic-structural-unit ((a CH4))))
(CH4 has 
    (superclasses (Molecular-Compound)))

(every CH4 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 4 H))))))))
(CH3_3_NH-Plus has 
    (superclasses (Cation)))

(every CH3_3_NH-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("Trimethlyammonium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 (:seq (:pair 1 C) (:pair 3 H))) (:pair 1 N) (:pair 1 H))))))))
(CH3_3_N-Substance has 
    (superclasses (Base)))

(every CH3_3_N-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 6.4E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Trimethylamine"))
    (has-basic-structural-unit ((a CH3_3_N))))
(CH3_3_N has 
    (superclasses (Ionic-Compound)))

(every CH3_3_N has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 (:seq (:pair 1 C) (:pair 3 H))) (:pair 1 N))))))))
(CH3_2_NH2-Plus has 
    (superclasses (Cation)))

(every CH3_2_NH2-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("Dimethlyammonium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 (:seq (:pair 1 C) (:pair 3 H))) (:pair 1 N) (:pair 2 H))))))))
(CH3_2_NH-Substance has 
    (superclasses (Base)))

(every CH3_2_NH-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 5.4E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Dimethlyamine"))
    (has-basic-structural-unit ((a CH3_2_NH))))
(CH3_2_NH has 
    (superclasses (Ionic-Compound)))

(every CH3_2_NH has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 (:seq (:pair 1 C) (:pair 3 H))) (:pair 1 N) (:pair 1 H))))))))
(CH3OH-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every CH3OH-Substance has 
    (has-chemical-name ("methanol"))
    (has-basic-structural-unit ((a CH3OH))))
(CH3OH has 
    (superclasses (Molecular-Compound)))

(every CH3OH has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 O) (:pair 1 H)))))))
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 1 O) (:pair 4 H)))))))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 1 O) (:pair 4 H))))))))
(CH3NH3Cl-Substance has 
    (superclasses (Salt-Substance)))

(every CH3NH3Cl-Substance has 
    (has-basic-structural-unit ((a CH3NH3Cl))))
(CH3NH3Cl has 
    (superclasses (Salt)))

(every CH3NH3Cl has 
    (has-part ((a CH3NH3-Plus)
               (a Cl-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 CH3NH3-Plus) (:pair 1 Cl-Minus)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 N) (:pair 3 H) (:pair 1 Cl))))))))
(CH3NH3-Plus-Substance has 
    (superclasses (Cation-Substance)))

(every CH3NH3-Plus-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 2.3E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-basic-structural-unit ((a CH3NH3-Plus))))
(CH3NH3-Plus has 
    (superclasses (Metal-Cation)))

(every CH3NH3-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("Methylammonium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 N) (:pair 3 H))))))))
(CH3NH2-Substance has 
    (superclasses (Base)))

(every CH3NH2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 4.4E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Methylamine"))
    (has-basic-structural-unit ((a CH3NH2))))
(CH3NH2 has 
    (superclasses (Ionic-Compound)))

(every CH3NH2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 N) (:pair 2 H))))))))
(CH3COONa-Substance has 
    (superclasses (Salt-Substance)))

(every CH3COONa-Substance has 
    (has-basic-structural-unit ((a CH3COONa))))
(CH3COONa has 
    (superclasses (Ionic-Compound)))

(every CH3COONa has 
    (has-part ((a Na-Plus)
               (a CH3COO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Na-Plus) (:pair 1 CH3COO-Minus))))))))
(CH3COOH-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every CH3COOH-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))) (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.0E-5 nil)))))))))
    (has-basic-structural-unit ((a CH3COOH))))
(CH3COOH has 
    (superclasses (Ionic-Compound)))

(every CH3COOH has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 CH3COO-Minus))))))))
(CH3COO-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every CH3COO-Minus-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a CH3COO-Minus))))
(CH3COO-Minus has 
    (superclasses (Anion)))

(every CH3COO-Minus has 
    (has-chemical-name ("acetate"))
    (has-acid-name ("acetic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 C) (:pair 1 O) (:pair 1 O)))))))
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge)))))))
(CH3CH2OH-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every CH3CH2OH-Substance has 
    (plays ((a Acid-Role with (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))) (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.31E-14 nil)))))))))
    (has-chemical-name ("Ethanol"))
    (has-basic-structural-unit ((a CH3CH2OH))))
(CH3CH2OH has 
    (superclasses (Molecular-Compound)))

(every CH3CH2OH has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H) (:pair 1 C) (:pair 2 H) (:pair 1 O) (:pair 1 H))))))))
(CH3CH2NH3-Plus has 
    (superclasses (Cation)))
(CH3-Plus has 
    (superclasses (Cation)))

(every CH3-Plus has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H)))))))
    (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H)))))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H)))))))
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge)))))))
(CH3-Minus has 
    (superclasses (Anion)))

(every CH3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 C) (:pair 3 H))))))))
(Centrosome has 
    (superclasses (Organelle))
    (description ("Centrally located organelle of animal cells that is the
                        primary microtubule-organizing center and is
                        duplicated to form the spindle poles during mitosis.
                        In most animal cells it contains a pair of centrioles.
                        Alberts:ECB:G-4")))

(every Centrosome has 
    (purpose ((a Instrument-Role with (in-event ((a Mitosis))))))
    (has-part ((a Centriole)
               (exactly 2 Centriole))))
(Centriole has 
    (superclasses (Protein-Complex
                      Aggregate))
    (description ("Short cylindrical array of microtubules, usually found
                       in animal cells in a paired arrangement at the center 
                       of a centrosome.  Similar structures are found at the
                       base of cilia and flagella, where they are called basal
                       bodies. Alberts:ECB:G-4")))

(every Centriole has 
    (element-type ((Microtubule)))
    (purpose ((a Instrument-Role with (in-event ((a Mitosis))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Cellulose has 
    (superclasses (Polysaccharide))
    (description ("Structural polysaccharide consisting of long chains of
                        covalently linked glucose units.  It provides tensile
                        strength in plant cells. Alberts:ECB:G-4.")))

(every Cellulose has 
    (purpose ((a Instrument-Role with (in-event ((a Be-Supported with (object ((a Plant-Cell))))))))))
(Cellular-Respiration has 
    (superclasses (Oxidation))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("The process by which glucose is broken down to
                          CO2 and water.  Normally, ATP is generated in the
                          process.  Substages include glycolysis, citric acid
                          cycle, and oxidative phosphorylation.  Souther.")))

(every Cellular-Respiration has 
    (raw-material ((a Glucose)
                   (a Oxygen-Atom)
                   (exactly 6 Oxygen-Atom)))
    (result ((a Carbon-Dioxide)
             (exactly 6 Carbon-Dioxide)
             (a Water)
             (exactly 6 Water)
             (a ATP)
             (exactly 36 ATP)))
    (first-subevent ((the Glycolysis subevent of Self)))
    (subevent ((a Glycolysis with (next-event ((the Citric-Acid-Cycle subevent of Self))))
               (a Citric-Acid-Cycle with (next-event ((the Oxidative-Phosphorylation subevent of Self))))
               (a Oxidative-Phosphorylation))))
(Cell-Wall has 
    (superclasses (Organic-Structure))
    (description ("Mechanically strong fibrous layer deposited by a cell
                        outside its plasma membrane.  Prominent in most plants,
                        bacteria, algae, and fungi but not present in most 
                        animal cells.  Alberts:ECB:G-4.")))

(every Cell-Wall has 
    (is-part-of ((a Cell)))
    (encloses ((a Plasma-Membrane with (is-part-of ((the Cell is-part-of of Self))))))
    (purpose ((a Instrument-Role with (in-event ((a Be-Supported with (object ((a Cell))))))))))
(Cell-Locomotion has 
    (superclasses (Locomotion))
    (required-slot (agent))
    (primary-slot (object))
    (description ("The locomotion of a cell, usually accomplished 
                            internally using actin filaments or externally
                            using flagella or cilia.  Souther.")))

(every Cell-Locomotion has 
    (agent ((a Cell)))
    (object ((a Cell)))
    (instrument ((a Aggregate with (element-type ((Protein-Filament))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Cell has 
    (superclasses (Living-Entity
                      Suborganismal-Entity))
    (description ("The basic unit from which living organisms are made,
                     consisting of an aqueous solution of organic molecules
                     enclosed by a membrane.  All cells arise from existing
                     cells, usually by a process of division into two.
                     (Alberts:ECB:G-3)."))
    )

(every Cell has 
    (is-part-of ((must-be-a Organism))))
(Ceiling has 
    (superclasses (Architectural-Structure))
    (description ("a horizontal architectural structure covering a room"))
    (wn20-synset ((:set (:triple "ceiling" 1 "n")))))

(every Ceiling has 
    (orientation ((a Angle-Value with (value ((:pair *horizontal Entity))))))
    (is-part-of ((a Room)))
    (plays ((a Cover)))
    (is-above ((((the Room is-part-of of Self)) && ((the content of (the Container plays of (the Room is-part-of of Self))))))))
(Cd-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Cd-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("cadmium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Cd))))))))
(Cd has 
    (superclasses (Metal-Atom
                      IIB-Element)))

(every Cd has 
    (atomic-symbol ((Cd)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 48 ()))))))
    (chemical-period (5)))
(Ca_OH_2-Substance has 
    (superclasses (Base)))

(every Ca_OH_2-Substance has 
    (plays ((a Base-Role with (intensity ((a Intensity-Value with (value ((:pair *strong Base)))))))))
    (has-basic-structural-unit ((a Ca_OH_2))))
(Ca_OH_2 has 
    (superclasses (Ionic-Compound)))

(every Ca_OH_2 has 
    (has-part ((a Ca-Plus-2)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca-Plus-2) (:pair 2 OH-Minus))))))))
(Ca_OCl_2-Substance has 
    (superclasses (Strong-Electrolyte)))

(every Ca_OCl_2-Substance has 
    (has-basic-structural-unit ((a Ca_OCl_2))))
(Ca_OCl_2 has 
    (superclasses (Ionic-Compound)))

(every Ca_OCl_2 has 
    (has-part ((a Ca-Plus-2)
               (a OCl-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca-Plus-2) (:pair 2 OCl-Minus))))))))
(Cavalry-Unit has 
                                                                                                                                       
    (superclasses (Military-Unit)))
(Cavalry-Squadron has 
    (superclasses (Cavalry-Unit
                      Squadron)))

(every Cavalry-Squadron has-definition 
    (instance-of (Cavalry-Unit
                     Squadron)))
(Cavalry-Regiment has 
    (superclasses (Cavalry-Unit
                      Regiment)))

(every Cavalry-Regiment has-definition 
    (instance-of (Cavalry-Unit
                     Regiment)))
(Cavalry-Fighting-Vehicle has 
    (superclasses (Fighting-Vehicle))
    )
(Cation-Substance has 
                                                                                                             
    (superclasses (Ionic-Substance)))

(every Cation-Substance has 
    (solubility ((a Solubility-Value with (value ((:pair *soluble H2O-Substance))))))
    (has-basic-structural-unit ((a Cation))))
(Cation has 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
    (superclasses (Ion)))

(every Cation has 
    (charge ((must-be-a Charge-Value)
             (constraint ((the1 of (the value of TheValue)) > 0))))
    (plays ((a Lewis-Acid-Role))))
(Categorical has 
    (domain-of (categorical-constant
                   categorical-value-of))
    (range-of (categorical-constant-of
                  categorical-value))
    (superclasses (Property-Group)))
(Catalyze has 
    (superclasses (Action))
    (required-slot (result
                       substrate))
    (primary-slot (agent
                      instrument))
    (description ("A chemical reaction whose rate is facilitated by
                              the presence of a substance which is not altered
                              by the reaction. Souther."))
    )

(every Catalyze has 
    (substrate ((a Chemical-Entity)))
    (result ((a Chemical-Entity)
             (at-least 1 Chemical-Entity)))
    (instrument ((a Chemical-Entity)))
    (text-active-verbseq-sg ("catalyzes"))
    (text-active-verbseq-pl ("catalyze"))
    (text-passive-verbseq-sg ("gets catalyzed"))
    (text-passive-verbseq-pl ("get catalyzed"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Catalyst has 
    (superclasses (Role))
    (description ("A molecule that accelerates a chemical reaction without
                       itself undergoing a change.  Alberts:ECB:G-3."))
    (wn16-synset ((:set (:triple "catalyst" 1 "n") (:triple "accelerator" 3 "n"))))
    (wn20-synset ((:set (:triple "catalyst" 1 "n") (:triple "accelerator" 3 "n")))))

(every Catalyst has 
    (in-event ((a Catalyze)))
    (played-by ((a Chemical-Entity with (instrument-of ((the in-event of Self))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Catabolize has 
    (superclasses (Break
                      Enzyme-Catalysis))
    (required-slot (object))
    (primary-slot (agent
                      result
                      instrument))
    (description ("Cellular process whereby complex molecules are
                          degraded to simpler ones and energy is released.
                          Lodish:MCB:G-2."))
    (wn16-synset ((:set (:triple "catabolize" 1 "v"))))
    (wn20-synset ((:set (:triple "catabolize" 1 "v"))))
    )

(every Catabolize has 
    (agent ((a Suborganismal-Entity)))
    (object ((a Chemical-Entity)))
    (substrate ((the Chemical-Entity object of Self)))
    (result ((a Chemical-Entity)
             (a Chemical-Entity)
             (at-least 2 Chemical-Entity)))
    (instrument ((a Catabolic-Enzyme)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Catabolic-Enzyme has 
    (superclasses (Enzyme))
    (description ("An enzyme involved in the breakdown of large molecules
                        into smaller accompanied by the release of energy.
                        Souther (see Alberts:ECB:G-3 on catabolic)."))
    )

(every Catabolic-Enzyme has 
    (purpose ((a Catalyst with (in-event ((a Catabolize)))))))
(Casualties has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Carry has 
    (superclasses (Move))
    (required-slot (agent
                       object))
    (primary-slot (origin
                      destination
                      path))
    (cmap-correspondence ((:seq agent "the carrier")
                          (:seq object "the thing carried")
                          (:seq origin "original location")
                          (:seq destination "final location")
                          (:seq path "through")))
    (test-case ('((*Carry has (instance-of (Carry)) (agent (*agent)) (object (*object))) (the subevent of *Carry) (the text-gen of (thelast Carry)))))
    (wn16-synset ((:set (:triple "carry" 1 "v") (:triple "carry" 2 "v") (:triple "pack" 2 "v") (:triple "take" 30 "v") (:triple "transport" 1 "v"))))
    (wn20-synset ((:set (:triple "carry" 1 "v") (:triple "carry" 2 "v") (:triple "pack" 2 "v") (:triple "take" 30 "v") (:triple "transport" 1 "v")))))

(every Carry has 
    (agent ((a Tangible-Entity)))
    (object ((a Tangible-Entity)))
    (first-subevent ((:set (the Locomotion subevent of Self) (the Hold subevent of Self))))
    (subevent ((a Locomotion with (agent ((the agent of Self))) (origin ((the origin of Self))) (destination ((the destination of Self))) (time-during ((a Time-Interval with (time-int-during ((the time-during of (the Hold subevent of Self))))))))
               (a Hold with (agent ((the agent of Self))) (object ((the object of Self))))))
    (text-active-verbseq-sg ("carries"))
    (text-active-verbseq-pl ("carry"))
    (text-passive-verbseq-sg ("gets carried"))
    (text-passive-verbseq-pl ("get carried"))
    (text-nominalization ("carrying")))
(Carrier has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "carrier" 6 "n"))))
    (wn20-synset ((:set (:triple "carrier" 6 "n")))))

(every Carrier has 
    (in-event ((a Transmit)))
    (played-by ((a Entity with (instrument-of ((the in-event of Self)))))))
(Cardinal has 
    (range-of (cardinal-value
                  numeric-value-of
                  reference-class-of
                  unit-of))
    (domain-of (cardinal-value-of
                   numeric-value
                   reference-class
                   unit))
    (superclasses (Property-Group)))
(Carboxylic-Acid has 
    (superclasses (Organic-Molecule
                      Acid))
    (description ("Organic compounds containing the carboxy group
                          (-COOH). This group of compounds includes amino acids
                          and fatty acids. Carboxylic acids can be saturated,
                          unsaturated, or aromatic. PubMed:MeSH.")))

(every Carboxylic-Acid has 
    (has-part ((a Carboxyl-Group)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Carboxyl-Terminus has 
    (superclasses (Protein-Region))
    (description ("That end of a polypeptide chain which carries an 
                        unattached carboxylic acid group. Alberts:ECB:G-3")))

(every Carboxyl-Terminus has 
    (is-region-of ((must-be-a Amino-Acid-Sequence)))
    (has-part ((a Amino-Acid with (has-part ((a Carboxyl-Group with (object-of ((mustnt-be-a Be-Attached-To with (object ((a Amino-Group with (is-part-of ((a Amino-Acid))))))))))))))))
(Carboxyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Chemical group consisting of a carbon atom linked
                             both to an oxygen atom by a double bond and to a
                             hydroxyl group.  Molecules containing a carboxyl
                             group are weak acids (carboxylic acids).
                             Alberts:ECB:G-3.")))

(every Carboxyl-Group has 
    (has-part ((a Carbon-Atom with (object-of ((a Be-Attached-To with (object (((the Oxygen-Atom has-part of Self) called "one oxygen"))) (instrument ((a Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the Oxygen-Atom has-part of Self) called "the other oxygen"))) (instrument ((a Double-Covalent-CO-Bond)))))))
               (a Hydrogen-Atom)
               (a Oxygen-Atom called "one oxygen" with (object-of ((a Be-Attached-To with (object ((the Hydrogen-Atom has-part of Self)))))))
               (a Oxygen-Atom called "the other oxygen"))))
(Carbonyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Chemical group consisting of a carbon atom linked
                             to an oxygen atom by a double bond. 
                             Alberts:ECB:G-3.")))

(every Carbonyl-Group has 
    (has-part ((a Oxygen-Atom)
               (a Carbon-Atom with (object-of ((a Be-Attached-To with (object ((the Oxygen-Atom has-part of Self))) (instrument ((a Double-Covalent-CO-Bond))))))))))
(Carbon-Dioxide has 
    (superclasses (Inorganic-Molecule))
    (description ("Chemical group consisting of a carbon atom linked
                             to two oxygen atoms by covalent bonds.
                             Souther. ")))

(every Carbon-Dioxide has 
    (has-part ((a Carbon-Atom with (object-of ((a Be-Attached-To with (object (((the Oxygen-Atom has-part of Self) called "one oxygen"))) (instrument ((a Double-Covalent-CO-Bond)))) (a Be-Attached-To with (object (((the Oxygen-Atom has-part of Self) called "the other oxygen"))) (instrument ((a Double-Covalent-CO-Bond)))))))
               (a Oxygen-Atom called "one oxygen")
               (a Oxygen-Atom called "the other oxygen"))))
(Carbon-Atom has 
                             
    (superclasses (Atom))
    (description ("The fundamental building block of living systems.
                        Souther. ")))

(every Carbon-Atom has 
    (atomic-symbol ((C)))
    (has-part ((a Proton)
               (exactly 6 Proton)
               (a Neutron)
               (exactly 6 Neutron)
               (a Electron)
               (exactly 6 Electron)))
    (mass ((a Mass-Value with (value ((:pair 12 *dalton))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Carbohydrate has 
    (superclasses (Organic-Molecule))
    (description ("General term for sugars and related compounds with
                        the general formula (CH2O)n.  Alberts:ECB:G-3."))
    )
(Capacity-Value has 
    (range-of (capacity))
    (domain-of (capacity-of))
    (superclasses (Property-Value))
    (test-case ('((*myBigBox has (instance-of (Physical-Object)) (capacity ((a Capacity-Value)))) (*myLittleBox has (instance-of (Physical-Object)) (capacity ((a Capacity-Value with (value ((:pair *roomy Physical-Object))) (less-than ((the capacity of *myBigBox))))))) (the value of (the capacity of *myLittleBox)) ((the less-than of (the capacity of *myLittleBox)) includes (the capacity of *myBigBox)) ((the greater-than of (the capacity of *myBigBox)) includes (the capacity of *myLittleBox))))))
(Capacity-Scale has 
    (scale-class-of (capacity))
                                     
    (superclasses (Scale)))
(Capacity-Constant has 
    (scalar-constant-class-of (capacity))
    (element-type-of (*none-unlimited-scale))
    (superclasses (Constant))
    )
(CaO-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every CaO-Substance has 
    (has-basic-structural-unit ((a CaO))))
(CaO has 
    (superclasses (Ionic-Compound)))

(every CaO has 
    (has-part ((a Ca-Plus-2)
               (a O-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca-Plus-2) (:pair 1 O-Minus-2))))))))
(Canalize has 
    (superclasses (Engagement-Military-Task
                      Confine))
    (description ("a tactical mission task in which a military unit restricts enemy movement to a narrow zone")))

(every Canalize has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (base ((a Terrain with (width ((a Length-Value with (value ((:pair *narrow Terrain)))))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.3 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.7 ()))))))
    (text-nominalization ("canalization"))
    (text-active-verbseq-sg ("canalizes"))
    (text-active-verbseq-pl ("canalize"))
    (text-base ("in"))
    (text-argslots ((:seq base path))))
(CaCO3-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every CaCO3-Substance has 
    (has-basic-structural-unit ((a CaCO3))))
(CaCO3 has 
    (superclasses (Ionic-Compound)))

(every CaCO3 has 
    (has-chemical-name (""))
    (has-part ((a Ca-Plus-2)
               (a CO3-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca-Plus-2) (:pair 1 CO3-Minus-2))))))))
(Cabinet has 
    (superclasses (Furniture))
    (wn20-synset ((:set (:triple "cabinet" 1 "n")))))
(Ca-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Ca-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("calcium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ca))))))))
(Ca has 
    (superclasses (Metal-Atom
                      IIA-Element)))

(every Ca has 
    (atomic-symbol ((Ca)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 20 ()))))))
    (chemical-period (4)))
(C7H5O2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C7H5O2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.59E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C7H5O2-Minus))))
(C7H5O2-Minus has 
    (superclasses (Anion)))

(every C7H5O2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("benzoate"))
    (has-acid-name ("benzoic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 7 C) (:pair 5 H) (:pair 2 O))))))))
(C7H5O-Minus has 
    (superclasses (Anion)))

(every C7H5O-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 5 H) (:pair 1 O))))))))
(C6H7O6-Minus has 
    (superclasses (Anion)))

(every C6H7O6-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 7 H) (:pair 6 O))))))))
(C6H6O6-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every C6H6O6-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 0.00625 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C6H6O6-Minus-2))))
(C6H6O6-Minus-2 has 
    (superclasses (Anion)))

(every C6H6O6-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 6 H) (:pair 6 O))))))))
(C6H5O7-Minus-3-Substance has 
    (superclasses (Anion-Substance)))

(every C6H5O7-Minus-3-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.5E-8 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C6H5O7-Minus-3))))
(C6H5O7-Minus-3 has 
    (superclasses (Anion)))

(every C6H5O7-Minus-3 has 
    (charge ((a Charge-Value with (value ((:pair -3 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 5 H) (:pair 7 O))))))))
(C6H5O-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C6H5O-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 7.69E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C6H5O-Minus))))
(C6H5O-Minus has 
    (superclasses (Anion)))

(every C6H5O-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 5 H) (:pair 1 O))))))))
(C6H5NH3-Plus has 
    (superclasses (Cation)))

(every C6H5NH3-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("anilinium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 5 H) (:pair 1 N) (:pair 3 H))))))))
(C6H5NH2-Substance has 
    (superclasses (Base)))

(every C6H5NH2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 4.3E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Aniline"))
    (has-basic-structural-unit ((a C6H5NH2))))
(C6H5NH2 has 
    (superclasses (Ionic-Compound)))

(every C6H5NH2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 6 C) (:pair 5 H) (:pair 1 N) (:pair 2 H))))))))
(C5H5NH-Plus has 
    (superclasses (Cation)))

(every C5H5NH-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("pyridinium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 5 C) (:pair 5 H) (:pair 1 N) (:pair 1 H))))))))
(C5H5N-Substance has 
    (superclasses (Base)))

(every C5H5N-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 1.7E-9 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Pyridine"))
    (has-basic-structural-unit ((a C5H5N))))
(C5H5N has 
    (superclasses (Ionic-Compound)))

(every C5H5N has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 5 C) (:pair 5 H) (:pair 1 N))))))))
(C4H7O2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C4H7O2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 6.66E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C4H7O2-Minus))))
(C4H7O2-Minus has 
    (superclasses (Anion)))

(every C4H7O2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 4 C) (:pair 7 H) (:pair 2 O))))))))
(C4H4O6-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every C4H4O6-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 2.17E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C4H4O6-Minus-2))))
(C4H4O6-Minus-2 has 
    (superclasses (Anion)))

(every C4H4O6-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 4 C) (:pair 4 H) (:pair 6 O))))))))
(C3H5O3-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C3H5O3-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 7.14E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C3H5O3-Minus))))
(C3H5O3-Minus has 
    (superclasses (Anion)))

(every C3H5O3-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 C) (:pair 5 H) (:pair 3 O))))))))
(C3H5O2-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C3H5O2-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 7.69E-10 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C3H5O2-Minus))))
(C3H5O2-Minus has 
    (superclasses (Anion)))

(every C3H5O2-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 C) (:pair 5 H) (:pair 2 O))))))))
(C3H2O4-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every C3H2O4-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 5.0E-9 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C3H2O4-Minus-2))))
(C3H2O4-Minus-2 has 
    (superclasses (Anion)))

(every C3H2O4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 C) (:pair 2 H) (:pair 4 O))))))))
(C2O4-Minus-2-Substance has 
    (superclasses (Anion-Substance)))

(every C2O4-Minus-2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 0.0016 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C2O4-Minus-2))))
(C2O4-Minus-2 has 
    (superclasses (Anion)))

(every C2O4-Minus-2 has 
    (charge ((a Charge-Value with (value ((:pair -2 *electronic-charge))))))
    (has-chemical-name ("Oxalate"))
    (has-acid-name ("Oxalic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 C) (:pair 4 O))))))))
(C2H5NH3-Plus has 
    (superclasses (Cation)))

(every C2H5NH3-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("Ethlyammonium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 C) (:pair 5 H) (:pair 1 N) (:pair 3 H))))))))
(C2H5NH2-Substance has 
    (superclasses (Base)))

(every C2H5NH2-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 6.4E-4 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name ("Ethylamine"))
    (has-basic-structural-unit ((a C2H5NH2))))
(C2H5NH2 has 
    (superclasses (Ionic-Compound)))

(every C2H5NH2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 C) (:pair 5 H) (:pair 1 N) (:pair 2 H))))))))
(C2H5COOH-Substance has 
    (superclasses (Acid)))

(every C2H5COOH-Substance has 
    (plays ((a Acid-Role with (default-ka ((a Equilibrium-Constant-Value with (value ((:pair 1.3E-5 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Acid)))))))))
    (has-chemical-name ("propanoic"))
    (has-basic-structural-unit ((a C2H5COOH))))
(C2H5COOH has 
    (superclasses (Ionic-Compound)))

(every C2H5COOH has 
    (has-part ((a H-Plus)
               (a C2H5COO-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 H-Plus) (:pair 1 C2H5COO-Minus))))))))
(C2H5COO-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C2H5COO-Minus-Substance has 
    (has-basic-structural-unit ((a C2H5COO-Minus))))
(C2H5COO-Minus has 
    (superclasses (Anion)))

(every C2H5COO-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("propanoate"))
    (has-acid-name ("propanoic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 C) (:pair 5 H) (:pair 1 C) (:pair 1 O) (:pair 1 O))))))))
(C2H2O2Cl-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every C2H2O2Cl-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 7.14E-11 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a C2H2O2Cl-Minus))))
(C2H2O2Cl-Minus has 
    (superclasses (Anion)))

(every C2H2O2Cl-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name (""))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 C) (:pair 2 H) (:pair 2 O) (:pair 1 Cl))))))))
(C has 
    (superclasses (Non-Metal-Atom
                      IVA-Element)))

(every C has 
    (has-molecular-name ("carbide"))
    (atomic-symbol ((C)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 6 ()))))))
    (chemical-period (2)))
(Bypass has 
    (superclasses (Non-Engagement-Military-Task
                      Locomotion))
    (description ("a tactical mission task in which a military unit maneuvers around an obstacle")))

(every Bypass has 
    (agent ((a Military-Unit)))
    (base ((a Spatial-Entity)))
    (path ((constraint (not ((the base of Self) includes TheValue)))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.99 ()))))))
    (text-nominalization ("bypassing"))
    (text-base (""))
    (text-argslots ((:seq base path site)))
    (text-active-verbseq-sg ("bypasses"))
    (text-active-verbseq-pl ("bypass")))
(Buy has 
    (superclasses (Obtain))
    (test-case ('((new-situation) (*My-Bike has (instance-of (Tangible-Entity))) (*Me has (instance-of (Tangible-Entity)) (possesses (*My-Bike))) (*200-Dollars has (instance-of (Money)) (worth ((a Worth-Value with (value ((:pair 200 *usdollar))))))) (*Jim has (instance-of (Tangible-Entity)) (possesses (*200-Dollars))) (a Buy with (agent (*Jim)) (object (*My-Bike)) (donor (*Me)) (instrument (*200-Dollars))) (do-script (thelast Buy)) (the text-gen of (thelast Buy)) ((the possesses of *Jim) = *My-Bike) ((the is-possessed-by of *My-Bike) = *Jim) ((the agent of (thelast Buy)) = (the recipient of (thelast Buy))) ((the possesses of *Me) = *200-Dollars) ((the is-possessed-by of *200-Dollars) = *Me))))
    (wn20-synset ((:set (:triple "buy" 1 "v") (:triple "purchase" 1 "v")))))

(every Buy has 
    (donor ((a Tangible-Entity)))
    (instrument ((a Money with (worth ((a Worth-Value with (value ((the value of (the worth of (the object of Self)))))))))))
    (first-subevent ((a Transfer with (object ((the instrument of Self))) (agent ((the agent of Self))) (donor ((the agent of Self))) (recipient ((the donor of Self))))))
    (subevent ((the first-subevent of Self)))
    (text-active-verbseq-sg ("buys"))
    (text-active-verbseq-pl ("buy"))
    (text-instrument ("for"))
    (text-nominalization ("buying")))
(Butylamine has 
    (superclasses (Chemical-Group))
    (description ("Amine derived from butane. CH3-CH2-CH2-CH2-NH3.
                             Souther.")))

(every Butylamine has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the Amino-Group has-part of Self)))) (instrument ((a Covalent-CN-Bond)))))))
               (a Amino-Group)
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-2"))))
(Butyl-Group has 
    (superclasses (Chemical-Group))
    (description ("Hydrophobic chemical group derived from butane.
                             Souther. ")))

(every Butyl-Group has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CC-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen-3"))) (Instrument-Role ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen-3"))))
(Building-Complex has 
    (superclasses (Architectural-Structure))
    (wn20-synset ((:set (:triple "complex" 4 "n") (:triple "building_complex" 1 "n")))))
(Building has 
    (superclasses (Architectural-Structure))
    (description ("an architectural structure playing a container, having a floor, rooms, walls and a roof"))
    (wn20-synset ((:set (:triple "building" 1 "n")))))

(every Building has 
    (plays ((a Container)))
    (has-part ((a Room)
               (a Floor)
               (a Wall)
               (a Roof))))
(Buffer-Status-Value has 
    (superclasses (Property-Value))
    (range-of (buffer-status))
    (domain-of (buffer-status-of)))

(every Buffer-Status-Value has 
    (property-slot ((buffer-status))))
(Buffer-Status-Constant has 
    (superclasses (Constant))
                                                                                                          
    (scalar-constant-class-of (buffer-status)))
(Buffer-Capacity-Value has 
    (superclasses (Property-Value))
    (range-of (buffer-capacity))
    (domain-of (buffer-capacity-of)))

(every Buffer-Capacity-Value has 
    (property-slot ((buffer-capacity))))
(Buffer-Capacity-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (buffer-capacity)))
(Buffer has 
                                                          
    (superclasses (Solution))
    (domain-of (buffer-capacity))
    (range-of (buffer-capacity-of)))

(every Buffer has-definition 
    (instance-of (Solution))
    (buffer-status ((a Buffer-Status-Value with (value ((:pair *buffer nil)))))))
(BTR-60 has 
    (superclasses (Armored-Personnel-Carrier)))

(every BTR-60 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.41 ())))))))
(Brunch has 
    (superclasses (Meal))
    (wn20-synset ((:set (:triple "brunch" 1 "n")))))

(every Brunch has 
    (text-nominalization ("brunch")))
(BrO-Minus-Substance has 
    (superclasses (Anion-Substance)))

(every BrO-Minus-Substance has 
    (plays ((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 4.0E-6 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base)))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a BrO-Minus))))
(BrO-Minus has 
    (superclasses (Anion)))

(every BrO-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("hypobromite"))
    (has-acid-name ("hypobromous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Br) (:pair 1 O))))))))
(Brightness-Value has 
    (range-of (brightness))
    (domain-of (brightness-of))
    (superclasses (Property-Value))
    (test-case ('((Star has (superclasses (Tangible-Entity))) (Lightbulb has (superclasses (Tangible-Entity))) (*whitegiant has (instance-of (Drink)) (brightness ((a Brightness-Value)))) (*browndwarf has (instance-of (Drink)) (brightness ((a Brightness-Value with (value ((:pair *bright Lightbulb) (:pair *dim Star))) (less-than ((the brightness of *whitegiant))))))) (the value of (the brightness of *browndwarf)) ((the less-than of (the brightness of *browndwarf)) includes (the brightness of *whitegiant)) ((the greater-than of (the brightness of *whitegiant)) includes (the brightness of *browndwarf))))))
(Brightness-Scale has 
    (scale-class-of (brightness))
                                    
    (superclasses (Scale)))
(Brightness-Constant has 
    (scalar-constant-class-of (brightness))
    (element-type-of (*dark-blinding-scale))
    (superclasses (Constant))
    )
(Brighten has 
    (superclasses (Increase))
    (test-case ('((*mylamp has (instance-of (Physical-Object)) (brightness (*mylampsbrightness))) (*mylampsbrightness has (instance-of (Brightness-Value)) (value ((:pair *blinding Physical-Object)))) (a Increase with (object (*mylamp)) (property-slot (brightness))) ((thelast Increase) isa Brighten) (do-and-next (thelast Brighten)) ((the greater-than of (the brightness of *mylamp)) includes *mylampsbrightness))))
    (wn20-synset ((:set (:triple "brighten" 1 "v") (:triple "brighten" 3 "v") (:triple "brighten" 4 "v") (:triple "lighten_up" 1 "v") (:triple "lighten" 3 "v") (:triple "lighten" 4 "v")))))

(every Brighten has 
    (text-nominalization ("brightening")))

(every Brighten has-definition 
    (instance-of (Increase))
    (property-slot ((brightness))))
(Brigade has 

    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Bridge-Terrain has 
    (superclasses (Terrain))
    (description ("A feature of the terrain")))

(every Bridge-Terrain has 
    (trafficability ((a Trafficability-Value with (value ((:pair *UR Armor-Unit) (:pair *UR Infantry-Unit))))))
    (site-of ((a Bridge))))
(Bridge has 
    (superclasses (Architectural-Structure))
    (description ("an architectural structure that acts as conduit over a barrier"))
    (test-case ('((*TooFar has (instance-of (Bridge))) (*RiverKwai has (instance-of (Tangible-Entity)) (plays ((a Barrier)))) (do-and-next (the in-event of (the plays of *RiverKwai))) (a Move with (object ((a Artifact))) (path ((the object of (the in-event of (the plays of *RiverKwai)))))) (not (try-do (thelast Move))) (a Move with (object ((a Artifact))) (path (*TooFar))) (do-and-next (thelast Move)))))
    (wn20-synset ((:set (:triple "bridge" 1 "n") (:triple "span" 5 "n")))))

(every Bridge has 
    (plays ((a Conduit)))
    (is-over ((a Entity with (plays ((a Barrier)))))))
(Breakfast has 
    (superclasses (Meal))
    (wn20-synset ((:set (:triple "breakfast" 1 "n")))))

(every Breakfast has 
    (text-nominalization ("breakfast")))
(Breakability-Value has 
    (range-of (breakability))
    (domain-of (breakability-of))
    (superclasses (Property-Value))
    (test-case ('((Glass has (superclasses (Substance))) (Stone has (superclasses (Substance))) (*window has (instance-of (Glass)) (breakability ((a Breakability-Value with (value ((:pair *brittle Substance))))))) (*granite has (instance-of (Stone)) (breakability ((a Breakability-Value with (value ((:pair *fragile Substance))) (less-than ((the breakability of *window))))))) (the value of (the breakability of *granite)) ((the less-than of (the breakability of *granite)) includes (the breakability of *window)) ((the greater-than of (the breakability of *window)) includes (the breakability of *granite))))))
(Breakability-Scale has 
    (scale-class-of (breakability))
                                            
    (superclasses (Scale)))
(Breakability-Constant has 
    (scalar-constant-class-of (breakability))
    (element-type-of (*breakable-unbreakable-scale))
    (superclasses (Constant))
    )
(Break-Contact has 
    (defeated-by-class-of (Be-Touching))
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "the things Breaking-Contact")
                          (:seq agent "the Contact-Breaker")))
    (wn16-synset ((:set (:triple "let_go" 1 "v"))))
    (wn20-synset ((:set (:triple "let_go" 1 "v")))))

(every Break-Contact has 
    (object ((exactly 1 Tangible-Entity)
             (a Tangible-Entity)))
    (base ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
    (defeats ((allof (the object-of of (the base of Self)) where (((the classes of It) = Be-Touching) and ((the object of It) includes (the object of Self))))))
    (del-list ((:set (forall (the defeats of Self) (:triple It object (the object of It) [Break-Contact-del-1])) (:triple (the base of Self) abuts (the object of Self) [Break-Contact-del-2]) (:triple (the object of Self) abuts (the base of Self) [Break-Contact-del-3]))))
    (text-active-verbseq-sg ("breaks contact between"))
    (text-active-verbseq-pl ("break contact between"))
    (text-passive-verbseq-sg ("breaks contact"))
    (text-passive-verbseq-pl ("break contact"))
    (text-base ((if (has-value (the base of Self)) then ("with"))))
    (preparatory-event ((:default (a Detach with (object ((the object of Self))) (base ((the base of Self)))) (a Make-Contact with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("breaking")))
(Break has 
    (caused-by-class-of (Be-Broken))
                                                                                                                                            
    (superclasses (Damage))
    (required-slot (object))
    (primary-slot (agent
                      instrument
                      by-means-of))
    (cmap-correspondence ((:seq object "the thing broken")
                          (:seq agent "the breaker")
                          (:seq by-means-of "the precipitating event")))
    (test-case ('((*Vase has (instance-of (Physical-Object))) (a Break with (object (*Vase))) (do-and-next (thelast Break)) (the text-gen of (thelast Break)) (the text-gen of (the resulting-state of (thelast Break))) (has-value (the Be-Broken object-of of *Vase)))))
    (wn16-synset ((:set (:triple "break" 3 "v") (:triple "break" 17 "v") (:triple "break_down" 4 "v") (:triple "conk_out" 1 "v") (:triple "die" 4 "v") (:triple "fail" 4 "v") (:triple "give_out" 4 "v") (:triple "give_way" 4 "v") (:triple "go" 30 "v"))))
    (wn20-synset ((:set (:triple "break" 4 "v") (:triple "break" 17 "v") (:triple "break_down" 4 "v") (:triple "conk_out" 1 "v") (:triple "die" 4 "v") (:triple "fail" 4 "v") (:triple "give_out" 4 "v") (:triple "give_way" 4 "v") (:triple "go" 30 "v")))))

(every Break has 
    (object ((a Tangible-Entity)))
    (resulting-state ((a Be-Broken)))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Break-add-1])))
    (text-active-verbseq-sg ("breaks"))
    (text-active-verbseq-pl ("break"))
    (text-passive-verbseq-sg ("gets broken"))
    (text-passive-verbseq-pl ("get broken"))
    (text-nominalization ("breaking")))
(Breach has 
    (superclasses (Break))
    (required-slot (object))
    (primary-slot (agent
                      result))
    (cmap-correspondence ((:seq agent "the breacher")
                          (:seq object "the barrier breached")
                          (:seq result "the resulting portal")))
    (test-case ('((*wall has (instance-of (Tangible-Entity))) (*Breacher has (instance-of (Tangible-Entity))) (*Portal has (instance-of (Spatial-Entity))) (a Breach with (agent (*Breacher)) (object (*wall)) (result (*Portal))) (do-and-next (thelast Breach)) ((the is-region-of of *Portal) = *wall))))
    (wn16-synset ((:set (:triple "breach" 2 "v") (:triple "gap" 1 "v"))))
    (wn20-synset ((:set (:triple "breach" 2 "v") (:triple "gap" 1 "v")))))

(every Breach has 
    (object ((must-be-a Tangible-Entity with (plays ((a Barrier))))))
    (result ((a Spatial-Entity with (plays ((a Portal))))))
    (agent ((must-be-a Tangible-Entity with (agent-of ((a Create with (result ((the result of Self)))))))))
    (add-list ((forall (the result of Self) (:triple It is-region-of (the object of Self) [Breach-add-1]))))
    (text-active-verbseq-sg ("breaches"))
    (text-active-verbseq-pl ("breach"))
    (text-passive-verbseq-sg ("gets breached"))
    (text-passive-verbseq-pl ("get breached"))
    (text-nominalization ("breach")))
(Br2-Substance has 
    (superclasses (Molecular-Compound-Substance)))

(every Br2-Substance has 
    (has-basic-structural-unit ((a Br2))))
(Br2 has 
    (superclasses (Molecular-Compound)))

(every Br2 has 
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Br)))))))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Br))))))))
(Br-Minus has 
    (superclasses (Anion)))

(every Br-Minus has 
    (charge ((a Charge-Value with (value ((:pair -1 *electronic-charge))))))
    (has-chemical-name ("bromide"))
    (has-acid-name ("hydrobromic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Br))))))))
(Br has 
    (superclasses (Non-Metal-Atom
                      Halogen-Element)))

(every Br has 
    (has-molecular-name ("bromide"))
    (atomic-symbol ((Br)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 35 ()))))))
    (chemical-period (4)))
(Bound-Ribosome has 
    (superclasses (Ribosome))
    (description ("Ribosomes that are bound to the endoplasmic reticulum.
                        Areas with bound ribosomes are called rough endoplasmic
                        reticulum. Souther. ")))

(every Bound-Ribosome has 
    (object-of ((a Be-Attached-To with (base ((a Endoplasmic-Reticulum))) (site ((a Internal-Membrane with (is-part-of ((the base of (the Be-Attached-To object-of of Self)))))))))))
(Bond has 
    (superclasses (Tangible-Entity))
    (description ("A uniting or binding element or force. Websters 9th
                        NCD:166"))
    )

(every Bond has 
    (purpose ((a Connector with (in-event ((a Be-Attached-To))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(BO3-Minus-3 has 
    (superclasses (Anion)))

(every BO3-Minus-3 has 
    (charge ((a Charge-Value with (value ((:pair -3 *electronic-charge))))))
    (has-chemical-name ("Borate"))
    (has-acid-name ("Boric"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 B) (:pair 3 O))))))))
(BMP-2 has 
    (superclasses (Infantry-Fighting-Vehicle)))

(every BMP-2 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.7 ())))))))
(Blue-Reserve-Availability has 
    (superclasses (Critique-Dimension))
    (description ("A criterion for evaluating COAs")))
(Blue-Army has 
    (superclasses (Army)))

(every Blue-Army has 
    (allegiance ((a Allegiance-Value with (value ((*Blue))))))
    (element ((a Armored-Division called "The 23rd Armored Division" with (element ((a Mechanized-Infantry-Brigade uniquely-called "The 3rd Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 1st Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 2nd Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 1st Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 1st Armored Battalion")))) (a Armored-Brigade uniquely-called "The 1st Brigade" with (element ((a Armored-Battalion uniquely-called "The 2nd Armored Battalion") (a Armored-Battalion uniquely-called "The 3rd Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 2nd Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 3rd Mechanized Infantry Battalion")))) (a Armored-Brigade uniquely-called "The 2nd Brigade" with (element ((a Armored-Battalion uniquely-called "The 4th Armored Battalion") (a Armored-Battalion uniquely-called "The 5th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 3rd Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 4th Mechanized Infantry Battalion")))) (a Armored-Brigade uniquely-called "The 4th Brigade" with (element ((a Armored-Battalion uniquely-called "The 6th Armored Battalion") (a Armored-Battalion uniquely-called "The 7th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 4th Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 5th Mechanized Infantry Battalion")))) (a General-Support-Artillery-Battalion uniquely-called "The 1st General Support Artillery Battalion") (a Aviation-Battalion uniquely-called "The 1st Aviation Attack Battalion") (a Aviation-Battalion uniquely-called "The 2nd Aviation Attack Battalion") (a Armored-Cavalry-Squadron uniquely-called "The 1st Armored Cavalry Squadron"))))
              (a Mechanized-Infantry-Division called "The 1st Mechanized Infantry Division" with (element ((a Mechanized-Infantry-Brigade uniquely-called "The 1st Mechanized Infantry Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 1st Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 2nd Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 1st Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 1st Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 2nd Mechanized Infantry Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 3rd Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 4th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 2nd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 2nd Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 4th Mechanized Infantry Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 5th Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 6th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 3rd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 3rd Armored Battalion")))) (a Armored-Brigade uniquely-called "The 3rd Tank Brigade" with (element ((a Armored-Battalion uniquely-called "The 4th Armored Battalion") (a Armored-Battalion uniquely-called "The 5th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 4th Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 7th Mechanized Infantry Battalion")))) (a General-Support-Artillery-Battalion uniquely-called "The 1st General Support Artillery Battalion"))))
              (a Mechanized-Infantry-Division called "The 2nd Mechanized Infantry Division" with (element ((a Mechanized-Infantry-Brigade uniquely-called "The 1st Mechanized Infantry Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 1st Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 2nd Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 1st Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 1st Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 2nd Mechanized Infantry Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 3rd Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 4th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 2nd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 2nd Armored Battalion")))) (a Mechanized-Infantry-Brigade uniquely-called "The 4th Mechanized Infantry Brigade" with (element ((a Mechanized-Infantry-Battalion uniquely-called "The 5th Mechanized Infantry Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 6th Mechanized Infantry Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 3rd Direct Support Artillery Battalion") (a Armored-Battalion uniquely-called "The 3rd Armored Battalion")))) (a Armored-Brigade uniquely-called "The 3rd Tank Brigade" with (element ((a Armored-Battalion uniquely-called "The 4th Armored Battalion") (a Armored-Battalion uniquely-called "The 5th Armored Battalion") (a Direct-Support-Artillery-Battalion uniquely-called "The 4th Direct Support Artillery Battalion") (a Mechanized-Infantry-Battalion uniquely-called "The 7th Mechanized Infantry Battalion")))) (a General-Support-Artillery-Battalion uniquely-called "The 1st General Support Artillery Battalion")))))))
(Block-Military-Unit has 
    (superclasses (Block-Military))
    (description ("a tactical mission task that prevents an enemy's advance along an avenue of approach")))

(every Block-Military-Unit has 
    (agent ((a Military-Unit)))
    (base ((a Spatial-Entity)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the base of Self)) and ((the location of (the agent of Self)) /= (the location of (the base of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the base of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the base of Self)))))))
    (resulting-state ((a Be-Blocked)))
    (add-list ((:triple (the base of Self) object-of (the resulting-state of Self) [Block-Military-Unit-add-1])))
    (text-base ("from using"))
    (text-argslots ((:seq base path))))

(every Block-Military-Unit has-definition 
    (instance-of (Block-Military))
    (object ((a Military-Unit))))
(Block-Military has 
                                                                            
    (superclasses (Engagement-Military-Task))
    (description ("a tactical mission task that prevents an enemy's advance along an avenue of approach")))

(every Block-Military has 
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.3 ()))))))
    (text-active-verbseq-sg ("blocks"))
    (text-active-verbseq-pl ("block")))
(Block-Avenue-of-Approach has 
    (superclasses (Block-Military))
    (description ("a tactical mission task that prevents an enemy's advance along an avenue of approach")))

(every Block-Avenue-of-Approach has 
    (agent ((a Military-Unit)))
    (object ((a Spatial-Entity)))
    (base ((a Military-Unit)
           (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the base of Self)))
    (first-subevent ((if (((the location of (the agent of Self)) /= (the object of Self)) and ((the location of (the agent of Self)) /= (the location of (the object of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the object of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the object of Self)))))))
    (resulting-state ((a Be-Blocked)))
    (add-list ((:triple (the object of Self) object-of (the resulting-state of Self) [Block-Avenue-of-Approach-add-1])))
    (text-base ("against"))
    (text-argslots ((:seq base path))))

(every Block-Avenue-of-Approach has-definition 
    (instance-of (Block-Military))
    (base ((a Military-Unit))))
(Block has 
    (caused-by-class-of (Be-Blocked))
    (defeated-by-class-of (Be-Unblocked))
    (superclasses (Make-Inaccessible))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "the place blocked")
                          (:seq agent "blocker")
                          (:seq instrument "the blockage")))
    (test-case ('((*path1 has (instance-of (Place))) (a Block with (object (*path1))) (do-and-next (thelast Block)) (has-value (the Be-Blocked object-of of *path1)) (a Move with (object (*car1)) (path (*path1))) (not (try-do (thelast Move))) (new-situation) (*pipe has (instance-of (Physical-Object))) (*garbage has (instance-of (Substance))) (*water has (instance-of (Fluid-Substance))) (a Block with (object (*pipe)) (instrument (*garbage))) (do-and-next (thelast Block)) (has-value (the Be-Blocked object-of of *pipe)) (a Move with (object (*water)) (path (*pipe))) (not (try-do (thelast Move))) (a Unblock with (object (*pipe))) (do-and-next (thelast Unblock)) (not (has-value (the Be-Blocked object-of of *pipe))) (not (has-value (the Be-Blocked instrument-of of *pipe))) (do-and-next (thelast Move)))))
    (wn16-synset ((:set (:triple "block" 1 "v") (:triple "block" 9 "v") (:triple "block" 10 "v") (:triple "bar" 2 "v") (:triple "barricade" 1 "v") (:triple "block_off" 2 "v") (:triple "block_up" 1 "v") (:triple "blockade" 2 "v") (:triple "choke_up" 1 "v") (:triple "close_up" 1 "v") (:triple "impede" 2 "v") (:triple "jam" 7 "v") (:triple "lug" 2 "v") (:triple "obstruct" 2 "v") (:triple "occlude" 1 "v") (:triple "stuff" 4 "v"))))
    (wn20-synset ((:set (:triple "block" 1 "v") (:triple "block" 9 "v") (:triple "block" 10 "v") (:triple "bar" 2 "v") (:triple "barricade" 1 "v") (:triple "block_off" 2 "v") (:triple "block_up" 1 "v") (:triple "blockade" 2 "v") (:triple "choke_up" 1 "v") (:triple "close_up" 1 "v") (:triple "impede" 2 "v") (:triple "jam" 7 "v") (:triple "lug" 2 "v") (:triple "obstruct" 2 "v") (:triple "occlude" 1 "v") (:triple "stuff" 3 "v"))))
    )

(every Block has 
    (object ((a Spatial-Entity)))
    (resulting-state ((a Be-Blocked)))
    (add-list ((:triple (the object of Self) object-of (the resulting-state of Self) [Block-add-1])
               (if (has-value (the instrument of Self)) then (:triple (the instrument of Self) instrument-of (the resulting-state of Self) [Block-add-2]))))
    (text-active-verbseq-sg ("blocks"))
    (text-active-verbseq-pl ("block"))
    (text-passive-verbseq-sg ("gets blocked"))
    (text-passive-verbseq-pl ("get blocked"))
    (preparatory-event ((:default (a Unblock with (object ((the object of Self)))))))
    (text-nominalization ("blocking")))
(Biosynthesize has 
    (superclasses (Produce
                      Enzyme-Catalysis))
    (required-slot (result))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("The production of a more complex substance 
                                  from simpler substances by a living entity. 
                                  Souther, 2001.")))

(every Biosynthesize has 
    (agent ((a Living-Entity)))
    (raw-material ((a Chemical-Entity)
                   (at-least 1 Chemical-Entity)))
    (substrate ((the Chemical-Entity raw-material of Self)))
    (result ((a Chemical-Entity)))
    (instrument ((a Synthase)))
    (text-argslots ((:seq raw-material instrument)))
    (text-active-verbseq-sg ("biosynthesizes"))
    (text-active-verbseq-pl ("biosynthesize"))
    (text-passive-verbseq-sg ("gets biosynthesized"))
    (text-passive-verbseq-pl ("get biosynthesized"))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Biological-Membrane has 
    (superclasses (Membrane))
    (description ("Thin sheet of lipid molecules and associated proteins
                         that encloses all cells and forms the boundaries of
                         many eucaryotic organelles.  Alberts:ECB:G-11 as 
                         'membrane'."))
    )
(Biological-Kingdom has 
    (superclasses (Living-Group))
    (description ("Highest biological taxonomic category.  Organisms have
                         been classically divided into 5 kingdoms.  Souther."))
    )
(Binding-Site has 
                                                                                                                                                                                                                                                                                                         
    (superclasses (Region))
    (description ("Region on the surface of a molecule - typically a
                        cavity or groove - that is complementary in shape to 
                        another molecule (the ligand) and therefore can bind it
                        through the formation of multiple weak (noncovalent)
                        bonds. cf Alberts:ECB:G-3.")))

(every Binding-Site has 
    (location-of ((a Attach with (object ((a Ligand with (complement ((Self)))))) (instrument ((a Noncovalent-Bond) (at-least 1 Noncovalent-Bond))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Binary-Ionic-Compound-Decomposition has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a NaI-Substance with (object-of ((a Heat)))))))) where (((the has-basic-structural-unit of It) isa Na) or ((the elements of (the term of (the atomic-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 2 I)))))) = 2)))))

(every Binary-Ionic-Compound-Decomposition has 
    (result ((a Chemical with (has-basic-structural-unit ((forall (the2 of (the elements of (the term of (the atomic-chemical-formula of (the Cation has-part of (the has-basic-structural-unit of (the raw-material of Self))))))) where ((oneof2 (the superclasses of It) where (It2 = Metal-Atom)) or (It = Metal-Atom)) (an instance of It)))) [Binary-Ionic-Compound-Decomposition-result-1])
             (forall (:set H N O F Cl Br I) where (It = (the2 of (the1 of (the term of (the atomic-chemical-formula of (the Anion has-part of (the has-basic-structural-unit of (the raw-material of Self)))))))) (a Molecular-Compound-Substance with (has-basic-structural-unit ((a Molecular-Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 It))))))) (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 It)))))))))))))))

(every Binary-Ionic-Compound-Decomposition has-definition 
    (instance-of (Reaction
                     [Binary-Ionic-Compound-Decomposition-instance-of-1]))
    (raw-material ((a Ionic-Compound-Substance with (object-of ((a Heat))) (has-basic-structural-unit ((a Salt with (atomic-chemical-formula ((a Chemical-Formula) (constraint ((the number of (the elements of (the term of TheValue))) = 2)))))))))))
(Bi has 
    (superclasses (Metal-Atom
                      VA-Element)))

(every Bi has 
    (atomic-symbol ((Bi)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 83 ()))))))
    (chemical-period (6)))
(Bh has 
    (superclasses (Metal-Atom
                      VIIB-Element)))

(every Bh has 
    (atomic-symbol ((Bh)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 107 ()))))))
    (chemical-period (7)))
(Benzene has 
    (superclasses (Ring-Compound))
    (description ("A six-carbon ring with the carbons attached to each 
                        other by conjugated double bonds.  Souther.")))

(every Benzene has 
    (has-part ((a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C1-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-3" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C3-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C4-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C5-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Carbon-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "C6-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C3-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C4-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C5-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C6-Hydrogen"))))
(Be-Unblocked has 
                        
    (superclasses (Be-Accessible))
    (required-slot (object))
    (primary-slot (instrument))
    (caused-by-class (Unblock))
    (defeated-by-class (Block))
    (cmap-correspondence ((:seq object "the object blocked")
                          (:seq instrument "the blockage")))
    (wn20-synset ((:set (:triple "patent" 1 "a") (:triple "unclogged" 1 "a") (:triple "clear" 3 "a") (:triple "open" 2 "a") (:triple "open" 23 "a")))))

(every Be-Unblocked has 
    (object ((a Spatial-Entity)))
    (resulting-state-of ((must-be-a Unblock with (object ((the object of Self))))))
    (defeated-by ((must-be-a Block with (object ((the object of Self))))))
    (text-particle ("unblocked")))
(Be-Unavailable has 
    (superclasses (State))
    (required-slot (object))
    (primary-slot (base))
    (caused-by-class (Release-Resource))
    (defeated-by-class (Allocate-Resource))
    (cmap-correspondence ((:seq object "the unavailable resource")
                          (:seq base "the thing the resource is unavailable to"))))

(every Be-Unavailable has 
    (object ((a Resource)))
    (base ((must-be-a Thing)))
    (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Release-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Release-Resource with (object ((the object of Self)))))))
    (defeated-by ((if (has-value (the base of Self)) then (must-be-a Allocate-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Allocate-Resource with (object ((the object of Self)))))))
    (text-particle ("unavailable")))
(Be-Touching has 
                               
    (superclasses (State))
    (caused-by-class (Make-Contact))
    (defeated-by-class (Break-Contact))
    (cmap-correspondence ((:seq object "the things touching")))
    (wn16-synset ((:set (:triple "touch" 5 "v") (:triple "adjoin" 2 "v") (:triple "meet" 14 "v"))))
    (wn20-synset ((:set (:triple "touch" 5 "v") (:triple "adjoin" 2 "v") (:triple "contact" 2 "v") (:triple "meet" 13 "v")))))

(every Be-Touching has 
    (object ((exactly 2 Tangible-Entity)))
    (text-particle ("touching")))
(Be-Supported has 
    (superclasses (Be-Obstructed))
    (required-slot (object))
    (primary-slot (instrument))
    (caused-by-class (Support))
    (defeated-by-class (Let-Fall))
    (cmap-correspondence ((:seq object "the thing Being-Supported")
                          (:seq instrument "the thing used to Support")))
    (wn20-synset ((:set (:triple "supported" 2 "a")))))

(every Be-Supported has 
    (object ((a Entity)))
    (instrument ((must-be-a Tangible-Entity)))
    (text-particle ("supported")))
(Be-Stored has 
    (superclasses (State))
    (required-slot (object
                       base))
    (caused-by-class (Store))
    (defeated-by-class (Withdraw))
    (cmap-correspondence ((:seq object "the thing stored")
                          (:seq base "the storage")))
    (wn20-synset ((:set (:triple "stored" 1 "a"))))
    )

(every Be-Stored has 
    (object ((a Entity)))
    (base ((a Tangible-Entity with (plays ((a Container with (content ((the object of Self)))))))))
    (text-particle ("stored"))
    (text-base ((if (has-value (the base of Self)) then ("in")))))
(Be-Standing has 
    (superclasses (State))
    (wn20-synset ((:set (:triple "standing" 6 "a")))))

(every Be-Standing has 
    (object ((a Entity)))
    (resulting-state-of ((must-be-a Stand-Up with (agent ((the object of Self))))))
    (defeated-by ((must-be-a Sit-Down with (agent ((the object of Self))))))
    (text-particle ("standing")))
(Be-Stable has 
    (superclasses (State))
    (required-slot (object))
    (primary-slot (base))
    (cmap-correspondence ((:seq object "stable thing")
                          (:seq base "the thing the object is stable with respect to")))
    (wn16-synset ((:set (:triple "stable" 1 "a") (:triple "stable" 2 "a") (:triple "stable" 3 "a") (:triple "stable" 4 "a") (:triple "stable" 5 "a") (:triple "static" 3 "a") (:triple "unchanging" 3 "a"))))
    (wn20-synset ((:set (:triple "stable" 1 "a") (:triple "stable" 2 "a") (:triple "stable" 3 "a") (:triple "stable" 4 "a") (:triple "stable" 5 "a") (:triple "static" 4 "a") (:triple "unchanging" 3 "a")))))

(every Be-Stable has 
    (object ((a Entity)))
    (base ((must-be-a Thing)))
    (text-particle ("stable")))
(Be-Sitting has 
    (superclasses (State))
    (wn20-synset ((:set (:triple "seated" 1 "a") (:triple "sitting" 1 "a")))))

(every Be-Sitting has 
    (object ((a Entity)))
    (resulting-state-of ((must-be-a Sit-Down with (agent ((the object of Self))))))
    (defeated-by ((must-be-a Stand-Up with (agent ((the object of Self))))))
    (text-particle ("sitting")))
(Be-Similar has 
    (superclasses (State))
    (wn20-synset ((:set (:triple "similarity" 1 "n") (:triple "similar" 1 "a") (:triple "similar" 2 "a") (:triple "similar" 3 "a") (:triple "alike" 1 "a") (:triple "like" 1 "a") (:triple "like" 3 "a") (:triple "same" 2 "a")))))

(every Be-Similar has 
    (object ((exactly 2 Thing)))
    (text-particle ("similar")))
(Be-Shut-Out has 
    (superclasses (Be-Obstructed))
    (required-slot (object
                       base))
    (caused-by-class (Shut-Out))
    (defeated-by-class (Admit))
    (cmap-correspondence ((:seq object "the object shut-out")
                          (:seq base "the enclosure")))
    (wn20-synset ((:set (:triple "external" 1 "a")))))

(every Be-Shut-Out has 
    (base ((a Tangible-Entity with (plays ((a Container))) (in-event ((Self))))))
    (object ((a Tangible-Entity with (is-outside ((the base of Self))))))
    (text-particle ("shut out"))
    (text-base ((if (has-value (the base of Self)) then ("of")))))
(Be-Ruined has 
    (superclasses (Be-Broken))
    (caused-by-class (Ruin))
    (wn16-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a"))))
    (wn20-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a") (:triple "irreparable" 1 "a")))))

(every Be-Ruined has 
    (object ((a Tangible-Entity)))
    (defeated-by ((mustnt-be-a Action with (object ((the object of Self))))))
    (resulting-state-of ((must-be-a Ruin with (object ((the object of Self))))))
    (text-particle ("ruined")))
(Be-Restrained has 
    (superclasses (Be-Obstructed))
    (required-slot (object))
    (caused-by-class (Restrain))
    (defeated-by-class (Unrestrain))
    (cmap-correspondence ((:seq object "the thing Being-Restrained")))
    (wn20-synset ((:set (:triple "restrained" 2 "a") (:triple "immobile" 1 "a") (:triple "immovable" 1 "a") (:triple "immoveable" 1 "a") (:triple "stabile" 2 "a") (:triple "unmovable" 1 "a") (:triple "fixed" 5 "a") (:triple "frozen" 7 "a")))))

(every Be-Restrained has 
    (resulting-state-of ((must-be-a Restrain with (object ((the object of Self))))))
    (defeated-by ((must-be-a Unrestrain with (object ((the object of Self))))))
    (text-particle ("restrained")))
(Be-Related has 
    (superclasses (State)))

(every Be-Related has 
    (object ((exactly 2 Thing)))
    (text-particle ("related")))
(Be-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Be-Plus-2 has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Be)))))))
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge)))))))
(Be-Open has 
    (superclasses (Be-Unblocked))
    (required-slot (object))
    (caused-by-class (Open))
    (defeated-by-class (Close))
    (cmap-correspondence ((:seq object "the thing that is open")))
    (wn16-synset ((:set (:triple "open" 1 "a") (:triple "unfastened" 2 "a") (:triple "open" 5 "a") (:triple "opened" 1 "a"))))
    (wn20-synset ((:set (:triple "open" 1 "a") (:triple "unfastened" 2 "a") (:triple "open" 5 "a") (:triple "opened" 1 "a")))))

(every Be-Open has 
    (object ((a Spatial-Entity with (plays ((a Portal))))))
    (resulting-state-of ((must-be-a Open with (object ((the object of Self))))))
    (defeated-by ((must-be-a Close with (object ((the object of Self))))))
    (text-particle ("open")))
(Be-Obstructed has 
                                                                                                                                       
    (superclasses (Be-Inaccessible))
    (required-slot (object))
    (caused-by-class (Obstruct))
    (defeated-by-class (Unobstruct))
    (cmap-correspondence ((:seq object "the object being obstructed")))
    (wn20-synset ((:set (:triple "obstructed" 1 "a")))))

(every Be-Obstructed has 
    (object ((a Entity)))
    (resulting-state-of ((must-be-a Obstruct with (object ((the object of Self))))))
    (defeated-by ((must-be-a Unobstruct with (object ((the object of Self))))))
    (text-particle ("obstructed")))
(Be-Known has 
    (superclasses (State))
    (required-slot (object
                       experiencer))
    (wn20-synset ((:set (:triple "known" 1 "a") (:triple "familiar" 1 "a") (:triple "familiar" 3 "a") (:triple "conversant" 1 "a") (:triple "versed" 1 "a") (:triple "knowledgeable" 2 "a") (:triple "intimate" 6 "a") (:triple "intimate_with" 1 "a") (:triple "knowledgeable" 4 "a") (:triple "knowledgeable_about" 1 "a") (:triple "know" 1 "v")))))

(every Be-Known has 
    (object ((a Entity)))
    (experiencer ((a Tangible-Entity)))
    (text-active-verbseq-sg ("knows"))
    (text-active-verbseq-pl ("know"))
    (text-subj ((the experiencer of Self)))
    (text-dobj ((the object of Self)))
    (text-argslots ((:seq))))
(Be-Inaccessible has 
                                                                                    
    (superclasses (State))
    (required-slot (object))
    (primary-slot (base))
    (caused-by-class (Make-Inaccessible))
    (defeated-by-class (Make-Accessible))
    (cmap-correspondence ((:seq object "the inaccessible object")
                          (:seq base "the thing the object is inaccessible to"))))

(every Be-Inaccessible has 
    (object ((a Entity)))
    (base ((must-be-a Thing)))
    (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Make-Inaccessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Inaccessible with (object ((the object of Self)))))))
    (defeated-by ((if (has-value (the base of Self)) then (must-be-a Make-Accessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Accessible with (object ((the object of Self)))))))
    (text-particle ("inaccessible")))
(Be-Held has 
    (superclasses (Be-Obstructed))
    (required-slot (object
                       agent))
    (caused-by-class (Hold))
    (defeated-by-class (Let-Go-Of))
    (cmap-correspondence ((:seq object "the object being held")
                          (:seq agent "the holder")))
    (wn16-synset ((:set (:triple "held" 1 "a"))))
    (wn20-synset ((:set (:triple "held" 1 "a")))))

(every Be-Held has 
    (agent ((a Tangible-Entity)))
    (object ((a Tangible-Entity)))
    (resulting-state-of ((must-be-a Hold with (object ((the object of Self))) (agent ((the agent of Self))))))
    (defeated-by ((must-be-a Let-Go-Of with (object ((the object of Self))) (agent ((the agent of Self))))))
    (text-particle ("held")))
(Be-Different has 
    (superclasses (State))
    (wn20-synset ((:set (:triple "difference" 1 "n") (:triple "different" 1 "a") (:triple "different" 4 "a") (:triple "dissimilar" 1 "a") (:triple "dissimilar" 2 "a") (:triple "dissimilar" 3 "a") (:triple "unalike" 1 "a") (:triple "unlike" 1 "a")))))

(every Be-Different has 
    (object ((exactly 2 Thing)))
    (text-particle ("different")))
(Be-Damaged has 
                          
    (superclasses (State))
    (required-slot (object))
    (caused-by-class (Damage)))

(every Be-Damaged has 
    (object ((a Tangible-Entity)))
    (resulting-state-of ((must-be-a Damage with (object ((the object of Self))))))
    (text-particle ("damaged")))
(Be-Controlled has 
    (superclasses (State))
    (required-slot (object))
    (caused-by-class (Take-Control))
    (defeated-by-class (Take-Control))
    (cmap-correspondence ((:seq object "the thing that's controlled")))
    (wn20-synset ((:set (:triple "controlled" 1 "a")))))

(every Be-Controlled has 
    (object ((a Entity)))
    (text-particle ("controlled")))
(Be-Contained has 
    (superclasses (State))
    (required-slot (object))
    (caused-by-class (Move-Into))
    (defeated-by-class (Move-Out-Of))
    (wn16-synset ((:set (:triple "contain" 2 "v") (:triple "bear" 7 "v") (:triple "carry" 7 "v") (:triple "hold" 9 "v"))))
    (wn20-synset ((:set (:triple "contain" 2 "v") (:triple "bear" 7 "v") (:triple "carry" 7 "v") (:triple "hold" 8 "v")))))

(every Be-Contained has 
    (object ((a Tangible-Entity)))
    (base ((a Tangible-Entity)))
    (origin ((a Spatial-Entity)))
    (destination ((a Spatial-Entity)))
    (resulting-state-of ((must-be-a Move-Into with (object ((the object of Self))) (base ((the base of Self))))))
    (defeated-by ((must-be-a Move-Out-Of with (object ((the object of Self))) (base ((the base of Self))))))
    (text-particle ("contained")))
(Be-Confined has 
    (superclasses (Be-Obstructed))
    (required-slot (object
                       base))
    (caused-by-class (Confine))
    (defeated-by-class (Release))
    (cmap-correspondence ((:seq object "the thing Being-Confined")
                          (:seq base "the confining enclosure")))
    (wn16-synset ((:set (:triple "confined" 4 "a") (:triple "enclosed" 1 "a") (:triple "fenced_in" 1 "a") (:triple "penned" 1 "a"))))
    (wn20-synset ((:set (:triple "confined" 2 "a") (:triple "fenced_in" 1 "a") (:triple "penned" 1 "a")))))

(every Be-Confined has 
    (base ((a Tangible-Entity)))
    (object ((a Tangible-Entity with (is-inside ((the base of Self))))))
    (resulting-state-of ((must-be-a Confine with (object ((the object of Self))) (base ((the base of Self))))))
    (defeated-by ((must-be-a Release with (object ((the object of Self))) (base ((the base of Self))))))
    (text-particle ("confined")))
(Be-Concealed has 
    (superclasses (Be-Inaccessible))
    (required-slot (object))
    (primary-slot (base))
    (caused-by-class (Conceal))
    (defeated-by-class (Expose))
    (cmap-correspondence ((:seq object "the object being concealed")
                          (:seq base "the thing the object is concealed from")))
    (wn16-synset ((:set (:triple "concealed" 1 "a") (:triple "concealed" 2 "a") (:triple "hidden" 1 "a") (:triple "out_of_sight" 1 "a"))))
    (wn20-synset ((:set (:triple "concealed" 1 "a") (:triple "concealed" 2 "a") (:triple "hidden" 1 "a") (:triple "out_of_sight" 1 "a")))))

(every Be-Concealed has 
    (object ((a Tangible-Entity)))
    (base ((must-be-a Thing)))
    (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Conceal with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Conceal with (object ((the object of Self)))))))
    (defeated-by ((if (has-value (the base of Self)) then (must-be-a Expose with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Expose with (object ((the object of Self)))))))
    (text-particle ("concealed"))
    (text-base ((if (has-value (the base of Self)) then ("from")))))
(Be-Closed has 
    (superclasses (Be-Blocked))
    (required-slot (object))
    (caused-by-class (Close))
    (defeated-by-class (Open))
    (cmap-correspondence ((:seq object "path that's closed")))
    (wn20-synset ((:set (:triple "closed" 3 "a") (:triple "shut" 1 "a") (:triple "unopen" 1 "a") (:triple "closed" 4 "a") (:triple "shut" 2 "a") (:triple "closed" 6 "a")))))

(every Be-Closed has 
    (object ((exactly 1 Spatial-Entity)))
    (instrument ((a Tangible-Entity with (plays ((a Portal-Covering))))))
    (resulting-state-of ((must-be-a Close with (object ((the object of Self))))))
    (defeated-by ((must-be-a Open with (object ((the object of Self))))))
    (text-particle ("closed")))
(Be-Broken has 
    (superclasses (Be-Damaged))
    (required-slot (object))
    (caused-by-class (Break))
    (defeated-by-class (Repair))
    (wn16-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a"))))
    (wn20-synset ((:set (:triple "broken" 11 "a") (:triple "busted" 3 "a"))))
    )

(every Be-Broken has 
    (object ((a Physical-Object)))
    (defeated-by ((must-be-a Repair with (object ((the object of Self))))))
    (resulting-state-of ((must-be-a Break with (object ((the object of Self))))))
    (text-particle ("broken")))
(Be-Blocked has 
    (superclasses (Be-Inaccessible))
    (required-slot (object))
    (primary-slot (instrument))
    (caused-by-class (Block))
    (defeated-by-class (Unblock))
    (cmap-correspondence ((:seq object "the object blocked")
                          (:seq instrument "the blockage")))
    (wn20-synset ((:set (:triple "blocked" 1 "a") (:triple "out_of_use" 1 "a") (:triple "blocked" 2 "a") (:triple "plugged" 2 "a") (:triple "closed" 1 "a"))))
    )

(every Be-Blocked has 
    (object ((a Spatial-Entity)))
    (resulting-state-of ((must-be-a Block with (object ((the object of Self))))))
    (defeated-by ((must-be-a Unblock with (object ((the object of Self))))))
    (text-particle ("blocked")))
(Be-Available has 
    (superclasses (State))
    (required-slot (object))
    (primary-slot (base))
    (caused-by-class (Allocate-Resource))
    (defeated-by-class (Release-Resource))
    (cmap-correspondence ((:seq object "Resource available")
                          (:seq base "the thing the object is available to")))
    (test-case ('((*Mojo has (instance-of (Resource))) (*AustinPowers has (instance-of (Living-Entity))) (a Release-Resource with (object (*Mojo)) (base (*AustinPowers))) (try-do-and-next (thelast Release-Resource)) (the text-gen of (thelast Release-Resource)) (has-value (the Be-Available object-of of *Mojo)) (a Allocate-Resource with (object (*Mojo)) (base (*AustinPowers))) (try-do-and-next (thelast Allocate-Resource)) (the text-gen of (thelast Allocate-Resource)) (not (has-value (the Be-Available object-of of *Mojo)))))))

(every Be-Available has 
    (object ((a Resource)))
    (base ((must-be-a Thing)))
    (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Allocate-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Allocate-Resource with (object ((the object of Self)))))))
    (defeated-by ((if (has-value (the base of Self)) then (must-be-a Release-Resource with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Release-Resource with (object ((the object of Self)))))))
    (text-particle ("available")))
(Be-Attached-To has 
    (superclasses (Be-Touching))
    (primary-slot (instrument))
    (caused-by-class (Attach))
    (defeated-by-class (Detach))
    (cmap-correspondence ((:seq object "the attached objects")
                          (:seq instrument "the connector")))
    (wn20-synset ((:set (:triple "attached" 1 "a") (:triple "attach" 2 "v")))))

(every Be-Attached-To has 
    (object ((exactly 2 Tangible-Entity)))
    (text-particle ("attached")))
(Be-Activated has 
    (superclasses (Be-Accessible))
    (required-slot (object))
    (caused-by-class (Activate))
    (defeated-by-class (Deactivate))
    (cmap-correspondence ((:seq object "the thing that's active")))
    (wn16-synset ((:set (:triple "activated" 3 "a") (:triple "active" 13 "a") (:triple "on" 1 "a"))))
    (wn20-synset ((:set (:triple "activated" 3 "a") (:triple "active" 12 "a") (:triple "on" 1 "a")))))

(every Be-Activated has 
    (object ((a Entity)))
    (text-particle ("activated")))
(Be-Accessible has 
    (superclasses (State))
    (required-slot (object))
    (primary-slot (base))
    (caused-by-class (Make-Accessible))
    (defeated-by-class (Make-Inaccessible))
    (cmap-correspondence ((:seq object "thing accessible")
                          (:seq base "the thing the object is accessible to")))
    (test-case ('((*Peak has (instance-of (Physical-Object))) (*Climber has (instance-of (Living-Entity))) (a Make-Inaccessible with (object (*Peak)) (base (*Climber))) (try-do-and-next (thelast Make-Inaccessible)) (the text-gen of (thelast Make-Inaccessible)) (has-value (the Be-Inaccessible object-of of *Peak)) (a Make-Accessible with (object (*Peak)) (base (*Climber))) (try-do-and-next (thelast Make-Accessible)) (the text-gen of (thelast Make-Accessible)) (not (has-value (the Be-Inaccessible object-of of *Peak))))))
    )

(every Be-Accessible has 
    (object ((a Entity)))
    (base ((must-be-a Thing)))
    (resulting-state-of ((if (has-value (the base of Self)) then (must-be-a Make-Accessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Accessible with (object ((the object of Self)))))))
    (defeated-by ((if (has-value (the base of Self)) then (must-be-a Make-Inaccessible with (object ((the object of Self))) (base ((the base of Self)))) else (must-be-a Make-Inaccessible with (object ((the object of Self)))))))
    (text-particle ("accessible")))
(Be has 
    (superclasses (Metal-Atom
                      IIA-Element)))

(every Be has 
    (atomic-symbol ((Be)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 4 ()))))))
    (atomic-weight ((a Atomic-Weight-Value with (value ((:pair 9.01 *dalton))))))
    (chemical-period (2)))
(Ba_OH_2-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Ba_OH_2-Substance has 
    (has-basic-structural-unit ((a Ba_OH_2))))
(Ba_OH_2 has 
    (superclasses (Ionic-Compound)))

(every Ba_OH_2 has 
    (has-part ((a Ba-Plus-2)
               (a OH-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ba-Plus-2) (:pair 2 OH-Minus))))))))
(Ba_NO3_2-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every Ba_NO3_2-Substance has 
    (has-basic-structural-unit ((a Ba_NO3_2))))
(Ba_NO3_2 has 
    (superclasses (Ionic-Compound)))

(every Ba_NO3_2 has 
    (has-part ((a Ba-Plus-2)
               (a NO3-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ba-Plus-2) (:pair 1 NO3-Minus))))))))
(Battery has 
                                  
    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Battalion has 

    (superclasses (Military-Unit))
    (member-of (_Partition8)))
(Bathroom has 
    (superclasses (Room))
    (wn20-synset ((:set (:triple "bathroom" 1 "n") (:triple "bath" 6 "n")))))
(BaSO4-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every BaSO4-Substance has 
    (has-basic-structural-unit ((a BaSO4))))
(BaSO4 has 
    (superclasses (Ionic-Compound)))

(every BaSO4 has 
    (has-part ((a Ba-Plus-2)
               (a SO4-Minus-2)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ba-Plus-2) (:pair 1 SO4-Minus-2))))))))
(Basic-Protein has 
    (superclasses (Protein))
    (description ("Proteins with a net positive charge in solution that 
                        are rich in the basic amino acids arginine and
                        lysine. Souther.")))
(Basic-Buffer has 
    (superclasses (Buffer))
    (test-case ('(((a Solution with (base ((a CH3NH2-Substance) (a CH3NH3Cl-Substance)))) isa Basic-Buffer) (a Solution with (base ((a NH3-Substance) (a NH4Cl-Substance)))) isa Basic-Buffer))))

(every Basic-Buffer has 
    (buffer-capacity ((a Buffer-Capacity-Value with (value ((:pair ((the1 of (the value of (the concentration of (oneof (the base of Self) where ((the1 of (the value of (the intensity of (the Base-Role plays of It)))) = *weak))))) / (the1 of (the value of (the concentration of (oneof (the base of Self) where (It isa Salt-Substance)))))) nil))))))
    (pH ((the output of (a Compute-pH-for-Basic-Buffer with (input (Self)))))))

(every Basic-Buffer has-definition 
    (instance-of (Solution))
    (buffer-status ((a Buffer-Status-Value with (value ((:pair *basic-buffer nil)))))))
(Basic-Amino-Acid has 
                                                                        
    (superclasses (Chemical-Base
                      Amino-Acid))
    (description ("An amino acid which carries a net positive charge at
                        pH 7.  Souther.")))

(every Basic-Amino-Acid has 
    (possesses ((a Electric-Charge with (polarity ((a Polarity-Value with (value ((*positive))))))))))
(Base-Role has 
    (superclasses (Role))
    (test-case ('(((the1 of (the value of (the default-kb of ((a Base-Role with (played-by ((a NO2-Minus-Substance)))))))) = 2.22E-11 +/- 1.0E-12))))
    (domain-of (default-kb
                   kb-expression
                   kb
                   pkb))
    (range-of (default-kb-of
                  kb-expression-of
                  kb-of
                  pkb-of)))

(every Base-Role has 
    (intensity ((if ((has-value (the played-by of Self)) and (not (the intensity of Self))) then (if ((the played-by of Self) isa Ionic-Compound-Substance) then (if ((the played-by of Self) isa NH3-Substance) then (a Intensity-Value with (value ((:pair *weak Base)))) else (if ((the played-by of Self) isa H2O-Substance) then (a Intensity-Value with (value ((:pair *negligible Base)))))) else (if (((the played-by of Self) isa Cation-Substance) or ((the played-by of Self) isa Anion-Substance)) then (if (((the has-basic-structural-unit of (the played-by of Self)) isa CH3-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa H-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa O-Minus-2) or ((the has-basic-structural-unit of (the played-by of Self)) isa OH-Minus)) then (a Intensity-Value with (value ((:pair *strong Base)))) else (if (((the has-basic-structural-unit of (the played-by of Self)) isa PO4-Minus-3) or ((the has-basic-structural-unit of (the played-by of Self)) isa CO3-Minus-2) or ((the has-basic-structural-unit of (the played-by of Self)) isa HPO4-Minus-2) or ((the has-basic-structural-unit of (the played-by of Self)) isa HS-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa HCO3-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa CH3COO-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa F-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa H2PO4-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa CN-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa SO4-Minus-2)) then (a Intensity-Value with (value ((:pair *weak Base)))) else (if (((the has-basic-structural-unit of (the played-by of Self)) isa NO3-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa HSO4-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa Cl-Minus)) then (a Intensity-Value with (value ((:pair *negligible Base))))))))))))
    (kb ((((if ((the played-by of Self) and (the raw-material-of of (the played-by of Self)) and ((the raw-material-of of (the played-by of Self)) isa Hydrolysis) and (the kb of (the raw-material-of of (the played-by of Self)))) then (the kb of (the raw-material-of of (the played-by of Self))))) && ((if (((the context of Self) /= "none") and (numberp (the1 of (the value of ((the ka of (the Acid-Role plays of (the context of Self))) or (the default-ka of (the Acid-Role plays of (the context of Self)))))))) then (a Equilibrium-Constant-Value with (value ((:pair (1.0E-14 / (the1 of (the value of ((the ka of (the Acid-Role plays of (the context of Self))) or (the default-ka of (the Acid-Role plays of (the context of Self))))))) nil)))))))))
    (context (((?pair == (the Conjugate-Acid-Base-Pair complement-of of (the played-by of Self))) and (if (has-value ?pair) then (the element of ?pair) else (the complement of (a Conjugate-Acid-Base-Pair with (element ((the played-by of Self)))))))))
    (pkb ((if ((the played-by of Self) and (the raw-material-of of (the played-by of Self)) and ((the raw-material-of of (the played-by of Self)) isa Hydrolysis) and (the pkb of (the raw-material-of of (the played-by of Self)))) then (the pkb of (the raw-material-of of (the played-by of Self))))))
    (kb-expression ((if ((has-value (the played-by of Self)) and ((the raw-material-of of (the played-by of Self)) isa Hydrolysis) and (the kb-expression of (the raw-material-of of (the played-by of Self)))) then (the kb-expression of (the raw-material-of of (the played-by of Self))) else (a Equilibrium-Constant-Expression)))))
(Base-Pairing has 
    (superclasses (Attach))
    (required-slot (object))
    (primary-slot (instrument
                      agent
                      base))
    (description ("The pairing of two complementary nucleotide bases
                    during replication or transcription.  Souther.")))

(every Base-Pairing has 
    (object ((a Nucleotide)))
    (base ((a Nucleotide with (complement ((the Nucleotide object of Self))))))
    (instrument ((a Aggregate with (element-type ((Hydrogen-Bond))) (element ((at-least 2 Hydrogen-Bond))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Base-Pair has 
                                                                                        
    (superclasses (Molecular-Complex))
    (description ("Two nucleotides in an RNA or a DNA molecule that are
                        paired by hydrogen bonds - for example, G with C, and A
                        with T or U. Alberts:ECB:G-3.")))

(every Base-Pair has 
    (is-part-of ((a DNA-Molecule)))
    (has-part ((a Nucleotide called "nucleotide 1" with (has-part ((a Purine with (object-of ((a Be-Attached-To with (object ((the Pyrimidine has-part of ((the Nucleotide has-part of Self) called "nucleotide 2")))) (instrument ((a Hydrogen-Bond) (at-least 2 Hydrogen-Bond))))))))))
               (a Nucleotide called "nucleotide 2" with (has-part ((a Pyrimidine))))
               (exactly 2 Nucleotide))))
(Base has 

    (superclasses (Ionic-Compound-Substance))
    (member-of (_Partition9)))

(every Base has 
    (plays ((a Base-Role))))
(Barrier has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "barrier" 1 "n") (:triple "barrier" 3 "n") (:triple "obstruction" 1 "n") (:triple "impediment" 2 "n") (:triple "impedimenta" 1 "n"))))
    (wn20-synset ((:set (:triple "barrier" 1 "n") (:triple "barrier" 3 "n") (:triple "obstruction" 1 "n") (:triple "impediment" 2 "n") (:triple "impedimenta" 1 "n"))))
    )

(every Barrier has 
    (in-event ((a Block with (object ((the location of Self))))))
    (played-by ((a Tangible-Entity with (instrument-of ((the in-event of Self))) (is-between ((a Spatial-Entity) (a Spatial-Entity with (abuts ((excluded-values (the first of (the is-between of (the played-by of Self)))))))))))))
(Balance-Equation has 
    (superclasses (Method))
    (description ("a method to balance equations stoichiometrically")))
(Bacterium has 
    (superclasses (Procaryote))
    (description ("Member of one of the two classes of procaryotes,
                           the other group being the archaea.  Souther.")))
(Bacterial-RNA-Transcript has 
    (superclasses (RNA-Transcript))
    (description ("RNA product of DNA transcription in bacteria.
                        Alberts:MBC:1994.")))

(every Bacterial-RNA-Transcript has 
    (result-of ((must-be-a Bacterial-DNA-Transcription))))
(Bacterial-RNA-Polymerase has 
    (superclasses (RNA-Polymerase))
    (description ("Enzyme that catalyzes the synthesis of an 
                               RNA molecule on a DNA template from nucleoside
                               triphosphate precursors in bacteria.
                               (modified from Alberts: ECB:G-16).")))

(every Bacterial-RNA-Polymerase has 
    (purpose ((a Catalyst with (in-event ((a Bacterial-DNA-Transcription))))))
    (has-part ((a Sigma-Factor))))
(Bacterial-DNA-Transcription has 
    (superclasses (Action))
    (test-case ('((*dna has (instance-of (Bacterial-DNA-Molecule)) (has-region (*gene *promoter *terminator))) (*gene has (instance-of (Gene))) (*promoter has (instance-of (Promoter))) (*terminator has (instance-of (Terminator))) (*poly has (instance-of (DNA-Polymerase))) (*xscript has (instance-of (RNA-Transcript))) (*xscenario has (instance-of (Bacterial-DNA-Transcription)) (object (*dna)) (instrument (*poly)) (result (*xscript))) (do-script *xscenario) (the object of ((the subevent of *xscenario) called "TranscribeDNA")) ((the object-of of *dna) is-superset-of (:set ((the subevent of *xscenario) called "TranscribeDNA") *xscenario)) ((the object-of of *poly) is-superset-of (:set ((the subevent of *xscenario) called "CollideWithDNA") ((the subevent of *xscenario) called "SlideAlongDNA") ((the Move subevent of ((the subevent of *xscenario) called "TranscribeDNA")) called "MoveWhileTranscribing") ((the subevent of *xscenario) called "LeaveDNA"))) ((the base-of of *poly) is-superset-of (:set ((the subevent of *xscenario) called "ReleaseTranscript"))) ((the instrument-of of *poly) is-superset-of (:set ((the subevent of *xscenario) called "TranscribeDNA") *xscenario)) ((the result-of of *xscript) is-superset-of (:set (the result-of of (the result of ((the subevent of *xscenario) called "TranscribeDNA"))) *xscenario))))))

(every Bacterial-DNA-Transcription has 
    (instrument ((a DNA-Polymerase)))
    (object ((a Bacterial-DNA-Molecule)))
    (result ((a RNA-Transcript)))
    (first-subevent (((the Collide subevent of Self) called "CollideWithDNA")))
    (subevent ((a Collide called "CollideWithDNA" with (object ((the DNA-Polymerase instrument of Self))) (base ((the Bacterial-DNA-Molecule object of Self))) (next-event (((the Slide subevent of Self) called "SlideAlongDNA"))))
               (a Slide called "SlideAlongDNA" with (object ((the DNA-Polymerase instrument of Self))) (path ((the Bacterial-DNA-Molecule object of Self))) (rate ((*fast))) (origin ((the location of (the Collide subevent of Self)))) (destination ((the Promoter has-region of (the Bacterial-DNA-Molecule object of Self)))) (next-event (((the Copy subevent of Self) called "TranscribeDNA"))))
               (a Copy called "TranscribeDNA" with (instrument ((the DNA-Polymerase instrument of Self))) (object ((the object of Self))) (result ((the result of Self))) (first-subevent (((the Move subevent of ((the Copy subevent of Self) called "TranscribeDNA")) called "MoveWhileTranscribing"))) (subevent ((a Move called "MoveWhileTranscribing" with (object ((the DNA-Polymerase instrument of Self))) (origin ((the Promoter has-region of (the Bacterial-DNA-Molecule object of Self)))) (path ((the Gene has-region of (the Bacterial-DNA-Molecule object of Self)))) (destination ((the Terminator has-region of (the Bacterial-DNA-Molecule object of Self))))))) (next-event (((the Detach subevent of Self) called "ReleaseTranscript"))))
               (a Detach called "ReleaseTranscript" with (object ((the RNA-Transcript result of Self))) (base ((the DNA-Polymerase instrument of Self))) (location ((the Terminator has-region of (the Bacterial-DNA-Molecule object of Self)))) (next-event (((the Break-Contact subevent of Self) called "LeaveDNA"))))
               (a Break-Contact called "LeaveDNA" with (object ((the DNA-Polymerase instrument of Self))) (base ((the Bacterial-DNA-Molecule object of Self))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Bacterial-DNA-Molecule has 
    (superclasses (Procaryotic-DNA))
    (description ("Double-stranded polynucleotide formed from two 
                                separate chains of deoxyribonucleotide units; 
                                serves as the carrier of genetic information in
                                bacteria. Alberts:ECB:G-6.")))

(every Bacterial-DNA-Molecule has 
    (has-functional-part ((a Procaryotic-Gene)
                          (a Operon with (has-functional-part ((at-least 2 Procaryotic-Gene) (a Procaryotic-Gene) (a Procaryotic-Gene))))
                          (at-least 483 Procaryotic-Gene)
                          (at-most 5570 Procaryotic-Gene)))
    (has-structural-part ((exactly 2 Procaryotic-DNA-Strand)
                          (a Procaryotic-DNA-Strand called "Strand1")
                          (a Procaryotic-DNA-Strand called "Strand2"))))
(BaCl2-Substance has 
    (superclasses (Ionic-Compound-Substance)))

(every BaCl2-Substance has 
    (has-basic-structural-unit ((a BaCl2))))
(BaCl2 has 
    (superclasses (Ionic-Compound)))

(every BaCl2 has 
    (has-part ((a Ba-Plus-2)
               (a Cl-Minus)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ba-Plus-2) (:pair 2 Cl-Minus))))))))
(Ba-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Ba-Plus-2 has 
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge))))))
    (has-chemical-name ("barium"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ba))))))))
(Ba has 
    (superclasses (Metal-Atom
                      IIA-Element)))

(every Ba has 
    (atomic-symbol ((Ba)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 56 ()))))))
    (chemical-period (6)))
(B has 
    (superclasses (Metalloid
                      IIIA-Element)))

(every B has 
    (atomic-symbol ((B)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 5 ()))))))
    (chemical-period (2)))
(Aviation-Unit has 
                                                                                                                                                                                                                                                                 
    (superclasses (Military-Unit)))
(Aviation-Squad has 
    (superclasses (Aviation-Unit
                      Squad)))

(every Aviation-Squad has-definition 
    (instance-of (Aviation-Unit
                     Squad)))
(Aviation-Regiment has 
    (superclasses (Aviation-Unit
                      Regiment)))

(every Aviation-Regiment has-definition 
    (instance-of (Aviation-Unit
                     Regiment)))
(Aviation-Platoon has 
    (superclasses (Aviation-Unit
                      Platoon)))

(every Aviation-Platoon has-definition 
    (instance-of (Aviation-Unit
                     Platoon)))
(Aviation-Division has 
    (superclasses (Aviation-Unit
                      Division)))

(every Aviation-Division has-definition 
    (instance-of (Aviation-Unit
                     Division)))
(Aviation-Corps has 
    (superclasses (Aviation-Unit
                      Corps)))

(every Aviation-Corps has-definition 
    (instance-of (Aviation-Unit
                     Corps)))
(Aviation-Company has 
    (superclasses (Aviation-Unit
                      Military-Company)))

(every Aviation-Company has-definition 
    (instance-of (Aviation-Unit
                     Military-Company)))
(Aviation-Brigade has 
    (superclasses (Aviation-Unit
                      Brigade)))

(every Aviation-Brigade has-definition 
    (instance-of (Aviation-Unit
                     Brigade)))
(Aviation-Battalion has 
    (superclasses (Aviation-Unit
                      Battalion)))

(every Aviation-Battalion has 
    (possesses ((if ((the value of (the allegiance of Self)) = *Blue) then (a AH64)))))

(every Aviation-Battalion has-definition 
    (instance-of (Aviation-Unit
                     Battalion)))
(Available-Force-Ratio-Value has 
    (superclasses (Property-Value))
    (range-of (available-force-ratio))
    (domain-of (available-force-ratio-of)))

(every Available-Force-Ratio-Value has 
    (property-slot ((available-force-ratio)))
    (less-than ((constraint ((TheValue isa Required-Force-Ratio-Value) or (TheValue isa Available-Force-Ratio-Value)))))
    (greater-than ((constraint ((TheValue isa Required-Force-Ratio-Value) or (TheValue isa Available-Force-Ratio-Value)))))
    (same-as ((constraint ((TheValue isa Required-Force-Ratio-Value) or (TheValue isa Available-Force-Ratio-Value))))))
(Available-Force-Ratio-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (available-force-ratio)))
(Authorized has 
    (superclasses (Cliche))
    (wn20-synset ((:set (:triple "authorized" 1 "a") (:triple "authorised" 1 "a")))))

(every Authorized has 
    (agent ((a Entity)))
    (enabled-by ((a Authorize with (is-goal-of ((a Entity))))))
    (text-definition-sentence (()))
    (text-definition-sentence-of (()))
    (text-nominalization (()))
    (text-nominalization-of (()))
    (text-content (()))
    (text-content-of (()))
    (text-existential-there (()))
    (text-existential-there-of (()))
    (text-toward (()))
    (text-toward-of (()))
    (text-subj (()))
    (text-subj-of (()))
    (text-subj-phrase (()))
    (text-subj-phrase-of (()))
    (text-slot (()))
    (text-slot-of (()))
    (text-sentence (()))
    (text-sentence-of (()))
    (text-premodslots (()))
    (text-premodslots-of (()))
    (text-premods (()))
    (text-premods-of (()))
    (text-postmodslots (()))
    (text-postmodslots-of (()))
    (text-postmods (()))
    (text-postmods-of (()))
    (text-phrase (()))
    (text-phrase-of (()))
    (text-passive-verbseq (()))
    (text-passive-verbseq-of (()))
    (text-passive-verbseq-sg (()))
    (text-passive-verbseq-sg-of (()))
    (text-passive-verbseq-pl (()))
    (text-passive-verbseq-pl-of (()))
    (text-passive-sentence (()))
    (text-passive-sentence-of (()))
    (text-passive-phrase (()))
    (text-passive-phrase-of (()))
    (text-particle (()))
    (text-particle-of (()))
    (text-number (()))
    (text-number-of (()))
    (text-nom-sentence (()))
    (text-nom-sentence-of (()))
    (text-indef-head (()))
    (text-indef-head-of (()))
    (text-indef-determiner (()))
    (text-indef-determiner-of (()))
    (text-head (()))
    (text-head-of (()))
    (text-gen (()))
    (text-gen-of (()))
    (text-dobj (()))
    (text-dobj-of (()))
    (text-dobj-phrase (()))
    (text-dobj-phrase-of (()))
    (text-description (()))
    (text-description-of (()))
    (text-def-head (()))
    (text-def-head-of (()))
    (text-def-determiner (()))
    (text-def-determiner-of (()))
    (text-base-phrase (()))
    (text-base-phrase-of (()))
    (text-arguments (()))
    (text-arguments-of (()))
    (text-argslots (()))
    (text-argslots-of (()))
    (text-active-verbseq (()))
    (text-active-verbseq-of (()))
    (text-active-verbseq-sg (()))
    (text-active-verbseq-sg-of (()))
    (text-active-verbseq-pl (()))
    (text-active-verbseq-pl-of (()))
    (text-active-sentence (()))
    (text-active-sentence-of (()))
    (text-active-phrase (()))
    (text-active-phrase-of (()))
    (text-subevent-of (()))
    (text-subevent (()))
    (slot-gloss (()))
    (slot-gloss-of (()))
    (text-site (()))
    (text-site-of (()))
    (text-resulting-state (()))
    (text-resulting-state-of (()))
    (text-result (()))
    (text-result-of (()))
    (text-recipient (()))
    (text-recipient-of (()))
    (text-raw-material (()))
    (text-raw-material-of (()))
    (text-is-possessed-by (()))
    (text-is-possessed-by-of (()))
    (text-path (()))
    (text-path-of (()))
    (text-origin (()))
    (text-origin-of (()))
    (text-object (()))
    (text-object-of (()))
    (text-material (()))
    (text-material-of (()))
    (text-is-west-of (()))
    (text-is-west (()))
    (text-is-east-of (()))
    (text-is-east (()))
    (text-is-southwest-of (()))
    (text-is-southwest (()))
    (text-is-northeast-of (()))
    (text-is-northeast (()))
    (text-is-over (()))
    (text-is-over-of (()))
    (text-is-outside (()))
    (text-is-outside-of (()))
    (text-is-oriented-toward (()))
    (text-is-oriented-toward-of (()))
    (text-is-opposite (()))
    (text-is-opposite-of (()))
    (text-is-on (()))
    (text-is-on-of (()))
    (text-is-northwest-of (()))
    (text-is-northwest (()))
    (text-is-southeast-of (()))
    (text-is-southeast (()))
    (text-is-north-of (()))
    (text-is-north (()))
    (text-is-south-of (()))
    (text-is-south (()))
    (text-is-near (()))
    (text-is-near-of (()))
    (text-is-inside (()))
    (text-is-inside-of (()))
    (text-is-facing (()))
    (text-is-facing-of (()))
    (text-is-between (()))
    (text-is-between-of (()))
    (text-is-beside (()))
    (text-is-beside-of (()))
    (text-is-behind (()))
    (text-is-behind-of (()))
    (text-is-at (()))
    (text-is-at-of (()))
    (text-is-along (()))
    (text-is-along-of (()))
    (text-is-above (()))
    (text-is-above-of (()))
    (text-instrument (()))
    (text-instrument-of (()))
    (text-has-part (()))
    (text-has-part-of (()))
    (text-is-part-of (()))
    (text-is-part (()))
    (text-donor (()))
    (text-donor-of (()))
    (text-destination (()))
    (text-destination-of (()))
    (text-causes (()))
    (text-causes-of (()))
    (text-caused-by (()))
    (text-caused-by-of (()))
    (text-beneficiary (()))
    (text-beneficiary-of (()))
    (text-base (()))
    (text-base-of (()))
    (text-away-from (()))
    (text-away-from-of (()))
    (text-agent (()))
    (text-agent-of (()))
    (text-abuts (()))
    (text-abuts-of (())))

(every Authorized has-definition 
    (instance-of (Event))
    (agent ((a Entity)))
    (enabled-by ((a Authorize with (is-goal-of ((a Entity)))))))
(Authorize has 
    (superclasses (Action))
    (wn20-synset ((:set (:triple "authorize" 1 "v") (:triple "authorise" 2 "v") (:triple "pass" 24 "v") (:triple "clear" 4 "v") (:triple "empower" 1 "v") (:triple "authorise" 1 "v") (:triple "authorize" 2 "v")))))

(every Authorize has 
    (agent ((a Entity)))
    (is-goal-of ((a Entity)))
    (enables ((a Authorized)))
    (text-nominalization ("authorization")))
(Au-Plus-2 has 
    (superclasses (Metal-Cation)))

(every Au-Plus-2 has 
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Au)))))))
    (charge ((a Charge-Value with (value ((:pair 2 *electronic-charge)))))))
(Au has 
    (superclasses (Metal-Atom
                      Alkaline-Earth-Metal-Element)))

(every Au has 
    (atomic-symbol ((Au)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 79 ()))))))
    (chemical-period (6)))
(Attack-by-Fire has 
    (superclasses (Attack))
    (description ("an attack using direct fires, supported by indirect fires, to engage an enemy without closing with him to destroy, suppress, fix, or deceive him")))

(every Attack-by-Fire has 
    (agent ((a Military-Unit with (location ((mustnt-be-a Place with (is-near ((the object of Self)))))))))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 1 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.95 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.8 ()))))))
    (supported-by ((must-be-a Support-by-Fire)))
    (text-particle ("by fire"))
    (text-argslots ((:seq text-particle path))))
(Attack has 
                                                                                  
    (superclasses (Engagement-Military-Task))
    (description ("an offensive operation that destroys or defeats enemy forces, seizes and secures terrain, or both")))

(every Attack has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (text-active-verbseq-sg ("attacks"))
    (text-active-verbseq-pl ("attack")))
(Attach has 
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent))
    (cmap-correspondence ((:seq base "the object being attached to")
                          (:seq object "the object(s) being attached")))
    (test-case ('((*bumper has (instance-of (Physical-Object))) (*sticker has (instance-of (Physical-Object))) (a Attach with (object (*sticker)) (base (*bumper))) (do-and-next (thelast Attach)) (the text-gen of (thelast Attach)) (forall (the resulting-state of (thelast Attach)) (the text-gen of It)) (oneof (the Be-Attached-To object-of of *sticker) where ((the object of It) includes *bumper)))))
    (wn16-synset ((:set (:triple "attach" 1 "v") (:triple "attach" 3 "v") (:triple "connect" 1 "v") (:triple "link" 2 "v") (:triple "tie" 4 "v"))))
    (wn20-synset ((:set (:triple "attach" 1 "v") (:triple "attach" 3 "v") (:triple "connect" 1 "v") (:triple "link" 2 "v") (:triple "tie" 4 "v"))))
    (caused-by-class-of (Be-Attached-To))
    )

(every Attach has 
    (object ((exactly 1 Tangible-Entity)
             (a Tangible-Entity)))
    (base ((exactly 1 Tangible-Entity)
           (a Tangible-Entity)))
    (soft-pcs-list ((:triple (the base of Self) object-of (mustnt-be-a Be-Inaccessible))))
    (resulting-state ((a Be-Attached-To)))
    (add-list ((:set (:triple (the resulting-state of Self) object (the object of Self) [Attach-add-1]) (:triple (the resulting-state of Self) object (the base of Self) [Attach-add-2]))))
    (text-active-verbseq-sg ("attaches"))
    (text-active-verbseq-pl ("attach"))
    (text-passive-verbseq-sg ("gets attached"))
    (text-passive-verbseq-pl ("get attached"))
    (preparatory-event ((:default (a Make-Contact with (object ((the object of Self))) (base ((the base of Self)))) (a Detach with (object ((the object of Self))) (base ((the base of Self)))))))
    (text-nominalization ("attachment")))
(ATPase has 
    (superclasses (Phosphatase))
    (description ("Enzyme that removes a phosphate group from ATP.
                       molecule. see Alberts:ECB:168.")))

(every ATPase has 
    (purpose ((a Catalyst with (in-event ((a ATP-Hydrolysis)))))))
(ATP-Synthesis has 
    (superclasses (Phosphorylation))
    (required-slot (result
                       object
                       base))
    (primary-slot (raw-material
                      agent
                      instrument))
    (description ("The synthesis of ATP from ADP and 
                                  and a monophosphate group. Souther.")))

(every ATP-Synthesis has 
    (agent ((a Suborganismal-Entity)))
    (location ((the location of (a Mitochondrion))))
    (raw-material ((a ADP)))
    (object ((a Monophosphate)))
    (base ((the raw-material of Self)))
    (result ((a ATP)))
    (instrument ((a ATP-Synthase))))
(ATP-Synthase has 
    (superclasses (Enzyme-Complex
                      Synthase
                      Kinase))
    (description ("Membrane associated Enzyme-Complex, the Catalyst in
                        formation of ATP during Oxidative-Phosphorylation and
                        photosynthesis. Found in Mitochondria, Chloroplast,
                        and Bacteria. Alberts:ECB:G-2.")))

(every ATP-Synthase has 
    (purpose ((a Catalyst with (in-event ((a ATP-Synthesis)))))))
(ATP-Hydrolysis has 
    (superclasses (Enzyme-Catalysis))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (secondary-slot (result))
    (description ("The removal of a phosphoryl group from ATP, releasing
                          energy fthat can be used to drive energetically
                          unfavorable reactions like biosynthesis or changes
                          in protein conformation.  Souther.")))

(every ATP-Hydrolysis has 
    (agent ((a Living-Entity)))
    (substrate ((the ATP object of Self)))
    (object ((a ATP)))
    (result ((a Monophosphate)
             (a ADP)))
    (instrument ((a ATPase))))
(ATP has 
    (superclasses (Ribonucleoside-Triphosphate))
    (description ("Adenosine triphosphate.
                        The principle carrier of Chemical-Energy in the Cell.
                        The terminal Phosphate groups are highly reactive in
                        the sense that their hydrolysis, or transfer to
                        another molecule, takes place with release of a large
                        amount of free energy. Alberts:ECB:G-2.")))

(every ATP has 
    (has-part ((a Triphosphate with (object-of ((a Be-Attached-To with (object ((the Adenosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Adenosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Triphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Adenosine)))
    (purpose ((a Donor-Role with (in-event ((a Chemical-Bond-Energy-Transfer with (recipient ((a Molecule))) (instrument ((a Phosphoanhydride-Bond))))))))))
(Atomic-Weight-Value has 
    (superclasses (Property-Value))
    (range-of (atomic-weight))
    (domain-of (atomic-weight-of)))

(every Atomic-Weight-Value has 
    (property-slot ((atomic-weight))))
(Atomic-Weight-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (atomic-weight)))
(Atomic-Region has 
                                                             
    (superclasses (Region))
    (description ("A has-region of the atom. Souther.")))

(every Atomic-Region has 
    (is-region-of ((must-be-a Atom)))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Atomic-Number-Value has 
    (superclasses (Property-Value))
    (range-of (atomic-number))
    (domain-of (atomic-number-of)))

(every Atomic-Number-Value has 
    (property-slot ((atomic-number))))
(Atomic-Number-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (atomic-number
                                  lewis-acid-strength)))
(Atomic-Nucleus has 
    (superclasses (Atomic-Region))
    (description ("The central part of an atom containing protons and
                        neutrons.  Souther.")))

(every Atomic-Nucleus has 
    (is-at-of ((a Neutron)
               (a Proton)
               (at-least 1 Proton)))
    (is-region-of ((must-be-a Atom))))
(Atom has 

    (superclasses (Chemical-Entity))
    (domain-of (atomic-number
                   atomic-symbol
                   atomic-weight
                   chemical-period
                   electronegativity
                   has-acid-name
                   has-chemical-name
                   has-molecular-name
                   symbol))
    (range-of (atomic-number-of
                  atomic-symbol-of
                  atomic-weight-of
                  chemical-period-of
                  electronegativity-of
                  has-acid-name-of
                  has-chemical-name-of
                  has-molecular-name-of
                  symbol-of)))

(every Atom has 
    (has-chemical-name ((#'(LAMBDA () (GET-DB 'SYMBOL (STRING-CAPITALIZE (STRING (KM-UNIQUE0 '(the atomic-symbol of Self)))) 'NAME)))))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 (the atomic-symbol of Self))))))))
    (atomic-chemical-formula ((the nested-atomic-chemical-formula of Self)))
    (charge ((a Charge-Value with (value ((:pair 0 *electronic-charge))))))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 (the atomic-symbol of Self))))))))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair (#'(LAMBDA () (LET ((RESULT (GET-DB 'SYMBOL (STRING-CAPITALIZE (STRING (KM-UNIQUE0 '(the atomic-symbol of Self)))) 'ATOMIC_NUMBER))) (IF (NUMBERP RESULT) (LIST (ROUND RESULT)) ())))) nil))))))
    (atomic-weight ((a Atomic-Weight-Value with (value ((:pair (#'(LAMBDA () (LET ((RESULT (GET-DB 'SYMBOL (STRING-CAPITALIZE (STRING (KM-UNIQUE0 '(the atomic-symbol of Self)))) 'ATOMIC_WEIGHT))) (IF (NUMBERP RESULT) (LIST RESULT) ())))) *dalton))))))
    (electronegativity ((a Electronegativity-Value with (value ((:pair (#'(LAMBDA () (LET ((RESULT (LIST (GET-DB 'SYMBOL (STRING-CAPITALIZE (STRING (KM-UNIQUE0 '(the atomic-symbol of Self)))) 'ELECTRONEGATIVITY)))) (IF (NUMBERP RESULT) (LIST RESULT) ())))) nil))))))
    (chemical-period ((a Number)))
    (text-phrase ((if (has-value (the string-name of (the atomic-chemical-formula of Self))) then (the string-name of (the atomic-chemical-formula of Self)) else (the atomic-symbol of Self)))))
(At has 
    (superclasses (Metalloid
                      Halogen-Element)))

(every At has 
    (atomic-symbol ((At)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 85 ()))))))
    (chemical-period (6)))
(Assurance has 
    (superclasses (Message))
    (description ("a message expressing a commitment to do (or not do) something"))
    (wn20-synset ((:set (:triple "commitment" 4 "n") (:triple "dedication" 3 "n")))))
(Aspartic-Acid has 
    (superclasses (Acidic-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("A polar amino acid with a acetic side chain.
                        Souther")))

(every Aspartic-Acid has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Acetyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Acetyl-Group)))))))
(Asparagine has 
    (superclasses (Uncharged-Polar-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("A polar amino acid with a acetamino side chain.
                        Souther")))

(every Asparagine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Acetamino-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Acetamino-Group)))))))
(AsO4-Minus-3-Substance has 
    (superclasses (Anion-Substance)))

(every AsO4-Minus-3-Substance has 
    (plays (((a Base-Role with (default-kb ((a Equilibrium-Constant-Value with (value ((:pair 0.0033 nil)))))) (intensity ((a Intensity-Value with (value ((:pair *weak Base))))))))))
    (has-chemical-name (""))
    (has-basic-structural-unit ((a AsO4-Minus-3))))
(AsO4-Minus-3 has 
    (superclasses (Anion)))

(every AsO4-Minus-3 has 
    (charge ((a Charge-Value with (value ((:pair -3 *electronic-charge))))))
    (has-chemical-name ("Arsenate"))
    (has-acid-name ("Arsenic"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 As) (:pair 4 O))))))))
(AsO3-Minus-3 has 
    (superclasses (Anion)))

(every AsO3-Minus-3 has 
    (charge ((a Charge-Value with (value ((:pair -3 *electronic-charge))))))
    (has-chemical-name ("Arsenite"))
    (has-acid-name ("Arsenous"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 As) (:pair 3 O))))))))
(As-Plus-3 has 
    (superclasses (Cation)))

(every As-Plus-3 has 
    (charge ((a Charge-Value with (value ((:pair 3 *electronic-charge))))))
    (has-chemical-name ("arsenic(III)"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 As))))))))
(As has 
    (superclasses (Metalloid
                      VA-Element)))

(every As has 
    (atomic-symbol ((As)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 33 ()))))))
    (chemical-period (4)))
(Artillery-Unit has 
                                                                                                                                                                                                                                                                                                                                                           
    (superclasses (Military-Unit)))
(Artillery-Squad has 
    (superclasses (Artillery-Unit
                      Squad)))

(every Artillery-Squad has-definition 
    (instance-of (Artillery-Unit
                     Squad)))
(Artillery-Regiment has 
    (superclasses (Artillery-Unit
                      Regiment)))

(every Artillery-Regiment has-definition 
    (instance-of (Artillery-Unit
                     Regiment)))
(Artillery-Platoon has 
    (superclasses (Artillery-Unit
                      Platoon)))

(every Artillery-Platoon has-definition 
    (instance-of (Artillery-Unit
                     Platoon)))
(Artillery-Division has 
    (superclasses (Artillery-Unit
                      Division)))

(every Artillery-Division has-definition 
    (instance-of (Artillery-Unit
                     Division)))
(Artillery-Corps has 
    (superclasses (Artillery-Unit
                      Corps)))

(every Artillery-Corps has-definition 
    (instance-of (Artillery-Unit
                     Corps)))
(Artillery-Company has 
    (superclasses (Artillery-Unit
                      Military-Company)))

(every Artillery-Company has-definition 
    (instance-of (Artillery-Unit
                     Military-Company)))
(Artillery-Brigade has 
    (superclasses (Artillery-Unit
                      Brigade)))

(every Artillery-Brigade has 
    (element ((a Direct-Support-Artillery-Battalion)
              (a Direct-Support-Artillery-Battalion)
              (a Direct-Support-Artillery-Battalion)
              (a Direct-Support-Artillery-Battalion))))

(every Artillery-Brigade has-definition 
    (instance-of (Artillery-Unit
                     Brigade)))
(Artillery-Battery has 
    (superclasses (Artillery-Unit
                      Battery)))

(every Artillery-Battery has-definition 
    (instance-of (Artillery-Unit
                     Battery)))
(Artillery-Battalion has 
    (superclasses (Artillery-Unit
                      Battalion))
    )

(every Artillery-Battalion has-definition 
    (instance-of (Artillery-Unit
                     Battalion)))
(Artillery has 
    (superclasses (Military-Equipment))
    )
(Artifact has 
                                                                                                                         
    (superclasses (Inanimate-Object))
    (description ("A man-made object"))
    (wn20-synset ((:set (:triple "artifact" 1 "n")))))

(every Artifact has 
    (result-of ((a Create))))
(Arrhenius-Base has 
    (superclasses (Base)))

(every Arrhenius-Base has-definition 
    (instance-of (Chemical))
    (base-of ((a Aqueous-Solution with (raw-material-of ((a Reaction with (result ((a Chemical with (has-part ((a Chemical with (concentration ((a Concentration-Value with (value ((constraint (forall (the has-part of (the base-of of Self)) where ((the has-basic-structural-unit of It) isa OH-Minus) ((the1 of TheValue) > (the1 of (the concentration of It)))))))))))))))))))))))
(Arrhenius-Acid has 
    (superclasses (Acid)))

(every Arrhenius-Acid has-definition 
    (instance-of (Chemical))
    (base-of ((a Aqueous-Solution with (raw-material-of ((a Reaction with (result ((a Chemical with (has-part ((a Chemical with (concentration ((a Concentration-Value with (value ((constraint (forall (the has-part of (the base-of of Self)) where ((the has-basic-structural-unit of It) isa H-Plus) ((the1 of TheValue) > (the1 of (the concentration of It)))))))))))))))))))))))
(Aromatic-Compound has 
    (superclasses (Ring-Compound))
    (description ("A ring compound containing the benzene
                                      ring.  Souther."))
    )

(every Aromatic-Compound has 
    (has-part ((a Benzene))))
(Army-Division has 
    (superclasses (Division)))
(Army-Corps has 
    (superclasses (Corps)))
(Army has 
    (superclasses (Military-Unit))
                                                  
    (member-of (_Partition8)))
(Armored-Squad has 
    (superclasses (Armor-Unit
                      Squad)))

(every Armored-Squad has-definition 
    (instance-of (Armor-Unit
                     Squad)))
(Armored-Regiment has 
    (superclasses (Armor-Unit
                      Regiment)))

(every Armored-Regiment has-definition 
    (instance-of (Armor-Unit
                     Regiment)))
(Armored-Platoon has 
    (superclasses (Armor-Unit
                      Platoon)))

(every Armored-Platoon has-definition 
    (instance-of (Armor-Unit
                     Platoon)))
(Armored-Personnel-Carrier has 
    (superclasses (Military-Equipment))
    )
(Armored-Division has 
    (superclasses (Armor-Unit
                      Division)))

(every Armored-Division has 
    (element ((if ((the value of (the allegiance of Self)) = *Blue) then (:set (a Mechanized-Infantry-Brigade) (a Armored-Brigade) (a Armored-Brigade) (a Armored-Brigade) (a General-Support-Artillery-Battalion) (a Aviation-Battalion) (a Aviation-Battalion) (a Armored-Cavalry-Squadron))))))

(every Armored-Division has-definition 
    (instance-of (Armor-Unit
                     Division)))
(Armored-Corps has 
    (superclasses (Armor-Unit
                      Corps)))

(every Armored-Corps has-definition 
    (instance-of (Armor-Unit
                     Corps)))
(Armored-Company has 
    (superclasses (Armor-Unit
                      Military-Company)))

(every Armored-Company has-definition 
    (instance-of (Armor-Unit
                     Military-Company)))
(Armored-Cavalry-Unit has 
                                                                                                                                                                                                                                                                                                                                                                 
    (superclasses (Armor-Unit
                      Cavalry-Unit)))

(every Armored-Cavalry-Unit has-definition 
    (instance-of (Armor-Unit
                     Cavalry-Unit)))
(Armored-Cavalry-Squadron has 
    (superclasses (Armored-Cavalry-Unit
                      Squadron)))

(every Armored-Cavalry-Squadron has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.85 ())))))))

(every Armored-Cavalry-Squadron has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Squadron)))
(Armored-Cavalry-Squad has 
    (superclasses (Armored-Cavalry-Unit
                      Squad)))

(every Armored-Cavalry-Squad has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Squad)))
(Armored-Cavalry-Regiment has 
    (superclasses (Armored-Cavalry-Unit
                      Regiment)))

(every Armored-Cavalry-Regiment has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Regiment)))
(Armored-Cavalry-Platoon has 
    (superclasses (Armored-Cavalry-Unit
                      Platoon)))

(every Armored-Cavalry-Platoon has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Platoon)))
(Armored-Cavalry-Division has 
    (superclasses (Armored-Cavalry-Unit
                      Division)))

(every Armored-Cavalry-Division has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Division)))
(Armored-Cavalry-Corps has 
    (superclasses (Armored-Cavalry-Unit
                      Corps)))

(every Armored-Cavalry-Corps has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Corps)))
(Armored-Cavalry-Company has 
    (superclasses (Armored-Cavalry-Unit
                      Military-Company)))

(every Armored-Cavalry-Company has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Military-Company)))
(Armored-Cavalry-Brigade has 
    (superclasses (Armored-Cavalry-Unit
                      Brigade)))

(every Armored-Cavalry-Brigade has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Brigade)))
(Armored-Cavalry-Battalion has 
    (superclasses (Armored-Cavalry-Unit
                      Battalion)))

(every Armored-Cavalry-Battalion has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 0.85 ())))))))

(every Armored-Cavalry-Battalion has-definition 
    (instance-of (Armored-Cavalry-Unit
                     Battalion)))
(Armored-Brigade has 
    (superclasses (Armor-Unit
                      Brigade)))

(every Armored-Brigade has 
    (element ((a Armored-Battalion)
              (a Armored-Battalion)
              (a Direct-Support-Artillery-Battalion)
              (a Mechanized-Infantry-Battalion))))

(every Armored-Brigade has-definition 
    (instance-of (Armor-Unit
                     Brigade)))
(Armored-Battalion has 
    (superclasses (Armor-Unit
                      Battalion)))

(every Armored-Battalion has 
    (possesses ((if ((the value of (the allegiance of Self)) = *Blue) then (a M1A1) else (if ((the value of (the allegiance of Self)) = *Red) then (a T72))))))

(every Armored-Battalion has-definition 
    (instance-of (Armor-Unit
                     Battalion)))
(Armor-Unit has 
    (superclasses (Military-Unit))
    )
(Arginine has 
    (superclasses (Basic-Amino-Acid
                      Essential-Amino-Acid))
    (description ("A basic amino acid with a di-amido propylamine side
                        chain CH2CH2CH2NHCH(NH2)2    Souther")))

(every Arginine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site (((the Carbon-Atom has-part of (the Propylamine has-part of (the Amino-Acid-Side-Chain has-part of Self))) uniquely-called "Carbon-3")))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Propylamine) (a Methyl-Group with (object-of ((a Be-Attached-To with (object ((the Amino-Group has-part of (the Propylamine has-part of (the Amino-Acid-Side-Chain has-part of Self))))) (instrument ((a Covalent-CN-Bond))) (site ((the Nitrogen-Atom has-part of (the Amino-Group has-part of (the Propylamine has-part of (the Amino-Acid-Side-Chain has-part of Self)))) (the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))) (a Be-Attached-To with (object (((the Amino-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)) uniquely-called "Amino group 1"))) (instrument ((a Conjugated-Double-Bond))) (site ((the Nitrogen-Atom has-part of ((the Amino-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)) uniquely-called "Amino group 1")) (the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))) (a Be-Attached-To with (object (((the Amino-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)) uniquely-called "Amino group 1"))) (instrument ((a Conjugated-Double-Bond))) (site ((the Nitrogen-Atom has-part of ((the Amino-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)) uniquely-called "Amino group 2")) (the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self))))))))) (a Amino-Group uniquely-called "Amino group 1") (a Amino-Group uniquely-called "Amino group 2")))))))
(Area-Value has 
    (range-of (area))
    (domain-of (area-of))
    (superclasses (Property-Value))
    (test-case ('((Carpet has (superclasses (Physical-Object))) (*LivingroomCarpet has (instance-of (Carpet)) (area ((a Area-Value)))) (*BedroomCarpet has (instance-of (Carpet)) (area ((a Area-Value with (value ((:pair *tiny Carpet) (:pair 20 *square-meter))) (less-than ((the area of *LivingroomCarpet))))))) (the value of (the area of *BedroomCarpet)) ((the less-than of (the area of *BedroomCarpet)) includes (the area of *LivingroomCarpet)) ((the greater-than of (the area of *LivingroomCarpet)) includes (the area of *BedroomCarpet))))))
(Area-Scale has 
    (scale-class-of (area))
                                
    (superclasses (Scale)))
(Area-Constant has 
    (scalar-constant-class-of (area))
    (element-type-of (*tiny-huge-scale))
    (superclasses (Constant))
    )
(Architectural-Structure has 
    (superclasses (Artifact))
    (description ("a stable, supported artifact"))
    (wn20-synset ((:set (:triple "structure" 1 "n") (:triple "construction" 3 "n"))))
    )

(every Architectural-Structure has 
    (object-of ((a Be-Supported)
                (a Be-Stable))))
(Ar has 
    (superclasses (Non-Metal-Atom
                      Noble-Gas-Element)))

(every Ar has 
    (atomic-symbol ((Ar)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 18 ()))))))
    (chemical-period (3)))
(Aqueous-Solution has 
    (superclasses (Solution))
    )
(Anti-Tank-Unit has 
                                                                                                                                                                                                                                                                         
    (superclasses (Military-Unit)))
(Anti-Tank-Squad has 
    (superclasses (Anti-Tank-Unit
                      Squad)))

(every Anti-Tank-Squad has-definition 
    (instance-of (Anti-Tank-Unit
                     Squad)))
(Anti-Tank-Regiment has 
    (superclasses (Anti-Tank-Unit
                      Regiment)))

(every Anti-Tank-Regiment has-definition 
    (instance-of (Anti-Tank-Unit
                     Regiment)))
(Anti-Tank-Platoon has 
    (superclasses (Anti-Tank-Unit
                      Platoon)))

(every Anti-Tank-Platoon has-definition 
    (instance-of (Anti-Tank-Unit
                     Platoon)))
(Anti-Tank-Division has 
    (superclasses (Anti-Tank-Unit
                      Division)))

(every Anti-Tank-Division has-definition 
    (instance-of (Anti-Tank-Unit
                     Division)))
(Anti-Tank-Corps has 
    (superclasses (Anti-Tank-Unit
                      Corps)))

(every Anti-Tank-Corps has-definition 
    (instance-of (Anti-Tank-Unit
                     Corps)))
(Anti-Tank-Company has 
    (superclasses (Anti-Tank-Unit
                      Military-Company)))

(every Anti-Tank-Company has-definition 
    (instance-of (Anti-Tank-Unit
                     Military-Company)))
(Anti-Tank-Brigade has 
    (superclasses (Anti-Tank-Unit
                      Brigade)))

(every Anti-Tank-Brigade has-definition 
    (instance-of (Anti-Tank-Unit
                     Brigade)))
(Anti-Tank-Battalion has 
    (superclasses (Anti-Tank-Unit
                      Battalion)))

(every Anti-Tank-Battalion has-definition 
    (instance-of (Anti-Tank-Unit
                     Battalion)))
(Annihilate-Unit has 
    (superclasses (Engagement-Military-Task)))

(every Annihilate-Unit has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 7 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.86 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.1 ()))))))
    (del-list ((forall (the object of Self) (:triple It combat-strength (the combat-strength of It)))))
    (add-list ((forall (the object of Self) (:triple It combat-strength (a Combat-Strength-Value with (value ((:pair *annihilated Military-Unit))))))))
    (text-active-verbseq-sg ("annihilates"))
    (text-active-verbseq-pl ("annihilate")))
(Anion-Substance has 

    (superclasses (Ionic-Substance)))

(every Anion-Substance has 
    (solubility ((a Solubility-Value with (value ((:pair *soluble H2O-Substance))))))
    (has-basic-structural-unit ((a Anion))))
(Anion has 
    (superclasses (Ion))
    )

(every Anion has 
    (charge ((must-be-a Charge-Value)
             (constraint ((the1 of (the value of TheValue)) < 0))))
    (plays ((a Lewis-Base-Role))))
(Animal-Cell has 
    (superclasses (Suborganismal-Entity))
    (description ("The basic unit from which animals are made. Most 
                     are capable of movement.  Souther. ")))

(every Animal-Cell has 
    (is-basic-structural-unit-of ((a Animal)))
    (is-basic-functional-unit-of ((a Animal)))
    (has-part ((a Plasma-Membrane with (encloses ((the Cytoplasm has-part of Self))))
               (a Cytoplasm))))
(Animal has 
    (superclasses (Eucaryote))
    (description ("a living entity capable of locomotion"))
    (test-case ('((*ShinerTheCat has (instance-of (Animal))) ((the instance-of of (the in-event of (the capability of *ShinerTheCat))) = Locomotion))))
    (wn20-synset ((:set (:triple "animal" 1 "n") (:triple "animate_being" 1 "n") (:triple "beast" 1 "n") (:triple "brute" 2 "n") (:triple "creature" 1 "n") (:triple "fauna" 2 "n"))))
    (member-of (_Partition2
                   _Partition6))
    )

(every Animal has 
    (capability ((a Agent-Role with (in-event ((a Locomotion)))))))
(Animacy-Value has 
    (range-of (animacy))
    (domain-of (animacy-of))
    (superclasses (Property-Value)))
(Animacy-Constant has 
    (categorical-constant-class-of (animacy))
    (superclasses (Constant))
    )
(Angle-Value has 
    (range-of (angle
                  direction
                  latitude
                  longitude
                  orientation))
    (domain-of (angle-of
                   direction-of
                   latitude-of
                   longitude-of
                   orientation-of))
    (superclasses (Property-Value))
    (doc-file ("angle")))

(every Angle-Value has 
    (primary-slot ((angle))))
(Angle-Constant has 
    (scalar-constant-class-of (angle))
    (superclasses (Constant))
    )
(Analysis has 
    (superclasses (Activity))
    (wn20-synset ((:set (:triple "analysis" 1 "n") (:triple "analysis" 2 "n") (:triple "investigation" 2 "n") (:triple "investigation" 1 "n") (:triple "reasoning" 1 "n") (:triple "logical_thinking" 1 "n") (:triple "abstract_thought" 1 "n")))))

(every Analysis has 
    (text-nominalization ("analysis")))
(Amphoteric-Substance has 
                                                                        
    (superclasses (Chemical)))

(every Amphoteric-Substance has 
    (capability ((a Acid-Role)
                 (a Base-Role [Amphoteric-Substance-capability-1]))))
(Amphoteric-Anion-Substance has 
    (superclasses (Amphoteric-Substance
                      Anion-Substance))
    (test-case ('(((a Anion-Substance with (has-basic-structural-unit ((a HCO3-Minus)))) isa Amphoteric-Substance)))))

(every Amphoteric-Anion-Substance has-definition 
    (instance-of (Anion-Substance
                     [Amphoteric-Anion-Substance-instance-of-1]))
    (has-basic-structural-unit ((a Anion with (atomic-chemical-formula ((constraint (((the2 of (the1 of (the term of TheValue))) = H) and ((the number of (the elements of (the term of TheValue))) > 1)))))))))
(AMP has 
    (superclasses (Ribonucleotide
                      Nucleoside-Monophosphate))
    (description ("Adenosine monophosphate. One of the four nucleotides 
                        in RNA.  AMP is produced by the energetically 
                        favorable hydrolysis of ATP. Alberts:ECB:G-2.")))

(every AMP has 
    (complement ((must-be-a UMP)))
    (has-part ((a Monophosphate with (object-of ((a Be-Attached-To with (object ((the Adenosine has-part of Self))) (site (((the Carbon-Atom has-part of (the Ribose has-part of (the Adenosine has-part of Self))) called "Carbon-5") ((the Oxygen-Atom has-part of (the Monophosphate has-part of Self)) called "Oxygen-1"))) (instrument ((a Covalent-CO-Bond)))))))
               (a Adenosine))))
(Amoeboid-Cell-Locomotion has 
    (superclasses (Locomotion))
    (required-slot (agent))
    (primary-slot (object))
    (description ("The finger-like locomotion of a cell caused by the
                           projection and retraction of internal actin 
                           filaments.  Souther.")))

(every Amoeboid-Cell-Locomotion has 
    (agent ((a Cell)))
    (object ((a Cell)))
    (instrument ((a Aggregate called "actin filament bundles" with (element-type ((Actin-Filament))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Amino-Terminus has 
    (superclasses (Protein-Region))
    (description ("That end of a polypeptide chain which carries an
                        unattached amino acid group. Alberts:ECB:G-12")))

(every Amino-Terminus has 
    (is-region-of ((must-be-a Amino-Acid-Sequence)))
    (has-part ((a Amino-Acid with (has-part ((a Amino-Group with (object-of ((mustnt-be-a Be-Attached-To with (object ((a Carboxyl-Group with (is-part-of ((a Amino-Acid))))))))))))))))
(Amino-Group has 
    (superclasses (Chemical-Group))
    (description ("Weakly basic functional group, derived from
                             ammonia (NH3).  In aqueous solution an amino
                             group can accept a proton and carry a positive
                             charge. Alberts:ECB:G-2")))

(every Amino-Group has 
    (has-part ((a Nitrogen-Atom with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-1"))) (instrument ((a Covalent-NH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-2"))) (instrument ((a Covalent-NH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "Hydrogen-2"))))
(Amino-Acyl-TRNA-Synthetase has 
    (superclasses (Enzyme))
    (description ("An enzyme that adds one of the amino acids to the 
                        end of the appropriate tRNA molecule before the tRNA
                        binds to the ribosome during mRNA translation.
                        Souther. ")))

(every Amino-Acyl-TRNA-Synthetase has 
    (purpose ((a Catalyst with (in-event ((a TRNA-Charging)))))))
(Amino-Acid-Side-Chain has 
    (superclasses (Chemical-Group))
    (description ("A chemical group which is attached to the alpha
                             carbon in alpha amino acids.  For living 
                             organisms, there are about 20 different side
                             chains yielding 20 different amino acids which
                             make up proteins. Souther. ")))

(every Amino-Acid-Side-Chain has 
    (is-part-of ((a Amino-Acid)))
    (object-of ((a Be-Attached-To with (base ((the Alpha-Carbon has-part of (the Amino-Acid is-part-of of Self))))))))
(Amino-Acid-Sequence has 
    (superclasses (Chemical-Information-Sequence))
    (description ("A chain of amino acids linked by peptide bonds.
                             Souther. "))
    )

(every Amino-Acid-Sequence has 
    (has-part ((a Amino-Acid)))
    (element-type ((Amino-Acid)))
    (element ((at-least 1 Amino-Acid)))
    (has-region ((a Carboxyl-Terminus)
                 (a Amino-Terminus))))
(Amino-Acid-Binding-Site has 
    (superclasses (Binding-Site))
    (description ("A short, single-stranded has-region at the 3' end of
                        TRNA where the amino acid that matches the codon of
                        the mRNA being translated is bound.  
                        see Alberts:ECB:226.")))

(every Amino-Acid-Binding-Site has 
    (is-part-of ((a TRNA)))
    (is-at-of ((a 3-Prime-End with (is-region-of ((the TRNA is-part-of of Self))))
               (a TRNA-Charging))))
(Amino-Acid has 
                                                                                                                                                                                                                                                                                  
    (superclasses (Monomer))
    (description ("Organic molecule containing both an amino group and a 
                        carboxyl group.  Alpha amino acids (those in which the
                        amino and carboxyl groups are linked to the same 
                        carbon atom) serve as the building blocks of proteins.
                        Alberts:ECB:G-2.")))

(every Amino-Acid has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-Bond)))) (a Be-Attached-To with (object ((the Carboxyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond)))) (a Be-Attached-To with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To with (object ((the Hydrogen-Atom has-part of Self))) (instrument ((a Covalent-CH-Bond)))))))
               (a Carboxyl-Group)
               (a Amino-Group)
               (a Hydrogen-Atom)
               (a Amino-Acid-Side-Chain))))
(Amido-Group has 
    (superclasses (Chemical-Group))
    (description ("Molecule containing a carbonyl group linked to an
                             amine.  Alberts:ECB:G-1.")))

(every Amido-Group has 
    (has-part ((a Oxygen-Atom)
               (a Amino-Group)
               (a Carbon-Atom with (object-of ((a Be-Attached-To with (object ((the Oxygen-Atom has-part of Self))) (instrument ((a Double-Covalent-CO-Bond)))) (a Be-Attached-To with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond))))))))))
(Ambush has 
    (superclasses (Attack))
    (description ("an attack from concealed positions on an enemy")))

(every Ambush has 
    (agent ((a Military-Unit)))
    (object ((a Military-Unit)
             (set-constraint (((the number of (the value of (the allegiance of TheValues))) <= 1) and (if ((has-value (the allegiance of (the agent of Self))) and (has-value (the allegiance of TheValues))) then ((the value of (the allegiance of TheValues)) /= (the value of (the allegiance of (the agent of Self)))) else (t))))))
    (enemy ((the object of Self)))
    (first-subevent ((if (has-value (the site of Self)) then (if (((the location of (the agent of Self)) /= (the site of Self)) and ((the location of (the agent of Self)) /= (the location of (the site of Self))) and ((the is-at of (the location of (the agent of Self))) /= (the is-at of (the site of Self)))) then (a Move-Military-Unit with (object ((the agent of Self))) (destination ((the site of Self))))))))
    (required-force-ratio ((a Required-Force-Ratio-Value with (value ((:pair 0.5 ()))))))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.9 ()))))))
    (enemy-attrition-rate ((a Enemy-Attrition-Rate-Value with (value ((:pair 0.5 ()))))))
    (pcs-list ((forall (the agent of Self) (:triple It object-of (a Be-Concealed with (base ((the object of Self))))) [Ambush-pcs-1])))
    (text-active-verbseq-sg ("ambushes"))
    (text-active-verbseq-pl ("ambush")))
(Alpha-Carbon has 
    (superclasses (Carbon-Atom))
    (description ("The central carbon atom in an alpha amino acid, to
                        which the carboxyl and amino groups and the side chain
                        group are attached. Souther.")))

(every Alpha-Carbon has 
    (is-part-of ((must-be-a Amino-Acid))))
(Allosteric-Protein has 
                                  
    (superclasses (Protein))
    (description ("Protein that exists in two or more conformations
                        depending on the binding of a molecule (a ligand) at a
                        regulatory site.  Allosteric proteins composed of 
                        multiple subunits often display a cooperative response
                        to ligand binding.  Modified from Alberts:ECB:G-1.")))

(every Allosteric-Protein has 
    (has-region ((a Binding-Site)
                 (a Regulatory-Site)
                 (at-least 2 Binding-Site))))
(Allosteric-Enzyme has 
    (superclasses (Allosteric-Protein))
    (description ("Enzyme that exists in two or more 
                        conformations depending on the binding of a molecule 
                        [a ligand] at a site other than the catalytic site.
                        Allosteric enzymes composed of multiple subunits often
                        display a cooperative response to ligand binding.
                        Alberts:ECB:G-1.")))

(every Allosteric-Enzyme has 
    (has-region ((a Active-Site)
                 (a Regulatory-Site)
                 (at-least 2 Binding-Site))))
(Allocate-Resource has 
    (superclasses (Action))
    (required-slot (object))
    (primary-slot (agent
                      base))
    (cmap-correspondence ((:seq object "the resource made unavailable")
                          (:seq agent "the entity that makes the resource unavailable")
                          (:seq base "what the resource is made unavailable to")))
    (test-case ('((*Mojo has (instance-of (Physical-Object))) (a Release-Resource with (object (*Mojo))) (try-do-and-next (thelast Release-Resource)) (the text-gen of (thelast Release-Resource)) (has-value (the Be-Available object-of of *Mojo)) (a Allocate-Resource with (object (*Mojo))) (try-do-and-next (thelast Allocate-Resource)) (the text-gen of (thelast Allocate-Resource)) (not (has-value (the Be-Available object-of of *Mojo))))))
    (wn20-synset ((:set (:triple "allocate" 1 "v") (:triple "apportion" 1 "v"))))
    (caused-by-class-of (Be-Available))
    (defeated-by-class-of (Be-Unavailable)))

(every Allocate-Resource has 
    (object ((a Resource)))
    (agent ((must-be-a Entity)))
    (base ((must-be-a Thing)))
    (soft-pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Available)))))
    (defeats ((if (has-value (the base of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Available) and ((the base of It) = (the base of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Available)))))
    (del-list ((forall (the defeats of Self) (:triple (It) object (the object of Self) [Allocate-Resource-del-1]))))
    (text-active-verbseq-sg ("allocates"))
    (text-active-verbseq-pl ("allocate"))
    (text-passive-verbseq-sg ("gets allocated"))
    (text-passive-verbseq-pl ("get allocated"))
    (text-argslots ((:seq base instrument)))
    (preparatory-event ((:default (a Release-Resource with (object ((the object of Self))) (agent ((the agent of Self))) (base ((the base of Self)))))))
    (text-nominalization ("allocation")))
(Allegiance-Value has 
    (superclasses (Property-Value))
    (range-of (allegiance))
    (domain-of (allegiance-of)))

(every Allegiance-Value has 
    (property-slot ((allegiance)))
    (value ((exactly 1 Allegiance-Constant)))
    (allegiance-of ((must-be-a Entity)))
    (same-as ((must-be-a Allegiance-Value)))
    (text-phrase ((the value of Self))))
(Allegiance-Constant has 
    (superclasses (Constant))
                                        
    (categorical-constant-class-of (allegiance)))
(Alkaline-Earth-Metal-Element has 
                                                       
    (superclasses (Atom)))
(Alkali-Metal-Element has 
    (superclasses (Atom))
    )
(Alcohol has 
    (superclasses (Organic-Molecule))
    (description ("Organic compound containing a hydroxyl group bound
                        to a saturated carbon atom - for example ethyl
                        alcohol. Alberts:ECB:G-1."))
    )

(every Alcohol has 
    (has-part ((a Hydroxyl-Group uniquely-called "hydroxyl-group-1")
               (a Carbon-Atom uniquely-called "Carbon-1" with (object-of ((a Be-Attached-To with (object (((the Hydrogen-Atom has-part of Self) uniquely-called "C1-Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the Hydrogen-Atom has-part of Self) uniquely-called "C1-Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the Hydrogen-Atom has-part of Self) uniquely-called "C1-Hydrogen-3"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-2")
               (a Hydrogen-Atom uniquely-called "C1-Hydrogen-3")
               (at-least 1 Carbon-Atom)
               (at-least 1 Hydroxyl-Group))))
(Alanine has 
    (superclasses (Nonpolar-Amino-Acid
                      Nonessential-Amino-Acid))
    (description ("A nonpolar amino acid with a methyl group side chain.
                        Souther")))

(every Alanine has 
    (has-part ((a Alpha-Carbon with (object-of ((a Be-Attached-To with (object ((the Amino-Acid-Side-Chain has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Methyl-Group has-part of (the Amino-Acid-Side-Chain has-part of Self)))))))))
               (a Amino-Acid-Side-Chain with (has-part ((a Methyl-Group)))))))
(Al-Plus-3 has 
    (superclasses (Metal-Cation)))

(every Al-Plus-3 has 
    (charge ((a Charge-Value with (value ((:pair 3 *electronic-charge))))))
    (has-chemical-name ("aluminum"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Al))))))))
(Al has 
    (superclasses (Metal-Atom
                      IIIA-Element)))

(every Al has 
    (atomic-symbol ((Al)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 13 ()))))))
    (chemical-period (3)))
(Airforce has 
    (superclasses (Military-Unit)))
(Aircraft has 
    (superclasses (Military-Equipment))
    )
(Air-Defense-Battalion has 
    (superclasses (Battalion)))
(Air has 
    (superclasses (Gas-Substance))
    (wn20-synset ((:set (:triple "air" 1 "n")))))
(AH64 has 
    (superclasses (Rotor-Aircraft)))

(every AH64 has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 2.81 ())))))))
(AH1J has 
    (superclasses (Rotor-Aircraft)))

(every AH1J has 
    (default-combat-power ((a Default-Combat-Power-Value with (value ((:pair 2.05 ())))))))
(Aggregate has 
    (domain-of (element
                   first-element
                   number-of-elements))
    (range-of (element-of
                  first-element-of
                  number-of-elements-of))
    (superclasses (Entity))
    (description ("top level component for collections"))
    (test-case ('((E has (superclasses (Entity))) (F has (superclasses (Entity))) (*a1 has (instance-of (Aggregate)) (element-type (E F)) (element ((a E) (a E) (a F))) (number-of-elements (10))) (the element of *a1) (the number-of-elements of *a1) (*a2 has (instance-of (Aggregate)) (element-type (E F)) (element ((a E) (a E) (a F)))) ((the number-of-elements of *a2) = 3))))
    (wn20-synset ((:set (:triple "whole" 2 "n") (:triple "whole_thing" 1 "n") (:triple "unit" 6 "n") (:triple "aggregate" 1 "n") (:triple "congeries" 1 "n") (:triple "conglomeration" 2 "n") (:triple "group" 1 "n") (:triple "grouping" 1 "n"))))
    )

(every Aggregate has 
    (number-of-elements (((a Number) & (if ((has-value (the element of Self)) and (not (has-value (the number-of-elements of Self)))) then ((the number of (the element of Self)))) & (constraint (if (has-value (the element of Self)) then (TheValue >= (the number of (the element of Self))) else (t)))))))
(Agent-Role has 
    (superclasses (Role))
    (wn16-synset ((:set (:triple "agent" 1 "n") (:triple "agent" 3 "n") (:triple "causal_agency" 1 "n") (:triple "causal_agent" 1 "n") (:triple "cause" 4 "n"))))
    (wn20-synset ((:set (:triple "agent" 1 "n") (:triple "agent" 2 "n") (:triple "causal_agency" 1 "n") (:triple "causal_agent" 1 "n") (:triple "cause" 4 "n"))))
    )

(every Agent-Role has 
    (in-event ((must-be-a Event)))
    (played-by ((a Entity with (agent-of ((the in-event of Self)))))))
(Agent-Attrition-Rate-Value has 
    (superclasses (Property-Value))
    (range-of (agent-attrition-rate))
    (domain-of (agent-attrition-rate-of)))

(every Agent-Attrition-Rate-Value has 
    (property-slot ((agent-attrition-rate)))
    (less-than ((constraint ((TheValue isa Agent-Attrition-Rate-Value) or (TheValue isa Enemy-Attrition-Rate-Value)))))
    (greater-than ((constraint ((TheValue isa Agent-Attrition-Rate-Value) or (TheValue isa Enemy-Attrition-Rate-Value)))))
    (same-as ((constraint ((TheValue isa Agent-Attrition-Rate-Value) or (TheValue isa Enemy-Attrition-Rate-Value))))))
(Agent-Attrition-Rate-Constant has 
    (superclasses (Constant))
    (scalar-constant-class-of (agent-attrition-rate)))
(Age-Scale has 
    (scale-class-of (age))
                                
    (superclasses (Scale)))
(Age-Constant has 
    (scalar-constant-class-of (age))
    (element-type-of (*young-old-scale))
    (superclasses (Constant))
    )
(Ag3PO4 has 
    (superclasses (Ionic-Compound)))

(every Ag3PO4 has 
    (has-chemical-name (""))
    (has-part ((a Ag-Plus)
               (a PO4-Minus-3)))
    (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 3 Ag-Plus) (:pair 1 PO4-Minus-3))))))))
(Ag-Plus has 
    (superclasses (Metal-Cation)))

(every Ag-Plus has 
    (charge ((a Charge-Value with (value ((:pair 1 *electronic-charge))))))
    (has-chemical-name ("silver"))
    (nested-atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 1 Ag))))))))
(Ag has 
    (superclasses (Metal-Atom
                      Alkaline-Earth-Metal-Element)))

(every Ag has 
    (atomic-symbol ((Ag)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 47 ()))))))
    (chemical-period (5)))
(Advance has 
    (superclasses (Non-Engagement-Military-Task
                      Locomotion)))

(every Advance has 
    (agent ((a Military-Unit)))
    (agent-attrition-rate ((a Agent-Attrition-Rate-Value with (value ((:pair 0.99 ()))))))
    (text-nominalization ("advance"))
    (text-toward ("toward"))
    (text-argslots ((:seq toward path)))
    (text-active-verbseq-sg ("advances"))
    (text-active-verbseq-pl ("advance")))
(ADP has 
    (superclasses (Ribonucleotide))
    (description ((("Nucleoside that is produced by hydrolysis of the 
                        terminal phosphate of ATP. Alberts:ECB:G-1") && ("Nucleoside that is produced by hydrolysis of the 
                        terminal Phosphate of ATP. Alberts:ECB:G-1")))))

(every ADP has 
    (has-part ((a Diphosphate with (object-of ((a Be-Attached-To with (object ((the Adenosine has-part of Self))) (instrument ((a Covalent-CO-Bond))) (site (((the Oxygen-Atom has-part of ((the Monophosphate has-part of (the Diphosphate has-part of Self)) called "Phosphate-1")) called "Oxygen-1") ((the Carbon-Atom has-part of (the Ribose has-part of (the Adenosine has-part of Self))) called "Carbon-5")))))))
               (a Adenosine))))
(Admit has 
    (superclasses (Unobstruct))
    (required-slot (object
                       base))
    (primary-slot (agent))
    (cmap-correspondence ((:seq object "object")
                          (:seq object "the enclosure")
                          (:seq agent "admitter")))
    (test-case ('((*child has (instance-of (Physical-Object)) (is-outside (*cinema))) (*cinema has (instance-of (Physical-Object))) (a Shut-Out with (object (*child)) (base (*cinema))) (do-and-next (thelast Shut-Out)) (the text-gen of (thelast Shut-Out)) (has-value (the Be-Shut-Out object-of of *child)) (a Move-Into with (object (*child)) (base (*cinema))) (not (try-do (thelast Move-Into))) (the text-gen of (thelast Move-Into)) (a Admit with (object (*child)) (base (*cinema))) (do-and-next (thelast Admit)) (the text-gen of (thelast Admit)) (not (has-value (the Be-Shut-Out object-of of *child))) (do-and-next (thelast Move-Into)) (the text-gen of (thelast Move-Into)))))
    (wn16-synset ((:set (:triple "admit" 2 "v") (:triple "allow_in" 1 "v") (:triple "let_in" 2 "v"))))
    (wn20-synset ((:set (:triple "admit" 2 "v") (:triple "allow_in" 1 "v") (:triple "let_in" 2 "v"))))
    (defeated-by-class-of (Be-Shut-Out)))

(every Admit has 
    (base ((a Tangible-Entity with (plays ((a Container))))))
    (object ((a Tangible-Entity)))
    (defeats ((allof (the object-of of (the object of Self)) where (((the base of It) = (the base of Self)) and ((the classes of It) = Be-Shut-Out)))))
    (ncs-list ((forall (the object of Self) (:triple It is-inside (the base of Self) [Admit-ncs-1]))))
    (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Shut-Out with (base ((the base of Self)))) [Admit-pcs-1]))))
    (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self) [Admit-del-1]) (:triple It base (the base of Self) [Admit-del-2])))))
    (text-active-verbseq-sg ("admits"))
    (text-active-verbseq-pl ("admit"))
    (text-passive-verbseq-sg ("gets admitted"))
    (text-passive-verbseq-pl ("get admitted"))
    (preparatory-event ((:default (a Shut-Out with (base ((the base of Self))) (object ((the object of Self)))))))
    (text-nominalization ("admission")))
(Administrative-District has 
    (superclasses (Territory))
    (description ("a Territory delineated on administrative grounds"))
    (wn20-synset ((:set (:triple "administrative_district" 1 "n") (:triple "administrative_division" 1 "n") (:triple "territorial_division" 1 "n"))))
    )
(Adenosine has 
    (superclasses (Ribonucleoside))
    (description ("A nucleoside containing adenine that when joined 
                          with a monophosphate group forms one of the four
                          nucleotides in RNA.  As a nucleoside triphosphate
                          it is the principle energy yielding molecule in
                          the cell.  Souther.")))

(every Adenosine has 
    (has-part ((a Adenine with (object-of ((a Be-Attached-To with (object ((the Ribose has-part of Self))) (instrument ((a Covalent-CN-Bond))) (site (((the Carbon-Atom has-part of (the Ribose has-part of Self)) uniquely-called "Carbon-1") ((the Nitrogen-Atom has-part of (the Adenine has-part of Self)) uniquely-called "Nitrogen-9")))))))
               (a Ribose))))
(Adenine has 
    (superclasses (Purine))
    (description ("A purine base which combines with a ribose base to 
                           form adenosine.  Adenosine phosphates are prominent
                           molecules in cells as ATP, cAMP, and nucleotides in
                           DNA and RNA. Souther. ")))

(every Adenine has 
    (complement ((a Pyrimidine with (instance-of ((possible-values Thymine Uracil))))))
    (has-part ((a Nitrogen-Atom uniquely-called "Nitrogen-1" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-2" with (object-of ((a Be-Attached-To uniquely-called "C2-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C2-H" with (object (((the has-part of Self) uniquely-called "C2-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-3" with (object-of ((a Be-Attached-To uniquely-called "C2-N3" with (object (((the has-part of Self) uniquely-called "Carbon-2"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-4" with (object-of ((a Be-Attached-To uniquely-called "C4-N3" with (object (((the has-part of Self) uniquely-called "Nitrogen-3"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C4-N9" with (object (((the has-part of Self) uniquely-called "Nitrogen-9"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-5" with (object-of ((a Be-Attached-To uniquely-called "C4-C5" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-6"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C5-N7" with (object (((the has-part of Self) uniquely-called "Nitrogen-7"))) (instrument ((a Covalent-CN-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-6" with (object-of ((a Be-Attached-To uniquely-called "C5-C6" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-N1" with (object (((the has-part of Self) uniquely-called "Nitrogen-1"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C6-AG" with (object ((the Amino-Group has-part of Self))) (instrument ((a Covalent-CN-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-7" with (object-of ((a Be-Attached-To uniquely-called "C5-N7" with (object (((the has-part of Self) uniquely-called "Carbon-5"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C8-N7" with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Carbon-Atom uniquely-called "Carbon-8" with (object-of ((a Be-Attached-To uniquely-called "C8-N7" with (object (((the has-part of Self) uniquely-called "Nitrogen-7"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C8-N9" with (object (((the has-part of Self) uniquely-called "Nitrogen-9"))) (instrument ((a Conjugated-Double-Bond)))) (a Be-Attached-To uniquely-called "C8-H" with (object (((the has-part of Self) uniquely-called "C8-Hydrogen"))) (instrument ((a Covalent-CH-Bond)))))))
               (a Nitrogen-Atom uniquely-called "Nitrogen-9" with (object-of ((a Be-Attached-To uniquely-called "N9-H" with (object (((the has-part of Self) uniquely-called "N9-Hydrogen"))) (instrument ((a Covalent-NH-Bond)))) (a Be-Attached-To uniquely-called "C4-N9" with (object (((the has-part of Self) uniquely-called "Carbon-4"))) (instrument ((a Covalent-CN-Bond)))) (a Be-Attached-To uniquely-called "C8-N9" with (object (((the has-part of Self) uniquely-called "Carbon-8"))) (instrument ((a Conjugated-Double-Bond)))))))
               (a Amino-Group)
               (a Hydrogen-Atom uniquely-called "C2-Hydrogen")
               (a Hydrogen-Atom uniquely-called "C8-Hydrogen")
               (a Hydrogen-Atom uniquely-called "N9-Hydrogen"))))
(Add-Volumes has 
    (superclasses (Method))
    (description ("a method to add the volumes of multiple volumes")))

(every Add-Volumes has 
    (input ((a Volume-Value)))
    (output ((if (has-value (the value of (the input of Self))) then (a Volume-Value with (value ((:pair (the sum of (forall-bag (the bag of (the input of Self)) (the1 of (the value of (the output of (a Unit-Conversion with (input (It)) (target-unit (*liter)))))))) *liter [Add-Volumes-output-1])))) else (a Volume-Value)))))
(Add has 
    (superclasses (Action))
    (required-slot (object
                       base))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq agent "the adder")
                          (:seq object "the part added.")
                          (:seq base "the thing to which the part is being added")
                          (:seq instrument "instrument of the add")))
    (wn16-synset ((:set (:triple "add" 1 "v") (:triple "add" 6 "v") (:triple "include" 1 "v") (:triple "include" 3 "v"))))
    (wn20-synset ((:set (:triple "add" 1 "v") (:triple "add" 6 "v") (:triple "include" 1 "v") (:triple "include" 3 "v"))))
    )

(every Add has 
    (preparatory-event ((:default (a Move with (object ((the object of Self))) (destination ((the base of Self))) (agent ((the agent of Self)))))))
    (object ((a Tangible-Entity)))
    (base ((a Tangible-Entity)))
    (add-list ((forall (the object of Self) (:triple It is-part-of (the base of Self) [Add-add-1]))))
    (text-active-verbseq-sg ("adds"))
    (text-active-verbseq-pl ("add"))
    (text-passive-verbseq-sg ("gets added"))
    (text-passive-verbseq-pl ("get added"))
    (text-nominalization ("addition"))
    (causes ((if (((the object of Self) isa Chemical) and ((the base of Self) isa Chemical)) then (a Reaction with (raw-material ((the object of Self) (the base of Self)))))
             (if (((the object of Self) isa Chemical-Entity) and ((the base of Self) isa Chemical-Entity)) then (a Reaction with (raw-material ((a Chemical with (has-basic-structural-unit ((the object of Self)))) (a Chemical with (has-basic-structural-unit ((the base of Self)))))))))))
(Activity has 
    (superclasses (Event))
    (description ("a collection of related events, often to achieve a goal or produce a result, but less structured than a step-by-step process"))
    (test-case ('((*BeNeatAndClean has (instance-of (State))) (*MyHouse has (instance-of (Building))) (*Dusting has (instance-of (Action))) (*Vacuuming has (instance-of (Action))) (*Washing has (instance-of (Action))) (*Housekeeping has (instance-of (Activity)) (objective (*BeNeatAndClean)) (subevent (*Dusting *Vacuuming *Washing)) (add-list ((:triple *MyHouse object-of (the objective of Activity))))) (do-and-next (*Housekeeping)))))
    (wn20-synset ((:set (:triple "activity" 1 "n") (:triple "act" 2 "n") (:triple "human_action" 1 "n") (:triple "human_activity" 1 "n"))))
    )

(every Activity has 
    (text-nominalization ("activity")))
(Active-Site has 
    (superclasses (Binding-Site))
    (description ("Region of an enzyme surface to which a substrate
                        molecule binds before it undergoes a catalyzed
                        reaction. Alberts:ECB:G-1.")))

(every Active-Site has 
    (location-of ((must-be-a Enzyme-Catalysis))))
(Activation-Energy has 
    (superclasses (Chemical-Energy))
    (description ("Extra energy that a molecule must acquire
                                    in order to surmount an energy barrier so
                                    as to undergo a particular chemical
                                    reaction. Alberts:ECB:G-1.")))

(every Activation-Energy has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Activated-Carrier has 
    (superclasses (Molecule))
    (description ("Small molecule carrying a chemical group in a 
                        high-energy linkage, serving as a donor of energy or of
                        the chemical group in may different chemical reactions.
                        Examples include ATP, acetyl CoA, and NADH. 
                        Alberts:ECB:G-1.")))

(every Activated-Carrier has 
    (purpose ((a Donor-Role with (in-event ((a Enzyme-Catalysis with (object ((a Tangible-Entity with (instance-of ((possible-values Chemical-Group Chemical-Energy))))))))))))
    (object-of ((a Be-Attached-To with (object ((a Chemical-Group))) (instrument ((a High-Energy-Bond))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Activate has 
    (superclasses (Make-Accessible))
    (required-slot (object))
    (primary-slot (agent
                      instrument))
    (cmap-correspondence ((:seq object "The thing activated")
                          (:seq agent "The activator")
                          (:seq instrument "instrument")))
    (wn16-synset ((:set (:triple "activate" 2 "v") (:triple "enable" 1 "v") (:triple "flip" 2 "v") (:triple "gear_up" 1 "v") (:triple "prepare" 1 "v") (:triple "reactivate" 1 "v") (:triple "ready" 2 "v") (:triple "set" 7 "v") (:triple "set" 8 "v") (:triple "set_up" 15 "v") (:triple "switch" 5 "v") (:triple "throw" 6 "v"))))
    (wn20-synset ((:set (:triple "activate" 2 "v") (:triple "enable" 1 "v") (:triple "reactivate" 1 "v") (:triple "set" 8 "v"))))
    (caused-by-class-of (Be-Activated))
    )

(every Activate has 
    (preparatory-event ((:default (a Deactivate with (object ((the object of Self)))))))
    (resulting-state ((a Be-Activated)))
    (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Activated) [Activate-pcs-1]))))
    (add-list ((:triple (the resulting-state of Self) object (the object of Self) [Activate-add-1])))
    (text-active-verbseq-sg ("activates"))
    (text-active-verbseq-pl ("activate"))
    (text-passive-verbseq-sg ("gets activated"))
    (text-passive-verbseq-pl ("get activated"))
    (text-argslots ((:seq base instrument path result)))
    (text-nominalization ("activation")))
(Action has 
    (domain-of (defeats))
    (range-of (defeated-by))
    (superclasses (Event))
    (primary-slot (agent
                      object
                      instrument))
    (secondary-slot (subevent))
    (cmap-correspondence ((:seq object "the thing Acted upon")
                          (:seq agent "the Actor")
                          (:seq instrument "the thing used to Act")))
    (wn16-synset ((:set (:triple "act" 1 "v") (:triple "do" 1 "v") (:triple "do" 2 "v") (:triple "execute" 6 "v") (:triple "make" 1 "v") (:triple "move" 8 "v") (:triple "perform" 1 "v"))))
    (wn20-synset ((:set (:triple "act" 1 "v") (:triple "do" 1 "v") (:triple "do" 2 "v") (:triple "execute" 6 "v") (:triple "make" 1 "v") (:triple "move" 8 "v") (:triple "perform" 1 "v"))))
    )

(every Action has 
    (object ((must-be-a Thing)))
    (instrument ((must-be-a Entity)))
    (soft-pcs-list ((if ((has-value (the agent of Self)) and (has-value (the instrument of Self))) then (forall (the instrument of Self) (:set (:triple It object-of (a Be-Controlled with (agent ((the agent of Self))))) (:triple It object-of (mustnt-be-a Be-Inaccessible with (base ((the agent of Self))))))))
                    (if (has-value (the instrument of Self)) then (forall (the instrument of Self) (:triple It object-of (mustnt-be-a Be-Inaccessible))))
                    (if ((has-value (the agent of Self)) and (has-value (the object of Self))) then (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Inaccessible with (base ((the agent of Self)))))))
                    (forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Inaccessible)))))
    (preparatory-event ((:default (if ((the agent of Self) /= (the object of Self)) then (a Move with (object ((the agent of Self))) (destination ((the object of Self))))) (a Move with (object ((the instrument of Self))) (destination ((the object of Self)))))))
    (text-nominalization ("action")))
(Actin-Molecule has 
    (superclasses (Structural-Protein
                      Monomer))
    (description ("A Globular-Protein that can Polymerize into an
                        Actin-Filament. see Alberts:ECB:G-1.")))

(every Actin-Molecule has 
    (object-of ((a Polymerize with (result ((a Actin-Filament)))))))
(Actin-Filament has 
    (superclasses (Protein-Filament))
    (description ((("Protein filament, about 7nm thick, formed from a
                        chain of globular actin molecules.  A major
                        constituent of the cytoskeleton of all eucaryotic cells
                        and especially abundant in muscle cells.
                        Alberts:ECB:G-1.") && ("Protein-Filament, about 7nm thick, formed from a
                        chain of the globular Actin-Molecule.  A major
                        constituent of the cytoskeleton of all Eucaryotic-Cell
                        and especially abundant in muscle cells.
                        Alberts:ECB:G-1.")))))

(every Actin-Filament has 
    (element-type ((Actin-Molecule)))
    (purpose ((a Instrument-Role with (in-event ((a Amoeboid-Cell-Locomotion))))))
    (width ((a Length-Value with (value ((:pair 7 *nanometer)))))))
(Acidic-Protein has 
    (superclasses (Protein
                      Acid))
    (description ("Proteins with a net positive charge in solution that 
                        are rich in the acidic amino acids aspartic acid and
                        glutamic acid. Souther.")))

(every Acidic-Protein has 
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Acidic-Buffer has 
    (superclasses (Buffer))
    (test-case ('(((a Solution with (base ((a HF-Substance with (concentration ((a Concentration-Value with (value ((:pair 1 *molar))))))) (a NaF-Substance with (concentration ((a Concentration-Value with (value ((:pair 1 *molar)))))))))) isa Acidic-Buffer) (a Solution with (base ((a CH3COOH-Substance) (a CH3COONa-Substance) isa Acidic-Buffer)))))))

(every Acidic-Buffer has 
    (buffer-capacity ((a Buffer-Capacity-Value with (value ((:pair (((the1 of (the value of (the concentration of (oneof (the base of Self) where ((the1 of (the value of (the intensity of (the Acid-Role plays of It)))) = *weak))))) * (the1 of (the2 of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the Acid base of Self))))))) / ((the1 of (the value of (the concentration of (oneof (the base of Self) where (It isa Salt-Substance))))) * (the1 of (the2 of (the term of (the has-chemical-formula of (the has-basic-structural-unit of (the Salt-Substance base of Self)))))))) nil))))))
    (pH ((the output of (a Compute-pH-for-Acidic-Buffer with (input (Self)))))))

(every Acidic-Buffer has-definition 
    (instance-of (Solution))
    (buffer-status ((a Buffer-Status-Value with (value ((:pair *acidic-buffer nil)))))))
(Acidic-Amino-Acid has 
    (superclasses (Amino-Acid
                      Acid))
    (description ("An Amino-Acid which carries a net negative charge at
                        pH 7.  Souther."))
    )

(every Acidic-Amino-Acid has 
    (possesses ((a Electric-Charge with (polarity ((a Polarity-Value with (value ((*negative)))))))))
    (text-phrase ((the name of Self)))
    (text-gen ((the text-phrase of Self))))
(Acid-Splash-on-Skin has 
    (superclasses (Acid-Spill)))
(Acid-Spill has 
    (superclasses (Action))
    )

(every Acid-Spill has 
    (treatment ((a Action with (object ((Self))) (instrument ((a NaHCO3-Substance) (a Na2CO3-Substance)))))))
(Acid-Role has 
    (superclasses (Role))
    (test-case ('(((the1 of (the value of (the default-ka of ((a Acid-Role with (played-by ((a NH4-Plus-Substance)))))))) = 5.55E-10 +/- 1.0E-12))))
    (domain-of (default-ka
                   ka-expression
                   ka
                   pka))
    (range-of (default-ka-of
                  ka-expression-of
                  ka-of
                  pka-of)))

(every Acid-Role has 
    (intensity ((if ((has-value (the played-by of Self)) and (not (the intensity of Self))) then (if ((the played-by of Self) isa Ionic-Compound-Substance) then (if (((the played-by of Self) isa HCl-Substance) or ((the played-by of Self) isa HBr-Substance) or ((the played-by of Self) isa HI-Substance) or ((the played-by of Self) isa HClO3-Substance) or ((the played-by of Self) isa HClO4-Substance) or ((the played-by of Self) isa H2SO4-Substance) or ((the played-by of Self) isa HNO3-Substance)) then (a Intensity-Value with (value ((:pair *strong Acid)))) else (if (((the played-by of Self) isa H3PO4-Substance) or ((the played-by of Self) isa HF-Substance) or ((the played-by of Self) isa HC2H3O2-Substance) or ((the played-by of Self) isa H2CO3-Substance) or ((the played-by of Self) isa HNO2-Substance) or ((the played-by of Self) isa HC7H5O2-Substance) or ((the played-by of Self) isa HClO-Substance) or ((the played-by of Self) isa HCN-Substance) or ((the played-by of Self) isa HC6H5O-Substance) or ((the played-by of Self) isa H2S-Substance)) then (a Intensity-Value with (value ((:pair *weak Acid)))) else (if ((the played-by of Self) isa H2O-Substance) then (a Intensity-Value with (value ((:pair *negligible Acid))))))) else (if (((the played-by of Self) isa Cation-Substance) or ((the played-by of Self) isa Anion-Substance)) then (if ((the has-basic-structural-unit of (the played-by of Self)) isa H3O-Plus) then (a Intensity-Value with (value ((:pair *strong Acid)))) else (if (((the has-basic-structural-unit of (the played-by of Self)) isa HSO4-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa H2PO4-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa NH4-Plus) or ((the has-basic-structural-unit of (the played-by of Self)) isa HCO3-Minus) or ((the has-basic-structural-unit of (the played-by of Self)) isa HPO4-Minus-2)) then (a Intensity-Value with (value ((:pair *weak Acid)))) else (if ((the has-basic-structural-unit of (the played-by of Self)) isa OH-Minus) then (a Intensity-Value with (value ((:pair *negligible Acid))))))) else (if ((the played-by of Self) isa Molecular-Compound-Substance) then (if (((the played-by of Self) isa H2-Substance) or ((the played-by of Self) isa CH4-Substance)) then (a Intensity-Value with (value ((:pair *negligible Acid)))))))))))
    (ka ((((if ((the played-by of Self) and (the raw-material-of of (the played-by of Self)) and (((the raw-material-of of (the played-by of Self)) isa Hydrolysis) or ((the raw-material-of of (the played-by of Self)) isa Complete-Dissociation-Reaction)) and (the ka of (the raw-material-of of (the played-by of Self)))) then (the ka of (the raw-material-of of (the played-by of Self))))) && ((if (((the context of Self) /= "none") and (numberp (the1 of (the value of ((the kb of (the Base-Role plays of (the context of Self))) or (the default-kb of (the Base-Role plays of (the context of Self)))))))) then (a Equilibrium-Constant-Value with (value ((:pair (1.0E-14 / (the1 of (the value of ((the kb of (the Base-Role plays of (the context of Self))) or (the default-kb of (the Base-Role plays of (the context of Self))))))) nil)))))))))
    (context (((?pair == (the Conjugate-Acid-Base-Pair complement-of of (the played-by of Self))) and (if (has-value ?pair) then (the element of ?pair) else (the complement of (a Conjugate-Acid-Base-Pair with (element ((the played-by of Self)))))))))
    (pka ((if ((the played-by of Self) and (the raw-material-of of (the played-by of Self)) and (((the raw-material-of of (the played-by of Self)) isa Hydrolysis) or ((the raw-material-of of (the played-by of Self)) isa Complete-Dissociation-Reaction)) and (the pka of (the raw-material-of of (the played-by of Self)))) then (the pka of (the raw-material-of of (the played-by of Self))))))
    (ka-expression ((if ((has-value (the played-by of Self)) and ((the raw-material-of of (the played-by of Self)) isa Hydrolysis) and (the ka-expression of (the raw-material-of of (the played-by of Self)))) then (the ka-expression of (the raw-material-of of (the played-by of Self)))))))
(Acid-Compound has 
    (superclasses (Ionic-Compound)))
(Acid-can-be-Oxidized has 
    (superclasses (Method)))

(every Acid-can-be-Oxidized has 
    (input ((a Acid)))
    (context ((the output of (a Oxidize-an-Acid with (input ((the input of Self)))))))
    (output ((((if (has-value (the context of Self)) then (the context of Self) [Acid-can-be-Oxidized-output-1])) && ((if (not (has-value (the context of Self))) then "no" [Acid-can-be-Oxidized-output-2]))))))
(Acid-Base-Exchange-w-Gas-c has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a HCl-Substance) (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (atomic-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na) (:pair 1 S))))))) (has-chemical-formula ((a Chemical-Formula with (term ((:seq (:pair 2 Na-Plus) (:pair 1 S-Minus-2))))))))))))))) where ((It isa H2S-Substance) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Cl-Minus) (:pair 1 Na-Plus)))))) = 2)))))

(every Acid-Base-Exchange-w-Gas-c has 
    (result ((if (not (the H2S-Substance raw-material of Self)) then (:set (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((an instance of (forall (the raw-material of Self) where ((the Anion has-part of (the has-basic-structural-unit of It)) isa S-Minus-2) (the instance-of of (the Cation has-part of (the has-basic-structural-unit of It))))) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the Acid raw-material of Self)))))))))) [Acid-Base-Exchange-w-Gas-c-result-1]) (a H2S-Substance))))))

(every Acid-Base-Exchange-w-Gas-c has-definition 
    (instance-of (Reaction
                     [Acid-Base-Exchange-w-Gas-c-instance-of-1]))
    (raw-material ((a Acid)
                   (constraint (not (TheValue isa H2S-Substance)))
                   (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a S-Minus-2))))))))))
(Acid-Base-Exchange-w-Gas-b has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a HCl-Substance) (a NaHCO3-Substance))))) where ((It isa H2O-Substance) or (It isa CO2-Substance) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Cl-Minus) (:pair 1 Na-Plus)))))) = 3)))))

(every Acid-Base-Exchange-w-Gas-b has 
    (result ((a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((an instance of (forall (the raw-material of Self) where ((the Anion has-part of (the has-basic-structural-unit of It)) isa HCO3-Minus) (the instance-of of (the Cation has-part of (the has-basic-structural-unit of It))))) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the Acid raw-material of Self)))))))))) [Acid-Base-Exchange-w-Gas-b-result-1])
             (a H2O-Substance)
             (a CO2-Substance))))

(every Acid-Base-Exchange-w-Gas-b has-definition 
    (instance-of (Reaction
                     [Acid-Base-Exchange-w-Gas-b-instance-of-1]))
    (raw-material ((a Acid)
                   (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a HCO3-Minus))))))))))
(Acid-Base-Exchange-w-Gas-a has 
    (superclasses (Reaction))
    (test-case ('(((the number of (allof (the result of (a Reaction with (raw-material ((a HCl-Substance) (a Na2CO3-Substance))))) where ((It isa H2O-Substance) or (It isa CO2-Substance) or ((the elements of (the term of (the has-chemical-formula of (the has-basic-structural-unit of It)))) = (:set (:pair 1 Cl-Minus) (:pair 1 Na-Plus)))))) = 3)))))

(every Acid-Base-Exchange-w-Gas-a has 
    (result ((a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((an instance of (forall (the raw-material of Self) where ((the Anion has-part of (the has-basic-structural-unit of It)) isa CO3-Minus-2) (the instance-of of (the Cation has-part of (the has-basic-structural-unit of It))))) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the Acid raw-material of Self)))))))))) [Acid-Base-Exchange-w-Gas-a-result-1])
             (a H2O-Substance)
             (a CO2-Substance))))

(every Acid-Base-Exchange-w-Gas-a has-definition 
    (instance-of (Reaction
                     [Acid-Base-Exchange-w-Gas-a-instance-of-1]))
    (raw-material ((a Acid)
                   (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a CO3-Minus-2))))))))))
(Acid-Base-Complete-Neutralization has 
    (superclasses (Reaction)))

(every Acid-Base-Complete-Neutralization has 
    (result ((if (not (has-value (the result of Self))) then (:set (a H2O-Substance) (a Ionic-Compound-Substance with (has-basic-structural-unit ((a Ionic-Compound with (has-part ((an instance of (the instance-of of (the Cation has-part of (the has-basic-structural-unit of (the Base raw-material of Self))))) (an instance of (the instance-of of (the Anion has-part of (the has-basic-structural-unit of (the Acid raw-material of Self)))))))))))) [Acid-Base-Complete-Neutralization-result-1]))))

(every Acid-Base-Complete-Neutralization has-definition 
    (instance-of (Reaction))
    (raw-material ((a Acid)
                   (a Base))))
(Acid has 

    (superclasses (Ionic-Compound-Substance))
    (member-of (_Partition9)))

(every Acid has 
    (plays ((a Acid-Role))))

(every Acid has-definition 
    (instance-of (Ionic-Compound-Substance))
    (has-basic-structural-unit ((a Ionic-Compound with (has-part ((a H-Plus))))
                                (constraint ((the term of (the has-chemical-formula of TheValue)) /= (:seq (:pair 1 H-Plus) (:pair 1 OH-Minus)))))))
(Acetyl-Group has 
    (superclasses (Chemical-Group))
    (description ((("A chemical group derived from acetic acid.
                             Alberts:ECB:G-1") && ("A Chemical-Group derived from Acetic-Acid.
                             Alberts:ECB:G-1")))))

(every Acetyl-Group has 
    (has-part ((a Carbon-Atom with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object ((the Carboxyl-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Carboxyl-Group has-part of Self))))))))
               (a Hydrogen-Atom uniquely-called "Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "Hydrogen-2")
               (a Carboxyl-Group)
               (exactly 2 Hydrogen-Atom))))
(Acetamino-Group has 
    (superclasses (Chemical-Group))
    (description ("A chemical group derived from acetamine. 
                             CH3-CONH2. Souther.")))

(every Acetamino-Group has 
    (has-part ((a Carbon-Atom with (object-of ((a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-1"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object (((the has-part of Self) uniquely-called "Hydrogen-2"))) (instrument ((a Covalent-CH-Bond)))) (a Be-Attached-To with (object ((the Amido-Group has-part of Self))) (instrument ((a Covalent-CC-Bond))) (site ((the Carbon-Atom has-part of (the Amido-Group has-part of Self))))))))
               (a Hydrogen-Atom uniquely-called "Hydrogen-1")
               (a Hydrogen-Atom uniquely-called "Hydrogen-2")
               (a Amido-Group))))
(Acceleration-Value has 
    (range-of (acceleration))
    (domain-of (acceleration-of))
    (superclasses (Property-Value))
    (doc-file ("acceleration"))
    )

(every Acceleration-Value has 
    (primary-slot ((acceleration))))
(Acceleration-Scale has 
    (scale-class-of (acceleration))
    (superclasses (Scale)))
(Acceleration-Constant has 
    (scalar-constant-class-of (acceleration))
    (superclasses (Constant)))
(Absorb has 
    (superclasses (Take-In))
    (required-slot (object
                       destination
                       agent))
    (primary-slot (origin
                      path))
    (cmap-correspondence ((:seq agent "the absorb'er")
                          (:seq object "the Fluid being absorbed")
                          (:seq destination "final location")
                          (:seq origin "original location")
                          (:seq path "the portal")))
    (test-case ('((*Plant has (instance-of (Living-Entity)) (location ((a Place)))) (*Water has (instance-of (Fluid-Substance))) (*Absorb has (instance-of (Absorb)) (agent (*Plant)) (object (*Water))) (do-and-next *Absorb) (the text-gen of (thelast Absorb)) ((the is-inside of *Water) includes *Plant) ((the content of (the Container plays of *Plant)) includes *Water) ((the encloses of (the location of *Plant)) includes *Water))))
    (wn16-synset ((:set (:triple "absorb" 1 "v"))))
    (wn20-synset ((:set (:triple "absorb" 1 "v")))))

(every Absorb has 
    (object ((a Fluid-Substance)))
    (text-active-verbseq-sg ("absorbs"))
    (text-active-verbseq-pl ("absorb"))
    (text-passive-verbseq-sg ("gets absorbed"))
    (text-passive-verbseq-pl ("get absorbed"))
    (text-nominalization ("absorption")))
(A-U-Base-Pair has 
    (superclasses (Base-Pair))
    (description ("The Base Pair resulting from Hydrogen-Bond formation
                        between adenine and uracil in RNA molecules.  
                        Souther.")))

(every A-U-Base-Pair has 
    (is-part-of ((must-be-a RNA-Molecule)))
    (has-part ((a Adenine with (complement ((the Uracil has-part of Self))) (object-of ((a Be-Attached-To with (object ((the Uracil has-part of Self))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Uracil has-part of Self)) called "N3-Hydrogen") ((the Nitrogen-Atom has-part of (the Adenine has-part of Self)) called "Nitrogen-1")))) (a Be-Attached-To with (object ((the Uracil has-part of Self))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Amino-Group has-part of (the Adenine has-part of Self))) called "Hydrogen-1") ((the Oxygen-Atom has-part of (the Uracil has-part of Self)) called "C4-Oxygen")))))))
               (a Uracil))))
(A-T-Base-Pair has 
    (superclasses (Base-Pair))
    (description ((("The nucleotide base pair resulting from the hydrogen
                        bonding of adenine and thymine in DNA molecules.  
                        Souther.") && ("The Nucleotide Base-Pair resulting from Hydrogen-Bond 
                        formation between Adenine and Thymine in the 
                        DNA-Molecule. Souther.")))))

(every A-T-Base-Pair has 
    (is-part-of ((must-be-a DNA-Molecule)))
    (has-part ((a D-TMP)
               (a D-AMP with (has-part ((a Adenine with (complement ((the Thymine has-part of (the D-TMP has-part of Self)))) (object-of ((a Be-Attached-To with (object ((the Thymine has-part of (the D-TMP has-part of Self)))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Thymine has-part of (the D-TMP has-part of Self))) called "N3-Hydrogen") ((the Nitrogen-Atom has-part of (the Adenine has-part of Self)) called "Nitrogen-1")))) (a Be-Attached-To with (object ((the Thymine has-part of (the D-TMP has-part of Self)))) (instrument ((a Hydrogen-Bond))) (site (((the Hydrogen-Atom has-part of (the Amino-Group has-part of (the Adenine has-part of Self))) called "Hydrogen-1") ((the Oxygen-Atom has-part of (the Thymine has-part of (the D-TMP has-part of Self))) called "C4-Oxygen")))))))))))))
(A-Site has 
    (superclasses (Binding-Site))
    (description ((("The site on the ribosome where the incoming amino-acyl
                        tRNA binds.  Alberts:ECB:230.") && ("The Binding-Site on the Ribosome where the incoming 
                        amino-acyl TRNA binds.  Alberts:ECB:230.")))))

(every A-Site has 
    (site-of ((a Attach with (object ((a TRNA))) (base ((a Ribosome))))))
    (text-base-phrase ((if (anonymous-instancep Self) then (:seq (the text-def-determiner of Self) (the text-premods of Self) (the text-head of Self)) else (:seq (the text-head of Self)))))
    (text-phrase ((if (anonymous-instancep Self) then (:seq (the text-base-phrase of Self) (the elements of (the text-postmods of Self))) else (the text-base-phrase of Self)))))
(A has 
    (superclasses (Atom))
    (description ("generic symbol for atoms")))

(every A has 
    (atomic-symbol ((A)))
    (atomic-number ((a Atomic-Number-Value with (value ((:pair 0 ()))))))
    (atomic-weight ((a Atomic-Weight-Value with (value ((:pair 0 ()))))))
    (chemical-period (0))
    (symbol ("A")))
(7-Methyl-Guanosine has 
    (superclasses (Guanosine))
    (description ((("A modified guanosine which is attached to 
                                   the 5' end of newly made mRNA during RNA 
                                   capping.  Alberts:ECB:218.") && ("A modified Guanosine which is attached to
                                   the 5' end of newly made MRNA during 
                                   RNA-Caapping.  Alberts:ECB:218.")))))
(5-Prime-Ribonucleotide has 
    (superclasses (RNA-Sequence))
    (description ((("Nucleotide at the end of a RNA sequence which is connected
                    within the sequence only at the 3' OH.  If at the end of
                    a molecule the free 5' OH is connected to a triphosphate
                    rather than a monophosphate.  Souther.") && ("Nucleotide at the end of a RNA-Sequence which is connected
                    within the sequence only at the 3' Hydroxyl-Group.  If at
                    the 5-Prime-End of a molecule the 5' Hydroxyl-Group is
                    connected to a triphosphate rather than a monophosphate.
                    Souther.")))))

(every 5-Prime-Ribonucleotide has 
    (is-part-of ((a RNA-Sequence)))
    (has-chemical-name ("5-Prime-Ribonucleotide")))
(5-Prime-Nucleotide has 
                                                                                           
    (superclasses (Nucleotide))
    (description ("Nucleotide at the end of a sequence whose 5' end either
                    bears a free triphosphate (free sequences like DNA strands
                    or DNA strand fragments) or whose 5' end
                    is attached to a neighboring sequence (internal sequences
                    like introns or regulatory sequences).  Souther. ")))

(every 5-Prime-Nucleotide has 
    (is-part-of ((a Nucleotide-Sequence))))
(5-Prime-Nucleoside-Triphosphate has 
    (superclasses (5-Prime-Nucleotide
                      Nucleoside-Triphosphate))
    (description ("Nucleotide at the end of a sequence whose 5' end 
                    bears a free triphosphate (free sequences like DNA strands
                    or DNA strand fragments).  Souther. ")))
(5-Prime-End has 
    (superclasses (Nucleic-Acid-Region))
    (description ((("The has-region of a nucleotide sequence which includes the 
                        terminal nucleotide with a free 5' triphosphate group.
                        Souther. ") && ("The Region of a Nucleotide-Sequence which includes the
                        terminal Nucleotide with a free 5' Triphosphate group.
                        Souther. ")))))

(every 5-Prime-End has 
    (is-at-of ((a 5-Prime-Nucleotide))))
(5-Prime-Deoxyribonucleotide has 
    (superclasses (Deoxyribonucleotide
                      5-Prime-Nucleotide))
    (description ((("Nucleotide at the end of a DNA sequence which is connected
                    within the sequence only at the 3' OH.  If the 
                    DNA-Sequence is free, the 5' phosphoryl group is a
                    triphosphate rather than a monophosphate.  Souther.") && ("Nucleotide at the 5-Prime-End of a DNA-Sequence which is
                    connected within the sequence only at the 3' OH. If the
                    DNA-Sequence is free, the 5' Phosphoryl-Group is a
                    Triphosphate rather than a Monophosphate.  Souther.")))))

(every 5-Prime-Deoxyribonucleotide has 
    (is-part-of ((a DNA-Sequence))))
(3-Prime-Ribonucleotide has 
    (superclasses (Ribonucleotide
                      3-Prime-Nucleotide))
    (description ((("Nucleotide at the end of a RNA sequence which is connected
                    within the sequence only at the 5' OH. At the end of a
                    molecule the 3'-OH is free.  Souther.") && ("Nucleotide at the 3-Prime-End of an RNA-Sequence which is 
                    connected within the sequence only at the 5'
                    Hydroxyl-Group.  At the end of a molecule the 3' 
                    Hydroxyl-Group is free.  Souther.")))))

(every 3-Prime-Ribonucleotide has 
    (is-part-of ((a RNA-Sequence))))
(3-Prime-Nucleotide has 
                                                                                                                                  
    (superclasses (Nucleoside-Monophosphate))
    (description ("Nucleotide at the end of a sequence whose 3' end either
                    bears a free hydroxyl group (free sequences like DNA 
                    strands or DNA strand fragments) or whose 3' end
                    is attached to a neighboring sequence (internal sequences
                    like introns or regulatory sequences).  Souther. ")))

(every 3-Prime-Nucleotide has 
    (is-part-of ((a Nucleotide-Sequence))))
(3-Prime-Nucleoside-Monophosphate has 
    (superclasses (3-Prime-Nucleotide))
    (description ("Nucleotide at the end of a sequence whose 3' end 
                    bears a free hydroxyl group (free sequences like DNA 
                    strands or DNA strand fragments).  Souther. ")))
(3-Prime-End has 
    (superclasses (Nucleic-Acid-Region))
    (description ((("The has-region of a nucleotide sequence acid which includes
                        the terminal nucleotide with a free 3' hydroxyl group.
                        Souther. ") && ("The has-region of a Nucleotide-Sequence which has contents
                        the terminal Nucleotide with a free 3' Hydroxyl-Group.
                        Souther. ")))))

(every 3-Prime-End has 
    (is-at-of ((a 3-Prime-Nucleotide))))
(3-Prime-Deoxyribonucleotide has 
    (superclasses (Deoxyribonucleotide
                      3-Prime-Nucleotide))
    (description ((("Nucleotide at the end of a DNA sequence which is connected
                    within the sequence only at the 5' OH. At the end of a
                    molecule the 3'-OH is free.  Souther.") && ("Nucleotide at the 3-Prime-End of a DNA-Sequence which is
                    connected within the sequence only at the 5' OH. At the 
                    3-Prime-End of a DNA-Strand, the 3'-OH is free. 
                    Souther.")))))

(every 3-Prime-Deoxyribonucleotide has 
    (is-part-of ((a DNA-Sequence))))
(*kilocalorie/mole has
    (superclasses (Thing)) 
    )
(Temporal-Relation has 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
    (superclasses (Relation)))
(Spatial-Relation has 

    (superclasses (Relation)))
(Shaken-Slot-Group has 
                                   
    (superclasses (KM-Slot-Group)))
(Relation has 
                                                                                                                                                                                                        
    (superclasses (Slot))
    )

(every Relation has 
    (shaken-ui-hidden-slot ((if (anonymous-instancep Self) then t)))
    (name ((#'(LAMBDA () (IF (STRING= (STRING (KM-UNIQUE0 'Self)) "has-" :END1 4) (SUBSEQ (STRING (KM-UNIQUE0 'Self)) 4) (STRING (KM-UNIQUE0 'Self))))))))
(PropertyProperty has 
                                                                                                                                         
    (superclasses (Property)))
(Property has 
    (domain-of (cardinal-unit-class
                   categorical-constant-class
                   scalar-constant-class
                   scale-class))
    (range-of (cardinal-unit-class-of
                  categorical-constant-class-of
                  scalar-constant-class-of
                  scale-class-of))
                                                                                            
    (superclasses (Slot))
    )

(every Property has 
    (shaken-ui-hidden-slot ((if (anonymous-instancep Self) then t))))
(Participant-Relation has 
                                                                                                                                                                                                                                                                                                                            
    (superclasses (Relation)))
(NL-Slot-Group has 

    (superclasses (KM-Slot-Group)))
(Meronymic-Relation has 

    (superclasses (Relation))
    (wn20-synset ((:set (:triple "structure" 0 "n")))))
(KM-Slot-Group has 

                                                                                              
    (superclasses (Slot)))
(Interface-Slot has 
    (superclasses (Slot))
    )
(EventProperty has 
                                                                                                                                                                                                                                                                                                                                                                                                           
    (superclasses (Property)))
(EntityProperty has 

    (superclasses (Property)))
(CLIB-Slot-Group has 

    (superclasses (KM-Slot-Group)))
(Causal-Relation has 
                                                                                                                                                                                                                                                                                             
    (superclasses (Relation)))
(Agentive-Relation has 
                                                                                        
  (superclasses (Relation)))

:SLOT-CLASS
 

:SITUATION-CLASS
 

:THEORY-CLASS
 

:INSTANCE
 
(_Partition9 has 
    (instance-of (Partition))
    (members (Salt-Substance
                 Base
                 Acid
                 H2O-Substance)))
(_Partition8 has 
    (instance-of (Partition))
    (members (Army
                 Battalion
                 Battery
                 Brigade
                 Military-Company
                 Corps
                 Crew
                 Detachment
                 Division
                 Military-Group
                 Platoon
                 Regiment
                 Section
                 Squad
                 Squadron
                 Military-Team
                 Troop)))
(_Partition7 has 
    (instance-of (Partition))
    (members (Military-Unit
                 Terrain)))
(_Partition6 has 
    (instance-of (Partition))
    (members (Animal
                 Virus)))
(_Partition5 has 
    (instance-of (Partition))
    (members (Substance
                 Chemical-Entity)))
(_Partition4 has 
    (instance-of (Partition))
    (members (Tangible-Entity
                 Place)))
(_Partition3 has 
    (instance-of (Partition))
    (members (Nonrenewable-Resource
                 Renewable-Resource)))
(_Partition2 has 
    (instance-of (Partition))
    (members (Animal
                 Plant)))
(_Partition1 has 
    (instance-of (Partition))
    (members (Event
                 Entity)))
(UoM-Intensity has 
    (cardinal-unit-class-of (intensity))
    (superclasses (Unit-of-Measurement))
    (instance-of (*kilocalorie/mole))
    (wn20-synset ((:set (:triple "kilocalorie per mole" 0 "n") (:triple "kilocalories per mole" 0 "n")))))
(*young-old-scale has 
    (instance-of (Age-Scale))
    (element-type (Age-Constant))
    (element ((:seq *young *adolescent *juvenile *teenage *middle-aged *old))))
(*young has 
    (instance-of (Age-Constant)))
(*yes-no-question has 
    (instance-of (Viewpoint-Query-Type)))
(*yen has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "yen" 0 "n")))))
(*yellowGreen has 
    (instance-of (Color-Constant)))
(*yellow has 
    (instance-of (Color-Constant)))
(*yearly has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "yearly" 0 "n")))))
(*year has 
    (instance-of (UoM-Time
                     UoM-Duration))
    (wn20-synset ((((:set (:triple "year" 0 "n") (:triple "years" 0 "n"))) && ((:set (:triple "year" 0 "n") (:triple "year" 0 "n")))))))
(*yard has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "yard" 0 "n") (:triple "yards" 0 "n")))))
(*wide has 
    (instance-of (Width-Constant
                     Primary-Constant)))
(*whiteSmoke has 
    (instance-of (Color-Constant)))
(*white has 
    (instance-of (Color-Constant)))
(*wheat has 
    (instance-of (Color-Constant)))
(*wet has 
    (instance-of (Wetness-Constant)))
(*WET has 
    (instance-of (Time-Zone-Constant))
    (name ("WET")))
(*WEST has 
    (instance-of (Time-Zone-Constant))
    (name ("WEST")))
(*weekly has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "weekly" 0 "n")))))
(*week has 
    (instance-of (UoM-Duration))
    (wn20-synset ((:set (:triple "week" 0 "n") (:triple "weeks" 0 "n")))))
(*Wednesday has 
    (instance-of (Day-Constant))
    (name ("Wednesday")))
(*weak-strong-scale has 
    (instance-of (Intensity-Scale))
    (element-type (Intensity-Constant))
    (element ((:seq *negligible *weak *strong))))
(*weak has 
    (instance-of (Intensity-Constant
                     Electrolyte-Status-Constant)))
(*watt has 
    (instance-of (UoM-Power))
    (wn20-synset ((:set (:triple "watt" 0 "n") (:triple "watts" 0 "n") (:triple "W" 0 "n")))))
(*watery has 
    (instance-of (Taste-Constant)))
(*warm has 
    (instance-of (Temperature-Constant)))
(*vulnerable has 
    (instance-of (Trait-Constant)))
(*volt has 
    (instance-of (UoM-Voltage))
    (wn20-synset ((:set (:triple "volt" 0 "n") (:triple "volts" 0 "n")))))
(*violetRed has 
    (instance-of (Color-Constant)))
(*violet has 
    (instance-of (Color-Constant)))
(*vertical has 
    (instance-of (Orientation-Constant
                     Slope-Constant)))
(*UTC has 
    (instance-of (Time-Zone-Constant))
    (name ("UTC")))
(*usdollar has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "usd" 0 "n")))))
(*urgent has 
    (instance-of (Priority-Constant)))
(*Urdu has 
    (instance-of (Natural-Language)))
(*UR has 
    (instance-of (Trafficability-Constant)))
(*upright has 
    (instance-of (Orientation-Constant)))
(*unlimited has 
    (instance-of (Capacity-Constant)))
(*unity has 
    (instance-of (UoM-Unitless))
    (wn20-synset ((:set (:triple "no unit" 0 "n") (:triple "unity" 0 "n")))))
(*unimportant-important-scale has 
    (instance-of (Importance-Scale))
    (element-type (Importance-Constant))
    (element ((:seq *unimportant *moderately-important *important))))
(*unimportant has 
    (instance-of (Importance-Constant)))
(*undersized has 
    (instance-of (Size-Constant)))
(*unbreakable has 
    (instance-of (Breakability-Constant)))
(*turquoise has 
    (instance-of (Color-Constant)))
(*Tuesday has 
    (instance-of (Day-Constant))
    (name ("Tuesday")))
(*true has 
    (instance-of (Truth-Constant)))
(*triangle has 
    (instance-of (Shape-Constant)))
(*tomato has 
    (instance-of (Color-Constant)))
(*tireless has 
    (instance-of (Trait-Constant)))
(*tiny-huge-scale has 
    (instance-of (Area-Scale))
    (element-type (Area-Constant))
    (element ((:seq *tiny *huge))))
(*tiny has 
    (instance-of (Area-Constant
                     Size-Constant)))
(*Thursday has 
    (instance-of (Day-Constant))
    (name ("Thursday")))
(*thistle has 
    (instance-of (Color-Constant)))
(*thin-thick-scale has 
    (instance-of (Thickness-Scale))
    (element-type (Thickness-Constant))
    (element ((:seq *thin *thick))))
(*thin has 
    (instance-of (Thickness-Constant)))
(*thick has 
    (instance-of (Thickness-Constant
                     Primary-Constant)))
(*Telugu has 
    (instance-of (Natural-Language)))
(*teenage has 
    (instance-of (Age-Constant)))
(*teal has 
    (instance-of (Color-Constant)))
(*tasteless has 
    (instance-of (Taste-Constant)))
(*tan has 
    (instance-of (Color-Constant)))
(*Tamil has 
    (instance-of (Natural-Language)))
(*tall has 
    (instance-of (Height-Constant
                     Primary-Constant)))
(*sweet has 
    (instance-of (Taste-Constant)))
(*Sunday has 
    (instance-of (Day-Constant))
    (name ("Sunday")))
(*submissive has 
    (instance-of (Trait-Constant)))
(*strong has 
    (instance-of (Intensity-Constant
                     Electrolyte-Status-Constant)))
(*straight has 
    (instance-of (Angle-Constant)))
(*stony has 
    (instance-of (Consistency-Constant)))
(*stinky has 
    (instance-of (Smell-Constant)))
(*stilb has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "stilb" 0 "n") (:triple "stilbs" 0 "n")))))
(*steep has 
    (instance-of (Slope-Constant)))
(*steelBlue has 
    (instance-of (Color-Constant)))
(*SR-UR-scale has 
    (instance-of (Trafficability-Scale))
    (element-type (Trafficability-Constant))
    (element ((:seq *SR *R *UR))))
(*SR has 
    (instance-of (Trafficability-Constant)))
(*square-meter has 
    (instance-of (UoM-Area))
    (wn20-synset ((:set (:triple "square meter" 0 "n") (:triple "square meters" 0 "n") (:triple "m^2" 0 "n")))))
(*square-inch has 
    (instance-of (UoM-Area))
    (wn20-synset ((:set (:triple "square inch" 0 "n") (:triple "square inches" 0 "n") (:triple "in^2" 0 "n")))))
(*square-foot has 
    (instance-of (UoM-Area))
    (wn20-synset ((:set (:triple "square foot" 0 "n") (:triple "square feet" 0 "n") (:triple "ft^2" 0 "n")))))
(*square has 
    (instance-of (Shape-Constant)))
(*springGreen has 
    (instance-of (Color-Constant)))
(*spicy has 
    (instance-of (Smell-Constant)))
(*Spanish has 
    (instance-of (Natural-Language)))
(*sour has 
    (instance-of (Taste-Constant)))
(*soluble has 
    (instance-of (Solubility-Constant)))
(*solid has 
    (instance-of (State-Constant)))
(*snow has 
    (instance-of (Color-Constant)))
(*smooth has 
    (instance-of (Texture-Constant)))
(*smokey has 
    (instance-of (Smell-Constant)))
(*small-large-scale has 
    (instance-of (Volume-Scale))
    (element-type (Volume-Constant))
    (element ((:seq *small *large))))
(*small has 
    (instance-of (Size-Constant
                     Volume-Constant)))
(*slug has 
    (instance-of (UoM-Mass))
    (wn20-synset ((:set (:triple "slug" 0 "n") (:triple "slugs" 0 "n")))))
(*slow-fast-scale has 
    (instance-of (Rate-Scale))
    (element-type (Rate-Constant))
    (element ((:seq *slow *fast))))
(*slow has 
    (instance-of (Rate-Constant)))
(*slot-value has 
    (instance-of (Viewpoint-Query-Type)))
(*slot-query has 
    (instance-of (Viewpoint-Query-Type)))
(*slateGray has 
    (instance-of (Color-Constant)))
(*slateBlue has 
    (instance-of (Color-Constant)))
(*skyBlue has 
    (instance-of (Color-Constant)))
(*silver has 
    (instance-of (Color-Constant)))
(*sienna has 
    (instance-of (Color-Constant)))
(*short-tall-scale has 
    (instance-of (Height-Scale))
    (element-type (Height-Constant))
    (element ((:seq *short *average *tall))))
(*short-long-scale has 
    (instance-of (Length-Scale))
    (element-type (Length-Constant))
    (element ((:seq *short *long))))
(*short has 
    (instance-of (Height-Constant
                     Length-Constant)))
(*shallow-deep-scale has 
    (instance-of (Depth-Scale))
    (element-type (Depth-Constant))
    (element ((:seq *shallow *deep))))
(*shallow has 
    (instance-of (Depth-Constant)))
(*sgdollar has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "sgdollar" 0 "n")))))
(*sentient has 
    (instance-of (Sentience-Constant)))
(*semi-permeable has 
    (instance-of (Integrity-Constant)))
(*second has 
    (instance-of (UoM-Time
                     UoM-Duration))
    (wn20-synset ((:set (:triple "second" 0 "n") (:triple "seconds" 0 "n") (:triple "s" 0 "n")))))
(*seaShell has 
    (instance-of (Color-Constant)))
(*seaGreen has 
    (instance-of (Color-Constant)))
(*score has 
    (instance-of (UoM-Quantity))
    (wn20-synset ((:set (:triple "score" 0 "n") (:triple "scores" 0 "n")))))
(*Saturday has 
    (instance-of (Day-Constant))
    (name ("Saturday")))
(*sandyBrown has 
    (instance-of (Color-Constant)))
(*salt has 
    (instance-of (Salt-Status-Constant)))
(*salmon has 
    (instance-of (Color-Constant)))
(*saddleBrown has 
    (instance-of (Color-Constant)))
(*Russian has 
    (instance-of (Natural-Language)))
(*royalBlue has 
    (instance-of (Color-Constant)))
(*rough has 
    (instance-of (Texture-Constant)))
(*rosyBrown has 
    (instance-of (Color-Constant)))
(*roomy has 
    (instance-of (Capacity-Constant)))
(*rol has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "rol" 0 "n")))))
(*rocky has 
    (instance-of (Consistency-Constant)))
(*rmb has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "rmb" 0 "n")))))
(*ringgit has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "ringit" 0 "n")))))
(*right has 
    (instance-of (Angle-Constant)))
(*revolution-per-minute has 
    (instance-of (UoM-Rotational-Rate))
    (wn20-synset ((:set (:triple "revolution per minute" 0 "n") (:triple "revolutions per minute" 0 "n") (:triple "rpm" 0 "n")))))
(*regular-strength has 
    (instance-of (Troop-Strength-Constant)))
(*reflex has 
    (instance-of (Angle-Constant)))
(*redhead has 
    (instance-of (Color-Constant)))
(*Red has 
    (instance-of (Allegiance-Constant)))
(*red has 
    (instance-of (Color-Constant)))
(*rectangle has 
    (instance-of (Shape-Constant)))
(*rating-verypoor has 
    (instance-of (Critique-Score-Constant)))
(*rating-verygood has 
    (instance-of (Critique-Score-Constant)))
(*rating-poor has 
    (instance-of (Critique-Score-Constant)))
(*rating-good has 
    (instance-of (Critique-Score-Constant)))
(*rarely has 
    (instance-of (Frequency-Constant)))
(*rare-dense-scale has 
    (instance-of (Density-Scale))
    (element-type (Density-Constant))
    (element ((:seq *rare *dense))))
(*rare has 
    (instance-of (Density-Constant)))
(*rancid has 
    (instance-of (Smell-Constant)))
(*radian has 
    (instance-of (UoM-Angle))
    (wn20-synset ((:set (:triple "radian" 0 "n") (:triple "radians" 0 "n") (:triple "rad" 0 "n")))))
(*R has 
    (instance-of (Trafficability-Constant)))
(*purple has 
    (instance-of (Color-Constant)))
(*Punjabi has 
    (instance-of (Natural-Language)))
(*PST has 
    (instance-of (Time-Zone-Constant))
    (name ("PST")))
(*powderBlue has 
    (instance-of (Color-Constant)))
(*positive has 
    (instance-of (Polarity-Constant)))
(*Portugese has 
    (instance-of (Natural-Language)))
(*polygon has 
    (instance-of (Shape-Constant)))
(*politely has 
    (instance-of (Manner-Constant)))
(*plus-strength has 
    (instance-of (Troop-Strength-Constant)))
(*plum has 
    (instance-of (Color-Constant)))
(*pink has 
    (instance-of (Color-Constant)))
(*peru has 
    (instance-of (Color-Constant)))
(*permeable has 
    (instance-of (Integrity-Constant)))
(*per-year has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per year" 0 "n")))))
(*per-week has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per week" 0 "n")))))
(*per-second has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per second" 0 "n")))))
(*per-month has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per month" 0 "n")))))
(*per-minute has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per minute" 0 "n")))))
(*per-hour has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per hour" 0 "n")))))
(*per-day has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "per day" 0 "n")))))
(*peachPuff has 
    (instance-of (Color-Constant)))
(*PDT has 
    (instance-of (Time-Zone-Constant))
    (name ("PDT")))
(*parallelogram has 
    (instance-of (Shape-Constant)))
(*papayaWhip has 
    (instance-of (Color-Constant)))
(*paleVioletRed has 
    (instance-of (Color-Constant)))
(*paleTurquoise has 
    (instance-of (Color-Constant)))
(*paleGreen has 
    (instance-of (Color-Constant)))
(*paleGoldenRod has 
    (instance-of (Color-Constant)))
(*pair has 
    (instance-of (UoM-Quantity))
    (wn20-synset ((:set (:triple "pair" 0 "n") (:triple "pairs" 0 "n")))))
(*oversized has 
    (instance-of (Size-Constant)))
(*oval has 
    (instance-of (Shape-Constant)))
(*orchid has 
    (instance-of (Color-Constant)))
(*orangeRed has 
    (instance-of (Color-Constant)))
(*orange has 
    (instance-of (Color-Constant)))
(*oliveDrab has 
    (instance-of (Color-Constant)))
(*olive has 
    (instance-of (Color-Constant)))
(*oldLace has 
    (instance-of (Color-Constant)))
(*old has 
    (instance-of (Age-Constant
                     Primary-Constant)))
(*ohm has 
    (instance-of (UoM-Electric-Resistance)))
(*often-never-scale has 
    (instance-of (Frequency-Scale))
    (element-type (Frequency-Constant))
    (element ((:seq *often *rarely *never))))
(*often has 
    (instance-of (Frequency-Constant)))
(*odorless has 
    (instance-of (Smell-Constant)))
(*obtuse has 
    (instance-of (Angle-Constant)))
(*NZST has 
    (instance-of (Time-Zone-Constant))
    (name ("NZST")))
(*NZDT has 
    (instance-of (Time-Zone-Constant))
    (name ("NZDT")))
(*ntdollar has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "ntdollar" 0 "n")))))
(*NST has 
    (instance-of (Time-Zone-Constant))
    (name ("NST")))
(*not-sentient has 
    (instance-of (Sentience-Constant)))
(*not-known-to-be-soluble has 
    (instance-of (Solubility-Constant)))
(*not-animate has 
    (instance-of (Animacy-Constant)))
(*normal has 
    (instance-of (Temperature-Constant)))
(*none-unlimited-scale has 
    (instance-of (Capacity-Scale))
    (element-type (Capacity-Constant))
    (element ((:seq *none *roomy *capacious *unlimited))))
(*none has 
    (instance-of (Capacity-Constant)))
(*non-buffer has 
    (instance-of (Buffer-Status-Constant)))
(*non has 
    (instance-of (Electrolyte-Status-Constant)))
(*no-conductivity has 
    (instance-of (Conductivity-Constant)))
(*nit has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "nit" 0 "n") (:triple "nits" 0 "n")))))
(*never has 
    (instance-of (Frequency-Constant)))
(*neutralized has 
    (instance-of (Combat-Strength-Constant)))
(*neutral has 
    (instance-of (PH-Constant)))
(*negligible has 
    (instance-of (Intensity-Constant)))
(*negative has 
    (instance-of (Polarity-Constant)))
(*near-far-scale has 
    (instance-of (Distance-Scale))
    (element-type (Distance-Constant))
    (element ((:seq *near *far))))
(*near has 
    (instance-of (Distance-Constant)))
(*NDT has 
    (instance-of (Time-Zone-Constant))
    (name ("NDT")))
(*navy has 
    (instance-of (Color-Constant)))
(*narrow-wide-scale has 
    (instance-of (Width-Scale))
    (element-type (Width-Constant))
    (element ((:seq *narrow *wide))))
(*narrow has 
    (instance-of (Width-Constant)))
(*nanosecond has 
    (instance-of (UoM-Duration))
    (wn20-synset ((:set (:triple "nanosecond" 0 "n") (:triple "nanoseconds" 0 "n") (:triple "ns" 0 "n")))))
(*nanometer has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "nanometer" 0 "n") (:triple "nm" 0 "n")))))
(*musky has 
    (instance-of (Smell-Constant)))
(*MST has 
    (instance-of (Time-Zone-Constant))
    (name ("MST")))
(*MSK has 
    (instance-of (Time-Zone-Constant))
    (name ("MSK")))
(*MSD has 
    (instance-of (Time-Zone-Constant))
    (name ("MSD")))
(*monthly has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "monthly" 0 "n")))))
(*month has 
    (instance-of (UoM-Time
                     UoM-Duration))
    (wn20-synset ((:set (:triple "month" 0 "n") (:triple "months" 0 "n")))))
(*Monday has 
    (instance-of (Day-Constant))
    (name ("Monday")))
(*mole has 
    (instance-of (UoM-Quantity))
    (wn20-synset ((:set (:triple "mole" 0 "n") (:triple "moles" 0 "n")))))
(*molar has 
    (instance-of (UoM-Concentration)))
(*moist has 
    (instance-of (Wetness-Constant)))
(*moderately-important has 
    (instance-of (Importance-Constant)))
(*moccasin has 
    (instance-of (Color-Constant)))
(*mistyRose has 
    (instance-of (Color-Constant)))
(*minute has 
    (instance-of (UoM-Time
                     UoM-Duration))
    (wn20-synset ((((:set (:triple "minute" 0 "n") (:triple "minutes" 0 "n") (:triple "min" 0 "n"))) && ((:set (:triple "minute" 0 "n") (:triple "minutes" 0 "n")))))))
(*minus-strength-plus-strength-scale has 
    (instance-of (Troop-Strength-Scale))
    (element-type (Troop-Strength-Constant))
    (element ((:seq *minus-strength *regular-strength *plus-strength))))
(*minus-strength has 
    (instance-of (Troop-Strength-Constant)))
(*mintCream has 
    (instance-of (Color-Constant)))
(*milliwatt has 
    (instance-of (UoM-Power))
    (wn20-synset ((:set (:triple "milliwatt" 0 "n") (:triple "milliwatts" 0 "n") (:triple "mW" 0 "n")))))
(*millisecond has 
    (instance-of (UoM-Duration))
    (wn20-synset ((:set (:triple "millisecond" 0 "n") (:triple "milliseconds" 0 "n") (:triple "ms" 0 "n")))))
(*millimeter has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "millimeter" 0 "n") (:triple "millimeters" 0 "n") (:triple "mm" 0 "n")))))
(*milliliter has 
    (instance-of (UoM-Volume))
    (wn20-synset ((:set (:triple "milliliter" 0 "n") (:triple "milliliters" 0 "n") (:triple "ml" 0 "n")))))
(*millilambert has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "millilambert" 0 "n") (:triple "millilamberts" 0 "n")))))
(*milliampere has 
    (instance-of (UoM-Electric-Current)))
(*mile-per-second-squared has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "mile per second squared" 0 "n") (:triple "miles per second squared" 0 "n") (:triple "mi/s^2" 0 "n")))))
(*mile-per-second has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "mile_per_second" 0 "n") (:triple "miles_per_second" 0 "n")))))
(*mile-per-hour has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "mile_per_hour" 0 "n") (:triple "miles_per_hour" 0 "n") (:triple "mph" 0 "n")))))
(*mile has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "mile" 0 "n") (:triple "miles" 0 "n") (:triple "mi" 0 "n")))))
(*mild has 
    (instance-of (Temperature-Constant)))
(*midnightBlue has 
    (instance-of (Color-Constant)))
(*middle-aged has 
    (instance-of (Age-Constant)))
(*microsecond has 
    (instance-of (UoM-Duration))
    (wn20-synset ((:set (:triple "microsecond" 0 "n") (:triple "microseconds" 0 "n")))))
(*microscopic-gigantic-scale has 
    (instance-of (Size-Scale))
    (element-type (Size-Constant))
    (element ((:seq *microscopic *tiny *little *undersized *average *oversized *big *huge *gigantic))))
(*microscopic has 
    (instance-of (Size-Constant)))
(*micrometer has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "micrometer" 0 "n") (:triple "micrometers" 0 "n")))))
(*meter-per-second-squared has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "meter per second squared" 0 "n") (:triple "meters per second squared" 0 "n") (:triple "m/s^2" 0 "n")))))
(*meter-per-second has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "meter_per_second" 0 "n") (:triple "meters_per_second" 0 "n") (:triple "m/s" 0 "n")))))
(*meter has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "meter" 0 "n") (:triple "meters" 0 "n") (:triple "m" 0 "n")))))
(*megawatt has 
    (instance-of (UoM-Power))
    (wn20-synset ((:set (:triple "megawatt" 0 "n") (:triple "megawatts" 0 "n") (:triple "MW" 0 "n")))))
(*megahertz has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "megahertz" 0 "n") (:triple "MHz" 0 "n")))))
(*mediumVioletRed has 
    (instance-of (Color-Constant)))
(*mediumTurquoise has 
    (instance-of (Color-Constant)))
(*mediumSpringGreen has 
    (instance-of (Color-Constant)))
(*mediumSlateBlue has 
    (instance-of (Color-Constant)))
(*mediumSeaGreen has 
    (instance-of (Color-Constant)))
(*mediumPurple has 
    (instance-of (Color-Constant)))
(*mediumOrchid has 
    (instance-of (Color-Constant)))
(*mediumBlue has 
    (instance-of (Color-Constant)))
(*mediumAquaMarine has 
    (instance-of (Color-Constant)))
(*medium has 
    (instance-of (Intensity-Constant
                     Priority-Constant)))
(*MDT has 
    (instance-of (Time-Zone-Constant))
    (name ("MDT")))
(*mavajoWhite has 
    (instance-of (Color-Constant)))
(*match-result has 
    (instance-of (Viewpoint-Query-Type)))
(*maroon has 
    (instance-of (Color-Constant)))
(*Marathi has 
    (instance-of (Natural-Language)))
(*Mandarin has 
    (instance-of (Natural-Language)))
(*male has 
    (instance-of (Sex-Constant)))
(*magenta has 
    (instance-of (Color-Constant)))
(*lumen has 
    (instance-of (UoM-Luminous-Flux))
    (wn20-synset ((:set (:triple "lumen" 0 "n") (:triple "lumens" 0 "n")))))
(*low-urgent-scale has 
    (instance-of (Priority-Scale))
    (element-type (Priority-Constant))
    (element ((:seq *low *medium *high *urgent))))
(*low-high-conductivity-scale has 
    (instance-of (Conductivity-Scale))
    (element-type (Conductivity-Constant))
    (element ((:seq *no-conductivity *low-conductivity *high-conductivity))))
(*low-conductivity has 
    (instance-of (Conductivity-Constant)))
(*low has 
    (instance-of (Intensity-Constant
                     Priority-Constant)))
(*long has 
    (instance-of (Distance-Constant
                     Primary-Constant
                     Duration-Constant
                     Length-Constant)))
(*little-gigantic-scale has 
    (instance-of (Size-Scale))
    (element-type (Size-Constant))
    (element ((:seq *little *undersized *oversized *gigantic))))
(*little has 
    (instance-of (Size-Constant)))
(*liter has 
    (instance-of (UoM-Volume))
    (wn20-synset ((:set (:triple "liter" 0 "n") (:triple "liters" 0 "n") (:triple "l" 0 "n")))))
(*liquid has 
    (instance-of (State-Constant)))
(*linen has 
    (instance-of (Color-Constant)))
(*limeGreen has 
    (instance-of (Color-Constant)))
(*lime has 
    (instance-of (Color-Constant)))
(*lightYellow has 
    (instance-of (Color-Constant)))
(*lightSteelBlue has 
    (instance-of (Color-Constant)))
(*lightSlateGray has 
    (instance-of (Color-Constant)))
(*lightSlateBlue has 
    (instance-of (Color-Constant)))
(*lightSkyBlue has 
    (instance-of (Color-Constant)))
(*lightSeaGreen has 
    (instance-of (Color-Constant)))
(*lightSalmon has 
    (instance-of (Color-Constant)))
(*lightPink has 
    (instance-of (Color-Constant)))
(*lightGrey has 
    (instance-of (Color-Constant)))
(*lightGreen has 
    (instance-of (Color-Constant)))
(*lightGoldenRodYellow has 
    (instance-of (Color-Constant)))
(*lightCyan has 
    (instance-of (Color-Constant)))
(*lightCoral has 
    (instance-of (Color-Constant)))
(*lightBlue has 
    (instance-of (Color-Constant)))
(*light-hefty-scale has 
    (instance-of (Mass-Scale))
    (element-type (Mass-Constant))
    (element ((:seq *light *hefty))))
(*light has 
    (instance-of (Mass-Constant)))
(*lemonChiffon has 
    (instance-of (Color-Constant)))
(*lazy has 
    (instance-of (Trait-Constant)))
(*lawnGreen has 
    (instance-of (Color-Constant)))
(*lavenderBlush has 
    (instance-of (Color-Constant)))
(*lavender has 
    (instance-of (Color-Constant)))
(*large has 
    (instance-of (Volume-Constant)))
(*lambert has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "lambert" 0 "n") (:triple "lamberts" 0 "n")))))
(*KST has 
    (instance-of (Time-Zone-Constant))
    (name ("KST")))
(*Korean has 
    (instance-of (Natural-Language)))
(*kilowatt has 
    (instance-of (UoM-Power))
    (wn20-synset ((:set (:triple "kilowatt" 0 "n") (:triple "kilowatts" 0 "n") (:triple "kW" 0 "n")))))
(*kilometer-per-second-squared has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "kilometer per second squared" 0 "n") (:triple "kilometers per second squared" 0 "n") (:triple "km/s^2" 0 "n")))))
(*kilometer-per-second has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "kilometer_per_second" 0 "n") (:triple "kilometers_per_second" 0 "n") (:triple "km/s" 0 "n")))))
(*kilometer-per-hour-minute has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "kilometer per hour minute" 0 "n") (:triple "kilometers per hour minute" 0 "n")))))
(*kilometer-per-hour has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "kilometer_per_hour" 0 "n") (:triple "kilometers_per_hour" 0 "n") (:triple "km/h" 0 "n")))))
(*kilometer has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "kilometer" 0 "n") (:triple "kilometers" 0 "n") (:triple "km" 0 "n")))))
(*kilohertz has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "kilohertz" 0 "n") (:triple "kHz" 0 "n")))))
(*kilogram-meter-squared has 
    (instance-of (UoM-Moment-of-Inertia))
    (wn20-synset ((:set (:triple "kilogram meter squared" 0 "n") (:triple "kilograms meter squared" 0 "n")))))
(*kilogram-meter-per-second has 
    (instance-of (UoM-Momentum))
    (wn20-synset ((:set (:triple "kilogram meter per second" 0 "n") (:triple "kilograms meter per second" 0 "n")))))
(*kilogram has 
    (instance-of (UoM-Mass))
    (wn20-synset ((:set (:triple "kilogram" 0 "n") (:triple "kilograms" 0 "n") (:triple "kg" 0 "n")))))
(*khaki has 
    (instance-of (Color-Constant)))
(*KGT has 
    (instance-of (Time-Zone-Constant))
    (name ("KGT")))
(*KGST has 
    (instance-of (Time-Zone-Constant))
    (name ("KGST")))
(*kelvin has 
    (instance-of (UoM-Temperature))
    (wn20-synset ((:set (:triple "kelvin" 0 "n")))))
(*KDT has 
    (instance-of (Time-Zone-Constant))
    (name ("KDT")))
(*juvenile has 
    (instance-of (Age-Constant)))
(*juicy has 
    (instance-of (Taste-Constant)))
(*JST has 
    (instance-of (Time-Zone-Constant))
    (name ("JST")))
(*joule has 
    (instance-of (UoM-Energy)))
(*Japanese has 
    (instance-of (Natural-Language)))
(*ivory has 
    (instance-of (Color-Constant)))
(*Italian has 
    (instance-of (Natural-Language)))
(*IST has 
    (instance-of (Time-Zone-Constant))
    (name ("IST")))
(*insoluble has 
    (instance-of (Solubility-Constant)))
(*inexpensive has 
    (instance-of (Worth-Constant)))
(*Indonesian has 
    (instance-of (Natural-Language)))
(*indigo has 
    (instance-of (Color-Constant)))
(*indianRed has 
    (instance-of (Color-Constant)))
(*inch has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "inch" 0 "n") (:triple "inches" 0 "n") (:triple "in" 0 "n")))))
(*important has 
    (instance-of (Importance-Constant)))
(*impermeable-permeable-scale has 
    (instance-of (Integrity-Scale))
    (element-type (Integrity-Constant))
    (element ((:seq *impermeable *semi-permeable *permeable))))
(*impermeable has 
    (instance-of (Integrity-Constant)))
(*IDLW has 
    (instance-of (Time-Zone-Constant))
    (name ("IDLW")))
(*IDLE has 
    (instance-of (Time-Zone-Constant))
    (name ("IDLE")))
(*huge has 
    (instance-of (Area-Constant
                     Size-Constant)))
(*HST has 
    (instance-of (Time-Zone-Constant))
    (name ("HST")))
(*hourly has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "hourly" 0 "n")))))
(*hour has 
    (instance-of (UoM-Time
                     UoM-Duration))
    (wn20-synset ((((:set (:triple "hour" 0 "n") (:triple "hours" 0 "n") (:triple "h" 0 "n"))) && ((:set (:triple "hour" 0 "n") (:triple "hours" 0 "n")))))))
(*hotPink has 
    (instance-of (Color-Constant)))
(*hot has 
    (instance-of (Temperature-Constant)))
(*horsepower has 
    (instance-of (UoM-Power))
    (wn20-synset ((:set (:triple "horsepower" 0 "n") (:triple "horsepowers" 0 "n") (:triple "hp" 0 "n")))))
(*horizontal-vertical-scale has 
    (instance-of (Slope-Scale))
    (element-type (Slope-Constant))
    (element ((:seq *horizontal *gradual *steep *vertical))))
(*horizontal has 
    (instance-of (Orientation-Constant
                     Slope-Constant)))
(*honeyDew has 
    (instance-of (Color-Constant)))
(*honest has 
    (instance-of (Trait-Constant)))
(*hollow-volume has 
    (instance-of (Shape-Constant)))
(*Hindi has 
    (instance-of (Natural-Language)))
(*high-conductivity has 
    (instance-of (Conductivity-Constant)))
(*high has 
    (instance-of (Intensity-Constant
                     Priority-Constant)))
(*hertz has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "hertz" 0 "n") (:triple "Hz" 0 "n")))))
(*hefty has 
    (instance-of (Mass-Constant)))
(*hazel has 
    (instance-of (Color-Constant)))
(*happily has 
    (instance-of (Manner-Constant)))
(*gross has 
    (instance-of (UoM-Quantity))
    (wn20-synset ((:set (:triple "gross" 0 "n") (:triple "grosses" 0 "n")))))
(*gritty has 
    (instance-of (Consistency-Constant)))
(*greenYellow has 
    (instance-of (Color-Constant)))
(*green has 
    (instance-of (Color-Constant)))
(*gray has 
    (instance-of (Color-Constant)))
(*Gravity has 
    (instance-of (Acceleration-Value))
    (value ((:pair 9.8 *meter-per-second-squared))))
(*granitic has 
    (instance-of (Consistency-Constant)))
(*gram/liter has 
    (instance-of (UoM-Density))
    (wn20-synset ((:set (:triple "gram/liter" 0 "n") (:triple "gram per liter" 0 "n") (:triple "g/l" 0 "n") (:triple "grams/liter" 0 "n") (:triple "grams per liter" 0 "n")))))
(*gram has 
    (instance-of (UoM-Mass))
    (wn20-synset ((:set (:triple "gram" 0 "n") (:triple "grams" 0 "n") (:triple "g" 0 "n")))))
(*grainy has 
    (instance-of (Consistency-Constant)))
(*gradual has 
    (instance-of (Slope-Constant)))
(*grad has 
    (instance-of (UoM-Angle))
    (wn20-synset ((:set (:triple "grad" 0 "n") (:triple "grads" 0 "n")))))
(*goldenRod has 
    (instance-of (Color-Constant)))
(*gold has 
    (instance-of (Color-Constant)))
(*GMT has 
    (instance-of (Time-Zone-Constant))
    (name ("GMT")))
(*glassy has 
    (instance-of (Consistency-Constant)))
(*gigantic has 
    (instance-of (Size-Constant)))
(*gigahertz has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "gigahertz" 0 "n") (:triple "GHz" 0 "n")))))
(*ghostWhite has 
    (instance-of (Color-Constant)))
(*GET has 
    (instance-of (Time-Zone-Constant))
    (name ("GET")))
(*GEST has 
    (instance-of (Time-Zone-Constant))
    (name ("GEST")))
(*German has 
    (instance-of (Natural-Language)))
(*gas has 
    (instance-of (State-Constant)))
(*gallon has 
    (instance-of (UoM-Volume))
    (wn20-synset ((:set (:triple "gallon" 0 "n") (:triple "gallons" 0 "n")))))
(*gainsboro has 
    (instance-of (Color-Constant)))
(*G has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "G" 0 "n")))))
(*full has 
    (instance-of (Combat-Strength-Constant)))
(*fuchsia has 
    (instance-of (Color-Constant)))
(*fruity has 
    (instance-of (Smell-Constant)))
(*Friday has 
    (instance-of (Day-Constant))
    (name ("Friday")))
(*fresh has 
    (instance-of (Smell-Constant)))
(*French has 
    (instance-of (Natural-Language)))
(*freezing-boiling-scale has 
    (instance-of (Temperature-Scale))
    (element-type (Temperature-Constant))
    (element ((:seq *freezing *cold *warm *hot *boiling))))
(*freezing has 
    (instance-of (Temperature-Constant)))
(*fragile has 
    (instance-of (Breakability-Constant)))
(*foul has 
    (instance-of (Smell-Constant)))
(*forever-brief-scale has 
    (instance-of (Duration-Scale))
    (element-type (Duration-Constant))
    (element ((:seq *forever *brief))))
(*forever has 
    (instance-of (Duration-Constant)))
(*forestGreen has 
    (instance-of (Color-Constant)))
(*footlambert has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "footlambert" 0 "n") (:triple "footlamberts" 0 "n")))))
(*foot-per-second-squared has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "foot per second squared" 0 "n") (:triple "feet per second squared" 0 "n") (:triple "ft/s^2" 0 "n")))))
(*foot-per-second has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "foot_per_second" 0 "n") (:triple "feet_per_second" 0 "n") (:triple "ft/s" 0 "n")))))
(*foot has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "foot" 0 "n") (:triple "feet" 0 "n") (:triple "ft" 0 "n")))))
(*flowery has 
    (instance-of (Smell-Constant)))
(*floralWhite has 
    (instance-of (Color-Constant)))
(*fireBrick has 
    (instance-of (Color-Constant)))
(*female has 
    (instance-of (Sex-Constant)))
(*feldspar has 
    (instance-of (Color-Constant)))
(*fast has 
    (instance-of (Rate-Constant)))
(*far has 
    (instance-of (Distance-Constant)))
(*false has 
    (instance-of (Truth-Constant)))
(*fahrenheit has 
    (instance-of (UoM-Temperature))
    (wn20-synset ((:set (:triple "fahrenheit" 0 "n")))))
(*expensive has 
    (instance-of (Worth-Constant)))
(*euro has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "euro" 0 "n") (:triple "euros" 0 "n")))))
(*EST has 
    (instance-of (Time-Zone-Constant))
    (name ("EST")))
(*English has 
    (instance-of (Natural-Language)))
(*electronic-charge has 
    (instance-of (UoM-Charge)))
(*elderly has 
    (instance-of (Age-Constant)))
(*effective has 
    (instance-of (Combat-Strength-Constant)))
(*EET has 
    (instance-of (Time-Zone-Constant))
    (name ("EET")))
(*EEST has 
    (instance-of (Time-Zone-Constant))
    (name ("EEST")))
(*EDT has 
    (instance-of (Time-Zone-Constant))
    (name ("EDT")))
(*dry-wet-scale has 
    (instance-of (Wetness-Scale))
    (element-type (Wetness-Constant))
    (element ((:seq *dry *arid *damp *moist *wet))))
(*dry has 
    (instance-of (Wetness-Constant)))
(*dozen has 
    (instance-of (UoM-Quantity))
    (wn20-synset ((:set (:triple "dozen" 0 "n") (:triple "dozens" 0 "n")))))
(*dodgerBlue has 
    (instance-of (Color-Constant)))
(*dishonest has 
    (instance-of (Trait-Constant)))
(*dimGray has 
    (instance-of (Color-Constant)))
(*dim has 
    (instance-of (Brightness-Constant)))
(*dilute has 
    (instance-of (Concentration-Constant)))
(*destroyed has 
    (instance-of (Combat-Strength-Constant)))
(*dense has 
    (instance-of (Density-Constant)))
(*delicate has 
    (instance-of (Breakability-Constant)))
(*dejectedly has 
    (instance-of (Manner-Constant)))
(*degree has 
    (instance-of (UoM-Coordinate
                     UoM-Angle))
    (wn20-synset ((:set (:triple "degree" 0 "n") (:triple "degrees" 0 "n")))))
(*defeated has 
    (instance-of (Combat-Strength-Constant)))
(*deepSkyBlue has 
    (instance-of (Color-Constant)))
(*deepPink has 
    (instance-of (Color-Constant)))
(*deep has 
    (instance-of (Depth-Constant
                     Primary-Constant)))
(*day has 
    (instance-of (UoM-Time
                     UoM-Duration))
    (wn20-synset ((((:set (:triple "day" 0 "n") (:triple "days" 0 "n"))) && ((:set (:triple "day" 0 "n") (:triple "day" 0 "n")))))))
(*darkViolet has 
    (instance-of (Color-Constant)))
(*darkTurquoise has 
    (instance-of (Color-Constant)))
(*darkSlateGray has 
    (instance-of (Color-Constant)))
(*darkSlateBlue has 
    (instance-of (Color-Constant)))
(*darkSeaGreen has 
    (instance-of (Color-Constant)))
(*darkSalmon has 
    (instance-of (Color-Constant)))
(*darkRed has 
    (instance-of (Color-Constant)))
(*darkOrchid has 
    (instance-of (Color-Constant)))
(*darkorange has 
    (instance-of (Color-Constant)))
(*darkOliveGreen has 
    (instance-of (Color-Constant)))
(*darkMagenta has 
    (instance-of (Color-Constant)))
(*darkKhaki has 
    (instance-of (Color-Constant)))
(*darkGreen has 
    (instance-of (Color-Constant)))
(*darkGray has 
    (instance-of (Color-Constant)))
(*darkGoldenRod has 
    (instance-of (Color-Constant)))
(*darkCyan has 
    (instance-of (Color-Constant)))
(*darkBlue has 
    (instance-of (Color-Constant)))
(*dark-blinding-scale has 
    (instance-of (Brightness-Scale))
    (element-type (Brightness-Constant))
    (element ((:seq *dark *dim *bright *blinding))))
(*dark has 
    (instance-of (Brightness-Constant)))
(*damp has 
    (instance-of (Wetness-Constant)))
(*dalton has 
    (instance-of (UoM-Mass))
    (wn20-synset ((:set (:triple "dalton" 0 "n") (:triple "daltons" 0 "n")))))
(*daily has 
    (instance-of (UoM-Frequency))
    (wn20-synset ((:set (:triple "daily" 0 "n")))))
(*cyan has 
    (instance-of (Color-Constant)))
(*CXT has 
    (instance-of (Time-Zone-Constant))
    (name ("CXT")))
(*CST has 
    (instance-of (Time-Zone-Constant))
    (name ("CST")))
(*crystalline has 
    (instance-of (Consistency-Constant)))
(*critique-score-scale has 
    (instance-of (Critique-Score-Scale))
    (element-type (Critique-Score-Constant))
    (element ((:seq *rating-verypoor *rating-poor *rating-good *rating-verygood))))
(*crimson has 
    (instance-of (Color-Constant)))
(*creamy has 
    (instance-of (Taste-Constant)))
(*cornsilk has 
    (instance-of (Color-Constant)))
(*cornflowerBlue has 
    (instance-of (Color-Constant)))
(*coral has 
    (instance-of (Color-Constant)))
(*cool has 
    (instance-of (Temperature-Constant)))
(*concentrated has 
    (instance-of (Concentration-Constant)))
(*colorless has 
    (instance-of (Color-Constant)))
(*cold-hot-scale has 
    (instance-of (Temperature-Scale))
    (element-type (Temperature-Constant))
    (element ((:seq *cold *warm *hot))))
(*cold has 
    (instance-of (Temperature-Constant)))
(*class-description has 
    (instance-of (Viewpoint-Query-Type)))
(*circle has 
    (instance-of (Shape-Constant)))
(*chocolate has 
    (instance-of (Color-Constant)))
(*cheap has 
    (instance-of (Worth-Constant)))
(*chartreuse has 
    (instance-of (Color-Constant)))
(*CET has 
    (instance-of (Time-Zone-Constant))
    (name ("CET")))
(*CEST has 
    (instance-of (Time-Zone-Constant))
    (name ("CEST")))
(*centimeter-per-second-squared has 
    (instance-of (UoM-Acceleration))
    (wn20-synset ((:set (:triple "centimeter per second squared" 0 "n") (:triple "centimeters per second squared" 0 "n") (:triple "cm/s^2" 0 "n")))))
(*centimeter-per-second has 
    (instance-of (UoM-Velocity))
    (wn20-synset ((:set (:triple "centimeter_per_second" 0 "n") (:triple "centimeters_per_second" 0 "n") (:triple "cm/s" 0 "n")))))
(*centimeter has 
    (instance-of (UoM-Length))
    (wn20-synset ((:set (:triple "centimeter" 0 "n") (:triple "centimeters" 0 "n") (:triple "cm" 0 "n")))))
(*celsius has 
    (instance-of (UoM-Temperature))
    (wn20-synset ((:set (:triple "celsius" 0 "n")))))
(*CDT has 
    (instance-of (Time-Zone-Constant))
    (name ("CDT")))
(*capacious has 
    (instance-of (Capacity-Constant)))
(*Cantonese has 
    (instance-of (Natural-Language)))
(*candela-per-meter-squared has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "candela per meter squared" 0 "n") (:triple "candelas per meter squared" 0 "n")))))
(*candela-per-foot-squared has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "candela per foot squared" 0 "n") (:triple "candelas per foot squared" 0 "n")))))
(*candela-per-centimeter-squared has 
    (instance-of (UoM-Luminance))
    (wn20-synset ((:set (:triple "candela per centimeter squared" 0 "n") (:triple "candelas per centimeter squared" 0 "n")))))
(*candela has 
    (instance-of (UoM-Luminous-Intensity
                     UoM-Brightness))
    (wn20-synset ((((:set (:triple "candela" 0 "n") (:triple "candelas" 0 "n") (:triple "cd" 0 "n"))) && ((:set (:triple "candela" 0 "n") (:triple "candelas" 0 "n")))))))
(*canadiandollar has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "cad" 0 "n")))))
(*calorie has 
    (instance-of (UoM-Energy)))
(*cadetBlue has 
    (instance-of (Color-Constant)))
(*buttery has 
    (instance-of (Taste-Constant)))
(*burlyWood has 
    (instance-of (Color-Constant)))
(*buffer has 
    (instance-of (Buffer-Status-Constant)))
(*btu has 
    (instance-of (UoM-Energy)))
(*brunette has 
    (instance-of (Color-Constant)))
(*brown has 
    (instance-of (Color-Constant)))
(*brittle has 
    (instance-of (Breakability-Constant)))
(*britishpound has 
    (instance-of (UoM-Worth))
    (wn20-synset ((:set (:triple "bp" 0 "n")))))
(*bright has 
    (instance-of (Brightness-Constant)))
(*brief has 
    (instance-of (Duration-Constant)))
(*breakable-unbreakable-scale has 
    (instance-of (Breakability-Scale))
    (element-type (Breakability-Constant))
    (element ((:seq *breakable *fragile *delicate *brittle *unbreakable))))
(*breakable has 
    (instance-of (Breakability-Constant)))
(*boney has 
    (instance-of (Consistency-Constant)))
(*boiling has 
    (instance-of (Temperature-Constant)))
(*blueViolet has 
    (instance-of (Color-Constant)))
(*Blue has 
    (instance-of (Allegiance-Constant)))
(*blue has 
    (instance-of (Color-Constant)))
(*blonde has 
    (instance-of (Color-Constant)))
(*blond has 
    (instance-of (Color-Constant)))
(*blinding has 
    (instance-of (Brightness-Constant)))
(*blanchedAlmond has 
    (instance-of (Color-Constant)))
(*black has 
    (instance-of (Color-Constant)))
(*bitter has 
    (instance-of (Taste-Constant)))
(*bisque has 
    (instance-of (Color-Constant)))
(*big has 
    (instance-of (Size-Constant)))
(*Bengali has 
    (instance-of (Natural-Language)))
(*beige has 
    (instance-of (Color-Constant)))
(*beat-per-minute has 
    (instance-of (UoM-Rate))
    (wn20-synset ((:set (:triple "beat per minute" 0 "n") (:triple "beats per minute" 0 "n") (:triple "bpm" 0 "n")))))
(*basic-buffer has 
    (instance-of (Buffer-Status-Constant)))
(*basic-acidic-scale has 
    (instance-of (PH-Scale))
    (element-type (PH-Constant))
    (element ((:seq *basic *neutral *acidic))))
(*basic has 
    (instance-of (PH-Constant)))
(*azure has 
    (instance-of (Color-Constant)))
(*AWST has 
    (instance-of (Time-Zone-Constant))
    (name ("AWST")))
(*average has 
    (instance-of (Height-Constant)))
(*auburn has 
    (instance-of (Color-Constant)))
(*AST has 
    (instance-of (Time-Zone-Constant))
    (name ("AST")))
(*arid has 
    (instance-of (Wetness-Constant)))
(*arcsecond has 
    (instance-of (UoM-Coordinate
                     UoM-Angle))
    (wn20-synset ((:set (:triple "arcsecond" 0 "n") (:triple "arcseconds" 0 "n") (:triple "arcs" 0 "n")))))
(*arcminute has 
    (instance-of (UoM-Coordinate
                     UoM-Angle))
    (wn20-synset ((:set (:triple "arcminute" 0 "n") (:triple "arcminutes" 0 "n") (:triple "arcmin" 0 "n")))))
(*Arabic has 
    (instance-of (Natural-Language)))
(*aqueous has 
    (instance-of (State-Constant)))
(*aquamarine has 
    (instance-of (Color-Constant)))
(*aqua has 
    (instance-of (Color-Constant)))
(*antiqueWhite has 
    (instance-of (Color-Constant)))
(*annihilated-full-scale has 
    (instance-of (Combat-Strength-Scale))
    (element-type (Combat-Strength-Constant))
    (element ((:seq *annihilated *destroyed *defeated *neutralized *effective *full))))
(*annihilated has 
    (instance-of (Combat-Strength-Constant)))
(*animate has 
    (instance-of (Animacy-Constant)))
(*ampere has 
    (instance-of (UoM-Electric-Current)))
(*aliceBlue has 
    (instance-of (Color-Constant)))
(*AKST has 
    (instance-of (Time-Zone-Constant))
    (name ("AKST")))
(*AKDT has 
    (instance-of (Time-Zone-Constant))
    (name ("AKDT")))
(*aggressive has 
    (instance-of (Trait-Constant)))
(*AEST has 
    (instance-of (Time-Zone-Constant))
    (name ("AEST")))
(*AEDT has 
    (instance-of (Time-Zone-Constant))
    (name ("AEDT")))
(*ADT has 
    (instance-of (Time-Zone-Constant))
    (name ("ADT")))
(*adolescent has 
    (instance-of (Age-Constant)))
(*acute has 
    (instance-of (Angle-Constant)))
(*ACST has 
    (instance-of (Time-Zone-Constant))
    (name ("ACST")))
(*acidic-buffer has 
    (instance-of (Buffer-Status-Constant)))
(*acidic has 
    (instance-of (PH-Constant)))
(*ACDT has 
    (instance-of (Time-Zone-Constant))
    (name ("ACDT")))
(*abnormal has 
    (instance-of (Temperature-Constant)))

:SLOT-INSTANCE
 
(worth-of has 
    (inverse (worth))
    (range (Entity))
    (domain (Worth-Value))
    (instance-of (Slot)))
(worth has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Entity))
    (range (Worth-Value))
    (scale-class (Worth-Scale))
    (scalar-constant-class (Worth-Constant))
    (cardinal-unit-class (UoM-Worth))
    (inverse (worth-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "worth" 1 "n")))))
(wn20-synset-of has 
    (range (Thing))
    (instance-of (Slot)))
(wn20-synset has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(wn16-synset-of has 
    (range (Thing))
    (instance-of (Slot)))
(wn16-synset has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(width-of has 
    (inverse (width))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(width has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Width-Scale))
    (scalar-constant-class (Width-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (width-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "width" 1 "n") (:triple "breadth" 2 "n")))))
(wetness-of has 
    (inverse (wetness))
    (range (Tangible-Entity))
    (domain (Wetness-Value))
    (instance-of (Slot)))
(wetness has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Wetness-Value))
    (scale-class (Wetness-Scale))
    (scalar-constant-class (Wetness-Constant))
    (inverse (wetness-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "wetness" 1 "n")))))
(volume-of has 
    (inverse (volume))
    (range (Chemical))
    (domain (Volume-Value))
    (instance-of (Slot)))
(volume has 
    (instance-of (EntityProperty))
    (domain (Chemical))
    (range (Volume-Value))
    (scale-class (Volume-Scale))
    (scalar-constant-class (Volume-Constant))
    (cardinal-unit-class (UoM-Volume))
    (inverse (volume-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "volume" 1 "n")))))
(voltage-of has 
    (inverse (voltage))
    (range (Spatial-Entity))
    (domain (Voltage-Value))
    (instance-of (Slot)))
(voltage has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Voltage-Value))
    (scalar-constant-class (Voltage-Constant))
    (cardinal-unit-class (UoM-Voltage))
    (inverse (voltage-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "voltage" 1 "n") (:triple "voltage" 2 "n") (:triple "electromotive force" 1 "n") (:triple "emf" 1 "n") (:triple "electric potential" 1 "n") (:triple "potential" 2 "n") (:triple "potential difference" 1 "n") (:triple "potential drop" 1 "n")))))
(viewpoint-target-of has 
    (range (Viewpoint))
    (domain (Thing))
    (instance-of (Slot)))
(viewpoint-target has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(viewpoint-source-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-source has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-score-of has 
    (range (Viewpoint))
    (domain (Number))
    (instance-of (Slot)))
(viewpoint-score has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(viewpoint-scenario-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-scenario has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-question-of has 
    (range (Viewpoint))
    (domain (String))
    (instance-of (Slot)))
(viewpoint-question has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Viewpoint))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(viewpoint-query-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-query has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-parent has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inverse (viewpoint-child)))
(viewpoint-multislot-type-of has 
    (range (Viewpoint))
    (domain (Thing))
    (instance-of (Slot)))
(viewpoint-multislot-type has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(viewpoint-model-graph-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-model-graph has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-filter-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-filter has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-eq-solver-info-of has 
    (range (Viewpoint))
    (domain (String))
    (instance-of (Slot)))
(viewpoint-eq-solver-info has 
    (instance-of (NL-Slot-Group))
    (domain (Viewpoint))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(viewpoint-detail-of has 
    (range (Viewpoint))
    (domain (String))
    (instance-of (Slot)))
(viewpoint-detail has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Viewpoint))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(viewpoint-correspondence-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-correspondence has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-child has 
    (inverse (viewpoint-parent))
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-answerable-query-of has 
    (range (Viewpoint))
    (instance-of (Slot)))
(viewpoint-answerable-query has 
    (instance-of (KM-Slot-Group))
    (domain (Viewpoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(viewpoint-answer-page-of has 
    (range (Viewpoint))
    (domain (String))
    (instance-of (Slot)))
(viewpoint-answer-page has 
    (instance-of (NL-Slot-Group))
    (domain (Viewpoint))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(viewpoint-answer-of has 
    (range (Viewpoint))
    (domain (String))
    (instance-of (Slot)))
(viewpoint-answer has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Viewpoint))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(viewed-as has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (range (Thing))
    (inverse (view-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(view-of has 
    (inverse (viewed-as))
    (range (Thing))
    (domain (Thing))
    (instance-of (Slot)))
(velocity-of has 
    (inverse (velocity))
    (range (Event))
    (domain (Velocity-Value))
    (instance-of (Slot)))
(velocity has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Velocity-Value))
    (scale-class (Velocity-Scale))
    (scalar-constant-class (Velocity-Constant))
    (cardinal-unit-class (UoM-Velocity))
    (inverse (velocity-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "speed" 1 "n") (:triple "velocity" 1 "n")))))
(value-of has 
    (inverse (value))
    (range (Property-Group))
    (instance-of (Slot)))
(user-description-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(user-description has 
    (instance-of (KM-Slot-Group))
    (domain (Thing))
    (range (String))
    (cardinality (N-to-1)))
(user-comment-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(user-comment has 
    (instance-of (KM-Slot-Group))
    (domain (Thing))
    (range (String))
    (cardinality (N-to-1)))
(user-assumption-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(user-assumption has 
    (instance-of (KM-Slot-Group))
    (domain (Thing))
    (range (String))
    (cardinality (N-to-N)))
(used-in-equation has 
    (inverse (equation-uses))
    (range (Equation-Set))
    (instance-of (Slot)))
(unit-of has 
    (inverse (unit))
    (range (Cardinal))
    (domain (Unit-of-Measurement))
    (instance-of (Slot)))
(unit has 
    (instance-of (CLIB-Slot-Group))
    (domain (Cardinal))
    (range (Unit-of-Measurement))
    (inverse (unit-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent)))
(typical-instance-of has 
    (range (Thing))
    (domain (Thing))
    (instance-of (Slot)))
(typical-instance has 
    (instance-of (KM-Slot-Group))
    (domain (Thing))
    (range (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N))
    (shaken-ui-hidden-slot (t)))
(truth-of has 
    (inverse (truth))
    (range (Information))
    (domain (Truth-Value))
    (instance-of (Slot)))
(truth has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Information))
    (range (Truth-Value))
    (categorical-constant-class (Truth-Constant))
    (inverse (truth-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "truth" 2 "n") (:triple "truth" 4 "n") (:triple "the true" 1 "n") (:triple "verity" 1 "n") (:triple "accuracy" 1 "n")))))
(troop-strength-of has 
    (inverse (troop-strength))
    (range (Military-Unit))
    (domain (Troop-Strength-Value))
    (instance-of (Slot)))
(troop-strength has 
    (instance-of (Property))
    (domain (Military-Unit))
    (range (Troop-Strength-Value))
    (scale-class (Troop-Strength-Scale))
    (scalar-constant-class (Troop-Strength-Constant))
    (inverse (troop-strength-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(treatment-of has 
    (inverse (treatment))
    (range (Thing))
    (instance-of (Slot)))
(treatment has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (treatment-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(trait-of has 
    (inverse (trait))
    (range (Entity))
    (domain (Trait-Value))
    (instance-of (Slot)))
(trait has 
    (instance-of (EntityProperty))
    (domain (Entity))
    (range (Trait-Value))
    (categorical-constant-class (Trait-Constant))
    (inverse (trait-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "trait" 1 "n")))))
(trafficability-of has 
    (instance-of (Slot))
    (inverse (trafficability))
    (range (Tangible-Entity))
    (domain (Trafficability-Value)))
(trafficability has 
    (instance-of (Property))
    (domain (Tangible-Entity))
    (range (Trafficability-Value))
    (scale-class (Trafficability-Scale))
    (scalar-constant-class (Trafficability-Constant))
    (inverse (trafficability-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(toward-of has 
    (inverse (toward))
    (range (Event))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is the target of")))
(toward has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Event))
    (range (Spatial-Entity))
    (inverse (toward-of))
    (text-slot (text-toward))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (secondary-slot-of (Move)))
(to-value-of has 
    (inverse (to-value))
    (range (Decrease
               Increase))
    (domain (Property-Value))
    (instance-of (Slot)))
(to-value has 
    (instance-of (PropertyProperty))
    (domain (Increase
                Decrease))
    (range (Property-Value))
    (inverse (to-value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t)))
(time-zone-of has 
    (range (Time-Instant))
    (domain (Time-Zone-Constant))
    (instance-of (Slot)))
(time-zone has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Time-Zone-Constant))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-year-of has 
    (range (Time-Instant))
    (domain (Number))
    (instance-of (Slot)))
(time-year has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-value-of has 
    (inverse (time-value))
    (range (Time-Instant))
    (instance-of (Slot)))
(time-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Time-Instant))
    (inverse (time-value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t)))
(time-second-of has 
    (range (Time-Instant))
    (domain (Number))
    (instance-of (Slot)))
(time-second has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-of-existence-of has 
    (inverse (time-of-existence))
    (range (Role
               Entity))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-of-existence has 
    (instance-of (Temporal-Relation))
    (domain (Entity
                Role))
    (range (Time-Interval))
    (inverse (time-of-existence-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (text-gloss ("exists during")))
(time-of has 
    (inverse (time-at))
    (range (Event))
    (domain (Time-Instant))
    (instance-of (Slot)))
(time-month-of has 
    (range (Time-Instant))
    (domain (Number))
    (instance-of (Slot)))
(time-month has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-minute-of has 
    (range (Time-Instant))
    (domain (Number))
    (instance-of (Slot)))
(time-minute has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-is-inside has 
    (inverse (time-inside))
    (range (Time-Interval))
    (domain (Time-Instant))
    (instance-of (Slot))
    (description ("FRAME time-is-inside FILLER means that FRAME, a Time-Point, is temporally within FILLER, a Time-Interval.  Specifically, FRAME is (a), later than or simultaneous with the start of FILLER, and (b), earlier than or simultaneous with the end of FILLER.")))
(time-is-beginning-or-inside has 
    (inverse (time-begins-or-in))
    (range (Time-Interval))
    (domain (Time-Instant))
    (instance-of (Slot)))
(time-int-starts has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-started-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-started-by has 
    (inverse (time-int-starts))
    (range (Time-Interval))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-int-overlaps has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-overlapped-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-overlapped-by has 
    (inverse (time-int-overlaps))
    (range (Time-Interval))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-int-met-by has 
    (inverse (time-int-meets))
    (range (Time-Interval))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-int-meets has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-met-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-finishes has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-finished-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-finished-by has 
    (inverse (time-int-finishes))
    (range (Time-Interval))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-int-equals has 
    (instance-of (Slot
                     Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-equals))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-during has 
    (instance-of (Slot
                     Temporal-Relation))
    (description ("FRAME time-int-during FILLER means that the Time-Interval FRAME is temporally wholly contained by the Time-Interval FILLER.  Specifically, the start of FRAME is later than the start of FILLER and the end of FRAME is earlier than the end of FILLER."))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-contains))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-contains has 
    (description ("FRAME time-int-contains FILLER means that the Time-Interval FRAME temporally wholly contains the Time-Interval FILLER.  Specifically, the start of FRAME is earlier than the start of FILLER and the end of FRAME is later than the end of FILLER."))
    (inverse (time-int-during))
    (range (Time-Interval))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-int-before has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Interval))
    (inverse (time-int-after))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-int-after has 
    (inverse (time-int-before))
    (range (Time-Interval))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-inside has 
    (instance-of (Slot
                     Temporal-Relation))
    (description ("FRAME time-inside FILLER means that FRAME, a Time-Interval, temporally includes FILLER, a Time-Point.  Specifically, FILLER is (a) later than or simultaneous with the start of FRAME, and (b), earlier than or simultaneous with the end of FRAME."))
    (domain (Time-Interval))
    (range (Time-Instant))
    (inverse (time-is-inside))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(time-hour-of has 
    (range (Time-Instant))
    (domain (Number))
    (instance-of (Slot)))
(time-hour has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-ends has 
    (instance-of (Temporal-Relation))
    (domain (Temporal-Entity))
    (range (Time-Instant))
    (inverse (time-end-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (text-gloss ("ends at")))
(time-end-of has 
    (inverse (time-ends))
    (range (Temporal-Entity))
    (domain (Time-Instant))
    (instance-of (Slot)))
(time-during has 
    (instance-of (Slot
                     Temporal-Relation))
    (domain (Event
                Situation))
    (range (Time-Interval))
    (inverse (time-contains))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (text-gloss ("occurs during"))
    (primary-slot-of (Event)))
(time-day-of-week-of has 
    (range (Time-Instant))
    (domain (Day-Constant))
    (instance-of (Slot)))
(time-day-of-week has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Day-Constant))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-day-of has 
    (range (Time-Instant))
    (domain (Number))
    (instance-of (Slot)))
(time-day has 
    (instance-of (Interface-Slot))
    (domain (Time-Instant))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(time-contains has 
    (inverse (time-during))
    (range (Situation
               Event))
    (domain (Time-Interval))
    (instance-of (Slot)))
(time-between-of has 
    (range (Time-Interval))
    (domain (Time-Instant))
    (instance-of (Slot)))
(time-between has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Instant))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("occurs during")))
(time-begins-or-in has 
    (instance-of (Temporal-Relation))
    (domain (Time-Interval))
    (range (Time-Instant))
    (inverse (time-is-beginning-or-inside))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("begins at")))
(time-begins has 
    (instance-of (Temporal-Relation))
    (domain (Temporal-Entity))
    (range (Time-Instant))
    (inverse (time-beginning-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (text-gloss ("begins at")))
(time-beginning-of has 
    (inverse (time-begins))
    (range (Temporal-Entity))
    (domain (Time-Instant))
    (instance-of (Slot)))
(time-before has 
    (instance-of (Temporal-Relation))
    (description ("FRAME time-before FILLER means that FRAME is wholly before FILLER, i.e. the end of FRAME is earlier than the start of FILLER."))
    (domain (Temporal-Entity))
    (range (Temporal-Entity))
    (inverse (time-after))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("occurs before")))
(time-at has 
    (instance-of (Temporal-Relation))
    (domain (Event))
    (range (Time-Instant))
    (inverse (time-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("occurs at")))
(time-after has 
    (description ("FRAME time-after FILLER means that FRAME is wholly after FILLER, i.e. the start of FRAME is later than the end of FILLER."))
    (text-gloss ("occurs after"))
    (inverse (time-before))
    (range (Temporal-Entity))
    (domain (Temporal-Entity))
    (instance-of (Slot)))
(thickness-of has 
    (inverse (thickness))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(thickness has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Thickness-Scale))
    (scalar-constant-class (Thickness-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (thickness-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "thickness" 1 "n")))))
(texture-of has 
    (inverse (texture))
    (range (Tangible-Entity))
    (domain (Texture-Value))
    (instance-of (Slot)))
(texture has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Texture-Value))
    (categorical-constant-class (Texture-Constant))
    (inverse (texture-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "texture" 1 "n")))))
(text-toward-of has 
    (range (Event))
    (instance-of (Slot)))
(text-toward has 
    (text-slot-of (toward))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-subj-phrase-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-subj-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-subj-of has 
    (range (Event))
    (domain (Entity))
    (instance-of (Slot)))
(text-subj has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-subevent-of has 
    (text-slot-of (subevent-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t)))
(text-subevent has 
    (range (Event))
    (instance-of (Slot)))
(text-slot-of has 
    (instance-of (Slot))
    (range (Thing))
    (domain (Slot)))
(text-slot has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-site-of has 
    (text-slot-of (site-of))
    (range (Event))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-site has 
    (text-slot-of (site))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (range (Spatial-Entity)))
(text-sentence-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-sentence has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-resulting-state-of has 
    (text-slot-of (resulting-state-of))
    (range (Event))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (State))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-resulting-state has 
    (text-slot-of (resulting-state))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (range (State)))
(text-result-of has 
    (text-slot-of (result-of))
    (range (Event))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-result has 
    (text-slot-of (result))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (range (Entity)))
(text-related-to-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-related-to has 
    (text-slot-of (related-to))
    (instance-of (NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-recipient-of has 
    (range (Event))
    (instance-of (Slot)))
(text-recipient has 
    (text-slot-of (recipient))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-raw-material-of has 
    (text-slot-of (raw-material-of))
    (range (Event))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Tangible-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-raw-material has 
    (text-slot-of (raw-material))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (range (Tangible-Entity)))
(text-premodslots-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(text-premodslots has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-premods-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-premods has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-postmodslots-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(text-postmodslots has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-postmods-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-postmods has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-phrase-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-path-of has 
    (range (Event))
    (instance-of (Slot)))
(text-path has 
    (text-slot-of (path))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-passive-verbseq-sg-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-passive-verbseq-sg has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-passive-verbseq-pl-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-passive-verbseq-pl has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-passive-verbseq-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-passive-verbseq has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-passive-sentence-of has 
    (range (Event))
    (instance-of (Slot)))
(text-passive-sentence has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-passive-phrase-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-passive-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-particle-of has 
    (range (Event))
    (instance-of (Slot)))
(text-particle has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-origin-of has 
    (range (Event))
    (instance-of (Slot)))
(text-origin has 
    (text-slot-of (origin))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-object-of has 
    (range (Event))
    (instance-of (Slot)))
(text-object has 
    (text-slot-of (object))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-number-of has 
    (range (Event))
    (domain (Number))
    (instance-of (Slot)))
(text-number has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-nominalization-of has 
    (range (Event))
    (instance-of (Slot)))
(text-nominalization has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-nom-sentence-of has 
    (range (Event))
    (instance-of (Slot)))
(text-nom-sentence has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-material-of has 
    (range (Tangible-Entity))
    (instance-of (Slot)))
(text-material has 
    (text-slot-of (material))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Tangible-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-west-of has 
    (text-slot-of (is-west-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-west has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-southwest-of has 
    (text-slot-of (is-southwest-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-southwest has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-southeast-of has 
    (text-slot-of (is-southeast-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-southeast has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-south-of has 
    (text-slot-of (is-south-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-south has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-possessed-by-of has 
    (range (Entity))
    (instance-of (Slot)))
(text-is-possessed-by has 
    (text-slot-of (is-possessed-by))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t)))
(text-is-part-of has 
    (text-slot-of (is-part-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-part has 
    (range (Entity))
    (instance-of (Slot)))
(text-is-over-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-over has 
    (text-slot-of (is-over))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-outside-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-outside has 
    (text-slot-of (is-outside))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-oriented-toward-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-oriented-toward has 
    (text-slot-of (is-oriented-toward))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-opposite-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-opposite has 
    (text-slot-of (is-opposite))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-on-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-on has 
    (text-slot-of (is-on))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-northwest-of has 
    (text-slot-of (is-northwest-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-northwest has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-northeast-of has 
    (text-slot-of (is-northeast-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-northeast has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-north-of has 
    (text-slot-of (is-north-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-north has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-near-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-near has 
    (text-slot-of (is-near))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-inside-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-inside has 
    (text-slot-of (is-inside))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-facing-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-facing has 
    (text-slot-of (is-facing))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-east-of has 
    (text-slot-of (is-east-of))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-east has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-between-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-between has 
    (text-slot-of (is-between))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-beside-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-beside has 
    (text-slot-of (is-beside))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-behind-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-behind has 
    (text-slot-of (is-behind))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-at-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-at has 
    (text-slot-of (is-at))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-along-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-along has 
    (text-slot-of (is-along))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-is-above-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-is-above has 
    (text-slot-of (is-above))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-instrument-of has 
    (range (Event))
    (instance-of (Slot)))
(text-instrument has 
    (text-slot-of (instrument))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-information-content-of has 
    (range (Tangible-Entity))
    (instance-of (Slot)))
(text-information-content has 
    (instance-of (NL-Slot-Group))
    (domain (Tangible-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-indef-phrase-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-indef-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-indef-head-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-indef-head has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-indef-determiner-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-indef-determiner has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-head-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-head has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-has-part-of has 
    (range (Entity))
    (instance-of (Slot)))
(text-has-part has 
    (text-slot-of (has-part))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-gloss-of has 
    (range (Slot))
    (domain (String))
    (instance-of (Slot)))
(text-gloss has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Slot))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-gen-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(text-gen has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-existential-there-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(text-existential-there has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-donor-of has 
    (range (Event))
    (instance-of (Slot)))
(text-donor has 
    (text-slot-of (donor))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-dobj-phrase-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-dobj-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-dobj-of has 
    (range (Event))
    (domain (Entity))
    (instance-of (Slot)))
(text-dobj has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-destination-of has 
    (range (Event))
    (instance-of (Slot)))
(text-destination has 
    (text-slot-of (destination))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-description-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(text-description has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-definition-sentence-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(text-definition-sentence has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-def-head-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-def-head has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-def-determiner-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-def-determiner has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-content-of has 
    (range (Tangible-Entity))
    (instance-of (Slot)))
(text-content has 
    (text-slot-of (content))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Tangible-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-causes-of has 
    (range (Event))
    (instance-of (Slot)))
(text-causes has 
    (text-slot-of (causes))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-caused-by-of has 
    (range (Event))
    (instance-of (Slot)))
(text-caused-by has 
    (text-slot-of (caused-by))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-beneficiary-of has 
    (range (Event))
    (instance-of (Slot)))
(text-beneficiary has 
    (text-slot-of (beneficiary))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-base-phrase-of has 
    (range (Thing))
    (instance-of (Slot)))
(text-base-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (dont-cache-values (t))
    (inherit-with-overrides (t)))
(text-base-of has 
    (range (Event))
    (instance-of (Slot)))
(text-base has 
    (text-slot-of (base))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-away-from-of has 
    (range (Event))
    (instance-of (Slot)))
(text-away-from has 
    (text-slot-of (away-from))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-arguments-of has 
    (range (Event))
    (instance-of (Slot)))
(text-arguments has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-argslots-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(text-argslots has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-agent-of has 
    (text-slot-of (agent-of))
    (range (Event))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(text-agent has 
    (text-slot-of (agent))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (range (Entity)))
(text-active-verbseq-sg-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-active-verbseq-sg has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-active-verbseq-pl-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-active-verbseq-pl has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-active-verbseq-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-active-verbseq has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-active-sentence-of has 
    (range (Event))
    (instance-of (Slot)))
(text-active-sentence has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-active-phrase-of has 
    (range (Event))
    (domain (String))
    (instance-of (Slot)))
(text-active-phrase has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Event))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(text-abuts-of has 
    (range (Spatial-Entity))
    (instance-of (Slot)))
(text-abuts has 
    (text-slot-of (abuts))
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t)))
(test-case-of has 
    (range (Thing))
    (instance-of (Slot)))
(test-case has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (cardinality (N-to-N)))
(term-of has 
    (inverse (term))
    (range (Equilibrium-Constant-Expression
               Chemical-Formula))
    (domain (Thing))
    (instance-of (Slot)))
(term has 
    (instance-of (Participant-Relation))
    (domain (Chemical-Formula
                Equilibrium-Constant-Expression))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (1-to-1))
    (inherit-with-overrides (t))
    (shaken-ui-hidden-slot (t))
    (inverse (term-of)))
(temperature-of has 
    (inverse (temperature))
    (range (Tangible-Entity))
    (domain (Temperature-Value))
    (instance-of (Slot)))
(temperature has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Temperature-Value))
    (scale-class (Temperature-Scale))
    (scalar-constant-class (Temperature-Constant))
    (cardinal-unit-class (UoM-Temperature))
    (inverse (temperature-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "temperature" 1 "n")))))
(taste-of has 
    (inverse (taste))
    (range (Tangible-Entity))
    (domain (Taste-Value))
    (instance-of (Slot)))
(taste has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Taste-Value))
    (categorical-constant-class (Taste-Constant))
    (inverse (taste-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "taste" 1 "n")))))
(target-unit-of has 
    (inverse (target-unit))
    (range (Unit-Conversion))
    (domain (Unit-of-Measurement))
    (instance-of (Slot))
    (combine-values-by-appending (t)))
(target-unit has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Unit-Conversion))
    (range (Unit-of-Measurement))
    (inverse (target-unit-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(symbol-of has 
    (inverse (symbol))
    (range (Atom))
    (domain (String))
    (instance-of (Slot)))
(symbol has 
    (instance-of (Property))
    (domain (Atom))
    (range (String))
    (inherit-with-overrides (t))
    (inverse (symbol-of))
    (cardinality (N-to-1)))
(supports-military-unit has 
    (instance-of (Relation))
    (domain (Military-Unit))
    (range (Military-Unit))
    (inverse (supported-by-military-unit))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (combine-values-by-appending (t)))
(supports has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (supported-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("supports")))
(supported-by-military-unit has 
    (inverse (supports-military-unit))
    (range (Military-Unit))
    (domain (Military-Unit))
    (instance-of (Slot))
    (combine-values-by-appending (t)))
(supported-by has 
    (inverse (supports))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (combine-values-by-appending (t))
    (text-gloss ("is supported by")))
(substrate-of has 
    (inverse (substrate))
    (range (Event))
    (domain (Tangible-Entity))
    (instance-of (Slot)))
(substrate has 
    (instance-of (Meronymic-Relation))
    (domain (Event))
    (range (Tangible-Entity))
    (inverse (substrate-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (required-slot-of (Catalyze
                          Enzyme-Catalysis
                          Metabolize)))
(subscript-of has 
    (inverse (subscript))
    (range (Property-Value
               Chemical))
    (domain (Subscript-Value))
    (instance-of (Slot)))
(subscript has 
    (instance-of (Property))
    (domain (Chemical
                Property-Value))
    (range (Subscript-Value))
    (fluent-status (*Inertial-Fluent))
    (inverse (subscript-of))
    (cardinality (N-to-N)))
(subevent-of has 
    (inverse (subevent))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-slot (text-subevent-of)))
(string-name-of has 
    (inverse (string-name))
    (range (Chemical-Formula))
    (domain (String))
    (instance-of (Slot)))
(string-name has 
    (instance-of (Property))
    (domain (Chemical-Formula))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (inverse (string-name-of))
    (cardinality (1-to-1)))
(space-int-overlap has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (space-int-overlap))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(space-int-meet has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (space-int-meet))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(space-int-inside has 
    (inverse (space-int-contains))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot)))
(space-int-equal has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (space-int-equal))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(space-int-disjoint has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (space-int-disjoint))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(space-int-covers has 
    (instance-of (Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (space-int-coveredby))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(space-int-coveredby has 
    (inverse (space-int-covers))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot)))
(space-int-contains has 
    (instance-of (Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (space-int-inside))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(solute-species-of has 
    (instance-of (Slot))
    (inverse (solute-species))
    (range (Solution))
    (domain (Chemical)))
(solute-species has 
    (instance-of (Property))
    (domain (Solution))
    (range (Chemical))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (solute-species-of))
    (cardinality (N-to-N)))
(solubility-of has 
    (instance-of (Slot))
    (inverse (solubility))
    (range (Chemical))
    (domain (Solubility-Value)))
(solubility has 
    (instance-of (Property))
    (domain (Chemical))
    (range (Solubility-Value))
    (scalar-constant-class (Solubility-Constant))
    (inverse (solubility-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(soft-pcs-list-of has 
    (inverse (soft-pcs-list))
    (range (Event))
    (domain (Thing))
    (instance-of (Slot)))
(soft-pcs-list has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (range (Thing))
    (inverse (soft-pcs-list-of))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(smell-of has 
    (inverse (smell))
    (range (Tangible-Entity))
    (domain (Smell-Value))
    (instance-of (Slot)))
(smell has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Smell-Value))
    (categorical-constant-class (Smell-Constant))
    (inverse (smell-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "smell" 2 "n") (:triple "olfactory property" 1 "n") (:triple "aroma" 1 "n") (:triple "odor" 1 "n") (:triple "odour" 2 "n") (:triple "scent" 3 "n")))))
(slot-gloss-of has 
    (range (Slot))
    (domain (String))
    (instance-of (Slot)))
(slot-gloss has 
    (instance-of (Slot
                     NL-Slot-Group))
    (domain (Slot))
    (range (String))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-1)))
(slope-of has 
    (inverse (slope))
    (range (Spatial-Entity))
    (domain (Unitless-Value))
    (instance-of (Slot)))
(slope has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Unitless-Value))
    (scale-class (Slope-Scale))
    (scalar-constant-class (Slope-Constant))
    (cardinal-unit-class (UoM-Unitless))
    (inverse (slope-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "slope" 2 "n") (:triple "gradient" 2 "n")))))
(skolem-string-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(skolem-string has 
    (instance-of (KM-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (dont-cache-values (t)))
(size-of has 
    (inverse (size))
    (range (Spatial-Entity))
    (domain (Size-Value))
    (instance-of (Slot)))
(size has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Size-Value))
    (scale-class (Size-Scale))
    (scalar-constant-class (Size-Constant))
    (inverse (size-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "size" 1 "n")))))
(site-of has 
    (inverse (site))
    (range (Event))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (combine-values-by-appending (t))
    (text-slot (text-site-of)))
(site has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Event))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (site-of))
    (text-slot (text-site))
    (cardinality (N-to-N)))
(shape-of has 
    (inverse (shape))
    (range (Tangible-Entity))
    (domain (Shape-Value))
    (instance-of (Slot)))
(shape has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Shape-Value))
    (categorical-constant-class (Shape-Constant))
    (inverse (shape-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "shape" 1 "n") (:triple "form" 4 "n") (:triple "configuration" 2 "n") (:triple "contour" 2 "n") (:triple "conformation" 2 "n")))))
(shaken-ui-hidden-slot has 
    (instance-of (Slot)))
(sex-of has 
    (inverse (sex))
    (range (Living-Entity))
    (domain (Sex-Value))
    (instance-of (Slot)))
(sex has 
    (instance-of (EntityProperty))
    (domain (Living-Entity))
    (range (Sex-Value))
    (categorical-constant-class (Sex-Constant))
    (inverse (sex-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "sex" 2 "n") (:triple "sex" 4 "n")))))
(sentience-of has 
    (inverse (sentience))
    (range (Living-Entity))
    (domain (Sentience-Value))
    (instance-of (Slot)))
(sentience has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Living-Entity))
    (range (Sentience-Value))
    (categorical-constant-class (Sentience-Constant))
    (inverse (sentience-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "sentience" 3 "n")))))
(secondary-slot-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(secondary-slot has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(scale-class-of has 
    (instance-of (Slot))
    (range (Property))
    (domain (Scale)))
(scale-class has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Property))
    (range (Scale))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(scalar-value-of has 
    (inverse (scalar-value))
    (range (Property-Value))
    (domain (Scalar))
    (instance-of (Slot)))
(scalar-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (range (Scalar))
    (inverse (scalar-value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(scalar-constant-of has 
    (inverse (scalar-constant))
    (range (Scalar))
    (domain (Constant))
    (instance-of (Slot)))
(scalar-constant-class-of has 
    (instance-of (Slot))
    (range (Property))
    (domain (Constant)))
(scalar-constant-class has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Property))
    (range (Constant))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(scalar-constant has 
    (instance-of (CLIB-Slot-Group))
    (domain (Scalar))
    (range (Constant))
    (inverse (scalar-constant-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent)))
(scalar-concentration-of has 
    (inverse (scalar-concentration))
    (range (Chemical))
    (domain (Scalar-Concentration-Value))
    (instance-of (Slot))
    (combine-values-by-appending (t)))
(scalar-concentration has 
    (instance-of (Property))
    (domain (Chemical))
    (range (Scalar-Concentration-Value))
    (scalar-constant-class (Concentration-Constant))
    (cardinal-unit-class (UoM-Concentration))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (scalar-concentration-of))
    (cardinality (N-to-1)))
(same-as has 
    (instance-of (Slot
                     PropertyProperty))
    (domain (Property-Value))
    (range (Property-Value))
    (inverse (same-as))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(salt-status-of has 
    (inverse (salt-status))
    (range (Compound))
    (domain (Salt-Status-Value))
    (instance-of (Slot)))
(salt-status has 
    (instance-of (Property))
    (domain (Compound))
    (range (Salt-Status-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Salt-Status-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (salt-status-of))
    (cardinality (N-to-1)))
(rotational-rate-of has 
    (inverse (rotational-rate))
    (range (Event))
    (domain (Rotational-Rate-Value))
    (instance-of (Slot)))
(rotational-rate has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Rotational-Rate-Value))
    (scalar-constant-class (Rotational-Rate-Constant))
    (cardinal-unit-class (UoM-Rotational-Rate))
    (inverse (rotational-rate-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(resulting-state-of has 
    (inverse (resulting-state))
    (range (Event))
    (domain (State))
    (instance-of (Slot))
    (text-slot (text-resulting-state-of)))
(resulting-state has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (State))
    (inverse (resulting-state-of))
    (text-slot (text-resulting-state))
    (fluent-status (*Inertial-Fluent))
    (cardinality (1-to-1)))
(result-of has 
    (inverse (result))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-slot (text-result-of)))
(result has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Event))
    (range (Entity))
    (inverse (result-of))
    (text-slot (text-result))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("produces"))
    (wn20-synset ((:set (:triple "resultant_role" 1 "n") (:triple "result" 4 "n") (:triple "consequent" 1 "a") (:triple "ensuant" 1 "a") (:triple "resultant" 1 "a") (:triple "resulting" 1 "a") (:triple "sequent" 2 "a") (:triple "product" 2 "n") (:triple "production" 4 "n") (:triple "product" 4 "n"))))
    (primary-slot-of (Breach
                         Duplicate
                         Catabolize
                         DNA-Melting
                         Replicon-DNA-Melting))
    (required-slot-of (Copy
                          Create
                          Embody
                          Print
                          ATP-Synthesis
                          Biosynthesize
                          Catalyze
                          Cellular-Respiration
                          DNA-Double-Strand-Replication
                          DNA-Molecule-Replication
                          DNA-Priming
                          DNA-Replication
                          DNA-Strand-Replication
                          DNA-Synthesis
                          DNA-Transcription
                          Enzyme-Catalysis
                          Eucaryotic-DNA-Transcription
                          Half-Replicon-Replication
                          Lipid-Synthesis
                          Metabolize
                          Okazaki-Fragment-Replication
                          Polymerize
                          Procaryotic-DNA-Synthesis
                          Procaryotic-DNA-Transcription
                          RNA-Translation
                          Replicon-Replication))
    (secondary-slot-of (ATP-Hydrolysis
                           Dephosphorylation)))
(required-slot-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(required-slot has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(required-force-ratio-of has 
    (inverse (required-force-ratio))
    (range (Military-Task))
    (domain (Required-Force-Ratio-Value))
    (instance-of (Slot)))
(required-force-ratio has 
    (instance-of (Property))
    (domain (Military-Task))
    (range (Required-Force-Ratio-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Required-Force-Ratio-Constant))
    (inverse (required-force-ratio-of))
    (inherit-with-overrides (t))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(remaining-strength-of has 
    (inverse (remaining-strength))
    (range (Military-Unit))
    (domain (Remaining-Strength-Value))
    (instance-of (Slot)))
(remaining-strength has 
    (instance-of (Property))
    (domain (Military-Unit))
    (range (Remaining-Strength-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Remaining-Strength-Constant))
    (inverse (remaining-strength-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(relative-combat-power-of has 
    (inverse (relative-combat-power))
    (range (Military-Unit))
    (domain (Relative-Combat-Power-Value))
    (instance-of (Slot)))
(relative-combat-power has 
    (instance-of (Property))
    (domain (Military-Unit))
    (range (Relative-Combat-Power-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Relative-Combat-Power-Constant))
    (inverse (relative-combat-power-of))
    (fluent-status (*Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(related-to has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (Thing))
    (inverse (related-to))
    (text-slot (text-related-to))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(reference-class-of has 
    (inverse (reference-class))
    (range (Cardinal))
    (domain (Thing))
    (instance-of (Slot)))
(reference-class has 
    (instance-of (CLIB-Slot-Group))
    (domain (Cardinal))
    (range (Thing))
    (inverse (reference-class-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent)))
(recipient-of has 
    (inverse (recipient))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is recipient of")))
(recipient has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Event))
    (range (Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (recipient-of))
    (text-slot (text-recipient))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "recipient_role" 1 "n") (:triple "recipient" 2 "n"))))
    (required-slot-of (Command
                          Deceive
                          Deliver
                          Donate
                          Feed
                          Give
                          Inquire
                          Obtain
                          Receive
                          Send
                          Take
                          Teach
                          Chemical-Bond-Energy-Transfer
                          Chemical-Energy-Transfer
                          Electron-Transfer
                          Energy-Transfer
                          Eucaryotic-Gene-To-Protein-Expression
                          Gene-Expression
                          Gene-To-Protein-Expression
                          Oxido-Reduction-Reaction
                          Procaryotic-Gene-To-Protein-Expression
                          Reduction))
    (primary-slot-of (Communicate
                         Convey
                         Lose
                         Relinquish
                         Supply
                         Transfer
                         Transmit
                         Citric-Acid-Cycle
                         Depurination
                         Genetic-Information-Transfer
                         Oxidation)))
(raw-material-of has 
    (inverse (raw-material))
    (range (Event))
    (domain (Tangible-Entity))
    (instance-of (Slot))
    (text-slot (text-raw-material-of)))
(raw-material has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Event))
    (range (Tangible-Entity))
    (inverse (raw-material-of))
    (text-slot (text-raw-material))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("consumes"))
    (wn20-synset ((:set (:triple "reactant" 1 "n") (:triple "raw material" 0 "n"))))
    (required-slot-of (Produce
                          Polymerize))
    (primary-slot-of (ATP-Synthesis
                         Biosynthesize
                         Cellular-Respiration
                         DNA-Synthesis
                         DNA-Transcription
                         Eucaryotic-DNA-Transcription
                         Lipid-Synthesis
                         Oxidative-Phosphorylation
                         Procaryotic-DNA-Synthesis
                         Procaryotic-DNA-Transcription
                         RNA-Translation)))
(rate-of has 
    (inverse (rate))
    (range (Event))
    (domain (Rate-Value))
    (instance-of (Slot)))
(rate has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Rate-Value))
    (scale-class (Rate-Scale))
    (scalar-constant-class (Rate-Constant))
    (cardinal-unit-class (UoM-Rate))
    (inverse (rate-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "rate" 2 "n")))))
(range2-of has 
    (range (Slot))
    (domain (Class))
    (instance-of (Slot)))
(range2 has 
    (instance-of (KM-Slot-Group))
    (domain (Slot))
    (range (Class))
    (cardinality (N-to-N)))
(radius-of has 
    (inverse (radius))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(radius has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Radius-Scale))
    (scalar-constant-class (Radius-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (radius-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "radius" 1 "n") (:triple "r" 4 "n")))))
(quantity-of has 
    (inverse (quantity))
    (range (Tangible-Entity))
    (domain (Quantity-Value))
    (instance-of (Slot)))
(quantity has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Quantity-Value))
    (scalar-constant-class (Quantity-Constant))
    (cardinal-unit-class (UoM-Quantity))
    (fluent-status (*Inertial-Fluent))
    (inverse (quantity-of))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "quantity" 1 "n") (:triple "quantity" 3 "n") (:triple "measure" 3 "n") (:triple "amount" 3 "n")))))
(purpose-of has 
    (inverse (purpose))
    (range (Entity))
    (domain (Role))
    (instance-of (Slot))
    (text-gloss ("is the purpose of")))
(purpose has 
    (instance-of (Slot
                     Causal-Relation
                     Agentive-Relation))
    (domain (Entity))
    (range (Role))
    (inverse (purpose-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "purpose" 2 "n") (:triple "function" 0 "n"))))
    (text-gloss ("has the purpose of being")))
(property-slot-of has 
    (range (Decrease
               Increase
               Property-Class-Order
               Property-Value))
    (domain (Slot))
    (instance-of (Slot)))
(property-slot has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Property-Value
                Property-Class-Order
                Increase
                Decrease))
    (range (Slot))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(property-of-slot-of has 
    (range (Property-Value))
    (domain (Slot))
    (instance-of (Slot)))
(property-of-slot has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (range (Slot))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(priority-of has 
    (inverse (priority))
    (range (Thing))
    (domain (Unitless-Value))
    (instance-of (Slot)))
(priority has 
    (instance-of (EntityProperty
                     EventProperty))
    (domain (Thing))
    (range (Unitless-Value))
    (scale-class (Priority-Scale))
    (scalar-constant-class (Priority-Constant))
    (cardinal-unit-class (UoM-Unitless))
    (inverse (priority-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "priority" 1 "n") (:triple "precedence" 1 "n") (:triple "precedency" 1 "n")))))
(primitive-actions-of has 
    (range (Event))
    (domain (Event))
    (instance-of (Slot)))
(primitive-actions has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (range (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(primary-slot-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(primary-slot has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(previous-element has 
    (inverse (next-element))
    (range (Entity))
    (domain (Entity))
    (instance-of (Slot))
    (wn20-synset ((:set (:triple "previous element" 0 "n"))))
    (text-gloss ("comes after")))
(prevents has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (prevented-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("prevents")))
(prevented-by has 
    (inverse (prevents))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is prevented by")))
(prev-event has 
    (inverse (next-event))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("comes after")))
(preparatory-event-of has 
    (range (Event))
    (domain (Event))
    (instance-of (Slot)))
(preparatory-event has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (range (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(preferred-unit-of has 
    (inverse (preferred-unit))
    (range (Property-Value))
    (domain (Unit-of-Measurement))
    (instance-of (Slot)))
(preferred-unit has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (range (Unit-of-Measurement))
    (inverse (preferred-unit-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(power-of has 
    (inverse (power))
    (range (Spatial-Entity))
    (domain (Power-Value))
    (instance-of (Slot)))
(power has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Power-Value))
    (scalar-constant-class (Power-Constant))
    (cardinal-unit-class (UoM-Power))
    (inverse (power-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "power" 2 "n")))))
(post-hoc-analysis-of has 
    (range (Question))
    (domain (String))
    (instance-of (Slot)))
(post-hoc-analysis has 
    (instance-of (KM-Slot-Group))
    (domain (Question))
    (range (String))
    (cardinality (N-to-1))
    (fluent-status (*Non-Fluent)))
(possesses has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Entity))
    (range (Entity))
    (inverse (is-possessed-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("possesses")))
(polarity-of has 
    (inverse (polarity))
    (range (Tangible-Entity))
    (domain (Polarity-Value))
    (instance-of (Slot)))
(polarity has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Polarity-Value))
    (categorical-constant-class (Polarity-Constant))
    (fluent-status (*Inertial-Fluent))
    (inverse (polarity-of))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "polarity" 2 "n") (:triple "sign" 7 "n")))))
(pOH-of has 
    (instance-of (Slot))
    (inverse (pOH))
    (range (Tangible-Entity))
    (domain (POH-Value)))
(pOH has 
    (instance-of (Property))
    (domain (Tangible-Entity))
    (range (POH-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inverse (pOH-of))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(plays has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Entity))
    (range (Role))
    (inverse (played-by))
    (cardinality (1-to-N))
    (fluent-status (*Inertial-Fluent))
    (text-gloss ("plays the role of")))
(played-by has 
    (inverse (plays))
    (range (Entity))
    (domain (Role))
    (instance-of (Slot))
    (text-gloss ("is the role played by")))
(pkb-of has 
    (inverse (pkb))
    (range (Chemical
               Base-Role
               Hydrolysis))
    (domain (PKb-Value))
    (instance-of (Slot)))
(pkb has 
    (instance-of (Property))
    (domain (Hydrolysis
                Base-Role
                Chemical))
    (range (PKb-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (pkb-of))
    (cardinality (N-to-1)))
(pka-of has 
    (inverse (pka))
    (range (Chemical
               Acid-Role
               Complete-Dissociation-Reaction
               Hydrolysis))
    (domain (PKa-Value))
    (instance-of (Slot)))
(pka has 
    (instance-of (Property))
    (domain (Hydrolysis
                Complete-Dissociation-Reaction
                Acid-Role
                Chemical))
    (range (PKa-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (pka-of))
    (cardinality (N-to-1)))
(physical-state-of has 
    (inverse (physical-state))
    (range (Substance))
    (domain (State-Value))
    (instance-of (Slot)))
(physical-state has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Substance))
    (range (State-Value))
    (categorical-constant-class (State-Constant))
    (inverse (physical-state-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "state" 8 "n") (:triple "state of matter" 1 "n") (:triple "physical state" 0 "n")))))
(pH-of has 
    (instance-of (Slot))
    (inverse (pH))
    (range (Tangible-Entity))
    (domain (PH-Value)))
(pH has 
    (instance-of (Property))
    (domain (Tangible-Entity))
    (range (PH-Value))
    (scalar-constant-class (PH-Constant))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inverse (pH-of))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(perimeter-of has 
    (inverse (perimeter))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(perimeter has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Perimeter-Scale))
    (scalar-constant-class (Perimeter-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (perimeter-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "perimeter" 3 "n") (:triple "circumference" 1 "n")))))
(path-of has 
    (inverse (path))
    (range (Event))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (combine-values-by-appending (t))
    (text-gloss ("is the path of")))
(path has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Event))
    (range (Spatial-Entity))
    (inverse (path-of))
    (text-slot (text-path))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (primary-slot-of (Absorb
                         Carry
                         Emit
                         Enter
                         Exit
                         Fall
                         Go-To
                         Leave
                         Load
                         Move-Into
                         Move
                         Send
                         Take-In
                         Endocytose
                         Phagocytose
                         Pinocytose))
    (required-slot-of (Go-Through
                          Move-Through
                          Slide)))
(parent_formula-of has 
    (inverse (parent_formula))
    (range (Thing))
    (instance-of (Slot)))
(parent_formula has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (parent_formula-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(paraphrase-encoded-question-of has 
    (range (Question))
    (domain (String))
    (instance-of (Slot)))
(paraphrase-encoded-question has 
    (instance-of (KM-Slot-Group))
    (domain (Question))
    (range (String))
    (cardinality (N-to-1))
    (fluent-status (*Non-Fluent)))
(oxidation-state-of has 
    (inverse (oxidation-state))
    (range (Chemical-Entity))
    (domain (Oxidation-State-Value))
    (instance-of (Slot)))
(oxidation-state-changes has 
    (instance-of (Property))
    (domain (Reaction))
    (range (String))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1))
    (ignore-inverses (t)))
(oxidation-state has 
    (instance-of (Property))
    (domain (Chemical-Entity))
    (range (Oxidation-State-Value))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (oxidation-state-of))
    (cardinality (N-to-1)))
(output-of has 
    (inverse (output))
    (range (Thing))
    (instance-of (Slot)))
(output has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (inverse (output-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(original-question-of has 
    (range (Question))
    (domain (String))
    (instance-of (Slot)))
(original-question has 
    (instance-of (KM-Slot-Group))
    (domain (Question))
    (range (String))
    (cardinality (N-to-1))
    (fluent-status (*Non-Fluent)))
(origin-of has 
    (inverse (origin))
    (range (Event))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is the origin of")))
(origin has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Event))
    (range (Spatial-Entity))
    (inverse (origin-of))
    (text-slot (text-origin))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (primary-slot-of (Absorb
                         Carry
                         Enter
                         Fall
                         Go-Through
                         Go-To
                         Load
                         Move-Through
                         Move
                         Send
                         Slide
                         Take-In
                         DNA-Strand-Replication
                         Endocytose
                         Half-Replicon-Replication
                         Phagocytose
                         Pinocytose))
    (required-slot-of (Disperse
                          Emit
                          Exit
                          Leave
                          Move-Apart
                          Move-Out-Of
                          Diffuse)))
(orientation-of has 
    (inverse (orientation))
    (range (Entity))
    (domain (Angle-Value))
    (instance-of (Slot)))
(orientation has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Entity))
    (range (Angle-Value))
    (scalar-constant-class (Orientation-Constant))
    (cardinal-unit-class (UoM-Angle))
    (inverse (orientation-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "orientation" 3 "n")))))
(objective-of has 
    (inverse (objective))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is an objective of")))
(objective has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (objective-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("has as objective")))
(object-of has 
    (inverse (object))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (combine-values-by-appending (t))
    (text-gloss ("is the object of")))
(object has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Event))
    (range (Entity))
    (inverse (object-of))
    (fluent-status (*Inertial-Fluent))
    (text-slot (text-object))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "affected_role" 1 "n") (:triple "patient_role" 1 "n") (:triple "patient" 2 "n"))))
    (required-slot-of (Absorb
                          Activate
                          Add
                          Admit
                          Allocate-Resource
                          Attach
                          Be-Accessible
                          Be-Activated
                          Be-Available
                          Be-Blocked
                          Be-Broken
                          Be-Closed
                          Be-Concealed
                          Be-Confined
                          Be-Contained
                          Be-Controlled
                          Be-Damaged
                          Be-Held
                          Be-Inaccessible
                          Be-Known
                          Be-Obstructed
                          Be-Open
                          Be-Restrained
                          Be-Shut-Out
                          Be-Stable
                          Be-Stored
                          Be-Supported
                          Be-Unavailable
                          Be-Unblocked
                          Block
                          Breach
                          Break-Contact
                          Break
                          Carry
                          Close
                          Collide
                          Come-Together
                          Command
                          Communicate
                          Conceal
                          Confine
                          Convey
                          Copy
                          Damage
                          Deactivate
                          Deceive
                          Deliver
                          Detach
                          Disperse
                          Divide
                          Donate
                          Duplicate
                          Eat
                          Edit
                          Embody
                          Emit
                          Enter
                          Exit
                          Expose
                          Express
                          Fall
                          Feed
                          Follow
                          Forget
                          Give
                          Go-Through
                          Go-To
                          Harm
                          Hold
                          Impair
                          Inquire
                          Interpret
                          Invade
                          Learn
                          Leave
                          Let-Fall
                          Let-Go-Of
                          Lie
                          Load
                          Locomotion
                          Lose
                          Make-Accessible
                          Make-Contact
                          Make-Inaccessible
                          Move-Apart
                          Move-Into
                          Move-Out-Of
                          Move-Through
                          Move-Together
                          Move
                          Obstruct
                          Obtain
                          Open
                          Penetrate
                          Perceive
                          Print
                          Receive
                          Recognize
                          Release-Resource
                          Release
                          Relinquish
                          Remove
                          Repair
                          Replace
                          Restrain
                          Ruin
                          Send
                          Sense
                          Shut-Out
                          Slide
                          Store
                          Supply
                          Support
                          Take-Apart
                          Take-Control
                          Take-In
                          Take
                          Teach
                          Transfer
                          Transmit
                          Trespass
                          Unblock
                          Unobstruct
                          Unrestrain
                          Withdraw
                          ATP-Hydrolysis
                          ATP-Synthesis
                          Base-Pairing
                          Catabolize
                          Chemical-Bond-Energy-Transfer
                          Chemical-Energy-Transfer
                          Citric-Acid-Cycle
                          Cytosine-Deamination
                          DNA-Chain-Elongation
                          DNA-Double-Strand-Replication
                          DNA-Ligation
                          DNA-Melting
                          DNA-Mismatch-Repair
                          DNA-Molecule-Replication
                          DNA-Priming
                          DNA-Repair
                          DNA-Replication
                          DNA-Strand-Replication
                          DNA-Synthesis
                          Damaged-DNA-Repair
                          Deamination
                          Dephosphorylation
                          Depurination
                          Diffuse
                          Electron-Transfer
                          Endocytose
                          Energy-Transfer
                          Enzyme-Activation
                          Eucaryotic-Gene-To-Protein-Expression
                          Gene-Expression
                          Gene-To-Protein-Expression
                          Genetic-Information-Transfer
                          Glycolysis
                          Half-Replicon-Replication
                          Ligation
                          Lipolysis
                          Mitosis
                          Nucleic-Acid-Degradation
                          Okazaki-Fragment-Replication
                          Oxidation
                          Oxidative-Phosphorylation
                          Oxido-Reduction-Reaction
                          Phagocytose
                          Phosphorylation
                          Pinocytose
                          Procaryotic-DNA-Synthesis
                          Procaryotic-Gene-To-Protein-Expression
                          Proteolysis
                          Reduction
                          Replicon-DNA-Melting
                          Replicon-Replication
                          Ribonucleic-Acid-Degradation
                          TRNA-Charging))
    (primary-slot-of (Action
                         State
                         Amoeboid-Cell-Locomotion
                         Cell-Locomotion)))
(nuSketch-Y-coordinate-of has 
    (inverse (nuSketch-Y-coordinate))
    (range (Thing))
    (domain (NuSketch-Y-Coordinate-Value))
    (instance-of (Slot)))
(nuSketch-Y-coordinate has 
    (instance-of (Property))
    (domain (Thing))
    (range (NuSketch-Y-Coordinate-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (NuSketch-Y-Coordinate-Constant))
    (inverse (nuSketch-Y-coordinate-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(nuSketch-X-coordinate-of has 
    (inverse (nuSketch-X-coordinate))
    (range (Thing))
    (domain (NuSketch-X-Coordinate-Value))
    (instance-of (Slot)))
(nuSketch-X-coordinate has 
    (instance-of (Property))
    (domain (Thing))
    (range (NuSketch-X-Coordinate-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (NuSketch-X-Coordinate-Constant))
    (inverse (nuSketch-X-coordinate-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(numeric-value-of has 
    (inverse (numeric-value))
    (range (Cardinal))
    (domain (Number))
    (instance-of (Slot)))
(numeric-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Cardinal))
    (range (Number))
    (inverse (numeric-value-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent)))
(number-of-elements-of has 
    (inverse (number-of-elements))
    (range (Aggregate))
    (domain (Number))
    (instance-of (Slot)))
(number-of-elements has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Aggregate))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (dont-cache-values (t))
    (inherit-with-overrides (t))
    (inverse (number-of-elements-of))
    (cardinality (N-to-1)))
(notes-on-solution-of has 
    (range (Question))
    (domain (String))
    (instance-of (Slot)))
(notes-on-solution has 
    (instance-of (KM-Slot-Group))
    (domain (Question))
    (range (String))
    (cardinality (N-to-1))
    (fluent-status (*Non-Fluent)))
(notes-on-paraphrase-encoding-of has 
    (range (Question))
    (domain (String))
    (instance-of (Slot)))
(notes-on-paraphrase-encoding has 
    (instance-of (KM-Slot-Group))
    (domain (Question))
    (range (String))
    (cardinality (N-to-1))
    (fluent-status (*Non-Fluent)))
(next-element has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Entity))
    (range (Entity))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (inverse (previous-element))
    (text-gloss ("comes before")))
(net-ionic-equation-of has 
    (inverse (net-ionic-equation))
    (range (Reaction))
    (domain (Thing))
    (instance-of (Slot)))
(net-ionic-equation has 
    (instance-of (Property))
    (domain (Reaction))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (net-ionic-equation-of))
    (cardinality (N-to-1)))
(nested-atomic-chemical-formula-of has 
    (inverse (nested-atomic-chemical-formula))
    (range (Chemical-Entity))
    (domain (Chemical-Formula))
    (instance-of (Slot)))
(nested-atomic-chemical-formula has 
    (instance-of (EntityProperty))
    (domain (Chemical-Entity))
    (range (Chemical-Formula))
    (fluent-status (*Inertial-Fluent))
    (cardinality (1-to-1))
    (inherit-with-overrides (t))
    (inverse (nested-atomic-chemical-formula-of)))
(multiplier-of has 
    (inverse (multiplier))
    (range (Thing))
    (instance-of (Slot)))
(multiplier has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (multiplier-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(momentum-of has 
    (inverse (momentum))
    (range (Event))
    (domain (Momentum-Value))
    (instance-of (Slot)))
(momentum has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Momentum-Value))
    (cardinal-unit-class (UoM-Momentum))
    (inverse (momentum-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "momentum" 2 "n")))))
(moment-of-inertia-of has 
    (inverse (moment-of-inertia))
    (range (Physical-Object))
    (domain (Moment-of-Inertia-Value))
    (instance-of (Slot)))
(moment-of-inertia has 
    (instance-of (EntityProperty))
    (domain (Physical-Object))
    (range (Moment-of-Inertia-Value))
    (cardinal-unit-class (UoM-Moment-of-Inertia))
    (inverse (moment-of-inertia-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "moment of inertia" 1 "n")))))
(mole-weight-of has 
    (inverse (mole-weight))
    (range (Thing))
    (instance-of (Slot)))
(mole-weight has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (mole-weight-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(min-value-of has 
    (inverse (min-value))
    (range (Property-Value))
    (instance-of (Slot)))
(min-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (inverse (min-value-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t)))
(means-by-which has 
    (inverse (by-means-of))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is the means of doing")))
(mcs-list-of has 
    (inverse (mcs-list))
    (range (Event))
    (instance-of (Slot)))
(mcs-list has 
    (instance-of (CLIB-Slot-Group))
    (domain (Event))
    (inverse (mcs-list-of))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(max-value-of has 
    (inverse (max-value))
    (range (Property-Value))
    (instance-of (Slot)))
(max-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (inverse (max-value-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t)))
(material-of has 
    (inverse (material))
    (range (Tangible-Entity))
    (domain (Tangible-Entity))
    (instance-of (Slot))
    (text-gloss ("is the material of")))
(material has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Tangible-Entity))
    (range (Tangible-Entity))
    (inverse (material-of))
    (text-slot (text-material))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(mass-of has 
    (inverse (mass))
    (range (Tangible-Entity))
    (domain (Mass-Value))
    (instance-of (Slot)))
(mass has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Mass-Value))
    (scale-class (Mass-Scale))
    (scalar-constant-class (Mass-Constant))
    (cardinal-unit-class (UoM-Mass))
    (inverse (mass-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "mass" 1 "n")))))
(manner-of has 
    (inverse (manner))
    (range (Event))
    (domain (Manner-Value))
    (instance-of (Slot)))
(manner has 
    (instance-of (Slot
                     EventProperty))
    (domain (Event))
    (range (Manner-Value))
    (categorical-constant-class (Manner-Constant))
    (inverse (manner-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "manner" 1 "n") (:triple "manner" 2 "n") (:triple "mode" 1 "n") (:triple "style" 2 "n") (:triple "way" 1 "n") (:triple "fashion" 1 "n") (:triple "personal manner" 1 "n")))))
(luminous-intensity-of has 
    (inverse (luminous-intensity))
    (range (Spatial-Entity))
    (domain (Luminous-Intensity-Value))
    (instance-of (Slot)))
(luminous-intensity has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Luminous-Intensity-Value))
    (scalar-constant-class (Luminous-Intensity-Constant))
    (cardinal-unit-class (UoM-Luminous-Intensity))
    (inverse (luminous-intensity-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "luminous intensity unit" 1 "n") (:triple "candlepower unit" 1 "n") (:triple "luminous intensity" 0 "n")))))
(luminous-flux-of has 
    (inverse (luminous-flux))
    (range (Spatial-Entity))
    (domain (Luminous-Flux-Value))
    (instance-of (Slot)))
(luminous-flux has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Luminous-Flux-Value))
    (scalar-constant-class (Luminous-Flux-Constant))
    (cardinal-unit-class (UoM-Luminous-Flux))
    (inverse (luminous-flux-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "luminous flux" 1 "n")))))
(luminance-of has 
    (inverse (luminance))
    (range (Spatial-Entity))
    (domain (Luminance-Value))
    (instance-of (Slot)))
(luminance has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Luminance-Value))
    (scalar-constant-class (Luminance-Constant))
    (cardinal-unit-class (UoM-Luminance))
    (inverse (luminance-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "luminance" 1 "n") (:triple "brightness" 3 "n") (:triple "luminosity" 1 "n") (:triple "brightness level" 1 "n") (:triple "luminousness" 1 "n") (:triple "light" 4 "n")))))
(longitude-of has 
    (inverse (longitude))
    (range (Spatial-Entity))
    (domain (Angle-Value))
    (instance-of (Slot)))
(longitude has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Angle-Value))
    (scalar-constant-class (Longitude-Constant))
    (cardinal-unit-class (UoM-Angle))
    (inverse (longitude-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "longitude" 1 "n") (:triple "meridian" 2 "n") (:triple "line of longitude" 1 "n")))))
(location-of has 
    (inverse (location))
    (range (Spatial-Entity))
    (domain (Place))
    (instance-of (Slot))
    (combine-values-by-appending (t))
    (text-gloss ("is the location of")))
(location has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Place))
    (inverse (location-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "located" 1 "a") (:triple "placed" 1 "a") (:triple "set" 3 "a") (:triple "situated" 1 "a") (:triple "location" 0 "n"))))
    (text-gloss ("is at"))
    (primary-slot-of (Collide
                         Confine
                         Tangible-Entity)))
(lewis-acid-strength-of has 
    (inverse (lewis-acid-strength))
    (range (Lewis-Acid-Role))
    (domain (Lewis-Acid-Strength-Value))
    (instance-of (Slot)))
(lewis-acid-strength has 
    (instance-of (Property))
    (domain (Lewis-Acid-Role))
    (range (Lewis-Acid-Strength-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Atomic-Number-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (lewis-acid-strength-of))
    (cardinality (N-to-1)))
(less-than-or-equal-to has 
    (inverse (greater-than-or-equal-to))
    (range (Property-Value))
    (domain (Property-Value))
    (instance-of (Slot)))
(less-than has 
    (inverse (greater-than))
    (range (Property-Value))
    (domain (Property-Value))
    (instance-of (Slot)))
(length-of has 
    (inverse (length))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(length has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Length-Scale))
    (scalar-constant-class (Length-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (length-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "length" 1 "n")))))
(latitude-of has 
    (inverse (latitude))
    (range (Spatial-Entity))
    (domain (Angle-Value))
    (instance-of (Slot)))
(latitude has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Angle-Value))
    (scalar-constant-class (Latitude-Constant))
    (cardinal-unit-class (UoM-Angle))
    (inverse (latitude-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "latitude" 1 "n")))))
(kreq-list-of has 
    (range (Thing))
    (instance-of (Slot)))
(kreq-list has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(ki-of has 
    (inverse (ki))
    (range (Equilibrium-Reaction))
    (domain (Equilibrium-Constant-Value))
    (instance-of (Slot)))
(ki has 
    (instance-of (Property))
    (domain (Equilibrium-Reaction))
    (range (Equilibrium-Constant-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (ki-of))
    (cardinality (N-to-N)))
(keq-of has 
    (inverse (keq))
    (range (Equilibrium-Reaction))
    (domain (Equilibrium-Constant-Value))
    (instance-of (Slot)))
(keq-expression-of has 
    (inverse (keq-expression))
    (range (Equilibrium-Reaction))
    (domain (Equilibrium-Constant-Expression))
    (instance-of (Slot)))
(keq-expression has 
    (instance-of (EventProperty))
    (domain (Equilibrium-Reaction))
    (range (Equilibrium-Constant-Expression))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (inverse (keq-expression-of)))
(keq has 
    (instance-of (Property))
    (domain (Equilibrium-Reaction))
    (range (Equilibrium-Constant-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inverse (keq-of))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(kb-of has 
    (inverse (kb))
    (range (Chemical
               Base-Role
               Hydrolysis))
    (domain (Equilibrium-Constant-Value))
    (instance-of (Slot)))
(kb-expression-of has 
    (inverse (kb-expression))
    (range (Base-Role
               Hydrolysis))
    (domain (Equilibrium-Constant-Expression))
    (instance-of (Slot)))
(kb-expression has 
    (instance-of (EventProperty))
    (domain (Hydrolysis
                Base-Role))
    (range (Equilibrium-Constant-Expression))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (inverse (kb-expression-of)))
(kb has 
    (instance-of (Property))
    (domain (Hydrolysis
                Base-Role
                Chemical))
    (range (Equilibrium-Constant-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (kb-of))
    (cardinality (N-to-1)))
(ka-of has 
    (inverse (ka))
    (range (Chemical
               Acid-Role
               Complete-Dissociation-Reaction
               Hydrolysis))
    (domain (Equilibrium-Constant-Value))
    (instance-of (Slot)))
(ka-expression-of has 
    (inverse (ka-expression))
    (range (Acid-Role
               Hydrolysis))
    (domain (Equilibrium-Constant-Expression))
    (instance-of (Slot)))
(ka-expression has 
    (instance-of (EventProperty))
    (domain (Hydrolysis
                Acid-Role))
    (range (Equilibrium-Constant-Expression))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (inherit-with-overrides (t))
    (inverse (ka-expression-of)))
(ka has 
    (instance-of (Property))
    (domain (Hydrolysis
                Complete-Dissociation-Reaction
                Acid-Role
                Chemical))
    (range (Equilibrium-Constant-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (ka-of))
    (cardinality (N-to-1)))
(is-west-of has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (is-east-of))
    (text-slot (text-is-west-of))
    (cardinality (N-to-N)))
(is-under has 
    (inverse (is-over))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is under")))
(is-structural-part-of has 
    (inverse (has-structural-part))
    (range (Tangible-Entity))
    (domain (Tangible-Entity))
    (instance-of (Slot))
    (text-gloss ("is a structural part of")))
(is-southwest-of has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (is-northeast-of))
    (text-slot (text-is-southwest-of))
    (cardinality (N-to-N)))
(is-southeast-of has 
    (inverse (is-northwest-of))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-slot (text-is-southeast-of)))
(is-south-of has 
    (inverse (is-north-of))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-slot (text-is-south-of)))
(is-region-of has 
    (inverse (has-region))
    (range (Tangible-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is a region of")))
(is-possessed-by has 
    (inverse (possesses))
    (range (Entity))
    (domain (Entity))
    (instance-of (Slot))
    (text-slot (text-is-possessed-by)))
(is-pattern-of has 
    (inverse (has-pattern))
    (range (Pattern))
    (domain (Thing))
    (instance-of (Slot)))
(is-part-of has 
    (inverse (has-part))
    (range (Entity))
    (domain (Entity))
    (instance-of (Slot))
    (text-slot (text-is-part-of)))
(is-over has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-under))
    (text-slot (text-is-over))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-outside has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (does-not-enclose))
    (text-slot (text-is-outside))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-oriented-toward-of has 
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("has oriented toward it")))
(is-opposite has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-opposite))
    (text-slot (text-is-opposite))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-on has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (has-on-it))
    (text-slot (text-is-on))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-northwest-of has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (is-southeast-of))
    (text-slot (text-is-northwest-of))
    (cardinality (N-to-N)))
(is-northeast-of has 
    (inverse (is-southwest-of))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-slot (text-is-northeast-of)))
(is-north-of has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (is-south-of))
    (text-slot (text-is-north-of))
    (cardinality (N-to-N)))
(is-near has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-near))
    (text-slot (text-is-near))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-inside has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (encloses))
    (text-slot (text-is-inside))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-in-front-of has 
    (inverse (is-behind))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is in front of")))
(is-goal-of has 
    (inverse (has-goal))
    (range (Entity))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is a goal of")))
(is-functional-part-of has 
    (inverse (has-functional-part))
    (range (Entity))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is a functional part of")))
(is-facing has 
    (instance-of (Slot
                     Spatial-Relation))
    (description ("FRAME is facing VALUE.  In other words, the salient face or front side intrinsic to FRAME is the side of FRAME that is closest to VALUE."))
    (superslots (is-oriented-toward))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-faced-by))
    (fluent-status (*Inertial-Fluent))
    (text-slot (text-is-facing))
    (cardinality (N-to-N)))
(is-faced-by has 
    (inverse (is-facing))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is faced by")))
(is-example-of has 
    (inverse (has-example))
    (range (Thing))
    (domain (Thing))
    (instance-of (Slot)))
(is-east-of has 
    (inverse (is-west-of))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-slot (text-is-east-of)))
(is-between-of has 
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot)))
(is-between has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (text-slot (text-is-between))
    (cardinality (N-to-N)))
(is-beside has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (is-beside))
    (text-slot (text-is-beside))
    (cardinality (N-to-N)))
(is-below has 
    (inverse (is-above))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is below")))
(is-behind has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-in-front-of))
    (text-slot (text-is-behind))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-basic-structural-unit-of has 
    (inverse (has-basic-structural-unit))
    (range (Tangible-Entity))
    (domain (Tangible-Entity))
    (instance-of (Slot))
    (text-gloss ("is a basic structural unit of")))
(is-basic-functional-unit-of has 
    (inverse (has-basic-functional-unit))
    (range (Entity))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is a basic functional unit of")))
(is-at-of has 
    (inverse (is-at))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (combine-values-by-appending (t))
    (text-gloss ("is at")))
(is-at has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-at-of))
    (text-slot (text-is-at))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-along has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-along))
    (text-slot (text-is-along))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(is-above has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (is-below))
    (text-slot (text-is-above))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "above" 2 "r") (:triple "higher_up" 1 "r") (:triple "in_a_higher_place" 1 "r") (:triple "to_a_higher_place" 1 "r")))))
(interrupts has 
    (inverse (interrupted-by))
    (range (Event))
    (domain (Event))
    (instance-of (Slot)))
(interrupted-by has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (range (Event))
    (inverse (interrupts))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(intensity-of has 
    (inverse (intensity))
    (range (Thing))
    (domain (Intensity-Value))
    (instance-of (Slot)))
(intensity has 
    (instance-of (Slot
                     EntityProperty
                     EventProperty))
    (domain (Thing))
    (range (Intensity-Value))
    (scale-class (Intensity-Scale))
    (scalar-constant-class (Intensity-Constant))
    (cardinal-unit-class (UoM-Intensity))
    (inverse (intensity-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "intensity" 1 "n") (:triple "intensity" 3 "n") (:triple "intensity" 4 "n") (:triple "strength" 6 "n") (:triple "intensity level" 1 "n") (:triple "volume" 6 "n") (:triple "loudness" 1 "n") (:triple "saturation" 4 "n") (:triple "chroma" 1 "n") (:triple "vividness" 2 "n")))))
(integrity-of has 
    (inverse (integrity))
    (range (Tangible-Entity))
    (domain (Integrity-Value))
    (instance-of (Slot)))
(integrity has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Integrity-Value))
    (scale-class (Integrity-Scale))
    (scalar-constant-class (Integrity-Constant))
    (inverse (integrity-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "integrity" 1 "n") (:triple "unity" 1 "n") (:triple "wholeness" 1 "n")))))
(instrument-of has 
    (inverse (instrument))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is used in")))
(instrument has 
    (instance-of (Slot
                     Participant-Relation
                     Agentive-Relation))
    (domain (Event))
    (range (Entity))
    (inverse (instrument-of))
    (text-slot (text-instrument))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "instrumental_role" 1 "n") (:triple "instrument" 5 "n") (:triple "use" 1 "v"))))
    (text-gloss ("uses"))
    (primary-slot-of (Action
                         Activate
                         Add
                         Be-Attached-To
                         Be-Blocked
                         Be-Supported
                         Be-Unblocked
                         Block
                         Break
                         Close
                         Copy
                         Create
                         Damage
                         Deactivate
                         Deliver
                         Detach
                         Donate
                         Duplicate
                         Feed
                         Give
                         Harm
                         Impair
                         Lose
                         Obtain
                         Open
                         Produce
                         Receive
                         Release
                         Relinquish
                         Remove
                         Ruin
                         Send
                         Store
                         Supply
                         Support
                         Take-Apart
                         Take
                         Transfer
                         Unobstruct
                         Withdraw
                         ATP-Hydrolysis
                         ATP-Synthesis
                         Base-Pairing
                         Biosynthesize
                         Catabolize
                         Catalyze
                         Cellular-Respiration
                         Chemical-Bond-Energy-Transfer
                         Chemical-Energy-Transfer
                         Citric-Acid-Cycle
                         Cytosine-Deamination
                         DNA-Chain-Elongation
                         DNA-Double-Strand-Replication
                         DNA-Ligation
                         DNA-Melting
                         DNA-Molecule-Replication
                         DNA-Priming
                         DNA-Replication
                         DNA-Strand-Replication
                         DNA-Synthesis
                         DNA-Transcription
                         Damaged-DNA-Repair
                         Deamination
                         Dephosphorylation
                         Depurination
                         Electron-Transfer
                         Energy-Transfer
                         Enzyme-Activation
                         Enzyme-Catalysis
                         Eucaryotic-DNA-Transcription
                         Eucaryotic-Gene-To-Protein-Expression
                         Gene-Expression
                         Gene-To-Protein-Expression
                         Genetic-Information-Transfer
                         Glycolysis
                         Half-Replicon-Replication
                         Ligation
                         Lipid-Synthesis
                         Lipolysis
                         Metabolize
                         Nucleic-Acid-Degradation
                         Okazaki-Fragment-Replication
                         Oxidation
                         Oxidative-Phosphorylation
                         Oxido-Reduction-Reaction
                         Phosphorylation
                         Polymerize
                         Procaryotic-DNA-Transcription
                         Procaryotic-Gene-To-Protein-Expression
                         Proteolysis
                         RNA-Translation
                         Reduction
                         Replicon-DNA-Melting
                         Replicon-Replication
                         Ribonucleic-Acid-Degradation
                         TRNA-Charging))
    (required-slot-of (Procaryotic-DNA-Synthesis)))
(input-of has 
    (inverse (input))
    (range (Thing))
    (instance-of (Slot)))
(input has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (inverse (input-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(inhibits has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (inhibited-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("inhibits")))
(inhibited-by has 
    (inverse (inhibits))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is inhibited by")))
(information-language-of has 
    (inverse (information-language))
    (range (Message))
    (domain (Language))
    (instance-of (Slot)))
(information-language has 
    (instance-of (CLIB-Slot-Group))
    (domain (Message))
    (range (Language))
    (inverse (information-language-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(information-content-of has 
    (inverse (information-content))
    (range (Conceptual-Entity))
    (domain (Thing))
    (instance-of (Slot)))
(information-content has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Conceptual-Entity))
    (range (Thing))
    (inverse (information-content-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (required-slot-of (Information)))
(in-organization-of has 
    (inverse (in-organization))
    (range (Role))
    (domain (Organization))
    (instance-of (Slot)))
(in-organization has 
    (instance-of (Meronymic-Relation))
    (domain (Role))
    (range (Organization))
    (inverse (in-organization-of))
    (cardinality (N-to-1))
    (fluent-status (*Non-Fluent)))
(in-event-of has 
    (inverse (in-event))
    (range (Role))
    (domain (Event))
    (instance-of (Slot)))
(in-event has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Role))
    (range (Event))
    (inverse (in-event-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent)))
(importance-of has 
    (inverse (importance))
    (range (Thing))
    (domain (Unitless-Value))
    (instance-of (Slot)))
(importance has 
    (instance-of (EntityProperty
                     EventProperty))
    (description ("The degree of prominence or noteworthiness possessed by a thing.  See also priority."))
    (domain (Thing))
    (range (Unitless-Value))
    (scale-class (Importance-Scale))
    (scalar-constant-class (Importance-Constant))
    (cardinal-unit-class (UoM-Unitless))
    (inverse (importance-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "importance" 1 "n")))))
(identifier-of has 
    (inverse (identifier))
    (range (Thing))
    (domain (Message-Field))
    (instance-of (Slot)))
(identifier has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (Message-Field))
    (inverse (identifier-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(height-of has 
    (inverse (height))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(height has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Height-Scale))
    (scalar-constant-class (Height-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (height-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "height" 1 "n") (:triple "height" 4 "n") (:triple "tallness" 1 "n") (:triple "altitude" 1 "n")))))
(has-structural-part has 
    (superslots (has-part))
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Tangible-Entity))
    (range (Tangible-Entity))
    (inverse (is-structural-part-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "structural part" 0 "n"))))
    (text-gloss ("has as structural part")))
(has-region has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Tangible-Entity))
    (range (Spatial-Entity))
    (inverse (is-region-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "region" 0 "n"))))
    (text-gloss ("has subregion")))
(has-pattern has 
    (instance-of (Relation))
    (domain (Pattern))
    (range (Thing))
    (inverse (is-pattern-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (1-to-N)))
(has-on-it has 
    (inverse (is-on))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("has on it")))
(has-molecular-name-of has 
    (inverse (has-molecular-name))
    (range (Atom))
    (domain (String))
    (instance-of (Slot)))
(has-molecular-name has 
    (instance-of (Property))
    (domain (Atom))
    (range (String))
    (inherit-with-overrides (t))
    (inverse (has-molecular-name-of))
    (cardinality (1-to-N)))
(has-goal has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Entity))
    (range (Event))
    (inverse (is-goal-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "goal" 0 "n"))))
    (text-gloss ("has the goal")))
(has-functional-part has 
    (instance-of (Slot
                     Meronymic-Relation))
    (superslots (has-part))
    (domain (Entity))
    (range (Entity))
    (inverse (is-functional-part-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "functional part" 0 "n"))))
    (text-gloss ("has as functional part")))
(has-example has 
    (instance-of (Slot
                     KM-Slot-Group))
    (inverse (is-example-of))
    (domain (Thing))
    (range (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N))
    (name ("example"))
    (wn20-synset ((:set (:triple "example" 0 "n")))))
(has-chemical-name-of has 
    (inverse (has-chemical-name))
    (range (Atom))
    (domain (String))
    (instance-of (Slot)))
(has-chemical-name has 
    (instance-of (Property))
    (domain (Atom))
    (range (String))
    (inherit-with-overrides (t))
    (inverse (has-chemical-name-of))
    (cardinality (1-to-N)))
(has-chemical-formula-of has 
    (inverse (has-chemical-formula))
    (range (Chemical-Entity))
    (domain (Chemical-Formula))
    (instance-of (Slot)))
(has-chemical-formula has 
    (instance-of (EntityProperty))
    (domain (Chemical-Entity))
    (range (Chemical-Formula))
    (fluent-status (*Inertial-Fluent))
    (cardinality (1-to-1))
    (inherit-with-overrides (t))
    (inverse (has-chemical-formula-of)))
(has-basic-structural-unit has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Tangible-Entity))
    (range (Tangible-Entity))
    (inverse (is-basic-structural-unit-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "basic structural unit" 0 "n"))))
    (text-gloss ("has as basic structural unit")))
(has-basic-functional-unit has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Entity))
    (range (Entity))
    (inverse (is-basic-functional-unit-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "basic functional unit" 0 "n"))))
    (text-gloss ("has as basic functional unit")))
(has-acid-name-of has 
    (inverse (has-acid-name))
    (range (Atom))
    (domain (String))
    (instance-of (Slot)))
(has-acid-name has 
    (instance-of (Property))
    (domain (Atom))
    (range (String))
    (inherit-with-overrides (t))
    (inverse (has-acid-name-of))
    (cardinality (1-to-N)))
(greater-than-or-equal-to has 
    (instance-of (Slot
                     PropertyProperty))
    (domain (Property-Value))
    (range (Property-Value))
    (inverse (less-than-or-equal-to))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(greater-than has 
    (instance-of (Slot
                     PropertyProperty))
    (domain (Property-Value))
    (range (Property-Value))
    (inverse (less-than))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(from-value-of has 
    (inverse (from-value))
    (range (Decrease
               Increase))
    (domain (Property-Value))
    (instance-of (Slot)))
(from-value has 
    (instance-of (Slot
                     PropertyProperty))
    (domain (Increase
                Decrease))
    (range (Property-Value))
    (inverse (from-value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t)))
(frequency-of has 
    (inverse (frequency))
    (range (Event))
    (domain (Frequency-Value))
    (instance-of (Slot)))
(frequency has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Frequency-Value))
    (scale-class (Frequency-Scale))
    (scalar-constant-class (Frequency-Constant))
    (cardinal-unit-class (UoM-Frequency))
    (inverse (frequency-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "frequency" 1 "n") (:triple "frequence" 1 "n") (:triple "oftenness" 1 "n")))))
(first-subevent-of has 
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is the first subevent of")))
(first-subevent has 
    (instance-of (Slot
                     Meronymic-Relation))
    (superslots (subevent))
    (domain (Event))
    (range (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("has as first subevent")))
(first-element-of has 
    (range (Aggregate))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is the first element of")))
(first-element has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Aggregate))
    (range (Entity))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (text-gloss ("has as first element")))
(feature-slot-of has 
    (range (Thing))
    (domain (Slot))
    (instance-of (Slot)))
(feature-slot has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (range (Slot))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(experiencer-of has 
    (inverse (experiencer))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("experiences")))
(experiencer has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Event))
    (range (Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (experiencer-of))
    (cardinality (N-to-N))
    (text-gloss ("is experienced by"))
    (required-slot-of (Be-Known
                          Sense))
    (primary-slot-of (State)))
(equilibrium-concentration-of has 
    (inverse (equilibrium-concentration))
    (range (Chemical))
    (domain (Concentration-Value))
    (instance-of (Slot))
    (combine-values-by-appending (t)))
(equilibrium-concentration has 
    (instance-of (Property))
    (domain (Chemical))
    (range (Concentration-Value))
    (scalar-constant-class (Concentration-Constant))
    (cardinal-unit-class (UoM-Concentration))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (equilibrium-concentration-of))
    (cardinality (N-to-1)))
(equation-uses has 
    (instance-of (KM-Slot-Group))
    (domain (Equation-Set))
    (inverse (used-in-equation))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (shaken-ui-hidden-slot (f)))
(equation-symbol-of has 
    (range (Equation-Set))
    (instance-of (Slot)))
(equation-symbol has 
    (instance-of (KM-Slot-Group))
    (domain (Equation-Set))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (shaken-ui-hidden-slot (f)))
(equation-of has 
    (range (System))
    (domain (Equation-Set))
    (instance-of (Slot)))
(equation-expression-of has 
    (range (Equation-Set))
    (instance-of (Slot)))
(equation-expression has 
    (instance-of (KM-Slot-Group))
    (domain (Equation-Set))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (shaken-ui-hidden-slot (f)))
(equation has 
    (instance-of (KM-Slot-Group))
    (domain (System))
    (range (Equation-Set))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (shaken-ui-hidden-slot (f)))
(energy-of has 
    (instance-of (Slot))
    (inverse (energy))
    (range (Entity))
    (domain (Energy-Value)))
(energy has 
    (instance-of (Property))
    (domain (Entity))
    (range (Energy-Value))
    (scalar-constant-class (Energy-Constant))
    (cardinal-unit-class (UoM-Energy))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (energy-of))
    (cardinality (N-to-1)))
(enemy-of has 
    (inverse (enemy))
    (range (Event))
    (domain (Military-Unit))
    (instance-of (Slot)))
(enemy-attrition-rate-of has 
    (inverse (enemy-attrition-rate))
    (range (Military-Task))
    (domain (Enemy-Attrition-Rate-Value))
    (instance-of (Slot)))
(enemy-attrition-rate has 
    (instance-of (Property))
    (domain (Military-Task))
    (range (Enemy-Attrition-Rate-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Enemy-Attrition-Rate-Constant))
    (inverse (enemy-attrition-rate-of))
    (inherit-with-overrides (t))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(enemy has 
    (instance-of (KM-Slot-Group))
    (domain (Event))
    (range (Military-Unit))
    (inverse (enemy-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(encloses has 
    (inverse (is-inside))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (wn20-synset ((:set (:triple "enclose" 0 "n"))))
    (text-gloss ("encloses")))
(enables has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (enabled-by))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("enables"))
    (required-slot-of (Supply)))
(enabled-by has 
    (inverse (enables))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-gloss ("is enabled by")))
(element-type-of has 
    (instance-of (Slot)))
(element-of has 
    (range (Aggregate))
    (domain (Thing))
    (instance-of (Slot))
    (text-gloss ("is an element of")))
(element has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Aggregate))
    (range (Thing))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (text-gloss ("has as element")))
(electronegativity-of has 
    (inverse (electronegativity))
    (range (Atom))
    (domain (Electronegativity-Value))
    (instance-of (Slot)))
(electronegativity has 
    (instance-of (Property))
    (domain (Atom))
    (range (Electronegativity-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Electronegativity-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (electronegativity-of))
    (cardinality (N-to-1)))
(electrolyte-status-of has 
    (inverse (electrolyte-status))
    (range (Ionic-Compound-Substance))
    (domain (Electrolyte-Status-Value))
    (instance-of (Slot)))
(electrolyte-status has 
    (instance-of (Property))
    (domain (Ionic-Compound-Substance))
    (range (Electrolyte-Status-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Electrolyte-Status-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (electrolyte-status-of))
    (cardinality (N-to-1)))
(electric-resistance-of has 
    (instance-of (Slot))
    (inverse (electric-resistance))
    (range (Entity))
    (domain (Electric-Resistance-Value)))
(electric-resistance has 
    (instance-of (Property))
    (domain (Entity))
    (range (Electric-Resistance-Value))
    (scalar-constant-class (Electric-Resistance-Constant))
    (cardinal-unit-class (UoM-Electric-Resistance))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (electric-resistance-of))
    (cardinality (N-to-1)))
(electric-current-of has 
    (instance-of (Slot))
    (inverse (electric-current))
    (range (Entity))
    (domain (Electric-Current-Value)))
(electric-current has 
    (instance-of (Property))
    (domain (Entity))
    (range (Electric-Current-Value))
    (scalar-constant-class (Electric-Current-Constant))
    (cardinal-unit-class (UoM-Electric-Current))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (electric-current-of))
    (cardinality (N-to-1)))
(edit-state-of has 
    (range (Thing))
    (instance-of (Slot)))
(edit-state has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-1)))
(duration-of has 
    (inverse (duration))
    (range (Time-Interval
               Event))
    (domain (Duration-Value))
    (instance-of (Slot)))
(duration has 
    (instance-of (Slot
                     EventProperty))
    (domain (Event
                Time-Interval))
    (range (Duration-Value))
    (scalar-constant-class (Duration-Constant))
    (cardinal-unit-class (UoM-Duration))
    (scale-class (Duration-Scale))
    (inverse (duration-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "duration" 1 "n") (:triple "duration" 2 "n") (:triple "duration" 3 "n") (:triple "continuance" 2 "n") (:triple "continuance" 3 "n") (:triple "time" 5 "n")))))
(donor-of has 
    (inverse (donor))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is the donor of")))
(donor has 
    (instance-of (Slot
                     Participant-Relation
                     Agentive-Relation))
    (domain (Event))
    (range (Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (donor-of))
    (text-slot (text-donor))
    (cardinality (N-to-N))
    (primary-slot-of (Deliver
                         Obtain
                         Receive
                         Transfer
                         Genetic-Information-Transfer
                         Reduction))
    (required-slot-of (Donate
                          Feed
                          Give
                          Lose
                          Relinquish
                          Send
                          Supply
                          Take
                          Chemical-Bond-Energy-Transfer
                          Chemical-Energy-Transfer
                          Citric-Acid-Cycle
                          Depurination
                          Electron-Transfer
                          Energy-Transfer
                          Eucaryotic-Gene-To-Protein-Expression
                          Gene-Expression
                          Gene-To-Protein-Expression
                          Oxidation
                          Oxido-Reduction-Reaction
                          Procaryotic-Gene-To-Protein-Expression)))
(does-not-enclose has 
    (inverse (is-outside))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("does not enclose")))
(doc-file-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(doc-file has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-1)))
(distance-of has 
    (inverse (distance))
    (range (Event))
    (domain (Length-Value))
    (instance-of (Slot)))
(distance has 
    (instance-of (Slot
                     EventProperty))
    (domain (Event))
    (range (Length-Value))
    (scale-class (Distance-Scale))
    (scalar-constant-class (Distance-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (distance-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "distance" 1 "n") (:triple "displacement" 3 "n") (:triple "translation" 7 "n")))))
(disjunctive-next-events-of has 
    (range (Event))
    (domain (Event))
    (instance-of (Slot)))
(disjunctive-next-events has 
    (instance-of (Meronymic-Relation))
    (superslots (next-event))
    (domain (Event))
    (range (Event))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(direction-of has 
    (inverse (direction))
    (range (Event))
    (domain (Angle-Value))
    (instance-of (Slot)))
(direction has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Angle-Value))
    (scalar-constant-class (Direction-Constant))
    (cardinal-unit-class (UoM-Angle))
    (inverse (direction-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "direction" 1 "n") (:triple "direction" 2 "n") (:triple "way" 7 "n")))))
(diameter-of has 
    (inverse (diameter))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(diameter has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Diameter-Scale))
    (scalar-constant-class (Diameter-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (diameter-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "diameter" 1 "n") (:triple "diam" 1 "n")))))
(destination-of has 
    (inverse (destination))
    (range (Event))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is the destination of")))
(destination has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Event))
    (range (Spatial-Entity))
    (inverse (destination-of))
    (text-slot (text-destination))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (required-slot-of (Absorb
                          Come-Together
                          Go-To
                          Invade
                          Move-Into
                          Move-Together
                          Take-In
                          Trespass
                          Endocytose
                          Phagocytose
                          Pinocytose))
    (primary-slot-of (Carry
                         Emit
                         Enter
                         Exit
                         Fall
                         Go-Through
                         Leave
                         Load
                         Move-Through
                         Move
                         Send
                         Slide
                         DNA-Strand-Replication
                         DNA-Synthesis
                         Half-Replicon-Replication
                         Procaryotic-DNA-Synthesis)))
(description-of has 
    (range (Thing))
    (domain (String))
    (instance-of (Slot)))
(description has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (range (String))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(depth-of has 
    (inverse (depth))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(depth has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Depth-Scale))
    (scalar-constant-class (Depth-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (depth-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "depth" 1 "n")))))
(density-of has 
    (inverse (density))
    (range (Tangible-Entity))
    (domain (Density-Value))
    (instance-of (Slot)))
(density has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Density-Value))
    (scale-class (Density-Scale))
    (scalar-constant-class (Density-Constant))
    (cardinal-unit-class (UoM-Density))
    (inverse (density-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "density" 1 "n") (:triple "denseness" 3 "n")))))
(defeats has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Action))
    (range (State))
    (inverse (defeated-by))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-N))
    (text-gloss ("defeats")))
(defeated-by-class-of has 
    (range (Thing))
    (instance-of (Slot)))
(defeated-by-class has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(defeated-by has 
    (inverse (defeats))
    (range (Action))
    (domain (State))
    (instance-of (Slot))
    (text-gloss ("is defeated by")))
(default-kb-of has 
    (inverse (default-kb))
    (range (Base-Role))
    (domain (Equilibrium-Constant-Value))
    (instance-of (Slot)))
(default-kb has 
    (instance-of (Property))
    (domain (Base-Role))
    (range (Equilibrium-Constant-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (default-kb-of))
    (cardinality (N-to-1)))
(default-ka-of has 
    (inverse (default-ka))
    (range (Acid-Role))
    (domain (Equilibrium-Constant-Value))
    (instance-of (Slot)))
(default-ka has 
    (instance-of (Property))
    (domain (Acid-Role))
    (range (Equilibrium-Constant-Value))
    (cardinal-unit-class (UoM-Unitless))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (default-ka-of))
    (cardinality (N-to-1)))
(default-combat-power-of has 
    (inverse (default-combat-power))
    (range (Military-Equipment
               Military-Unit))
    (domain (Default-Combat-Power-Value))
    (instance-of (Slot)))
(default-combat-power has 
    (instance-of (Property))
    (domain (Military-Unit
                Military-Equipment))
    (range (Default-Combat-Power-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Default-Combat-Power-Constant))
    (inverse (default-combat-power-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(dcs-list-of has 
    (inverse (dcs-list))
    (range (Event))
    (instance-of (Slot)))
(dcs-list has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (inverse (dcs-list-of))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(critique-score-of has 
    (inverse (critique-score))
    (range (Critique-Group))
    (domain (Critique-Score-Value))
    (instance-of (Slot)))
(critique-score has 
    (instance-of (Property))
    (domain (Critique-Group))
    (range (Critique-Score-Value))
    (scale-class (Critique-Score-Scale))
    (scalar-constant-class (Critique-Score-Constant))
    (inverse (critique-score-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(context-of has 
    (inverse (context))
    (range (Thing))
    (instance-of (Slot)))
(context has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (context-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(content-of has 
    (inverse (content))
    (range (Container))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is the content of")))
(content has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Container))
    (range (Entity))
    (inverse (content-of))
    (text-slot (text-content))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("contains")))
(consistency-of has 
    (inverse (consistency))
    (range (Tangible-Entity))
    (domain (Consistency-Value))
    (instance-of (Slot)))
(consistency has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Consistency-Value))
    (categorical-constant-class (Consistency-Constant))
    (inverse (consistency-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "consistency" 1 "n") (:triple "consistence" 2 "n") (:triple "body" 8 "n")))))
(conductivity-of has 
    (instance-of (Slot))
    (inverse (conductivity))
    (range (Chemical))
    (domain (Conductivity-Value))
    (combine-values-by-appending (t)))
(conductivity has 
    (instance-of (Property))
    (domain (Chemical))
    (range (Conductivity-Value))
    (scale-class (Conductivity-Scale))
    (scalar-constant-class (Conductivity-Constant))
    (cardinal-unit-class (UoM-Concentration))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (conductivity-of))
    (cardinality (N-to-1)))
(concentration-of has 
    (instance-of (Slot))
    (inverse (concentration))
    (range (Chemical))
    (domain (Concentration-Value))
    (combine-values-by-appending (t)))
(concentration has 
    (instance-of (Property))
    (domain (Chemical))
    (range (Concentration-Value))
    (scalar-constant-class (Concentration-Constant))
    (cardinal-unit-class (UoM-Concentration))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (concentration-of))
    (cardinality (N-to-1)))
(computed-value-of has 
    (instance-of (Slot)))
(computed-value has 
    (instance-of (CLIB-Slot-Group))
    (shaken-ui-hidden-slot (t))
    (superslots (value)))
(component-of has 
    (range (System))
    (domain (Thing))
    (instance-of (Slot)))
(component has 
    (instance-of (KM-Slot-Group))
    (domain (System))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (shaken-ui-hidden-slot (f)))
(complete-ionic-equation-of has 
    (inverse (complete-ionic-equation))
    (range (Reaction))
    (domain (Thing))
    (instance-of (Slot)))
(complete-ionic-equation has 
    (instance-of (Property))
    (domain (Reaction))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (complete-ionic-equation-of))
    (cardinality (N-to-1)))
(complement-of has 
    (inverse (complement))
    (range (Spatial-Entity))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is a complement of")))
(complement has 
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Non-Fluent))
    (inverse (complement-of))
    (cardinality (N-to-N))
    (text-gloss ("is a complement of")))
(combat-strength-of has 
    (instance-of (Slot))
    (inverse (combat-strength))
    (range (Military-Unit))
    (domain (Combat-Strength-Value)))
(combat-strength has 
    (instance-of (Property))
    (domain (Military-Unit))
    (range (Combat-Strength-Value))
    (scale-class (Combat-Strength-Scale))
    (scalar-constant-class (Combat-Strength-Constant))
    (inverse (combat-strength-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(combat-power-ratio-of has 
    (instance-of (Slot))
    (inverse (combat-power-ratio))
    (range (Event))
    (domain (Combat-Power-Ratio-Value)))
(combat-power-ratio has 
    (instance-of (Property))
    (domain (Event))
    (range (Combat-Power-Ratio-Value))
    (scale-class (Combat-Power-Ratio-Scale))
    (scalar-constant-class (Combat-Power-Ratio-Constant))
    (cardinal-unit-class (UoM-Unitless))
    (inverse (combat-power-ratio-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(color-of has 
    (inverse (color))
    (range (Spatial-Entity))
    (domain (Color-Value))
    (instance-of (Slot)))
(color has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Color-Value))
    (categorical-constant-class (Color-Constant))
    (inverse (color-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "color" 1 "n") (:triple "color" 2 "n") (:triple "colour" 6 "n") (:triple "coloring" 2 "n") (:triple "colouring" 2 "n") (:triple "colour" 8 "n")))))
(coefficient-of has 
    (inverse (coefficient))
    (range (Chemical))
    (domain (Coefficient-Value))
    (instance-of (Slot)))
(coefficient has 
    (instance-of (Property))
    (domain (Chemical))
    (range (Coefficient-Value))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (coefficient-of))
    (cardinality (N-to-1)))
(cmap-correspondence-of has 
    (range (Thing))
    (instance-of (Slot)))
(cmap-correspondence has 
    (instance-of (Slot
                     Shaken-Slot-Group))
    (domain (Thing))
    (cardinality (N-to-N)))
(circumference-of has 
    (inverse (circumference))
    (range (Spatial-Entity))
    (domain (Length-Value))
    (instance-of (Slot)))
(circumference has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Length-Value))
    (scale-class (Circumference-Scale))
    (scalar-constant-class (Circumference-Constant))
    (cardinal-unit-class (UoM-Length))
    (inverse (circumference-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "circumference" 2 "n")))))
(chemical-period-of has 
    (inverse (chemical-period))
    (range (Atom))
    (domain (Number))
    (instance-of (Slot)))
(chemical-period has 
    (instance-of (Property))
    (domain (Atom))
    (range (Number))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (chemical-period-of))
    (cardinality (N-to-1)))
(chemical-equation-of has 
    (inverse (chemical-equation))
    (range (Reaction))
    (domain (Thing))
    (instance-of (Slot)))
(chemical-equation has 
    (instance-of (Property))
    (domain (Reaction))
    (range (Thing))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (chemical-equation-of))
    (cardinality (N-to-1)))
(charge-of has 
    (instance-of (Slot))
    (inverse (charge))
    (range (Chemical-Entity))
    (domain (Charge-Value)))
(charge has 
    (instance-of (Property))
    (domain (Chemical-Entity))
    (range (Charge-Value))
    (scalar-constant-class (Charge-Constant))
    (cardinal-unit-class (UoM-Charge))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (charge-of))
    (cardinality (N-to-1)))
(causes has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (caused-by))
    (text-slot (text-causes))
    (cardinality (N-to-N))
    (required-slot-of (Let-Fall)))
(caused-by-class-of has 
    (range (Thing))
    (instance-of (Slot)))
(caused-by-class has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Thing))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(caused-by has 
    (inverse (causes))
    (range (Event))
    (domain (Event))
    (instance-of (Slot))
    (text-slot (text-caused-by)))
(categorical-value-of has 
    (inverse (categorical-value))
    (range (Property-Value))
    (domain (Categorical))
    (instance-of (Slot)))
(categorical-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (range (Categorical))
    (inverse (categorical-value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(categorical-constant-of has 
    (inverse (categorical-constant))
    (range (Categorical))
    (domain (Constant))
    (instance-of (Slot)))
(categorical-constant-class-of has 
    (instance-of (Slot))
    (range (Property))
    (domain (Constant)))
(categorical-constant-class has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Property))
    (range (Constant))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(categorical-constant has 
    (instance-of (CLIB-Slot-Group))
    (domain (Categorical))
    (range (Constant))
    (inverse (categorical-constant-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent)))
(cardinal-value-of has 
    (inverse (cardinal-value))
    (range (Property-Value))
    (domain (Cardinal))
    (instance-of (Slot)))
(cardinal-value has 
    (instance-of (CLIB-Slot-Group))
    (domain (Property-Value))
    (range (Cardinal))
    (inverse (cardinal-value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(cardinal-unit-class-of has 
    (instance-of (Slot))
    (range (Property))
    (domain (Unit-of-Measurement)))
(cardinal-unit-class has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Property))
    (range (Unit-of-Measurement))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(capacity-of has 
    (inverse (capacity))
    (range (Spatial-Entity))
    (domain (Capacity-Value))
    (instance-of (Slot)))
(capacity has 
    (instance-of (Slot
                     EntityProperty))
    (domain (Spatial-Entity))
    (range (Capacity-Value))
    (scale-class (Capacity-Scale))
    (scalar-constant-class (Capacity-Constant))
    (inverse (capacity-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "capacity" 3 "n") (:triple "capacity" 6 "n") (:triple "content" 4 "n")))))
(capacitance-of has 
    (inverse (capacitance))
    (range (Entity))
    (domain (Charge-Value))
    (instance-of (Slot)))
(capacitance has 
    (instance-of (Property))
    (domain (Entity))
    (range (Charge-Value))
    (scalar-constant-class (Charge-Constant))
    (cardinal-unit-class (UoM-Charge))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (capacitance-of))
    (cardinality (N-to-1)))
(capability-of has 
    (inverse (capability))
    (range (Entity))
    (domain (Role))
    (instance-of (Slot))
    (text-gloss ("is a capability of")))
(capability has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Entity))
    (range (Role))
    (fluent-status (*Inertial-Fluent))
    (inverse (capability-of))
    (cardinality (N-to-N))
    (text-gloss ("has the capability to be")))
(by-means-of has 
    (instance-of (Slot
                     Causal-Relation))
    (domain (Event))
    (range (Event))
    (inverse (means-by-which))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("is done by means of"))
    (primary-slot-of (Break
                         Copy
                         Create
                         Damage
                         Duplicate
                         Harm
                         Impair
                         Ruin
                         Glycolysis
                         Lipolysis
                         Nucleic-Acid-Degradation
                         Proteolysis
                         Ribonucleic-Acid-Degradation)))
(buffer-status-of has 
    (inverse (buffer-status))
    (range (Solution))
    (domain (Buffer-Status-Value))
    (instance-of (Slot)))
(buffer-status has 
    (instance-of (Property))
    (domain (Solution))
    (range (Buffer-Status-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Buffer-Status-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (buffer-status-of))
    (cardinality (N-to-1)))
(buffer-capacity-of has 
    (inverse (buffer-capacity))
    (range (Buffer))
    (domain (Buffer-Capacity-Value))
    (instance-of (Slot)))
(buffer-capacity has 
    (instance-of (Property))
    (domain (Buffer))
    (range (Buffer-Capacity-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Buffer-Capacity-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (buffer-capacity-of))
    (cardinality (N-to-1)))
(brightness-of has 
    (inverse (brightness))
    (range (Tangible-Entity))
    (domain (Brightness-Value))
    (instance-of (Slot)))
(brightness has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Brightness-Value))
    (scalar-constant-class (Brightness-Constant))
    (cardinal-unit-class (UoM-Brightness))
    (scale-class (Brightness-Scale))
    (inverse (brightness-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "brightness" 1 "n") (:triple "brightness" 3 "n") (:triple "luminosity" 1 "n") (:triple "brightness level" 1 "n") (:triple "luminance" 1 "n") (:triple "luminousness" 1 "n") (:triple "light" 4 "n")))))
(breakability-of has 
    (inverse (breakability))
    (range (Tangible-Entity))
    (domain (Breakability-Value))
    (instance-of (Slot)))
(breakability has 
    (instance-of (EntityProperty))
    (domain (Tangible-Entity))
    (range (Breakability-Value))
    (scale-class (Breakability-Scale))
    (scalar-constant-class (Breakability-Constant))
    (inverse (breakability-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "breakability" 1 "n") (:triple "fragility" 1 "n")))))
(beneficiary-of has 
    (inverse (beneficiary))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-gloss ("is beneficiary of")))
(beneficiary has 
    (instance-of (Slot
                     Participant-Relation))
    (domain (Event))
    (range (Entity))
    (fluent-status (*Inertial-Fluent))
    (inverse (beneficiary-of))
    (text-slot (text-beneficiary))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "benefactive_role" 1 "n") (:triple "beneficiary" 2 "n") (:triple "profit" 1 "v") (:triple "gain" 3 "v") (:triple "benefit" 1 "v") (:triple "benefit" 2 "v") (:triple "do_good" 1 "v"))))
    (required-slot-of (Donate)))
(base-of has 
    (inverse (base))
    (domain (Thing))
    (instance-of (Slot))
    (range (Solution
               Event))
    (combine-values-by-appending (t))
    (text-gloss ("is the base of")))
(base-dissociation-ratio-of has 
    (inverse (base-dissociation-ratio))
    (range (Thing))
    (instance-of (Slot)))
(base-dissociation-ratio has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (base-dissociation-ratio-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(base has 
    (instance-of (Slot
                     Participant-Relation))
    (range (Thing))
    (inverse (base-of))
    (text-slot (text-base))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (domain (Event
                Solution))
    (required-slot-of (Add
                          Admit
                          Attach
                          Be-Confined
                          Be-Shut-Out
                          Be-Stored
                          Break-Contact
                          Confine
                          Detach
                          Enter
                          Load
                          Make-Contact
                          Move-Into
                          Move-Out-Of
                          Move-Through
                          Release
                          Remove
                          Replace
                          Shut-Out
                          Store
                          Withdraw
                          ATP-Synthesis
                          Cytosine-Deamination
                          DNA-Mismatch-Repair
                          DNA-Repair
                          Damaged-DNA-Repair
                          Deamination
                          Dephosphorylation
                          Ligation
                          Oxidative-Phosphorylation
                          Phosphorylation))
    (primary-slot-of (Allocate-Resource
                         Be-Accessible
                         Be-Available
                         Be-Concealed
                         Be-Inaccessible
                         Be-Stable
                         Be-Unavailable
                         Collide
                         Conceal
                         Expose
                         Make-Accessible
                         Make-Inaccessible
                         Release-Resource
                         Base-Pairing
                         DNA-Chain-Elongation
                         TRNA-Charging)))
(away-from-of has 
    (inverse (away-from))
    (range (Event))
    (domain (Spatial-Entity))
    (instance-of (Slot))
    (text-gloss ("is away from")))
(away-from has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Event))
    (range (Spatial-Entity))
    (inverse (away-from-of))
    (text-slot (text-away-from))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (secondary-slot-of (Move)))
(available-force-ratio-of has 
    (inverse (available-force-ratio))
    (range (Military-Task))
    (domain (Available-Force-Ratio-Value))
    (instance-of (Slot)))
(available-force-ratio has 
    (instance-of (Property))
    (domain (Military-Task))
    (range (Available-Force-Ratio-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Available-Force-Ratio-Constant))
    (inverse (available-force-ratio-of))
    (inherit-with-overrides (t))
    (fluent-status (*Fluent))
    (cardinality (N-to-1)))
(auxiliary-questions has 
    (instance-of (KM-Slot-Group))
    (domain (Question))
    (range (Question))
    (inverse (auxiliary-question-of))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(auxiliary-question-of has 
    (inverse (auxiliary-questions))
    (range (Question))
    (domain (Question))
    (instance-of (Slot)))
(atomic-weight-of has 
    (inverse (atomic-weight))
    (range (Atom))
    (domain (Atomic-Weight-Value))
    (instance-of (Slot)))
(atomic-weight has 
    (instance-of (Property))
    (domain (Atom))
    (range (Atomic-Weight-Value))
    (cardinal-unit-class (UoM-Mass))
    (scalar-constant-class (Atomic-Weight-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (atomic-weight-of))
    (cardinality (N-to-1)))
(atomic-symbol-of has 
    (inverse (atomic-symbol))
    (range (Atom))
    (domain (Class))
    (instance-of (Slot)))
(atomic-symbol has 
    (instance-of (EntityProperty))
    (domain (Atom))
    (range (Class))
    (fluent-status (*Non-Fluent))
    (inherit-with-overrides (t))
    (inverse (atomic-symbol-of))
    (cardinality (N-to-1)))
(atomic-number-of has 
    (inverse (atomic-number))
    (range (Atom))
    (domain (Atomic-Number-Value))
    (instance-of (Slot)))
(atomic-number has 
    (instance-of (Property))
    (domain (Atom))
    (range (Atomic-Number-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Atomic-Number-Constant))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (inverse (atomic-number-of))
    (cardinality (N-to-1)))
(atomic-chemical-formula-of has 
    (inverse (atomic-chemical-formula))
    (range (Chemical-Entity))
    (domain (Chemical-Formula))
    (instance-of (Slot)))
(atomic-chemical-formula has 
    (instance-of (EntityProperty))
    (domain (Chemical-Entity))
    (range (Chemical-Formula))
    (fluent-status (*Inertial-Fluent))
    (cardinality (1-to-1))
    (inherit-with-overrides (t))
    (inverse (atomic-chemical-formula-of)))
(area-of has 
    (inverse (area))
    (range (Spatial-Entity))
    (domain (Area-Value))
    (instance-of (Slot)))
(area has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Area-Value))
    (scale-class (Area-Scale))
    (scalar-constant-class (Area-Constant))
    (cardinal-unit-class (UoM-Area))
    (inverse (area-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "area" 6 "n") (:triple "expanse" 2 "n") (:triple "surface area" 1 "n")))))
(animacy-of has 
    (inverse (animacy))
    (range (Entity))
    (domain (Animacy-Value))
    (instance-of (Slot)))
(animacy has 
    (instance-of (EntityProperty))
    (domain (Entity))
    (range (Animacy-Value))
    (categorical-constant-class (Animacy-Constant))
    (inverse (animacy-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "animateness" 1 "n") (:triple "aliveness" 2 "n") (:triple "liveness" 1 "n")))))
(angle-of has 
    (inverse (angle))
    (range (Spatial-Entity))
    (domain (Angle-Value))
    (instance-of (Slot)))
(angle has 
    (instance-of (EntityProperty))
    (domain (Spatial-Entity))
    (range (Angle-Value))
    (scalar-constant-class (Angle-Constant))
    (cardinal-unit-class (UoM-Angle))
    (inverse (angle-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "angle" 1 "n")))))
(allegiance-of has 
    (instance-of (Slot))
    (inverse (allegiance))
    (range (Entity))
    (domain (Allegiance-Value))
    (combine-values-by-appending (t)))
(allegiance has 
    (instance-of (Property))
    (domain (Entity))
    (range (Allegiance-Value))
    (categorical-constant-class (Allegiance-Constant))
    (inverse (allegiance-of))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (cardinality (N-to-1)))
(all-subevents-of has 
    (range (Event))
    (domain (Event))
    (instance-of (Slot)))
(all-subevents has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (range (Event))
    (fluent-status (*Non-Fluent))
    (cardinality (N-to-N)))
(agent-of has 
    (inverse (agent))
    (range (Event))
    (domain (Entity))
    (instance-of (Slot))
    (text-slot (text-agent-of))
    (combine-values-by-appending (t)))
(agent-attrition-rate-of has 
    (inverse (agent-attrition-rate))
    (range (Military-Task))
    (domain (Agent-Attrition-Rate-Value))
    (instance-of (Slot)))
(agent-attrition-rate has 
    (instance-of (Property))
    (domain (Military-Task))
    (range (Agent-Attrition-Rate-Value))
    (cardinal-unit-class (UoM-Unitless))
    (scalar-constant-class (Agent-Attrition-Rate-Constant))
    (inverse (agent-attrition-rate-of))
    (inherit-with-overrides (t))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-1)))
(agent has 
    (instance-of (Slot
                     Participant-Relation
                     Agentive-Relation))
    (domain (Event))
    (range (Entity))
    (inverse (agent-of))
    (fluent-status (*Inertial-Fluent))
    (text-slot (text-agent))
    (cardinality (N-to-N))
    (wn20-synset ((:set (:triple "agentive_role" 1 "n") (:triple "agent" 6 "n") (:triple "actor" 2 "n") (:triple "doer" 1 "n") (:triple "worker" 4 "n"))))
    (required-slot-of (Absorb
                          Be-Held
                          Carry
                          Command
                          Deceive
                          Donate
                          Eat
                          Enter
                          Exit
                          Express
                          Feed
                          Follow
                          Forget
                          Give
                          Go-Through
                          Go-To
                          Hold
                          Inquire
                          Interpret
                          Invade
                          Learn
                          Leave
                          Let-Fall
                          Let-Go-Of
                          Lie
                          Locomotion
                          Penetrate
                          Relinquish
                          Send
                          Supply
                          Take-Control
                          Take-In
                          Teach
                          Trespass
                          Amoeboid-Cell-Locomotion
                          Cell-Locomotion))
    (primary-slot-of (Action
                         Activate
                         Add
                         Admit
                         Allocate-Resource
                         Attach
                         Block
                         Breach
                         Break-Contact
                         Break
                         Close
                         Collide
                         Communicate
                         Conceal
                         Confine
                         Convey
                         Copy
                         Create
                         Damage
                         Deactivate
                         Deliver
                         Detach
                         Duplicate
                         Emit
                         Expose
                         Harm
                         Impair
                         Lose
                         Make-Accessible
                         Make-Contact
                         Make-Inaccessible
                         Move-Apart
                         Move-Into
                         Move-Out-Of
                         Move-Through
                         Move-Together
                         Move
                         Obstruct
                         Open
                         Perceive
                         Produce
                         Receive
                         Recognize
                         Release-Resource
                         Release
                         Remove
                         Restrain
                         Ruin
                         Shut-Out
                         Slide
                         Store
                         Take-Apart
                         Take-In
                         Transfer
                         Transmit
                         Unblock
                         Unobstruct
                         Unrestrain
                         Withdraw
                         ATP-Hydrolysis
                         ATP-Synthesis
                         Base-Pairing
                         Biosynthesize
                         Catabolize
                         Catalyze
                         Cellular-Respiration
                         Chemical-Bond-Energy-Transfer
                         Chemical-Energy-Transfer
                         Citric-Acid-Cycle
                         Cytosine-Deamination
                         DNA-Chain-Elongation
                         DNA-Ligation
                         DNA-Melting
                         DNA-Transcription
                         Damaged-DNA-Repair
                         Deamination
                         Dephosphorylation
                         Depurination
                         Diffuse
                         Electron-Transfer
                         Endocytose
                         Energy-Transfer
                         Enzyme-Activation
                         Enzyme-Catalysis
                         Eucaryotic-DNA-Transcription
                         Eucaryotic-Gene-To-Protein-Expression
                         Gene-Expression
                         Gene-To-Protein-Expression
                         Genetic-Information-Transfer
                         Glycolysis
                         Ligation
                         Lipid-Synthesis
                         Lipolysis
                         Metabolize
                         Nucleic-Acid-Degradation
                         Oxidation
                         Oxidative-Phosphorylation
                         Oxido-Reduction-Reaction
                         Phagocytose
                         Phosphorylation
                         Pinocytose
                         Polymerize
                         Procaryotic-DNA-Transcription
                         Procaryotic-Gene-To-Protein-Expression
                         Proteolysis
                         RNA-Translation
                         Reduction
                         Replicon-DNA-Melting
                         Ribonucleic-Acid-Degradation
                         TRNA-Charging)))
(age-of has 
    (inverse (age))
    (range (Entity))
    (domain (Duration-Value))
    (instance-of (Slot)))
(age has 
    (instance-of (EntityProperty))
    (domain (Entity))
    (range (Duration-Value))
    (scale-class (Age-Scale))
    (scalar-constant-class (Age-Constant))
    (cardinal-unit-class (UoM-Duration))
    (fluent-status (*Inertial-Fluent))
    (inverse (age-of))
    (cardinality (N-to-1))
    (wn20-synset ((:set (:triple "age" 1 "n")))))
(actions-of has 
    (inverse (actions))
    (range (Event))
    (domain (Event))
    (instance-of (Slot)))
(actions has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Event))
    (range (Event))
    (inverse (actions-of))
    (cardinality (N-to-N))
    (fluent-status (*Non-Fluent)))
(acid-dissociation-ratio-of has 
    (inverse (acid-dissociation-ratio))
    (range (Thing))
    (instance-of (Slot)))
(acid-dissociation-ratio has 
    (instance-of (CLIB-Slot-Group))
    (domain (Thing))
    (shaken-ui-hidden-slot (t))
    (inverse (acid-dissociation-ratio-of))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N)))
(acceleration-of has 
    (inverse (acceleration))
    (range (Event))
    (domain (Acceleration-Value))
    (instance-of (Slot)))
(acceleration has 
    (instance-of (EventProperty))
    (domain (Event))
    (range (Acceleration-Value))
    (scale-class (Acceleration-Scale))
    (scalar-constant-class (Acceleration-Constant))
    (cardinal-unit-class (UoM-Acceleration))
    (inverse (acceleration-of))
    (cardinality (N-to-1))
    (fluent-status (*Inertial-Fluent))
    (wn20-synset ((:set (:triple "acceleration" 1 "n") (:triple "acceleration" 2 "n") (:triple "quickening" 3 "n") (:triple "speedup" 1 "n") (:triple "acceleration" 3 "n") (:triple "accelerating" 0 "n")))))
(abuts has 
    (instance-of (Slot
                     Spatial-Relation))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (abuts))
    (text-slot (text-abuts))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent)))
(value has 
    (instance-of (Slot
                     CLIB-Slot-Group))
    (domain (Property-Group))
    (inverse (value-of))
    (cardinality (N-to-N))
    (fluent-status (*Inertial-Fluent))
    (inherit-with-overrides (t))
    (dont-cache-values (t))
    (shaken-ui-hidden-slot (f))
    )
(subevent has 
                             
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Event))
    (range (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inverse (subevent-of))
    (wn20-synset ((:set (:triple "step" 1 "n"))))
    (text-gloss ("has as subevent"))
    (secondary-slot-of (Action))
    (primary-slot-of (Come-Together
                         Disperse
                         Move-Apart
                         Move-Together
                         Send
                         Diffuse)))
(next-event has 
                                      
    (instance-of (Slot
                     Meronymic-Relation))
    (domain (Event))
    (range (Event))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (inverse (prev-event))
    (text-gloss ("comes before")))
(is-oriented-toward has 
                        
    (instance-of (Slot
                     Spatial-Relation))
    (description ("Spatially oriented toward in at least one of
several possible senses of `oriented toward'.  It could mean, for
example, that FRAME is tilted toward FILLER, or FRAME faces FILLER
(but see is-facing), or the maxor axis of FRAME points toward FILLER,
or FRAME has a rotational axis toward FILLER, etc ."))
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (fluent-status (*Inertial-Fluent))
    (text-slot (text-is-oriented-toward))
    (cardinality (N-to-N)))
(has-part has 
                                                                   
    (instance-of (Slot
                     Meronymic-Relation
                     Spatial-Relation))
    (domain (Entity))
    (range (Entity))
    (inverse (is-part-of))
    (text-slot (text-has-part))
    (fluent-status (*Inertial-Fluent))
    (cardinality (N-to-N))
    (text-gloss ("has"))
    (wn20-synset ((:set (:triple "part" 0 "n")))))

:SITUATION-INSTANCE
 

:THEORY-INSTANCE
 