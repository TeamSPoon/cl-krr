Functions:
==========

indent-and-fontify-defun (bound to F6)
indent-and-fontify-buffer (Control-F6)
km-init-from-files (F7)
km-add-frames-from-file
km-add-names-from-file

km-init-from-files takes as argument a directory <DIR> (by default <HOME>/KMgen/) and
- initializes completions from the file <DIR>/completion-defs.lisp
- initializes indentation and fontification from the files <DIR>/frames.lisp and <DIR>/names.lisp

km-add-frames-from-file takes as argument a file (by default <HOME>/KMgen/frames.lisp) and initializes indentation and fontification from the file

km-add-words-from-file takes as argument a file (by default <HOME>/KMgen/names.lisp) and initializes indentation and fontification from the file

The easiest is to put the following line in the .emacs file:

(km-init-from-files "~/KMgen/")

Symbol types:
=============

There are 5 symbol types: class, slot, anon, nonanon and word

Indentation:
============

The following variables control symbol indentation:
*km-class-indent* (default: 'defun)
*km-slot-indent* (default: 'defun)
*km-anon-indent* (default: 'defun)
*km-nonanon-indent* (default: 'defun)
*km-word-indent* (default: 'defun)
*km-body-indent* (default: 4)

Those variables can be customized from the .emacs file.

Fontification:
==============

The following faces control symbol fontification:
km-class-face (default: lightgreen)
km-slot-face (default: orange)
km-anon-face (default: gray50)
km-nonanon-face (default: darkgreen)
km-word-face (default: purple)

Those faces can be customized from the customization group Programming/Languages/Km/.

Format of completion-defs.lisp (generated by KMgen):
====================================================

Completion database.

<file> = <newline> {<definition> <newline>}*
<definition> = (def <symbol>))

Format of frames.lisp (generated par KMgen):
============================================

File specifying indentation and fontification for symbols defined in frames.

<file> = (<group>*)
<group> = (<group-type> <group-list-of-names> <group-pattern>)
<group-type> = <string (one of "class", "slot", "anon", "nonanon" and "word")>
<group-list-of-names> = (<string>*)
<group-pattern> = <string>

Format of names.lisp:
=====================

File specifying indentation and fontification for various symbols.

<file> = <bloc>*
<bloc> = <type> <newline> {<name> <newline>}*
<type> = <string (one of "class", "slot", "anon", "nonanon" and "word")>
<name> = <symbol>

The file can contain lisp comments and blank lines.
